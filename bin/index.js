
var Module;

if (typeof Module === 'undefined') Module = {};

if (!Module.expectedDataFileDownloads) {
  Module.expectedDataFileDownloads = 0;
  Module.finishedDataFileDownloads = 0;
}
Module.expectedDataFileDownloads++;
(function() {
 var loadPackage = function(metadata) {

    var PACKAGE_PATH;
    if (typeof window === 'object') {
      PACKAGE_PATH = window['encodeURIComponent'](window.location.pathname.toString().substring(0, window.location.pathname.toString().lastIndexOf('/')) + '/');
    } else if (typeof location !== 'undefined') {
      // worker
      PACKAGE_PATH = encodeURIComponent(location.pathname.toString().substring(0, location.pathname.toString().lastIndexOf('/')) + '/');
    } else {
      throw 'using preloaded data can only be done on a web page or in a web worker';
    }
    var PACKAGE_NAME = '/Users/name/gh333/go-ems/bin/index.data';
    var REMOTE_PACKAGE_BASE = 'index.data';
    if (typeof Module['locateFilePackage'] === 'function' && !Module['locateFile']) {
      Module['locateFile'] = Module['locateFilePackage'];
      Module.printErr('warning: you defined Module.locateFilePackage, that has been renamed to Module.locateFile (using your locateFilePackage for now)');
    }
    var REMOTE_PACKAGE_NAME = typeof Module['locateFile'] === 'function' ?
                              Module['locateFile'](REMOTE_PACKAGE_BASE) :
                              ((Module['filePackagePrefixURL'] || '') + REMOTE_PACKAGE_BASE);
  
    var REMOTE_PACKAGE_SIZE = metadata.remote_package_size;
    var PACKAGE_UUID = metadata.package_uuid;
  
    function fetchRemotePackage(packageName, packageSize, callback, errback) {
      var xhr = new XMLHttpRequest();
      xhr.open('GET', packageName, true);
      xhr.responseType = 'arraybuffer';
      xhr.onprogress = function(event) {
        var url = packageName;
        var size = packageSize;
        if (event.total) size = event.total;
        if (event.loaded) {
          if (!xhr.addedTotal) {
            xhr.addedTotal = true;
            if (!Module.dataFileDownloads) Module.dataFileDownloads = {};
            Module.dataFileDownloads[url] = {
              loaded: event.loaded,
              total: size
            };
          } else {
            Module.dataFileDownloads[url].loaded = event.loaded;
          }
          var total = 0;
          var loaded = 0;
          var num = 0;
          for (var download in Module.dataFileDownloads) {
          var data = Module.dataFileDownloads[download];
            total += data.total;
            loaded += data.loaded;
            num++;
          }
          total = Math.ceil(total * Module.expectedDataFileDownloads/num);
          if (Module['setStatus']) Module['setStatus']('Downloading data... (' + loaded + '/' + total + ')');
        } else if (!Module.dataFileDownloads) {
          if (Module['setStatus']) Module['setStatus']('Downloading data...');
        }
      };
      xhr.onload = function(event) {
        var packageData = xhr.response;
        callback(packageData);
      };
      xhr.send(null);
    };

    function handleError(error) {
      console.error('package error:', error);
    };
  
      var fetched = null, fetchedCallback = null;
      fetchRemotePackage(REMOTE_PACKAGE_NAME, REMOTE_PACKAGE_SIZE, function(data) {
        if (fetchedCallback) {
          fetchedCallback(data);
          fetchedCallback = null;
        } else {
          fetched = data;
        }
      }, handleError);
    
  function runWithFS() {

    function assert(check, msg) {
      if (!check) throw msg + new Error().stack;
    }

    function DataRequest(start, end, crunched, audio) {
      this.start = start;
      this.end = end;
      this.crunched = crunched;
      this.audio = audio;
    }
    DataRequest.prototype = {
      requests: {},
      open: function(mode, name) {
        this.name = name;
        this.requests[name] = this;
        Module['addRunDependency']('fp ' + this.name);
      },
      send: function() {},
      onload: function() {
        var byteArray = this.byteArray.subarray(this.start, this.end);

          this.finish(byteArray);

      },
      finish: function(byteArray) {
        var that = this;

        Module['FS_createDataFile'](this.name, null, byteArray, true, true, true); // canOwn this data in the filesystem, it is a slide into the heap that will never change
        Module['removeRunDependency']('fp ' + that.name);

        this.requests[this.name] = null;
      },
    };

        var files = metadata.files;
        for (i = 0; i < files.length; ++i) {
          new DataRequest(files[i].start, files[i].end, files[i].crunched, files[i].audio).open('GET', files[i].filename);
        }

  
    function processPackageData(arrayBuffer) {
      Module.finishedDataFileDownloads++;
      assert(arrayBuffer, 'Loading data file failed.');
      assert(arrayBuffer instanceof ArrayBuffer, 'bad input to processPackageData');
      var byteArray = new Uint8Array(arrayBuffer);
      var curr;
      
        // copy the entire loaded file into a spot in the heap. Files will refer to slices in that. They cannot be freed though
        // (we may be allocating before malloc is ready, during startup).
        if (Module['SPLIT_MEMORY']) Module.printErr('warning: you should run the file packager with --no-heap-copy when SPLIT_MEMORY is used, otherwise copying into the heap may fail due to the splitting');
        var ptr = Module['getMemory'](byteArray.length);
        Module['HEAPU8'].set(byteArray, ptr);
        DataRequest.prototype.byteArray = Module['HEAPU8'].subarray(ptr, ptr+byteArray.length);
  
          var files = metadata.files;
          for (i = 0; i < files.length; ++i) {
            DataRequest.prototype.requests[files[i].filename].onload();
          }
              Module['removeRunDependency']('datafile_/Users/name/gh333/go-ems/bin/index.data');

    };
    Module['addRunDependency']('datafile_/Users/name/gh333/go-ems/bin/index.data');
  
    if (!Module.preloadResults) Module.preloadResults = {};
  
      Module.preloadResults[PACKAGE_NAME] = {fromCache: false};
      if (fetched) {
        processPackageData(fetched);
        fetched = null;
      } else {
        fetchedCallback = processPackageData;
      }
    
  }
  if (Module['calledRun']) {
    runWithFS();
  } else {
    if (!Module['preRun']) Module['preRun'] = [];
    Module["preRun"].push(runWithFS); // FS is not initialized yet, wait for it
  }

 }
 loadPackage({"files": [{"audio": 0, "start": 0, "crunched": 0, "end": 29, "filename": "/main.lua"}], "remote_package_size": 29, "package_uuid": "e3c136ec-15b2-4d5c-8c50-8afb9f4e8db9"});

})();

// The Module object: Our interface to the outside world. We import
// and export values on it, and do the work to get that through
// closure compiler if necessary. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to do an eval in order to handle the closure compiler
// case, where this code here is minified but Module was defined
// elsewhere (e.g. case 4 above). We also need to check if Module
// already exists (e.g. case 3 above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module;
if (!Module) Module = (typeof Module !== 'undefined' ? Module : null) || {};

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
for (var key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_WEB = typeof window === 'object';
// Three configurations we can be running in:
// 1) We could be the application main() thread running in the main JS UI thread. (ENVIRONMENT_IS_WORKER == false and ENVIRONMENT_IS_PTHREAD == false)
// 2) We could be the application main() thread proxied to worker. (with Emscripten -s PROXY_TO_WORKER=1) (ENVIRONMENT_IS_WORKER == true, ENVIRONMENT_IS_PTHREAD == false)
// 3) We could be an application pthread running in a worker. (ENVIRONMENT_IS_WORKER == true and ENVIRONMENT_IS_PTHREAD == true)
var ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
var ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function' && !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_WORKER;
var ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;

if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  if (!Module['print']) Module['print'] = function print(x) {
    process['stdout'].write(x + '\n');
  };
  if (!Module['printErr']) Module['printErr'] = function printErr(x) {
    process['stderr'].write(x + '\n');
  };

  var nodeFS = require('fs');
  var nodePath = require('path');

  Module['read'] = function read(filename, binary) {
    filename = nodePath['normalize'](filename);
    var ret = nodeFS['readFileSync'](filename);
    // The path is absolute if the normalized version is the same as the resolved.
    if (!ret && filename != nodePath['resolve'](filename)) {
      filename = path.join(__dirname, '..', 'src', filename);
      ret = nodeFS['readFileSync'](filename);
    }
    if (ret && !binary) ret = ret.toString();
    return ret;
  };

  Module['readBinary'] = function readBinary(filename) {
    var ret = Module['read'](filename, true);
    if (!ret.buffer) {
      ret = new Uint8Array(ret);
    }
    assert(ret.buffer);
    return ret;
  };

  Module['load'] = function load(f) {
    globalEval(read(f));
  };

  if (!Module['thisProgram']) {
    if (process['argv'].length > 1) {
      Module['thisProgram'] = process['argv'][1].replace(/\\/g, '/');
    } else {
      Module['thisProgram'] = 'unknown-program';
    }
  }

  Module['arguments'] = process['argv'].slice(2);

  if (typeof module !== 'undefined') {
    module['exports'] = Module;
  }

  process['on']('uncaughtException', function(ex) {
    // suppress ExitStatus exceptions from showing an error
    if (!(ex instanceof ExitStatus)) {
      throw ex;
    }
  });

  Module['inspect'] = function () { return '[Emscripten Module object]'; };
}
else if (ENVIRONMENT_IS_SHELL) {
  if (!Module['print']) Module['print'] = print;
  if (typeof printErr != 'undefined') Module['printErr'] = printErr; // not present in v8 or older sm

  if (typeof read != 'undefined') {
    Module['read'] = read;
  } else {
    Module['read'] = function read() { throw 'no read() available (jsc?)' };
  }

  Module['readBinary'] = function readBinary(f) {
    if (typeof readbuffer === 'function') {
      return new Uint8Array(readbuffer(f));
    }
    var data = read(f, 'binary');
    assert(typeof data === 'object');
    return data;
  };

  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

}
else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  Module['read'] = function read(url) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, false);
    xhr.send(null);
    return xhr.responseText;
  };

  if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof console !== 'undefined') {
    if (!Module['print']) Module['print'] = function print(x) {
      console.log(x);
    };
    if (!Module['printErr']) Module['printErr'] = function printErr(x) {
      console.log(x);
    };
  } else {
    // Probably a worker, and without console.log. We can do very little here...
    var TRY_USE_DUMP = false;
    if (!Module['print']) Module['print'] = (TRY_USE_DUMP && (typeof(dump) !== "undefined") ? (function(x) {
      dump(x);
    }) : (function(x) {
      // self.postMessage(x); // enable this if you want stdout to be sent as messages
    }));
  }

  if (ENVIRONMENT_IS_WORKER) {
    Module['load'] = importScripts;
  }

  if (typeof Module['setWindowTitle'] === 'undefined') {
    Module['setWindowTitle'] = function(title) { document.title = title };
  }
}
else {
  // Unreachable because SHELL is dependant on the others
  throw 'Unknown runtime environment. Where are we?';
}

function globalEval(x) {
  eval.call(null, x);
}
if (!Module['load'] && Module['read']) {
  Module['load'] = function load(f) {
    globalEval(Module['read'](f));
  };
}
if (!Module['print']) {
  Module['print'] = function(){};
}
if (!Module['printErr']) {
  Module['printErr'] = Module['print'];
}
if (!Module['arguments']) {
  Module['arguments'] = [];
}
if (!Module['thisProgram']) {
  Module['thisProgram'] = './this.program';
}

// *** Environment setup code ***

// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];

// Callbacks
Module['preRun'] = [];
Module['postRun'] = [];

// Merge back in the overrides
for (var key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}



// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in: 
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at: 
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html

//========================================
// Runtime code shared with compiler
//========================================

var Runtime = {
  setTempRet0: function (value) {
    tempRet0 = value;
  },
  getTempRet0: function () {
    return tempRet0;
  },
  stackSave: function () {
    return STACKTOP;
  },
  stackRestore: function (stackTop) {
    STACKTOP = stackTop;
  },
  getNativeTypeSize: function (type) {
    switch (type) {
      case 'i1': case 'i8': return 1;
      case 'i16': return 2;
      case 'i32': return 4;
      case 'i64': return 8;
      case 'float': return 4;
      case 'double': return 8;
      default: {
        if (type[type.length-1] === '*') {
          return Runtime.QUANTUM_SIZE; // A pointer
        } else if (type[0] === 'i') {
          var bits = parseInt(type.substr(1));
          assert(bits % 8 === 0);
          return bits/8;
        } else {
          return 0;
        }
      }
    }
  },
  getNativeFieldSize: function (type) {
    return Math.max(Runtime.getNativeTypeSize(type), Runtime.QUANTUM_SIZE);
  },
  STACK_ALIGN: 16,
  prepVararg: function (ptr, type) {
    if (type === 'double' || type === 'i64') {
      // move so the load is aligned
      if (ptr & 7) {
        assert((ptr & 7) === 4);
        ptr += 4;
      }
    } else {
      assert((ptr & 3) === 0);
    }
    return ptr;
  },
  getAlignSize: function (type, size, vararg) {
    // we align i64s and doubles on 64-bit boundaries, unlike x86
    if (!vararg && (type == 'i64' || type == 'double')) return 8;
    if (!type) return Math.min(size, 8); // align structures internally to 64 bits
    return Math.min(size || (type ? Runtime.getNativeFieldSize(type) : 0), Runtime.QUANTUM_SIZE);
  },
  dynCall: function (sig, ptr, args) {
    if (args && args.length) {
      assert(args.length == sig.length-1);
      if (!args.splice) args = Array.prototype.slice.call(args);
      args.splice(0, 0, ptr);
      assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
      return Module['dynCall_' + sig].apply(null, args);
    } else {
      assert(sig.length == 1);
      assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
      return Module['dynCall_' + sig].call(null, ptr);
    }
  },
  functionPointers: [],
  addFunction: function (func) {
    for (var i = 0; i < Runtime.functionPointers.length; i++) {
      if (!Runtime.functionPointers[i]) {
        Runtime.functionPointers[i] = func;
        return 2*(1 + i);
      }
    }
    throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';
  },
  removeFunction: function (index) {
    Runtime.functionPointers[(index-2)/2] = null;
  },
  warnOnce: function (text) {
    if (!Runtime.warnOnce.shown) Runtime.warnOnce.shown = {};
    if (!Runtime.warnOnce.shown[text]) {
      Runtime.warnOnce.shown[text] = 1;
      Module.printErr(text);
    }
  },
  funcWrappers: {},
  getFuncWrapper: function (func, sig) {
    assert(sig);
    if (!Runtime.funcWrappers[sig]) {
      Runtime.funcWrappers[sig] = {};
    }
    var sigCache = Runtime.funcWrappers[sig];
    if (!sigCache[func]) {
      sigCache[func] = function dynCall_wrapper() {
        return Runtime.dynCall(sig, func, arguments);
      };
    }
    return sigCache[func];
  },
  getCompilerSetting: function (name) {
    throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for Runtime.getCompilerSetting or emscripten_get_compiler_setting to work';
  },
  stackAlloc: function (size) { var ret = STACKTOP;STACKTOP = (STACKTOP + size)|0;STACKTOP = (((STACKTOP)+15)&-16);(assert((((STACKTOP|0) < (STACK_MAX|0))|0))|0); return ret; },
  staticAlloc: function (size) { var ret = STATICTOP;STATICTOP = (STATICTOP + (assert(!staticSealed),size))|0;STATICTOP = (((STATICTOP)+15)&-16); return ret; },
  dynamicAlloc: function (size) { var ret = DYNAMICTOP;DYNAMICTOP = (DYNAMICTOP + (assert(DYNAMICTOP > 0),size))|0;DYNAMICTOP = (((DYNAMICTOP)+15)&-16); if (DYNAMICTOP >= TOTAL_MEMORY) { var success = enlargeMemory(); if (!success) { DYNAMICTOP = ret;  return 0; } }; return ret; },
  alignMemory: function (size,quantum) { var ret = size = Math.ceil((size)/(quantum ? quantum : 16))*(quantum ? quantum : 16); return ret; },
  makeBigInt: function (low,high,unsigned) { var ret = (unsigned ? ((+((low>>>0)))+((+((high>>>0)))*4294967296.0)) : ((+((low>>>0)))+((+((high|0)))*4294967296.0))); return ret; },
  GLOBAL_BASE: 8,
  QUANTUM_SIZE: 4,
  __dummy__: 0
}



Module["Runtime"] = Runtime;



//========================================
// Runtime essentials
//========================================

var __THREW__ = 0; // Used in checking for thrown exceptions.

var ABORT = false; // whether we are quitting the application. no code should run after this. set in exit() and abort()
var EXITSTATUS = 0;

var undef = 0;
// tempInt is used for 32-bit signed values or smaller. tempBigInt is used
// for 32-bit unsigned values or more than 32 bits. TODO: audit all uses of tempInt
var tempValue, tempInt, tempBigInt, tempInt2, tempBigInt2, tempPair, tempBigIntI, tempBigIntR, tempBigIntS, tempBigIntP, tempBigIntD, tempDouble, tempFloat;
var tempI64, tempI64b;
var tempRet0, tempRet1, tempRet2, tempRet3, tempRet4, tempRet5, tempRet6, tempRet7, tempRet8, tempRet9;

function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

var globalScope = this;

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  if (!func) {
    try {
      func = eval('_' + ident); // explicit lookup
    } catch(e) {}
  }
  assert(func, 'Cannot call unknown function ' + ident + ' (perhaps LLVM optimizations or closure removed it?)');
  return func;
}

var cwrap, ccall;
(function(){
  var JSfuncs = {
    // Helpers for cwrap -- it can't refer to Runtime directly because it might
    // be renamed by closure, instead it calls JSfuncs['stackSave'].body to find
    // out what the minified function name is.
    'stackSave': function() {
      Runtime.stackSave()
    },
    'stackRestore': function() {
      Runtime.stackRestore()
    },
    // type conversion from js to c
    'arrayToC' : function(arr) {
      var ret = Runtime.stackAlloc(arr.length);
      writeArrayToMemory(arr, ret);
      return ret;
    },
    'stringToC' : function(str) {
      var ret = 0;
      if (str !== null && str !== undefined && str !== 0) { // null string
        // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
        ret = Runtime.stackAlloc((str.length << 2) + 1);
        writeStringToMemory(str, ret);
      }
      return ret;
    }
  };
  // For fast lookup of conversion functions
  var toC = {'string' : JSfuncs['stringToC'], 'array' : JSfuncs['arrayToC']};

  // C calling interface. 
  ccall = function ccallFunc(ident, returnType, argTypes, args, opts) {
    var func = getCFunc(ident);
    var cArgs = [];
    var stack = 0;
    assert(returnType !== 'array', 'Return type should not be "array".');
    if (args) {
      for (var i = 0; i < args.length; i++) {
        var converter = toC[argTypes[i]];
        if (converter) {
          if (stack === 0) stack = Runtime.stackSave();
          cArgs[i] = converter(args[i]);
        } else {
          cArgs[i] = args[i];
        }
      }
    }
    var ret = func.apply(null, cArgs);
    if ((!opts || !opts.async) && typeof EmterpreterAsync === 'object') {
      assert(!EmterpreterAsync.state, 'cannot start async op with normal JS calling ccall');
    }
    if (opts && opts.async) assert(!returnType, 'async ccalls cannot return values');
    if (returnType === 'string') ret = Pointer_stringify(ret);
    if (stack !== 0) {
      if (opts && opts.async) {
        EmterpreterAsync.asyncFinalizers.push(function() {
          Runtime.stackRestore(stack);
        });
        return;
      }
      Runtime.stackRestore(stack);
    }
    return ret;
  }

  var sourceRegex = /^function\s*\(([^)]*)\)\s*{\s*([^*]*?)[\s;]*(?:return\s*(.*?)[;\s]*)?}$/;
  function parseJSFunc(jsfunc) {
    // Match the body and the return value of a javascript function source
    var parsed = jsfunc.toString().match(sourceRegex).slice(1);
    return {arguments : parsed[0], body : parsed[1], returnValue: parsed[2]}
  }
  var JSsource = {};
  for (var fun in JSfuncs) {
    if (JSfuncs.hasOwnProperty(fun)) {
      // Elements of toCsource are arrays of three items:
      // the code, and the return value
      JSsource[fun] = parseJSFunc(JSfuncs[fun]);
    }
  }

  
  cwrap = function cwrap(ident, returnType, argTypes) {
    argTypes = argTypes || [];
    var cfunc = getCFunc(ident);
    // When the function takes numbers and returns a number, we can just return
    // the original function
    var numericArgs = argTypes.every(function(type){ return type === 'number'});
    var numericRet = (returnType !== 'string');
    if ( numericRet && numericArgs) {
      return cfunc;
    }
    // Creation of the arguments list (["$1","$2",...,"$nargs"])
    var argNames = argTypes.map(function(x,i){return '$'+i});
    var funcstr = "(function(" + argNames.join(',') + ") {";
    var nargs = argTypes.length;
    if (!numericArgs) {
      // Generate the code needed to convert the arguments from javascript
      // values to pointers
      funcstr += 'var stack = ' + JSsource['stackSave'].body + ';';
      for (var i = 0; i < nargs; i++) {
        var arg = argNames[i], type = argTypes[i];
        if (type === 'number') continue;
        var convertCode = JSsource[type + 'ToC']; // [code, return]
        funcstr += 'var ' + convertCode.arguments + ' = ' + arg + ';';
        funcstr += convertCode.body + ';';
        funcstr += arg + '=' + convertCode.returnValue + ';';
      }
    }

    // When the code is compressed, the name of cfunc is not literally 'cfunc' anymore
    var cfuncname = parseJSFunc(function(){return cfunc}).returnValue;
    // Call the function
    funcstr += 'var ret = ' + cfuncname + '(' + argNames.join(',') + ');';
    if (!numericRet) { // Return type can only by 'string' or 'number'
      // Convert the result to a string
      var strgfy = parseJSFunc(function(){return Pointer_stringify}).returnValue;
      funcstr += 'ret = ' + strgfy + '(ret);';
    }
    funcstr += "if (typeof EmterpreterAsync === 'object') { assert(!EmterpreterAsync.state, 'cannot start async op with normal JS calling cwrap') }";
    if (!numericArgs) {
      // If we had a stack, restore it
      funcstr += JSsource['stackRestore'].body.replace('()', '(stack)') + ';';
    }
    funcstr += 'return ret})';
    return eval(funcstr);
  };
})();
Module["ccall"] = ccall;
Module["cwrap"] = cwrap;

function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[((ptr)>>0)]=value; break;
      case 'i8': HEAP8[((ptr)>>0)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}
Module["setValue"] = setValue;


function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for setValue: ' + type);
    }
  return null;
}
Module["getValue"] = getValue;

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
var ALLOC_NONE = 4; // Do not allocate
Module["ALLOC_NORMAL"] = ALLOC_NORMAL;
Module["ALLOC_STACK"] = ALLOC_STACK;
Module["ALLOC_STATIC"] = ALLOC_STATIC;
Module["ALLOC_DYNAMIC"] = ALLOC_DYNAMIC;
Module["ALLOC_NONE"] = ALLOC_NONE;

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [_malloc, Runtime.stackAlloc, Runtime.staticAlloc, Runtime.dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var ptr = ret, stop;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)>>0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(slab, ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    if (typeof curr === 'function') {
      curr = Runtime.getFunctionIndex(curr);
    }

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }
    assert(type, 'Must know what type to store in allocate!');

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = Runtime.getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}
Module["allocate"] = allocate;

// Allocate memory during any stage of startup - static memory early on, dynamic memory later, malloc when ready
function getMemory(size) {
  if (!staticSealed) return Runtime.staticAlloc(size);
  if ((typeof _sbrk !== 'undefined' && !_sbrk.called) || !runtimeInitialized) return Runtime.dynamicAlloc(size);
  return _malloc(size);
}
Module["getMemory"] = getMemory;

function Pointer_stringify(ptr, /* optional */ length) {
  if (length === 0 || !ptr) return '';
  // TODO: use TextDecoder
  // Find the length, and check for UTF while doing so
  var hasUtf = 0;
  var t;
  var i = 0;
  while (1) {
    assert(ptr + i < TOTAL_MEMORY);
    t = HEAPU8[(((ptr)+(i))>>0)];
    hasUtf |= t;
    if (t == 0 && !length) break;
    i++;
    if (length && i == length) break;
  }
  if (!length) length = i;

  var ret = '';

  if (hasUtf < 128) {
    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
    var curr;
    while (length > 0) {
      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
      ret = ret ? ret + curr : curr;
      ptr += MAX_CHUNK;
      length -= MAX_CHUNK;
    }
    return ret;
  }
  return Module['UTF8ToString'](ptr);
}
Module["Pointer_stringify"] = Pointer_stringify;

// Given a pointer 'ptr' to a null-terminated ASCII-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function AsciiToString(ptr) {
  var str = '';
  while (1) {
    var ch = HEAP8[((ptr++)>>0)];
    if (!ch) return str;
    str += String.fromCharCode(ch);
  }
}
Module["AsciiToString"] = AsciiToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in ASCII form. The copy will require at most str.length+1 bytes of space in the HEAP.

function stringToAscii(str, outPtr) {
  return writeAsciiToMemory(str, outPtr, false);
}
Module["stringToAscii"] = stringToAscii;

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the given array that contains uint8 values, returns
// a copy of that string as a Javascript String object.

function UTF8ArrayToString(u8Array, idx) {
  var u0, u1, u2, u3, u4, u5;

  var str = '';
  while (1) {
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    u0 = u8Array[idx++];
    if (!u0) return str;
    if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }
    u1 = u8Array[idx++] & 63;
    if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }
    u2 = u8Array[idx++] & 63;
    if ((u0 & 0xF0) == 0xE0) {
      u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
    } else {
      u3 = u8Array[idx++] & 63;
      if ((u0 & 0xF8) == 0xF0) {
        u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;
      } else {
        u4 = u8Array[idx++] & 63;
        if ((u0 & 0xFC) == 0xF8) {
          u0 = ((u0 & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;
        } else {
          u5 = u8Array[idx++] & 63;
          u0 = ((u0 & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;
        }
      }
    }
    if (u0 < 0x10000) {
      str += String.fromCharCode(u0);
    } else {
      var ch = u0 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    }
  }
}
Module["UTF8ArrayToString"] = UTF8ArrayToString;

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function UTF8ToString(ptr) {
  return UTF8ArrayToString(HEAPU8,ptr);
}
Module["UTF8ToString"] = UTF8ToString;

// Copies the given Javascript String object 'str' to the given byte array at address 'outIdx',
// encoded in UTF8 form and null-terminated. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outU8Array: the array to copy to. Each index in this array is assumed to be one 8-byte element.
//   outIdx: The starting offset in the array to begin the copying.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null 
//                    terminator, i.e. if maxBytesToWrite=1, only the null terminator will be written and nothing else.
//                    maxBytesToWrite=0 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8Array(str, outU8Array, outIdx, maxBytesToWrite) {
  if (!(maxBytesToWrite > 0)) // Parameter maxBytesToWrite is not optional. Negative values, 0, null, undefined and false each don't write out any bytes.
    return 0;

  var startIdx = outIdx;
  var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      if (outIdx >= endIdx) break;
      outU8Array[outIdx++] = u;
    } else if (u <= 0x7FF) {
      if (outIdx + 1 >= endIdx) break;
      outU8Array[outIdx++] = 0xC0 | (u >> 6);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0xFFFF) {
      if (outIdx + 2 >= endIdx) break;
      outU8Array[outIdx++] = 0xE0 | (u >> 12);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x1FFFFF) {
      if (outIdx + 3 >= endIdx) break;
      outU8Array[outIdx++] = 0xF0 | (u >> 18);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x3FFFFFF) {
      if (outIdx + 4 >= endIdx) break;
      outU8Array[outIdx++] = 0xF8 | (u >> 24);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else {
      if (outIdx + 5 >= endIdx) break;
      outU8Array[outIdx++] = 0xFC | (u >> 30);
      outU8Array[outIdx++] = 0x80 | ((u >> 24) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    }
  }
  // Null-terminate the pointer to the buffer.
  outU8Array[outIdx] = 0;
  return outIdx - startIdx;
}
Module["stringToUTF8Array"] = stringToUTF8Array;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF8 form. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF8(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  return stringToUTF8Array(str, HEAPU8,outPtr, maxBytesToWrite);
}
Module["stringToUTF8"] = stringToUTF8;

// Returns the number of bytes the given Javascript string takes if encoded as a UTF8 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF8(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      ++len;
    } else if (u <= 0x7FF) {
      len += 2;
    } else if (u <= 0xFFFF) {
      len += 3;
    } else if (u <= 0x1FFFFF) {
      len += 4;
    } else if (u <= 0x3FFFFFF) {
      len += 5;
    } else {
      len += 6;
    }
  }
  return len;
}
Module["lengthBytesUTF8"] = lengthBytesUTF8;

// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function UTF16ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
    if (codeUnit == 0)
      return str;
    ++i;
    // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
    str += String.fromCharCode(codeUnit);
  }
}
Module["UTF16ToString"] = UTF16ToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16 form. The copy will require at most str.length*4+2 bytes of space in the HEAP.
// Use the function lengthBytesUTF16() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null 
//                    terminator, i.e. if maxBytesToWrite=2, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<2 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF16(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF16(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 2) return 0;
  maxBytesToWrite -= 2; // Null terminator.
  var startPtr = outPtr;
  var numCharsToWrite = (maxBytesToWrite < str.length*2) ? (maxBytesToWrite / 2) : str.length;
  for (var i = 0; i < numCharsToWrite; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[((outPtr)>>1)]=codeUnit;
    outPtr += 2;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[((outPtr)>>1)]=0;
  return outPtr - startPtr;
}
Module["stringToUTF16"] = stringToUTF16;

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF16(str) {
  return str.length*2;
}
Module["lengthBytesUTF16"] = lengthBytesUTF16;

function UTF32ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}
Module["UTF32ToString"] = UTF32ToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32 form. The copy will require at most str.length*4+4 bytes of space in the HEAP.
// Use the function lengthBytesUTF32() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null 
//                    terminator, i.e. if maxBytesToWrite=4, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<4 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF32(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF32(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 4) return 0;
  var startPtr = outPtr;
  var endPtr = startPtr + maxBytesToWrite - 4;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++i);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[((outPtr)>>2)]=codeUnit;
    outPtr += 4;
    if (outPtr + 4 > endPtr) break;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[((outPtr)>>2)]=0;
  return outPtr - startPtr;
}
Module["stringToUTF32"] = stringToUTF32;

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF32(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i);
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) ++i; // possibly a lead surrogate, so skip over the tail surrogate.
    len += 4;
  }

  return len;
}
Module["lengthBytesUTF32"] = lengthBytesUTF32;

function demangle(func) {
  var hasLibcxxabi = !!Module['___cxa_demangle'];
  if (hasLibcxxabi) {
    try {
      var buf = _malloc(func.length);
      writeStringToMemory(func.substr(1), buf);
      var status = _malloc(4);
      var ret = Module['___cxa_demangle'](buf, 0, 0, status);
      if (getValue(status, 'i32') === 0 && ret) {
        return Pointer_stringify(ret);
      }
      // otherwise, libcxxabi failed, we can try ours which may return a partial result
    } catch(e) {
      // failure when using libcxxabi, we can try ours which may return a partial result
    } finally {
      if (buf) _free(buf);
      if (status) _free(status);
      if (ret) _free(ret);
    }
  }
  var i = 3;
  // params, etc.
  var basicTypes = {
    'v': 'void',
    'b': 'bool',
    'c': 'char',
    's': 'short',
    'i': 'int',
    'l': 'long',
    'f': 'float',
    'd': 'double',
    'w': 'wchar_t',
    'a': 'signed char',
    'h': 'unsigned char',
    't': 'unsigned short',
    'j': 'unsigned int',
    'm': 'unsigned long',
    'x': 'long long',
    'y': 'unsigned long long',
    'z': '...'
  };
  var subs = [];
  var first = true;
  function dump(x) {
    //return;
    if (x) Module.print(x);
    Module.print(func);
    var pre = '';
    for (var a = 0; a < i; a++) pre += ' ';
    Module.print (pre + '^');
  }
  function parseNested() {
    i++;
    if (func[i] === 'K') i++; // ignore const
    var parts = [];
    while (func[i] !== 'E') {
      if (func[i] === 'S') { // substitution
        i++;
        var next = func.indexOf('_', i);
        var num = func.substring(i, next) || 0;
        parts.push(subs[num] || '?');
        i = next+1;
        continue;
      }
      if (func[i] === 'C') { // constructor
        parts.push(parts[parts.length-1]);
        i += 2;
        continue;
      }
      var size = parseInt(func.substr(i));
      var pre = size.toString().length;
      if (!size || !pre) { i--; break; } // counter i++ below us
      var curr = func.substr(i + pre, size);
      parts.push(curr);
      subs.push(curr);
      i += pre + size;
    }
    i++; // skip E
    return parts;
  }
  function parse(rawList, limit, allowVoid) { // main parser
    limit = limit || Infinity;
    var ret = '', list = [];
    function flushList() {
      return '(' + list.join(', ') + ')';
    }
    var name;
    if (func[i] === 'N') {
      // namespaced N-E
      name = parseNested().join('::');
      limit--;
      if (limit === 0) return rawList ? [name] : name;
    } else {
      // not namespaced
      if (func[i] === 'K' || (first && func[i] === 'L')) i++; // ignore const and first 'L'
      var size = parseInt(func.substr(i));
      if (size) {
        var pre = size.toString().length;
        name = func.substr(i + pre, size);
        i += pre + size;
      }
    }
    first = false;
    if (func[i] === 'I') {
      i++;
      var iList = parse(true);
      var iRet = parse(true, 1, true);
      ret += iRet[0] + ' ' + name + '<' + iList.join(', ') + '>';
    } else {
      ret = name;
    }
    paramLoop: while (i < func.length && limit-- > 0) {
      //dump('paramLoop');
      var c = func[i++];
      if (c in basicTypes) {
        list.push(basicTypes[c]);
      } else {
        switch (c) {
          case 'P': list.push(parse(true, 1, true)[0] + '*'); break; // pointer
          case 'R': list.push(parse(true, 1, true)[0] + '&'); break; // reference
          case 'L': { // literal
            i++; // skip basic type
            var end = func.indexOf('E', i);
            var size = end - i;
            list.push(func.substr(i, size));
            i += size + 2; // size + 'EE'
            break;
          }
          case 'A': { // array
            var size = parseInt(func.substr(i));
            i += size.toString().length;
            if (func[i] !== '_') throw '?';
            i++; // skip _
            list.push(parse(true, 1, true)[0] + ' [' + size + ']');
            break;
          }
          case 'E': break paramLoop;
          default: ret += '?' + c; break paramLoop;
        }
      }
    }
    if (!allowVoid && list.length === 1 && list[0] === 'void') list = []; // avoid (void)
    if (rawList) {
      if (ret) {
        list.push(ret + '?');
      }
      return list;
    } else {
      return ret + flushList();
    }
  }
  var parsed = func;
  try {
    // Special-case the entry point, since its name differs from other name mangling.
    if (func == 'Object._main' || func == '_main') {
      return 'main()';
    }
    if (typeof func === 'number') func = Pointer_stringify(func);
    if (func[0] !== '_') return func;
    if (func[1] !== '_') return func; // C function
    if (func[2] !== 'Z') return func;
    switch (func[3]) {
      case 'n': return 'operator new()';
      case 'd': return 'operator delete()';
    }
    parsed = parse();
  } catch(e) {
    parsed += '?';
  }
  if (parsed.indexOf('?') >= 0 && !hasLibcxxabi) {
    Runtime.warnOnce('warning: a problem occurred in builtin C++ name demangling; build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling');
  }
  return parsed;
}

function demangleAll(text) {
  return text.replace(/__Z[\w\d_]+/g, function(x) { var y = demangle(x); return x === y ? x : (x + ' [' + y + ']') });
}

function jsStackTrace() {
  var err = new Error();
  if (!err.stack) {
    // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
    // so try that as a special-case.
    try {
      throw new Error(0);
    } catch(e) {
      err = e;
    }
    if (!err.stack) {
      return '(no stack trace available)';
    }
  }
  return err.stack.toString();
}

function stackTrace() {
  return demangleAll(jsStackTrace());
}
Module["stackTrace"] = stackTrace;

// Memory management

var PAGE_SIZE = 4096;

function alignMemoryPage(x) {
  if (x % 4096 > 0) {
    x += (4096 - (x % 4096));
  }
  return x;
}

var HEAP;
var HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;

var STATIC_BASE = 0, STATICTOP = 0, staticSealed = false; // static area
var STACK_BASE = 0, STACKTOP = 0, STACK_MAX = 0; // stack area
var DYNAMIC_BASE = 0, DYNAMICTOP = 0; // dynamic area handled by sbrk


function abortOnCannotGrowMemory() {
  abort('Cannot enlarge memory arrays. Either (1) compile with  -s TOTAL_MEMORY=X  with X higher than the current value ' + TOTAL_MEMORY + ', (2) compile with  -s ALLOW_MEMORY_GROWTH=1  which adjusts the size at runtime but prevents some optimizations, (3) set Module.TOTAL_MEMORY to a higher value before the program runs, or if you want malloc to return NULL (0) instead of this abort, compile with  -s ABORTING_MALLOC=0 ');
}

function enlargeMemory() {
  abortOnCannotGrowMemory();
}


var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 16777216;

var totalMemory = 64*1024;
while (totalMemory < TOTAL_MEMORY || totalMemory < 2*TOTAL_STACK) {
  if (totalMemory < 16*1024*1024) {
    totalMemory *= 2;
  } else {
    totalMemory += 16*1024*1024
  }
}
if (totalMemory !== TOTAL_MEMORY) {
  Module.printErr('increasing TOTAL_MEMORY to ' + totalMemory + ' to be compliant with the asm.js spec (and given that TOTAL_STACK=' + TOTAL_STACK + ')');
  TOTAL_MEMORY = totalMemory;
}

// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && !!(new Int32Array(1)['subarray']) && !!(new Int32Array(1)['set']),
       'JS engine does not provide full typed array support');

var buffer;



buffer = new ArrayBuffer(TOTAL_MEMORY);
HEAP8 = new Int8Array(buffer);
HEAP16 = new Int16Array(buffer);
HEAP32 = new Int32Array(buffer);
HEAPU8 = new Uint8Array(buffer);
HEAPU16 = new Uint16Array(buffer);
HEAPU32 = new Uint32Array(buffer);
HEAPF32 = new Float32Array(buffer);
HEAPF64 = new Float64Array(buffer);


// Endianness check (note: assumes compiler arch was little-endian)
HEAP32[0] = 255;
assert(HEAPU8[0] === 255 && HEAPU8[3] === 0, 'Typed arrays 2 must be run on a little-endian system');

Module['HEAP'] = HEAP;
Module['buffer'] = buffer;
Module['HEAP8'] = HEAP8;
Module['HEAP16'] = HEAP16;
Module['HEAP32'] = HEAP32;
Module['HEAPU8'] = HEAPU8;
Module['HEAPU16'] = HEAPU16;
Module['HEAPU32'] = HEAPU32;
Module['HEAPF32'] = HEAPF32;
Module['HEAPF64'] = HEAPF64;

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Runtime.dynCall('v', func);
      } else {
        Runtime.dynCall('vi', func, [callback.arg]);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the runtime has exited

var runtimeInitialized = false;
var runtimeExited = false;


function preRun() {
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}

function ensureInitRuntime() {
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  callRuntimeCallbacks(__ATEXIT__);
  runtimeExited = true;
}

function postRun() {
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}
Module["addOnPreRun"] = addOnPreRun;

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}
Module["addOnInit"] = addOnInit;

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}
Module["addOnPreMain"] = addOnPreMain;

function addOnExit(cb) {
  __ATEXIT__.unshift(cb);
}
Module["addOnExit"] = addOnExit;

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}
Module["addOnPostRun"] = addOnPostRun;

// Tools


function intArrayFromString(stringy, dontAddNull, length /* optional */) {
  var len = length > 0 ? length : lengthBytesUTF8(stringy)+1;
  var u8array = new Array(len);
  var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
  if (dontAddNull) u8array.length = numBytesWritten;
  return u8array;
}
Module["intArrayFromString"] = intArrayFromString;

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
      assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}
Module["intArrayToString"] = intArrayToString;

function writeStringToMemory(string, buffer, dontAddNull) {
  var array = intArrayFromString(string, dontAddNull);
  var i = 0;
  while (i < array.length) {
    var chr = array[i];
    HEAP8[(((buffer)+(i))>>0)]=chr;
    i = i + 1;
  }
}
Module["writeStringToMemory"] = writeStringToMemory;

function writeArrayToMemory(array, buffer) {
  for (var i = 0; i < array.length; i++) {
    HEAP8[((buffer++)>>0)]=array[i];
  }
}
Module["writeArrayToMemory"] = writeArrayToMemory;

function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; ++i) {
    assert(str.charCodeAt(i) === str.charCodeAt(i)&0xff);
    HEAP8[((buffer++)>>0)]=str.charCodeAt(i);
  }
  // Null-terminate the pointer to the HEAP.
  if (!dontAddNull) HEAP8[((buffer)>>0)]=0;
}
Module["writeAsciiToMemory"] = writeAsciiToMemory;

function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}


// check for imul support, and also for correctness ( https://bugs.webkit.org/show_bug.cgi?id=126345 )
if (!Math['imul'] || Math['imul'](0xffffffff, 5) !== -5) Math['imul'] = function imul(a, b) {
  var ah  = a >>> 16;
  var al = a & 0xffff;
  var bh  = b >>> 16;
  var bl = b & 0xffff;
  return (al*bl + ((ah*bl + al*bh) << 16))|0;
};
Math.imul = Math['imul'];


if (!Math['clz32']) Math['clz32'] = function(x) {
  x = x >>> 0;
  for (var i = 0; i < 32; i++) {
    if (x & (1 << (31 - i))) return i;
  }
  return 32;
};
Math.clz32 = Math['clz32']

var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_min = Math.min;
var Math_clz32 = Math.clz32;

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled
var runDependencyTracking = {};

function getUniqueRunDependency(id) {
  var orig = id;
  while (1) {
    if (!runDependencyTracking[id]) return id;
    id = orig + Math.random();
  }
  return id;
}

function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(function() {
        if (ABORT) {
          clearInterval(runDependencyWatcher);
          runDependencyWatcher = null;
          return;
        }
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            Module.printErr('still waiting on run dependencies:');
          }
          Module.printErr('dependency: ' + dep);
        }
        if (shown) {
          Module.printErr('(end of list)');
        }
      }, 10000);
    }
  } else {
    Module.printErr('warning: run dependency added without ID');
  }
}
Module["addRunDependency"] = addRunDependency;

function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    Module.printErr('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}
Module["removeRunDependency"] = removeRunDependency;

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data



var memoryInitializer = null;



// === Body ===

var ASM_CONSTS = [function($0, $1) { { Module.printErr('bad name in getProcAddress: ' + [Pointer_stringify($0), Pointer_stringify($1)]); } }];

function _emscripten_asm_const_2(code, a0, a1) {
 return ASM_CONSTS[code](a0, a1);
}



STATIC_BASE = 8;

STATICTOP = STATIC_BASE + 20752;
  /* global initializers */  __ATINIT__.push();
  

/* memory initializer */ allocate([0,0,0,0,0,0,0,0,0,0,0,0,0,96,127,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,2,0,2,0,2,0,3,0,2,0,4,0,2,0,5,0,2,0,6,0,2,0,7,0,2,0,8,0,2,0,9,0,2,0,10,0,2,0,11,0,2,0,12,0,2,0,13,0,2,0,14,0,2,0,15,0,2,0,16,0,2,0,17,0,2,0,18,0,2,0,19,0,2,0,20,0,2,0,21,0,2,0,22,0,2,0,23,0,2,0,24,0,2,0,24,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,177,45,0,0,250,33,0,0,4,27,0,0,12,27,0,0,21,27,0,0,30,31,0,0,18,31,0,0,224,33,0,0,12,27,0,0,28,27,0,0,35,27,0,0,41,27,0,0,153,50,0,0,47,27,0,0,171,47,0,0,170,38,0,0,58,27,0,0,64,27,0,0,69,27,0,0,75,27,0,0,81,27,0,0,87,27,0,0,93,27,0,0,99,27,0,0,105,27,0,0,111,27,0,0,116,27,0,0,121,27,0,0,130,27,0,0,189,33,0,0,193,33,0,0,199,33,0,0,202,33,0,0,207,33,0,0,238,40,0,0,214,33,0,0,220,33,0,0,224,33,0,0,233,33,0,0,238,33,0,0,241,33,0,0,244,33,0,0,250,33,0,0,254,33,0,0,2,34,0,0,5,34,0,0,182,38,0,0,12,34,0,0,17,34,0,0,22,34,0,0,28,34,0,0,34,34,0,0,37,34,0,0,41,34,0,0,44,34,0,0,47,34,0,0,50,34,0,0,53,34,0,0,56,34,0,0,62,34,0,0,71,34,0,0,78,34,0,0,107,34,0,0,1,0,0,0,114,34,0,0,2,0,0,0,129,34,0,0,3,0,0,0,136,34,0,0,4,0,0,0,11,38,0,0,5,0,0,0,142,34,0,0,6,0,0,0,149,34,0,0,7,0,0,0,158,34,0,0,8,0,0,0,163,34,0,0,8,0,0,0,174,34,0,0,9,0,0,0,179,34,0,0,10,0,0,0,185,34,0,0,11,0,0,0,191,34,0,0,12,0,0,0,197,34,0,0,13,0,0,0,206,34,0,0,14,0,0,0,213,34,0,0,15,0,0,0,220,34,0,0,16,0,0,0,227,34,0,0,17,0,0,0,87,38,0,0,18,0,0,0,234,34,0,0,19,0,0,0,243,34,0,0,20,0,0,0,114,41,0,0,21,0,0,0,252,34,0,0,22,0,0,0,0,0,0,0,0,0,0,0,36,36,0,0,41,36,0,0,28,36,0,0,189,38,0,0,49,36,0,0,54,36,0,0,63,36,0,0,74,36,0,0,86,36,0,0,96,36,0,0,109,36,0,0,0,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,5,0,0,0,6,0,0,0,7,0,0,0,8,0,0,0,9,0,0,0,10,0,0,0,11,0,0,0,139,36,0,0,23,0,0,0,147,36,0,0,24,0,0,0,152,36,0,0,25,0,0,0,157,36,0,0,26,0,0,0,161,36,0,0,27,0,0,0,166,36,0,0,28,0,0,0,172,36,0,0,29,0,0,0,180,36,0,0,30,0,0,0,188,36,0,0,31,0,0,0,195,36,0,0,32,0,0,0,203,36,0,0,33,0,0,0,211,36,0,0,34,0,0,0,0,0,0,0,0,0,0,0,45,37,0,0,35,0,0,0,52,37,0,0,36,0,0,0,59,37,0,0,37,0,0,0,67,37,0,0,38,0,0,0,74,37,0,0,39,0,0,0,79,37,0,0,40,0,0,0,0,0,0,0,0,0,0,0,211,37,0,0,41,0,0,0,217,37,0,0,42,0,0,0,230,37,0,0,43,0,0,0,238,37,0,0,44,0,0,0,246,37,0,0,45,0,0,0,255,37,0,0,46,0,0,0,11,38,0,0,47,0,0,0,24,38,0,0,48,0,0,0,35,38,0,0,49,0,0,0,47,38,0,0,50,0,0,0,57,38,0,0,51,0,0,0,70,38,0,0,52,0,0,0,78,38,0,0,53,0,0,0,87,38,0,0,54,0,0,0,100,38,0,0,55,0,0,0,111,38,0,0,56,0,0,0,0,0,0,0,0,0,0,0,177,38,0,0,182,38,0,0,194,40,0,0,189,38,0,0,195,38,0,0,74,40,0,0,57,0,0,0,80,40,0,0,58,0,0,0,82,41,0,0,59,0,0,0,86,40,0,0,60,0,0,0,88,41,0,0,61,0,0,0,93,41,0,0,62,0,0,0,100,41,0,0,63,0,0,0,92,40,0,0,64,0,0,0,106,41,0,0,65,0,0,0,114,41,0,0,66,0,0,0,110,40,0,0,67,0,0,0,0,0,0,0,0,0,0,0,74,40,0,0,57,0,0,0,80,40,0,0,68,0,0,0,86,40,0,0,69,0,0,0,92,40,0,0,70,0,0,0,97,40,0,0,71,0,0,0,102,40,0,0,72,0,0,0,110,40,0,0,73,0,0,0,171,47,0,0,74,0,0,0,116,40,0,0,75,0,0,0,0,0,0,0,0,0,0,0,186,40,0,0,189,40,0,0,194,40,0,0,0,0,0,0,2,0,0,0,0,0,0,0,1,0,0,0,234,40,0,0,199,40,0,0,238,40,0,0,0,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,235,41,0,0,76,0,0,0,239,41,0,0,77,0,0,0,244,41,0,0,78,0,0,0,249,41,0,0,79,0,0,0,255,41,0,0,80,0,0,0,4,42,0,0,81,0,0,0,9,42,0,0,82,0,0,0,14,42,0,0,83,0,0,0,18,42,0,0,84,0,0,0,22,42,0,0,85,0,0,0,26,42,0,0,86,0,0,0,32,42,0,0,87,0,0,0,37,42,0,0,88,0,0,0,43,42,0,0,89,0,0,0,49,42,0,0,90,0,0,0,55,42,0,0,91,0,0,0,59,42,0,0,92,0,0,0,16,43,0,0,93,0,0,0,63,42,0,0,94,0,0,0,68,42,0,0,95,0,0,0,72,42,0,0,96,0,0,0,76,42,0,0,97,0,0,0,83,42,0,0,98,0,0,0,94,42,0,0,99,0,0,0,99,42,0,0,100,0,0,0,103,42,0,0,101,0,0,0,108,42,0,0,102,0,0,0,113,42,0,0,103,0,0,0,0,0,0,0,0,0,0,0,161,42,0,0,104,0,0,0,167,42,0,0,105,0,0,0,172,42,0,0,106,0,0,0,181,42,0,0,107,0,0,0,189,42,0,0,108,0,0,0,194,42,0,0,109,0,0,0,230,46,0,0,110,0,0,0,201,42,0,0,111,0,0,0,208,42,0,0,112,0,0,0,218,42,0,0,113,0,0,0,223,42,0,0,114,0,0,0,0,0,0,0,0,0,0,0,79,43,0,0,83,43,0,0,91,43,0,0,97,43,0,0,106,43,0,0,218,42,0,0,0,0,0,0,6,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,1,0,0,0,2,0,0,0,189,43,0,0,115,0,0,0,194,43,0,0,116,0,0,0,199,43,0,0,117,0,0,0,204,43,0,0,118,0,0,0,209,43,0,0,119,0,0,0,216,43,0,0,120,0,0,0,223,43,0,0,121,0,0,0,228,43,0,0,122,0,0,0,232,43,0,0,123,0,0,0,238,43,0,0,124,0,0,0,244,43,0,0,125,0,0,0,248,43,0,0,126,0,0,0,0,44,0,0,127,0,0,0,4,44,0,0,128,0,0,0,0,0,0,0,0,0,0,0,206,46,0,0,129,0,0,0,213,46,0,0,130,0,0,0,218,46,0,0,131,0,0,0,225,46,0,0,132,0,0,0,199,46,0,0,133,0,0,0,230,46,0,0,134,0,0,0,237,46,0,0,135,0,0,0,0,0,0,0,0,0,0,0,127,50,0,0,136,0,0,0,135,50,0,0,137,0,0,0,146,50,0,0,138,0,0,0,0,0,0,0,0,0,0,0,252,48,0,0,139,0,0,0,3,49,0,0,140,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,192,3,0,0,192,4,0,0,192,5,0,0,192,6,0,0,192,7,0,0,192,8,0,0,192,9,0,0,192,10,0,0,192,11,0,0,192,12,0,0,192,13,0,0,192,14,0,0,192,15,0,0,192,16,0,0,192,17,0,0,192,18,0,0,192,19,0,0,192,20,0,0,192,21,0,0,192,22,0,0,192,23,0,0,192,24,0,0,192,25,0,0,192,26,0,0,192,27,0,0,192,28,0,0,192,29,0,0,192,30,0,0,192,31,0,0,192,0,0,0,179,1,0,0,195,2,0,0,195,3,0,0,195,4,0,0,195,5,0,0,195,6,0,0,195,7,0,0,195,8,0,0,195,9,0,0,195,10,0,0,195,11,0,0,195,12,0,0,195,13,0,0,211,14,0,0,195,15,0,0,195,0,0,12,187,1,0,12,195,2,0,12,195,3,0,12,195,4,0,12,211,64,9,0,0,176,9,0,0,32,10,0,0,32,10,0,0,0,0,0,0,10,0,0,0,100,0,0,0,232,3,0,0,16,39,0,0,160,134,1,0,64,66,15,0,128,150,152,0,0,225,245,5,16,81,0,0,18,81,0,0,18,81,0,0,18,81,0,0,18,81,0,0,18,81,0,0,18,81,0,0,18,81,0,0,18,81,0,0,18,81,0,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,141,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,142,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,143,0,0,0,144,0,0,0,252,78,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,142,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,145,0,0,0,0,0,0,0,144,0,0,0,244,74,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,142,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,146,0,0,0,144,0,0,0,236,70,0,0,0,4,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,109,97,105,110,46,108,117,97,0,67,111,117,108,100,32,110,111,116,32,108,111,97,100,32,102,105,108,101,58,32,37,115,10,0,103,108,102,119,71,101,116,87,105,110,100,111,119,80,97,114,97,109,40,71,76,70,87,95,82,69,68,95,66,73,84,83,41,32,61,61,32,56,0,47,85,115,101,114,115,47,110,97,109,101,47,103,104,51,51,51,47,103,111,45,101,109,115,47,115,114,99,47,103,108,102,119,46,99,0,73,110,105,116,0,84,104,101,32,71,76,70,87,32,87,105,110,100,111,119,0,39,37,99,39,32,40,37,105,41,32,99,104,97,114,32,105,115,32,112,114,101,115,115,101,100,10,0,39,37,99,39,32,40,37,105,41,32,99,104,97,114,32,105,115,32,114,101,108,101,97,115,101,100,10,0,117,110,107,110,111,119,110,0,115,112,97,99,101,0,115,112,101,99,105,97,108,0,101,115,99,97,112,101,0,70,49,0,70,50,0,70,51,0,70,52,0,70,53,0,70,54,0,70,55,0,70,56,0,70,57,0,70,49,48,0,70,49,49,0,70,49,50,0,70,49,51,0,70,49,52,0,70,49,53,0,70,49,54,0,70,49,55,0,70,49,56,0,70,49,57,0,70,50,48,0,70,50,49,0,70,50,50,0,70,50,51,0,70,50,52,0,70,50,53,0,117,112,0,100,111,119,110,0,108,101,102,116,0,114,105,103,104,116,0,108,101,102,116,32,115,104,105,102,116,0,114,105,103,104,116,32,115,104,105,102,116,0,108,101,102,116,32,99,116,114,108,0,114,105,103,104,116,32,99,116,114,108,0,108,101,102,116,32,97,108,116,0,114,105,103,104,116,32,97,108,116,0,116,97,98,0,101,110,116,101,114,0,98,97,99,107,115,112,97,99,101,0,105,110,115,101,114,116,114,0,100,101,108,0,112,97,103,101,32,117,112,0,112,97,103,101,32,100,111,119,110,0,104,111,109,101,0,48,0,49,0,50,0,51,0,52,0,53,0,54,0,55,0,56,0,57,0,42,0,45,0,43,0,61,0,110,117,109,32,108,111,99,107,0,99,97,112,115,32,108,111,99,107,0,115,99,114,111,108,108,32,108,111,99,107,0,112,97,117,115,101,0,108,101,102,116,32,115,117,112,101,114,0,114,105,103,104,116,32,115,117,112,101,114,0,109,101,110,117,0,71,76,70,87,95,87,73,78,68,79,87,0,71,76,70,87,95,70,85,76,76,83,67,82,69,69,78,0,71,76,70,87,95,79,80,69,78,69,68,0,71,76,70,87,95,65,67,84,73,86,69,0,71,76,70,87,95,73,67,79,78,73,70,73,69,68,0,71,76,70,87,95,65,67,67,69,76,69,82,65,84,69,68,0,71,76,70,87,95,82,69,68,95,66,73,84,83,0,71,76,70,87,95,71,82,69,69,78,95,66,73,84,83,0,71,76,70,87,95,66,76,85,69,95,66,73,84,83,0,71,76,70,87,95,65,76,80,72,65,95,66,73,84,83,0,71,76,70,87,95,68,69,80,84,72,95,66,73,84,83,0,71,76,70,87,95,83,84,69,78,67,73,76,95,66,73,84,83,0,71,76,70,87,95,82,69,70,82,69,83,72,95,82,65,84,69,0,71,76,70,87,95,65,67,67,85,77,95,82,69,68,95,66,73,84,83,0,71,76,70,87,95,65,67,67,85,77,95,71,82,69,69,78,95,66,73,84,83,0,71,76,70,87,95,65,85,88,95,66,85,70,70,69,82,83,0,71,76,70,87,95,83,84,69,82,69,79,0,71,76,70,87,95,87,73,78,68,79,87,95,78,79,95,82,69,83,73,90,69,0,71,76,70,87,95,70,83,65,65,95,83,65,77,80,76,69,83,0,71,76,70,87,95,79,80,69,78,71,76,95,86,69,82,83,73,79,78,95,77,65,74,79,82,0,71,76,70,87,95,79,80,69,78,71,76,95,86,69,82,83,73,79,78,95,77,73,78,79,82,0,71,76,70,87,95,79,80,69,78,71,76,95,70,79,82,87,65,82,68,95,67,79,77,80,65,84,0,71,76,70,87,95,79,80,69,78,71,76,95,68,69,66,85,71,95,67,79,78,84,69,88,84,0,71,76,70,87,95,79,80,69,78,71,76,95,80,82,79,70,73,76,69,0,71,76,70,87,95,79,80,69,78,71,76,95,67,79,82,69,95,80,82,79,70,73,76,69,32,124,32,71,76,70,87,95,80,82,69,83,69,78,84,0,71,76,70,87,95,79,80,69,78,71,76,95,67,79,77,80,65,84,95,80,82,79,70,73,76,69,32,124,32,71,76,70,87,95,65,88,69,83,0,71,76,70,87,95,77,79,85,83,69,95,67,85,82,83,79,82,0,71,76,70,87,95,83,84,73,67,75,89,95,75,69,89,83,0,71,76,70,87,95,83,84,73,67,75,89,95,77,79,85,83,69,95,66,85,84,84,79,78,83,0,71,76,70,87,95,83,89,83,84,69,77,95,75,69,89,83,0,71,76,70,87,95,75,69,89,95,82,69,80,69,65,84,0,71,76,70,87,95,65,85,84,79,95,80,79,76,76,95,69,86,69,78,84,83,0,71,76,70,87,95,87,65,73,84,0,71,76,70,87,95,78,79,87,65,73,84,0,71,76,70,87,95,66,85,84,84,79,78,83,0,71,76,70,87,95,78,79,95,82,69,83,67,65,76,69,95,66,73,84,0,71,76,70,87,95,79,82,73,71,73,78,95,85,76,95,66,73,84,0,71,76,70,87,95,66,85,73,76,68,95,77,73,80,77,65,80,83,95,66,73,84,0,71,76,70,87,95,65,76,80,72,65,95,77,65,80,95,66,73,84,0,73,110,118,97,108,105,100,32,112,97,114,97,109,0,39,37,115,39,32,40,37,105,41,32,107,101,121,32,105,115,32,112,114,101,115,115,101,100,10,0,39,37,115,39,32,40,37,105,41,32,107,101,121,32,105,115,32,114,101,108,101,97,115,101,100,10,0,67,108,111,115,101,100,10,0,82,101,102,114,101,115,104,10,0,82,101,115,105,122,105,110,103,32,116,111,32,37,105,32,37,105,10,0,77,111,117,115,101,32,98,117,116,116,111,110,32,37,105,32,104,97,115,32,98,101,101,110,32,112,114,101,115,115,101,100,10,0,77,111,117,115,101,32,98,117,116,116,111,110,32,37,105,32,104,97,115,32,98,101,101,110,32,114,101,108,101,97,115,101,100,10,0,68,114,97,103,103,101,100,32,37,105,32,116,111,32,37,105,32,37,105,10,0,77,111,118,101,100,32,37,105,32,116,111,32,37,105,32,37,105,10,0,77,111,117,115,101,32,119,104,101,101,108,32,104,97,115,32,98,101,101,110,32,109,111,118,101,100,32,116,111,32,37,105,10,0,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,10,0,71,76,70,87,32,118,101,114,115,105,111,110,32,105,115,32,37,105,46,37,105,46,37,105,10,0,87,105,110,100,111,119,32,115,105,122,101,32,105,115,32,37,105,32,37,105,10,0,76,101,102,116,32,99,111,110,116,114,111,108,32,105,115,32,112,114,101,115,115,101,100,10,0,76,101,102,116,32,99,111,110,116,114,111,108,32,105,115,32,114,101,108,101,97,115,101,100,10,0,77,111,117,115,101,32,98,117,116,116,111,110,32,49,32,105,115,32,112,114,101,115,115,101,100,10,0,77,111,117,115,101,32,98,117,116,116,111,110,32,49,32,105,115,32,114,101,108,101,97,115,101,100,10,0,77,111,117,115,101,32,112,111,115,105,116,105,111,110,32,105,115,32,37,105,32,37,105,10,0,77,111,117,115,101,32,119,104,101,101,108,32,112,111,115,32,105,115,32,37,105,10,0,84,105,109,101,32,105,115,32,37,102,10,0,71,76,32,118,101,114,115,105,111,110,32,105,115,32,37,105,46,37,105,46,37,105,10,0,37,105,32,112,114,111,99,101,115,115,111,114,115,32,97,114,101,32,97,118,97,105,108,97,98,108,101,10,0,32,45,32,37,45,50,55,115,32,58,32,37,105,10,0,87,69,66,71,76,95,99,111,109,112,114,101,115,115,101,100,95,116,101,120,116,117,114,101,95,115,51,116,99,0,39,37,115,39,32,101,120,116,101,110,115,105,111,110,32,105,115,32,37,115,46,10,0,115,117,112,112,111,114,116,101,100,0,110,111,116,32,115,117,112,112,111,114,116,101,100,0,71,76,95,69,88,84,95,102,114,97,109,101,98,117,102,102,101,114,95,111,98,106,101,99,116,0,39,37,115,39,32,101,120,116,101,110,115,105,111,110,32,112,114,111,99,32,97,100,100,114,101,115,115,32,105,115,32,37,112,46,10,0,83,108,101,101,112,105,110,103,32,49,32,115,101,99,46,46,46,10,0,46,46,46,68,111,110,101,46,10,0,40,42,116,101,109,112,111,114,97,114,121,41,0,40,42,118,97,114,97,114,103,41,0,61,91,67,93,0,61,63,0,109,97,105,110,0,76,117,97,0,67,0,102,111,114,32,105,116,101,114,97,116,111,114,0,109,101,116,97,109,101,116,104,111,100,0,117,112,118,97,108,117,101,0,97,116,116,101,109,112,116,32,116,111,32,37,115,32,37,115,32,39,37,115,39,32,40,97,32,37,115,32,118,97,108,117,101,41,0,97,116,116,101,109,112,116,32,116,111,32,37,115,32,97,32,37,115,32,118,97,108,117,101,0,99,111,110,99,97,116,101,110,97,116,101,0,112,101,114,102,111,114,109,32,97,114,105,116,104,109,101,116,105,99,32,111,110,0,97,116,116,101,109,112,116,32,116,111,32,99,111,109,112,97,114,101,32,116,119,111,32,37,115,32,118,97,108,117,101,115,0,97,116,116,101,109,112,116,32,116,111,32,99,111,109,112,97,114,101,32,37,115,32,119,105,116,104,32,37,115,0,103,108,111,98,97,108,0,102,105,101,108,100,0,99,111,110,115,116,97,110,116,0,67,32,115,116,97,99,107,32,111,118,101,114,102,108,111,119,0,101,114,114,111,114,32,105,110,32,101,114,114,111,114,32,104,97,110,100,108,105,110,103,0,97,116,116,101,109,112,116,32,116,111,32,121,105,101,108,100,32,97,99,114,111,115,115,32,97,32,67,45,99,97,108,108,32,98,111,117,110,100,97,114,121,0,97,116,116,101,109,112,116,32,116,111,32,121,105,101,108,100,32,102,114,111,109,32,111,117,116,115,105,100,101,32,97,32,99,111,114,111,117,116,105,110,101,0,97,116,116,101,109,112,116,32,116,111,32,108,111,97,100,32,97,32,37,115,32,99,104,117,110,107,32,40,109,111,100,101,32,105,115,32,39,37,115,39,41,0,98,105,110,97,114,121,0,116,101,120,116,0,99,97,110,110,111,116,32,114,101,115,117,109,101,32,110,111,110,45,115,117,115,112,101,110,100,101,100,32,99,111,114,111,117,116,105,110,101,0,110,111,32,109,101,115,115,97,103,101,0,101,114,114,111,114,32,105,110,32,95,95,103,99,32,109,101,116,97,109,101,116,104,111,100,32,40,37,115,41,0,116,111,111,32,109,97,110,121,32,37,115,32,40,108,105,109,105,116,32,105,115,32,37,100,41,0,109,101,109,111,114,121,32,97,108,108,111,99,97,116,105,111,110,32,101,114,114,111,114,58,32,98,108,111,99,107,32,116,111,111,32,98,105,103,0,0,1,2,2,3,3,3,3,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,110,78,0,120,88,0,37,112,0,37,0,105,110,118,97,108,105,100,32,111,112,116,105,111,110,32,39,37,37,37,99,39,32,116,111,32,39,108,117,97,95,112,117,115,104,102,115,116,114,105,110,103,39,0,91,115,116,114,105,110,103,32,34,0,34,93,0,96,113,65,84,80,80,92,108,60,16,60,84,108,124,124,124,124,124,124,96,96,96,104,34,188,188,188,132,228,84,84,16,98,98,4,98,20,81,80,23,108,97,98,101,108,115,47,103,111,116,111,115,0,60,37,115,62,32,97,116,32,108,105,110,101,32,37,100,32,110,111,116,32,105,110,115,105,100,101,32,97,32,108,111,111,112,0,110,111,32,118,105,115,105,98,108,101,32,108,97,98,101,108,32,39,37,115,39,32,102,111,114,32,60,103,111,116,111,62,32,97,116,32,108,105,110,101,32,37,100,0,60,103,111,116,111,32,37,115,62,32,97,116,32,108,105,110,101,32,37,100,32,106,117,109,112,115,32,105,110,116,111,32,116,104,101,32,115,99,111,112,101,32,111,102,32,108,111,99,97,108,32,39,37,115,39,0,37,115,32,101,120,112,101,99,116,101,100,0,102,117,110,99,116,105,111,110,32,97,116,32,108,105,110,101,32,37,100,0,109,97,105,110,32,102,117,110,99,116,105,111,110,0,116,111,111,32,109,97,110,121,32,37,115,32,40,108,105,109,105,116,32,105,115,32,37,100,41,32,105,110,32,37,115,0,67,32,108,101,118,101,108,115,0,37,115,32,101,120,112,101,99,116,101,100,32,40,116,111,32,99,108,111,115,101,32,37,115,32,97,116,32,108,105,110,101,32,37,100,41,0,40,102,111,114,32,105,110,100,101,120,41,0,40,102,111,114,32,108,105,109,105,116,41,0,40,102,111,114,32,115,116,101,112,41,0,40,102,111,114,32,103,101,110,101,114,97,116,111,114,41,0,40,102,111,114,32,115,116,97,116,101,41,0,40,102,111,114,32,99,111,110,116,114,111,108,41,0,39,61,39,32,111,114,32,39,105,110,39,32,101,120,112,101,99,116,101,100,0,108,97,98,101,108,32,39,37,115,39,32,97,108,114,101,97,100,121,32,100,101,102,105,110,101,100,32,111,110,32,108,105,110,101,32,37,100,0,115,121,110,116,97,120,32,101,114,114,111,114,0,117,110,101,120,112,101,99,116,101,100,32,115,121,109,98,111,108,0,102,117,110,99,116,105,111,110,32,97,114,103,117,109,101,110,116,115,32,101,120,112,101,99,116,101,100,0,105,116,101,109,115,32,105,110,32,97,32,99,111,110,115,116,114,117,99,116,111,114,0,102,117,110,99,116,105,111,110,115,0,115,101,108,102,0,60,110,97,109,101,62,32,111,114,32,39,46,46,46,39,32,101,120,112,101,99,116,101,100,0,108,111,99,97,108,32,118,97,114,105,97,98,108,101,115,0,99,97,110,110,111,116,32,117,115,101,32,39,46,46,46,39,32,111,117,116,115,105,100,101,32,97,32,118,97,114,97,114,103,32,102,117,110,99,116,105,111,110,0,6,6,6,6,7,7,7,7,7,7,10,9,5,4,3,3,3,3,3,3,3,3,3,3,3,3,2,2,1,1,117,112,118,97,108,117,101,115,0,110,111,116,32,101,110,111,117,103,104,32,109,101,109,111,114,121,0,105,110,118,97,108,105,100,32,107,101,121,32,116,111,32,39,110,101,120,116,39,0,116,97,98,108,101,32,111,118,101,114,102,108,111,119,0,116,97,98,108,101,32,105,110,100,101,120,32,105,115,32,110,105,108,0,116,97,98,108,101,32,105,110,100,101,120,32,105,115,32,78,97,78,0,98,111,111,108,101,97,110,0,117,115,101,114,100,97,116,97,0,110,117,109,98,101,114,0,116,104,114,101,97,100,0,112,114,111,116,111,0,117,112,118,97,108,0,95,95,110,101,119,105,110,100,101,120,0,95,95,108,101,110,0,95,95,101,113,0,95,95,97,100,100,0,95,95,115,117,98,0,95,95,109,117,108,0,95,95,100,105,118,0,95,95,109,111,100,0,95,95,112,111,119,0,95,95,117,110,109,0,95,95,108,116,0,95,95,108,101,0,95,95,99,111,110,99,97,116,0,95,95,99,97,108,108,0,98,105,110,97,114,121,32,115,116,114,105,110,103,0,25,147,13,10,26,10,0,116,114,117,110,99,97,116,101,100,0,110,111,116,32,97,0,118,101,114,115,105,111,110,32,109,105,115,109,97,116,99,104,32,105,110,0,105,110,99,111,109,112,97,116,105,98,108,101,0,99,111,114,114,117,112,116,101,100,0,37,115,58,32,37,115,32,112,114,101,99,111,109,112,105,108,101,100,32,99,104,117,110,107,0,105,110,100,101,120,0,108,111,111,112,32,105,110,32,103,101,116,116,97,98,108,101,0,108,111,111,112,32,105,110,32,115,101,116,116,97,98,108,101,0,115,116,114,105,110,103,32,108,101,110,103,116,104,32,111,118,101,114,102,108,111,119,0,103,101,116,32,108,101,110,103,116,104,32,111,102,0,39,102,111,114,39,32,105,110,105,116,105,97,108,32,118,97,108,117,101,32,109,117,115,116,32,98,101,32,97,32,110,117,109,98,101,114,0,39,102,111,114,39,32,108,105,109,105,116,32,109,117,115,116,32,98,101,32,97,32,110,117,109,98,101,114,0,39,102,111,114,39,32,115,116,101,112,32,109,117,115,116,32,98,101,32,97,32,110,117,109,98,101,114,0,115,116,97,99,107,32,116,114,97,99,101,98,97,99,107,58,0,10,9,46,46,46,0,83,108,110,116,0,10,9,37,115,58,0,37,100,58,0,32,105,110,32,0,102,117,110,99,116,105,111,110,32,39,37,115,39,0,109,97,105,110,32,99,104,117,110,107,0,102,117,110,99,116,105,111,110,32,60,37,115,58,37,100,62,0,10,9,40,46,46,46,116,97,105,108,32,99,97,108,108,115,46,46,46,41,0,98,97,100,32,97,114,103,117,109,101,110,116,32,35,37,100,32,40,37,115,41,0,109,101,116,104,111,100,0,99,97,108,108,105,110,103,32,39,37,115,39,32,111,110,32,98,97,100,32,115,101,108,102,32,40,37,115,41,0,98,97,100,32,97,114,103,117,109,101,110,116,32,35,37,100,32,116,111,32,39,37,115,39,32,40,37,115,41,0,83,108,0,37,115,58,37,100,58,32,0,37,115,58,32,37,115,0,37,115,32,101,120,112,101,99,116,101,100,44,32,103,111,116,32,37,115,0,105,110,118,97,108,105,100,32,111,112,116,105,111,110,32,39,37,115,39,0,115,116,97,99,107,32,111,118,101,114,102,108,111,119,32,40,37,115,41,0,98,117,102,102,101,114,32,116,111,111,32,108,97,114,103,101,0,61,115,116,100,105,110,0,64,37,115,0,99,97,110,110,111,116,32,37,115,32,37,115,58,32,37,115,0,114,98,0,114,101,111,112,101,110,0,111,98,106,101,99,116,32,108,101,110,103,116,104,32,105,115,32,110,111,116,32,97,32,110,117,109,98,101,114,0,37,115,58,32,37,112,0,110,97,109,101,32,99,111,110,102,108,105,99,116,32,102,111,114,32,109,111,100,117,108,101,32,39,37,115,39,0,109,117,108,116,105,112,108,101,32,76,117,97,32,86,77,115,32,100,101,116,101,99,116,101,100,0,118,101,114,115,105,111,110,32,109,105,115,109,97,116,99,104,58,32,97,112,112,46,32,110,101,101,100,115,32,37,102,44,32,76,117,97,32,99,111,114,101,32,112,114,111,118,105,100,101,115,32,37,102,0,98,97,100,32,99,111,110,118,101,114,115,105,111,110,32,110,117,109,98,101,114,45,62,105,110,116,59,32,109,117,115,116,32,114,101,99,111,109,112,105,108,101,32,76,117,97,32,119,105,116,104,32,112,114,111,112,101,114,32,115,101,116,116,105,110,103,115,0,116,111,111,32,109,97,110,121,32,117,112,118,97,108,117,101,115,0,80,65,78,73,67,58,32,117,110,112,114,111,116,101,99,116,101,100,32,101,114,114,111,114,32,105,110,32,99,97,108,108,32,116,111,32,76,117,97,32,65,80,73,32,40,37,115,41,10,0,112,97,99,107,97,103,101,0,99,111,114,111,117,116,105,110,101,0,116,97,98,108,101,0,105,111,0,111,115,0,115,116,114,105,110,103,0,98,105,116,51,50,0,109,97,116,104,0,99,111,110,116,114,111,108,32,115,116,114,117,99,116,117,114,101,32,116,111,111,32,108,111,110,103,0,102,117,110,99,116,105,111,110,32,111,114,32,101,120,112,114,101,115,115,105,111,110,32,116,111,111,32,99,111,109,112,108,101,120,0,99,111,110,115,116,114,117,99,116,111,114,32,116,111,111,32,108,111,110,103,0,99,111,110,115,116,97,110,116,115,0,111,112,99,111,100,101,115,0,0,0,0,0,0,0,0,0,0,0,8,8,8,8,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,22,22,22,22,22,22,22,22,22,22,4,4,4,4,4,4,4,21,21,21,21,21,21,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,4,4,4,4,5,4,21,21,21,21,21,21,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,4,4,4,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,39,37,99,39,0,99,104,97,114,40,37,100,41,0,39,37,115,39,0,95,69,78,86,0,99,104,117,110,107,32,104,97,115,32,116,111,111,32,109,97,110,121,32,108,105,110,101,115,0,105,110,118,97,108,105,100,32,108,111,110,103,32,115,116,114,105,110,103,32,100,101,108,105,109,105,116,101,114,0,108,101,120,105,99,97,108,32,101,108,101,109,101,110,116,32,116,111,111,32,108,111,110,103,0,117,110,102,105,110,105,115,104,101,100,32,115,116,114,105,110,103,0,104,101,120,97,100,101,99,105,109,97,108,32,100,105,103,105,116,32,101,120,112,101,99,116,101,100,0,105,110,118,97,108,105,100,32,101,115,99,97,112,101,32,115,101,113,117,101,110,99,101,0,100,101,99,105,109,97,108,32,101,115,99,97,112,101,32,116,111,111,32,108,97,114,103,101,0,88,120,0,69,101,0,80,112,0,43,45,0,109,97,108,102,111,114,109,101,100,32,110,117,109,98,101,114,0,117,110,102,105,110,105,115,104,101,100,32,108,111,110,103,32,115,116,114,105,110,103,0,117,110,102,105,110,105,115,104,101,100,32,108,111,110,103,32,99,111,109,109,101,110,116,0,37,115,58,37,100,58,32,37,115,0,37,115,32,110,101,97,114,32,37,115,0,97,110,100,0,98,114,101,97,107,0,100,111,0,101,108,115,101,0,101,108,115,101,105,102,0,102,97,108,115,101,0,102,111,114,0,102,117,110,99,116,105,111,110,0,103,111,116,111,0,105,102,0,105,110,0,108,111,99,97,108,0,110,105,108,0,110,111,116,0,111,114,0,114,101,112,101,97,116,0,116,104,101,110,0,116,114,117,101,0,117,110,116,105,108,0,119,104,105,108,101,0,46,46,0,46,46,46,0,61,61,0,62,61,0,60,61,0,126,61,0,58,58,0,60,101,111,102,62,0,60,110,117,109,98,101,114,62,0,60,110,97,109,101,62,0,60,115,116,114,105,110,103,62,0,95,71,0,76,117,97,32,53,46,50,0,95,86,69,82,83,73,79,78,0,97,115,115,101,114,116,0,99,111,108,108,101,99,116,103,97,114,98,97,103,101,0,100,111,102,105,108,101,0,101,114,114,111,114,0,105,112,97,105,114,115,0,108,111,97,100,102,105,108,101,0,108,111,97,100,0,108,111,97,100,115,116,114,105,110,103,0,110,101,120,116,0,112,97,105,114,115,0,112,99,97,108,108,0,112,114,105,110,116,0,114,97,119,101,113,117,97,108,0,114,97,119,108,101,110,0,114,97,119,103,101,116,0,114,97,119,115,101,116,0,115,101,108,101,99,116,0,116,111,110,117,109,98,101,114,0,116,111,115,116,114,105,110,103,0,120,112,99,97,108,108,0,118,97,108,117,101,32,101,120,112,101,99,116,101,100,0,115,116,97,99,107,32,111,118,101,114,102,108,111,119,0,98,97,115,101,32,111,117,116,32,111,102,32,114,97,110,103,101,0,32,12,10,13,9,11,0,95,95,109,101,116,97,116,97,98,108,101,0,99,97,110,110,111,116,32,99,104,97,110,103,101,32,97,32,112,114,111,116,101,99,116,101,100,32,109,101,116,97,116,97,98,108,101,0,105,110,100,101,120,32,111,117,116,32,111,102,32,114,97,110,103,101,0,116,97,98,108,101,32,111,114,32,115,116,114,105,110,103,32,101,120,112,101,99,116,101,100,0,39,116,111,115,116,114,105,110,103,39,32,109,117,115,116,32,114,101,116,117,114,110,32,97,32,115,116,114,105,110,103,32,116,111,32,39,112,114,105,110,116,39,0,95,95,112,97,105,114,115,0,98,116,0,61,40,108,111,97,100,41,0,116,111,111,32,109,97,110,121,32,110,101,115,116,101,100,32,102,117,110,99,116,105,111,110,115,0,114,101,97,100,101,114,32,102,117,110,99,116,105,111,110,32,109,117,115,116,32,114,101,116,117,114,110,32,97,32,115,116,114,105,110,103,0,95,95,105,112,97,105,114,115,0,99,111,108,108,101,99,116,0,115,116,111,112,0,114,101,115,116,97,114,116,0,115,116,101,112,0,115,101,116,112,97,117,115,101,0,115,101,116,115,116,101,112,109,117,108,0,115,101,116,109,97,106,111,114,105,110,99,0,105,115,114,117,110,110,105,110,103,0,103,101,110,101,114,97,116,105,111,110,97,108,0,105,110,99,114,101,109,101,110,116,97,108,0,97,115,115,101,114,116,105,111,110,32,102,97,105,108,101,100,33,0,97,114,115,104,105,102,116,0,98,97,110,100,0,98,110,111,116,0,98,111,114,0,98,120,111,114,0,98,116,101,115,116,0,101,120,116,114,97,99,116,0,108,114,111,116,97,116,101,0,108,115,104,105,102,116,0,114,101,112,108,97,99,101,0,114,114,111,116,97,116,101,0,114,115,104,105,102,116,0,102,105,101,108,100,32,99,97,110,110,111,116,32,98,101,32,110,101,103,97,116,105,118,101,0,119,105,100,116,104,32,109,117,115,116,32,98,101,32,112,111,115,105,116,105,118,101,0,116,114,121,105,110,103,32,116,111,32,97,99,99,101,115,115,32,110,111,110,45,101,120,105,115,116,101,110,116,32,98,105,116,115,0,99,114,101,97,116,101,0,114,101,115,117,109,101,0,114,117,110,110,105,110,103,0,115,116,97,116,117,115,0,119,114,97,112,0,121,105,101,108,100,0,116,111,111,32,109,97,110,121,32,97,114,103,117,109,101,110,116,115,32,116,111,32,114,101,115,117,109,101,0,99,97,110,110,111,116,32,114,101,115,117,109,101,32,100,101,97,100,32,99,111,114,111,117,116,105,110,101,0,116,111,111,32,109,97,110,121,32,114,101,115,117,108,116,115,32,116,111,32,114,101,115,117,109,101,0,99,111,114,111,117,116,105,110,101,32,101,120,112,101,99,116,101,100,0,115,117,115,112,101,110,100,101,100,0,110,111,114,109,97,108,0,100,101,97,100,0,100,101,98,117,103,0,103,101,116,117,115,101,114,118,97,108,117,101,0,103,101,116,104,111,111,107,0,103,101,116,105,110,102,111,0,103,101,116,108,111,99,97,108,0,103,101,116,114,101,103,105,115,116,114,121,0,103,101,116,109,101,116,97,116,97,98,108,101,0,103,101,116,117,112,118,97,108,117,101,0,117,112,118,97,108,117,101,106,111,105,110,0,117,112,118,97,108,117,101,105,100,0,115,101,116,117,115,101,114,118,97,108,117,101,0,115,101,116,104,111,111,107,0,115,101,116,108,111,99,97,108,0,115,101,116,109,101,116,97,116,97,98,108,101,0,115,101,116,117,112,118,97,108,117,101,0,116,114,97,99,101,98,97,99,107,0,110,105,108,32,111,114,32,116,97,98,108,101,32,101,120,112,101,99,116,101,100,0,108,101,118,101,108,32,111,117,116,32,111,102,32,114,97,110,103,101,0,95,72,75,69,89,0,107,0,95,95,109,111,100,101,0,99,97,108,108,0,114,101,116,117,114,110,0,99,111,117,110,116,0,116,97,105,108,32,99,97,108,108,0,102,117,108,108,32,117,115,101,114,100,97,116,97,32,101,120,112,101,99,116,101,100,44,32,103,111,116,32,108,105,103,104,116,32,117,115,101,114,100,97,116,97,0,62,117,0,105,110,118,97,108,105,100,32,117,112,118,97,108,117,101,32,105,110,100,101,120,0,76,117,97,32,102,117,110,99,116,105,111,110,32,101,120,112,101,99,116,101,100,0,102,108,110,83,116,117,0,62,37,115,0,102,117,110,99,116,105,111,110,32,111,114,32,108,101,118,101,108,32,101,120,112,101,99,116,101,100,0,115,111,117,114,99,101,0,115,104,111,114,116,95,115,114,99,0,108,105,110,101,100,101,102,105,110,101,100,0,108,97,115,116,108,105,110,101,100,101,102,105,110,101,100,0,119,104,97,116,0,99,117,114,114,101,110,116,108,105,110,101,0,110,117,112,115,0,110,112,97,114,97,109,115,0,105,115,118,97,114,97,114,103,0,110,97,109,101,0,110,97,109,101,119,104,97,116,0,105,115,116,97,105,108,99,97,108,108,0,97,99,116,105,118,101,108,105,110,101,115,0,102,117,110,99,0,101,120,116,101,114,110,97,108,32,104,111,111,107,0,108,117,97,95,100,101,98,117,103,62,32,0,99,111,110,116,10,0,61,40,100,101,98,117,103,32,99,111,109,109,97,110,100,41,0,37,115,10,0,70,73,76,69,42,0,95,73], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE);
/* memory initializer */ allocate([79,95,105,110,112,117,116,0,115,116,100,105,110,0,95,73,79,95,111,117,116,112,117,116,0,115,116,100,111,117,116,0,115,116,100,101,114,114,0,99,97,110,110,111,116,32,99,108,111,115,101,32,115,116,97,110,100,97,114,100,32,102,105,108,101,0,99,108,111,115,101,0,102,108,117,115,104,0,108,105,110,101,115,0,114,101,97,100,0,115,101,101,107,0,115,101,116,118,98,117,102,0,119,114,105,116,101,0,95,95,116,111,115,116,114,105,110,103,0,102,105,108,101,32,40,99,108,111,115,101,100,41,0,102,105,108,101,32,40,37,112,41,0,97,116,116,101,109,112,116,32,116,111,32,117,115,101,32,97,32,99,108,111,115,101,100,32,102,105,108,101,0,37,46,49,52,103,0,110,111,0,102,117,108,108,0,108,105,110,101,0,99,117,114,0,110,111,116,32,97,110,32,105,110,116,101,103,101,114,32,105,110,32,112,114,111,112,101,114,32,114,97,110,103,101,0,115,101,116,0,101,110,100,0,116,111,111,32,109,97,110,121,32,97,114,103,117,109,101,110,116,115,0,105,110,118,97,108,105,100,32,111,112,116,105,111,110,0,37,108,102,0,105,110,118,97,108,105,100,32,102,111,114,109,97,116,0,116,111,111,32,109,97,110,121,32,111,112,116,105,111,110,115,0,102,105,108,101,32,105,115,32,97,108,114,101,97,100,121,32,99,108,111,115,101,100,0,37,115,0,105,110,112,117,116,0,111,112,101,110,0,111,117,116,112,117,116,0,112,111,112,101,110,0,116,109,112,102,105,108,101,0,116,121,112,101,0,115,116,97,110,100,97,114,100,32,37,115,32,102,105,108,101,32,105,115,32,99,108,111,115,101,100,0,99,108,111,115,101,100,32,102,105,108,101,0,102,105,108,101,0,39,112,111,112,101,110,39,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,119,0,99,97,110,110,111,116,32,111,112,101,110,32,102,105,108,101,32,39,37,115,39,32,40,37,115,41,0,105,110,118,97,108,105,100,32,109,111,100,101,0,112,105,0,104,117,103,101,0,97,98,115,0,97,99,111,115,0,97,115,105,110,0,97,116,97,110,50,0,97,116,97,110,0,99,101,105,108,0,99,111,115,104,0,99,111,115,0,100,101,103,0,101,120,112,0,102,108,111,111,114,0,102,109,111,100,0,102,114,101,120,112,0,108,100,101,120,112,0,108,111,103,49,48,0,108,111,103,0,109,97,120,0,109,111,100,102,0,112,111,119,0,114,97,100,0,114,97,110,100,111,109,0,114,97,110,100,111,109,115,101,101,100,0,115,105,110,104,0,115,105,110,0,115,113,114,116,0,116,97,110,104,0,116,97,110,0,105,110,116,101,114,118,97,108,32,105,115,32,101,109,112,116,121,0,119,114,111,110,103,32,110,117,109,98,101,114,32,111,102,32,97,114,103,117,109,101,110,116,115,0,99,108,111,99,107,0,100,97,116,101,0,100,105,102,102,116,105,109,101,0,101,120,101,99,117,116,101,0,101,120,105,116,0,103,101,116,101,110,118,0,114,101,110,97,109,101,0,115,101,116,108,111,99,97,108,101,0,116,105,109,101,0,116,109,112,110,97,109,101,0,117,110,97,98,108,101,32,116,111,32,103,101,110,101,114,97,116,101,32,97,32,117,110,105,113,117,101,32,102,105,108,101,110,97,109,101,0,115,101,99,0,109,105,110,0,104,111,117,114,0,100,97,121,0,102,105,101,108,100,32,39,37,115,39,32,109,105,115,115,105,110,103,32,105,110,32,100,97,116,101,32,116,97,98,108,101,0,109,111,110,116,104,0,121,101,97,114,0,105,115,100,115,116,0,97,108,108,0,99,111,108,108,97,116,101,0,99,116,121,112,101,0,109,111,110,101,116,97,114,121,0,110,117,109,101,114,105,99,0,37,99,0,42,116,0,119,100,97,121,0,121,100,97,121,0,97,65,98,66,99,100,72,73,106,109,77,112,83,85,119,87,120,88,121,89,122,37,0,105,110,118,97,108,105,100,32,99,111,110,118,101,114,115,105,111,110,32,115,112,101,99,105,102,105,101,114,32,39,37,37,37,115,39,0,98,121,116,101,0,99,104,97,114,0,100,117,109,112,0,102,105,110,100,0,102,111,114,109,97,116,0,103,109,97,116,99,104,0,103,115,117,98,0,108,101,110,0,108,111,119,101,114,0,109,97,116,99,104,0,114,101,112,0,114,101,118,101,114,115,101,0,115,117,98,0,117,112,112,101,114,0,114,101,115,117,108,116,105,110,103,32,115,116,114,105,110,103,32,116,111,111,32,108,97,114,103,101,0,94,36,42,43,63,46,40,91,37,45,0,116,111,111,32,109,97,110,121,32,99,97,112,116,117,114,101,115,0,105,110,118,97,108,105,100,32,99,97,112,116,117,114,101,32,105,110,100,101,120,0,117,110,102,105,110,105,115,104,101,100,32,99,97,112,116,117,114,101,0,112,97,116,116,101,114,110,32,116,111,111,32,99,111,109,112,108,101,120,0,105,110,118,97,108,105,100,32,112,97,116,116,101,114,110,32,99,97,112,116,117,114,101,0,109,97,108,102,111,114,109,101,100,32,112,97,116,116,101,114,110,32,40,109,105,115,115,105,110,103,32,97,114,103,117,109,101,110,116,115,32,116,111,32,39,37,37,98,39,41,0,109,105,115,115,105,110,103,32,39,91,39,32,97,102,116,101,114,32,39,37,37,102,39,32,105,110,32,112,97,116,116,101,114,110,0,109,97,108,102,111,114,109,101,100,32,112,97,116,116,101,114,110,32,40,101,110,100,115,32,119,105,116,104,32,39,37,37,39,41,0,109,97,108,102,111,114,109,101,100,32,112,97,116,116,101,114,110,32,40,109,105,115,115,105,110,103,32,39,93,39,41,0,105,110,118,97,108,105,100,32,99,97,112,116,117,114,101,32,105,110,100,101,120,32,37,37,37,100,0,115,116,114,105,110,103,47,102,117,110,99,116,105,111,110,47,116,97,98,108,101,32,101,120,112,101,99,116,101,100,0,105,110,118,97,108,105,100,32,117,115,101,32,111,102,32,39,37,99,39,32,105,110,32,114,101,112,108,97,99,101,109,101,110,116,32,115,116,114,105,110,103,0,105,110,118,97,108,105,100,32,114,101,112,108,97,99,101,109,101,110,116,32,118,97,108,117,101,32,40,97,32,37,115,41,0,110,111,32,118,97,108,117,101,0,45,43,32,35,48,0,105,110,118,97,108,105,100,32,102,111,114,109,97,116,32,40,114,101,112,101,97,116,101,100,32,102,108,97,103,115,41,0,105,110,118,97,108,105,100,32,102,111,114,109,97,116,32,40,119,105,100,116,104,32,111,114,32,112,114,101,99,105,115,105,111,110,32,116,111,111,32,108,111,110,103,41,0,110,111,116,32,97,32,110,117,109,98,101,114,32,105,110,32,112,114,111,112,101,114,32,114,97,110,103,101,0,110,111,116,32,97,32,110,111,110,45,110,101,103,97,116,105,118,101,32,110,117,109,98,101,114,32,105,110,32,112,114,111,112,101,114,32,114,97,110,103,101,0,92,37,100,0,92,37,48,51,100,0,105,110,118,97,108,105,100,32,111,112,116,105,111,110,32,39,37,37,37,99,39,32,116,111,32,39,102,111,114,109,97,116,39,0,117,110,97,98,108,101,32,116,111,32,100,117,109,112,32,103,105,118,101,110,32,102,117,110,99,116,105,111,110,0,118,97,108,117,101,32,111,117,116,32,111,102,32,114,97,110,103,101,0,115,116,114,105,110,103,32,115,108,105,99,101,32,116,111,111,32,108,111,110,103,0,117,110,112,97,99,107,0,99,111,110,99,97,116,0,109,97,120,110,0,105,110,115,101,114,116,0,112,97,99,107,0,114,101,109,111,118,101,0,115,111,114,116,0,105,110,118,97,108,105,100,32,111,114,100,101,114,32,102,117,110,99,116,105,111,110,32,102,111,114,32,115,111,114,116,105,110,103,0,112,111,115,105,116,105,111,110,32,111,117,116,32,111,102,32,98,111,117,110,100,115,0,116,111,111,32,109,97,110,121,32,114,101,115,117,108,116,115,32,116,111,32,117,110,112,97,99,107,0,110,0,119,114,111,110,103,32,110,117,109,98,101,114,32,111,102,32,97,114,103,117,109,101,110,116,115,32,116,111,32,39,105,110,115,101,114,116,39,0,105,110,118,97,108,105,100,32,118,97,108,117,101,32,40,37,115,41,32,97,116,32,105,110,100,101,120,32,37,100,32,105,110,32,116,97,98,108,101,32,102,111,114,32,39,99,111,110,99,97,116,39,0,95,67,76,73,66,83,0,95,95,103,99,0,108,111,97,100,101,114,115,0,115,101,97,114,99,104,101,114,115,0,112,97,116,104,0,76,85,65,95,80,65,84,72,95,53,95,50,0,76,85,65,95,80,65,84,72,0,47,117,115,114,47,108,111,99,97,108,47,115,104,97,114,101,47,108,117,97,47,53,46,50,47,63,46,108,117,97,59,47,117,115,114,47,108,111,99,97,108,47,115,104,97,114,101,47,108,117,97,47,53,46,50,47,63,47,105,110,105,116,46,108,117,97,59,47,117,115,114,47,108,111,99,97,108,47,108,105,98,47,108,117,97,47,53,46,50,47,63,46,108,117,97,59,47,117,115,114,47,108,111,99,97,108,47,108,105,98,47,108,117,97,47,53,46,50,47,63,47,105,110,105,116,46,108,117,97,59,46,47,63,46,108,117,97,0,99,112,97,116,104,0,76,85,65,95,67,80,65,84,72,95,53,95,50,0,76,85,65,95,67,80,65,84,72,0,47,117,115,114,47,108,111,99,97,108,47,108,105,98,47,108,117,97,47,53,46,50,47,63,46,115,111,59,47,117,115,114,47,108,111,99,97,108,47,108,105,98,47,108,117,97,47,53,46,50,47,108,111,97,100,97,108,108,46,115,111,59,46,47,63,46,115,111,0,47,10,59,10,63,10,33,10,45,10,0,99,111,110,102,105,103,0,95,76,79,65,68,69,68,0,108,111,97,100,101,100,0,95,80,82,69,76,79,65,68,0,112,114,101,108,111,97,100,0,109,111,100,117,108,101,0,114,101,113,117,105,114,101,0,39,112,97,99,107,97,103,101,46,115,101,97,114,99,104,101,114,115,39,32,109,117,115,116,32,98,101,32,97,32,116,97,98,108,101,0,109,111,100,117,108,101,32,39,37,115,39,32,110,111,116,32,102,111,117,110,100,58,37,115,0,95,78,65,77,69,0,95,77,0,95,80,65,67,75,65,71,69,0,102,0,39,109,111,100,117,108,101,39,32,110,111,116,32,99,97,108,108,101,100,32,102,114,111,109,32,97,32,76,117,97,32,102,117,110,99,116,105,111,110,0,76,85,65,95,78,79,69,78,86,0,59,59,0,59,1,59,0,1,0,39,112,97,99,107,97,103,101,46,37,115,39,32,109,117,115,116,32,98,101,32,97,32,115,116,114,105,110,103,0,47,0,101,114,114,111,114,32,108,111,97,100,105,110,103,32,109,111,100,117,108,101,32,39,37,115,39,32,102,114,111,109,32,102,105,108,101,32,39,37,115,39,58,10,9,37,115,0,10,9,110,111,32,109,111,100,117,108,101,32,39,37,115,39,32,105,110,32,102,105,108,101,32,39,37,115,39,0,95,0,108,117,97,111,112,101,110,95,37,115,0,100,121,110,97,109,105,99,32,108,105,98,114,97,114,105,101,115,32,110,111,116,32,101,110,97,98,108,101,100,59,32,99,104,101,99,107,32,121,111,117,114,32,76,117,97,32,105,110,115,116,97,108,108,97,116,105,111,110,0,63,0,114,0,10,9,110,111,32,102,105,108,101,32,39,37,115,39,0,10,9,110,111,32,102,105,101,108,100,32,112,97,99,107,97,103,101,46,112,114,101,108,111,97,100,91,39,37,115,39,93,0,108,111,97,100,108,105,98,0,115,101,97,114,99,104,112,97,116,104,0,115,101,101,97,108,108,0,95,95,105,110,100,101,120,0,97,98,115,101,110,116,0,105,110,105,116,0,69,88,84,0,65,82,66,0,79,69,83,0,65,78,71,76,69,0,103,108,67,114,101,97,116,101,80,114,111,103,114,97,109,79,98,106,101,99,116,0,103,108,67,114,101,97,116,101,80,114,111,103,114,97,109,0,103,108,85,115,101,80,114,111,103,114,97,109,79,98,106,101,99,116,0,103,108,85,115,101,80,114,111,103,114,97,109,0,103,108,67,114,101,97,116,101,83,104,97,100,101,114,79,98,106,101,99,116,0,103,108,67,114,101,97,116,101,83,104,97,100,101,114,0,103,108,65,116,116,97,99,104,79,98,106,101,99,116,0,103,108,65,116,116,97,99,104,83,104,97,100,101,114,0,103,108,68,101,116,97,99,104,79,98,106,101,99,116,0,103,108,68,101,116,97,99,104,83,104,97,100,101,114,0,103,108,80,105,120,101,108,83,116,111,114,101,105,0,103,108,71,101,116,83,116,114,105,110,103,0,103,108,71,101,116,73,110,116,101,103,101,114,118,0,103,108,71,101,116,70,108,111,97,116,118,0,103,108,71,101,116,66,111,111,108,101,97,110,118,0,103,108,71,101,110,84,101,120,116,117,114,101,115,0,103,108,68,101,108,101,116,101,84,101,120,116,117,114,101,115,0,103,108,67,111,109,112,114,101,115,115,101,100,84,101,120,73,109,97,103,101,50,68,0,103,108,67,111,109,112,114,101,115,115,101,100,84,101,120,83,117,98,73,109,97,103,101,50,68,0,103,108,84,101,120,73,109,97,103,101,50,68,0,103,108,84,101,120,83,117,98,73,109,97,103,101,50,68,0,103,108,82,101,97,100,80,105,120,101,108,115,0,103,108,66,105,110,100,84,101,120,116,117,114,101,0,103,108,71,101,116,84,101,120,80,97,114,97,109,101,116,101,114,102,118,0,103,108,71,101,116,84,101,120,80,97,114,97,109,101,116,101,114,105,118,0,103,108,84,101,120,80,97,114,97,109,101,116,101,114,102,118,0,103,108,84,101,120,80,97,114,97,109,101,116,101,114,105,118,0,103,108,73,115,84,101,120,116,117,114,101,0,103,108,71,101,110,66,117,102,102,101,114,115,0,103,108,68,101,108,101,116,101,66,117,102,102,101,114,115,0,103,108,71,101,116,66,117,102,102,101,114,80,97,114,97,109,101,116,101,114,105,118,0,103,108,66,117,102,102,101,114,68,97,116,97,0,103,108,66,117,102,102,101,114,83,117,98,68,97,116,97,0,103,108,73,115,66,117,102,102,101,114,0,103,108,71,101,110,82,101,110,100,101,114,98,117,102,102,101,114,115,0,103,108,68,101,108,101,116,101,82,101,110,100,101,114,98,117,102,102,101,114,115,0,103,108,66,105,110,100,82,101,110,100,101,114,98,117,102,102,101,114,0,103,108,71,101,116,82,101,110,100,101,114,98,117,102,102,101,114,80,97,114,97,109,101,116,101,114,105,118,0,103,108,73,115,82,101,110,100,101,114,98,117,102,102,101,114,0,103,108,71,101,116,85,110,105,102,111,114,109,102,118,0,103,108,71,101,116,85,110,105,102,111,114,109,105,118,0,103,108,71,101,116,85,110,105,102,111,114,109,76,111,99,97,116,105,111,110,0,103,108,71,101,116,86,101,114,116,101,120,65,116,116,114,105,98,102,118,0,103,108,71,101,116,86,101,114,116,101,120,65,116,116,114,105,98,105,118,0,103,108,71,101,116,86,101,114,116,101,120,65,116,116,114,105,98,80,111,105,110,116,101,114,118,0,103,108,71,101,116,65,99,116,105,118,101,85,110,105,102,111,114,109,0,103,108,85,110,105,102,111,114,109,49,102,0,103,108,85,110,105,102,111,114,109,50,102,0,103,108,85,110,105,102,111,114,109,51,102,0,103,108,85,110,105,102,111,114,109,52,102,0,103,108,85,110,105,102,111,114,109,49,105,0,103,108,85,110,105,102,111,114,109,50,105,0,103,108,85,110,105,102,111,114,109,51,105,0,103,108,85,110,105,102,111,114,109,52,105,0,103,108,85,110,105,102,111,114,109,49,105,118,0,103,108,85,110,105,102,111,114,109,50,105,118,0,103,108,85,110,105,102,111,114,109,51,105,118,0,103,108,85,110,105,102,111,114,109,52,105,118,0,103,108,85,110,105,102,111,114,109,49,102,118,0,103,108,85,110,105,102,111,114,109,50,102,118,0,103,108,85,110,105,102,111,114,109,51,102,118,0,103,108,85,110,105,102,111,114,109,52,102,118,0,103,108,85,110,105,102,111,114,109,77,97,116,114,105,120,50,102,118,0,103,108,85,110,105,102,111,114,109,77,97,116,114,105,120,51,102,118,0,103,108,85,110,105,102,111,114,109,77,97,116,114,105,120,52,102,118,0,103,108,66,105,110,100,66,117,102,102,101,114,0,103,108,86,101,114,116,101,120,65,116,116,114,105,98,49,102,118,0,103,108,86,101,114,116,101,120,65,116,116,114,105,98,50,102,118,0,103,108,86,101,114,116,101,120,65,116,116,114,105,98,51,102,118,0,103,108,86,101,114,116,101,120,65,116,116,114,105,98,52,102,118,0,103,108,71,101,116,65,116,116,114,105,98,76,111,99,97,116,105,111,110,0,103,108,71,101,116,65,99,116,105,118,101,65,116,116,114,105,98,0,103,108,68,101,108,101,116,101,83,104,97,100,101,114,0,103,108,71,101,116,65,116,116,97,99,104,101,100,83,104,97,100,101,114,115,0,103,108,83,104,97,100,101,114,83,111,117,114,99,101,0,103,108,71,101,116,83,104,97,100,101,114,83,111,117,114,99,101,0,103,108,67,111,109,112,105,108,101,83,104,97,100,101,114,0,103,108,71,101,116,83,104,97,100,101,114,73,110,102,111,76,111,103,0,103,108,71,101,116,83,104,97,100,101,114,105,118,0,103,108,71,101,116,80,114,111,103,114,97,109,105,118,0,103,108,73,115,83,104,97,100,101,114,0,103,108,68,101,108,101,116,101,80,114,111,103,114,97,109,0,103,108,71,101,116,83,104,97,100,101,114,80,114,101,99,105,115,105,111,110,70,111,114,109,97,116,0,103,108,76,105,110,107,80,114,111,103,114,97,109,0,103,108,71,101,116,80,114,111,103,114,97,109,73,110,102,111,76,111,103,0,103,108,86,97,108,105,100,97,116,101,80,114,111,103,114,97,109,0,103,108,73,115,80,114,111,103,114,97,109,0,103,108,66,105,110,100,65,116,116,114,105,98,76,111,99,97,116,105,111,110,0,103,108,66,105,110,100,70,114,97,109,101,98,117,102,102,101,114,0,103,108,71,101,110,70,114,97,109,101,98,117,102,102,101,114,115,0,103,108,68,101,108,101,116,101,70,114,97,109,101,98,117,102,102,101,114,115,0,103,108,70,114,97,109,101,98,117,102,102,101,114,82,101,110,100,101,114,98,117,102,102,101,114,0,103,108,70,114,97,109,101,98,117,102,102,101,114,84,101,120,116,117,114,101,50,68,0,103,108,71,101,116,70,114,97,109,101,98,117,102,102,101,114,65,116,116,97,99,104,109,101,110,116,80,97,114,97,109,101,116,101,114,105,118,0,103,108,73,115,70,114,97,109,101,98,117,102,102,101,114,0,103,108,68,101,108,101,116,101,79,98,106,101,99,116,0,103,108,71,101,116,79,98,106,101,99,116,80,97,114,97,109,101,116,101,114,105,118,0,103,108,71,101,116,73,110,102,111,76,111,103,0,103,108,66,105,110,100,80,114,111,103,114,97,109,0,103,108,71,101,116,80,111,105,110,116,101,114,118,0,103,108,68,114,97,119,82,97,110,103,101,69,108,101,109,101,110,116,115,0,103,108,69,110,97,98,108,101,67,108,105,101,110,116,83,116,97,116,101,0,103,108,86,101,114,116,101,120,80,111,105,110,116,101,114,0,103,108,84,101,120,67,111,111,114,100,80,111,105,110,116,101,114,0,103,108,78,111,114,109,97,108,80,111,105,110,116,101,114,0,103,108,67,111,108,111,114,80,111,105,110,116,101,114,0,103,108,67,108,105,101,110,116,65,99,116,105,118,101,84,101,120,116,117,114,101,0,103,108,71,101,110,86,101,114,116,101,120,65,114,114,97,121,115,0,103,108,68,101,108,101,116,101,86,101,114,116,101,120,65,114,114,97,121,115,0,103,108,66,105,110,100,86,101,114,116,101,120,65,114,114,97,121,0,103,108,77,97,116,114,105,120,77,111,100,101,0,103,108,76,111,97,100,73,100,101,110,116,105,116,121,0,103,108,76,111,97,100,77,97,116,114,105,120,102,0,103,108,70,114,117,115,116,117,109,0,103,108,82,111,116,97,116,101,102,0,103,108,86,101,114,116,101,120,65,116,116,114,105,98,80,111,105,110,116,101,114,0,103,108,69,110,97,98,108,101,86,101,114,116,101,120,65,116,116,114,105,98,65,114,114,97,121,0,103,108,68,105,115,97,98,108,101,86,101,114,116,101,120,65,116,116,114,105,98,65,114,114,97,121,0,103,108,68,114,97,119,65,114,114,97,121,115,0,103,108,68,114,97,119,69,108,101,109,101,110,116,115,0,103,108,83,104,97,100,101,114,66,105,110,97,114,121,0,103,108,82,101,108,101,97,115,101,83,104,97,100,101,114,67,111,109,112,105,108,101,114,0,103,108,71,101,116,69,114,114,111,114,0,103,108,86,101,114,116,101,120,65,116,116,114,105,98,68,105,118,105,115,111,114,0,103,108,68,114,97,119,65,114,114,97,121,115,73,110,115,116,97,110,99,101,100,0,103,108,68,114,97,119,69,108,101,109,101,110,116,115,73,110,115,116,97,110,99,101,100,0,103,108,70,105,110,105,115,104,0,103,108,70,108,117,115,104,0,103,108,67,108,101,97,114,68,101,112,116,104,0,103,108,67,108,101,97,114,68,101,112,116,104,102,0,103,108,68,101,112,116,104,70,117,110,99,0,103,108,69,110,97,98,108,101,0,103,108,68,105,115,97,98,108,101,0,103,108,70,114,111,110,116,70,97,99,101,0,103,108,67,117,108,108,70,97,99,101,0,103,108,67,108,101,97,114,0,103,108,76,105,110,101,87,105,100,116,104,0,103,108,67,108,101,97,114,83,116,101,110,99,105,108,0,103,108,68,101,112,116,104,77,97,115,107,0,103,108,83,116,101,110,99,105,108,77,97,115,107,0,103,108,67,104,101,99,107,70,114,97,109,101,98,117,102,102,101,114,83,116,97,116,117,115,0,103,108,71,101,110,101,114,97,116,101,77,105,112,109,97,112,0,103,108,65,99,116,105,118,101,84,101,120,116,117,114,101,0,103,108,66,108,101,110,100,69,113,117,97,116,105,111,110,0,103,108,73,115,69,110,97,98,108,101,100,0,103,108,66,108,101,110,100,70,117,110,99,0,103,108,66,108,101,110,100,69,113,117,97,116,105,111,110,83,101,112,97,114,97,116,101,0,103,108,68,101,112,116,104,82,97,110,103,101,0,103,108,68,101,112,116,104,82,97,110,103,101,102,0,103,108,83,116,101,110,99,105,108,77,97,115,107,83,101,112,97,114,97,116,101,0,103,108,72,105,110,116,0,103,108,80,111,108,121,103,111,110,79,102,102,115,101,116,0,103,108,86,101,114,116,101,120,65,116,116,114,105,98,49,102,0,103,108,83,97,109,112,108,101,67,111,118,101,114,97,103,101,0,103,108,84,101,120,80,97,114,97,109,101,116,101,114,105,0,103,108,84,101,120,80,97,114,97,109,101,116,101,114,102,0,103,108,86,101,114,116,101,120,65,116,116,114,105,98,50,102,0,103,108,83,116,101,110,99,105,108,70,117,110,99,0,103,108,83,116,101,110,99,105,108,79,112,0,103,108,86,105,101,119,112,111,114,116,0,103,108,67,108,101,97,114,67,111,108,111,114,0,103,108,83,99,105,115,115,111,114,0,103,108,86,101,114,116,101,120,65,116,116,114,105,98,51,102,0,103,108,67,111,108,111,114,77,97,115,107,0,103,108,82,101,110,100,101,114,98,117,102,102,101,114,83,116,111,114,97,103,101,0,103,108,66,108,101,110,100,70,117,110,99,83,101,112,97,114,97,116,101,0,103,108,66,108,101,110,100,67,111,108,111,114,0,103,108,83,116,101,110,99,105,108,70,117,110,99,83,101,112,97,114,97,116,101,0,103,108,83,116,101,110,99,105,108,79,112,83,101,112,97,114,97,116,101,0,103,108,86,101,114,116,101,120,65,116,116,114,105,98,52,102,0,103,108,67,111,112,121,84,101,120,73,109,97,103,101,50,68,0,103,108,67,111,112,121,84,101,120,83,117,98,73,109,97,103,101,50,68,0,103,108,68,114,97,119,66,117,102,102,101,114,115,0,123,32,77,111,100,117,108,101,46,112,114,105,110,116,69,114,114,40,39,98,97,100,32,110,97,109,101,32,105,110,32,103,101,116,80,114,111,99,65,100,100,114,101,115,115,58,32,39,32,43,32,91,80,111,105,110,116,101,114,95,115,116,114,105,110,103,105,102,121,40,36,48,41,44,32,80,111,105,110,116,101,114,95,115,116,114,105,110,103,105,102,121,40,36,49,41,93,41,59,32,125,0,84,33,34,25,13,1,2,3,17,75,28,12,16,4,11,29,18,30,39,104,110,111,112,113,98,32,5,6,15,19,20,21,26,8,22,7,40,36,23,24,9,10,14,27,31,37,35,131,130,125,38,42,43,60,61,62,63,67,71,74,77,88,89,90,91,92,93,94,95,96,97,99,100,101,102,103,105,106,107,108,114,115,116,121,122,123,124,0,73,108,108,101,103,97,108,32,98,121,116,101,32,115,101,113,117,101,110,99,101,0,68,111,109,97,105,110,32,101,114,114,111,114,0,82,101,115,117,108,116,32,110,111,116,32,114,101,112,114,101,115,101,110,116,97,98,108,101,0,78,111,116,32,97,32,116,116,121,0,80,101,114,109,105,115,115,105,111,110,32,100,101,110,105,101,100,0,79,112,101,114,97,116,105,111,110,32,110,111,116,32,112,101,114,109,105,116,116,101,100,0,78,111,32,115,117,99,104,32,102,105,108,101,32,111,114,32,100,105,114,101,99,116,111,114,121,0,78,111,32,115,117,99,104,32,112,114,111,99,101,115,115,0,70,105,108,101,32,101,120,105,115,116,115,0,86,97,108,117,101,32,116,111,111,32,108,97,114,103,101,32,102,111,114,32,100,97,116,97,32,116,121,112,101,0,78,111,32,115,112,97,99,101,32,108,101,102,116,32,111,110,32,100,101,118,105,99,101,0,79,117,116,32,111,102,32,109,101,109,111,114,121,0,82,101,115,111,117,114,99,101,32,98,117,115,121,0,73,110,116,101,114,114,117,112,116,101,100,32,115,121,115,116,101,109,32,99,97,108,108,0,82,101,115,111,117,114,99,101,32,116,101,109,112,111,114,97,114,105,108,121,32,117,110,97,118,97,105,108,97,98,108,101,0,73,110,118,97,108,105,100,32,115,101,101,107,0,67,114,111,115,115,45,100,101,118,105,99,101,32,108,105,110,107,0,82,101,97,100,45,111,110,108,121,32,102,105,108,101,32,115,121,115,116,101,109,0,68,105,114,101,99,116,111,114,121,32,110,111,116,32,101,109,112,116,121,0,67,111,110,110,101,99,116,105,111,110,32,114,101,115,101,116,32,98,121,32,112,101,101,114,0,79,112,101,114,97,116,105,111,110,32,116,105,109,101,100,32,111,117,116,0,67,111,110,110,101,99,116,105,111,110,32,114,101,102,117,115,101,100,0,72,111,115,116,32,105,115,32,100,111,119,110,0,72,111,115,116,32,105,115,32,117,110,114,101,97,99,104,97,98,108,101,0,65,100,100,114,101,115,115,32,105,110,32,117,115,101,0,66,114,111,107,101,110,32,112,105,112,101,0,73,47,79,32,101,114,114,111,114,0,78,111,32,115,117,99,104,32,100,101,118,105,99,101,32,111,114,32,97,100,100,114,101,115,115,0,66,108,111,99,107,32,100,101,118,105,99,101,32,114,101,113,117,105,114,101,100,0,78,111,32,115,117,99,104,32,100,101,118,105,99,101,0,78,111,116,32,97,32,100,105,114,101,99,116,111,114,121,0,73,115,32,97,32,100,105,114,101,99,116,111,114,121,0,84,101,120,116,32,102,105,108,101,32,98,117,115,121,0,69,120,101,99,32,102,111,114,109,97,116,32,101,114,114,111,114,0,73,110,118,97,108,105,100,32,97,114,103,117,109,101,110,116,0,65,114,103,117,109,101,110,116,32,108,105,115,116,32,116,111,111,32,108,111,110,103,0,83,121,109,98,111,108,105,99,32,108,105,110,107,32,108,111,111,112,0,70,105,108,101,110,97,109,101,32,116,111,111,32,108,111,110,103,0,84,111,111,32,109,97,110,121,32,111,112,101,110,32,102,105,108,101,115,32,105,110,32,115,121,115,116,101,109,0,78,111,32,102,105,108,101,32,100,101,115,99,114,105,112,116,111,114,115,32,97,118,97,105,108,97,98,108,101,0,66,97,100,32,102,105,108,101,32,100,101,115,99,114,105,112,116,111,114,0,78,111,32,99,104,105,108,100,32,112,114,111,99,101,115,115,0,66,97,100,32,97,100,100,114,101,115,115,0,70,105,108,101,32,116,111,111,32,108,97,114,103,101,0,84,111,111,32,109,97,110,121,32,108,105,110,107,115,0,78,111,32,108,111,99,107,115,32,97,118,97,105,108,97,98,108,101,0,82,101,115,111,117,114,99,101,32,100,101,97,100,108,111,99,107,32,119,111,117,108,100,32,111,99,99,117,114,0,83,116,97,116,101,32,110,111,116,32,114,101,99,111,118,101,114,97,98,108,101,0,80,114,101,118,105,111,117,115,32,111,119,110,101,114,32,100,105,101,100,0,79,112,101,114,97,116,105,111,110,32,99,97,110,99,101,108,101,100,0,70,117,110,99,116,105,111,110,32,110,111,116,32,105,109,112,108,101,109,101,110,116,101,100,0,78,111,32,109,101,115,115,97,103,101,32,111,102,32,100,101,115,105,114,101,100,32,116,121,112,101,0,73,100,101,110,116,105,102,105,101,114,32,114,101,109,111,118,101,100,0,68,101,118,105,99,101,32,110,111,116,32,97,32,115,116,114,101,97,109,0,78,111,32,100,97,116,97,32,97,118,97,105,108,97,98,108,101,0,68,101,118,105,99,101,32,116,105,109,101,111,117,116,0,79,117,116,32,111,102,32,115,116,114,101,97,109,115,32,114,101,115,111,117,114,99,101,115,0,76,105,110,107,32,104,97,115,32,98,101,101,110,32,115,101,118,101,114,101,100,0,80,114,111,116,111,99,111,108,32,101,114,114,111,114,0,66,97,100,32,109,101,115,115,97,103,101,0,70,105,108,101,32,100,101,115,99,114,105,112,116,111,114,32,105,110,32,98,97,100,32,115,116,97,116,101,0,78,111,116,32,97,32,115,111,99,107,101,116,0,68,101,115,116,105,110,97,116,105,111,110,32,97,100,100,114,101,115,115,32,114,101,113,117,105,114,101,100,0,77,101,115,115,97,103,101,32,116,111,111,32,108,97,114,103,101,0,80,114,111,116,111,99,111,108,32,119,114,111,110,103,32,116,121,112,101,32,102,111,114,32,115,111,99,107,101,116,0,80,114,111,116,111,99,111,108,32,110,111,116,32,97,118,97,105,108,97,98,108,101,0,80,114,111,116,111,99,111,108,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,83,111,99,107,101,116,32,116,121,112,101,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,78,111,116,32,115,117,112,112,111,114,116,101,100,0,80,114,111,116,111,99,111,108,32,102,97,109,105,108,121,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,65,100,100,114,101,115,115,32,102,97,109,105,108,121,32,110,111,116,32,115,117,112,112,111,114,116,101,100,32,98,121,32,112,114,111,116,111,99,111,108,0,65,100,100,114,101,115,115,32,110,111,116,32,97,118,97,105,108,97,98,108,101,0,78,101,116,119,111,114,107,32,105,115,32,100,111,119,110,0,78,101,116,119,111,114,107,32,117,110,114,101,97,99,104,97,98,108,101,0,67,111,110,110,101,99,116,105,111,110,32,114,101,115,101,116,32,98,121,32,110,101,116,119,111,114,107,0,67,111,110,110,101,99,116,105,111,110,32,97,98,111,114,116,101,100,0,78,111,32,98,117,102,102,101,114,32,115,112,97,99,101,32,97,118,97,105,108,97,98,108,101,0,83,111,99,107,101,116,32,105,115,32,99,111,110,110,101,99,116,101,100,0,83,111,99,107,101,116,32,110,111,116,32,99,111,110,110,101,99,116,101,100,0,67,97,110,110,111,116,32,115,101,110,100,32,97,102,116,101,114,32,115,111,99,107,101,116,32,115,104,117,116,100,111,119,110,0,79,112,101,114,97,116,105,111,110,32,97,108,114,101,97,100,121,32,105,110,32,112,114,111,103,114,101,115,115,0,79,112,101,114,97,116,105,111,110,32,105,110,32,112,114,111,103,114,101,115,115,0,83,116,97,108,101,32,102,105,108,101,32,104,97,110,100,108,101,0,82,101,109,111,116,101,32,73,47,79,32,101,114,114,111,114,0,81,117,111,116,97,32,101,120,99,101,101,100,101,100,0,78,111,32,109,101,100,105,117,109,32,102,111,117,110,100,0,87,114,111,110,103,32,109,101,100,105,117,109,32,116,121,112,101,0,78,111,32,101,114,114,111,114,32,105,110,102,111,114,109,97,116,105,111,110,0,0,105,110,102,105,110,105,116,121,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,1,2,3,4,5,6,7,8,9,255,255,255,255,255,255,255,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,255,255,255,255,255,255,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,1,2,4,7,3,6,5,0,67,46,85,84,70,45,56,0,114,119,97,0,119,43,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,47,116,109,112,0,47,116,109,112,47,116,37,120,45,37,120], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+10240);
/* memory initializer */ allocate([17,0,10,0,17,17,17,0,0,0,0,5,0,0,0,0,0,0,9,0,0,0,0,11,0,0,0,0,0,0,0,0,17,0,15,10,17,17,17,3,10,7,0,1,19,9,11,11,0,0,9,6,11,0,0,11,0,6,17,0,0,0,17,17,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,17,0,10,10,17,17,17,0,10,0,0,2,0,9,11,0,0,0,9,0,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,0,0,0,0,0,0,0,0,0,0,0,13,0,0,0,4,13,0,0,0,0,9,14,0,0,0,0,0,14,0,0,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,0,15,0,0,0,0,9,16,0,0,0,0,0,16,0,0,16,0,0,18,0,0,0,18,18,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18,0,0,0,18,18,18,0,0,0,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,0,10,0,0,0,0,9,11,0,0,0,0,0,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,0,48,49,50,51,52,53,54,55,56,57,65,66,67,68,69,70,45,43,32,32,32,48,88,48,120,0,40,110,117,108,108,41,0,45,48,88,43,48,88,32,48,88,45,48,120,43,48,120,32,48,120,0,105,110,102,0,73,78,70,0,110,97,110,0,78,65,78,0,46,0,0], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+20212);





/* no memory initializer */
var tempDoublePtr = Runtime.alignMemory(allocate(12, "i8", ALLOC_STATIC), 8);

assert(tempDoublePtr % 8 == 0);

function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

}

function copyTempDouble(ptr) {

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];

  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];

  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];

  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];

}

// {{PRE_LIBRARY}}


  
  var GL={counter:1,lastError:0,buffers:[],mappedBuffers:{},programs:[],framebuffers:[],renderbuffers:[],textures:[],uniforms:[],shaders:[],vaos:[],contexts:[],currentContext:null,currArrayBuffer:0,currElementArrayBuffer:0,byteSizeByTypeRoot:5120,byteSizeByType:[1,1,2,2,4,4,4,2,3,4,8],programInfos:{},stringCache:{},packAlignment:4,unpackAlignment:4,init:function () {
        GL.createLog2ceilLookup(GL.MAX_TEMP_BUFFER_SIZE);
        GL.miniTempBuffer = new Float32Array(GL.MINI_TEMP_BUFFER_SIZE);
        for (var i = 0; i < GL.MINI_TEMP_BUFFER_SIZE; i++) {
          GL.miniTempBufferViews[i] = GL.miniTempBuffer.subarray(0, i+1);
        }
      },recordError:function recordError(errorCode) {
        if (!GL.lastError) {
          GL.lastError = errorCode;
        }
      },getNewId:function (table) {
        var ret = GL.counter++;
        for (var i = table.length; i < ret; i++) {
          table[i] = null;
        }
        return ret;
      },MINI_TEMP_BUFFER_SIZE:16,miniTempBuffer:null,miniTempBufferViews:[0],MAX_TEMP_BUFFER_SIZE:2097152,numTempVertexBuffersPerSize:64,log2ceilLookup:null,createLog2ceilLookup:function (maxValue) {
        GL.log2ceilLookup = new Uint8Array(maxValue+1);
        var log2 = 0;
        var pow2 = 1;
        GL.log2ceilLookup[0] = 0;
        for(var i = 1; i <= maxValue; ++i) {
          if (i > pow2) {
            pow2 <<= 1;
            ++log2;
          }
          GL.log2ceilLookup[i] = log2;
        }
      },generateTempBuffers:function (quads, context) {
        var largestIndex = GL.log2ceilLookup[GL.MAX_TEMP_BUFFER_SIZE];
        context.tempVertexBufferCounters1 = [];
        context.tempVertexBufferCounters2 = [];
        context.tempVertexBufferCounters1.length = context.tempVertexBufferCounters2.length = largestIndex+1;
        context.tempVertexBuffers1 = [];
        context.tempVertexBuffers2 = [];
        context.tempVertexBuffers1.length = context.tempVertexBuffers2.length = largestIndex+1;
        context.tempIndexBuffers = [];
        context.tempIndexBuffers.length = largestIndex+1;
        for(var i = 0; i <= largestIndex; ++i) {
          context.tempIndexBuffers[i] = null; // Created on-demand
          context.tempVertexBufferCounters1[i] = context.tempVertexBufferCounters2[i] = 0;
          var ringbufferLength = GL.numTempVertexBuffersPerSize;
          context.tempVertexBuffers1[i] = [];
          context.tempVertexBuffers2[i] = [];
          var ringbuffer1 = context.tempVertexBuffers1[i];
          var ringbuffer2 = context.tempVertexBuffers2[i];
          ringbuffer1.length = ringbuffer2.length = ringbufferLength;
          for(var j = 0; j < ringbufferLength; ++j) {
            ringbuffer1[j] = ringbuffer2[j] = null; // Created on-demand
          }
        }
  
        if (quads) {
          // GL_QUAD indexes can be precalculated
          context.tempQuadIndexBuffer = GLctx.createBuffer();
          context.GLctx.bindBuffer(context.GLctx.ELEMENT_ARRAY_BUFFER, context.tempQuadIndexBuffer);
          var numIndexes = GL.MAX_TEMP_BUFFER_SIZE >> 1;
          var quadIndexes = new Uint16Array(numIndexes);
          var i = 0, v = 0;
          while (1) {
            quadIndexes[i++] = v;
            if (i >= numIndexes) break;
            quadIndexes[i++] = v+1;
            if (i >= numIndexes) break;
            quadIndexes[i++] = v+2;
            if (i >= numIndexes) break;
            quadIndexes[i++] = v;
            if (i >= numIndexes) break;
            quadIndexes[i++] = v+2;
            if (i >= numIndexes) break;
            quadIndexes[i++] = v+3;
            if (i >= numIndexes) break;
            v += 4;
          }
          context.GLctx.bufferData(context.GLctx.ELEMENT_ARRAY_BUFFER, quadIndexes, context.GLctx.STATIC_DRAW);
          context.GLctx.bindBuffer(context.GLctx.ELEMENT_ARRAY_BUFFER, null);
        }
      },getTempVertexBuffer:function getTempVertexBuffer(sizeBytes) {
        var idx = GL.log2ceilLookup[sizeBytes];
        var ringbuffer = GL.currentContext.tempVertexBuffers1[idx];
        var nextFreeBufferIndex = GL.currentContext.tempVertexBufferCounters1[idx];
        GL.currentContext.tempVertexBufferCounters1[idx] = (GL.currentContext.tempVertexBufferCounters1[idx]+1) & (GL.numTempVertexBuffersPerSize-1);
        var vbo = ringbuffer[nextFreeBufferIndex];
        if (vbo) {
          return vbo;
        }
        var prevVBO = GLctx.getParameter(GLctx.ARRAY_BUFFER_BINDING);
        ringbuffer[nextFreeBufferIndex] = GLctx.createBuffer();
        GLctx.bindBuffer(GLctx.ARRAY_BUFFER, ringbuffer[nextFreeBufferIndex]);
        GLctx.bufferData(GLctx.ARRAY_BUFFER, 1 << idx, GLctx.DYNAMIC_DRAW);
        GLctx.bindBuffer(GLctx.ARRAY_BUFFER, prevVBO);
        return ringbuffer[nextFreeBufferIndex];
      },getTempIndexBuffer:function getTempIndexBuffer(sizeBytes) {
        var idx = GL.log2ceilLookup[sizeBytes];
        var ibo = GL.currentContext.tempIndexBuffers[idx];
        if (ibo) {
          return ibo;
        }
        var prevIBO = GLctx.getParameter(GLctx.ELEMENT_ARRAY_BUFFER_BINDING);
        GL.currentContext.tempIndexBuffers[idx] = GLctx.createBuffer();
        GLctx.bindBuffer(GLctx.ELEMENT_ARRAY_BUFFER, GL.currentContext.tempIndexBuffers[idx]);
        GLctx.bufferData(GLctx.ELEMENT_ARRAY_BUFFER, 1 << idx, GLctx.DYNAMIC_DRAW);
        GLctx.bindBuffer(GLctx.ELEMENT_ARRAY_BUFFER, prevIBO);
        return GL.currentContext.tempIndexBuffers[idx];
      },newRenderingFrameStarted:function newRenderingFrameStarted() {
        if (!GL.currentContext) {
          return;
        }
        var vb = GL.currentContext.tempVertexBuffers1;
        GL.currentContext.tempVertexBuffers1 = GL.currentContext.tempVertexBuffers2;
        GL.currentContext.tempVertexBuffers2 = vb;
        vb = GL.currentContext.tempVertexBufferCounters1;
        GL.currentContext.tempVertexBufferCounters1 = GL.currentContext.tempVertexBufferCounters2;
        GL.currentContext.tempVertexBufferCounters2 = vb;
        var largestIndex = GL.log2ceilLookup[GL.MAX_TEMP_BUFFER_SIZE];
        for(var i = 0; i <= largestIndex; ++i) {
          GL.currentContext.tempVertexBufferCounters1[i] = 0;
        }
      },findToken:function (source, token) {
        function isIdentChar(ch) {
          if (ch >= 48 && ch <= 57) // 0-9
            return true;
          if (ch >= 65 && ch <= 90) // A-Z
            return true;
          if (ch >= 97 && ch <= 122) // a-z
            return true;
          return false;
        }
        var i = -1;
        do {
          i = source.indexOf(token, i + 1);
          if (i < 0) {
            break;
          }
          if (i > 0 && isIdentChar(source[i - 1])) {
            continue;
          }
          i += token.length;
          if (i < source.length - 1 && isIdentChar(source[i + 1])) {
            continue;
          }
          return true;
        } while (true);
        return false;
      },getSource:function (shader, count, string, length) {
        var source = '';
        for (var i = 0; i < count; ++i) {
          var frag;
          if (length) {
            var len = HEAP32[(((length)+(i*4))>>2)];
            if (len < 0) {
              frag = Pointer_stringify(HEAP32[(((string)+(i*4))>>2)]);
            } else {
              frag = Pointer_stringify(HEAP32[(((string)+(i*4))>>2)], len);
            }
          } else {
            frag = Pointer_stringify(HEAP32[(((string)+(i*4))>>2)]);
          }
          source += frag;
        }
        // Let's see if we need to enable the standard derivatives extension
        type = GLctx.getShaderParameter(GL.shaders[shader], 0x8B4F /* GL_SHADER_TYPE */);
        if (type == 0x8B30 /* GL_FRAGMENT_SHADER */) {
          if (GL.findToken(source, "dFdx") ||
              GL.findToken(source, "dFdy") ||
              GL.findToken(source, "fwidth")) {
            source = "#extension GL_OES_standard_derivatives : enable\n" + source;
            var extension = GLctx.getExtension("OES_standard_derivatives");
          }
        }
        return source;
      },createContext:function (canvas, webGLContextAttributes) {
        if (typeof webGLContextAttributes.majorVersion === 'undefined' && typeof webGLContextAttributes.minorVersion === 'undefined') {
          webGLContextAttributes.majorVersion = 1;
          webGLContextAttributes.minorVersion = 0;
        }
        var ctx;
        var errorInfo = '?';
        function onContextCreationError(event) {
          errorInfo = event.statusMessage || errorInfo;
        }
        try {
          canvas.addEventListener('webglcontextcreationerror', onContextCreationError, false);
          try {
            if (webGLContextAttributes.majorVersion == 1 && webGLContextAttributes.minorVersion == 0) {
              ctx = canvas.getContext("webgl", webGLContextAttributes) || canvas.getContext("experimental-webgl", webGLContextAttributes);
            } else if (webGLContextAttributes.majorVersion == 2 && webGLContextAttributes.minorVersion == 0) {
              ctx = canvas.getContext("webgl2", webGLContextAttributes) || canvas.getContext("experimental-webgl2", webGLContextAttributes);
            } else {
              throw 'Unsupported WebGL context version ' + majorVersion + '.' + minorVersion + '!'
            }
          } finally {
            canvas.removeEventListener('webglcontextcreationerror', onContextCreationError, false);
          }
          if (!ctx) throw ':(';
        } catch (e) {
          Module.print('Could not create canvas: ' + [errorInfo, e, JSON.stringify(webGLContextAttributes)]);
          return 0;
        }
        // possible GL_DEBUG entry point: ctx = wrapDebugGL(ctx);
  
        if (!ctx) return 0;
        return GL.registerContext(ctx, webGLContextAttributes);
      },registerContext:function (ctx, webGLContextAttributes) {
        var handle = GL.getNewId(GL.contexts);
        var context = {
          handle: handle,
          version: webGLContextAttributes.majorVersion,
          GLctx: ctx
        };
        // Store the created context object so that we can access the context given a canvas without having to pass the parameters again.
        if (ctx.canvas) ctx.canvas.GLctxObject = context;
        GL.contexts[handle] = context;
        if (typeof webGLContextAttributes['enableExtensionsByDefault'] === 'undefined' || webGLContextAttributes.enableExtensionsByDefault) {
          GL.initExtensions(context);
        }
        return handle;
      },makeContextCurrent:function (contextHandle) {
        var context = GL.contexts[contextHandle];
        if (!context) return false;
        GLctx = Module.ctx = context.GLctx; // Active WebGL context object.
        GL.currentContext = context; // Active Emscripten GL layer context object.
        return true;
      },getContext:function (contextHandle) {
        return GL.contexts[contextHandle];
      },deleteContext:function (contextHandle) {
        if (GL.currentContext === GL.contexts[contextHandle]) GL.currentContext = null;
        if (typeof JSEvents === 'object') JSEvents.removeAllHandlersOnTarget(GL.contexts[contextHandle].GLctx.canvas); // Release all JS event handlers on the DOM element that the GL context is associated with since the context is now deleted.
        if (GL.contexts[contextHandle] && GL.contexts[contextHandle].GLctx.canvas) GL.contexts[contextHandle].GLctx.canvas.GLctxObject = undefined; // Make sure the canvas object no longer refers to the context object so there are no GC surprises.
        GL.contexts[contextHandle] = null;
      },initExtensions:function (context) {
        // If this function is called without a specific context object, init the extensions of the currently active context.
        if (!context) context = GL.currentContext;
  
        if (context.initExtensionsDone) return;
        context.initExtensionsDone = true;
  
        var GLctx = context.GLctx;
  
        context.maxVertexAttribs = GLctx.getParameter(GLctx.MAX_VERTEX_ATTRIBS);
  
        // Detect the presence of a few extensions manually, this GL interop layer itself will need to know if they exist. 
        context.compressionExt = GLctx.getExtension('WEBGL_compressed_texture_s3tc');
        context.anisotropicExt = GLctx.getExtension('EXT_texture_filter_anisotropic');
  
        if (context.version < 2) {
          // Extension available from Firefox 26 and Google Chrome 30
          var instancedArraysExt = GLctx.getExtension('ANGLE_instanced_arrays');
          if (instancedArraysExt) {
            GLctx['vertexAttribDivisor'] = function(index, divisor) { instancedArraysExt['vertexAttribDivisorANGLE'](index, divisor); };
            GLctx['drawArraysInstanced'] = function(mode, first, count, primcount) { instancedArraysExt['drawArraysInstancedANGLE'](mode, first, count, primcount); };
            GLctx['drawElementsInstanced'] = function(mode, count, type, indices, primcount) { instancedArraysExt['drawElementsInstancedANGLE'](mode, count, type, indices, primcount); };
          }
  
          // Extension available from Firefox 25 and WebKit
          var vaoExt = GLctx.getExtension('OES_vertex_array_object');
          if (vaoExt) {
            GLctx['createVertexArray'] = function() { return vaoExt['createVertexArrayOES'](); };
            GLctx['deleteVertexArray'] = function(vao) { vaoExt['deleteVertexArrayOES'](vao); };
            GLctx['bindVertexArray'] = function(vao) { vaoExt['bindVertexArrayOES'](vao); };
            GLctx['isVertexArray'] = function(vao) { return vaoExt['isVertexArrayOES'](vao); };
          }
  
          var drawBuffersExt = GLctx.getExtension('WEBGL_draw_buffers');
          if (drawBuffersExt) {
            GLctx['drawBuffers'] = function(n, bufs) { drawBuffersExt['drawBuffersWEBGL'](n, bufs); };
          }
        }
  
        // These are the 'safe' feature-enabling extensions that don't add any performance impact related to e.g. debugging, and
        // should be enabled by default so that client GLES2/GL code will not need to go through extra hoops to get its stuff working.
        // As new extensions are ratified at http://www.khronos.org/registry/webgl/extensions/ , feel free to add your new extensions
        // here, as long as they don't produce a performance impact for users that might not be using those extensions.
        // E.g. debugging-related extensions should probably be off by default.
        var automaticallyEnabledExtensions = [ "OES_texture_float", "OES_texture_half_float", "OES_standard_derivatives",
                                               "OES_vertex_array_object", "WEBGL_compressed_texture_s3tc", "WEBGL_depth_texture",
                                               "OES_element_index_uint", "EXT_texture_filter_anisotropic", "ANGLE_instanced_arrays",
                                               "OES_texture_float_linear", "OES_texture_half_float_linear", "WEBGL_compressed_texture_atc",
                                               "WEBGL_compressed_texture_pvrtc", "EXT_color_buffer_half_float", "WEBGL_color_buffer_float",
                                               "EXT_frag_depth", "EXT_sRGB", "WEBGL_draw_buffers", "WEBGL_shared_resources",
                                               "EXT_shader_texture_lod" ];
  
        function shouldEnableAutomatically(extension) {
          var ret = false;
          automaticallyEnabledExtensions.forEach(function(include) {
            if (ext.indexOf(include) != -1) {
              ret = true;
            }
          });
          return ret;
        }
  
        var exts = GLctx.getSupportedExtensions();
        if (exts && exts.length > 0) {
          GLctx.getSupportedExtensions().forEach(function(ext) {
            if (automaticallyEnabledExtensions.indexOf(ext) != -1) {
              GLctx.getExtension(ext); // Calling .getExtension enables that extension permanently, no need to store the return value to be enabled.
            }
          });
        }
      },populateUniformTable:function (program) {
        var p = GL.programs[program];
        GL.programInfos[program] = {
          uniforms: {},
          maxUniformLength: 0, // This is eagerly computed below, since we already enumerate all uniforms anyway.
          maxAttributeLength: -1 // This is lazily computed and cached, computed when/if first asked, "-1" meaning not computed yet.
        };
  
        var ptable = GL.programInfos[program];
        var utable = ptable.uniforms;
        // A program's uniform table maps the string name of an uniform to an integer location of that uniform.
        // The global GL.uniforms map maps integer locations to WebGLUniformLocations.
        var numUniforms = GLctx.getProgramParameter(p, GLctx.ACTIVE_UNIFORMS);
        for (var i = 0; i < numUniforms; ++i) {
          var u = GLctx.getActiveUniform(p, i);
  
          var name = u.name;
          ptable.maxUniformLength = Math.max(ptable.maxUniformLength, name.length+1);
  
          // Strip off any trailing array specifier we might have got, e.g. "[0]".
          if (name.indexOf(']', name.length-1) !== -1) {
            var ls = name.lastIndexOf('[');
            name = name.slice(0, ls);
          }
  
          // Optimize memory usage slightly: If we have an array of uniforms, e.g. 'vec3 colors[3];', then 
          // only store the string 'colors' in utable, and 'colors[0]', 'colors[1]' and 'colors[2]' will be parsed as 'colors'+i.
          // Note that for the GL.uniforms table, we still need to fetch the all WebGLUniformLocations for all the indices.
          var loc = GLctx.getUniformLocation(p, name);
          var id = GL.getNewId(GL.uniforms);
          utable[name] = [u.size, id];
          GL.uniforms[id] = loc;
  
          for (var j = 1; j < u.size; ++j) {
            var n = name + '['+j+']';
            loc = GLctx.getUniformLocation(p, n);
            id = GL.getNewId(GL.uniforms);
  
            GL.uniforms[id] = loc;
          }
        }
      }};function _emscripten_glIsRenderbuffer(renderbuffer) {
      var rb = GL.renderbuffers[renderbuffer];
      if (!rb) return 0;
      return GLctx.isRenderbuffer(rb);
    }

  function _emscripten_glStencilMaskSeparate(x0, x1) { GLctx.stencilMaskSeparate(x0, x1) }

  function _emscripten_glStencilFunc(x0, x1, x2) { GLctx.stencilFunc(x0, x1, x2) }

  
  
  
  
  
  
  
  var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};
  
  var ERRNO_MESSAGES={0:"Success",1:"Not super-user",2:"No such file or directory",3:"No such process",4:"Interrupted system call",5:"I/O error",6:"No such device or address",7:"Arg list too long",8:"Exec format error",9:"Bad file number",10:"No children",11:"No more processes",12:"Not enough core",13:"Permission denied",14:"Bad address",15:"Block device required",16:"Mount device busy",17:"File exists",18:"Cross-device link",19:"No such device",20:"Not a directory",21:"Is a directory",22:"Invalid argument",23:"Too many open files in system",24:"Too many open files",25:"Not a typewriter",26:"Text file busy",27:"File too large",28:"No space left on device",29:"Illegal seek",30:"Read only file system",31:"Too many links",32:"Broken pipe",33:"Math arg out of domain of func",34:"Math result not representable",35:"File locking deadlock error",36:"File or path name too long",37:"No record locks available",38:"Function not implemented",39:"Directory not empty",40:"Too many symbolic links",42:"No message of desired type",43:"Identifier removed",44:"Channel number out of range",45:"Level 2 not synchronized",46:"Level 3 halted",47:"Level 3 reset",48:"Link number out of range",49:"Protocol driver not attached",50:"No CSI structure available",51:"Level 2 halted",52:"Invalid exchange",53:"Invalid request descriptor",54:"Exchange full",55:"No anode",56:"Invalid request code",57:"Invalid slot",59:"Bad font file fmt",60:"Device not a stream",61:"No data (for no delay io)",62:"Timer expired",63:"Out of streams resources",64:"Machine is not on the network",65:"Package not installed",66:"The object is remote",67:"The link has been severed",68:"Advertise error",69:"Srmount error",70:"Communication error on send",71:"Protocol error",72:"Multihop attempted",73:"Cross mount point (not really error)",74:"Trying to read unreadable message",75:"Value too large for defined data type",76:"Given log. name not unique",77:"f.d. invalid for this operation",78:"Remote address changed",79:"Can   access a needed shared lib",80:"Accessing a corrupted shared lib",81:".lib section in a.out corrupted",82:"Attempting to link in too many libs",83:"Attempting to exec a shared library",84:"Illegal byte sequence",86:"Streams pipe error",87:"Too many users",88:"Socket operation on non-socket",89:"Destination address required",90:"Message too long",91:"Protocol wrong type for socket",92:"Protocol not available",93:"Unknown protocol",94:"Socket type not supported",95:"Not supported",96:"Protocol family not supported",97:"Address family not supported by protocol family",98:"Address already in use",99:"Address not available",100:"Network interface is not configured",101:"Network is unreachable",102:"Connection reset by network",103:"Connection aborted",104:"Connection reset by peer",105:"No buffer space available",106:"Socket is already connected",107:"Socket is not connected",108:"Can't send after socket shutdown",109:"Too many references",110:"Connection timed out",111:"Connection refused",112:"Host is down",113:"Host is unreachable",114:"Socket already connected",115:"Connection already in progress",116:"Stale file handle",122:"Quota exceeded",123:"No medium (in tape drive)",125:"Operation canceled",130:"Previous owner died",131:"State not recoverable"};
  
  function ___setErrNo(value) {
      if (Module['___errno_location']) HEAP32[((Module['___errno_location']())>>2)]=value;
      else Module.printErr('failed to set errno from JS');
      return value;
    }
  
  var TTY={ttys:[],init:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
        //   // device, it always assumes it's a TTY device. because of this, we're forcing
        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
        //   // with text files until FS.init can be refactored.
        //   process['stdin']['setEncoding']('utf8');
        // }
      },shutdown:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
        //   process['stdin']['pause']();
        // }
      },register:function (dev, ops) {
        TTY.ttys[dev] = { input: [], output: [], ops: ops };
        FS.registerDevice(dev, TTY.stream_ops);
      },stream_ops:{open:function (stream) {
          var tty = TTY.ttys[stream.node.rdev];
          if (!tty) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          stream.tty = tty;
          stream.seekable = false;
        },close:function (stream) {
          // flush any pending line data
          stream.tty.ops.flush(stream.tty);
        },flush:function (stream) {
          stream.tty.ops.flush(stream.tty);
        },read:function (stream, buffer, offset, length, pos /* ignored */) {
          if (!stream.tty || !stream.tty.ops.get_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          var bytesRead = 0;
          for (var i = 0; i < length; i++) {
            var result;
            try {
              result = stream.tty.ops.get_char(stream.tty);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            if (result === undefined && bytesRead === 0) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
            if (result === null || result === undefined) break;
            bytesRead++;
            buffer[offset+i] = result;
          }
          if (bytesRead) {
            stream.node.timestamp = Date.now();
          }
          return bytesRead;
        },write:function (stream, buffer, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.put_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          for (var i = 0; i < length; i++) {
            try {
              stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
          }
          if (length) {
            stream.node.timestamp = Date.now();
          }
          return i;
        }},default_tty_ops:{get_char:function (tty) {
          if (!tty.input.length) {
            var result = null;
            if (ENVIRONMENT_IS_NODE) {
              // we will read data by chunks of BUFSIZE
              var BUFSIZE = 256;
              var buf = new Buffer(BUFSIZE);
              var bytesRead = 0;
  
              var fd = process.stdin.fd;
              // Linux and Mac cannot use process.stdin.fd (which isn't set up as sync)
              var usingDevice = false;
              try {
                fd = fs.openSync('/dev/stdin', 'r');
                usingDevice = true;
              } catch (e) {}
  
              bytesRead = fs.readSync(fd, buf, 0, BUFSIZE, null);
  
              if (usingDevice) { fs.closeSync(fd); }
              if (bytesRead > 0) {
                result = buf.slice(0, bytesRead).toString('utf-8');
              } else {
                result = null;
              }
  
            } else if (typeof window != 'undefined' &&
              typeof window.prompt == 'function') {
              // Browser.
              result = window.prompt('Input: ');  // returns null on cancel
              if (result !== null) {
                result += '\n';
              }
            } else if (typeof readline == 'function') {
              // Command line.
              result = readline();
              if (result !== null) {
                result += '\n';
              }
            }
            if (!result) {
              return null;
            }
            tty.input = intArrayFromString(result, true);
          }
          return tty.input.shift();
        },put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['print'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val); // val == 0 would cut text output off in the middle.
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            Module['print'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }},default_tty1_ops:{put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['printErr'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val);
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            Module['printErr'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }}};
  
  var MEMFS={ops_table:null,mount:function (mount) {
        return MEMFS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createNode:function (parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
          // no supported
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (!MEMFS.ops_table) {
          MEMFS.ops_table = {
            dir: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                lookup: MEMFS.node_ops.lookup,
                mknod: MEMFS.node_ops.mknod,
                rename: MEMFS.node_ops.rename,
                unlink: MEMFS.node_ops.unlink,
                rmdir: MEMFS.node_ops.rmdir,
                readdir: MEMFS.node_ops.readdir,
                symlink: MEMFS.node_ops.symlink
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek
              }
            },
            file: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek,
                read: MEMFS.stream_ops.read,
                write: MEMFS.stream_ops.write,
                allocate: MEMFS.stream_ops.allocate,
                mmap: MEMFS.stream_ops.mmap,
                msync: MEMFS.stream_ops.msync
              }
            },
            link: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                readlink: MEMFS.node_ops.readlink
              },
              stream: {}
            },
            chrdev: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: FS.chrdev_stream_ops
            }
          };
        }
        var node = FS.createNode(parent, name, mode, dev);
        if (FS.isDir(node.mode)) {
          node.node_ops = MEMFS.ops_table.dir.node;
          node.stream_ops = MEMFS.ops_table.dir.stream;
          node.contents = {};
        } else if (FS.isFile(node.mode)) {
          node.node_ops = MEMFS.ops_table.file.node;
          node.stream_ops = MEMFS.ops_table.file.stream;
          node.usedBytes = 0; // The actual number of bytes used in the typed array, as opposed to contents.buffer.byteLength which gives the whole capacity.
          // When the byte data of the file is populated, this will point to either a typed array, or a normal JS array. Typed arrays are preferred
          // for performance, and used by default. However, typed arrays are not resizable like normal JS arrays are, so there is a small disk size
          // penalty involved for appending file writes that continuously grow a file similar to std::vector capacity vs used -scheme.
          node.contents = null; 
        } else if (FS.isLink(node.mode)) {
          node.node_ops = MEMFS.ops_table.link.node;
          node.stream_ops = MEMFS.ops_table.link.stream;
        } else if (FS.isChrdev(node.mode)) {
          node.node_ops = MEMFS.ops_table.chrdev.node;
          node.stream_ops = MEMFS.ops_table.chrdev.stream;
        }
        node.timestamp = Date.now();
        // add the new node to the parent
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },getFileDataAsRegularArray:function (node) {
        if (node.contents && node.contents.subarray) {
          var arr = [];
          for (var i = 0; i < node.usedBytes; ++i) arr.push(node.contents[i]);
          return arr; // Returns a copy of the original data.
        }
        return node.contents; // No-op, the file contents are already in a JS array. Return as-is.
      },getFileDataAsTypedArray:function (node) {
        if (!node.contents) return new Uint8Array;
        if (node.contents.subarray) return node.contents.subarray(0, node.usedBytes); // Make sure to not return excess unused bytes.
        return new Uint8Array(node.contents);
      },expandFileStorage:function (node, newCapacity) {
        // If we are asked to expand the size of a file that already exists, revert to using a standard JS array to store the file
        // instead of a typed array. This makes resizing the array more flexible because we can just .push() elements at the back to
        // increase the size.
        if (node.contents && node.contents.subarray && newCapacity > node.contents.length) {
          node.contents = MEMFS.getFileDataAsRegularArray(node);
          node.usedBytes = node.contents.length; // We might be writing to a lazy-loaded file which had overridden this property, so force-reset it.
        }
  
        if (!node.contents || node.contents.subarray) { // Keep using a typed array if creating a new storage, or if old one was a typed array as well.
          var prevCapacity = node.contents ? node.contents.buffer.byteLength : 0;
          if (prevCapacity >= newCapacity) return; // No need to expand, the storage was already large enough.
          // Don't expand strictly to the given requested limit if it's only a very small increase, but instead geometrically grow capacity.
          // For small filesizes (<1MB), perform size*2 geometric increase, but for large sizes, do a much more conservative size*1.125 increase to
          // avoid overshooting the allocation cap by a very large margin.
          var CAPACITY_DOUBLING_MAX = 1024 * 1024;
          newCapacity = Math.max(newCapacity, (prevCapacity * (prevCapacity < CAPACITY_DOUBLING_MAX ? 2.0 : 1.125)) | 0);
          if (prevCapacity != 0) newCapacity = Math.max(newCapacity, 256); // At minimum allocate 256b for each file when expanding.
          var oldContents = node.contents;
          node.contents = new Uint8Array(newCapacity); // Allocate new storage.
          if (node.usedBytes > 0) node.contents.set(oldContents.subarray(0, node.usedBytes), 0); // Copy old data over to the new storage.
          return;
        }
        // Not using a typed array to back the file storage. Use a standard JS array instead.
        if (!node.contents && newCapacity > 0) node.contents = [];
        while (node.contents.length < newCapacity) node.contents.push(0);
      },resizeFileStorage:function (node, newSize) {
        if (node.usedBytes == newSize) return;
        if (newSize == 0) {
          node.contents = null; // Fully decommit when requesting a resize to zero.
          node.usedBytes = 0;
          return;
        }
        if (!node.contents || node.contents.subarray) { // Resize a typed array if that is being used as the backing store.
          var oldContents = node.contents;
          node.contents = new Uint8Array(new ArrayBuffer(newSize)); // Allocate new storage.
          if (oldContents) {
            node.contents.set(oldContents.subarray(0, Math.min(newSize, node.usedBytes))); // Copy old data over to the new storage.
          }
          node.usedBytes = newSize;
          return;
        }
        // Backing with a JS array.
        if (!node.contents) node.contents = [];
        if (node.contents.length > newSize) node.contents.length = newSize;
        else while (node.contents.length < newSize) node.contents.push(0);
        node.usedBytes = newSize;
      },node_ops:{getattr:function (node) {
          var attr = {};
          // device numbers reuse inode numbers.
          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
          attr.ino = node.id;
          attr.mode = node.mode;
          attr.nlink = 1;
          attr.uid = 0;
          attr.gid = 0;
          attr.rdev = node.rdev;
          if (FS.isDir(node.mode)) {
            attr.size = 4096;
          } else if (FS.isFile(node.mode)) {
            attr.size = node.usedBytes;
          } else if (FS.isLink(node.mode)) {
            attr.size = node.link.length;
          } else {
            attr.size = 0;
          }
          attr.atime = new Date(node.timestamp);
          attr.mtime = new Date(node.timestamp);
          attr.ctime = new Date(node.timestamp);
          // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
          //       but this is not required by the standard.
          attr.blksize = 4096;
          attr.blocks = Math.ceil(attr.size / attr.blksize);
          return attr;
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
          if (attr.size !== undefined) {
            MEMFS.resizeFileStorage(node, attr.size);
          }
        },lookup:function (parent, name) {
          throw FS.genericErrors[ERRNO_CODES.ENOENT];
        },mknod:function (parent, name, mode, dev) {
          return MEMFS.createNode(parent, name, mode, dev);
        },rename:function (old_node, new_dir, new_name) {
          // if we're overwriting a directory at new_name, make sure it's empty.
          if (FS.isDir(old_node.mode)) {
            var new_node;
            try {
              new_node = FS.lookupNode(new_dir, new_name);
            } catch (e) {
            }
            if (new_node) {
              for (var i in new_node.contents) {
                throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
              }
            }
          }
          // do the internal rewiring
          delete old_node.parent.contents[old_node.name];
          old_node.name = new_name;
          new_dir.contents[new_name] = old_node;
          old_node.parent = new_dir;
        },unlink:function (parent, name) {
          delete parent.contents[name];
        },rmdir:function (parent, name) {
          var node = FS.lookupNode(parent, name);
          for (var i in node.contents) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
          }
          delete parent.contents[name];
        },readdir:function (node) {
          var entries = ['.', '..']
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newname, oldpath) {
          var node = MEMFS.createNode(parent, newname, 511 /* 0777 */ | 40960, 0);
          node.link = oldpath;
          return node;
        },readlink:function (node) {
          if (!FS.isLink(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return node.link;
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= stream.node.usedBytes) return 0;
          var size = Math.min(stream.node.usedBytes - position, length);
          assert(size >= 0);
          if (size > 8 && contents.subarray) { // non-trivial, and typed array
            buffer.set(contents.subarray(position, position + size), offset);
          } else {
            for (var i = 0; i < size; i++) buffer[offset + i] = contents[position + i];
          }
          return size;
        },write:function (stream, buffer, offset, length, position, canOwn) {
          if (!length) return 0;
          var node = stream.node;
          node.timestamp = Date.now();
  
          if (buffer.subarray && (!node.contents || node.contents.subarray)) { // This write is from a typed array to a typed array?
            if (canOwn) { // Can we just reuse the buffer we are given?
              assert(position === 0, 'canOwn must imply no weird position inside the file');
              node.contents = buffer.subarray(offset, offset + length);
              node.usedBytes = length;
              return length;
            } else if (node.usedBytes === 0 && position === 0) { // If this is a simple first write to an empty file, do a fast set since we don't need to care about old data.
              node.contents = new Uint8Array(buffer.subarray(offset, offset + length));
              node.usedBytes = length;
              return length;
            } else if (position + length <= node.usedBytes) { // Writing to an already allocated and used subrange of the file?
              node.contents.set(buffer.subarray(offset, offset + length), position);
              return length;
            }
          }
  
          // Appending to an existing file and we need to reallocate, or source data did not come as a typed array.
          MEMFS.expandFileStorage(node, position+length);
          if (node.contents.subarray && buffer.subarray) node.contents.set(buffer.subarray(offset, offset + length), position); // Use typed array write if available.
          else {
            for (var i = 0; i < length; i++) {
             node.contents[position + i] = buffer[offset + i]; // Or fall back to manual write if not.
            }
          }
          node.usedBytes = Math.max(node.usedBytes, position+length);
          return length;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.usedBytes;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return position;
        },allocate:function (stream, offset, length) {
          MEMFS.expandFileStorage(stream.node, offset + length);
          stream.node.usedBytes = Math.max(stream.node.usedBytes, offset + length);
        },mmap:function (stream, buffer, offset, length, position, prot, flags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          var ptr;
          var allocated;
          var contents = stream.node.contents;
          // Only make a new copy when MAP_PRIVATE is specified.
          if ( !(flags & 2) &&
                (contents.buffer === buffer || contents.buffer === buffer.buffer) ) {
            // We can't emulate MAP_SHARED when the file is not backed by the buffer
            // we're mapping to (e.g. the HEAP buffer).
            allocated = false;
            ptr = contents.byteOffset;
          } else {
            // Try to avoid unnecessary slices.
            if (position > 0 || position + length < stream.node.usedBytes) {
              if (contents.subarray) {
                contents = contents.subarray(position, position + length);
              } else {
                contents = Array.prototype.slice.call(contents, position, position + length);
              }
            }
            allocated = true;
            ptr = _malloc(length);
            if (!ptr) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOMEM);
            }
            buffer.set(contents, ptr);
          }
          return { ptr: ptr, allocated: allocated };
        },msync:function (stream, buffer, offset, length, mmapFlags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          if (mmapFlags & 2) {
            // MAP_PRIVATE calls need not to be synced back to underlying fs
            return 0;
          }
  
          var bytesWritten = MEMFS.stream_ops.write(stream, buffer, 0, length, offset, false);
          // should we check if bytesWritten and length are the same?
          return 0;
        }}};
  
  var IDBFS={dbs:{},indexedDB:function () {
        if (typeof indexedDB !== 'undefined') return indexedDB;
        var ret = null;
        if (typeof window === 'object') ret = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
        assert(ret, 'IDBFS used, but indexedDB not supported');
        return ret;
      },DB_VERSION:21,DB_STORE_NAME:"FILE_DATA",mount:function (mount) {
        // reuse all of the core MEMFS functionality
        return MEMFS.mount.apply(null, arguments);
      },syncfs:function (mount, populate, callback) {
        IDBFS.getLocalSet(mount, function(err, local) {
          if (err) return callback(err);
  
          IDBFS.getRemoteSet(mount, function(err, remote) {
            if (err) return callback(err);
  
            var src = populate ? remote : local;
            var dst = populate ? local : remote;
  
            IDBFS.reconcile(src, dst, callback);
          });
        });
      },getDB:function (name, callback) {
        // check the cache first
        var db = IDBFS.dbs[name];
        if (db) {
          return callback(null, db);
        }
  
        var req;
        try {
          req = IDBFS.indexedDB().open(name, IDBFS.DB_VERSION);
        } catch (e) {
          return callback(e);
        }
        req.onupgradeneeded = function(e) {
          var db = e.target.result;
          var transaction = e.target.transaction;
  
          var fileStore;
  
          if (db.objectStoreNames.contains(IDBFS.DB_STORE_NAME)) {
            fileStore = transaction.objectStore(IDBFS.DB_STORE_NAME);
          } else {
            fileStore = db.createObjectStore(IDBFS.DB_STORE_NAME);
          }
  
          if (!fileStore.indexNames.contains('timestamp')) {
            fileStore.createIndex('timestamp', 'timestamp', { unique: false });
          }
        };
        req.onsuccess = function() {
          db = req.result;
  
          // add to the cache
          IDBFS.dbs[name] = db;
          callback(null, db);
        };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },getLocalSet:function (mount, callback) {
        var entries = {};
  
        function isRealDir(p) {
          return p !== '.' && p !== '..';
        };
        function toAbsolute(root) {
          return function(p) {
            return PATH.join2(root, p);
          }
        };
  
        var check = FS.readdir(mount.mountpoint).filter(isRealDir).map(toAbsolute(mount.mountpoint));
  
        while (check.length) {
          var path = check.pop();
          var stat;
  
          try {
            stat = FS.stat(path);
          } catch (e) {
            return callback(e);
          }
  
          if (FS.isDir(stat.mode)) {
            check.push.apply(check, FS.readdir(path).filter(isRealDir).map(toAbsolute(path)));
          }
  
          entries[path] = { timestamp: stat.mtime };
        }
  
        return callback(null, { type: 'local', entries: entries });
      },getRemoteSet:function (mount, callback) {
        var entries = {};
  
        IDBFS.getDB(mount.mountpoint, function(err, db) {
          if (err) return callback(err);
  
          var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readonly');
          transaction.onerror = function(e) {
            callback(this.error);
            e.preventDefault();
          };
  
          var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
          var index = store.index('timestamp');
  
          index.openKeyCursor().onsuccess = function(event) {
            var cursor = event.target.result;
  
            if (!cursor) {
              return callback(null, { type: 'remote', db: db, entries: entries });
            }
  
            entries[cursor.primaryKey] = { timestamp: cursor.key };
  
            cursor.continue();
          };
        });
      },loadLocalEntry:function (path, callback) {
        var stat, node;
  
        try {
          var lookup = FS.lookupPath(path);
          node = lookup.node;
          stat = FS.stat(path);
        } catch (e) {
          return callback(e);
        }
  
        if (FS.isDir(stat.mode)) {
          return callback(null, { timestamp: stat.mtime, mode: stat.mode });
        } else if (FS.isFile(stat.mode)) {
          // Performance consideration: storing a normal JavaScript array to a IndexedDB is much slower than storing a typed array.
          // Therefore always convert the file contents to a typed array first before writing the data to IndexedDB.
          node.contents = MEMFS.getFileDataAsTypedArray(node);
          return callback(null, { timestamp: stat.mtime, mode: stat.mode, contents: node.contents });
        } else {
          return callback(new Error('node type not supported'));
        }
      },storeLocalEntry:function (path, entry, callback) {
        try {
          if (FS.isDir(entry.mode)) {
            FS.mkdir(path, entry.mode);
          } else if (FS.isFile(entry.mode)) {
            FS.writeFile(path, entry.contents, { encoding: 'binary', canOwn: true });
          } else {
            return callback(new Error('node type not supported'));
          }
  
          FS.chmod(path, entry.mode);
          FS.utime(path, entry.timestamp, entry.timestamp);
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },removeLocalEntry:function (path, callback) {
        try {
          var lookup = FS.lookupPath(path);
          var stat = FS.stat(path);
  
          if (FS.isDir(stat.mode)) {
            FS.rmdir(path);
          } else if (FS.isFile(stat.mode)) {
            FS.unlink(path);
          }
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },loadRemoteEntry:function (store, path, callback) {
        var req = store.get(path);
        req.onsuccess = function(event) { callback(null, event.target.result); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },storeRemoteEntry:function (store, path, entry, callback) {
        var req = store.put(entry, path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },removeRemoteEntry:function (store, path, callback) {
        var req = store.delete(path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },reconcile:function (src, dst, callback) {
        var total = 0;
  
        var create = [];
        Object.keys(src.entries).forEach(function (key) {
          var e = src.entries[key];
          var e2 = dst.entries[key];
          if (!e2 || e.timestamp > e2.timestamp) {
            create.push(key);
            total++;
          }
        });
  
        var remove = [];
        Object.keys(dst.entries).forEach(function (key) {
          var e = dst.entries[key];
          var e2 = src.entries[key];
          if (!e2) {
            remove.push(key);
            total++;
          }
        });
  
        if (!total) {
          return callback(null);
        }
  
        var errored = false;
        var completed = 0;
        var db = src.type === 'remote' ? src.db : dst.db;
        var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readwrite');
        var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= total) {
            return callback(null);
          }
        };
  
        transaction.onerror = function(e) {
          done(this.error);
          e.preventDefault();
        };
  
        // sort paths in ascending order so directory entries are created
        // before the files inside them
        create.sort().forEach(function (path) {
          if (dst.type === 'local') {
            IDBFS.loadRemoteEntry(store, path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeLocalEntry(path, entry, done);
            });
          } else {
            IDBFS.loadLocalEntry(path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeRemoteEntry(store, path, entry, done);
            });
          }
        });
  
        // sort paths in descending order so files are deleted before their
        // parent directories
        remove.sort().reverse().forEach(function(path) {
          if (dst.type === 'local') {
            IDBFS.removeLocalEntry(path, done);
          } else {
            IDBFS.removeRemoteEntry(store, path, done);
          }
        });
      }};
  
  var NODEFS={isWindows:false,staticInit:function () {
        NODEFS.isWindows = !!process.platform.match(/^win/);
      },mount:function (mount) {
        assert(ENVIRONMENT_IS_NODE);
        return NODEFS.createNode(null, '/', NODEFS.getMode(mount.opts.root), 0);
      },createNode:function (parent, name, mode, dev) {
        if (!FS.isDir(mode) && !FS.isFile(mode) && !FS.isLink(mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node = FS.createNode(parent, name, mode);
        node.node_ops = NODEFS.node_ops;
        node.stream_ops = NODEFS.stream_ops;
        return node;
      },getMode:function (path) {
        var stat;
        try {
          stat = fs.lstatSync(path);
          if (NODEFS.isWindows) {
            // On Windows, directories return permission bits 'rw-rw-rw-', even though they have 'rwxrwxrwx', so
            // propagate write bits to execute bits.
            stat.mode = stat.mode | ((stat.mode & 146) >> 1);
          }
        } catch (e) {
          if (!e.code) throw e;
          throw new FS.ErrnoError(ERRNO_CODES[e.code]);
        }
        return stat.mode;
      },realPath:function (node) {
        var parts = [];
        while (node.parent !== node) {
          parts.push(node.name);
          node = node.parent;
        }
        parts.push(node.mount.opts.root);
        parts.reverse();
        return PATH.join.apply(null, parts);
      },flagsToPermissionStringMap:{0:"r",1:"r+",2:"r+",64:"r",65:"r+",66:"r+",129:"rx+",193:"rx+",514:"w+",577:"w",578:"w+",705:"wx",706:"wx+",1024:"a",1025:"a",1026:"a+",1089:"a",1090:"a+",1153:"ax",1154:"ax+",1217:"ax",1218:"ax+",4096:"rs",4098:"rs+"},flagsToPermissionString:function (flags) {
        flags &= ~0100000 /*O_LARGEFILE*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        if (flags in NODEFS.flagsToPermissionStringMap) {
          return NODEFS.flagsToPermissionStringMap[flags];
        } else {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
      },node_ops:{getattr:function (node) {
          var path = NODEFS.realPath(node);
          var stat;
          try {
            stat = fs.lstatSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          // node.js v0.10.20 doesn't report blksize and blocks on Windows. Fake them with default blksize of 4096.
          // See http://support.microsoft.com/kb/140365
          if (NODEFS.isWindows && !stat.blksize) {
            stat.blksize = 4096;
          }
          if (NODEFS.isWindows && !stat.blocks) {
            stat.blocks = (stat.size+stat.blksize-1)/stat.blksize|0;
          }
          return {
            dev: stat.dev,
            ino: stat.ino,
            mode: stat.mode,
            nlink: stat.nlink,
            uid: stat.uid,
            gid: stat.gid,
            rdev: stat.rdev,
            size: stat.size,
            atime: stat.atime,
            mtime: stat.mtime,
            ctime: stat.ctime,
            blksize: stat.blksize,
            blocks: stat.blocks
          };
        },setattr:function (node, attr) {
          var path = NODEFS.realPath(node);
          try {
            if (attr.mode !== undefined) {
              fs.chmodSync(path, attr.mode);
              // update the common node structure mode as well
              node.mode = attr.mode;
            }
            if (attr.timestamp !== undefined) {
              var date = new Date(attr.timestamp);
              fs.utimesSync(path, date, date);
            }
            if (attr.size !== undefined) {
              fs.truncateSync(path, attr.size);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },lookup:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          var mode = NODEFS.getMode(path);
          return NODEFS.createNode(parent, name, mode);
        },mknod:function (parent, name, mode, dev) {
          var node = NODEFS.createNode(parent, name, mode, dev);
          // create the backing node for this in the fs root as well
          var path = NODEFS.realPath(node);
          try {
            if (FS.isDir(node.mode)) {
              fs.mkdirSync(path, node.mode);
            } else {
              fs.writeFileSync(path, '', { mode: node.mode });
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return node;
        },rename:function (oldNode, newDir, newName) {
          var oldPath = NODEFS.realPath(oldNode);
          var newPath = PATH.join2(NODEFS.realPath(newDir), newName);
          try {
            fs.renameSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },unlink:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.unlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },rmdir:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.rmdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readdir:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },symlink:function (parent, newName, oldPath) {
          var newPath = PATH.join2(NODEFS.realPath(parent), newName);
          try {
            fs.symlinkSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readlink:function (node) {
          var path = NODEFS.realPath(node);
          try {
            path = fs.readlinkSync(path);
            path = NODEJS_PATH.relative(NODEJS_PATH.resolve(node.mount.opts.root), path);
            return path;
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        }},stream_ops:{open:function (stream) {
          var path = NODEFS.realPath(stream.node);
          try {
            if (FS.isFile(stream.node.mode)) {
              stream.nfd = fs.openSync(path, NODEFS.flagsToPermissionString(stream.flags));
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },close:function (stream) {
          try {
            if (FS.isFile(stream.node.mode) && stream.nfd) {
              fs.closeSync(stream.nfd);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },read:function (stream, buffer, offset, length, position) {
          if (length === 0) return 0; // node errors on 0 length reads
          // FIXME this is terrible.
          var nbuffer = new Buffer(length);
          var res;
          try {
            res = fs.readSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          if (res > 0) {
            for (var i = 0; i < res; i++) {
              buffer[offset + i] = nbuffer[i];
            }
          }
          return res;
        },write:function (stream, buffer, offset, length, position) {
          // FIXME this is terrible.
          var nbuffer = new Buffer(buffer.subarray(offset, offset + length));
          var res;
          try {
            res = fs.writeSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return res;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              try {
                var stat = fs.fstatSync(stream.nfd);
                position += stat.size;
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES[e.code]);
              }
            }
          }
  
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
  
          return position;
        }}};
  
  var WORKERFS={DIR_MODE:16895,FILE_MODE:33279,reader:null,mount:function (mount) {
        assert(ENVIRONMENT_IS_WORKER);
        if (!WORKERFS.reader) WORKERFS.reader = new FileReaderSync();
        var root = WORKERFS.createNode(null, '/', WORKERFS.DIR_MODE, 0);
        var createdParents = {};
        function ensureParent(path) {
          // return the parent node, creating subdirs as necessary
          var parts = path.split('/');
          var parent = root;
          for (var i = 0; i < parts.length-1; i++) {
            var curr = parts.slice(0, i+1).join('/');
            if (!createdParents[curr]) {
              createdParents[curr] = WORKERFS.createNode(parent, curr, WORKERFS.DIR_MODE, 0);
            }
            parent = createdParents[curr];
          }
          return parent;
        }
        function base(path) {
          var parts = path.split('/');
          return parts[parts.length-1];
        }
        // We also accept FileList here, by using Array.prototype
        Array.prototype.forEach.call(mount.opts["files"] || [], function(file) {
          WORKERFS.createNode(ensureParent(file.name), base(file.name), WORKERFS.FILE_MODE, 0, file, file.lastModifiedDate);
        });
        (mount.opts["blobs"] || []).forEach(function(obj) {
          WORKERFS.createNode(ensureParent(obj["name"]), base(obj["name"]), WORKERFS.FILE_MODE, 0, obj["data"]);
        });
        (mount.opts["packages"] || []).forEach(function(pack) {
          pack['metadata'].files.forEach(function(file) {
            var name = file.filename.substr(1); // remove initial slash
            WORKERFS.createNode(ensureParent(name), base(name), WORKERFS.FILE_MODE, 0, pack['blob'].slice(file.start, file.end));
          });
        });
        return root;
      },createNode:function (parent, name, mode, dev, contents, mtime) {
        var node = FS.createNode(parent, name, mode);
        node.mode = mode;
        node.node_ops = WORKERFS.node_ops;
        node.stream_ops = WORKERFS.stream_ops;
        node.timestamp = (mtime || new Date).getTime();
        assert(WORKERFS.FILE_MODE !== WORKERFS.DIR_MODE);
        if (mode === WORKERFS.FILE_MODE) {
          node.size = contents.size;
          node.contents = contents;
        } else {
          node.size = 4096;
          node.contents = {};
        }
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },node_ops:{getattr:function (node) {
          return {
            dev: 1,
            ino: undefined,
            mode: node.mode,
            nlink: 1,
            uid: 0,
            gid: 0,
            rdev: undefined,
            size: node.size,
            atime: new Date(node.timestamp),
            mtime: new Date(node.timestamp),
            ctime: new Date(node.timestamp),
            blksize: 4096,
            blocks: Math.ceil(node.size / 4096),
          };
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
        },lookup:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        },mknod:function (parent, name, mode, dev) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },rename:function (oldNode, newDir, newName) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },unlink:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },rmdir:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },readdir:function (node) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },symlink:function (parent, newName, oldPath) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },readlink:function (node) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          if (position >= stream.node.size) return 0;
          var chunk = stream.node.contents.slice(position, position + length);
          var ab = WORKERFS.reader.readAsArrayBuffer(chunk);
          buffer.set(new Uint8Array(ab), offset);
          return chunk.size;
        },write:function (stream, buffer, offset, length, position) {
          throw new FS.ErrnoError(ERRNO_CODES.EIO);
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.size;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return position;
        }}};
  
  var _stdin=allocate(1, "i32*", ALLOC_STATIC);
  
  var _stdout=allocate(1, "i32*", ALLOC_STATIC);
  
  var _stderr=allocate(1, "i32*", ALLOC_STATIC);var FS={root:null,mounts:[],devices:[null],streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,trackingDelegate:{},tracking:{openFlags:{READ:1,WRITE:2}},ErrnoError:null,genericErrors:{},filesystems:null,handleFSError:function (e) {
        if (!(e instanceof FS.ErrnoError)) throw e + ' : ' + stackTrace();
        return ___setErrNo(e.errno);
      },lookupPath:function (path, opts) {
        path = PATH.resolve(FS.cwd(), path);
        opts = opts || {};
  
        if (!path) return { path: '', node: null };
  
        var defaults = {
          follow_mount: true,
          recurse_count: 0
        };
        for (var key in defaults) {
          if (opts[key] === undefined) {
            opts[key] = defaults[key];
          }
        }
  
        if (opts.recurse_count > 8) {  // max recursive lookup of 8
          throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
        }
  
        // split the path
        var parts = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), false);
  
        // start at the root
        var current = FS.root;
        var current_path = '/';
  
        for (var i = 0; i < parts.length; i++) {
          var islast = (i === parts.length-1);
          if (islast && opts.parent) {
            // stop resolving
            break;
          }
  
          current = FS.lookupNode(current, parts[i]);
          current_path = PATH.join2(current_path, parts[i]);
  
          // jump to the mount's root node if this is a mountpoint
          if (FS.isMountpoint(current)) {
            if (!islast || (islast && opts.follow_mount)) {
              current = current.mounted.root;
            }
          }
  
          // by default, lookupPath will not follow a symlink if it is the final path component.
          // setting opts.follow = true will override this behavior.
          if (!islast || opts.follow) {
            var count = 0;
            while (FS.isLink(current.mode)) {
              var link = FS.readlink(current_path);
              current_path = PATH.resolve(PATH.dirname(current_path), link);
  
              var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count });
              current = lookup.node;
  
              if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
                throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
              }
            }
          }
        }
  
        return { path: current_path, node: current };
      },getPath:function (node) {
        var path;
        while (true) {
          if (FS.isRoot(node)) {
            var mount = node.mount.mountpoint;
            if (!path) return mount;
            return mount[mount.length-1] !== '/' ? mount + '/' + path : mount + path;
          }
          path = path ? node.name + '/' + path : node.name;
          node = node.parent;
        }
      },hashName:function (parentid, name) {
        var hash = 0;
  
  
        for (var i = 0; i < name.length; i++) {
          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
        }
        return ((parentid + hash) >>> 0) % FS.nameTable.length;
      },hashAddNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.nameTable[hash];
        FS.nameTable[hash] = node;
      },hashRemoveNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.nameTable[hash] === node) {
          FS.nameTable[hash] = node.name_next;
        } else {
          var current = FS.nameTable[hash];
          while (current) {
            if (current.name_next === node) {
              current.name_next = node.name_next;
              break;
            }
            current = current.name_next;
          }
        }
      },lookupNode:function (parent, name) {
        var err = FS.mayLookup(parent);
        if (err) {
          throw new FS.ErrnoError(err, parent);
        }
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.nameTable[hash]; node; node = node.name_next) {
          var nodeName = node.name;
          if (node.parent.id === parent.id && nodeName === name) {
            return node;
          }
        }
        // if we failed to find it in the cache, call into the VFS
        return FS.lookup(parent, name);
      },createNode:function (parent, name, mode, rdev) {
        if (!FS.FSNode) {
          FS.FSNode = function(parent, name, mode, rdev) {
            if (!parent) {
              parent = this;  // root node sets parent to itself
            }
            this.parent = parent;
            this.mount = parent.mount;
            this.mounted = null;
            this.id = FS.nextInode++;
            this.name = name;
            this.mode = mode;
            this.node_ops = {};
            this.stream_ops = {};
            this.rdev = rdev;
          };
  
          FS.FSNode.prototype = {};
  
          // compatibility
          var readMode = 292 | 73;
          var writeMode = 146;
  
          // NOTE we must use Object.defineProperties instead of individual calls to
          // Object.defineProperty in order to make closure compiler happy
          Object.defineProperties(FS.FSNode.prototype, {
            read: {
              get: function() { return (this.mode & readMode) === readMode; },
              set: function(val) { val ? this.mode |= readMode : this.mode &= ~readMode; }
            },
            write: {
              get: function() { return (this.mode & writeMode) === writeMode; },
              set: function(val) { val ? this.mode |= writeMode : this.mode &= ~writeMode; }
            },
            isFolder: {
              get: function() { return FS.isDir(this.mode); }
            },
            isDevice: {
              get: function() { return FS.isChrdev(this.mode); }
            }
          });
        }
  
        var node = new FS.FSNode(parent, name, mode, rdev);
  
        FS.hashAddNode(node);
  
        return node;
      },destroyNode:function (node) {
        FS.hashRemoveNode(node);
      },isRoot:function (node) {
        return node === node.parent;
      },isMountpoint:function (node) {
        return !!node.mounted;
      },isFile:function (mode) {
        return (mode & 61440) === 32768;
      },isDir:function (mode) {
        return (mode & 61440) === 16384;
      },isLink:function (mode) {
        return (mode & 61440) === 40960;
      },isChrdev:function (mode) {
        return (mode & 61440) === 8192;
      },isBlkdev:function (mode) {
        return (mode & 61440) === 24576;
      },isFIFO:function (mode) {
        return (mode & 61440) === 4096;
      },isSocket:function (mode) {
        return (mode & 49152) === 49152;
      },flagModes:{"r":0,"rs":1052672,"r+":2,"w":577,"wx":705,"xw":705,"w+":578,"wx+":706,"xw+":706,"a":1089,"ax":1217,"xa":1217,"a+":1090,"ax+":1218,"xa+":1218},modeStringToFlags:function (str) {
        var flags = FS.flagModes[str];
        if (typeof flags === 'undefined') {
          throw new Error('Unknown file open mode: ' + str);
        }
        return flags;
      },flagsToPermissionString:function (flag) {
        var perms = ['r', 'w', 'rw'][flag & 3];
        if ((flag & 512)) {
          perms += 'w';
        }
        return perms;
      },nodePermissions:function (node, perms) {
        if (FS.ignorePermissions) {
          return 0;
        }
        // return 0 if any user, group or owner bits are set.
        if (perms.indexOf('r') !== -1 && !(node.mode & 292)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('w') !== -1 && !(node.mode & 146)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('x') !== -1 && !(node.mode & 73)) {
          return ERRNO_CODES.EACCES;
        }
        return 0;
      },mayLookup:function (dir) {
        var err = FS.nodePermissions(dir, 'x');
        if (err) return err;
        if (!dir.node_ops.lookup) return ERRNO_CODES.EACCES;
        return 0;
      },mayCreate:function (dir, name) {
        try {
          var node = FS.lookupNode(dir, name);
          return ERRNO_CODES.EEXIST;
        } catch (e) {
        }
        return FS.nodePermissions(dir, 'wx');
      },mayDelete:function (dir, name, isdir) {
        var node;
        try {
          node = FS.lookupNode(dir, name);
        } catch (e) {
          return e.errno;
        }
        var err = FS.nodePermissions(dir, 'wx');
        if (err) {
          return err;
        }
        if (isdir) {
          if (!FS.isDir(node.mode)) {
            return ERRNO_CODES.ENOTDIR;
          }
          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
            return ERRNO_CODES.EBUSY;
          }
        } else {
          if (FS.isDir(node.mode)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return 0;
      },mayOpen:function (node, flags) {
        if (!node) {
          return ERRNO_CODES.ENOENT;
        }
        if (FS.isLink(node.mode)) {
          return ERRNO_CODES.ELOOP;
        } else if (FS.isDir(node.mode)) {
          if ((flags & 2097155) !== 0 ||  // opening for write
              (flags & 512)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
      },MAX_OPEN_FDS:4096,nextfd:function (fd_start, fd_end) {
        fd_start = fd_start || 0;
        fd_end = fd_end || FS.MAX_OPEN_FDS;
        for (var fd = fd_start; fd <= fd_end; fd++) {
          if (!FS.streams[fd]) {
            return fd;
          }
        }
        throw new FS.ErrnoError(ERRNO_CODES.EMFILE);
      },getStream:function (fd) {
        return FS.streams[fd];
      },createStream:function (stream, fd_start, fd_end) {
        if (!FS.FSStream) {
          FS.FSStream = function(){};
          FS.FSStream.prototype = {};
          // compatibility
          Object.defineProperties(FS.FSStream.prototype, {
            object: {
              get: function() { return this.node; },
              set: function(val) { this.node = val; }
            },
            isRead: {
              get: function() { return (this.flags & 2097155) !== 1; }
            },
            isWrite: {
              get: function() { return (this.flags & 2097155) !== 0; }
            },
            isAppend: {
              get: function() { return (this.flags & 1024); }
            }
          });
        }
        // clone it, so we can return an instance of FSStream
        var newStream = new FS.FSStream();
        for (var p in stream) {
          newStream[p] = stream[p];
        }
        stream = newStream;
        var fd = FS.nextfd(fd_start, fd_end);
        stream.fd = fd;
        FS.streams[fd] = stream;
        return stream;
      },closeStream:function (fd) {
        FS.streams[fd] = null;
      },chrdev_stream_ops:{open:function (stream) {
          var device = FS.getDevice(stream.node.rdev);
          // override node's stream ops with the device's
          stream.stream_ops = device.stream_ops;
          // forward the open call
          if (stream.stream_ops.open) {
            stream.stream_ops.open(stream);
          }
        },llseek:function () {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }},major:function (dev) {
        return ((dev) >> 8);
      },minor:function (dev) {
        return ((dev) & 0xff);
      },makedev:function (ma, mi) {
        return ((ma) << 8 | (mi));
      },registerDevice:function (dev, ops) {
        FS.devices[dev] = { stream_ops: ops };
      },getDevice:function (dev) {
        return FS.devices[dev];
      },getMounts:function (mount) {
        var mounts = [];
        var check = [mount];
  
        while (check.length) {
          var m = check.pop();
  
          mounts.push(m);
  
          check.push.apply(check, m.mounts);
        }
  
        return mounts;
      },syncfs:function (populate, callback) {
        if (typeof(populate) === 'function') {
          callback = populate;
          populate = false;
        }
  
        var mounts = FS.getMounts(FS.root.mount);
        var completed = 0;
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= mounts.length) {
            callback(null);
          }
        };
  
        // sync all mounts
        mounts.forEach(function (mount) {
          if (!mount.type.syncfs) {
            return done(null);
          }
          mount.type.syncfs(mount, populate, done);
        });
      },mount:function (type, opts, mountpoint) {
        var root = mountpoint === '/';
        var pseudo = !mountpoint;
        var node;
  
        if (root && FS.root) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        } else if (!root && !pseudo) {
          var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
          mountpoint = lookup.path;  // use the absolute path
          node = lookup.node;
  
          if (FS.isMountpoint(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
          }
  
          if (!FS.isDir(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
          }
        }
  
        var mount = {
          type: type,
          opts: opts,
          mountpoint: mountpoint,
          mounts: []
        };
  
        // create a root node for the fs
        var mountRoot = type.mount(mount);
        mountRoot.mount = mount;
        mount.root = mountRoot;
  
        if (root) {
          FS.root = mountRoot;
        } else if (node) {
          // set as a mountpoint
          node.mounted = mount;
  
          // add the new mount to the current mount's children
          if (node.mount) {
            node.mount.mounts.push(mount);
          }
        }
  
        return mountRoot;
      },unmount:function (mountpoint) {
        var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
        if (!FS.isMountpoint(lookup.node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
  
        // destroy the nodes for this mount, and all its child mounts
        var node = lookup.node;
        var mount = node.mounted;
        var mounts = FS.getMounts(mount);
  
        Object.keys(FS.nameTable).forEach(function (hash) {
          var current = FS.nameTable[hash];
  
          while (current) {
            var next = current.name_next;
  
            if (mounts.indexOf(current.mount) !== -1) {
              FS.destroyNode(current);
            }
  
            current = next;
          }
        });
  
        // no longer a mountpoint
        node.mounted = null;
  
        // remove this mount from the child mounts
        var idx = node.mount.mounts.indexOf(mount);
        assert(idx !== -1);
        node.mount.mounts.splice(idx, 1);
      },lookup:function (parent, name) {
        return parent.node_ops.lookup(parent, name);
      },mknod:function (path, mode, dev) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        if (!name || name === '.' || name === '..') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.mayCreate(parent, name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.mknod) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.mknod(parent, name, mode, dev);
      },create:function (path, mode) {
        mode = mode !== undefined ? mode : 438 /* 0666 */;
        mode &= 4095;
        mode |= 32768;
        return FS.mknod(path, mode, 0);
      },mkdir:function (path, mode) {
        mode = mode !== undefined ? mode : 511 /* 0777 */;
        mode &= 511 | 512;
        mode |= 16384;
        return FS.mknod(path, mode, 0);
      },mkdev:function (path, mode, dev) {
        if (typeof(dev) === 'undefined') {
          dev = mode;
          mode = 438 /* 0666 */;
        }
        mode |= 8192;
        return FS.mknod(path, mode, dev);
      },symlink:function (oldpath, newpath) {
        if (!PATH.resolve(oldpath)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var lookup = FS.lookupPath(newpath, { parent: true });
        var parent = lookup.node;
        if (!parent) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var newname = PATH.basename(newpath);
        var err = FS.mayCreate(parent, newname);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.symlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.symlink(parent, newname, oldpath);
      },rename:function (old_path, new_path) {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        // parents must exist
        var lookup, old_dir, new_dir;
        try {
          lookup = FS.lookupPath(old_path, { parent: true });
          old_dir = lookup.node;
          lookup = FS.lookupPath(new_path, { parent: true });
          new_dir = lookup.node;
        } catch (e) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        if (!old_dir || !new_dir) throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        // need to be part of the same mount
        if (old_dir.mount !== new_dir.mount) {
          throw new FS.ErrnoError(ERRNO_CODES.EXDEV);
        }
        // source must exist
        var old_node = FS.lookupNode(old_dir, old_name);
        // old path should not be an ancestor of the new path
        var relative = PATH.relative(old_path, new_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        // new path should not be an ancestor of the old path
        relative = PATH.relative(new_path, old_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
        }
        // see if the new path already exists
        var new_node;
        try {
          new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {
          // not fatal
        }
        // early out if nothing needs to change
        if (old_node === new_node) {
          return;
        }
        // we'll need to delete the old entry
        var isdir = FS.isDir(old_node.mode);
        var err = FS.mayDelete(old_dir, old_name, isdir);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // need delete permissions if we'll be overwriting.
        // need create permissions if new doesn't already exist.
        err = new_node ?
          FS.mayDelete(new_dir, new_name, isdir) :
          FS.mayCreate(new_dir, new_name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!old_dir.node_ops.rename) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        // if we are going to change the parent, check write permissions
        if (new_dir !== old_dir) {
          err = FS.nodePermissions(old_dir, 'w');
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        try {
          if (FS.trackingDelegate['willMovePath']) {
            FS.trackingDelegate['willMovePath'](old_path, new_path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
        // remove the node from the lookup hash
        FS.hashRemoveNode(old_node);
        // do the underlying fs rename
        try {
          old_dir.node_ops.rename(old_node, new_dir, new_name);
        } catch (e) {
          throw e;
        } finally {
          // add the node back to the hash (in case node_ops.rename
          // changed its name)
          FS.hashAddNode(old_node);
        }
        try {
          if (FS.trackingDelegate['onMovePath']) FS.trackingDelegate['onMovePath'](old_path, new_path);
        } catch(e) {
          console.log("FS.trackingDelegate['onMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
      },rmdir:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, true);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.rmdir) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        if (!node.node_ops.readdir) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        return node.node_ops.readdir(node);
      },unlink:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, false);
        if (err) {
          // POSIX says unlink should set EPERM, not EISDIR
          if (err === ERRNO_CODES.EISDIR) err = ERRNO_CODES.EPERM;
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.unlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readlink:function (path) {
        var lookup = FS.lookupPath(path);
        var link = lookup.node;
        if (!link) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!link.node_ops.readlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        return PATH.resolve(FS.getPath(link.parent), link.node_ops.readlink(link));
      },stat:function (path, dontFollow) {
        var lookup = FS.lookupPath(path, { follow: !dontFollow });
        var node = lookup.node;
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!node.node_ops.getattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return node.node_ops.getattr(node);
      },lstat:function (path) {
        return FS.stat(path, true);
      },chmod:function (path, mode, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          mode: (mode & 4095) | (node.mode & ~4095),
          timestamp: Date.now()
        });
      },lchmod:function (path, mode) {
        FS.chmod(path, mode, true);
      },fchmod:function (fd, mode) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chmod(stream.node, mode);
      },chown:function (path, uid, gid, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          timestamp: Date.now()
          // we ignore the uid / gid for now
        });
      },lchown:function (path, uid, gid) {
        FS.chown(path, uid, gid, true);
      },fchown:function (fd, uid, gid) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chown(stream.node, uid, gid);
      },truncate:function (path, len) {
        if (len < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: true });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!FS.isFile(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.nodePermissions(node, 'w');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        node.node_ops.setattr(node, {
          size: len,
          timestamp: Date.now()
        });
      },ftruncate:function (fd, len) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        FS.truncate(stream.node, len);
      },utime:function (path, atime, mtime) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        node.node_ops.setattr(node, {
          timestamp: Math.max(atime, mtime)
        });
      },open:function (path, flags, mode, fd_start, fd_end) {
        if (path === "") {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        flags = typeof flags === 'string' ? FS.modeStringToFlags(flags) : flags;
        mode = typeof mode === 'undefined' ? 438 /* 0666 */ : mode;
        if ((flags & 64)) {
          mode = (mode & 4095) | 32768;
        } else {
          mode = 0;
        }
        var node;
        if (typeof path === 'object') {
          node = path;
        } else {
          path = PATH.normalize(path);
          try {
            var lookup = FS.lookupPath(path, {
              follow: !(flags & 131072)
            });
            node = lookup.node;
          } catch (e) {
            // ignore
          }
        }
        // perhaps we need to create the node
        var created = false;
        if ((flags & 64)) {
          if (node) {
            // if O_CREAT and O_EXCL are set, error out if the node already exists
            if ((flags & 128)) {
              throw new FS.ErrnoError(ERRNO_CODES.EEXIST);
            }
          } else {
            // node doesn't exist, try to create it
            node = FS.mknod(path, mode, 0);
            created = true;
          }
        }
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        // can't truncate a device
        if (FS.isChrdev(node.mode)) {
          flags &= ~512;
        }
        // if asked only for a directory, then this must be one
        if ((flags & 65536) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        // check permissions, if this is not a file we just created now (it is ok to
        // create and write to a file with read-only permissions; it is read-only
        // for later use)
        if (!created) {
          var err = FS.mayOpen(node, flags);
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        // do truncation if necessary
        if ((flags & 512)) {
          FS.truncate(node, 0);
        }
        // we've already handled these, don't pass down to the underlying vfs
        flags &= ~(128 | 512);
  
        // register the stream with the filesystem
        var stream = FS.createStream({
          node: node,
          path: FS.getPath(node),  // we want the absolute path to the node
          flags: flags,
          seekable: true,
          position: 0,
          stream_ops: node.stream_ops,
          // used by the file family libc calls (fopen, fwrite, ferror, etc.)
          ungotten: [],
          error: false
        }, fd_start, fd_end);
        // call the new stream's open function
        if (stream.stream_ops.open) {
          stream.stream_ops.open(stream);
        }
        if (Module['logReadFiles'] && !(flags & 1)) {
          if (!FS.readFiles) FS.readFiles = {};
          if (!(path in FS.readFiles)) {
            FS.readFiles[path] = 1;
            Module['printErr']('read file: ' + path);
          }
        }
        try {
          if (FS.trackingDelegate['onOpenFile']) {
            var trackingFlags = 0;
            if ((flags & 2097155) !== 1) {
              trackingFlags |= FS.tracking.openFlags.READ;
            }
            if ((flags & 2097155) !== 0) {
              trackingFlags |= FS.tracking.openFlags.WRITE;
            }
            FS.trackingDelegate['onOpenFile'](path, trackingFlags);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['onOpenFile']('"+path+"', flags) threw an exception: " + e.message);
        }
        return stream;
      },close:function (stream) {
        if (stream.getdents) stream.getdents = null; // free readdir state
        try {
          if (stream.stream_ops.close) {
            stream.stream_ops.close(stream);
          }
        } catch (e) {
          throw e;
        } finally {
          FS.closeStream(stream.fd);
        }
      },llseek:function (stream, offset, whence) {
        if (!stream.seekable || !stream.stream_ops.llseek) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        stream.position = stream.stream_ops.llseek(stream, offset, whence);
        stream.ungotten = [];
        return stream.position;
      },read:function (stream, buffer, offset, length, position) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.read) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesRead;
        return bytesRead;
      },write:function (stream, buffer, offset, length, position, canOwn) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.write) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if (stream.flags & 1024) {
          // seek to the end before writing in append mode
          FS.llseek(stream, 0, 2);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
        if (!seeking) stream.position += bytesWritten;
        try {
          if (stream.path && FS.trackingDelegate['onWriteToFile']) FS.trackingDelegate['onWriteToFile'](stream.path);
        } catch(e) {
          console.log("FS.trackingDelegate['onWriteToFile']('"+path+"') threw an exception: " + e.message);
        }
        return bytesWritten;
      },allocate:function (stream, offset, length) {
        if (offset < 0 || length <= 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (!FS.isFile(stream.node.mode) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        if (!stream.stream_ops.allocate) {
          throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
        }
        stream.stream_ops.allocate(stream, offset, length);
      },mmap:function (stream, buffer, offset, length, position, prot, flags) {
        // TODO if PROT is PROT_WRITE, make sure we have write access
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EACCES);
        }
        if (!stream.stream_ops.mmap) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        return stream.stream_ops.mmap(stream, buffer, offset, length, position, prot, flags);
      },msync:function (stream, buffer, offset, length, mmapFlags) {
        if (!stream || !stream.stream_ops.msync) {
          return 0;
        }
        return stream.stream_ops.msync(stream, buffer, offset, length, mmapFlags);
      },munmap:function (stream) {
        return 0;
      },ioctl:function (stream, cmd, arg) {
        if (!stream.stream_ops.ioctl) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTTY);
        }
        return stream.stream_ops.ioctl(stream, cmd, arg);
      },readFile:function (path, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'r';
        opts.encoding = opts.encoding || 'binary';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var ret;
        var stream = FS.open(path, opts.flags);
        var stat = FS.stat(path);
        var length = stat.size;
        var buf = new Uint8Array(length);
        FS.read(stream, buf, 0, length, 0);
        if (opts.encoding === 'utf8') {
          ret = UTF8ArrayToString(buf, 0);
        } else if (opts.encoding === 'binary') {
          ret = buf;
        }
        FS.close(stream);
        return ret;
      },writeFile:function (path, data, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'w';
        opts.encoding = opts.encoding || 'utf8';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var stream = FS.open(path, opts.flags, opts.mode);
        if (opts.encoding === 'utf8') {
          var buf = new Uint8Array(lengthBytesUTF8(data)+1);
          var actualNumBytes = stringToUTF8Array(data, buf, 0, buf.length);
          FS.write(stream, buf, 0, actualNumBytes, 0, opts.canOwn);
        } else if (opts.encoding === 'binary') {
          FS.write(stream, data, 0, data.length, 0, opts.canOwn);
        }
        FS.close(stream);
      },cwd:function () {
        return FS.currentPath;
      },chdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        if (!FS.isDir(lookup.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        var err = FS.nodePermissions(lookup.node, 'x');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        FS.currentPath = lookup.path;
      },createDefaultDirectories:function () {
        FS.mkdir('/tmp');
        FS.mkdir('/home');
        FS.mkdir('/home/web_user');
      },createDefaultDevices:function () {
        // create /dev
        FS.mkdir('/dev');
        // setup /dev/null
        FS.registerDevice(FS.makedev(1, 3), {
          read: function() { return 0; },
          write: function(stream, buffer, offset, length, pos) { return length; }
        });
        FS.mkdev('/dev/null', FS.makedev(1, 3));
        // setup /dev/tty and /dev/tty1
        // stderr needs to print output using Module['printErr']
        // so we register a second tty just for it.
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev('/dev/tty', FS.makedev(5, 0));
        FS.mkdev('/dev/tty1', FS.makedev(6, 0));
        // setup /dev/[u]random
        var random_device;
        if (typeof crypto !== 'undefined') {
          // for modern web browsers
          var randomBuffer = new Uint8Array(1);
          random_device = function() { crypto.getRandomValues(randomBuffer); return randomBuffer[0]; };
        } else if (ENVIRONMENT_IS_NODE) {
          // for nodejs
          random_device = function() { return require('crypto').randomBytes(1)[0]; };
        } else {
          // default for ES5 platforms
          random_device = function() { return (Math.random()*256)|0; };
        }
        FS.createDevice('/dev', 'random', random_device);
        FS.createDevice('/dev', 'urandom', random_device);
        // we're not going to emulate the actual shm device,
        // just create the tmp dirs that reside in it commonly
        FS.mkdir('/dev/shm');
        FS.mkdir('/dev/shm/tmp');
      },createSpecialDirectories:function () {
        // create /proc/self/fd which allows /proc/self/fd/6 => readlink gives the name of the stream for fd 6 (see test_unistd_ttyname)
        FS.mkdir('/proc');
        FS.mkdir('/proc/self');
        FS.mkdir('/proc/self/fd');
        FS.mount({
          mount: function() {
            var node = FS.createNode('/proc/self', 'fd', 16384 | 0777, 73);
            node.node_ops = {
              lookup: function(parent, name) {
                var fd = +name;
                var stream = FS.getStream(fd);
                if (!stream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
                var ret = {
                  parent: null,
                  mount: { mountpoint: 'fake' },
                  node_ops: { readlink: function() { return stream.path } }
                };
                ret.parent = ret; // make it look like a simple root node
                return ret;
              }
            };
            return node;
          }
        }, {}, '/proc/self/fd');
      },createStandardStreams:function () {
        // TODO deprecate the old functionality of a single
        // input / output callback and that utilizes FS.createDevice
        // and instead require a unique set of stream ops
  
        // by default, we symlink the standard streams to the
        // default tty devices. however, if the standard streams
        // have been overwritten we create a unique device for
        // them instead.
        if (Module['stdin']) {
          FS.createDevice('/dev', 'stdin', Module['stdin']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdin');
        }
        if (Module['stdout']) {
          FS.createDevice('/dev', 'stdout', null, Module['stdout']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdout');
        }
        if (Module['stderr']) {
          FS.createDevice('/dev', 'stderr', null, Module['stderr']);
        } else {
          FS.symlink('/dev/tty1', '/dev/stderr');
        }
  
        // open default streams for the stdin, stdout and stderr devices
        var stdin = FS.open('/dev/stdin', 'r');
        assert(stdin.fd === 0, 'invalid handle for stdin (' + stdin.fd + ')');
  
        var stdout = FS.open('/dev/stdout', 'w');
        assert(stdout.fd === 1, 'invalid handle for stdout (' + stdout.fd + ')');
  
        var stderr = FS.open('/dev/stderr', 'w');
        assert(stderr.fd === 2, 'invalid handle for stderr (' + stderr.fd + ')');
      },ensureErrnoError:function () {
        if (FS.ErrnoError) return;
        FS.ErrnoError = function ErrnoError(errno, node) {
          //Module.printErr(stackTrace()); // useful for debugging
          this.node = node;
          this.setErrno = function(errno) {
            this.errno = errno;
            for (var key in ERRNO_CODES) {
              if (ERRNO_CODES[key] === errno) {
                this.code = key;
                break;
              }
            }
          };
          this.setErrno(errno);
          this.message = ERRNO_MESSAGES[errno];
          if (this.stack) this.stack = demangleAll(this.stack);
        };
        FS.ErrnoError.prototype = new Error();
        FS.ErrnoError.prototype.constructor = FS.ErrnoError;
        // Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)
        [ERRNO_CODES.ENOENT].forEach(function(code) {
          FS.genericErrors[code] = new FS.ErrnoError(code);
          FS.genericErrors[code].stack = '<generic error, no stack>';
        });
      },staticInit:function () {
        FS.ensureErrnoError();
  
        FS.nameTable = new Array(4096);
  
        FS.mount(MEMFS, {}, '/');
  
        FS.createDefaultDirectories();
        FS.createDefaultDevices();
        FS.createSpecialDirectories();
  
        FS.filesystems = {
          'MEMFS': MEMFS,
          'IDBFS': IDBFS,
          'NODEFS': NODEFS,
          'WORKERFS': WORKERFS,
        };
      },init:function (input, output, error) {
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
  
        FS.ensureErrnoError();
  
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        Module['stdin'] = input || Module['stdin'];
        Module['stdout'] = output || Module['stdout'];
        Module['stderr'] = error || Module['stderr'];
  
        FS.createStandardStreams();
      },quit:function () {
        FS.init.initialized = false;
        // force-flush all streams, so we get musl std streams printed out
        var fflush = Module['_fflush'];
        if (fflush) fflush(0);
        // close all of our streams
        for (var i = 0; i < FS.streams.length; i++) {
          var stream = FS.streams[i];
          if (!stream) {
            continue;
          }
          FS.close(stream);
        }
      },getMode:function (canRead, canWrite) {
        var mode = 0;
        if (canRead) mode |= 292 | 73;
        if (canWrite) mode |= 146;
        return mode;
      },joinPath:function (parts, forceRelative) {
        var path = PATH.join.apply(null, parts);
        if (forceRelative && path[0] == '/') path = path.substr(1);
        return path;
      },absolutePath:function (relative, base) {
        return PATH.resolve(base, relative);
      },standardizePath:function (path) {
        return PATH.normalize(path);
      },findObject:function (path, dontResolveLastLink) {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          ___setErrNo(ret.error);
          return null;
        }
      },analyzePath:function (path, dontResolveLastLink) {
        // operate from within the context of the symlink's target
        try {
          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          path = lookup.path;
        } catch (e) {
        }
        var ret = {
          isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
          parentExists: false, parentPath: null, parentObject: null
        };
        try {
          var lookup = FS.lookupPath(path, { parent: true });
          ret.parentExists = true;
          ret.parentPath = lookup.path;
          ret.parentObject = lookup.node;
          ret.name = PATH.basename(path);
          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          ret.exists = true;
          ret.path = lookup.path;
          ret.object = lookup.node;
          ret.name = lookup.node.name;
          ret.isRoot = lookup.path === '/';
        } catch (e) {
          ret.error = e.errno;
        };
        return ret;
      },createFolder:function (parent, name, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.mkdir(path, mode);
      },createPath:function (parent, path, canRead, canWrite) {
        parent = typeof parent === 'string' ? parent : FS.getPath(parent);
        var parts = path.split('/').reverse();
        while (parts.length) {
          var part = parts.pop();
          if (!part) continue;
          var current = PATH.join2(parent, part);
          try {
            FS.mkdir(current);
          } catch (e) {
            // ignore EEXIST
          }
          parent = current;
        }
        return current;
      },createFile:function (parent, name, properties, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.create(path, mode);
      },createDataFile:function (parent, name, data, canRead, canWrite, canOwn) {
        var path = name ? PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name) : parent;
        var mode = FS.getMode(canRead, canWrite);
        var node = FS.create(path, mode);
        if (data) {
          if (typeof data === 'string') {
            var arr = new Array(data.length);
            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
            data = arr;
          }
          // make sure we can write to the file
          FS.chmod(node, mode | 146);
          var stream = FS.open(node, 'w');
          FS.write(stream, data, 0, data.length, 0, canOwn);
          FS.close(stream);
          FS.chmod(node, mode);
        }
        return node;
      },createDevice:function (parent, name, input, output) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(!!input, !!output);
        if (!FS.createDevice.major) FS.createDevice.major = 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        // Create a fake device that a set of stream ops to emulate
        // the old behavior.
        FS.registerDevice(dev, {
          open: function(stream) {
            stream.seekable = false;
          },
          close: function(stream) {
            // flush any pending line data
            if (output && output.buffer && output.buffer.length) {
              output(10);
            }
          },
          read: function(stream, buffer, offset, length, pos /* ignored */) {
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
              var result;
              try {
                result = input();
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
              if (result === undefined && bytesRead === 0) {
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              buffer[offset+i] = result;
            }
            if (bytesRead) {
              stream.node.timestamp = Date.now();
            }
            return bytesRead;
          },
          write: function(stream, buffer, offset, length, pos) {
            for (var i = 0; i < length; i++) {
              try {
                output(buffer[offset+i]);
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
            }
            if (length) {
              stream.node.timestamp = Date.now();
            }
            return i;
          }
        });
        return FS.mkdev(path, mode, dev);
      },createLink:function (parent, name, target, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        return FS.symlink(target, path);
      },forceLoadFile:function (obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (Module['read']) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(Module['read'](obj.url), true);
            obj.usedBytes = obj.contents.length;
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) ___setErrNo(ERRNO_CODES.EIO);
        return success;
      },createLazyFile:function (parent, name, url, canRead, canWrite) {
        // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
        function LazyUint8Array() {
          this.lengthKnown = false;
          this.chunks = []; // Loaded chunks. Index is the chunk number
        }
        LazyUint8Array.prototype.get = function LazyUint8Array_get(idx) {
          if (idx > this.length-1 || idx < 0) {
            return undefined;
          }
          var chunkOffset = idx % this.chunkSize;
          var chunkNum = (idx / this.chunkSize)|0;
          return this.getter(chunkNum)[chunkOffset];
        }
        LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
          this.getter = getter;
        }
        LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
          // Find length
          var xhr = new XMLHttpRequest();
          xhr.open('HEAD', url, false);
          xhr.send(null);
          if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
          var datalength = Number(xhr.getResponseHeader("Content-length"));
          var header;
          var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
          var chunkSize = 1024*1024; // Chunk size in bytes
  
          if (!hasByteServing) chunkSize = datalength;
  
          // Function to get a range from the remote URL.
          var doXHR = (function(from, to) {
            if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
            if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
  
            // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
            var xhr = new XMLHttpRequest();
            xhr.open('GET', url, false);
            if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
  
            // Some hints to the browser that we want binary data.
            if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
            if (xhr.overrideMimeType) {
              xhr.overrideMimeType('text/plain; charset=x-user-defined');
            }
  
            xhr.send(null);
            if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
            if (xhr.response !== undefined) {
              return new Uint8Array(xhr.response || []);
            } else {
              return intArrayFromString(xhr.responseText || '', true);
            }
          });
          var lazyArray = this;
          lazyArray.setDataGetter(function(chunkNum) {
            var start = chunkNum * chunkSize;
            var end = (chunkNum+1) * chunkSize - 1; // including this byte
            end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
              lazyArray.chunks[chunkNum] = doXHR(start, end);
            }
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
            return lazyArray.chunks[chunkNum];
          });
  
          this._length = datalength;
          this._chunkSize = chunkSize;
          this.lengthKnown = true;
        }
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          var lazyArray = new LazyUint8Array();
          Object.defineProperty(lazyArray, "length", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._length;
              }
          });
          Object.defineProperty(lazyArray, "chunkSize", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._chunkSize;
              }
          });
  
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
  
        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        // This is a total hack, but I want to get this lazy file code out of the
        // core of MEMFS. If we want to keep this lazy file concept I feel it should
        // be its own thin LAZYFS proxying calls to MEMFS.
        if (properties.contents) {
          node.contents = properties.contents;
        } else if (properties.url) {
          node.contents = null;
          node.url = properties.url;
        }
        // Add a function that defers querying the file size until it is asked the first time.
        Object.defineProperty(node, "usedBytes", {
            get: function() { return this.contents.length; }
        });
        // override each stream op with one that tries to force load the lazy file first
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach(function(key) {
          var fn = node.stream_ops[key];
          stream_ops[key] = function forceLoadLazyFile() {
            if (!FS.forceLoadFile(node)) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            return fn.apply(null, arguments);
          };
        });
        // use a custom read function
        stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
          if (!FS.forceLoadFile(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EIO);
          }
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (contents.slice) { // normal array
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          } else {
            for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
              buffer[offset + i] = contents.get(position + i);
            }
          }
          return size;
        };
        node.stream_ops = stream_ops;
        return node;
      },createPreloadedFile:function (parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn, preFinish) {
        Browser.init();
        // TODO we should allow people to just pass in a complete filename instead
        // of parent and name being that we just join them anyways
        var fullname = name ? PATH.resolve(PATH.join2(parent, name)) : parent;
        var dep = getUniqueRunDependency('cp ' + fullname); // might have several active requests for the same fullname
        function processData(byteArray) {
          function finish(byteArray) {
            if (preFinish) preFinish();
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
            }
            if (onload) onload();
            removeRunDependency(dep);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency(dep);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency(dep);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },indexedDB:function () {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_NAME:function () {
        return 'EM_FS_' + window.location.pathname;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
          console.log('creating db');
          var db = openRequest.result;
          db.createObjectStore(FS.DB_STORE_NAME);
        };
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          var transaction = db.transaction([FS.DB_STORE_NAME], 'readwrite');
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var putRequest = files.put(FS.analyzePath(path).object.contents, path);
            putRequest.onsuccess = function putRequest_onsuccess() { ok++; if (ok + fail == total) finish() };
            putRequest.onerror = function putRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },loadFilesFromDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = onerror; // no database to load from
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          try {
            var transaction = db.transaction([FS.DB_STORE_NAME], 'readonly');
          } catch(e) {
            onerror(e);
            return;
          }
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var getRequest = files.get(path);
            getRequest.onsuccess = function getRequest_onsuccess() {
              if (FS.analyzePath(path).exists) {
                FS.unlink(path);
              }
              FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
              ok++;
              if (ok + fail == total) finish();
            };
            getRequest.onerror = function getRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      }};var PATH={splitPath:function (filename) {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },normalizeArray:function (parts, allowAboveRoot) {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up--; up) {
            parts.unshift('..');
          }
        }
        return parts;
      },normalize:function (path) {
        var isAbsolute = path.charAt(0) === '/',
            trailingSlash = path.substr(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
      },dirname:function (path) {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }
        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
      },basename:function (path) {
        // EMSCRIPTEN return '/'' for '/', not an empty string
        if (path === '/') return '/';
        var lastSlash = path.lastIndexOf('/');
        if (lastSlash === -1) return path;
        return path.substr(lastSlash+1);
      },extname:function (path) {
        return PATH.splitPath(path)[3];
      },join:function () {
        var paths = Array.prototype.slice.call(arguments, 0);
        return PATH.normalize(paths.join('/'));
      },join2:function (l, r) {
        return PATH.normalize(l + '/' + r);
      },resolve:function () {
        var resolvedPath = '',
          resolvedAbsolute = false;
        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path = (i >= 0) ? arguments[i] : FS.cwd();
          // Skip empty and invalid entries
          if (typeof path !== 'string') {
            throw new TypeError('Arguments to path.resolve must be strings');
          } else if (!path) {
            return ''; // an invalid portion invalidates the whole thing
          }
          resolvedPath = path + '/' + resolvedPath;
          resolvedAbsolute = path.charAt(0) === '/';
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter(function(p) {
          return !!p;
        }), !resolvedAbsolute).join('/');
        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
      },relative:function (from, to) {
        from = PATH.resolve(from).substr(1);
        to = PATH.resolve(to).substr(1);
        function trim(arr) {
          var start = 0;
          for (; start < arr.length; start++) {
            if (arr[start] !== '') break;
          }
          var end = arr.length - 1;
          for (; end >= 0; end--) {
            if (arr[end] !== '') break;
          }
          if (start > end) return [];
          return arr.slice(start, end - start + 1);
        }
        var fromParts = trim(from.split('/'));
        var toParts = trim(to.split('/'));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
          if (fromParts[i] !== toParts[i]) {
            samePartsLength = i;
            break;
          }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
          outputParts.push('..');
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join('/');
      }};
  
  
  function _emscripten_set_main_loop_timing(mode, value) {
      Browser.mainLoop.timingMode = mode;
      Browser.mainLoop.timingValue = value;
  
      if (!Browser.mainLoop.func) {
        console.error('emscripten_set_main_loop_timing: Cannot set timing mode for main loop since a main loop does not exist! Call emscripten_set_main_loop first to set one up.');
        return 1; // Return non-zero on failure, can't set timing mode when there is no main loop.
      }
  
      if (mode == 0 /*EM_TIMING_SETTIMEOUT*/) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_setTimeout() {
          setTimeout(Browser.mainLoop.runner, value); // doing this each time means that on exception, we stop
        };
        Browser.mainLoop.method = 'timeout';
      } else if (mode == 1 /*EM_TIMING_RAF*/) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_rAF() {
          Browser.requestAnimationFrame(Browser.mainLoop.runner);
        };
        Browser.mainLoop.method = 'rAF';
      } else if (mode == 2 /*EM_TIMING_SETIMMEDIATE*/) {
        if (!window['setImmediate']) {
          // Emulate setImmediate. (note: not a complete polyfill, we don't emulate clearImmediate() to keep code size to minimum, since not needed)
          var setImmediates = [];
          var emscriptenMainLoopMessageId = '__emcc';
          function Browser_setImmediate_messageHandler(event) {
            if (event.source === window && event.data === emscriptenMainLoopMessageId) {
              event.stopPropagation();
              setImmediates.shift()();
            }
          }
          window.addEventListener("message", Browser_setImmediate_messageHandler, true);
          window['setImmediate'] = function Browser_emulated_setImmediate(func) {
            setImmediates.push(func);
            window.postMessage(emscriptenMainLoopMessageId, "*");
          }
        }
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_setImmediate() {
          window['setImmediate'](Browser.mainLoop.runner);
        };
        Browser.mainLoop.method = 'immediate';
      }
      return 0;
    }function _emscripten_set_main_loop(func, fps, simulateInfiniteLoop, arg, noSetTiming) {
      Module['noExitRuntime'] = true;
  
      assert(!Browser.mainLoop.func, 'emscripten_set_main_loop: there can only be one main loop function at once: call emscripten_cancel_main_loop to cancel the previous one before setting a new one with different parameters.');
  
      Browser.mainLoop.func = func;
      Browser.mainLoop.arg = arg;
  
      var thisMainLoopId = Browser.mainLoop.currentlyRunningMainloop;
  
      Browser.mainLoop.runner = function Browser_mainLoop_runner() {
        if (ABORT) return;
        if (Browser.mainLoop.queue.length > 0) {
          var start = Date.now();
          var blocker = Browser.mainLoop.queue.shift();
          blocker.func(blocker.arg);
          if (Browser.mainLoop.remainingBlockers) {
            var remaining = Browser.mainLoop.remainingBlockers;
            var next = remaining%1 == 0 ? remaining-1 : Math.floor(remaining);
            if (blocker.counted) {
              Browser.mainLoop.remainingBlockers = next;
            } else {
              // not counted, but move the progress along a tiny bit
              next = next + 0.5; // do not steal all the next one's progress
              Browser.mainLoop.remainingBlockers = (8*remaining + next)/9;
            }
          }
          console.log('main loop blocker "' + blocker.name + '" took ' + (Date.now() - start) + ' ms'); //, left: ' + Browser.mainLoop.remainingBlockers);
          Browser.mainLoop.updateStatus();
          setTimeout(Browser.mainLoop.runner, 0);
          return;
        }
  
        // catch pauses from non-main loop sources
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  
        // Implement very basic swap interval control
        Browser.mainLoop.currentFrameNumber = Browser.mainLoop.currentFrameNumber + 1 | 0;
        if (Browser.mainLoop.timingMode == 1/*EM_TIMING_RAF*/ && Browser.mainLoop.timingValue > 1 && Browser.mainLoop.currentFrameNumber % Browser.mainLoop.timingValue != 0) {
          // Not the scheduled time to render this frame - skip.
          Browser.mainLoop.scheduler();
          return;
        }
  
        // Signal GL rendering layer that processing of a new frame is about to start. This helps it optimize
        // VBO double-buffering and reduce GPU stalls.
        GL.newRenderingFrameStarted();
  
        if (Browser.mainLoop.method === 'timeout' && Module.ctx) {
          Module.printErr('Looks like you are rendering without using requestAnimationFrame for the main loop. You should use 0 for the frame rate in emscripten_set_main_loop in order to use requestAnimationFrame, as that can greatly improve your frame rates!');
          Browser.mainLoop.method = ''; // just warn once per call to set main loop
        }
  
        Browser.mainLoop.runIter(function() {
          if (typeof arg !== 'undefined') {
            Runtime.dynCall('vi', func, [arg]);
          } else {
            Runtime.dynCall('v', func);
          }
        });
  
        // catch pauses from the main loop itself
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  
        // Queue new audio data. This is important to be right after the main loop invocation, so that we will immediately be able
        // to queue the newest produced audio samples.
        // TODO: Consider adding pre- and post- rAF callbacks so that GL.newRenderingFrameStarted() and SDL.audio.queueNewAudioData()
        //       do not need to be hardcoded into this function, but can be more generic.
        if (typeof SDL === 'object' && SDL.audio && SDL.audio.queueNewAudioData) SDL.audio.queueNewAudioData();
  
        Browser.mainLoop.scheduler();
      }
  
      if (!noSetTiming) {
        if (fps && fps > 0) _emscripten_set_main_loop_timing(0/*EM_TIMING_SETTIMEOUT*/, 1000.0 / fps);
        else _emscripten_set_main_loop_timing(1/*EM_TIMING_RAF*/, 1); // Do rAF by rendering each frame (no decimating)
  
        Browser.mainLoop.scheduler();
      }
  
      if (simulateInfiniteLoop) {
        throw 'SimulateInfiniteLoop';
      }
    }var Browser={mainLoop:{scheduler:null,method:"",currentlyRunningMainloop:0,func:null,arg:0,timingMode:0,timingValue:0,currentFrameNumber:0,queue:[],pause:function () {
          Browser.mainLoop.scheduler = null;
          Browser.mainLoop.currentlyRunningMainloop++; // Incrementing this signals the previous main loop that it's now become old, and it must return.
        },resume:function () {
          Browser.mainLoop.currentlyRunningMainloop++;
          var timingMode = Browser.mainLoop.timingMode;
          var timingValue = Browser.mainLoop.timingValue;
          var func = Browser.mainLoop.func;
          Browser.mainLoop.func = null;
          _emscripten_set_main_loop(func, 0, false, Browser.mainLoop.arg, true /* do not set timing and call scheduler, we will do it on the next lines */);
          _emscripten_set_main_loop_timing(timingMode, timingValue);
          Browser.mainLoop.scheduler();
        },updateStatus:function () {
          if (Module['setStatus']) {
            var message = Module['statusMessage'] || 'Please wait...';
            var remaining = Browser.mainLoop.remainingBlockers;
            var expected = Browser.mainLoop.expectedBlockers;
            if (remaining) {
              if (remaining < expected) {
                Module['setStatus'](message + ' (' + (expected - remaining) + '/' + expected + ')');
              } else {
                Module['setStatus'](message);
              }
            } else {
              Module['setStatus']('');
            }
          }
        },runIter:function (func) {
          if (ABORT) return;
          if (Module['preMainLoop']) {
            var preRet = Module['preMainLoop']();
            if (preRet === false) {
              return; // |return false| skips a frame
            }
          }
          try {
            func();
          } catch (e) {
            if (e instanceof ExitStatus) {
              return;
            } else {
              if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
              throw e;
            }
          }
          if (Module['postMainLoop']) Module['postMainLoop']();
        }},isFullScreen:false,pointerLock:false,moduleContextCreatedCallbacks:[],workers:[],init:function () {
        if (!Module["preloadPlugins"]) Module["preloadPlugins"] = []; // needs to exist even in workers
  
        if (Browser.initted) return;
        Browser.initted = true;
  
        try {
          new Blob();
          Browser.hasBlobConstructor = true;
        } catch(e) {
          Browser.hasBlobConstructor = false;
          console.log("warning: no blob constructor, cannot create blobs with mimetypes");
        }
        Browser.BlobBuilder = typeof MozBlobBuilder != "undefined" ? MozBlobBuilder : (typeof WebKitBlobBuilder != "undefined" ? WebKitBlobBuilder : (!Browser.hasBlobConstructor ? console.log("warning: no BlobBuilder") : null));
        Browser.URLObject = typeof window != "undefined" ? (window.URL ? window.URL : window.webkitURL) : undefined;
        if (!Module.noImageDecoding && typeof Browser.URLObject === 'undefined') {
          console.log("warning: Browser does not support creating object URLs. Built-in browser image decoding will not be available.");
          Module.noImageDecoding = true;
        }
  
        // Support for plugins that can process preloaded files. You can add more of these to
        // your app by creating and appending to Module.preloadPlugins.
        //
        // Each plugin is asked if it can handle a file based on the file's name. If it can,
        // it is given the file's raw data. When it is done, it calls a callback with the file's
        // (possibly modified) data. For example, a plugin might decompress a file, or it
        // might create some side data structure for use later (like an Image element, etc.).
  
        var imagePlugin = {};
        imagePlugin['canHandle'] = function imagePlugin_canHandle(name) {
          return !Module.noImageDecoding && /\.(jpg|jpeg|png|bmp)$/i.test(name);
        };
        imagePlugin['handle'] = function imagePlugin_handle(byteArray, name, onload, onerror) {
          var b = null;
          if (Browser.hasBlobConstructor) {
            try {
              b = new Blob([byteArray], { type: Browser.getMimetype(name) });
              if (b.size !== byteArray.length) { // Safari bug #118630
                // Safari's Blob can only take an ArrayBuffer
                b = new Blob([(new Uint8Array(byteArray)).buffer], { type: Browser.getMimetype(name) });
              }
            } catch(e) {
              Runtime.warnOnce('Blob constructor present but fails: ' + e + '; falling back to blob builder');
            }
          }
          if (!b) {
            var bb = new Browser.BlobBuilder();
            bb.append((new Uint8Array(byteArray)).buffer); // we need to pass a buffer, and must copy the array to get the right data range
            b = bb.getBlob();
          }
          var url = Browser.URLObject.createObjectURL(b);
          assert(typeof url == 'string', 'createObjectURL must return a url as a string');
          var img = new Image();
          img.onload = function img_onload() {
            assert(img.complete, 'Image ' + name + ' could not be decoded');
            var canvas = document.createElement('canvas');
            canvas.width = img.width;
            canvas.height = img.height;
            var ctx = canvas.getContext('2d');
            ctx.drawImage(img, 0, 0);
            Module["preloadedImages"][name] = canvas;
            Browser.URLObject.revokeObjectURL(url);
            if (onload) onload(byteArray);
          };
          img.onerror = function img_onerror(event) {
            console.log('Image ' + url + ' could not be decoded');
            if (onerror) onerror();
          };
          img.src = url;
        };
        Module['preloadPlugins'].push(imagePlugin);
  
        var audioPlugin = {};
        audioPlugin['canHandle'] = function audioPlugin_canHandle(name) {
          return !Module.noAudioDecoding && name.substr(-4) in { '.ogg': 1, '.wav': 1, '.mp3': 1 };
        };
        audioPlugin['handle'] = function audioPlugin_handle(byteArray, name, onload, onerror) {
          var done = false;
          function finish(audio) {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = audio;
            if (onload) onload(byteArray);
          }
          function fail() {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = new Audio(); // empty shim
            if (onerror) onerror();
          }
          if (Browser.hasBlobConstructor) {
            try {
              var b = new Blob([byteArray], { type: Browser.getMimetype(name) });
            } catch(e) {
              return fail();
            }
            var url = Browser.URLObject.createObjectURL(b); // XXX we never revoke this!
            assert(typeof url == 'string', 'createObjectURL must return a url as a string');
            var audio = new Audio();
            audio.addEventListener('canplaythrough', function() { finish(audio) }, false); // use addEventListener due to chromium bug 124926
            audio.onerror = function audio_onerror(event) {
              if (done) return;
              console.log('warning: browser could not fully decode audio ' + name + ', trying slower base64 approach');
              function encode64(data) {
                var BASE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
                var PAD = '=';
                var ret = '';
                var leftchar = 0;
                var leftbits = 0;
                for (var i = 0; i < data.length; i++) {
                  leftchar = (leftchar << 8) | data[i];
                  leftbits += 8;
                  while (leftbits >= 6) {
                    var curr = (leftchar >> (leftbits-6)) & 0x3f;
                    leftbits -= 6;
                    ret += BASE[curr];
                  }
                }
                if (leftbits == 2) {
                  ret += BASE[(leftchar&3) << 4];
                  ret += PAD + PAD;
                } else if (leftbits == 4) {
                  ret += BASE[(leftchar&0xf) << 2];
                  ret += PAD;
                }
                return ret;
              }
              audio.src = 'data:audio/x-' + name.substr(-3) + ';base64,' + encode64(byteArray);
              finish(audio); // we don't wait for confirmation this worked - but it's worth trying
            };
            audio.src = url;
            // workaround for chrome bug 124926 - we do not always get oncanplaythrough or onerror
            Browser.safeSetTimeout(function() {
              finish(audio); // try to use it even though it is not necessarily ready to play
            }, 10000);
          } else {
            return fail();
          }
        };
        Module['preloadPlugins'].push(audioPlugin);
  
        // Canvas event setup
  
        var canvas = Module['canvas'];
        function pointerLockChange() {
          Browser.pointerLock = document['pointerLockElement'] === canvas ||
                                document['mozPointerLockElement'] === canvas ||
                                document['webkitPointerLockElement'] === canvas ||
                                document['msPointerLockElement'] === canvas;
        }
        if (canvas) {
          // forced aspect ratio can be enabled by defining 'forcedAspectRatio' on Module
          // Module['forcedAspectRatio'] = 4 / 3;
          
          canvas.requestPointerLock = canvas['requestPointerLock'] ||
                                      canvas['mozRequestPointerLock'] ||
                                      canvas['webkitRequestPointerLock'] ||
                                      canvas['msRequestPointerLock'] ||
                                      function(){};
          canvas.exitPointerLock = document['exitPointerLock'] ||
                                   document['mozExitPointerLock'] ||
                                   document['webkitExitPointerLock'] ||
                                   document['msExitPointerLock'] ||
                                   function(){}; // no-op if function does not exist
          canvas.exitPointerLock = canvas.exitPointerLock.bind(document);
  
  
          document.addEventListener('pointerlockchange', pointerLockChange, false);
          document.addEventListener('mozpointerlockchange', pointerLockChange, false);
          document.addEventListener('webkitpointerlockchange', pointerLockChange, false);
          document.addEventListener('mspointerlockchange', pointerLockChange, false);
  
          if (Module['elementPointerLock']) {
            canvas.addEventListener("click", function(ev) {
              if (!Browser.pointerLock && canvas.requestPointerLock) {
                canvas.requestPointerLock();
                ev.preventDefault();
              }
            }, false);
          }
        }
      },createContext:function (canvas, useWebGL, setInModule, webGLContextAttributes) {
        if (useWebGL && Module.ctx && canvas == Module.canvas) return Module.ctx; // no need to recreate GL context if it's already been created for this canvas.
  
        var ctx;
        var contextHandle;
        if (useWebGL) {
          // For GLES2/desktop GL compatibility, adjust a few defaults to be different to WebGL defaults, so that they align better with the desktop defaults.
          var contextAttributes = {
            antialias: false,
            alpha: false
          };
  
          if (webGLContextAttributes) {
            for (var attribute in webGLContextAttributes) {
              contextAttributes[attribute] = webGLContextAttributes[attribute];
            }
          }
  
          contextHandle = GL.createContext(canvas, contextAttributes);
          if (contextHandle) {
            ctx = GL.getContext(contextHandle).GLctx;
          }
          // Set the background of the WebGL canvas to black
          canvas.style.backgroundColor = "black";
        } else {
          ctx = canvas.getContext('2d');
        }
  
        if (!ctx) return null;
  
        if (setInModule) {
          if (!useWebGL) assert(typeof GLctx === 'undefined', 'cannot set in module if GLctx is used, but we are a non-GL context that would replace it');
  
          Module.ctx = ctx;
          if (useWebGL) GL.makeContextCurrent(contextHandle);
          Module.useWebGL = useWebGL;
          Browser.moduleContextCreatedCallbacks.forEach(function(callback) { callback() });
          Browser.init();
        }
        return ctx;
      },destroyContext:function (canvas, useWebGL, setInModule) {},fullScreenHandlersInstalled:false,lockPointer:undefined,resizeCanvas:undefined,requestFullScreen:function (lockPointer, resizeCanvas, vrDevice) {
        Browser.lockPointer = lockPointer;
        Browser.resizeCanvas = resizeCanvas;
        Browser.vrDevice = vrDevice;
        if (typeof Browser.lockPointer === 'undefined') Browser.lockPointer = true;
        if (typeof Browser.resizeCanvas === 'undefined') Browser.resizeCanvas = false;
        if (typeof Browser.vrDevice === 'undefined') Browser.vrDevice = null;
  
        var canvas = Module['canvas'];
        function fullScreenChange() {
          Browser.isFullScreen = false;
          var canvasContainer = canvas.parentNode;
          if ((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
               document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
               document['fullScreenElement'] || document['fullscreenElement'] ||
               document['msFullScreenElement'] || document['msFullscreenElement'] ||
               document['webkitCurrentFullScreenElement']) === canvasContainer) {
            canvas.cancelFullScreen = document['cancelFullScreen'] ||
                                      document['mozCancelFullScreen'] ||
                                      document['webkitCancelFullScreen'] ||
                                      document['msExitFullscreen'] ||
                                      document['exitFullscreen'] ||
                                      function() {};
            canvas.cancelFullScreen = canvas.cancelFullScreen.bind(document);
            if (Browser.lockPointer) canvas.requestPointerLock();
            Browser.isFullScreen = true;
            if (Browser.resizeCanvas) Browser.setFullScreenCanvasSize();
          } else {
            
            // remove the full screen specific parent of the canvas again to restore the HTML structure from before going full screen
            canvasContainer.parentNode.insertBefore(canvas, canvasContainer);
            canvasContainer.parentNode.removeChild(canvasContainer);
            
            if (Browser.resizeCanvas) Browser.setWindowedCanvasSize();
          }
          if (Module['onFullScreen']) Module['onFullScreen'](Browser.isFullScreen);
          Browser.updateCanvasDimensions(canvas);
        }
  
        if (!Browser.fullScreenHandlersInstalled) {
          Browser.fullScreenHandlersInstalled = true;
          document.addEventListener('fullscreenchange', fullScreenChange, false);
          document.addEventListener('mozfullscreenchange', fullScreenChange, false);
          document.addEventListener('webkitfullscreenchange', fullScreenChange, false);
          document.addEventListener('MSFullscreenChange', fullScreenChange, false);
        }
  
        // create a new parent to ensure the canvas has no siblings. this allows browsers to optimize full screen performance when its parent is the full screen root
        var canvasContainer = document.createElement("div");
        canvas.parentNode.insertBefore(canvasContainer, canvas);
        canvasContainer.appendChild(canvas);
  
        // use parent of canvas as full screen root to allow aspect ratio correction (Firefox stretches the root to screen size)
        canvasContainer.requestFullScreen = canvasContainer['requestFullScreen'] ||
                                            canvasContainer['mozRequestFullScreen'] ||
                                            canvasContainer['msRequestFullscreen'] ||
                                           (canvasContainer['webkitRequestFullScreen'] ? function() { canvasContainer['webkitRequestFullScreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null);
  
        if (vrDevice) {
          canvasContainer.requestFullScreen({ vrDisplay: vrDevice });
        } else {
          canvasContainer.requestFullScreen();
        }
      },nextRAF:0,fakeRequestAnimationFrame:function (func) {
        // try to keep 60fps between calls to here
        var now = Date.now();
        if (Browser.nextRAF === 0) {
          Browser.nextRAF = now + 1000/60;
        } else {
          while (now + 2 >= Browser.nextRAF) { // fudge a little, to avoid timer jitter causing us to do lots of delay:0
            Browser.nextRAF += 1000/60;
          }
        }
        var delay = Math.max(Browser.nextRAF - now, 0);
        setTimeout(func, delay);
      },requestAnimationFrame:function requestAnimationFrame(func) {
        if (typeof window === 'undefined') { // Provide fallback to setTimeout if window is undefined (e.g. in Node.js)
          Browser.fakeRequestAnimationFrame(func);
        } else {
          if (!window.requestAnimationFrame) {
            window.requestAnimationFrame = window['requestAnimationFrame'] ||
                                           window['mozRequestAnimationFrame'] ||
                                           window['webkitRequestAnimationFrame'] ||
                                           window['msRequestAnimationFrame'] ||
                                           window['oRequestAnimationFrame'] ||
                                           Browser.fakeRequestAnimationFrame;
          }
          window.requestAnimationFrame(func);
        }
      },safeCallback:function (func) {
        return function() {
          if (!ABORT) return func.apply(null, arguments);
        };
      },allowAsyncCallbacks:true,queuedAsyncCallbacks:[],pauseAsyncCallbacks:function () {
        Browser.allowAsyncCallbacks = false;
      },resumeAsyncCallbacks:function () { // marks future callbacks as ok to execute, and synchronously runs any remaining ones right now
        Browser.allowAsyncCallbacks = true;
        if (Browser.queuedAsyncCallbacks.length > 0) {
          var callbacks = Browser.queuedAsyncCallbacks;
          Browser.queuedAsyncCallbacks = [];
          callbacks.forEach(function(func) {
            func();
          });
        }
      },safeRequestAnimationFrame:function (func) {
        return Browser.requestAnimationFrame(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } else {
            Browser.queuedAsyncCallbacks.push(func);
          }
        });
      },safeSetTimeout:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setTimeout(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } else {
            Browser.queuedAsyncCallbacks.push(func);
          }
        }, timeout);
      },safeSetInterval:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setInterval(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } // drop it on the floor otherwise, next interval will kick in
        }, timeout);
      },getMimetype:function (name) {
        return {
          'jpg': 'image/jpeg',
          'jpeg': 'image/jpeg',
          'png': 'image/png',
          'bmp': 'image/bmp',
          'ogg': 'audio/ogg',
          'wav': 'audio/wav',
          'mp3': 'audio/mpeg'
        }[name.substr(name.lastIndexOf('.')+1)];
      },getUserMedia:function (func) {
        if(!window.getUserMedia) {
          window.getUserMedia = navigator['getUserMedia'] ||
                                navigator['mozGetUserMedia'];
        }
        window.getUserMedia(func);
      },getMovementX:function (event) {
        return event['movementX'] ||
               event['mozMovementX'] ||
               event['webkitMovementX'] ||
               0;
      },getMovementY:function (event) {
        return event['movementY'] ||
               event['mozMovementY'] ||
               event['webkitMovementY'] ||
               0;
      },getMouseWheelDelta:function (event) {
        var delta = 0;
        switch (event.type) {
          case 'DOMMouseScroll': 
            delta = event.detail;
            break;
          case 'mousewheel': 
            delta = event.wheelDelta;
            break;
          case 'wheel': 
            delta = event['deltaY'];
            break;
          default:
            throw 'unrecognized mouse wheel event: ' + event.type;
        }
        return delta;
      },mouseX:0,mouseY:0,mouseMovementX:0,mouseMovementY:0,touches:{},lastTouches:{},calculateMouseEvent:function (event) { // event should be mousemove, mousedown or mouseup
        if (Browser.pointerLock) {
          // When the pointer is locked, calculate the coordinates
          // based on the movement of the mouse.
          // Workaround for Firefox bug 764498
          if (event.type != 'mousemove' &&
              ('mozMovementX' in event)) {
            Browser.mouseMovementX = Browser.mouseMovementY = 0;
          } else {
            Browser.mouseMovementX = Browser.getMovementX(event);
            Browser.mouseMovementY = Browser.getMovementY(event);
          }
          
          // check if SDL is available
          if (typeof SDL != "undefined") {
          	Browser.mouseX = SDL.mouseX + Browser.mouseMovementX;
          	Browser.mouseY = SDL.mouseY + Browser.mouseMovementY;
          } else {
          	// just add the mouse delta to the current absolut mouse position
          	// FIXME: ideally this should be clamped against the canvas size and zero
          	Browser.mouseX += Browser.mouseMovementX;
          	Browser.mouseY += Browser.mouseMovementY;
          }        
        } else {
          // Otherwise, calculate the movement based on the changes
          // in the coordinates.
          var rect = Module["canvas"].getBoundingClientRect();
          var cw = Module["canvas"].width;
          var ch = Module["canvas"].height;
  
          // Neither .scrollX or .pageXOffset are defined in a spec, but
          // we prefer .scrollX because it is currently in a spec draft.
          // (see: http://www.w3.org/TR/2013/WD-cssom-view-20131217/)
          var scrollX = ((typeof window.scrollX !== 'undefined') ? window.scrollX : window.pageXOffset);
          var scrollY = ((typeof window.scrollY !== 'undefined') ? window.scrollY : window.pageYOffset);
          // If this assert lands, it's likely because the browser doesn't support scrollX or pageXOffset
          // and we have no viable fallback.
          assert((typeof scrollX !== 'undefined') && (typeof scrollY !== 'undefined'), 'Unable to retrieve scroll position, mouse positions likely broken.');
  
          if (event.type === 'touchstart' || event.type === 'touchend' || event.type === 'touchmove') {
            var touch = event.touch;
            if (touch === undefined) {
              return; // the "touch" property is only defined in SDL
  
            }
            var adjustedX = touch.pageX - (scrollX + rect.left);
            var adjustedY = touch.pageY - (scrollY + rect.top);
  
            adjustedX = adjustedX * (cw / rect.width);
            adjustedY = adjustedY * (ch / rect.height);
  
            var coords = { x: adjustedX, y: adjustedY };
            
            if (event.type === 'touchstart') {
              Browser.lastTouches[touch.identifier] = coords;
              Browser.touches[touch.identifier] = coords;
            } else if (event.type === 'touchend' || event.type === 'touchmove') {
              var last = Browser.touches[touch.identifier];
              if (!last) last = coords;
              Browser.lastTouches[touch.identifier] = last;
              Browser.touches[touch.identifier] = coords;
            } 
            return;
          }
  
          var x = event.pageX - (scrollX + rect.left);
          var y = event.pageY - (scrollY + rect.top);
  
          // the canvas might be CSS-scaled compared to its backbuffer;
          // SDL-using content will want mouse coordinates in terms
          // of backbuffer units.
          x = x * (cw / rect.width);
          y = y * (ch / rect.height);
  
          Browser.mouseMovementX = x - Browser.mouseX;
          Browser.mouseMovementY = y - Browser.mouseY;
          Browser.mouseX = x;
          Browser.mouseY = y;
        }
      },xhrLoad:function (url, onload, onerror) {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, true);
        xhr.responseType = 'arraybuffer';
        xhr.onload = function xhr_onload() {
          if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
            onload(xhr.response);
          } else {
            onerror();
          }
        };
        xhr.onerror = onerror;
        xhr.send(null);
      },asyncLoad:function (url, onload, onerror, noRunDep) {
        Browser.xhrLoad(url, function(arrayBuffer) {
          assert(arrayBuffer, 'Loading data file "' + url + '" failed (no arrayBuffer).');
          onload(new Uint8Array(arrayBuffer));
          if (!noRunDep) removeRunDependency('al ' + url);
        }, function(event) {
          if (onerror) {
            onerror();
          } else {
            throw 'Loading data file "' + url + '" failed.';
          }
        });
        if (!noRunDep) addRunDependency('al ' + url);
      },resizeListeners:[],updateResizeListeners:function () {
        var canvas = Module['canvas'];
        Browser.resizeListeners.forEach(function(listener) {
          listener(canvas.width, canvas.height);
        });
      },setCanvasSize:function (width, height, noUpdates) {
        var canvas = Module['canvas'];
        Browser.updateCanvasDimensions(canvas, width, height);
        if (!noUpdates) Browser.updateResizeListeners();
      },windowedWidth:0,windowedHeight:0,setFullScreenCanvasSize:function () {
        // check if SDL is available   
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags | 0x00800000; // set SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },setWindowedCanvasSize:function () {
        // check if SDL is available       
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags & ~0x00800000; // clear SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },updateCanvasDimensions:function (canvas, wNative, hNative) {
        if (wNative && hNative) {
          canvas.widthNative = wNative;
          canvas.heightNative = hNative;
        } else {
          wNative = canvas.widthNative;
          hNative = canvas.heightNative;
        }
        var w = wNative;
        var h = hNative;
        if (Module['forcedAspectRatio'] && Module['forcedAspectRatio'] > 0) {
          if (w/h < Module['forcedAspectRatio']) {
            w = Math.round(h * Module['forcedAspectRatio']);
          } else {
            h = Math.round(w / Module['forcedAspectRatio']);
          }
        }
        if (((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
             document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
             document['fullScreenElement'] || document['fullscreenElement'] ||
             document['msFullScreenElement'] || document['msFullscreenElement'] ||
             document['webkitCurrentFullScreenElement']) === canvas.parentNode) && (typeof screen != 'undefined')) {
           var factor = Math.min(screen.width / w, screen.height / h);
           w = Math.round(w * factor);
           h = Math.round(h * factor);
        }
        if (Browser.resizeCanvas) {
          if (canvas.width  != w) canvas.width  = w;
          if (canvas.height != h) canvas.height = h;
          if (typeof canvas.style != 'undefined') {
            canvas.style.removeProperty( "width");
            canvas.style.removeProperty("height");
          }
        } else {
          if (canvas.width  != wNative) canvas.width  = wNative;
          if (canvas.height != hNative) canvas.height = hNative;
          if (typeof canvas.style != 'undefined') {
            if (w != wNative || h != hNative) {
              canvas.style.setProperty( "width", w + "px", "important");
              canvas.style.setProperty("height", h + "px", "important");
            } else {
              canvas.style.removeProperty( "width");
              canvas.style.removeProperty("height");
            }
          }
        }
      },wgetRequests:{},nextWgetRequestHandle:0,getNextWgetRequestHandle:function () {
        var handle = Browser.nextWgetRequestHandle;
        Browser.nextWgetRequestHandle++;
        return handle;
      }};var GLImmediate={MapTreeLib:null,spawnMapTreeLib:function () {
        /* A naive implementation of a map backed by an array, and accessed by
         * naive iteration along the array. (hashmap with only one bucket)
         */
        function CNaiveListMap() {
          var list = [];
  
          this.insert = function CNaiveListMap_insert(key, val) {
            if (this.contains(key|0)) return false;
            list.push([key, val]);
            return true;
          };
  
          var __contains_i;
          this.contains = function CNaiveListMap_contains(key) {
            for (__contains_i = 0; __contains_i < list.length; ++__contains_i) {
              if (list[__contains_i][0] === key) return true;
            }
            return false;
          };
  
          var __get_i;
          this.get = function CNaiveListMap_get(key) {
            for (__get_i = 0; __get_i < list.length; ++__get_i) {
              if (list[__get_i][0] === key) return list[__get_i][1];
            }
            return undefined;
          };
        };
  
        /* A tree of map nodes.
          Uses `KeyView`s to allow descending the tree without garbage.
          Example: {
            // Create our map object.
            var map = new ObjTreeMap();
  
            // Grab the static keyView for the map.
            var keyView = map.GetStaticKeyView();
  
            // Let's make a map for:
            // root: <undefined>
            //   1: <undefined>
            //     2: <undefined>
            //       5: "Three, sir!"
            //       3: "Three!"
  
            // Note how we can chain together `Reset` and `Next` to
            // easily descend based on multiple key fragments.
            keyView.Reset().Next(1).Next(2).Next(5).Set("Three, sir!");
            keyView.Reset().Next(1).Next(2).Next(3).Set("Three!");
          }
        */
        function CMapTree() {
          function CNLNode() {
            var map = new CNaiveListMap();
  
            this.child = function CNLNode_child(keyFrag) {
              if (!map.contains(keyFrag|0)) {
                map.insert(keyFrag|0, new CNLNode());
              }
              return map.get(keyFrag|0);
            };
  
            this.value = undefined;
            this.get = function CNLNode_get() {
              return this.value;
            };
  
            this.set = function CNLNode_set(val) {
              this.value = val;
            };
          }
  
          function CKeyView(root) {
            var cur;
  
            this.reset = function CKeyView_reset() {
              cur = root;
              return this;
            };
            this.reset();
  
            this.next = function CKeyView_next(keyFrag) {
              cur = cur.child(keyFrag);
              return this;
            };
  
            this.get = function CKeyView_get() {
              return cur.get();
            };
  
            this.set = function CKeyView_set(val) {
              cur.set(val);
            };
          };
  
          var root;
          var staticKeyView;
  
          this.createKeyView = function CNLNode_createKeyView() {
            return new CKeyView(root);
          }
  
          this.clear = function CNLNode_clear() {
            root = new CNLNode();
            staticKeyView = this.createKeyView();
          };
          this.clear();
  
          this.getStaticKeyView = function CNLNode_getStaticKeyView() {
            staticKeyView.reset();
            return staticKeyView;
          };
        };
  
        // Exports:
        return {
          create: function() {
            return new CMapTree();
          },
        };
      },TexEnvJIT:null,spawnTexEnvJIT:function () {
        // GL defs:
        var GL_TEXTURE0 = 0x84C0;
        var GL_TEXTURE_1D = 0x0DE0;
        var GL_TEXTURE_2D = 0x0DE1;
        var GL_TEXTURE_3D = 0x806f;
        var GL_TEXTURE_CUBE_MAP = 0x8513;
        var GL_TEXTURE_ENV = 0x2300;
        var GL_TEXTURE_ENV_MODE = 0x2200;
        var GL_TEXTURE_ENV_COLOR = 0x2201;
        var GL_TEXTURE_CUBE_MAP_POSITIVE_X = 0x8515;
        var GL_TEXTURE_CUBE_MAP_NEGATIVE_X = 0x8516;
        var GL_TEXTURE_CUBE_MAP_POSITIVE_Y = 0x8517;
        var GL_TEXTURE_CUBE_MAP_NEGATIVE_Y = 0x8518;
        var GL_TEXTURE_CUBE_MAP_POSITIVE_Z = 0x8519;
        var GL_TEXTURE_CUBE_MAP_NEGATIVE_Z = 0x851A;
  
        var GL_SRC0_RGB = 0x8580;
        var GL_SRC1_RGB = 0x8581;
        var GL_SRC2_RGB = 0x8582;
  
        var GL_SRC0_ALPHA = 0x8588;
        var GL_SRC1_ALPHA = 0x8589;
        var GL_SRC2_ALPHA = 0x858A;
  
        var GL_OPERAND0_RGB = 0x8590;
        var GL_OPERAND1_RGB = 0x8591;
        var GL_OPERAND2_RGB = 0x8592;
  
        var GL_OPERAND0_ALPHA = 0x8598;
        var GL_OPERAND1_ALPHA = 0x8599;
        var GL_OPERAND2_ALPHA = 0x859A;
  
        var GL_COMBINE_RGB = 0x8571;
        var GL_COMBINE_ALPHA = 0x8572;
  
        var GL_RGB_SCALE = 0x8573;
        var GL_ALPHA_SCALE = 0x0D1C;
  
        // env.mode
        var GL_ADD      = 0x0104;
        var GL_BLEND    = 0x0BE2;
        var GL_REPLACE  = 0x1E01;
        var GL_MODULATE = 0x2100;
        var GL_DECAL    = 0x2101;
        var GL_COMBINE  = 0x8570;
  
        // env.color/alphaCombiner
        //var GL_ADD         = 0x0104;
        //var GL_REPLACE     = 0x1E01;
        //var GL_MODULATE    = 0x2100;
        var GL_SUBTRACT    = 0x84E7;
        var GL_INTERPOLATE = 0x8575;
  
        // env.color/alphaSrc
        var GL_TEXTURE       = 0x1702;
        var GL_CONSTANT      = 0x8576;
        var GL_PRIMARY_COLOR = 0x8577;
        var GL_PREVIOUS      = 0x8578;
  
        // env.color/alphaOp
        var GL_SRC_COLOR           = 0x0300;
        var GL_ONE_MINUS_SRC_COLOR = 0x0301;
        var GL_SRC_ALPHA           = 0x0302;
        var GL_ONE_MINUS_SRC_ALPHA = 0x0303;
  
        var GL_RGB  = 0x1907;
        var GL_RGBA = 0x1908;
  
        // Our defs:
        var TEXENVJIT_NAMESPACE_PREFIX = "tej_";
        // Not actually constant, as they can be changed between JIT passes:
        var TEX_UNIT_UNIFORM_PREFIX = "uTexUnit";
        var TEX_COORD_VARYING_PREFIX = "vTexCoord";
        var PRIM_COLOR_VARYING = "vPrimColor";
        var TEX_MATRIX_UNIFORM_PREFIX = "uTexMatrix";
  
        // Static vars:
        var s_texUnits = null; //[];
        var s_activeTexture = 0;
  
        var s_requiredTexUnitsForPass = [];
  
        // Static funcs:
        function abort(info) {
          assert(false, "[TexEnvJIT] ABORT: " + info);
        }
  
        function abort_noSupport(info) {
          abort("No support: " + info);
        }
  
        function abort_sanity(info) {
          abort("Sanity failure: " + info);
        }
  
        function genTexUnitSampleExpr(texUnitID) {
          var texUnit = s_texUnits[texUnitID];
          var texType = texUnit.getTexType();
  
          var func = null;
          switch (texType) {
            case GL_TEXTURE_1D:
              func = "texture2D";
              break;
            case GL_TEXTURE_2D:
              func = "texture2D";
              break;
            case GL_TEXTURE_3D:
              return abort_noSupport("No support for 3D textures.");
            case GL_TEXTURE_CUBE_MAP:
              func = "textureCube";
              break;
            default:
              return abort_sanity("Unknown texType: 0x" + texType.toString(16));
          }
  
          var texCoordExpr = TEX_COORD_VARYING_PREFIX + texUnitID;
          if (TEX_MATRIX_UNIFORM_PREFIX != null) {
            texCoordExpr = "(" + TEX_MATRIX_UNIFORM_PREFIX + texUnitID + " * " + texCoordExpr + ")";
          }
          return func + "(" + TEX_UNIT_UNIFORM_PREFIX + texUnitID + ", " + texCoordExpr + ".xy)";
        }
  
        function getTypeFromCombineOp(op) {
          switch (op) {
            case GL_SRC_COLOR:
            case GL_ONE_MINUS_SRC_COLOR:
              return "vec3";
            case GL_SRC_ALPHA:
            case GL_ONE_MINUS_SRC_ALPHA:
              return "float";
          }
  
          return abort_noSupport("Unsupported combiner op: 0x" + op.toString(16));
        }
  
        function getCurTexUnit() {
          return s_texUnits[s_activeTexture];
        }
  
        function genCombinerSourceExpr(texUnitID, constantExpr, previousVar,
                                       src, op)
        {
          var srcExpr = null;
          switch (src) {
            case GL_TEXTURE:
              srcExpr = genTexUnitSampleExpr(texUnitID);
              break;
            case GL_CONSTANT:
              srcExpr = constantExpr;
              break;
            case GL_PRIMARY_COLOR:
              srcExpr = PRIM_COLOR_VARYING;
              break;
            case GL_PREVIOUS:
              srcExpr = previousVar;
              break;
            default:
                return abort_noSupport("Unsupported combiner src: 0x" + src.toString(16));
          }
  
          var expr = null;
          switch (op) {
            case GL_SRC_COLOR:
              expr = srcExpr + ".rgb";
              break;
            case GL_ONE_MINUS_SRC_COLOR:
              expr = "(vec3(1.0) - " + srcExpr + ".rgb)";
              break;
            case GL_SRC_ALPHA:
              expr = srcExpr + ".a";
              break;
            case GL_ONE_MINUS_SRC_ALPHA:
              expr = "(1.0 - " + srcExpr + ".a)";
              break;
            default:
              return abort_noSupport("Unsupported combiner op: 0x" + op.toString(16));
          }
  
          return expr;
        }
  
        function valToFloatLiteral(val) {
          if (val == Math.round(val)) return val + '.0';
          return val;
        }
  
  
        // Classes:
        function CTexEnv() {
          this.mode = GL_MODULATE;
          this.colorCombiner = GL_MODULATE;
          this.alphaCombiner = GL_MODULATE;
          this.colorScale = 1;
          this.alphaScale = 1;
          this.envColor = [0, 0, 0, 0];
  
          this.colorSrc = [
            GL_TEXTURE,
            GL_PREVIOUS,
            GL_CONSTANT
          ];
          this.alphaSrc = [
            GL_TEXTURE,
            GL_PREVIOUS,
            GL_CONSTANT
          ];
          this.colorOp = [
            GL_SRC_COLOR,
            GL_SRC_COLOR,
            GL_SRC_ALPHA
          ];
          this.alphaOp = [
            GL_SRC_ALPHA,
            GL_SRC_ALPHA,
            GL_SRC_ALPHA
          ];
  
          // Map GLenums to small values to efficiently pack the enums to bits for tighter access.
          this.traverseKey = {
            // mode
            0x1E01 /* GL_REPLACE */: 0,
            0x2100 /* GL_MODULATE */: 1,
            0x0104 /* GL_ADD */: 2,
            0x0BE2 /* GL_BLEND */: 3,
            0x2101 /* GL_DECAL */: 4,
            0x8570 /* GL_COMBINE */: 5,
  
            // additional color and alpha combiners
            0x84E7 /* GL_SUBTRACT */: 3,
            0x8575 /* GL_INTERPOLATE */: 4,
  
            // color and alpha src
            0x1702 /* GL_TEXTURE */: 0,
            0x8576 /* GL_CONSTANT */: 1,
            0x8577 /* GL_PRIMARY_COLOR */: 2,
            0x8578 /* GL_PREVIOUS */: 3,
  
            // color and alpha op
            0x0300 /* GL_SRC_COLOR */: 0,
            0x0301 /* GL_ONE_MINUS_SRC_COLOR */: 1,
            0x0302 /* GL_SRC_ALPHA */: 2,
            0x0300 /* GL_ONE_MINUS_SRC_ALPHA */: 3
          };
  
          // The tuple (key0,key1,key2) uniquely identifies the state of the variables in CTexEnv.
          // -1 on key0 denotes 'the whole cached key is dirty'
          this.key0 = -1;
          this.key1 = 0;
          this.key2 = 0;
  
          this.computeKey0 = function() {
            var k = this.traverseKey;
            var key = k[this.mode] * 1638400; // 6 distinct values.
            key += k[this.colorCombiner] * 327680; // 5 distinct values.
            key += k[this.alphaCombiner] * 65536; // 5 distinct values.
            // The above three fields have 6*5*5=150 distinct values -> 8 bits.
            key += (this.colorScale-1) * 16384; // 10 bits used.
            key += (this.alphaScale-1) * 4096; // 12 bits used.
            key += k[this.colorSrc[0]] * 1024; // 14
            key += k[this.colorSrc[1]] * 256; // 16
            key += k[this.colorSrc[2]] * 64; // 18
            key += k[this.alphaSrc[0]] * 16; // 20
            key += k[this.alphaSrc[1]] * 4; // 22
            key += k[this.alphaSrc[2]]; // 24 bits used total.
            return key;
          }
          this.computeKey1 = function() {
            var k = this.traverseKey;
            key = k[this.colorOp[0]] * 4096;
            key += k[this.colorOp[1]] * 1024;             
            key += k[this.colorOp[2]] * 256;
            key += k[this.alphaOp[0]] * 16;
            key += k[this.alphaOp[1]] * 4;
            key += k[this.alphaOp[2]];
            return key;            
          }
          // TODO: remove this. The color should not be part of the key!
          this.computeKey2 = function() {
            return this.envColor[0] * 16777216 + this.envColor[1] * 65536 + this.envColor[2] * 256 + 1 + this.envColor[3];
          }
          this.recomputeKey = function() {
            this.key0 = this.computeKey0();
            this.key1 = this.computeKey1();
            this.key2 = this.computeKey2();
          }
          this.invalidateKey = function() {
            this.key0 = -1; // The key of this texture unit must be recomputed when rendering the next time.
            GLImmediate.currentRenderer = null; // The currently used renderer must be re-evaluated at next render.
          }
        }
  
        function CTexUnit() {
          this.env = new CTexEnv();
          this.enabled_tex1D   = false;
          this.enabled_tex2D   = false;
          this.enabled_tex3D   = false;
          this.enabled_texCube = false;
          this.texTypesEnabled = 0; // A bitfield combination of the four flags above, used for fast access to operations.
  
          this.traverseState = function CTexUnit_traverseState(keyView) {
            if (this.texTypesEnabled) {
              if (this.env.key0 == -1) {
                this.env.recomputeKey();
              }
              keyView.next(this.texTypesEnabled | (this.env.key0 << 4));
              keyView.next(this.env.key1);
              keyView.next(this.env.key2);
            } else {
              // For correctness, must traverse a zero value, theoretically a subsequent integer key could collide with this value otherwise.
              keyView.next(0);
            }
          };
        };
  
        // Class impls:
        CTexUnit.prototype.enabled = function CTexUnit_enabled() {
          return this.texTypesEnabled;
        }
  
        CTexUnit.prototype.genPassLines = function CTexUnit_genPassLines(passOutputVar, passInputVar, texUnitID) {
          if (!this.enabled()) {
            return ["vec4 " + passOutputVar + " = " + passInputVar + ";"];
          }
          var lines = this.env.genPassLines(passOutputVar, passInputVar, texUnitID).join('\n');
  
          var texLoadLines = '';
          var texLoadRegex = /(texture.*?\(.*?\))/g;
          var loadCounter = 0;
          var load;
  
          // As an optimization, merge duplicate identical texture loads to one var.
          while(load = texLoadRegex.exec(lines)) {
            var texLoadExpr = load[1];
            var secondOccurrence = lines.slice(load.index+1).indexOf(texLoadExpr);
            if (secondOccurrence != -1) { // And also has a second occurrence of same load expression..
              // Create new var to store the common load.
              var prefix = TEXENVJIT_NAMESPACE_PREFIX + 'env' + texUnitID + "_";
              var texLoadVar = prefix + 'texload' + loadCounter++;
              var texLoadLine = 'vec4 ' + texLoadVar + ' = ' + texLoadExpr + ';\n';
              texLoadLines += texLoadLine + '\n'; // Store the generated texture load statements in a temp string to not confuse regex search in progress.
              lines = lines.split(texLoadExpr).join(texLoadVar);
              // Reset regex search, since we modified the string.
              texLoadRegex = /(texture.*\(.*\))/g;
            }
          }
          return [texLoadLines + lines];
        }
  
        CTexUnit.prototype.getTexType = function CTexUnit_getTexType() {
          if (this.enabled_texCube) {
            return GL_TEXTURE_CUBE_MAP;
          } else if (this.enabled_tex3D) {
            return GL_TEXTURE_3D;
          } else if (this.enabled_tex2D) {
            return GL_TEXTURE_2D;
          } else if (this.enabled_tex1D) {
            return GL_TEXTURE_1D;
          }
          return 0;
        }
  
        CTexEnv.prototype.genPassLines = function CTexEnv_genPassLines(passOutputVar, passInputVar, texUnitID) {
          switch (this.mode) {
            case GL_REPLACE: {
              /* RGB:
               * Cv = Cs
               * Av = Ap // Note how this is different, and that we'll
               *            need to track the bound texture internalFormat
               *            to get this right.
               *
               * RGBA:
               * Cv = Cs
               * Av = As
               */
              return [
                "vec4 " + passOutputVar + " = " + genTexUnitSampleExpr(texUnitID) + ";",
              ];
            }
            case GL_ADD: {
              /* RGBA:
               * Cv = Cp + Cs
               * Av = ApAs
               */
              var prefix = TEXENVJIT_NAMESPACE_PREFIX + 'env' + texUnitID + "_";
              var texVar = prefix + "tex";
              var colorVar = prefix + "color";
              var alphaVar = prefix + "alpha";
  
              return [
                "vec4 " + texVar + " = " + genTexUnitSampleExpr(texUnitID) + ";",
                "vec3 " + colorVar + " = " + passInputVar + ".rgb + " + texVar + ".rgb;",
                "float " + alphaVar + " = " + passInputVar + ".a * " + texVar + ".a;",
                "vec4 " + passOutputVar + " = vec4(" + colorVar + ", " + alphaVar + ");",
              ];
            }
            case GL_MODULATE: {
              /* RGBA:
               * Cv = CpCs
               * Av = ApAs
               */
              var line = [
                "vec4 " + passOutputVar,
                " = ",
                  passInputVar,
                  " * ",
                  genTexUnitSampleExpr(texUnitID),
                ";",
              ];
              return [line.join("")];
            }
            case GL_DECAL: {
              /* RGBA:
               * Cv = Cp(1 - As) + CsAs
               * Av = Ap
               */
              var prefix = TEXENVJIT_NAMESPACE_PREFIX + 'env' + texUnitID + "_";
              var texVar = prefix + "tex";
              var colorVar = prefix + "color";
              var alphaVar = prefix + "alpha";
  
              return [
                "vec4 " + texVar + " = " + genTexUnitSampleExpr(texUnitID) + ";",
                [
                  "vec3 " + colorVar + " = ",
                    passInputVar + ".rgb * (1.0 - " + texVar + ".a)",
                      " + ",
                    texVar + ".rgb * " + texVar + ".a",
                  ";"
                ].join(""),
                "float " + alphaVar + " = " + passInputVar + ".a;",
                "vec4 " + passOutputVar + " = vec4(" + colorVar + ", " + alphaVar + ");",
              ];
            }
            case GL_BLEND: {
              /* RGBA:
               * Cv = Cp(1 - Cs) + CcCs
               * Av = As
               */
              var prefix = TEXENVJIT_NAMESPACE_PREFIX + 'env' + texUnitID + "_";
              var texVar = prefix + "tex";
              var colorVar = prefix + "color";
              var alphaVar = prefix + "alpha";
  
              return [
                "vec4 " + texVar + " = " + genTexUnitSampleExpr(texUnitID) + ";",
                [
                  "vec3 " + colorVar + " = ",
                    passInputVar + ".rgb * (1.0 - " + texVar + ".rgb)",
                      " + ",
                    PRIM_COLOR_VARYING + ".rgb * " + texVar + ".rgb",
                  ";"
                ].join(""),
                "float " + alphaVar + " = " + texVar + ".a;",
                "vec4 " + passOutputVar + " = vec4(" + colorVar + ", " + alphaVar + ");",
              ];
            }
            case GL_COMBINE: {
              var prefix = TEXENVJIT_NAMESPACE_PREFIX + 'env' + texUnitID + "_";
              var colorVar = prefix + "color";
              var alphaVar = prefix + "alpha";
              var colorLines = this.genCombinerLines(true, colorVar,
                                                     passInputVar, texUnitID,
                                                     this.colorCombiner, this.colorSrc, this.colorOp);
              var alphaLines = this.genCombinerLines(false, alphaVar,
                                                     passInputVar, texUnitID,
                                                     this.alphaCombiner, this.alphaSrc, this.alphaOp);
  
              // Generate scale, but avoid generating an identity op that multiplies by one.
              var scaledColor = (this.colorScale == 1) ? colorVar : (colorVar + " * " + valToFloatLiteral(this.colorScale));
              var scaledAlpha = (this.alphaScale == 1) ? alphaVar : (alphaVar + " * " + valToFloatLiteral(this.alphaScale));
  
              var line = [
                "vec4 " + passOutputVar,
                " = ",
                  "vec4(",
                      scaledColor,
                      ", ",
                      scaledAlpha,
                  ")",
                ";",
              ].join("");
              return [].concat(colorLines, alphaLines, [line]);
            }
          }
  
          return abort_noSupport("Unsupported TexEnv mode: 0x" + this.mode.toString(16));
        }
  
        CTexEnv.prototype.genCombinerLines = function CTexEnv_getCombinerLines(isColor, outputVar,
                                                                               passInputVar, texUnitID,
                                                                               combiner, srcArr, opArr)
        {
          var argsNeeded = null;
          switch (combiner) {
            case GL_REPLACE:
              argsNeeded = 1;
              break;
  
            case GL_MODULATE:
            case GL_ADD:
            case GL_SUBTRACT:
              argsNeeded = 2;
              break;
  
            case GL_INTERPOLATE:
              argsNeeded = 3;
              break;
  
            default:
              return abort_noSupport("Unsupported combiner: 0x" + combiner.toString(16));
          }
  
          var constantExpr = [
            "vec4(",
              valToFloatLiteral(this.envColor[0]),
              ", ",
              valToFloatLiteral(this.envColor[1]),
              ", ",
              valToFloatLiteral(this.envColor[2]),
              ", ",
              valToFloatLiteral(this.envColor[3]),
            ")",
          ].join("");
          var src0Expr = (argsNeeded >= 1) ? genCombinerSourceExpr(texUnitID, constantExpr, passInputVar, srcArr[0], opArr[0])
                                           : null;
          var src1Expr = (argsNeeded >= 2) ? genCombinerSourceExpr(texUnitID, constantExpr, passInputVar, srcArr[1], opArr[1])
                                           : null;
          var src2Expr = (argsNeeded >= 3) ? genCombinerSourceExpr(texUnitID, constantExpr, passInputVar, srcArr[2], opArr[2])
                                           : null;
  
          var outputType = isColor ? "vec3" : "float";
          var lines = null;
          switch (combiner) {
            case GL_REPLACE: {
              var line = [
                outputType + " " + outputVar,
                " = ",
                  src0Expr,
                ";",
              ];
              lines = [line.join("")];
              break;
            }
            case GL_MODULATE: {
              var line = [
                outputType + " " + outputVar + " = ",
                  src0Expr + " * " + src1Expr,
                ";",
              ];
              lines = [line.join("")];
              break;
            }
            case GL_ADD: {
              var line = [
                outputType + " " + outputVar + " = ",
                  src0Expr + " + " + src1Expr,
                ";",
              ];
              lines = [line.join("")];
              break;
            }
            case GL_SUBTRACT: {
              var line = [
                outputType + " " + outputVar + " = ",
                  src0Expr + " - " + src1Expr,
                ";",
              ];
              lines = [line.join("")];
              break;
            }
            case GL_INTERPOLATE: {
              var prefix = TEXENVJIT_NAMESPACE_PREFIX + 'env' + texUnitID + "_";
              var arg2Var = prefix + "colorSrc2";
              var arg2Line = getTypeFromCombineOp(this.colorOp[2]) + " " + arg2Var + " = " + src2Expr + ";";
  
              var line = [
                outputType + " " + outputVar,
                " = ",
                  src0Expr + " * " + arg2Var,
                  " + ",
                  src1Expr + " * (1.0 - " + arg2Var + ")",
                ";",
              ];
              lines = [
                arg2Line,
                line.join(""),
              ];
              break;
            }
  
            default:
              return abort_sanity("Unmatched TexEnv.colorCombiner?");
          }
  
          return lines;
        }
  
        return {
          // Exports:
          init: function(gl, specifiedMaxTextureImageUnits) {
            var maxTexUnits = 0;
            if (specifiedMaxTextureImageUnits) {
              maxTexUnits = specifiedMaxTextureImageUnits;
            } else if (gl) {
              maxTexUnits = gl.getParameter(gl.MAX_TEXTURE_IMAGE_UNITS);
            }
            assert(maxTexUnits > 0);
            s_texUnits = [];
            for (var i = 0; i < maxTexUnits; i++) {
              s_texUnits.push(new CTexUnit());
            }
          },
  
          setGLSLVars: function(uTexUnitPrefix, vTexCoordPrefix, vPrimColor, uTexMatrixPrefix) {
            TEX_UNIT_UNIFORM_PREFIX   = uTexUnitPrefix;
            TEX_COORD_VARYING_PREFIX  = vTexCoordPrefix;
            PRIM_COLOR_VARYING        = vPrimColor;
            TEX_MATRIX_UNIFORM_PREFIX = uTexMatrixPrefix;
          },
  
          genAllPassLines: function(resultDest, indentSize) {
            indentSize = indentSize || 0;
  
            s_requiredTexUnitsForPass.length = 0; // Clear the list.
            var lines = [];
            var lastPassVar = PRIM_COLOR_VARYING;
            for (var i = 0; i < s_texUnits.length; i++) {
              if (!s_texUnits[i].enabled()) continue;
  
              s_requiredTexUnitsForPass.push(i);
  
              var prefix = TEXENVJIT_NAMESPACE_PREFIX + 'env' + i + "_";
              var passOutputVar = prefix + "result";
  
              var newLines = s_texUnits[i].genPassLines(passOutputVar, lastPassVar, i);
              lines = lines.concat(newLines, [""]);
  
              lastPassVar = passOutputVar;
            }
            lines.push(resultDest + " = " + lastPassVar + ";");
  
            var indent = "";
            for (var i = 0; i < indentSize; i++) indent += " ";
  
            var output = indent + lines.join("\n" + indent);
  
            return output;
          },
  
          getUsedTexUnitList: function() {
            return s_requiredTexUnitsForPass;
          },
  
          traverseState: function(keyView) {
            for (var i = 0; i < s_texUnits.length; i++) {
              s_texUnits[i].traverseState(keyView);
            }
          },
  
          getTexUnitType: function(texUnitID) {
            assert(texUnitID >= 0 &&
                   texUnitID < s_texUnits.length);
            return s_texUnits[texUnitID].getTexType();
          },
  
          // Hooks:
          hook_activeTexture: function(texture) {
            s_activeTexture = texture - GL_TEXTURE0;
          },
  
          hook_enable: function(cap) {
            var cur = getCurTexUnit();
            switch (cap) {
              case GL_TEXTURE_1D:
                if (!cur.enabled_tex1D) {
                  GLImmediate.currentRenderer = null; // Renderer state changed, and must be recreated or looked up again.
                  cur.enabled_tex1D = true;
                  cur.texTypesEnabled |= 1;
                }
                break;
              case GL_TEXTURE_2D:
                if (!cur.enabled_tex2D) {
                  GLImmediate.currentRenderer = null;
                  cur.enabled_tex2D = true;
                  cur.texTypesEnabled |= 2;
                }
                break;
              case GL_TEXTURE_3D:
                if (!cur.enabled_tex3D) {
                  GLImmediate.currentRenderer = null;
                  cur.enabled_tex3D = true;
                  cur.texTypesEnabled |= 4;
                }
                break;
              case GL_TEXTURE_CUBE_MAP:
                if (!cur.enabled_texCube) {
                  GLImmediate.currentRenderer = null;
                  cur.enabled_texCube = true;
                  cur.texTypesEnabled |= 8;
                }
                break;
            }
          },
  
          hook_disable: function(cap) {
            var cur = getCurTexUnit();
            switch (cap) {
              case GL_TEXTURE_1D:
                if (cur.enabled_tex1D) {
                  GLImmediate.currentRenderer = null; // Renderer state changed, and must be recreated or looked up again.
                  cur.enabled_tex1D = false;
                  cur.texTypesEnabled &= ~1;
                }
                break;
              case GL_TEXTURE_2D:
                if (cur.enabled_tex2D) {
                  GLImmediate.currentRenderer = null;
                  cur.enabled_tex2D = false;
                  cur.texTypesEnabled &= ~2;
                }
                break;
              case GL_TEXTURE_3D:
                if (cur.enabled_tex3D) {
                  GLImmediate.currentRenderer = null;
                  cur.enabled_tex3D = false;
                  cur.texTypesEnabled &= ~4;
                }
                break;
              case GL_TEXTURE_CUBE_MAP:
                if (cur.enabled_texCube) {
                  GLImmediate.currentRenderer = null;
                  cur.enabled_texCube = false;
                  cur.texTypesEnabled &= ~8;
                }
                break;
            }
          },
  
          hook_texEnvf: function(target, pname, param) {
            if (target != GL_TEXTURE_ENV)
              return;
  
            var env = getCurTexUnit().env;
            switch (pname) {
              case GL_RGB_SCALE:
                if (env.colorScale != param) {
                  env.invalidateKey(); // We changed FFP emulation renderer state.
                  env.colorScale = param;
                }
                break;
              case GL_ALPHA_SCALE:
                if (env.alphaScale != param) {
                  env.invalidateKey();
                  env.alphaScale = param;
                }
                break;
  
              default:
                Module.printErr('WARNING: Unhandled `pname` in call to `glTexEnvf`.');
            }
          },
  
          hook_texEnvi: function(target, pname, param) {
            if (target != GL_TEXTURE_ENV)
              return;
  
            var env = getCurTexUnit().env;
            switch (pname) {
              case GL_TEXTURE_ENV_MODE:
                if (env.mode != param) {
                  env.invalidateKey(); // We changed FFP emulation renderer state.
                  env.mode = param;
                }
                break;
  
              case GL_COMBINE_RGB:
                if (env.colorCombiner != param) {
                  env.invalidateKey();
                  env.colorCombiner = param;
                }
                break;
              case GL_COMBINE_ALPHA:
                if (env.alphaCombiner != param) {
                  env.invalidateKey();
                  env.alphaCombiner = param;
                }
                break;
  
              case GL_SRC0_RGB:
                if (env.colorSrc[0] != param) {
                  env.invalidateKey();
                  env.colorSrc[0] = param;
                }
                break;
              case GL_SRC1_RGB:
                if (env.colorSrc[1] != param) {
                  env.invalidateKey();
                  env.colorSrc[1] = param;
                }
                break;
              case GL_SRC2_RGB:
                if (env.colorSrc[2] != param) {
                  env.invalidateKey();
                  env.colorSrc[2] = param;
                }
                break;
  
              case GL_SRC0_ALPHA:
                if (env.alphaSrc[0] != param) {
                  env.invalidateKey();
                  env.alphaSrc[0] = param;
                }
                break;
              case GL_SRC1_ALPHA:
                if (env.alphaSrc[1] != param) {
                  env.invalidateKey();
                  env.alphaSrc[1] = param;
                }
                break;
              case GL_SRC2_ALPHA:
                if (env.alphaSrc[2] != param) {
                  env.invalidateKey();
                  env.alphaSrc[2] = param;
                }
                break;
  
              case GL_OPERAND0_RGB:
                if (env.colorOp[0] != param) {
                  env.invalidateKey();
                  env.colorOp[0] = param;
                }
                break;
              case GL_OPERAND1_RGB:
                if (env.colorOp[1] != param) {
                  env.invalidateKey();
                  env.colorOp[1] = param;
                }
                break;
              case GL_OPERAND2_RGB:
                if (env.colorOp[2] != param) {
                  env.invalidateKey();
                  env.colorOp[2] = param;
                }
                break;
  
              case GL_OPERAND0_ALPHA:
                if (env.alphaOp[0] != param) {
                  env.invalidateKey();
                  env.alphaOp[0] = param;
                }
                break;
              case GL_OPERAND1_ALPHA:
                if (env.alphaOp[1] != param) {
                  env.invalidateKey();
                  env.alphaOp[1] = param;
                }
                break;
              case GL_OPERAND2_ALPHA:
                if (env.alphaOp[2] != param) {
                  env.invalidateKey();
                  env.alphaOp[2] = param;
                }
                break;
  
              case GL_RGB_SCALE:
                if (env.colorScale != param) {
                  env.invalidateKey();
                  env.colorScale = param;
                }
                break;
              case GL_ALPHA_SCALE:
                if (env.alphaScale != param) {
                  env.invalidateKey();
                  env.alphaScale = param;
                }
                break;
  
              default:
                Module.printErr('WARNING: Unhandled `pname` in call to `glTexEnvi`.');
            }
          },
  
          hook_texEnvfv: function(target, pname, params) {
            if (target != GL_TEXTURE_ENV) return;
  
            var env = getCurTexUnit().env;
            switch (pname) {
              case GL_TEXTURE_ENV_COLOR: {
                for (var i = 0; i < 4; i++) {
                  var param = HEAPF32[(((params)+(i*4))>>2)];
                  if (env.envColor[i] != param) {
                    env.invalidateKey(); // We changed FFP emulation renderer state.
                    env.envColor[i] = param;
                  }
                }
                break
              }
              default:
                Module.printErr('WARNING: Unhandled `pname` in call to `glTexEnvfv`.');
            }
          },
  
          hook_getTexEnviv: function(target, pname, param) {
            if (target != GL_TEXTURE_ENV)
              return;
  
            var env = getCurTexUnit().env;
            switch (pname) {
              case GL_TEXTURE_ENV_MODE:
                HEAP32[((param)>>2)]=env.mode;
                return;
  
              case GL_TEXTURE_ENV_COLOR:
                HEAP32[((param)>>2)]=Math.max(Math.min(env.envColor[0]*255, 255, -255));
                HEAP32[(((param)+(1))>>2)]=Math.max(Math.min(env.envColor[1]*255, 255, -255));
                HEAP32[(((param)+(2))>>2)]=Math.max(Math.min(env.envColor[2]*255, 255, -255));
                HEAP32[(((param)+(3))>>2)]=Math.max(Math.min(env.envColor[3]*255, 255, -255));
                return;
  
              case GL_COMBINE_RGB:
                HEAP32[((param)>>2)]=env.colorCombiner;
                return;
  
              case GL_COMBINE_ALPHA:
                HEAP32[((param)>>2)]=env.alphaCombiner;
                return;
  
              case GL_SRC0_RGB:
                HEAP32[((param)>>2)]=env.colorSrc[0];
                return;
  
              case GL_SRC1_RGB:
                HEAP32[((param)>>2)]=env.colorSrc[1];
                return;
  
              case GL_SRC2_RGB:
                HEAP32[((param)>>2)]=env.colorSrc[2];
                return;
  
              case GL_SRC0_ALPHA:
                HEAP32[((param)>>2)]=env.alphaSrc[0];
                return;
  
              case GL_SRC1_ALPHA:
                HEAP32[((param)>>2)]=env.alphaSrc[1];
                return;
  
              case GL_SRC2_ALPHA:
                HEAP32[((param)>>2)]=env.alphaSrc[2];
                return;
  
              case GL_OPERAND0_RGB:
                HEAP32[((param)>>2)]=env.colorOp[0];
                return;
  
              case GL_OPERAND1_RGB:
                HEAP32[((param)>>2)]=env.colorOp[1];
                return;
  
              case GL_OPERAND2_RGB:
                HEAP32[((param)>>2)]=env.colorOp[2];
                return;
  
              case GL_OPERAND0_ALPHA:
                HEAP32[((param)>>2)]=env.alphaOp[0];
                return;
  
              case GL_OPERAND1_ALPHA:
                HEAP32[((param)>>2)]=env.alphaOp[1];
                return;
  
              case GL_OPERAND2_ALPHA:
                HEAP32[((param)>>2)]=env.alphaOp[2];
                return;
  
              case GL_RGB_SCALE:
                HEAP32[((param)>>2)]=env.colorScale;
                return;
  
              case GL_ALPHA_SCALE:
                HEAP32[((param)>>2)]=env.alphaScale;
                return;
  
              default:
                Module.printErr('WARNING: Unhandled `pname` in call to `glGetTexEnvi`.');
            }
          },
  
          hook_getTexEnvfv: function(target, pname, param) {
            if (target != GL_TEXTURE_ENV)
              return;
  
            var env = getCurTexUnit().env;
            switch (pname) {
              case GL_TEXTURE_ENV_COLOR:
                HEAPF32[((param)>>2)]=env.envColor[0];
                HEAPF32[(((param)+(4))>>2)]=env.envColor[1];
                HEAPF32[(((param)+(8))>>2)]=env.envColor[2];
                HEAPF32[(((param)+(12))>>2)]=env.envColor[3];
                return;
            }
          }
        };
      },vertexData:null,vertexDataU8:null,tempData:null,indexData:null,vertexCounter:0,mode:-1,rendererCache:null,rendererComponents:[],rendererComponentPointer:0,lastRenderer:null,lastArrayBuffer:null,lastProgram:null,lastStride:-1,matrix:[],matrixStack:[],currentMatrix:0,tempMatrix:null,matricesModified:false,useTextureMatrix:false,VERTEX:0,NORMAL:1,COLOR:2,TEXTURE0:3,NUM_ATTRIBUTES:-1,MAX_TEXTURES:-1,totalEnabledClientAttributes:0,enabledClientAttributes:[0,0],clientAttributes:[],liveClientAttributes:[],currentRenderer:null,modifiedClientAttributes:false,clientActiveTexture:0,clientColor:null,usedTexUnitList:[],fixedFunctionProgram:null,setClientAttribute:function setClientAttribute(name, size, type, stride, pointer) {
        var attrib = GLImmediate.clientAttributes[name];
        if (!attrib) {
          for (var i = 0; i <= name; i++) { // keep flat
            if (!GLImmediate.clientAttributes[i]) {
              GLImmediate.clientAttributes[i] = {
                name: name,
                size: size,
                type: type,
                stride: stride,
                pointer: pointer,
                offset: 0
              };
            }
          }
        } else {
          attrib.name = name;
          attrib.size = size;
          attrib.type = type;
          attrib.stride = stride;
          attrib.pointer = pointer;
          attrib.offset = 0;
        }
        GLImmediate.modifiedClientAttributes = true;
      },addRendererComponent:function addRendererComponent(name, size, type) {
        if (!GLImmediate.rendererComponents[name]) {
          GLImmediate.rendererComponents[name] = 1;
          if (GLImmediate.enabledClientAttributes[name]) {
            console.log("Warning: glTexCoord used after EnableClientState for TEXTURE_COORD_ARRAY for TEXTURE0. Disabling TEXTURE_COORD_ARRAY...");
          }
          GLImmediate.enabledClientAttributes[name] = true;
          GLImmediate.setClientAttribute(name, size, type, 0, GLImmediate.rendererComponentPointer);
          GLImmediate.rendererComponentPointer += size * GL.byteSizeByType[type - GL.byteSizeByTypeRoot];
        } else {
          GLImmediate.rendererComponents[name]++;
        }
      },disableBeginEndClientAttributes:function disableBeginEndClientAttributes() {
        for (var i = 0; i < GLImmediate.NUM_ATTRIBUTES; i++) {
          if (GLImmediate.rendererComponents[i]) GLImmediate.enabledClientAttributes[i] = false;
        }
      },getRenderer:function getRenderer() {
        // If no FFP state has changed that would have forced to re-evaluate which FFP emulation shader to use,
        // we have the currently used renderer in cache, and can immediately return that.
        if (GLImmediate.currentRenderer) {
          return GLImmediate.currentRenderer;
        }
        // return a renderer object given the liveClientAttributes
        // we maintain a cache of renderers, optimized to not generate garbage
        var attributes = GLImmediate.liveClientAttributes;
        var cacheMap = GLImmediate.rendererCache;
        var keyView = cacheMap.getStaticKeyView().reset();
  
        // By attrib state:
        var enabledAttributesKey = 0;
        for (var i = 0; i < attributes.length; i++) {
          enabledAttributesKey |= 1 << attributes[i].name;
        }
  
        // By fog state:
        var fogParam = 0;
        if (GLEmulation.fogEnabled) {
          switch (GLEmulation.fogMode) {
            case 0x0801: // GL_EXP2
              fogParam = 1;
              break;
            case 0x2601: // GL_LINEAR
              fogParam = 2;
              break;
            default: // default to GL_EXP
              fogParam = 3;
              break;
          }
        }
        keyView.next((enabledAttributesKey << 2) | fogParam);
  
        // By cur program:
        keyView.next(GL.currProgram);
        if (!GL.currProgram) {
          GLImmediate.TexEnvJIT.traverseState(keyView);
        }
  
        // If we don't already have it, create it.
        var renderer = keyView.get();
        if (!renderer) {
          renderer = GLImmediate.createRenderer();
          GLImmediate.currentRenderer = renderer;
          keyView.set(renderer);
          return renderer;
        }
        GLImmediate.currentRenderer = renderer; // Cache the currently used renderer, so later lookups without state changes can get this fast.
        return renderer;
      },createRenderer:function createRenderer(renderer) {
        var useCurrProgram = !!GL.currProgram;
        var hasTextures = false;
        for (var i = 0; i < GLImmediate.MAX_TEXTURES; i++) {
          var texAttribName = GLImmediate.TEXTURE0 + i;
          if (!GLImmediate.enabledClientAttributes[texAttribName])
            continue;
  
          if (!useCurrProgram) {
            if (GLImmediate.TexEnvJIT.getTexUnitType(i) == 0) {
               Runtime.warnOnce("GL_TEXTURE" + i + " coords are supplied, but that texture unit is disabled in the fixed-function pipeline.");
            }
          }
  
          hasTextures = true;
        }
  
        var ret = {
          init: function init() {
            // For fixed-function shader generation.
            var uTexUnitPrefix = 'u_texUnit';
            var aTexCoordPrefix = 'a_texCoord';
            var vTexCoordPrefix = 'v_texCoord';
            var vPrimColor = 'v_color';
            var uTexMatrixPrefix = GLImmediate.useTextureMatrix ? 'u_textureMatrix' : null;
  
            if (useCurrProgram) {
              if (GL.shaderInfos[GL.programShaders[GL.currProgram][0]].type == GLctx.VERTEX_SHADER) {
                this.vertexShader = GL.shaders[GL.programShaders[GL.currProgram][0]];
                this.fragmentShader = GL.shaders[GL.programShaders[GL.currProgram][1]];
              } else {
                this.vertexShader = GL.shaders[GL.programShaders[GL.currProgram][1]];
                this.fragmentShader = GL.shaders[GL.programShaders[GL.currProgram][0]];
              }
              this.program = GL.programs[GL.currProgram];
              this.usedTexUnitList = [];
            } else {
              // IMPORTANT NOTE: If you parameterize the shader source based on any runtime values
              // in order to create the least expensive shader possible based on the features being
              // used, you should also update the code in the beginning of getRenderer to make sure
              // that you cache the renderer based on the said parameters.
              if (GLEmulation.fogEnabled) {
                switch (GLEmulation.fogMode) {
                  case 0x0801: // GL_EXP2
                    // fog = exp(-(gl_Fog.density * gl_FogFragCoord)^2)
                    var fogFormula = '  float fog = exp(-u_fogDensity * u_fogDensity * ecDistance * ecDistance); \n';
                    break;
                  case 0x2601: // GL_LINEAR
                    // fog = (gl_Fog.end - gl_FogFragCoord) * gl_fog.scale
                    var fogFormula = '  float fog = (u_fogEnd - ecDistance) * u_fogScale; \n';
                    break;
                  default: // default to GL_EXP
                    // fog = exp(-gl_Fog.density * gl_FogFragCoord)
                    var fogFormula = '  float fog = exp(-u_fogDensity * ecDistance); \n';
                    break;
                }
              }
  
              GLImmediate.TexEnvJIT.setGLSLVars(uTexUnitPrefix, vTexCoordPrefix, vPrimColor, uTexMatrixPrefix);
              var fsTexEnvPass = GLImmediate.TexEnvJIT.genAllPassLines('gl_FragColor', 2);
  
              var texUnitAttribList = '';
              var texUnitVaryingList = '';
              var texUnitUniformList = '';
              var vsTexCoordInits = '';
              this.usedTexUnitList = GLImmediate.TexEnvJIT.getUsedTexUnitList();
              for (var i = 0; i < this.usedTexUnitList.length; i++) {
                var texUnit = this.usedTexUnitList[i];
                texUnitAttribList += 'attribute vec4 ' + aTexCoordPrefix + texUnit + ';\n';
                texUnitVaryingList += 'varying vec4 ' + vTexCoordPrefix + texUnit + ';\n';
                texUnitUniformList += 'uniform sampler2D ' + uTexUnitPrefix + texUnit + ';\n';
                vsTexCoordInits += '  ' + vTexCoordPrefix + texUnit + ' = ' + aTexCoordPrefix + texUnit + ';\n';
  
                if (GLImmediate.useTextureMatrix) {
                  texUnitUniformList += 'uniform mat4 ' + uTexMatrixPrefix + texUnit + ';\n';
                }
              }
  
              var vsFogVaryingInit = null;
              if (GLEmulation.fogEnabled) {
                vsFogVaryingInit = '  v_fogFragCoord = abs(ecPosition.z);\n';
              }
  
              var vsSource = [
                'attribute vec4 a_position;',
                'attribute vec4 a_color;',
                'varying vec4 v_color;',
                texUnitAttribList,
                texUnitVaryingList,
                (GLEmulation.fogEnabled ? 'varying float v_fogFragCoord;' : null),
                'uniform mat4 u_modelView;',
                'uniform mat4 u_projection;',
                'void main()',
                '{',
                '  vec4 ecPosition = u_modelView * a_position;', // eye-coordinate position
                '  gl_Position = u_projection * ecPosition;',
                '  v_color = a_color;',
                vsTexCoordInits,
                vsFogVaryingInit,
                '}',
                ''
              ].join('\n').replace(/\n\n+/g, '\n');
  
              this.vertexShader = GLctx.createShader(GLctx.VERTEX_SHADER);
              GLctx.shaderSource(this.vertexShader, vsSource);
              GLctx.compileShader(this.vertexShader);
  
              var fogHeaderIfNeeded = null;
              if (GLEmulation.fogEnabled) {
                fogHeaderIfNeeded = [
                  '',
                  'varying float v_fogFragCoord; ',
                  'uniform vec4 u_fogColor;      ',
                  'uniform float u_fogEnd;       ',
                  'uniform float u_fogScale;     ',
                  'uniform float u_fogDensity;   ',
                  'float ffog(in float ecDistance) { ',
                  fogFormula,
                  '  fog = clamp(fog, 0.0, 1.0); ',
                  '  return fog;                 ',
                  '}',
                  '',
                ].join("\n");
              }
  
              var fogPass = null;
              if (GLEmulation.fogEnabled) {
                fogPass = 'gl_FragColor = vec4(mix(u_fogColor.rgb, gl_FragColor.rgb, ffog(v_fogFragCoord)), gl_FragColor.a);\n';
              }
  
              var fsSource = [
                'precision mediump float;',
                texUnitVaryingList,
                texUnitUniformList,
                'varying vec4 v_color;',
                fogHeaderIfNeeded,
                'void main()',
                '{',
                fsTexEnvPass,
                fogPass,
                '}',
                ''
              ].join("\n").replace(/\n\n+/g, '\n');
  
              this.fragmentShader = GLctx.createShader(GLctx.FRAGMENT_SHADER);
              GLctx.shaderSource(this.fragmentShader, fsSource);
              GLctx.compileShader(this.fragmentShader);
  
              this.program = GLctx.createProgram();
              GLctx.attachShader(this.program, this.vertexShader);
              GLctx.attachShader(this.program, this.fragmentShader);
  
              // As optimization, bind all attributes to prespecified locations, so that the FFP emulation
              // code can submit attributes to any generated FFP shader without having to examine each shader in turn.
              // These prespecified locations are only assumed if GL_FFP_ONLY is specified, since user could also create their
              // own shaders that didn't have attributes in the same locations.
              GLctx.bindAttribLocation(this.program, GLImmediate.VERTEX, 'a_position');
              GLctx.bindAttribLocation(this.program, GLImmediate.COLOR, 'a_color');
              GLctx.bindAttribLocation(this.program, GLImmediate.NORMAL, 'a_normal');
              var maxVertexAttribs = GLctx.getParameter(GLctx.MAX_VERTEX_ATTRIBS);
              for (var i = 0; i < GLImmediate.MAX_TEXTURES && GLImmediate.TEXTURE0 + i < maxVertexAttribs; i++) {
                GLctx.bindAttribLocation(this.program, GLImmediate.TEXTURE0 + i, 'a_texCoord'+i);
                GLctx.bindAttribLocation(this.program, GLImmediate.TEXTURE0 + i, aTexCoordPrefix+i);
              }
              GLctx.linkProgram(this.program);
            }
  
            // Stores an array that remembers which matrix uniforms are up-to-date in this FFP renderer, so they don't need to be resubmitted
            // each time we render with this program.
            this.textureMatrixVersion = [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ];
  
            this.positionLocation = GLctx.getAttribLocation(this.program, 'a_position');
  
            this.texCoordLocations = [];
  
            for (var i = 0; i < GLImmediate.MAX_TEXTURES; i++) {
              if (!GLImmediate.enabledClientAttributes[GLImmediate.TEXTURE0 + i]) {
                this.texCoordLocations[i] = -1;
                continue;
              }
  
              if (useCurrProgram) {
                this.texCoordLocations[i] = GLctx.getAttribLocation(this.program, 'a_texCoord' + i);
              } else {
                this.texCoordLocations[i] = GLctx.getAttribLocation(this.program, aTexCoordPrefix + i);
              }
            }
            this.colorLocation = GLctx.getAttribLocation(this.program, 'a_color');
            if (!useCurrProgram) {
              // Temporarily switch to the program so we can set our sampler uniforms early.
              var prevBoundProg = GLctx.getParameter(GLctx.CURRENT_PROGRAM);
              GLctx.useProgram(this.program);
              {
                for (var i = 0; i < this.usedTexUnitList.length; i++) {
                  var texUnitID = this.usedTexUnitList[i];
                  var texSamplerLoc = GLctx.getUniformLocation(this.program, uTexUnitPrefix + texUnitID);
                  GLctx.uniform1i(texSamplerLoc, texUnitID);
                }
              }
              // The default color attribute value is not the same as the default for all other attribute streams (0,0,0,1) but (1,1,1,1),
              // so explicitly set it right at start.
              GLctx.vertexAttrib4fv(this.colorLocation, [1,1,1,1]);
              GLctx.useProgram(prevBoundProg);
            }
  
            this.textureMatrixLocations = [];
            for (var i = 0; i < GLImmediate.MAX_TEXTURES; i++) {
              this.textureMatrixLocations[i] = GLctx.getUniformLocation(this.program, 'u_textureMatrix' + i);
            }
            this.normalLocation = GLctx.getAttribLocation(this.program, 'a_normal');
  
            this.modelViewLocation = GLctx.getUniformLocation(this.program, 'u_modelView');
            this.projectionLocation = GLctx.getUniformLocation(this.program, 'u_projection');
  
            this.hasTextures = hasTextures;
            this.hasNormal = GLImmediate.enabledClientAttributes[GLImmediate.NORMAL] &&
                             GLImmediate.clientAttributes[GLImmediate.NORMAL].size > 0 &&
                             this.normalLocation >= 0;
            this.hasColor = (this.colorLocation === 0) || this.colorLocation > 0;
  
            this.floatType = GLctx.FLOAT; // minor optimization
  
            this.fogColorLocation = GLctx.getUniformLocation(this.program, 'u_fogColor');
            this.fogEndLocation = GLctx.getUniformLocation(this.program, 'u_fogEnd');
            this.fogScaleLocation = GLctx.getUniformLocation(this.program, 'u_fogScale');
            this.fogDensityLocation = GLctx.getUniformLocation(this.program, 'u_fogDensity');
            this.hasFog = !!(this.fogColorLocation || this.fogEndLocation ||
                             this.fogScaleLocation || this.fogDensityLocation);
          },
  
          prepare: function prepare() {
            // Calculate the array buffer
            var arrayBuffer;
            if (!GL.currArrayBuffer) {
              var start = GLImmediate.firstVertex*GLImmediate.stride;
              var end = GLImmediate.lastVertex*GLImmediate.stride;
              assert(end <= GL.MAX_TEMP_BUFFER_SIZE, 'too much vertex data');
              arrayBuffer = GL.getTempVertexBuffer(end);
              // TODO: consider using the last buffer we bound, if it was larger. downside is larger buffer, but we might avoid rebinding and preparing
            } else {
              arrayBuffer = GL.currArrayBuffer;
            }
  
            // If the array buffer is unchanged and the renderer as well, then we can avoid all the work here
            // XXX We use some heuristics here, and this may not work in all cases. Try disabling GL_UNSAFE_OPTS if you
            // have odd glitches
            var lastRenderer = GLImmediate.lastRenderer;
            var canSkip = this == lastRenderer &&
                          arrayBuffer == GLImmediate.lastArrayBuffer &&
                          (GL.currProgram || this.program) == GLImmediate.lastProgram &&
                          GLImmediate.stride == GLImmediate.lastStride &&
                          !GLImmediate.matricesModified;
            if (!canSkip && lastRenderer) lastRenderer.cleanup();
            if (!GL.currArrayBuffer) {
              // Bind the array buffer and upload data after cleaning up the previous renderer
  
              if (arrayBuffer != GLImmediate.lastArrayBuffer) {
                GLctx.bindBuffer(GLctx.ARRAY_BUFFER, arrayBuffer);
                GLImmediate.lastArrayBuffer = arrayBuffer;
              }
  
              GLctx.bufferSubData(GLctx.ARRAY_BUFFER, start, GLImmediate.vertexData.subarray(start >> 2, end >> 2));
            }
            if (canSkip) return;
            GLImmediate.lastRenderer = this;
            GLImmediate.lastProgram = GL.currProgram || this.program;
            GLImmediate.lastStride == GLImmediate.stride;
            GLImmediate.matricesModified = false;
  
            if (!GL.currProgram) {
              if (GLImmediate.fixedFunctionProgram != this.program) {
                GLctx.useProgram(this.program);
                GLImmediate.fixedFunctionProgram = this.program;
              }
            }
  
            if (this.modelViewLocation && this.modelViewMatrixVersion != GLImmediate.matrixVersion[0/*m*/]) {
              this.modelViewMatrixVersion = GLImmediate.matrixVersion[0/*m*/];
              GLctx.uniformMatrix4fv(this.modelViewLocation, false, GLImmediate.matrix[0/*m*/]);
            }
            if (this.projectionLocation && this.projectionMatrixVersion != GLImmediate.matrixVersion[1/*p*/]) {
              this.projectionMatrixVersion = GLImmediate.matrixVersion[1/*p*/];
              GLctx.uniformMatrix4fv(this.projectionLocation, false, GLImmediate.matrix[1/*p*/]);
            }
  
            var clientAttributes = GLImmediate.clientAttributes;
            var posAttr = clientAttributes[GLImmediate.VERTEX];
  
  
            GLctx.vertexAttribPointer(this.positionLocation, posAttr.size, posAttr.type, false, GLImmediate.stride, posAttr.offset);
            GLctx.enableVertexAttribArray(this.positionLocation);
            if (this.hasNormal) {
              var normalAttr = clientAttributes[GLImmediate.NORMAL];
              GLctx.vertexAttribPointer(this.normalLocation, normalAttr.size, normalAttr.type, true, GLImmediate.stride, normalAttr.offset);
              GLctx.enableVertexAttribArray(this.normalLocation);
            }
            if (this.hasTextures) {
              for (var i = 0; i < GLImmediate.MAX_TEXTURES; i++) {
                var attribLoc = this.texCoordLocations[i];
                if (attribLoc === undefined || attribLoc < 0) continue;
                var texAttr = clientAttributes[GLImmediate.TEXTURE0+i];
  
                if (texAttr.size) {
                  GLctx.vertexAttribPointer(attribLoc, texAttr.size, texAttr.type, false, GLImmediate.stride, texAttr.offset);
                  GLctx.enableVertexAttribArray(attribLoc);
                } else {
                  // These two might be dangerous, but let's try them.
                  GLctx.vertexAttrib4f(attribLoc, 0, 0, 0, 1);
                  GLctx.disableVertexAttribArray(attribLoc);
                }
                var t = 2/*t*/+i;
                if (this.textureMatrixLocations[i] && this.textureMatrixVersion[t] != GLImmediate.matrixVersion[t]) { // XXX might we need this even without the condition we are currently in?
                  this.textureMatrixVersion[t] = GLImmediate.matrixVersion[t];
                  GLctx.uniformMatrix4fv(this.textureMatrixLocations[i], false, GLImmediate.matrix[t]);
                }
              }
            }
            if (GLImmediate.enabledClientAttributes[GLImmediate.COLOR]) {
              var colorAttr = clientAttributes[GLImmediate.COLOR];
              GLctx.vertexAttribPointer(this.colorLocation, colorAttr.size, colorAttr.type, true, GLImmediate.stride, colorAttr.offset);
              GLctx.enableVertexAttribArray(this.colorLocation);
            }
            else if (this.hasColor) {
              GLctx.disableVertexAttribArray(this.colorLocation);
              GLctx.vertexAttrib4fv(this.colorLocation, GLImmediate.clientColor);
            }
            if (this.hasFog) {
              if (this.fogColorLocation) GLctx.uniform4fv(this.fogColorLocation, GLEmulation.fogColor);
              if (this.fogEndLocation) GLctx.uniform1f(this.fogEndLocation, GLEmulation.fogEnd);
              if (this.fogScaleLocation) GLctx.uniform1f(this.fogScaleLocation, 1/(GLEmulation.fogEnd - GLEmulation.fogStart));
              if (this.fogDensityLocation) GLctx.uniform1f(this.fogDensityLocation, GLEmulation.fogDensity);
            }
          },
  
          cleanup: function cleanup() {
            GLctx.disableVertexAttribArray(this.positionLocation);
            if (this.hasTextures) {
              for (var i = 0; i < GLImmediate.MAX_TEXTURES; i++) {
                if (GLImmediate.enabledClientAttributes[GLImmediate.TEXTURE0+i] && this.texCoordLocations[i] >= 0) {
                  GLctx.disableVertexAttribArray(this.texCoordLocations[i]);
                }
              }
            }
            if (this.hasColor) {
              GLctx.disableVertexAttribArray(this.colorLocation);
            }
            if (this.hasNormal) {
              GLctx.disableVertexAttribArray(this.normalLocation);
            }
            if (!GL.currProgram) {
              GLctx.useProgram(null);
              GLImmediate.fixedFunctionProgram = 0;
            }
            if (!GL.currArrayBuffer) {
              GLctx.bindBuffer(GLctx.ARRAY_BUFFER, null);
              GLImmediate.lastArrayBuffer = null;
            }
  
            GLImmediate.lastRenderer = null;
            GLImmediate.lastProgram = null;
            GLImmediate.matricesModified = true;
          }
        };
        ret.init();
        return ret;
      },setupFuncs:function () {
        // Replace some functions with immediate-mode aware versions. If there are no client
        // attributes enabled, and we use webgl-friendly modes (no GL_QUADS), then no need
        // for emulation
        _glDrawArrays = _emscripten_glDrawArrays = function _glDrawArrays(mode, first, count) {
          if (GLImmediate.totalEnabledClientAttributes == 0 && mode <= 6) {
            GLctx.drawArrays(mode, first, count);
            return;
          }
          GLImmediate.prepareClientAttributes(count, false);
          GLImmediate.mode = mode;
          if (!GL.currArrayBuffer) {
            GLImmediate.vertexData = HEAPF32.subarray((GLImmediate.vertexPointer)>>2,(GLImmediate.vertexPointer + (first+count)*GLImmediate.stride)>>2); // XXX assuming float
            GLImmediate.firstVertex = first;
            GLImmediate.lastVertex = first + count;
          }
          GLImmediate.flush(null, first);
          GLImmediate.mode = -1;
        };
        
  
        _glDrawElements = _emscripten_glDrawElements = function _glDrawElements(mode, count, type, indices, start, end) { // start, end are given if we come from glDrawRangeElements
          if (GLImmediate.totalEnabledClientAttributes == 0 && mode <= 6 && GL.currElementArrayBuffer) {
            GLctx.drawElements(mode, count, type, indices);
            return;
          }
          if (!GL.currElementArrayBuffer) {
            assert(type == GLctx.UNSIGNED_SHORT); // We can only emulate buffers of this kind, for now
          }
          console.log("DrawElements doesn't actually prepareClientAttributes properly.");
          GLImmediate.prepareClientAttributes(count, false);
          GLImmediate.mode = mode;
          if (!GL.currArrayBuffer) {
            GLImmediate.firstVertex = end ? start : TOTAL_MEMORY; // if we don't know the start, set an invalid value and we will calculate it later from the indices
            GLImmediate.lastVertex = end ? end+1 : 0;
            GLImmediate.vertexData = HEAPF32.subarray(GLImmediate.vertexPointer >> 2, end ? (GLImmediate.vertexPointer + (end+1)*GLImmediate.stride) >> 2 : undefined); // XXX assuming float
          }
          GLImmediate.flush(count, 0, indices);
          GLImmediate.mode = -1;
        };
        
  
        // TexEnv stuff needs to be prepared early, so do it here.
        // init() is too late for -O2, since it freezes the GL functions
        // by that point.
        GLImmediate.MapTreeLib = GLImmediate.spawnMapTreeLib();
        GLImmediate.spawnMapTreeLib = null;
  
        GLImmediate.TexEnvJIT = GLImmediate.spawnTexEnvJIT();
        GLImmediate.spawnTexEnvJIT = null;
  
        GLImmediate.setupHooks();
      },setupHooks:function () {
        if (!GLEmulation.hasRunInit) {
          GLEmulation.init();
        }
  
        var glActiveTexture = _glActiveTexture;
        _glActiveTexture = _emscripten_glActiveTexture = function _glActiveTexture(texture) {
          GLImmediate.TexEnvJIT.hook_activeTexture(texture);
          glActiveTexture(texture);
        };
        
  
        var glEnable = _glEnable;
        _glEnable = _emscripten_glEnable = function _glEnable(cap) {
          GLImmediate.TexEnvJIT.hook_enable(cap);
          glEnable(cap);
        };
        
  
        var glDisable = _glDisable;
        _glDisable = _emscripten_glDisable = function _glDisable(cap) {
          GLImmediate.TexEnvJIT.hook_disable(cap);
          glDisable(cap);
        };
        
  
        var glTexEnvf = (typeof(_glTexEnvf) != 'undefined') ? _glTexEnvf : function(){};
        _glTexEnvf = _emscripten_glTexEnvf = function _glTexEnvf(target, pname, param) {
          GLImmediate.TexEnvJIT.hook_texEnvf(target, pname, param);
          // Don't call old func, since we are the implementor.
          //glTexEnvf(target, pname, param);
        };
        
  
        var glTexEnvi = (typeof(_glTexEnvi) != 'undefined') ? _glTexEnvi : function(){};
        _glTexEnvi = _emscripten_glTexEnvi = function _glTexEnvi(target, pname, param) {
          GLImmediate.TexEnvJIT.hook_texEnvi(target, pname, param);
          // Don't call old func, since we are the implementor.
          //glTexEnvi(target, pname, param);
        };
        
  
        var glTexEnvfv = (typeof(_glTexEnvfv) != 'undefined') ? _glTexEnvfv : function(){};
        _glTexEnvfv = _emscripten_glTexEnvfv = function _glTexEnvfv(target, pname, param) {
          GLImmediate.TexEnvJIT.hook_texEnvfv(target, pname, param);
          // Don't call old func, since we are the implementor.
          //glTexEnvfv(target, pname, param);
        };
        
  
        _glGetTexEnviv = function _glGetTexEnviv(target, pname, param) {
          GLImmediate.TexEnvJIT.hook_getTexEnviv(target, pname, param);
        };
        
  
        _glGetTexEnvfv = function _glGetTexEnvfv(target, pname, param) {
          GLImmediate.TexEnvJIT.hook_getTexEnvfv(target, pname, param);
        };
        
  
        var glGetIntegerv = _glGetIntegerv;
        _glGetIntegerv = _emscripten_glGetIntegerv = function _glGetIntegerv(pname, params) {
          switch (pname) {
            case 0x8B8D: { // GL_CURRENT_PROGRAM
              // Just query directly so we're working with WebGL objects.
              var cur = GLctx.getParameter(GLctx.CURRENT_PROGRAM);
              if (cur == GLImmediate.fixedFunctionProgram) {
                // Pretend we're not using a program.
                HEAP32[((params)>>2)]=0;
                return;
              }
              break;
            }
          }
          glGetIntegerv(pname, params);
        };
        
      },initted:false,init:function () {
        Module.printErr('WARNING: using emscripten GL immediate mode emulation. This is very limited in what it supports');
        GLImmediate.initted = true;
  
        if (!Module.useWebGL) return; // a 2D canvas may be currently used TODO: make sure we are actually called in that case
  
        // User can override the maximum number of texture units that we emulate. Using fewer texture units increases runtime performance
        // slightly, so it is advantageous to choose as small value as needed.
        GLImmediate.MAX_TEXTURES = Module['GL_MAX_TEXTURE_IMAGE_UNITS'] || GLctx.getParameter(GLctx.MAX_TEXTURE_IMAGE_UNITS);
  
        GLImmediate.TexEnvJIT.init(GLctx, GLImmediate.MAX_TEXTURES);
  
        GLImmediate.NUM_ATTRIBUTES = 3 /*pos+normal+color attributes*/ + GLImmediate.MAX_TEXTURES;
        GLImmediate.clientAttributes = [];
        GLEmulation.enabledClientAttribIndices = [];
        for (var i = 0; i < GLImmediate.NUM_ATTRIBUTES; i++) {
          GLImmediate.clientAttributes.push({});
          GLEmulation.enabledClientAttribIndices.push(false);
        }
  
        // Initialize matrix library
        // When user sets a matrix, increment a 'version number' on the new data, and when rendering, submit
        // the matrices to the shader program only if they have an old version of the data.
        GLImmediate.matrix = [];
        GLImmediate.matrixStack = [];
        GLImmediate.matrixVersion = [];
        for (var i = 0; i < 2 + GLImmediate.MAX_TEXTURES; i++) { // Modelview, Projection, plus one matrix for each texture coordinate.
          GLImmediate.matrixStack.push([]);
          GLImmediate.matrixVersion.push(0);
          GLImmediate.matrix.push(GLImmediate.matrixLib.mat4.create());
          GLImmediate.matrixLib.mat4.identity(GLImmediate.matrix[i]);
        }
  
        // Renderer cache
        GLImmediate.rendererCache = GLImmediate.MapTreeLib.create();
  
        // Buffers for data
        GLImmediate.tempData = new Float32Array(GL.MAX_TEMP_BUFFER_SIZE >> 2);
        GLImmediate.indexData = new Uint16Array(GL.MAX_TEMP_BUFFER_SIZE >> 1);
  
        GLImmediate.vertexDataU8 = new Uint8Array(GLImmediate.tempData.buffer);
  
        GL.generateTempBuffers(true, GL.currentContext);
  
        GLImmediate.clientColor = new Float32Array([1, 1, 1, 1]);
      },prepareClientAttributes:function prepareClientAttributes(count, beginEnd) {
        // If no client attributes were modified since we were last called, do nothing. Note that this
        // does not work for glBegin/End, where we generate renderer components dynamically and then
        // disable them ourselves, but it does help with glDrawElements/Arrays.
        if (!GLImmediate.modifiedClientAttributes) {
          GLImmediate.vertexCounter = (GLImmediate.stride * count) / 4; // XXX assuming float
          return;
        }
        GLImmediate.modifiedClientAttributes = false;
  
        // The role of prepareClientAttributes is to examine the set of client-side vertex attribute buffers
        // that user code has submitted, and to prepare them to be uploaded to a VBO in GPU memory
        // (since WebGL does not support client-side rendering, i.e. rendering from vertex data in CPU memory)
        // User can submit vertex data generally in three different configurations:
        // 1. Fully planar: all attributes are in their own separate tightly-packed arrays in CPU memory.
        // 2. Fully interleaved: all attributes share a single array where data is interleaved something like (pos,uv,normal), (pos,uv,normal), ...
        // 3. Complex hybrid: Multiple separate arrays that either are sparsely strided, and/or partially interleave vertex attributes.
  
        // For simplicity, we support the case (2) as the fast case. For (1) and (3), we do a memory copy of the
        // vertex data here to prepare a relayouted buffer that is of the structure in case (2). The reason
        // for this is that it allows the emulation code to get away with using just one VBO buffer for rendering,
        // and not have to maintain multiple ones. Therefore cases (1) and (3) will be very slow, and case (2) is fast.
  
        // Detect which case we are in by using a quick heuristic by examining the strides of the buffers. If all the buffers have identical 
        // stride, we assume we have case (2), otherwise we have something more complex.
        var clientStartPointer = 0x7FFFFFFF;
        var bytes = 0; // Total number of bytes taken up by a single vertex.
        var minStride = 0x7FFFFFFF;
        var maxStride = 0;
        var attributes = GLImmediate.liveClientAttributes;
        attributes.length = 0;
        for (var i = 0; i < 3+GLImmediate.MAX_TEXTURES; i++) {
          if (GLImmediate.enabledClientAttributes[i]) {
            var attr = GLImmediate.clientAttributes[i];
            attributes.push(attr);
            clientStartPointer = Math.min(clientStartPointer, attr.pointer);
            attr.sizeBytes = attr.size * GL.byteSizeByType[attr.type - GL.byteSizeByTypeRoot];
            bytes += attr.sizeBytes;
            minStride = Math.min(minStride, attr.stride);
            maxStride = Math.max(maxStride, attr.stride);
          }
        }
  
        if ((minStride != maxStride || maxStride < bytes) && !beginEnd) {
          // We are in cases (1) or (3): slow path, shuffle the data around into a single interleaved vertex buffer.
          // The immediate-mode glBegin()/glEnd() vertex submission gets automatically generated in appropriate layout,
          // so never need to come down this path if that was used.
          if (!GLImmediate.restrideBuffer) GLImmediate.restrideBuffer = _malloc(GL.MAX_TEMP_BUFFER_SIZE);
          var start = GLImmediate.restrideBuffer;
          bytes = 0;
          // calculate restrided offsets and total size
          for (var i = 0; i < attributes.length; i++) {
            var attr = attributes[i];
            var size = attr.sizeBytes;
            if (size % 4 != 0) size += 4 - (size % 4); // align everything
            attr.offset = bytes;
            bytes += size;
          }
          // copy out the data (we need to know the stride for that, and define attr.pointer)
          for (var i = 0; i < attributes.length; i++) {
            var attr = attributes[i];
            var srcStride = Math.max(attr.sizeBytes, attr.stride);
            if ((srcStride & 3) == 0 && (attr.sizeBytes & 3) == 0) {
              var size4 = attr.sizeBytes>>2;
              var srcStride4 = Math.max(attr.sizeBytes, attr.stride)>>2;
              for (var j = 0; j < count; j++) {
                for (var k = 0; k < size4; k++) { // copy in chunks of 4 bytes, our alignment makes this possible
                  HEAP32[((start + attr.offset + bytes*j)>>2) + k] = HEAP32[(attr.pointer>>2) + j*srcStride4 + k];
                }
              }
            } else {
              for (var j = 0; j < count; j++) {
                for (var k = 0; k < attr.sizeBytes; k++) { // source data was not aligned to multiples of 4, must copy byte by byte.
                  HEAP8[start + attr.offset + bytes*j + k] = HEAP8[attr.pointer + j*srcStride + k];
                }
              }
            }
            attr.pointer = start + attr.offset;
          }
          GLImmediate.stride = bytes;
          GLImmediate.vertexPointer = start;
        } else {
          // case (2): fast path, all data is interleaved to a single vertex array so we can get away with a single VBO upload.
          if (GL.currArrayBuffer) {
            GLImmediate.vertexPointer = 0;
          } else {
            GLImmediate.vertexPointer = clientStartPointer;
          }
          for (var i = 0; i < attributes.length; i++) {
            var attr = attributes[i];
            attr.offset = attr.pointer - GLImmediate.vertexPointer; // Compute what will be the offset of this attribute in the VBO after we upload.
          }
          GLImmediate.stride = Math.max(maxStride, bytes);
        }
        if (!beginEnd) {
          GLImmediate.vertexCounter = (GLImmediate.stride * count) / 4; // XXX assuming float
        }
      },flush:function flush(numProvidedIndexes, startIndex, ptr) {
        assert(numProvidedIndexes >= 0 || !numProvidedIndexes);
        startIndex = startIndex || 0;
        ptr = ptr || 0;
  
        var renderer = GLImmediate.getRenderer();
  
        // Generate index data in a format suitable for GLES 2.0/WebGL
        var numVertexes = 4 * GLImmediate.vertexCounter / GLImmediate.stride;
        if (!numVertexes) return;
        assert(numVertexes % 1 == 0, "`numVertexes` must be an integer.");
        var emulatedElementArrayBuffer = false;
        var numIndexes = 0;
        if (numProvidedIndexes) {
          numIndexes = numProvidedIndexes;
          if (!GL.currArrayBuffer && GLImmediate.firstVertex > GLImmediate.lastVertex) {
            // Figure out the first and last vertex from the index data
            assert(!GL.currElementArrayBuffer); // If we are going to upload array buffer data, we need to find which range to
                                                // upload based on the indices. If they are in a buffer on the GPU, that is very
                                                // inconvenient! So if you do not have an array buffer, you should also not have
                                                // an element array buffer. But best is to use both buffers!
            for (var i = 0; i < numProvidedIndexes; i++) {
              var currIndex = HEAPU16[(((ptr)+(i*2))>>1)];
              GLImmediate.firstVertex = Math.min(GLImmediate.firstVertex, currIndex);
              GLImmediate.lastVertex = Math.max(GLImmediate.lastVertex, currIndex+1);
            }
          }
          if (!GL.currElementArrayBuffer) {
            // If no element array buffer is bound, then indices is a literal pointer to clientside data
            assert(numProvidedIndexes << 1 <= GL.MAX_TEMP_BUFFER_SIZE, 'too many immediate mode indexes (a)');
            var indexBuffer = GL.getTempIndexBuffer(numProvidedIndexes << 1);
            GLctx.bindBuffer(GLctx.ELEMENT_ARRAY_BUFFER, indexBuffer);
            GLctx.bufferSubData(GLctx.ELEMENT_ARRAY_BUFFER, 0, HEAPU16.subarray((ptr)>>1,(ptr + (numProvidedIndexes << 1))>>1));
            ptr = 0;
            emulatedElementArrayBuffer = true;
          }
        } else if (GLImmediate.mode > 6) { // above GL_TRIANGLE_FAN are the non-GL ES modes
          if (GLImmediate.mode != 7) throw 'unsupported immediate mode ' + GLImmediate.mode; // GL_QUADS
          // GLImmediate.firstVertex is the first vertex we want. Quad indexes are in the pattern
          // 0 1 2, 0 2 3, 4 5 6, 4 6 7, so we need to look at index firstVertex * 1.5 to see it.
          // Then since indexes are 2 bytes each, that means 3
          assert(GLImmediate.firstVertex % 4 == 0);
          ptr = GLImmediate.firstVertex*3;
          var numQuads = numVertexes / 4;
          numIndexes = numQuads * 6; // 0 1 2, 0 2 3 pattern
          assert(ptr + (numIndexes << 1) <= GL.MAX_TEMP_BUFFER_SIZE, 'too many immediate mode indexes (b)');
          GLctx.bindBuffer(GLctx.ELEMENT_ARRAY_BUFFER, GL.currentContext.tempQuadIndexBuffer);
          emulatedElementArrayBuffer = true;
        }
  
        renderer.prepare();
  
        if (numIndexes) {
          GLctx.drawElements(GLctx.TRIANGLES, numIndexes, GLctx.UNSIGNED_SHORT, ptr);
        } else {
          GLctx.drawArrays(GLImmediate.mode, startIndex, numVertexes);
        }
  
        if (emulatedElementArrayBuffer) {
          GLctx.bindBuffer(GLctx.ELEMENT_ARRAY_BUFFER, GL.buffers[GL.currElementArrayBuffer] || null);
        }
  
      }};
  GLImmediate.matrixLib = (function() {
  
  /**
   * @fileoverview gl-matrix - High performance matrix and vector operations for WebGL
   * @author Brandon Jones
   * @version 1.2.4
   */
  
  // Modifed for emscripten: Global scoping etc.
  
  /*
   * Copyright (c) 2011 Brandon Jones
   *
   * This software is provided 'as-is', without any express or implied
   * warranty. In no event will the authors be held liable for any damages
   * arising from the use of this software.
   *
   * Permission is granted to anyone to use this software for any purpose,
   * including commercial applications, and to alter it and redistribute it
   * freely, subject to the following restrictions:
   *
   *    1. The origin of this software must not be misrepresented; you must not
   *    claim that you wrote the original software. If you use this software
   *    in a product, an acknowledgment in the product documentation would be
   *    appreciated but is not required.
   *
   *    2. Altered source versions must be plainly marked as such, and must not
   *    be misrepresented as being the original software.
   *
   *    3. This notice may not be removed or altered from any source
   *    distribution.
   */
  
  
  /**
   * @class 3 Dimensional Vector
   * @name vec3
   */
  var vec3 = {};
  
  /**
   * @class 3x3 Matrix
   * @name mat3
   */
  var mat3 = {};
  
  /**
   * @class 4x4 Matrix
   * @name mat4
   */
  var mat4 = {};
  
  /**
   * @class Quaternion
   * @name quat4
   */
  var quat4 = {};
  
  var MatrixArray = Float32Array;
  
  /*
   * vec3
   */
   
  /**
   * Creates a new instance of a vec3 using the default array type
   * Any javascript array-like objects containing at least 3 numeric elements can serve as a vec3
   *
   * @param {vec3} [vec] vec3 containing values to initialize with
   *
   * @returns {vec3} New vec3
   */
  vec3.create = function (vec) {
      var dest = new MatrixArray(3);
  
      if (vec) {
          dest[0] = vec[0];
          dest[1] = vec[1];
          dest[2] = vec[2];
      } else {
          dest[0] = dest[1] = dest[2] = 0;
      }
  
      return dest;
  };
  
  /**
   * Copies the values of one vec3 to another
   *
   * @param {vec3} vec vec3 containing values to copy
   * @param {vec3} dest vec3 receiving copied values
   *
   * @returns {vec3} dest
   */
  vec3.set = function (vec, dest) {
      dest[0] = vec[0];
      dest[1] = vec[1];
      dest[2] = vec[2];
  
      return dest;
  };
  
  /**
   * Performs a vector addition
   *
   * @param {vec3} vec First operand
   * @param {vec3} vec2 Second operand
   * @param {vec3} [dest] vec3 receiving operation result. If not specified result is written to vec
   *
   * @returns {vec3} dest if specified, vec otherwise
   */
  vec3.add = function (vec, vec2, dest) {
      if (!dest || vec === dest) {
          vec[0] += vec2[0];
          vec[1] += vec2[1];
          vec[2] += vec2[2];
          return vec;
      }
  
      dest[0] = vec[0] + vec2[0];
      dest[1] = vec[1] + vec2[1];
      dest[2] = vec[2] + vec2[2];
      return dest;
  };
  
  /**
   * Performs a vector subtraction
   *
   * @param {vec3} vec First operand
   * @param {vec3} vec2 Second operand
   * @param {vec3} [dest] vec3 receiving operation result. If not specified result is written to vec
   *
   * @returns {vec3} dest if specified, vec otherwise
   */
  vec3.subtract = function (vec, vec2, dest) {
      if (!dest || vec === dest) {
          vec[0] -= vec2[0];
          vec[1] -= vec2[1];
          vec[2] -= vec2[2];
          return vec;
      }
  
      dest[0] = vec[0] - vec2[0];
      dest[1] = vec[1] - vec2[1];
      dest[2] = vec[2] - vec2[2];
      return dest;
  };
  
  /**
   * Performs a vector multiplication
   *
   * @param {vec3} vec First operand
   * @param {vec3} vec2 Second operand
   * @param {vec3} [dest] vec3 receiving operation result. If not specified result is written to vec
   *
   * @returns {vec3} dest if specified, vec otherwise
   */
  vec3.multiply = function (vec, vec2, dest) {
      if (!dest || vec === dest) {
          vec[0] *= vec2[0];
          vec[1] *= vec2[1];
          vec[2] *= vec2[2];
          return vec;
      }
  
      dest[0] = vec[0] * vec2[0];
      dest[1] = vec[1] * vec2[1];
      dest[2] = vec[2] * vec2[2];
      return dest;
  };
  
  /**
   * Negates the components of a vec3
   *
   * @param {vec3} vec vec3 to negate
   * @param {vec3} [dest] vec3 receiving operation result. If not specified result is written to vec
   *
   * @returns {vec3} dest if specified, vec otherwise
   */
  vec3.negate = function (vec, dest) {
      if (!dest) { dest = vec; }
  
      dest[0] = -vec[0];
      dest[1] = -vec[1];
      dest[2] = -vec[2];
      return dest;
  };
  
  /**
   * Multiplies the components of a vec3 by a scalar value
   *
   * @param {vec3} vec vec3 to scale
   * @param {number} val Value to scale by
   * @param {vec3} [dest] vec3 receiving operation result. If not specified result is written to vec
   *
   * @returns {vec3} dest if specified, vec otherwise
   */
  vec3.scale = function (vec, val, dest) {
      if (!dest || vec === dest) {
          vec[0] *= val;
          vec[1] *= val;
          vec[2] *= val;
          return vec;
      }
  
      dest[0] = vec[0] * val;
      dest[1] = vec[1] * val;
      dest[2] = vec[2] * val;
      return dest;
  };
  
  /**
   * Generates a unit vector of the same direction as the provided vec3
   * If vector length is 0, returns [0, 0, 0]
   *
   * @param {vec3} vec vec3 to normalize
   * @param {vec3} [dest] vec3 receiving operation result. If not specified result is written to vec
   *
   * @returns {vec3} dest if specified, vec otherwise
   */
  vec3.normalize = function (vec, dest) {
      if (!dest) { dest = vec; }
  
      var x = vec[0], y = vec[1], z = vec[2],
          len = Math.sqrt(x * x + y * y + z * z);
  
      if (!len) {
          dest[0] = 0;
          dest[1] = 0;
          dest[2] = 0;
          return dest;
      } else if (len === 1) {
          dest[0] = x;
          dest[1] = y;
          dest[2] = z;
          return dest;
      }
  
      len = 1 / len;
      dest[0] = x * len;
      dest[1] = y * len;
      dest[2] = z * len;
      return dest;
  };
  
  /**
   * Generates the cross product of two vec3s
   *
   * @param {vec3} vec First operand
   * @param {vec3} vec2 Second operand
   * @param {vec3} [dest] vec3 receiving operation result. If not specified result is written to vec
   *
   * @returns {vec3} dest if specified, vec otherwise
   */
  vec3.cross = function (vec, vec2, dest) {
      if (!dest) { dest = vec; }
  
      var x = vec[0], y = vec[1], z = vec[2],
          x2 = vec2[0], y2 = vec2[1], z2 = vec2[2];
  
      dest[0] = y * z2 - z * y2;
      dest[1] = z * x2 - x * z2;
      dest[2] = x * y2 - y * x2;
      return dest;
  };
  
  /**
   * Caclulates the length of a vec3
   *
   * @param {vec3} vec vec3 to calculate length of
   *
   * @returns {number} Length of vec
   */
  vec3.length = function (vec) {
      var x = vec[0], y = vec[1], z = vec[2];
      return Math.sqrt(x * x + y * y + z * z);
  };
  
  /**
   * Caclulates the dot product of two vec3s
   *
   * @param {vec3} vec First operand
   * @param {vec3} vec2 Second operand
   *
   * @returns {number} Dot product of vec and vec2
   */
  vec3.dot = function (vec, vec2) {
      return vec[0] * vec2[0] + vec[1] * vec2[1] + vec[2] * vec2[2];
  };
  
  /**
   * Generates a unit vector pointing from one vector to another
   *
   * @param {vec3} vec Origin vec3
   * @param {vec3} vec2 vec3 to point to
   * @param {vec3} [dest] vec3 receiving operation result. If not specified result is written to vec
   *
   * @returns {vec3} dest if specified, vec otherwise
   */
  vec3.direction = function (vec, vec2, dest) {
      if (!dest) { dest = vec; }
  
      var x = vec[0] - vec2[0],
          y = vec[1] - vec2[1],
          z = vec[2] - vec2[2],
          len = Math.sqrt(x * x + y * y + z * z);
  
      if (!len) {
          dest[0] = 0;
          dest[1] = 0;
          dest[2] = 0;
          return dest;
      }
  
      len = 1 / len;
      dest[0] = x * len;
      dest[1] = y * len;
      dest[2] = z * len;
      return dest;
  };
  
  /**
   * Performs a linear interpolation between two vec3
   *
   * @param {vec3} vec First vector
   * @param {vec3} vec2 Second vector
   * @param {number} lerp Interpolation amount between the two inputs
   * @param {vec3} [dest] vec3 receiving operation result. If not specified result is written to vec
   *
   * @returns {vec3} dest if specified, vec otherwise
   */
  vec3.lerp = function (vec, vec2, lerp, dest) {
      if (!dest) { dest = vec; }
  
      dest[0] = vec[0] + lerp * (vec2[0] - vec[0]);
      dest[1] = vec[1] + lerp * (vec2[1] - vec[1]);
      dest[2] = vec[2] + lerp * (vec2[2] - vec[2]);
  
      return dest;
  };
  
  /**
   * Calculates the euclidian distance between two vec3
   *
   * Params:
   * @param {vec3} vec First vector
   * @param {vec3} vec2 Second vector
   *
   * @returns {number} Distance between vec and vec2
   */
  vec3.dist = function (vec, vec2) {
      var x = vec2[0] - vec[0],
          y = vec2[1] - vec[1],
          z = vec2[2] - vec[2];
          
      return Math.sqrt(x*x + y*y + z*z);
  };
  
  /**
   * Projects the specified vec3 from screen space into object space
   * Based on the <a href="http://webcvs.freedesktop.org/mesa/Mesa/src/glu/mesa/project.c?revision=1.4&view=markup">Mesa gluUnProject implementation</a>
   *
   * @param {vec3} vec Screen-space vector to project
   * @param {mat4} view View matrix
   * @param {mat4} proj Projection matrix
   * @param {vec4} viewport Viewport as given to gl.viewport [x, y, width, height]
   * @param {vec3} [dest] vec3 receiving unprojected result. If not specified result is written to vec
   *
   * @returns {vec3} dest if specified, vec otherwise
   */
  vec3.unproject = function (vec, view, proj, viewport, dest) {
      if (!dest) { dest = vec; }
  
      var m = mat4.create();
      var v = new MatrixArray(4);
      
      v[0] = (vec[0] - viewport[0]) * 2.0 / viewport[2] - 1.0;
      v[1] = (vec[1] - viewport[1]) * 2.0 / viewport[3] - 1.0;
      v[2] = 2.0 * vec[2] - 1.0;
      v[3] = 1.0;
      
      mat4.multiply(proj, view, m);
      if(!mat4.inverse(m)) { return null; }
      
      mat4.multiplyVec4(m, v);
      if(v[3] === 0.0) { return null; }
  
      dest[0] = v[0] / v[3];
      dest[1] = v[1] / v[3];
      dest[2] = v[2] / v[3];
      
      return dest;
  };
  
  /**
   * Returns a string representation of a vector
   *
   * @param {vec3} vec Vector to represent as a string
   *
   * @returns {string} String representation of vec
   */
  vec3.str = function (vec) {
      return '[' + vec[0] + ', ' + vec[1] + ', ' + vec[2] + ']';
  };
  
  /*
   * mat3
   */
  
  /**
   * Creates a new instance of a mat3 using the default array type
   * Any javascript array-like object containing at least 9 numeric elements can serve as a mat3
   *
   * @param {mat3} [mat] mat3 containing values to initialize with
   *
   * @returns {mat3} New mat3
   */
  mat3.create = function (mat) {
      var dest = new MatrixArray(9);
  
      if (mat) {
          dest[0] = mat[0];
          dest[1] = mat[1];
          dest[2] = mat[2];
          dest[3] = mat[3];
          dest[4] = mat[4];
          dest[5] = mat[5];
          dest[6] = mat[6];
          dest[7] = mat[7];
          dest[8] = mat[8];
      }
  
      return dest;
  };
  
  /**
   * Copies the values of one mat3 to another
   *
   * @param {mat3} mat mat3 containing values to copy
   * @param {mat3} dest mat3 receiving copied values
   *
   * @returns {mat3} dest
   */
  mat3.set = function (mat, dest) {
      dest[0] = mat[0];
      dest[1] = mat[1];
      dest[2] = mat[2];
      dest[3] = mat[3];
      dest[4] = mat[4];
      dest[5] = mat[5];
      dest[6] = mat[6];
      dest[7] = mat[7];
      dest[8] = mat[8];
      return dest;
  };
  
  /**
   * Sets a mat3 to an identity matrix
   *
   * @param {mat3} dest mat3 to set
   *
   * @returns dest if specified, otherwise a new mat3
   */
  mat3.identity = function (dest) {
      if (!dest) { dest = mat3.create(); }
      dest[0] = 1;
      dest[1] = 0;
      dest[2] = 0;
      dest[3] = 0;
      dest[4] = 1;
      dest[5] = 0;
      dest[6] = 0;
      dest[7] = 0;
      dest[8] = 1;
      return dest;
  };
  
  /**
   * Transposes a mat3 (flips the values over the diagonal)
   *
   * Params:
   * @param {mat3} mat mat3 to transpose
   * @param {mat3} [dest] mat3 receiving transposed values. If not specified result is written to mat
   *
   * @returns {mat3} dest is specified, mat otherwise
   */
  mat3.transpose = function (mat, dest) {
      // If we are transposing ourselves we can skip a few steps but have to cache some values
      if (!dest || mat === dest) {
          var a01 = mat[1], a02 = mat[2],
              a12 = mat[5];
  
          mat[1] = mat[3];
          mat[2] = mat[6];
          mat[3] = a01;
          mat[5] = mat[7];
          mat[6] = a02;
          mat[7] = a12;
          return mat;
      }
  
      dest[0] = mat[0];
      dest[1] = mat[3];
      dest[2] = mat[6];
      dest[3] = mat[1];
      dest[4] = mat[4];
      dest[5] = mat[7];
      dest[6] = mat[2];
      dest[7] = mat[5];
      dest[8] = mat[8];
      return dest;
  };
  
  /**
   * Copies the elements of a mat3 into the upper 3x3 elements of a mat4
   *
   * @param {mat3} mat mat3 containing values to copy
   * @param {mat4} [dest] mat4 receiving copied values
   *
   * @returns {mat4} dest if specified, a new mat4 otherwise
   */
  mat3.toMat4 = function (mat, dest) {
      if (!dest) { dest = mat4.create(); }
  
      dest[15] = 1;
      dest[14] = 0;
      dest[13] = 0;
      dest[12] = 0;
  
      dest[11] = 0;
      dest[10] = mat[8];
      dest[9] = mat[7];
      dest[8] = mat[6];
  
      dest[7] = 0;
      dest[6] = mat[5];
      dest[5] = mat[4];
      dest[4] = mat[3];
  
      dest[3] = 0;
      dest[2] = mat[2];
      dest[1] = mat[1];
      dest[0] = mat[0];
  
      return dest;
  };
  
  /**
   * Returns a string representation of a mat3
   *
   * @param {mat3} mat mat3 to represent as a string
   *
   * @param {string} String representation of mat
   */
  mat3.str = function (mat) {
      return '[' + mat[0] + ', ' + mat[1] + ', ' + mat[2] +
          ', ' + mat[3] + ', ' + mat[4] + ', ' + mat[5] +
          ', ' + mat[6] + ', ' + mat[7] + ', ' + mat[8] + ']';
  };
  
  /*
   * mat4
   */
  
  /**
   * Creates a new instance of a mat4 using the default array type
   * Any javascript array-like object containing at least 16 numeric elements can serve as a mat4
   *
   * @param {mat4} [mat] mat4 containing values to initialize with
   *
   * @returns {mat4} New mat4
   */
  mat4.create = function (mat) {
      var dest = new MatrixArray(16);
  
      if (mat) {
          dest[0] = mat[0];
          dest[1] = mat[1];
          dest[2] = mat[2];
          dest[3] = mat[3];
          dest[4] = mat[4];
          dest[5] = mat[5];
          dest[6] = mat[6];
          dest[7] = mat[7];
          dest[8] = mat[8];
          dest[9] = mat[9];
          dest[10] = mat[10];
          dest[11] = mat[11];
          dest[12] = mat[12];
          dest[13] = mat[13];
          dest[14] = mat[14];
          dest[15] = mat[15];
      }
  
      return dest;
  };
  
  /**
   * Copies the values of one mat4 to another
   *
   * @param {mat4} mat mat4 containing values to copy
   * @param {mat4} dest mat4 receiving copied values
   *
   * @returns {mat4} dest
   */
  mat4.set = function (mat, dest) {
      dest[0] = mat[0];
      dest[1] = mat[1];
      dest[2] = mat[2];
      dest[3] = mat[3];
      dest[4] = mat[4];
      dest[5] = mat[5];
      dest[6] = mat[6];
      dest[7] = mat[7];
      dest[8] = mat[8];
      dest[9] = mat[9];
      dest[10] = mat[10];
      dest[11] = mat[11];
      dest[12] = mat[12];
      dest[13] = mat[13];
      dest[14] = mat[14];
      dest[15] = mat[15];
      return dest;
  };
  
  /**
   * Sets a mat4 to an identity matrix
   *
   * @param {mat4} dest mat4 to set
   *
   * @returns {mat4} dest
   */
  mat4.identity = function (dest) {
      if (!dest) { dest = mat4.create(); }
      dest[0] = 1;
      dest[1] = 0;
      dest[2] = 0;
      dest[3] = 0;
      dest[4] = 0;
      dest[5] = 1;
      dest[6] = 0;
      dest[7] = 0;
      dest[8] = 0;
      dest[9] = 0;
      dest[10] = 1;
      dest[11] = 0;
      dest[12] = 0;
      dest[13] = 0;
      dest[14] = 0;
      dest[15] = 1;
      return dest;
  };
  
  /**
   * Transposes a mat4 (flips the values over the diagonal)
   *
   * @param {mat4} mat mat4 to transpose
   * @param {mat4} [dest] mat4 receiving transposed values. If not specified result is written to mat
   *
   * @param {mat4} dest is specified, mat otherwise
   */
  mat4.transpose = function (mat, dest) {
      // If we are transposing ourselves we can skip a few steps but have to cache some values
      if (!dest || mat === dest) {
          var a01 = mat[1], a02 = mat[2], a03 = mat[3],
              a12 = mat[6], a13 = mat[7],
              a23 = mat[11];
  
          mat[1] = mat[4];
          mat[2] = mat[8];
          mat[3] = mat[12];
          mat[4] = a01;
          mat[6] = mat[9];
          mat[7] = mat[13];
          mat[8] = a02;
          mat[9] = a12;
          mat[11] = mat[14];
          mat[12] = a03;
          mat[13] = a13;
          mat[14] = a23;
          return mat;
      }
  
      dest[0] = mat[0];
      dest[1] = mat[4];
      dest[2] = mat[8];
      dest[3] = mat[12];
      dest[4] = mat[1];
      dest[5] = mat[5];
      dest[6] = mat[9];
      dest[7] = mat[13];
      dest[8] = mat[2];
      dest[9] = mat[6];
      dest[10] = mat[10];
      dest[11] = mat[14];
      dest[12] = mat[3];
      dest[13] = mat[7];
      dest[14] = mat[11];
      dest[15] = mat[15];
      return dest;
  };
  
  /**
   * Calculates the determinant of a mat4
   *
   * @param {mat4} mat mat4 to calculate determinant of
   *
   * @returns {number} determinant of mat
   */
  mat4.determinant = function (mat) {
      // Cache the matrix values (makes for huge speed increases!)
      var a00 = mat[0], a01 = mat[1], a02 = mat[2], a03 = mat[3],
          a10 = mat[4], a11 = mat[5], a12 = mat[6], a13 = mat[7],
          a20 = mat[8], a21 = mat[9], a22 = mat[10], a23 = mat[11],
          a30 = mat[12], a31 = mat[13], a32 = mat[14], a33 = mat[15];
  
      return (a30 * a21 * a12 * a03 - a20 * a31 * a12 * a03 - a30 * a11 * a22 * a03 + a10 * a31 * a22 * a03 +
              a20 * a11 * a32 * a03 - a10 * a21 * a32 * a03 - a30 * a21 * a02 * a13 + a20 * a31 * a02 * a13 +
              a30 * a01 * a22 * a13 - a00 * a31 * a22 * a13 - a20 * a01 * a32 * a13 + a00 * a21 * a32 * a13 +
              a30 * a11 * a02 * a23 - a10 * a31 * a02 * a23 - a30 * a01 * a12 * a23 + a00 * a31 * a12 * a23 +
              a10 * a01 * a32 * a23 - a00 * a11 * a32 * a23 - a20 * a11 * a02 * a33 + a10 * a21 * a02 * a33 +
              a20 * a01 * a12 * a33 - a00 * a21 * a12 * a33 - a10 * a01 * a22 * a33 + a00 * a11 * a22 * a33);
  };
  
  /**
   * Calculates the inverse matrix of a mat4
   *
   * @param {mat4} mat mat4 to calculate inverse of
   * @param {mat4} [dest] mat4 receiving inverse matrix. If not specified result is written to mat
   *
   * @param {mat4} dest is specified, mat otherwise, null if matrix cannot be inverted
   */
  mat4.inverse = function (mat, dest) {
      if (!dest) { dest = mat; }
  
      // Cache the matrix values (makes for huge speed increases!)
      var a00 = mat[0], a01 = mat[1], a02 = mat[2], a03 = mat[3],
          a10 = mat[4], a11 = mat[5], a12 = mat[6], a13 = mat[7],
          a20 = mat[8], a21 = mat[9], a22 = mat[10], a23 = mat[11],
          a30 = mat[12], a31 = mat[13], a32 = mat[14], a33 = mat[15],
  
          b00 = a00 * a11 - a01 * a10,
          b01 = a00 * a12 - a02 * a10,
          b02 = a00 * a13 - a03 * a10,
          b03 = a01 * a12 - a02 * a11,
          b04 = a01 * a13 - a03 * a11,
          b05 = a02 * a13 - a03 * a12,
          b06 = a20 * a31 - a21 * a30,
          b07 = a20 * a32 - a22 * a30,
          b08 = a20 * a33 - a23 * a30,
          b09 = a21 * a32 - a22 * a31,
          b10 = a21 * a33 - a23 * a31,
          b11 = a22 * a33 - a23 * a32,
  
          d = (b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06),
          invDet;
  
          // Calculate the determinant
          if (!d) { return null; }
          invDet = 1 / d;
  
      dest[0] = (a11 * b11 - a12 * b10 + a13 * b09) * invDet;
      dest[1] = (-a01 * b11 + a02 * b10 - a03 * b09) * invDet;
      dest[2] = (a31 * b05 - a32 * b04 + a33 * b03) * invDet;
      dest[3] = (-a21 * b05 + a22 * b04 - a23 * b03) * invDet;
      dest[4] = (-a10 * b11 + a12 * b08 - a13 * b07) * invDet;
      dest[5] = (a00 * b11 - a02 * b08 + a03 * b07) * invDet;
      dest[6] = (-a30 * b05 + a32 * b02 - a33 * b01) * invDet;
      dest[7] = (a20 * b05 - a22 * b02 + a23 * b01) * invDet;
      dest[8] = (a10 * b10 - a11 * b08 + a13 * b06) * invDet;
      dest[9] = (-a00 * b10 + a01 * b08 - a03 * b06) * invDet;
      dest[10] = (a30 * b04 - a31 * b02 + a33 * b00) * invDet;
      dest[11] = (-a20 * b04 + a21 * b02 - a23 * b00) * invDet;
      dest[12] = (-a10 * b09 + a11 * b07 - a12 * b06) * invDet;
      dest[13] = (a00 * b09 - a01 * b07 + a02 * b06) * invDet;
      dest[14] = (-a30 * b03 + a31 * b01 - a32 * b00) * invDet;
      dest[15] = (a20 * b03 - a21 * b01 + a22 * b00) * invDet;
  
      return dest;
  };
  
  /**
   * Copies the upper 3x3 elements of a mat4 into another mat4
   *
   * @param {mat4} mat mat4 containing values to copy
   * @param {mat4} [dest] mat4 receiving copied values
   *
   * @returns {mat4} dest is specified, a new mat4 otherwise
   */
  mat4.toRotationMat = function (mat, dest) {
      if (!dest) { dest = mat4.create(); }
  
      dest[0] = mat[0];
      dest[1] = mat[1];
      dest[2] = mat[2];
      dest[3] = mat[3];
      dest[4] = mat[4];
      dest[5] = mat[5];
      dest[6] = mat[6];
      dest[7] = mat[7];
      dest[8] = mat[8];
      dest[9] = mat[9];
      dest[10] = mat[10];
      dest[11] = mat[11];
      dest[12] = 0;
      dest[13] = 0;
      dest[14] = 0;
      dest[15] = 1;
  
      return dest;
  };
  
  /**
   * Copies the upper 3x3 elements of a mat4 into a mat3
   *
   * @param {mat4} mat mat4 containing values to copy
   * @param {mat3} [dest] mat3 receiving copied values
   *
   * @returns {mat3} dest is specified, a new mat3 otherwise
   */
  mat4.toMat3 = function (mat, dest) {
      if (!dest) { dest = mat3.create(); }
  
      dest[0] = mat[0];
      dest[1] = mat[1];
      dest[2] = mat[2];
      dest[3] = mat[4];
      dest[4] = mat[5];
      dest[5] = mat[6];
      dest[6] = mat[8];
      dest[7] = mat[9];
      dest[8] = mat[10];
  
      return dest;
  };
  
  /**
   * Calculates the inverse of the upper 3x3 elements of a mat4 and copies the result into a mat3
   * The resulting matrix is useful for calculating transformed normals
   *
   * Params:
   * @param {mat4} mat mat4 containing values to invert and copy
   * @param {mat3} [dest] mat3 receiving values
   *
   * @returns {mat3} dest is specified, a new mat3 otherwise, null if the matrix cannot be inverted
   */
  mat4.toInverseMat3 = function (mat, dest) {
      // Cache the matrix values (makes for huge speed increases!)
      var a00 = mat[0], a01 = mat[1], a02 = mat[2],
          a10 = mat[4], a11 = mat[5], a12 = mat[6],
          a20 = mat[8], a21 = mat[9], a22 = mat[10],
  
          b01 = a22 * a11 - a12 * a21,
          b11 = -a22 * a10 + a12 * a20,
          b21 = a21 * a10 - a11 * a20,
  
          d = a00 * b01 + a01 * b11 + a02 * b21,
          id;
  
      if (!d) { return null; }
      id = 1 / d;
  
      if (!dest) { dest = mat3.create(); }
  
      dest[0] = b01 * id;
      dest[1] = (-a22 * a01 + a02 * a21) * id;
      dest[2] = (a12 * a01 - a02 * a11) * id;
      dest[3] = b11 * id;
      dest[4] = (a22 * a00 - a02 * a20) * id;
      dest[5] = (-a12 * a00 + a02 * a10) * id;
      dest[6] = b21 * id;
      dest[7] = (-a21 * a00 + a01 * a20) * id;
      dest[8] = (a11 * a00 - a01 * a10) * id;
  
      return dest;
  };
  
  /**
   * Performs a matrix multiplication
   *
   * @param {mat4} mat First operand
   * @param {mat4} mat2 Second operand
   * @param {mat4} [dest] mat4 receiving operation result. If not specified result is written to mat
   *
   * @returns {mat4} dest if specified, mat otherwise
   */
  mat4.multiply = function (mat, mat2, dest) {
      if (!dest) { dest = mat; }
  
      // Cache the matrix values (makes for huge speed increases!)
      var a00 = mat[0], a01 = mat[1], a02 = mat[2], a03 = mat[3],
          a10 = mat[4], a11 = mat[5], a12 = mat[6], a13 = mat[7],
          a20 = mat[8], a21 = mat[9], a22 = mat[10], a23 = mat[11],
          a30 = mat[12], a31 = mat[13], a32 = mat[14], a33 = mat[15],
  
          b00 = mat2[0], b01 = mat2[1], b02 = mat2[2], b03 = mat2[3],
          b10 = mat2[4], b11 = mat2[5], b12 = mat2[6], b13 = mat2[7],
          b20 = mat2[8], b21 = mat2[9], b22 = mat2[10], b23 = mat2[11],
          b30 = mat2[12], b31 = mat2[13], b32 = mat2[14], b33 = mat2[15];
  
      dest[0] = b00 * a00 + b01 * a10 + b02 * a20 + b03 * a30;
      dest[1] = b00 * a01 + b01 * a11 + b02 * a21 + b03 * a31;
      dest[2] = b00 * a02 + b01 * a12 + b02 * a22 + b03 * a32;
      dest[3] = b00 * a03 + b01 * a13 + b02 * a23 + b03 * a33;
      dest[4] = b10 * a00 + b11 * a10 + b12 * a20 + b13 * a30;
      dest[5] = b10 * a01 + b11 * a11 + b12 * a21 + b13 * a31;
      dest[6] = b10 * a02 + b11 * a12 + b12 * a22 + b13 * a32;
      dest[7] = b10 * a03 + b11 * a13 + b12 * a23 + b13 * a33;
      dest[8] = b20 * a00 + b21 * a10 + b22 * a20 + b23 * a30;
      dest[9] = b20 * a01 + b21 * a11 + b22 * a21 + b23 * a31;
      dest[10] = b20 * a02 + b21 * a12 + b22 * a22 + b23 * a32;
      dest[11] = b20 * a03 + b21 * a13 + b22 * a23 + b23 * a33;
      dest[12] = b30 * a00 + b31 * a10 + b32 * a20 + b33 * a30;
      dest[13] = b30 * a01 + b31 * a11 + b32 * a21 + b33 * a31;
      dest[14] = b30 * a02 + b31 * a12 + b32 * a22 + b33 * a32;
      dest[15] = b30 * a03 + b31 * a13 + b32 * a23 + b33 * a33;
  
      return dest;
  };
  
  /**
   * Transforms a vec3 with the given matrix
   * 4th vector component is implicitly '1'
   *
   * @param {mat4} mat mat4 to transform the vector with
   * @param {vec3} vec vec3 to transform
   * @param {vec3} [dest] vec3 receiving operation result. If not specified result is written to vec
   *
   * @returns {vec3} dest if specified, vec otherwise
   */
  mat4.multiplyVec3 = function (mat, vec, dest) {
      if (!dest) { dest = vec; }
  
      var x = vec[0], y = vec[1], z = vec[2];
  
      dest[0] = mat[0] * x + mat[4] * y + mat[8] * z + mat[12];
      dest[1] = mat[1] * x + mat[5] * y + mat[9] * z + mat[13];
      dest[2] = mat[2] * x + mat[6] * y + mat[10] * z + mat[14];
  
      return dest;
  };
  
  /**
   * Transforms a vec4 with the given matrix
   *
   * @param {mat4} mat mat4 to transform the vector with
   * @param {vec4} vec vec4 to transform
   * @param {vec4} [dest] vec4 receiving operation result. If not specified result is written to vec
   *
   * @returns {vec4} dest if specified, vec otherwise
   */
  mat4.multiplyVec4 = function (mat, vec, dest) {
      if (!dest) { dest = vec; }
  
      var x = vec[0], y = vec[1], z = vec[2], w = vec[3];
  
      dest[0] = mat[0] * x + mat[4] * y + mat[8] * z + mat[12] * w;
      dest[1] = mat[1] * x + mat[5] * y + mat[9] * z + mat[13] * w;
      dest[2] = mat[2] * x + mat[6] * y + mat[10] * z + mat[14] * w;
      dest[3] = mat[3] * x + mat[7] * y + mat[11] * z + mat[15] * w;
  
      return dest;
  };
  
  /**
   * Translates a matrix by the given vector
   *
   * @param {mat4} mat mat4 to translate
   * @param {vec3} vec vec3 specifying the translation
   * @param {mat4} [dest] mat4 receiving operation result. If not specified result is written to mat
   *
   * @returns {mat4} dest if specified, mat otherwise
   */
  mat4.translate = function (mat, vec, dest) {
      var x = vec[0], y = vec[1], z = vec[2],
          a00, a01, a02, a03,
          a10, a11, a12, a13,
          a20, a21, a22, a23;
  
      if (!dest || mat === dest) {
          mat[12] = mat[0] * x + mat[4] * y + mat[8] * z + mat[12];
          mat[13] = mat[1] * x + mat[5] * y + mat[9] * z + mat[13];
          mat[14] = mat[2] * x + mat[6] * y + mat[10] * z + mat[14];
          mat[15] = mat[3] * x + mat[7] * y + mat[11] * z + mat[15];
          return mat;
      }
  
      a00 = mat[0]; a01 = mat[1]; a02 = mat[2]; a03 = mat[3];
      a10 = mat[4]; a11 = mat[5]; a12 = mat[6]; a13 = mat[7];
      a20 = mat[8]; a21 = mat[9]; a22 = mat[10]; a23 = mat[11];
  
      dest[0] = a00; dest[1] = a01; dest[2] = a02; dest[3] = a03;
      dest[4] = a10; dest[5] = a11; dest[6] = a12; dest[7] = a13;
      dest[8] = a20; dest[9] = a21; dest[10] = a22; dest[11] = a23;
  
      dest[12] = a00 * x + a10 * y + a20 * z + mat[12];
      dest[13] = a01 * x + a11 * y + a21 * z + mat[13];
      dest[14] = a02 * x + a12 * y + a22 * z + mat[14];
      dest[15] = a03 * x + a13 * y + a23 * z + mat[15];
      return dest;
  };
  
  /**
   * Scales a matrix by the given vector
   *
   * @param {mat4} mat mat4 to scale
   * @param {vec3} vec vec3 specifying the scale for each axis
   * @param {mat4} [dest] mat4 receiving operation result. If not specified result is written to mat
   *
   * @param {mat4} dest if specified, mat otherwise
   */
  mat4.scale = function (mat, vec, dest) {
      var x = vec[0], y = vec[1], z = vec[2];
  
      if (!dest || mat === dest) {
          mat[0] *= x;
          mat[1] *= x;
          mat[2] *= x;
          mat[3] *= x;
          mat[4] *= y;
          mat[5] *= y;
          mat[6] *= y;
          mat[7] *= y;
          mat[8] *= z;
          mat[9] *= z;
          mat[10] *= z;
          mat[11] *= z;
          return mat;
      }
  
      dest[0] = mat[0] * x;
      dest[1] = mat[1] * x;
      dest[2] = mat[2] * x;
      dest[3] = mat[3] * x;
      dest[4] = mat[4] * y;
      dest[5] = mat[5] * y;
      dest[6] = mat[6] * y;
      dest[7] = mat[7] * y;
      dest[8] = mat[8] * z;
      dest[9] = mat[9] * z;
      dest[10] = mat[10] * z;
      dest[11] = mat[11] * z;
      dest[12] = mat[12];
      dest[13] = mat[13];
      dest[14] = mat[14];
      dest[15] = mat[15];
      return dest;
  };
  
  /**
   * Rotates a matrix by the given angle around the specified axis
   * If rotating around a primary axis (X,Y,Z) one of the specialized rotation functions should be used instead for performance
   *
   * @param {mat4} mat mat4 to rotate
   * @param {number} angle Angle (in radians) to rotate
   * @param {vec3} axis vec3 representing the axis to rotate around 
   * @param {mat4} [dest] mat4 receiving operation result. If not specified result is written to mat
   *
   * @returns {mat4} dest if specified, mat otherwise
   */
  mat4.rotate = function (mat, angle, axis, dest) {
      var x = axis[0], y = axis[1], z = axis[2],
          len = Math.sqrt(x * x + y * y + z * z),
          s, c, t,
          a00, a01, a02, a03,
          a10, a11, a12, a13,
          a20, a21, a22, a23,
          b00, b01, b02,
          b10, b11, b12,
          b20, b21, b22;
  
      if (!len) { return null; }
      if (len !== 1) {
          len = 1 / len;
          x *= len;
          y *= len;
          z *= len;
      }
  
      s = Math.sin(angle);
      c = Math.cos(angle);
      t = 1 - c;
  
      a00 = mat[0]; a01 = mat[1]; a02 = mat[2]; a03 = mat[3];
      a10 = mat[4]; a11 = mat[5]; a12 = mat[6]; a13 = mat[7];
      a20 = mat[8]; a21 = mat[9]; a22 = mat[10]; a23 = mat[11];
  
      // Construct the elements of the rotation matrix
      b00 = x * x * t + c; b01 = y * x * t + z * s; b02 = z * x * t - y * s;
      b10 = x * y * t - z * s; b11 = y * y * t + c; b12 = z * y * t + x * s;
      b20 = x * z * t + y * s; b21 = y * z * t - x * s; b22 = z * z * t + c;
  
      if (!dest) {
          dest = mat;
      } else if (mat !== dest) { // If the source and destination differ, copy the unchanged last row
          dest[12] = mat[12];
          dest[13] = mat[13];
          dest[14] = mat[14];
          dest[15] = mat[15];
      }
  
      // Perform rotation-specific matrix multiplication
      dest[0] = a00 * b00 + a10 * b01 + a20 * b02;
      dest[1] = a01 * b00 + a11 * b01 + a21 * b02;
      dest[2] = a02 * b00 + a12 * b01 + a22 * b02;
      dest[3] = a03 * b00 + a13 * b01 + a23 * b02;
  
      dest[4] = a00 * b10 + a10 * b11 + a20 * b12;
      dest[5] = a01 * b10 + a11 * b11 + a21 * b12;
      dest[6] = a02 * b10 + a12 * b11 + a22 * b12;
      dest[7] = a03 * b10 + a13 * b11 + a23 * b12;
  
      dest[8] = a00 * b20 + a10 * b21 + a20 * b22;
      dest[9] = a01 * b20 + a11 * b21 + a21 * b22;
      dest[10] = a02 * b20 + a12 * b21 + a22 * b22;
      dest[11] = a03 * b20 + a13 * b21 + a23 * b22;
      return dest;
  };
  
  /**
   * Rotates a matrix by the given angle around the X axis
   *
   * @param {mat4} mat mat4 to rotate
   * @param {number} angle Angle (in radians) to rotate
   * @param {mat4} [dest] mat4 receiving operation result. If not specified result is written to mat
   *
   * @returns {mat4} dest if specified, mat otherwise
   */
  mat4.rotateX = function (mat, angle, dest) {
      var s = Math.sin(angle),
          c = Math.cos(angle),
          a10 = mat[4],
          a11 = mat[5],
          a12 = mat[6],
          a13 = mat[7],
          a20 = mat[8],
          a21 = mat[9],
          a22 = mat[10],
          a23 = mat[11];
  
      if (!dest) {
          dest = mat;
      } else if (mat !== dest) { // If the source and destination differ, copy the unchanged rows
          dest[0] = mat[0];
          dest[1] = mat[1];
          dest[2] = mat[2];
          dest[3] = mat[3];
  
          dest[12] = mat[12];
          dest[13] = mat[13];
          dest[14] = mat[14];
          dest[15] = mat[15];
      }
  
      // Perform axis-specific matrix multiplication
      dest[4] = a10 * c + a20 * s;
      dest[5] = a11 * c + a21 * s;
      dest[6] = a12 * c + a22 * s;
      dest[7] = a13 * c + a23 * s;
  
      dest[8] = a10 * -s + a20 * c;
      dest[9] = a11 * -s + a21 * c;
      dest[10] = a12 * -s + a22 * c;
      dest[11] = a13 * -s + a23 * c;
      return dest;
  };
  
  /**
   * Rotates a matrix by the given angle around the Y axis
   *
   * @param {mat4} mat mat4 to rotate
   * @param {number} angle Angle (in radians) to rotate
   * @param {mat4} [dest] mat4 receiving operation result. If not specified result is written to mat
   *
   * @returns {mat4} dest if specified, mat otherwise
   */
  mat4.rotateY = function (mat, angle, dest) {
      var s = Math.sin(angle),
          c = Math.cos(angle),
          a00 = mat[0],
          a01 = mat[1],
          a02 = mat[2],
          a03 = mat[3],
          a20 = mat[8],
          a21 = mat[9],
          a22 = mat[10],
          a23 = mat[11];
  
      if (!dest) {
          dest = mat;
      } else if (mat !== dest) { // If the source and destination differ, copy the unchanged rows
          dest[4] = mat[4];
          dest[5] = mat[5];
          dest[6] = mat[6];
          dest[7] = mat[7];
  
          dest[12] = mat[12];
          dest[13] = mat[13];
          dest[14] = mat[14];
          dest[15] = mat[15];
      }
  
      // Perform axis-specific matrix multiplication
      dest[0] = a00 * c + a20 * -s;
      dest[1] = a01 * c + a21 * -s;
      dest[2] = a02 * c + a22 * -s;
      dest[3] = a03 * c + a23 * -s;
  
      dest[8] = a00 * s + a20 * c;
      dest[9] = a01 * s + a21 * c;
      dest[10] = a02 * s + a22 * c;
      dest[11] = a03 * s + a23 * c;
      return dest;
  };
  
  /**
   * Rotates a matrix by the given angle around the Z axis
   *
   * @param {mat4} mat mat4 to rotate
   * @param {number} angle Angle (in radians) to rotate
   * @param {mat4} [dest] mat4 receiving operation result. If not specified result is written to mat
   *
   * @returns {mat4} dest if specified, mat otherwise
   */
  mat4.rotateZ = function (mat, angle, dest) {
      var s = Math.sin(angle),
          c = Math.cos(angle),
          a00 = mat[0],
          a01 = mat[1],
          a02 = mat[2],
          a03 = mat[3],
          a10 = mat[4],
          a11 = mat[5],
          a12 = mat[6],
          a13 = mat[7];
  
      if (!dest) {
          dest = mat;
      } else if (mat !== dest) { // If the source and destination differ, copy the unchanged last row
          dest[8] = mat[8];
          dest[9] = mat[9];
          dest[10] = mat[10];
          dest[11] = mat[11];
  
          dest[12] = mat[12];
          dest[13] = mat[13];
          dest[14] = mat[14];
          dest[15] = mat[15];
      }
  
      // Perform axis-specific matrix multiplication
      dest[0] = a00 * c + a10 * s;
      dest[1] = a01 * c + a11 * s;
      dest[2] = a02 * c + a12 * s;
      dest[3] = a03 * c + a13 * s;
  
      dest[4] = a00 * -s + a10 * c;
      dest[5] = a01 * -s + a11 * c;
      dest[6] = a02 * -s + a12 * c;
      dest[7] = a03 * -s + a13 * c;
  
      return dest;
  };
  
  /**
   * Generates a frustum matrix with the given bounds
   *
   * @param {number} left Left bound of the frustum
   * @param {number} right Right bound of the frustum
   * @param {number} bottom Bottom bound of the frustum
   * @param {number} top Top bound of the frustum
   * @param {number} near Near bound of the frustum
   * @param {number} far Far bound of the frustum
   * @param {mat4} [dest] mat4 frustum matrix will be written into
   *
   * @returns {mat4} dest if specified, a new mat4 otherwise
   */
  mat4.frustum = function (left, right, bottom, top, near, far, dest) {
      if (!dest) { dest = mat4.create(); }
      var rl = (right - left),
          tb = (top - bottom),
          fn = (far - near);
      dest[0] = (near * 2) / rl;
      dest[1] = 0;
      dest[2] = 0;
      dest[3] = 0;
      dest[4] = 0;
      dest[5] = (near * 2) / tb;
      dest[6] = 0;
      dest[7] = 0;
      dest[8] = (right + left) / rl;
      dest[9] = (top + bottom) / tb;
      dest[10] = -(far + near) / fn;
      dest[11] = -1;
      dest[12] = 0;
      dest[13] = 0;
      dest[14] = -(far * near * 2) / fn;
      dest[15] = 0;
      return dest;
  };
  
  /**
   * Generates a perspective projection matrix with the given bounds
   *
   * @param {number} fovy Vertical field of view
   * @param {number} aspect Aspect ratio. typically viewport width/height
   * @param {number} near Near bound of the frustum
   * @param {number} far Far bound of the frustum
   * @param {mat4} [dest] mat4 frustum matrix will be written into
   *
   * @returns {mat4} dest if specified, a new mat4 otherwise
   */
  mat4.perspective = function (fovy, aspect, near, far, dest) {
      var top = near * Math.tan(fovy * Math.PI / 360.0),
          right = top * aspect;
      return mat4.frustum(-right, right, -top, top, near, far, dest);
  };
  
  /**
   * Generates a orthogonal projection matrix with the given bounds
   *
   * @param {number} left Left bound of the frustum
   * @param {number} right Right bound of the frustum
   * @param {number} bottom Bottom bound of the frustum
   * @param {number} top Top bound of the frustum
   * @param {number} near Near bound of the frustum
   * @param {number} far Far bound of the frustum
   * @param {mat4} [dest] mat4 frustum matrix will be written into
   *
   * @returns {mat4} dest if specified, a new mat4 otherwise
   */
  mat4.ortho = function (left, right, bottom, top, near, far, dest) {
      if (!dest) { dest = mat4.create(); }
      var rl = (right - left),
          tb = (top - bottom),
          fn = (far - near);
      dest[0] = 2 / rl;
      dest[1] = 0;
      dest[2] = 0;
      dest[3] = 0;
      dest[4] = 0;
      dest[5] = 2 / tb;
      dest[6] = 0;
      dest[7] = 0;
      dest[8] = 0;
      dest[9] = 0;
      dest[10] = -2 / fn;
      dest[11] = 0;
      dest[12] = -(left + right) / rl;
      dest[13] = -(top + bottom) / tb;
      dest[14] = -(far + near) / fn;
      dest[15] = 1;
      return dest;
  };
  
  /**
   * Generates a look-at matrix with the given eye position, focal point, and up axis
   *
   * @param {vec3} eye Position of the viewer
   * @param {vec3} center Point the viewer is looking at
   * @param {vec3} up vec3 pointing "up"
   * @param {mat4} [dest] mat4 frustum matrix will be written into
   *
   * @returns {mat4} dest if specified, a new mat4 otherwise
   */
  mat4.lookAt = function (eye, center, up, dest) {
      if (!dest) { dest = mat4.create(); }
  
      var x0, x1, x2, y0, y1, y2, z0, z1, z2, len,
          eyex = eye[0],
          eyey = eye[1],
          eyez = eye[2],
          upx = up[0],
          upy = up[1],
          upz = up[2],
          centerx = center[0],
          centery = center[1],
          centerz = center[2];
  
      if (eyex === centerx && eyey === centery && eyez === centerz) {
          return mat4.identity(dest);
      }
  
      //vec3.direction(eye, center, z);
      z0 = eyex - centerx;
      z1 = eyey - centery;
      z2 = eyez - centerz;
  
      // normalize (no check needed for 0 because of early return)
      len = 1 / Math.sqrt(z0 * z0 + z1 * z1 + z2 * z2);
      z0 *= len;
      z1 *= len;
      z2 *= len;
  
      //vec3.normalize(vec3.cross(up, z, x));
      x0 = upy * z2 - upz * z1;
      x1 = upz * z0 - upx * z2;
      x2 = upx * z1 - upy * z0;
      len = Math.sqrt(x0 * x0 + x1 * x1 + x2 * x2);
      if (!len) {
          x0 = 0;
          x1 = 0;
          x2 = 0;
      } else {
          len = 1 / len;
          x0 *= len;
          x1 *= len;
          x2 *= len;
      }
  
      //vec3.normalize(vec3.cross(z, x, y));
      y0 = z1 * x2 - z2 * x1;
      y1 = z2 * x0 - z0 * x2;
      y2 = z0 * x1 - z1 * x0;
  
      len = Math.sqrt(y0 * y0 + y1 * y1 + y2 * y2);
      if (!len) {
          y0 = 0;
          y1 = 0;
          y2 = 0;
      } else {
          len = 1 / len;
          y0 *= len;
          y1 *= len;
          y2 *= len;
      }
  
      dest[0] = x0;
      dest[1] = y0;
      dest[2] = z0;
      dest[3] = 0;
      dest[4] = x1;
      dest[5] = y1;
      dest[6] = z1;
      dest[7] = 0;
      dest[8] = x2;
      dest[9] = y2;
      dest[10] = z2;
      dest[11] = 0;
      dest[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);
      dest[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);
      dest[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);
      dest[15] = 1;
  
      return dest;
  };
  
  /**
   * Creates a matrix from a quaternion rotation and vector translation
   * This is equivalent to (but much faster than):
   *
   *     mat4.identity(dest);
   *     mat4.translate(dest, vec);
   *     var quatMat = mat4.create();
   *     quat4.toMat4(quat, quatMat);
   *     mat4.multiply(dest, quatMat);
   *
   * @param {quat4} quat Rotation quaternion
   * @param {vec3} vec Translation vector
   * @param {mat4} [dest] mat4 receiving operation result. If not specified result is written to a new mat4
   *
   * @returns {mat4} dest if specified, a new mat4 otherwise
   */
  mat4.fromRotationTranslation = function (quat, vec, dest) {
      if (!dest) { dest = mat4.create(); }
  
      // Quaternion math
      var x = quat[0], y = quat[1], z = quat[2], w = quat[3],
          x2 = x + x,
          y2 = y + y,
          z2 = z + z,
  
          xx = x * x2,
          xy = x * y2,
          xz = x * z2,
          yy = y * y2,
          yz = y * z2,
          zz = z * z2,
          wx = w * x2,
          wy = w * y2,
          wz = w * z2;
  
      dest[0] = 1 - (yy + zz);
      dest[1] = xy + wz;
      dest[2] = xz - wy;
      dest[3] = 0;
      dest[4] = xy - wz;
      dest[5] = 1 - (xx + zz);
      dest[6] = yz + wx;
      dest[7] = 0;
      dest[8] = xz + wy;
      dest[9] = yz - wx;
      dest[10] = 1 - (xx + yy);
      dest[11] = 0;
      dest[12] = vec[0];
      dest[13] = vec[1];
      dest[14] = vec[2];
      dest[15] = 1;
      
      return dest;
  };
  
  /**
   * Returns a string representation of a mat4
   *
   * @param {mat4} mat mat4 to represent as a string
   *
   * @returns {string} String representation of mat
   */
  mat4.str = function (mat) {
      return '[' + mat[0] + ', ' + mat[1] + ', ' + mat[2] + ', ' + mat[3] +
          ', ' + mat[4] + ', ' + mat[5] + ', ' + mat[6] + ', ' + mat[7] +
          ', ' + mat[8] + ', ' + mat[9] + ', ' + mat[10] + ', ' + mat[11] +
          ', ' + mat[12] + ', ' + mat[13] + ', ' + mat[14] + ', ' + mat[15] + ']';
  };
  
  /*
   * quat4
   */
  
  /**
   * Creates a new instance of a quat4 using the default array type
   * Any javascript array containing at least 4 numeric elements can serve as a quat4
   *
   * @param {quat4} [quat] quat4 containing values to initialize with
   *
   * @returns {quat4} New quat4
   */
  quat4.create = function (quat) {
      var dest = new MatrixArray(4);
  
      if (quat) {
          dest[0] = quat[0];
          dest[1] = quat[1];
          dest[2] = quat[2];
          dest[3] = quat[3];
      }
  
      return dest;
  };
  
  /**
   * Copies the values of one quat4 to another
   *
   * @param {quat4} quat quat4 containing values to copy
   * @param {quat4} dest quat4 receiving copied values
   *
   * @returns {quat4} dest
   */
  quat4.set = function (quat, dest) {
      dest[0] = quat[0];
      dest[1] = quat[1];
      dest[2] = quat[2];
      dest[3] = quat[3];
  
      return dest;
  };
  
  /**
   * Calculates the W component of a quat4 from the X, Y, and Z components.
   * Assumes that quaternion is 1 unit in length. 
   * Any existing W component will be ignored. 
   *
   * @param {quat4} quat quat4 to calculate W component of
   * @param {quat4} [dest] quat4 receiving calculated values. If not specified result is written to quat
   *
   * @returns {quat4} dest if specified, quat otherwise
   */
  quat4.calculateW = function (quat, dest) {
      var x = quat[0], y = quat[1], z = quat[2];
  
      if (!dest || quat === dest) {
          quat[3] = -Math.sqrt(Math.abs(1.0 - x * x - y * y - z * z));
          return quat;
      }
      dest[0] = x;
      dest[1] = y;
      dest[2] = z;
      dest[3] = -Math.sqrt(Math.abs(1.0 - x * x - y * y - z * z));
      return dest;
  };
  
  /**
   * Calculates the dot product of two quaternions
   *
   * @param {quat4} quat First operand
   * @param {quat4} quat2 Second operand
   *
   * @return {number} Dot product of quat and quat2
   */
  quat4.dot = function(quat, quat2){
      return quat[0]*quat2[0] + quat[1]*quat2[1] + quat[2]*quat2[2] + quat[3]*quat2[3];
  };
  
  /**
   * Calculates the inverse of a quat4
   *
   * @param {quat4} quat quat4 to calculate inverse of
   * @param {quat4} [dest] quat4 receiving inverse values. If not specified result is written to quat
   *
   * @returns {quat4} dest if specified, quat otherwise
   */
  quat4.inverse = function(quat, dest) {
      var q0 = quat[0], q1 = quat[1], q2 = quat[2], q3 = quat[3],
          dot = q0*q0 + q1*q1 + q2*q2 + q3*q3,
          invDot = dot ? 1.0/dot : 0;
      
      // TODO: Would be faster to return [0,0,0,0] immediately if dot == 0
      
      if(!dest || quat === dest) {
          quat[0] *= -invDot;
          quat[1] *= -invDot;
          quat[2] *= -invDot;
          quat[3] *= invDot;
          return quat;
      }
      dest[0] = -quat[0]*invDot;
      dest[1] = -quat[1]*invDot;
      dest[2] = -quat[2]*invDot;
      dest[3] = quat[3]*invDot;
      return dest;
  };
  
  
  /**
   * Calculates the conjugate of a quat4
   * If the quaternion is normalized, this function is faster than quat4.inverse and produces the same result.
   *
   * @param {quat4} quat quat4 to calculate conjugate of
   * @param {quat4} [dest] quat4 receiving conjugate values. If not specified result is written to quat
   *
   * @returns {quat4} dest if specified, quat otherwise
   */
  quat4.conjugate = function (quat, dest) {
      if (!dest || quat === dest) {
          quat[0] *= -1;
          quat[1] *= -1;
          quat[2] *= -1;
          return quat;
      }
      dest[0] = -quat[0];
      dest[1] = -quat[1];
      dest[2] = -quat[2];
      dest[3] = quat[3];
      return dest;
  };
  
  /**
   * Calculates the length of a quat4
   *
   * Params:
   * @param {quat4} quat quat4 to calculate length of
   *
   * @returns Length of quat
   */
  quat4.length = function (quat) {
      var x = quat[0], y = quat[1], z = quat[2], w = quat[3];
      return Math.sqrt(x * x + y * y + z * z + w * w);
  };
  
  /**
   * Generates a unit quaternion of the same direction as the provided quat4
   * If quaternion length is 0, returns [0, 0, 0, 0]
   *
   * @param {quat4} quat quat4 to normalize
   * @param {quat4} [dest] quat4 receiving operation result. If not specified result is written to quat
   *
   * @returns {quat4} dest if specified, quat otherwise
   */
  quat4.normalize = function (quat, dest) {
      if (!dest) { dest = quat; }
  
      var x = quat[0], y = quat[1], z = quat[2], w = quat[3],
          len = Math.sqrt(x * x + y * y + z * z + w * w);
      if (len === 0) {
          dest[0] = 0;
          dest[1] = 0;
          dest[2] = 0;
          dest[3] = 0;
          return dest;
      }
      len = 1 / len;
      dest[0] = x * len;
      dest[1] = y * len;
      dest[2] = z * len;
      dest[3] = w * len;
  
      return dest;
  };
  
  /**
   * Performs quaternion addition
   *
   * @param {quat4} quat First operand
   * @param {quat4} quat2 Second operand
   * @param {quat4} [dest] quat4 receiving operation result. If not specified result is written to quat
   *
   * @returns {quat4} dest if specified, quat otherwise
   */
  quat4.add = function (quat, quat2, dest) {
      if(!dest || quat === dest) {
          quat[0] += quat2[0];
          quat[1] += quat2[1];
          quat[2] += quat2[2];
          quat[3] += quat2[3];
          return quat;
      }
      dest[0] = quat[0]+quat2[0];
      dest[1] = quat[1]+quat2[1];
      dest[2] = quat[2]+quat2[2];
      dest[3] = quat[3]+quat2[3];
      return dest;
  };
  
  /**
   * Performs a quaternion multiplication
   *
   * @param {quat4} quat First operand
   * @param {quat4} quat2 Second operand
   * @param {quat4} [dest] quat4 receiving operation result. If not specified result is written to quat
   *
   * @returns {quat4} dest if specified, quat otherwise
   */
  quat4.multiply = function (quat, quat2, dest) {
      if (!dest) { dest = quat; }
  
      var qax = quat[0], qay = quat[1], qaz = quat[2], qaw = quat[3],
          qbx = quat2[0], qby = quat2[1], qbz = quat2[2], qbw = quat2[3];
  
      dest[0] = qax * qbw + qaw * qbx + qay * qbz - qaz * qby;
      dest[1] = qay * qbw + qaw * qby + qaz * qbx - qax * qbz;
      dest[2] = qaz * qbw + qaw * qbz + qax * qby - qay * qbx;
      dest[3] = qaw * qbw - qax * qbx - qay * qby - qaz * qbz;
  
      return dest;
  };
  
  /**
   * Transforms a vec3 with the given quaternion
   *
   * @param {quat4} quat quat4 to transform the vector with
   * @param {vec3} vec vec3 to transform
   * @param {vec3} [dest] vec3 receiving operation result. If not specified result is written to vec
   *
   * @returns dest if specified, vec otherwise
   */
  quat4.multiplyVec3 = function (quat, vec, dest) {
      if (!dest) { dest = vec; }
  
      var x = vec[0], y = vec[1], z = vec[2],
          qx = quat[0], qy = quat[1], qz = quat[2], qw = quat[3],
  
          // calculate quat * vec
          ix = qw * x + qy * z - qz * y,
          iy = qw * y + qz * x - qx * z,
          iz = qw * z + qx * y - qy * x,
          iw = -qx * x - qy * y - qz * z;
  
      // calculate result * inverse quat
      dest[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;
      dest[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;
      dest[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;
  
      return dest;
  };
  
  /**
   * Multiplies the components of a quaternion by a scalar value
   *
   * @param {quat4} quat to scale
   * @param {number} val Value to scale by
   * @param {quat4} [dest] quat4 receiving operation result. If not specified result is written to quat
   *
   * @returns {quat4} dest if specified, quat otherwise
   */
  quat4.scale = function (quat, val, dest) {
      if(!dest || quat === dest) {
          quat[0] *= val;
          quat[1] *= val;
          quat[2] *= val;
          quat[3] *= val;
          return quat;
      }
      dest[0] = quat[0]*val;
      dest[1] = quat[1]*val;
      dest[2] = quat[2]*val;
      dest[3] = quat[3]*val;
      return dest;
  };
  
  /**
   * Calculates a 3x3 matrix from the given quat4
   *
   * @param {quat4} quat quat4 to create matrix from
   * @param {mat3} [dest] mat3 receiving operation result
   *
   * @returns {mat3} dest if specified, a new mat3 otherwise
   */
  quat4.toMat3 = function (quat, dest) {
      if (!dest) { dest = mat3.create(); }
  
      var x = quat[0], y = quat[1], z = quat[2], w = quat[3],
          x2 = x + x,
          y2 = y + y,
          z2 = z + z,
  
          xx = x * x2,
          xy = x * y2,
          xz = x * z2,
          yy = y * y2,
          yz = y * z2,
          zz = z * z2,
          wx = w * x2,
          wy = w * y2,
          wz = w * z2;
  
      dest[0] = 1 - (yy + zz);
      dest[1] = xy + wz;
      dest[2] = xz - wy;
  
      dest[3] = xy - wz;
      dest[4] = 1 - (xx + zz);
      dest[5] = yz + wx;
  
      dest[6] = xz + wy;
      dest[7] = yz - wx;
      dest[8] = 1 - (xx + yy);
  
      return dest;
  };
  
  /**
   * Calculates a 4x4 matrix from the given quat4
   *
   * @param {quat4} quat quat4 to create matrix from
   * @param {mat4} [dest] mat4 receiving operation result
   *
   * @returns {mat4} dest if specified, a new mat4 otherwise
   */
  quat4.toMat4 = function (quat, dest) {
      if (!dest) { dest = mat4.create(); }
  
      var x = quat[0], y = quat[1], z = quat[2], w = quat[3],
          x2 = x + x,
          y2 = y + y,
          z2 = z + z,
  
          xx = x * x2,
          xy = x * y2,
          xz = x * z2,
          yy = y * y2,
          yz = y * z2,
          zz = z * z2,
          wx = w * x2,
          wy = w * y2,
          wz = w * z2;
  
      dest[0] = 1 - (yy + zz);
      dest[1] = xy + wz;
      dest[2] = xz - wy;
      dest[3] = 0;
  
      dest[4] = xy - wz;
      dest[5] = 1 - (xx + zz);
      dest[6] = yz + wx;
      dest[7] = 0;
  
      dest[8] = xz + wy;
      dest[9] = yz - wx;
      dest[10] = 1 - (xx + yy);
      dest[11] = 0;
  
      dest[12] = 0;
      dest[13] = 0;
      dest[14] = 0;
      dest[15] = 1;
  
      return dest;
  };
  
  /**
   * Performs a spherical linear interpolation between two quat4
   *
   * @param {quat4} quat First quaternion
   * @param {quat4} quat2 Second quaternion
   * @param {number} slerp Interpolation amount between the two inputs
   * @param {quat4} [dest] quat4 receiving operation result. If not specified result is written to quat
   *
   * @returns {quat4} dest if specified, quat otherwise
   */
  quat4.slerp = function (quat, quat2, slerp, dest) {
      if (!dest) { dest = quat; }
  
      var cosHalfTheta = quat[0] * quat2[0] + quat[1] * quat2[1] + quat[2] * quat2[2] + quat[3] * quat2[3],
          halfTheta,
          sinHalfTheta,
          ratioA,
          ratioB;
  
      if (Math.abs(cosHalfTheta) >= 1.0) {
          if (dest !== quat) {
              dest[0] = quat[0];
              dest[1] = quat[1];
              dest[2] = quat[2];
              dest[3] = quat[3];
          }
          return dest;
      }
  
      halfTheta = Math.acos(cosHalfTheta);
      sinHalfTheta = Math.sqrt(1.0 - cosHalfTheta * cosHalfTheta);
  
      if (Math.abs(sinHalfTheta) < 0.001) {
          dest[0] = (quat[0] * 0.5 + quat2[0] * 0.5);
          dest[1] = (quat[1] * 0.5 + quat2[1] * 0.5);
          dest[2] = (quat[2] * 0.5 + quat2[2] * 0.5);
          dest[3] = (quat[3] * 0.5 + quat2[3] * 0.5);
          return dest;
      }
  
      ratioA = Math.sin((1 - slerp) * halfTheta) / sinHalfTheta;
      ratioB = Math.sin(slerp * halfTheta) / sinHalfTheta;
  
      dest[0] = (quat[0] * ratioA + quat2[0] * ratioB);
      dest[1] = (quat[1] * ratioA + quat2[1] * ratioB);
      dest[2] = (quat[2] * ratioA + quat2[2] * ratioB);
      dest[3] = (quat[3] * ratioA + quat2[3] * ratioB);
  
      return dest;
  };
  
  /**
   * Returns a string representation of a quaternion
   *
   * @param {quat4} quat quat4 to represent as a string
   *
   * @returns {string} String representation of quat
   */
  quat4.str = function (quat) {
      return '[' + quat[0] + ', ' + quat[1] + ', ' + quat[2] + ', ' + quat[3] + ']';
  };
  
  
  return {
    vec3: vec3,
    mat3: mat3,
    mat4: mat4,
    quat4: quat4
  };
  
  })();
  
  ;
  var GLImmediateSetup={};
  
  function _glEnable(x0) { GLctx.enable(x0) }
  
  function _glDisable(x0) { GLctx.disable(x0) }
  
  function _glIsEnabled(x0) { return GLctx.isEnabled(x0) }
  
  
  function emscriptenWebGLGet(name_, p, type) {
      // Guard against user passing a null pointer.
      // Note that GLES2 spec does not say anything about how passing a null pointer should be treated.
      // Testing on desktop core GL 3, the application crashes on glGetIntegerv to a null pointer, but
      // better to report an error instead of doing anything random.
      if (!p) {
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
      var ret = undefined;
      switch(name_) { // Handle a few trivial GLES values
        case 0x8DFA: // GL_SHADER_COMPILER
          ret = 1;
          break;
        case 0x8DF8: // GL_SHADER_BINARY_FORMATS
          if (type !== 'Integer' && type !== 'Integer64') {
            GL.recordError(0x0500); // GL_INVALID_ENUM
          }
          return; // Do not write anything to the out pointer, since no binary formats are supported.
        case 0x8DF9: // GL_NUM_SHADER_BINARY_FORMATS
          ret = 0;
          break;
        case 0x86A2: // GL_NUM_COMPRESSED_TEXTURE_FORMATS
          // WebGL doesn't have GL_NUM_COMPRESSED_TEXTURE_FORMATS (it's obsolete since GL_COMPRESSED_TEXTURE_FORMATS returns a JS array that can be queried for length),
          // so implement it ourselves to allow C++ GLES2 code get the length.
          var formats = GLctx.getParameter(0x86A3 /*GL_COMPRESSED_TEXTURE_FORMATS*/);
          ret = formats.length;
          break;
        case 0x8B9A: // GL_IMPLEMENTATION_COLOR_READ_TYPE
          ret = 0x1401; // GL_UNSIGNED_BYTE
          break;
        case 0x8B9B: // GL_IMPLEMENTATION_COLOR_READ_FORMAT
          ret = 0x1908; // GL_RGBA
          break;
      }
  
      if (ret === undefined) {
        var result = GLctx.getParameter(name_);
        switch (typeof(result)) {
          case "number":
            ret = result;
            break;
          case "boolean":
            ret = result ? 1 : 0;
            break;
          case "string":
            GL.recordError(0x0500); // GL_INVALID_ENUM
            return;
          case "object":
            if (result === null) {
              // null is a valid result for some (e.g., which buffer is bound - perhaps nothing is bound), but otherwise
              // can mean an invalid name_, which we need to report as an error
              switch(name_) {
                case 0x8894: // ARRAY_BUFFER_BINDING
                case 0x8B8D: // CURRENT_PROGRAM
                case 0x8895: // ELEMENT_ARRAY_BUFFER_BINDING
                case 0x8CA6: // FRAMEBUFFER_BINDING
                case 0x8CA7: // RENDERBUFFER_BINDING
                case 0x8069: // TEXTURE_BINDING_2D
                case 0x8514: { // TEXTURE_BINDING_CUBE_MAP
                  ret = 0;
                  break;
                }
                default: {
                  GL.recordError(0x0500); // GL_INVALID_ENUM
                  return;
                }
              }
            } else if (result instanceof Float32Array ||
                       result instanceof Uint32Array ||
                       result instanceof Int32Array ||
                       result instanceof Array) {
              for (var i = 0; i < result.length; ++i) {
                switch (type) {
                  case 'Integer': HEAP32[(((p)+(i*4))>>2)]=result[i];   break;
                  case 'Float':   HEAPF32[(((p)+(i*4))>>2)]=result[i]; break;
                  case 'Boolean': HEAP8[(((p)+(i))>>0)]=result[i] ? 1 : 0;    break;
                  default: throw 'internal glGet error, bad type: ' + type;
                }
              }
              return;
            } else if (result instanceof WebGLBuffer ||
                       result instanceof WebGLProgram ||
                       result instanceof WebGLFramebuffer ||
                       result instanceof WebGLRenderbuffer ||
                       result instanceof WebGLTexture) {
              ret = result.name | 0;
            } else {
              GL.recordError(0x0500); // GL_INVALID_ENUM
              return;
            }
            break;
          default:
            GL.recordError(0x0500); // GL_INVALID_ENUM
            return;
        }
      }
  
      switch (type) {
        case 'Integer64': (tempI64 = [ret>>>0,(tempDouble=ret,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((p)>>2)]=tempI64[0],HEAP32[(((p)+(4))>>2)]=tempI64[1]);    break;
        case 'Integer': HEAP32[((p)>>2)]=ret;    break;
        case 'Float':   HEAPF32[((p)>>2)]=ret;  break;
        case 'Boolean': HEAP8[((p)>>0)]=ret ? 1 : 0; break;
        default: throw 'internal glGet error, bad type: ' + type;
      }
    }function _glGetBooleanv(name_, p) {
      emscriptenWebGLGet(name_, p, 'Boolean');
    }
  
  function _glGetIntegerv(name_, p) {
      emscriptenWebGLGet(name_, p, 'Integer');
    }
  
  function _glGetString(name_) {
      if (GL.stringCache[name_]) return GL.stringCache[name_];
      var ret; 
      switch(name_) {
        case 0x1F00 /* GL_VENDOR */:
        case 0x1F01 /* GL_RENDERER */:
        case 0x1F02 /* GL_VERSION */:
          ret = allocate(intArrayFromString(GLctx.getParameter(name_)), 'i8', ALLOC_NORMAL);
          break;
        case 0x1F03 /* GL_EXTENSIONS */:
          var exts = GLctx.getSupportedExtensions();
          var gl_exts = [];
          for (var i in exts) {
            gl_exts.push(exts[i]);
            gl_exts.push("GL_" + exts[i]);
          }
          ret = allocate(intArrayFromString(gl_exts.join(' ')), 'i8', ALLOC_NORMAL);
          break;
        case 0x8B8C /* GL_SHADING_LANGUAGE_VERSION */:
          ret = allocate(intArrayFromString('OpenGL ES GLSL 1.00 (WebGL)'), 'i8', ALLOC_NORMAL);
          break;
        default:
          GL.recordError(0x0500/*GL_INVALID_ENUM*/);
          return 0;
      }
      GL.stringCache[name_] = ret;
      return ret;
    }
  
  function _glCreateShader(shaderType) {
      var id = GL.getNewId(GL.shaders);
      GL.shaders[id] = GLctx.createShader(shaderType);
      return id;
    }
  
  function _glShaderSource(shader, count, string, length) {
      var source = GL.getSource(shader, count, string, length);
      GLctx.shaderSource(GL.shaders[shader], source);
    }
  
  function _glCompileShader(shader) {
      GLctx.compileShader(GL.shaders[shader]);
    }
  
  function _glAttachShader(program, shader) {
      GLctx.attachShader(GL.programs[program],
                              GL.shaders[shader]);
    }
  
  function _glDetachShader(program, shader) {
      GLctx.detachShader(GL.programs[program],
                              GL.shaders[shader]);
    }
  
  function _glUseProgram(program) {
      GLctx.useProgram(program ? GL.programs[program] : null);
    }
  
  function _glDeleteProgram(id) {
      if (!id) return;
      var program = GL.programs[id];
      if (!program) { // glDeleteProgram actually signals an error when deleting a nonexisting object, unlike some other GL delete functions.
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
      GLctx.deleteProgram(program);
      program.name = 0;
      GL.programs[id] = null;
      GL.programInfos[id] = null;
    }
  
  function _glBindAttribLocation(program, index, name) {
      name = Pointer_stringify(name);
      GLctx.bindAttribLocation(GL.programs[program], index, name);
    }
  
  function _glLinkProgram(program) {
      GLctx.linkProgram(GL.programs[program]);
      GL.programInfos[program] = null; // uniforms no longer keep the same names after linking
      GL.populateUniformTable(program);
    }
  
  function _glBindBuffer(target, buffer) {
      var bufferObj = buffer ? GL.buffers[buffer] : null;
  
      if (target == GLctx.ARRAY_BUFFER) {
        GL.currArrayBuffer = buffer;
        GLImmediate.lastArrayBuffer = buffer;
      } else if (target == GLctx.ELEMENT_ARRAY_BUFFER) {
        GL.currElementArrayBuffer = buffer;
      }
  
      GLctx.bindBuffer(target, bufferObj);
    }
  
  function _glGetFloatv(name_, p) {
      emscriptenWebGLGet(name_, p, 'Float');
    }
  
  function _glHint(x0, x1) { GLctx.hint(x0, x1) }
  
  function _glEnableVertexAttribArray(index) {
      GLctx.enableVertexAttribArray(index);
    }
  
  function _glDisableVertexAttribArray(index) {
      GLctx.disableVertexAttribArray(index);
    }
  
  function _glVertexAttribPointer(index, size, type, normalized, stride, ptr) {
      GLctx.vertexAttribPointer(index, size, type, normalized, stride, ptr);
    }
  
  function _glActiveTexture(x0) { GLctx.activeTexture(x0) }var GLEmulation={fogStart:0,fogEnd:1,fogDensity:1,fogColor:null,fogMode:2048,fogEnabled:false,vaos:[],currentVao:null,enabledVertexAttribArrays:{},hasRunInit:false,init:function () {
        // Do not activate immediate/emulation code (e.g. replace glDrawElements) when in FULL_ES2 mode.
        // We do not need full emulation, we instead emulate client-side arrays etc. in FULL_ES2 code in
        // a straightforward manner, and avoid not having a bound buffer be ambiguous between es2 emulation
        // code and legacy gl emulation code.
  
        if (GLEmulation.hasRunInit) {
          return;
        }
        GLEmulation.hasRunInit = true;
  
        GLEmulation.fogColor = new Float32Array(4);
  
        // Add some emulation workarounds
        Module.printErr('WARNING: using emscripten GL emulation. This is a collection of limited workarounds, do not expect it to work.');
        Module.printErr('WARNING: using emscripten GL emulation unsafe opts. If weirdness happens, try -s GL_UNSAFE_OPTS=0');
  
        // XXX some of the capabilities we don't support may lead to incorrect rendering, if we do not emulate them in shaders
        var validCapabilities = {
          0x0B44: 1, // GL_CULL_FACE
          0x0BE2: 1, // GL_BLEND
          0x0BD0: 1, // GL_DITHER,
          0x0B90: 1, // GL_STENCIL_TEST
          0x0B71: 1, // GL_DEPTH_TEST
          0x0C11: 1, // GL_SCISSOR_TEST
          0x8037: 1, // GL_POLYGON_OFFSET_FILL
          0x809E: 1, // GL_SAMPLE_ALPHA_TO_COVERAGE
          0x80A0: 1  // GL_SAMPLE_COVERAGE
        };
  
  
  
        var glEnable = _glEnable;
        _glEnable = _emscripten_glEnable = function _glEnable(cap) {
          // Clean up the renderer on any change to the rendering state. The optimization of
          // skipping renderer setup is aimed at the case of multiple glDraw* right after each other
          if (GLImmediate.lastRenderer) GLImmediate.lastRenderer.cleanup();
          if (cap == 0x0B60 /* GL_FOG */) {
            if (GLEmulation.fogEnabled != true) {
              GLImmediate.currentRenderer = null; // Fog parameter is part of the FFP shader state, we must re-lookup the renderer to use.
              GLEmulation.fogEnabled = true;
            }
            return;
          } else if (cap == 0x0de1 /* GL_TEXTURE_2D */) {
            // XXX not according to spec, and not in desktop GL, but works in some GLES1.x apparently, so support
            // it by forwarding to glEnableClientState
            /* Actually, let's not, for now. (This sounds exceedingly broken)
             * This is in gl_ps_workaround2.c.
            _glEnableClientState(cap);
            */
            return;
          } else if (!(cap in validCapabilities)) {
            return;
          }
          glEnable(cap);
        };
        
  
        var glDisable = _glDisable;
        _glDisable = _emscripten_glDisable = function _glDisable(cap) {
          if (GLImmediate.lastRenderer) GLImmediate.lastRenderer.cleanup();
          if (cap == 0x0B60 /* GL_FOG */) {
            if (GLEmulation.fogEnabled != false) {
              GLImmediate.currentRenderer = null; // Fog parameter is part of the FFP shader state, we must re-lookup the renderer to use.
              GLEmulation.fogEnabled = false;
            }
            return;
          } else if (cap == 0x0de1 /* GL_TEXTURE_2D */) {
            // XXX not according to spec, and not in desktop GL, but works in some GLES1.x apparently, so support
            // it by forwarding to glDisableClientState
            /* Actually, let's not, for now. (This sounds exceedingly broken)
             * This is in gl_ps_workaround2.c.
            _glDisableClientState(cap);
            */
            return;
          } else if (!(cap in validCapabilities)) {
            return;
          }
          glDisable(cap);
        };
        
  
        _glIsEnabled = _emscripten_glIsEnabled = function _glIsEnabled(cap) {
          if (cap == 0x0B60 /* GL_FOG */) {
            return GLEmulation.fogEnabled ? 1 : 0;
          } else if (!(cap in validCapabilities)) {
            return 0;
          }
          return GLctx.isEnabled(cap);
        };
        
  
        var glGetBooleanv = _glGetBooleanv;
        _glGetBooleanv = _emscripten_glGetBooleanv = function _glGetBooleanv(pname, p) {
          var attrib = GLEmulation.getAttributeFromCapability(pname);
          if (attrib !== null) {
            var result = GLImmediate.enabledClientAttributes[attrib];
            HEAP8[((p)>>0)]=result === true ? 1 : 0;
            return;
          }
          glGetBooleanv(pname, p);
        };
        
  
        var glGetIntegerv = _glGetIntegerv;
        _glGetIntegerv = _emscripten_glGetIntegerv = function _glGetIntegerv(pname, params) {
          switch (pname) {
            case 0x84E2: pname = GLctx.MAX_TEXTURE_IMAGE_UNITS /* fake it */; break; // GL_MAX_TEXTURE_UNITS
            case 0x8B4A: { // GL_MAX_VERTEX_UNIFORM_COMPONENTS_ARB
              var result = GLctx.getParameter(GLctx.MAX_VERTEX_UNIFORM_VECTORS);
              HEAP32[((params)>>2)]=result*4; // GLES gives num of 4-element vectors, GL wants individual components, so multiply
              return;
            }
            case 0x8B49: { // GL_MAX_FRAGMENT_UNIFORM_COMPONENTS_ARB
              var result = GLctx.getParameter(GLctx.MAX_FRAGMENT_UNIFORM_VECTORS);
              HEAP32[((params)>>2)]=result*4; // GLES gives num of 4-element vectors, GL wants individual components, so multiply
              return;
            }
            case 0x8B4B: { // GL_MAX_VARYING_FLOATS_ARB
              var result = GLctx.getParameter(GLctx.MAX_VARYING_VECTORS);
              HEAP32[((params)>>2)]=result*4; // GLES gives num of 4-element vectors, GL wants individual components, so multiply
              return;
            }
            case 0x8871: pname = GLctx.MAX_COMBINED_TEXTURE_IMAGE_UNITS /* close enough */; break; // GL_MAX_TEXTURE_COORDS
            case 0x807A: { // GL_VERTEX_ARRAY_SIZE
              var attribute = GLImmediate.clientAttributes[GLImmediate.VERTEX];
              HEAP32[((params)>>2)]=attribute ? attribute.size : 0;
              return;
            }
            case 0x807B: { // GL_VERTEX_ARRAY_TYPE
              var attribute = GLImmediate.clientAttributes[GLImmediate.VERTEX];
              HEAP32[((params)>>2)]=attribute ? attribute.type : 0;
              return;
            }
            case 0x807C: { // GL_VERTEX_ARRAY_STRIDE
              var attribute = GLImmediate.clientAttributes[GLImmediate.VERTEX];
              HEAP32[((params)>>2)]=attribute ? attribute.stride : 0;
              return;
            }
            case 0x8081: { // GL_COLOR_ARRAY_SIZE
              var attribute = GLImmediate.clientAttributes[GLImmediate.COLOR];
              HEAP32[((params)>>2)]=attribute ? attribute.size : 0;
              return;
            }
            case 0x8082: { // GL_COLOR_ARRAY_TYPE
              var attribute = GLImmediate.clientAttributes[GLImmediate.COLOR];
              HEAP32[((params)>>2)]=attribute ? attribute.type : 0;
              return;
            }
            case 0x8083: { // GL_COLOR_ARRAY_STRIDE
              var attribute = GLImmediate.clientAttributes[GLImmediate.COLOR];
              HEAP32[((params)>>2)]=attribute ? attribute.stride : 0;
              return;
            }
            case 0x8088: { // GL_TEXTURE_COORD_ARRAY_SIZE
              var attribute = GLImmediate.clientAttributes[GLImmediate.TEXTURE0 + GLImmediate.clientActiveTexture];
              HEAP32[((params)>>2)]=attribute ? attribute.size : 0;
              return;
            }
            case 0x8089: { // GL_TEXTURE_COORD_ARRAY_TYPE
              var attribute = GLImmediate.clientAttributes[GLImmediate.TEXTURE0 + GLImmediate.clientActiveTexture];
              HEAP32[((params)>>2)]=attribute ? attribute.type : 0;
              return;
            }
            case 0x808A: { // GL_TEXTURE_COORD_ARRAY_STRIDE
              var attribute = GLImmediate.clientAttributes[GLImmediate.TEXTURE0 + GLImmediate.clientActiveTexture];
              HEAP32[((params)>>2)]=attribute ? attribute.stride : 0;
              return;
            }
          }
          glGetIntegerv(pname, params);
        };
        
  
        var glGetString = _glGetString;
        _glGetString = _emscripten_glGetString = function _glGetString(name_) {
          if (GL.stringCache[name_]) return GL.stringCache[name_];
          switch(name_) {
            case 0x1F03 /* GL_EXTENSIONS */: // Add various extensions that we can support
              var ret = allocate(intArrayFromString(GLctx.getSupportedExtensions().join(' ') +
                     ' GL_EXT_texture_env_combine GL_ARB_texture_env_crossbar GL_ATI_texture_env_combine3 GL_NV_texture_env_combine4 GL_EXT_texture_env_dot3 GL_ARB_multitexture GL_ARB_vertex_buffer_object GL_EXT_framebuffer_object GL_ARB_vertex_program GL_ARB_fragment_program GL_ARB_shading_language_100 GL_ARB_shader_objects GL_ARB_vertex_shader GL_ARB_fragment_shader GL_ARB_texture_cube_map GL_EXT_draw_range_elements' +
                     (GL.currentContext.compressionExt ? ' GL_ARB_texture_compression GL_EXT_texture_compression_s3tc' : '') +
                     (GL.currentContext.anisotropicExt ? ' GL_EXT_texture_filter_anisotropic' : '')
              ), 'i8', ALLOC_NORMAL);
              GL.stringCache[name_] = ret;
              return ret;
          }
          return glGetString(name_);
        };
        
  
        // Do some automatic rewriting to work around GLSL differences. Note that this must be done in
        // tandem with the rest of the program, by itself it cannot suffice.
        // Note that we need to remember shader types for this rewriting, saving sources makes it easier to debug.
        GL.shaderInfos = {};
        var glCreateShader = _glCreateShader;
        _glCreateShader = _emscripten_glCreateShader = function _glCreateShader(shaderType) {
          var id = glCreateShader(shaderType);
          GL.shaderInfos[id] = {
            type: shaderType,
            ftransform: false
          };
          return id;
        };
        
  
        function ensurePrecision(source) {
          if (!/precision +(low|medium|high)p +float *;/.test(source)) {
            source = 'precision mediump float;\n' + source;
          }
          return source;
        }
  
        var glShaderSource = _glShaderSource;
        _glShaderSource = _emscripten_glShaderSource = function _glShaderSource(shader, count, string, length) {
          var source = GL.getSource(shader, count, string, length);
          // XXX We add attributes and uniforms to shaders. The program can ask for the # of them, and see the
          // ones we generated, potentially confusing it? Perhaps we should hide them.
          if (GL.shaderInfos[shader].type == GLctx.VERTEX_SHADER) {
            // Replace ftransform() with explicit project/modelview transforms, and add position and matrix info.
            var has_pm = source.search(/u_projection/) >= 0;
            var has_mm = source.search(/u_modelView/) >= 0;
            var has_pv = source.search(/a_position/) >= 0;
            var need_pm = 0, need_mm = 0, need_pv = 0;
            var old = source;
            source = source.replace(/ftransform\(\)/g, '(u_projection * u_modelView * a_position)');
            if (old != source) need_pm = need_mm = need_pv = 1;
            old = source;
            source = source.replace(/gl_ProjectionMatrix/g, 'u_projection');
            if (old != source) need_pm = 1;
            old = source;
            source = source.replace(/gl_ModelViewMatrixTranspose\[2\]/g, 'vec4(u_modelView[0][2], u_modelView[1][2], u_modelView[2][2], u_modelView[3][2])'); // XXX extremely inefficient
            if (old != source) need_mm = 1;
            old = source;
            source = source.replace(/gl_ModelViewMatrix/g, 'u_modelView');
            if (old != source) need_mm = 1;
            old = source;
            source = source.replace(/gl_Vertex/g, 'a_position');
            if (old != source) need_pv = 1;
            old = source;
            source = source.replace(/gl_ModelViewProjectionMatrix/g, '(u_projection * u_modelView)');
            if (old != source) need_pm = need_mm = 1;
            if (need_pv && !has_pv) source = 'attribute vec4 a_position; \n' + source;
            if (need_mm && !has_mm) source = 'uniform mat4 u_modelView; \n' + source;
            if (need_pm && !has_pm) source = 'uniform mat4 u_projection; \n' + source;
            GL.shaderInfos[shader].ftransform = need_pm || need_mm || need_pv; // we will need to provide the fixed function stuff as attributes and uniforms
            for (var i = 0; i < GLImmediate.MAX_TEXTURES; i++) {
              // XXX To handle both regular texture mapping and cube mapping, we use vec4 for tex coordinates.
              var old = source;
              var need_vtc = source.search('v_texCoord' + i) == -1;
              source = source.replace(new RegExp('gl_TexCoord\\[' + i + '\\]', 'g'), 'v_texCoord' + i)
                             .replace(new RegExp('gl_MultiTexCoord' + i, 'g'), 'a_texCoord' + i);
              if (source != old) {
                source = 'attribute vec4 a_texCoord' + i + '; \n' + source;
                if (need_vtc) {
                  source = 'varying vec4 v_texCoord' + i + ';   \n' + source;
                }
              }
  
              old = source;
              source = source.replace(new RegExp('gl_TextureMatrix\\[' + i + '\\]', 'g'), 'u_textureMatrix' + i);
              if (source != old) {
                source = 'uniform mat4 u_textureMatrix' + i + '; \n' + source;
              }
            }
            if (source.indexOf('gl_FrontColor') >= 0) {
              source = 'varying vec4 v_color; \n' +
                       source.replace(/gl_FrontColor/g, 'v_color');
            }
            if (source.indexOf('gl_Color') >= 0) {
              source = 'attribute vec4 a_color; \n' +
                       source.replace(/gl_Color/g, 'a_color');
            }
            if (source.indexOf('gl_Normal') >= 0) {
              source = 'attribute vec3 a_normal; \n' +
                       source.replace(/gl_Normal/g, 'a_normal');
            }
            // fog
            if (source.indexOf('gl_FogFragCoord') >= 0) {
              source = 'varying float v_fogFragCoord;   \n' +
                       source.replace(/gl_FogFragCoord/g, 'v_fogFragCoord');
            }
            source = ensurePrecision(source);
          } else { // Fragment shader
            for (var i = 0; i < GLImmediate.MAX_TEXTURES; i++) {
              var old = source;
              source = source.replace(new RegExp('gl_TexCoord\\[' + i + '\\]', 'g'), 'v_texCoord' + i);
              if (source != old) {
                source = 'varying vec4 v_texCoord' + i + ';   \n' + source;
              }
            }
            if (source.indexOf('gl_Color') >= 0) {
              source = 'varying vec4 v_color; \n' + source.replace(/gl_Color/g, 'v_color');
            }
            if (source.indexOf('gl_Fog.color') >= 0) {
              source = 'uniform vec4 u_fogColor;   \n' +
                       source.replace(/gl_Fog.color/g, 'u_fogColor');
            }
            if (source.indexOf('gl_Fog.end') >= 0) {
              source = 'uniform float u_fogEnd;   \n' +
                       source.replace(/gl_Fog.end/g, 'u_fogEnd');
            }
            if (source.indexOf('gl_Fog.scale') >= 0) {
              source = 'uniform float u_fogScale;   \n' +
                       source.replace(/gl_Fog.scale/g, 'u_fogScale');
            }
            if (source.indexOf('gl_Fog.density') >= 0) {
              source = 'uniform float u_fogDensity;   \n' +
                       source.replace(/gl_Fog.density/g, 'u_fogDensity');
            }
            if (source.indexOf('gl_FogFragCoord') >= 0) {
              source = 'varying float v_fogFragCoord;   \n' +
                       source.replace(/gl_FogFragCoord/g, 'v_fogFragCoord');
            }
            source = ensurePrecision(source);
          }
          GLctx.shaderSource(GL.shaders[shader], source);
        };
        
  
        var glCompileShader = _glCompileShader;
        _glCompileShader = _emscripten_glCompileShader = function _glCompileShader(shader) {
          GLctx.compileShader(GL.shaders[shader]);
        };
        
  
        GL.programShaders = {};
        var glAttachShader = _glAttachShader;
        _glAttachShader = _emscripten_glAttachShader = function _glAttachShader(program, shader) {
          if (!GL.programShaders[program]) GL.programShaders[program] = [];
          GL.programShaders[program].push(shader);
          glAttachShader(program, shader);
        };
        
  
        var glDetachShader = _glDetachShader;
        _glDetachShader = _emscripten_glDetachShader = function _glDetachShader(program, shader) {
          var programShader = GL.programShaders[program];
          if (!programShader) {
            Module.printErr('WARNING: _glDetachShader received invalid program: ' + program);
            return;
          }
          var index = programShader.indexOf(shader);
          programShader.splice(index, 1);
          glDetachShader(program, shader);
        };
        
  
        var glUseProgram = _glUseProgram;
        _glUseProgram = _emscripten_glUseProgram = function _glUseProgram(program) {
          if (GL.currProgram != program) {
            GLImmediate.currentRenderer = null; // This changes the FFP emulation shader program, need to recompute that.
            GL.currProgram = program;
            GLImmediate.fixedFunctionProgram = 0;
            glUseProgram(program);
          }
        }
        
  
        var glDeleteProgram = _glDeleteProgram;
        _glDeleteProgram = _emscripten_glDeleteProgram = function _glDeleteProgram(program) {
          glDeleteProgram(program);
          if (program == GL.currProgram) {
            GLImmediate.currentRenderer = null; // This changes the FFP emulation shader program, need to recompute that.
            GL.currProgram = 0;
          }
        };
        
  
        // If attribute 0 was not bound, bind it to 0 for WebGL performance reasons. Track if 0 is free for that.
        var zeroUsedPrograms = {};
        var glBindAttribLocation = _glBindAttribLocation;
        _glBindAttribLocation = _emscripten_glBindAttribLocation = function _glBindAttribLocation(program, index, name) {
          if (index == 0) zeroUsedPrograms[program] = true;
          glBindAttribLocation(program, index, name);
        };
        
  
        var glLinkProgram = _glLinkProgram;
        _glLinkProgram = _emscripten_glLinkProgram = function _glLinkProgram(program) {
          if (!(program in zeroUsedPrograms)) {
            GLctx.bindAttribLocation(GL.programs[program], 0, 'a_position');
          }
          glLinkProgram(program);
        };
        
  
        var glBindBuffer = _glBindBuffer;
        _glBindBuffer = _emscripten_glBindBuffer = function _glBindBuffer(target, buffer) {
          glBindBuffer(target, buffer);
          if (target == GLctx.ARRAY_BUFFER) {
            if (GLEmulation.currentVao) {
              assert(GLEmulation.currentVao.arrayBuffer == buffer || GLEmulation.currentVao.arrayBuffer == 0 || buffer == 0, 'TODO: support for multiple array buffers in vao');
              GLEmulation.currentVao.arrayBuffer = buffer;
            }
          } else if (target == GLctx.ELEMENT_ARRAY_BUFFER) {
            if (GLEmulation.currentVao) GLEmulation.currentVao.elementArrayBuffer = buffer;
          }
        };
        
  
        var glGetFloatv = _glGetFloatv;
        _glGetFloatv = _emscripten_glGetFloatv = function _glGetFloatv(pname, params) {
          if (pname == 0x0BA6) { // GL_MODELVIEW_MATRIX
            HEAPF32.set(GLImmediate.matrix[0/*m*/], params >> 2);
          } else if (pname == 0x0BA7) { // GL_PROJECTION_MATRIX
            HEAPF32.set(GLImmediate.matrix[1/*p*/], params >> 2);
          } else if (pname == 0x0BA8) { // GL_TEXTURE_MATRIX
            HEAPF32.set(GLImmediate.matrix[2/*t*/ + GLImmediate.clientActiveTexture], params >> 2);
          } else if (pname == 0x0B66) { // GL_FOG_COLOR
            HEAPF32.set(GLEmulation.fogColor, params >> 2);
          } else if (pname == 0x0B63) { // GL_FOG_START
            HEAPF32[((params)>>2)]=GLEmulation.fogStart;
          } else if (pname == 0x0B64) { // GL_FOG_END
            HEAPF32[((params)>>2)]=GLEmulation.fogEnd;
          } else if (pname == 0x0B62) { // GL_FOG_DENSITY
            HEAPF32[((params)>>2)]=GLEmulation.fogDensity;
          } else if (pname == 0x0B65) { // GL_FOG_MODE
            HEAPF32[((params)>>2)]=GLEmulation.fogMode;
          } else {
            glGetFloatv(pname, params);
          }
        };
        
  
        var glHint = _glHint;
        _glHint = _emscripten_glHint = function _glHint(target, mode) {
          if (target == 0x84EF) { // GL_TEXTURE_COMPRESSION_HINT
            return;
          }
          glHint(target, mode);
        };
        
  
        var glEnableVertexAttribArray = _glEnableVertexAttribArray;
        _glEnableVertexAttribArray = _emscripten_glEnableVertexAttribArray = function _glEnableVertexAttribArray(index) {
          glEnableVertexAttribArray(index);
          GLEmulation.enabledVertexAttribArrays[index] = 1;
          if (GLEmulation.currentVao) GLEmulation.currentVao.enabledVertexAttribArrays[index] = 1;
        };
        
  
        var glDisableVertexAttribArray = _glDisableVertexAttribArray;
        _glDisableVertexAttribArray = _emscripten_glDisableVertexAttribArray = function _glDisableVertexAttribArray(index) {
          glDisableVertexAttribArray(index);
          delete GLEmulation.enabledVertexAttribArrays[index];
          if (GLEmulation.currentVao) delete GLEmulation.currentVao.enabledVertexAttribArrays[index];
        };
        
  
        var glVertexAttribPointer = _glVertexAttribPointer;
        _glVertexAttribPointer = _emscripten_glVertexAttribPointer = function _glVertexAttribPointer(index, size, type, normalized, stride, pointer) {
          glVertexAttribPointer(index, size, type, normalized, stride, pointer);
          if (GLEmulation.currentVao) { // TODO: avoid object creation here? likely not hot though
            GLEmulation.currentVao.vertexAttribPointers[index] = [index, size, type, normalized, stride, pointer];
          }
        };
        
      },getAttributeFromCapability:function (cap) {
        var attrib = null;
        switch (cap) {
          case 0x0de1: // GL_TEXTURE_2D - XXX not according to spec, and not in desktop GL, but works in some GLES1.x apparently, so support it
            abort("GL_TEXTURE_2D is not a spec-defined capability for gl{Enable,Disable}ClientState.");
            // Fall through:
          case 0x8078: // GL_TEXTURE_COORD_ARRAY
            attrib = GLImmediate.TEXTURE0 + GLImmediate.clientActiveTexture; break;
          case 0x8074: // GL_VERTEX_ARRAY
            attrib = GLImmediate.VERTEX; break;
          case 0x8075: // GL_NORMAL_ARRAY
            attrib = GLImmediate.NORMAL; break;
          case 0x8076: // GL_COLOR_ARRAY
            attrib = GLImmediate.COLOR; break;
        }
        return attrib;
      }};function _emscripten_glVertexPointer(size, type, stride, pointer) {
      GLImmediate.setClientAttribute(GLImmediate.VERTEX, size, type, stride, pointer);
    }

  function _emscripten_glUniform3iv(location, count, value) {
      location = GL.uniforms[location];
      count *= 3;
      value = HEAP32.subarray((value)>>2,(value+count*4)>>2);
      GLctx.uniform3iv(location, value);
    }

  function _emscripten_glShaderSource(shader, count, string, length) {
      var source = GL.getSource(shader, count, string, length);
      GLctx.shaderSource(GL.shaders[shader], source);
    }

  
  function _realloc() { throw 'bad' }
  Module["_realloc"] = _realloc; 
  Module["_saveSetjmp"] = _saveSetjmp;

  
  
  var _tzname=allocate(8, "i32*", ALLOC_STATIC);
  
  var _daylight=allocate(1, "i32*", ALLOC_STATIC);
  
  var _timezone=allocate(1, "i32*", ALLOC_STATIC);function _tzset() {
      // TODO: Use (malleable) environment variables instead of system settings.
      if (_tzset.called) return;
      _tzset.called = true;
  
      HEAP32[((_timezone)>>2)]=-(new Date()).getTimezoneOffset() * 60;
  
      var winter = new Date(2000, 0, 1);
      var summer = new Date(2000, 6, 1);
      HEAP32[((_daylight)>>2)]=Number(winter.getTimezoneOffset() != summer.getTimezoneOffset());
  
      function extractZone(date) {
        var match = date.toTimeString().match(/\(([A-Za-z ]+)\)$/);
        return match ? match[1] : "GMT";
      };
      var winterName = extractZone(winter);
      var summerName = extractZone(summer);
      var winterNamePtr = allocate(intArrayFromString(winterName), 'i8', ALLOC_NORMAL);
      var summerNamePtr = allocate(intArrayFromString(summerName), 'i8', ALLOC_NORMAL);
      if (summer.getTimezoneOffset() < winter.getTimezoneOffset()) {
        // Northern hemisphere
        HEAP32[((_tzname)>>2)]=winterNamePtr;
        HEAP32[(((_tzname)+(4))>>2)]=summerNamePtr;
      } else {
        HEAP32[((_tzname)>>2)]=summerNamePtr;
        HEAP32[(((_tzname)+(4))>>2)]=winterNamePtr;
      }
    }function _mktime(tmPtr) {
      _tzset();
      var date = new Date(HEAP32[(((tmPtr)+(20))>>2)] + 1900,
                          HEAP32[(((tmPtr)+(16))>>2)],
                          HEAP32[(((tmPtr)+(12))>>2)],
                          HEAP32[(((tmPtr)+(8))>>2)],
                          HEAP32[(((tmPtr)+(4))>>2)],
                          HEAP32[((tmPtr)>>2)],
                          0);
  
      // There's an ambiguous hour when the time goes back; the tm_isdst field is
      // used to disambiguate it.  Date() basically guesses, so we fix it up if it
      // guessed wrong, or fill in tm_isdst with the guess if it's -1.
      var dst = HEAP32[(((tmPtr)+(32))>>2)];
      var guessedOffset = date.getTimezoneOffset();
      var start = new Date(date.getFullYear(), 0, 1);
      var summerOffset = new Date(2000, 6, 1).getTimezoneOffset();
      var winterOffset = start.getTimezoneOffset();
      var dstOffset = Math.min(winterOffset, summerOffset); // DST is in December in South
      if (dst < 0) {
        HEAP32[(((tmPtr)+(32))>>2)]=Number(winterOffset != guessedOffset);
      } else if ((dst > 0) != (winterOffset != guessedOffset)) {
        var summerOffset = new Date(date.getFullYear(), 6, 1).getTimezoneOffset();
        var trueOffset = dst > 0 ? summerOffset : winterOffset;
        // Don't try setMinutes(date.getMinutes() + ...) -- it's messed up.
        date.setTime(date.getTime() + (trueOffset - guessedOffset)*60000);
      }
  
      HEAP32[(((tmPtr)+(24))>>2)]=date.getDay();
      var yday = ((date.getTime() - start.getTime()) / (1000 * 60 * 60 * 24))|0;
      HEAP32[(((tmPtr)+(28))>>2)]=yday;
  
      return (date.getTime() / 1000)|0;
    }

  function _emscripten_glIsTexture(texture) {
      var texture = GL.textures[texture];
      if (!texture) return 0;
      return GLctx.isTexture(texture);
    }

  function _emscripten_glTexParameterf(x0, x1, x2) { GLctx.texParameterf(x0, x1, x2) }

  function _emscripten_glTexParameteri(x0, x1, x2) { GLctx.texParameteri(x0, x1, x2) }

  
  var SYSCALLS={DEFAULT_POLLMASK:5,mappings:{},umask:511,calculateAt:function (dirfd, path) {
        if (path[0] !== '/') {
          // relative path
          var dir;
          if (dirfd === -100) {
            dir = FS.cwd();
          } else {
            var dirstream = FS.getStream(dirfd);
            if (!dirstream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
            dir = dirstream.path;
          }
          path = PATH.join2(dir, path);
        }
        return path;
      },doStat:function (func, path, buf) {
        try {
          var stat = func(path);
        } catch (e) {
          if (e && e.node && PATH.normalize(path) !== PATH.normalize(FS.getPath(e.node))) {
            // an error occurred while trying to look up the path; we should just report ENOTDIR
            return -ERRNO_CODES.ENOTDIR;
          }
          throw e;
        }
        HEAP32[((buf)>>2)]=stat.dev;
        HEAP32[(((buf)+(4))>>2)]=0;
        HEAP32[(((buf)+(8))>>2)]=stat.ino;
        HEAP32[(((buf)+(12))>>2)]=stat.mode;
        HEAP32[(((buf)+(16))>>2)]=stat.nlink;
        HEAP32[(((buf)+(20))>>2)]=stat.uid;
        HEAP32[(((buf)+(24))>>2)]=stat.gid;
        HEAP32[(((buf)+(28))>>2)]=stat.rdev;
        HEAP32[(((buf)+(32))>>2)]=0;
        HEAP32[(((buf)+(36))>>2)]=stat.size;
        HEAP32[(((buf)+(40))>>2)]=4096;
        HEAP32[(((buf)+(44))>>2)]=stat.blocks;
        HEAP32[(((buf)+(48))>>2)]=(stat.atime.getTime() / 1000)|0;
        HEAP32[(((buf)+(52))>>2)]=0;
        HEAP32[(((buf)+(56))>>2)]=(stat.mtime.getTime() / 1000)|0;
        HEAP32[(((buf)+(60))>>2)]=0;
        HEAP32[(((buf)+(64))>>2)]=(stat.ctime.getTime() / 1000)|0;
        HEAP32[(((buf)+(68))>>2)]=0;
        HEAP32[(((buf)+(72))>>2)]=stat.ino;
        return 0;
      },doMsync:function (addr, stream, len, flags) {
        var buffer = new Uint8Array(HEAPU8.subarray(addr, addr + len));
        FS.msync(stream, buffer, 0, len, flags);
      },doMkdir:function (path, mode) {
        // remove a trailing slash, if one - /a/b/ has basename of '', but
        // we want to create b in the context of this function
        path = PATH.normalize(path);
        if (path[path.length-1] === '/') path = path.substr(0, path.length-1);
        FS.mkdir(path, mode, 0);
        return 0;
      },doMknod:function (path, mode, dev) {
        // we don't want this in the JS API as it uses mknod to create all nodes.
        switch (mode & 61440) {
          case 32768:
          case 8192:
          case 24576:
          case 4096:
          case 49152:
            break;
          default: return -ERRNO_CODES.EINVAL;
        }
        FS.mknod(path, mode, dev);
        return 0;
      },doReadlink:function (path, buf, bufsize) {
        if (bufsize <= 0) return -ERRNO_CODES.EINVAL;
        var ret = FS.readlink(path);
        ret = ret.slice(0, Math.max(0, bufsize));
        writeStringToMemory(ret, buf, true);
        return ret.length;
      },doAccess:function (path, amode) {
        if (amode & ~7) {
          // need a valid mode
          return -ERRNO_CODES.EINVAL;
        }
        var node;
        var lookup = FS.lookupPath(path, { follow: true });
        node = lookup.node;
        var perms = '';
        if (amode & 4) perms += 'r';
        if (amode & 2) perms += 'w';
        if (amode & 1) perms += 'x';
        if (perms /* otherwise, they've just passed F_OK */ && FS.nodePermissions(node, perms)) {
          return -ERRNO_CODES.EACCES;
        }
        return 0;
      },doDup:function (path, flags, suggestFD) {
        var suggest = FS.getStream(suggestFD);
        if (suggest) FS.close(suggest);
        return FS.open(path, flags, 0, suggestFD, suggestFD).fd;
      },doReadv:function (stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.read(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
          if (curr < len) break; // nothing more to read
        }
        return ret;
      },doWritev:function (stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.write(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
        }
        return ret;
      },varargs:0,get:function (varargs) {
        SYSCALLS.varargs += 4;
        var ret = HEAP32[(((SYSCALLS.varargs)-(4))>>2)];
        return ret;
      },getStr:function () {
        var ret = Pointer_stringify(SYSCALLS.get());
        return ret;
      },getStreamFromFD:function () {
        var stream = FS.getStream(SYSCALLS.get());
        if (!stream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        return stream;
      },getSocketFromFD:function () {
        var socket = SOCKFS.getSocket(SYSCALLS.get());
        if (!socket) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        return socket;
      },getSocketAddress:function (allowNull) {
        var addrp = SYSCALLS.get(), addrlen = SYSCALLS.get();
        if (allowNull && addrp === 0) return null;
        var info = __read_sockaddr(addrp, addrlen);
        if (info.errno) throw new FS.ErrnoError(info.errno);
        info.addr = DNS.lookup_addr(info.addr) || info.addr;
        return info;
      },get64:function () {
        var low = SYSCALLS.get(), high = SYSCALLS.get();
        if (low >= 0) assert(high === 0);
        else assert(high === -1);
        return low;
      },getZero:function () {
        assert(SYSCALLS.get() === 0);
      }};function ___syscall54(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // ioctl
      var stream = SYSCALLS.getStreamFromFD(), op = SYSCALLS.get();
      switch (op) {
        case 21505: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0;
        }
        case 21506: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0; // no-op, not actually adjusting terminal settings
        }
        case 21519: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          var argp = SYSCALLS.get();
          HEAP32[((argp)>>2)]=0;
          return 0;
        }
        case 21520: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return -ERRNO_CODES.EINVAL; // not supported
        }
        case 21531: {
          var argp = SYSCALLS.get();
          return FS.ioctl(stream, op, argp);
        }
        default: abort('bad ioctl syscall ' + op);
      }
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  
  var ___tm_current=allocate(44, "i8", ALLOC_STATIC);
  
  
  var ___tm_timezone=allocate(intArrayFromString("GMT"), "i8", ALLOC_STATIC);function _localtime_r(time, tmPtr) {
      _tzset();
      var date = new Date(HEAP32[((time)>>2)]*1000);
      HEAP32[((tmPtr)>>2)]=date.getSeconds();
      HEAP32[(((tmPtr)+(4))>>2)]=date.getMinutes();
      HEAP32[(((tmPtr)+(8))>>2)]=date.getHours();
      HEAP32[(((tmPtr)+(12))>>2)]=date.getDate();
      HEAP32[(((tmPtr)+(16))>>2)]=date.getMonth();
      HEAP32[(((tmPtr)+(20))>>2)]=date.getFullYear()-1900;
      HEAP32[(((tmPtr)+(24))>>2)]=date.getDay();
  
      var start = new Date(date.getFullYear(), 0, 1);
      var yday = ((date.getTime() - start.getTime()) / (1000 * 60 * 60 * 24))|0;
      HEAP32[(((tmPtr)+(28))>>2)]=yday;
      HEAP32[(((tmPtr)+(36))>>2)]=-(date.getTimezoneOffset() * 60);
  
      // DST is in December in South
      var summerOffset = new Date(2000, 6, 1).getTimezoneOffset();
      var winterOffset = start.getTimezoneOffset();
      var dst = (date.getTimezoneOffset() == Math.min(winterOffset, summerOffset))|0;
      HEAP32[(((tmPtr)+(32))>>2)]=dst;
  
      var zonePtr = HEAP32[(((_tzname)+(dst ? Runtime.QUANTUM_SIZE : 0))>>2)];
      HEAP32[(((tmPtr)+(40))>>2)]=zonePtr;
  
      return tmPtr;
    }function _localtime(time) {
      return _localtime_r(time, ___tm_current);
    }

  function _emscripten_glUniform4f(location, v0, v1, v2, v3) {
      location = GL.uniforms[location];
      GLctx.uniform4f(location, v0, v1, v2, v3);
    }

  function _emscripten_glFrustum(left, right, bottom, top_, nearVal, farVal) {
      GLImmediate.matricesModified = true;
      GLImmediate.matrixVersion[GLImmediate.currentMatrix] = (GLImmediate.matrixVersion[GLImmediate.currentMatrix] + 1)|0;
      GLImmediate.matrixLib.mat4.multiply(GLImmediate.matrix[GLImmediate.currentMatrix],
          GLImmediate.matrixLib.mat4.frustum(left, right, bottom, top_, nearVal, farVal));
    }

  
  
  function _emscripten_get_now() {
      if (!_emscripten_get_now.actual) {
        if (ENVIRONMENT_IS_NODE) {
          _emscripten_get_now.actual = function _emscripten_get_now_actual() {
            var t = process['hrtime']();
            return t[0] * 1e3 + t[1] / 1e6;
          }
        } else if (typeof dateNow !== 'undefined') {
          _emscripten_get_now.actual = dateNow;
        } else if (typeof self === 'object' && self['performance'] && typeof self['performance']['now'] === 'function') {
          _emscripten_get_now.actual = function _emscripten_get_now_actual() { return self['performance']['now'](); };
        } else if (typeof performance === 'object' && typeof performance['now'] === 'function') {
          _emscripten_get_now.actual = function _emscripten_get_now_actual() { return performance['now'](); };
        } else {
          _emscripten_get_now.actual = Date.now;
        }
      }
      return _emscripten_get_now.actual();
    }var GLFW={Window:function (id, width, height, title, monitor, share) {
        this.id = id;
        this.x = 0;
        this.y = 0;
        this.storedX = 0; // Used to store X before fullscreen
        this.storedY = 0; // Used to store Y before fullscreen
        this.width = width;
        this.height = height;
        this.storedWidth = width; // Used to store width before fullscreen
        this.storedHeight = height; // Used to store height before fullscreen
        this.title = title;
        this.monitor = monitor;
        this.share = share;
        this.attributes = GLFW.hints;
        this.inputModes = {
          0x00033001:0x00034001, // GLFW_CURSOR (GLFW_CURSOR_NORMAL)
          0x00033002:0, // GLFW_STICKY_KEYS
          0x00033003:0, // GLFW_STICKY_MOUSE_BUTTONS
        };
        this.buttons = 0;
        this.keys = new Array();
        this.shouldClose = 0;
        this.title = null;
        this.windowPosFunc = null; // GLFWwindowposfun
        this.windowSizeFunc = null; // GLFWwindowsizefun
        this.windowCloseFunc = null; // GLFWwindowclosefun
        this.windowRefreshFunc = null; // GLFWwindowrefreshfun
        this.windowFocusFunc = null; // GLFWwindowfocusfun
        this.windowIconifyFunc = null; // GLFWwindowiconifyfun
        this.framebufferSizeFunc = null; // GLFWframebuffersizefun
        this.mouseButtonFunc = null; // GLFWmousebuttonfun
        this.cursorPosFunc = null; // GLFWcursorposfun
        this.cursorEnterFunc = null; // GLFWcursorenterfun
        this.scrollFunc = null; // GLFWscrollfun
        this.keyFunc = null; // GLFWkeyfun
        this.charFunc = null; // GLFWcharfun
        this.userptr = null;
      },WindowFromId:function (id) {
        if (id <= 0 || !GLFW.windows) return null;
        return GLFW.windows[id - 1];
      },errorFunc:null,monitorFunc:null,active:null,windows:null,monitors:null,monitorString:null,versionString:null,initialTime:null,extensions:null,hints:null,defaultHints:{131073:0,131074:0,131075:1,131076:1,131077:1,135169:8,135170:8,135171:8,135172:8,135173:24,135174:8,135175:0,135176:0,135177:0,135178:0,135179:0,135180:0,135181:0,135182:0,135183:0,139265:196609,139266:1,139267:0,139268:0,139269:0,139270:0,139271:0,139272:0},DOMToGLFWKeyCode:function (keycode) {
        switch (keycode) {
          case 0x20:return 32; // DOM_VK_SPACE -> GLFW_KEY_SPACE
          case 0xDE:return 39; // DOM_VK_QUOTE -> GLFW_KEY_APOSTROPHE
          case 0xBC:return 44; // DOM_VK_COMMA -> GLFW_KEY_COMMA
          case 0xAD:return 45; // DOM_VK_HYPHEN_MINUS -> GLFW_KEY_MINUS
          case 0xBE:return 46; // DOM_VK_PERIOD -> GLFW_KEY_PERIOD
          case 0xBF:return 47; // DOM_VK_SLASH -> GLFW_KEY_SLASH
          case 0x30:return 48; // DOM_VK_0 -> GLFW_KEY_0
          case 0x31:return 49; // DOM_VK_1 -> GLFW_KEY_1
          case 0x32:return 50; // DOM_VK_2 -> GLFW_KEY_2
          case 0x33:return 51; // DOM_VK_3 -> GLFW_KEY_3
          case 0x34:return 52; // DOM_VK_4 -> GLFW_KEY_4
          case 0x35:return 53; // DOM_VK_5 -> GLFW_KEY_5
          case 0x36:return 54; // DOM_VK_6 -> GLFW_KEY_6
          case 0x37:return 55; // DOM_VK_7 -> GLFW_KEY_7
          case 0x38:return 56; // DOM_VK_8 -> GLFW_KEY_8
          case 0x39:return 57; // DOM_VK_9 -> GLFW_KEY_9
          case 0x3B:return 59; // DOM_VK_SEMICOLON -> GLFW_KEY_SEMICOLON
          case 0x61:return 61; // DOM_VK_EQUALS -> GLFW_KEY_EQUAL
          case 0x41:return 65; // DOM_VK_A -> GLFW_KEY_A
          case 0x42:return 66; // DOM_VK_B -> GLFW_KEY_B
          case 0x43:return 67; // DOM_VK_C -> GLFW_KEY_C
          case 0x44:return 68; // DOM_VK_D -> GLFW_KEY_D
          case 0x45:return 69; // DOM_VK_E -> GLFW_KEY_E
          case 0x46:return 70; // DOM_VK_F -> GLFW_KEY_F
          case 0x47:return 71; // DOM_VK_G -> GLFW_KEY_G
          case 0x48:return 72; // DOM_VK_H -> GLFW_KEY_H
          case 0x49:return 73; // DOM_VK_I -> GLFW_KEY_I
          case 0x4A:return 74; // DOM_VK_J -> GLFW_KEY_J
          case 0x4B:return 75; // DOM_VK_K -> GLFW_KEY_K
          case 0x4C:return 76; // DOM_VK_L -> GLFW_KEY_L
          case 0x4D:return 77; // DOM_VK_M -> GLFW_KEY_M
          case 0x4E:return 78; // DOM_VK_N -> GLFW_KEY_N
          case 0x4F:return 79; // DOM_VK_O -> GLFW_KEY_O
          case 0x50:return 80; // DOM_VK_P -> GLFW_KEY_P
          case 0x51:return 81; // DOM_VK_Q -> GLFW_KEY_Q
          case 0x52:return 82; // DOM_VK_R -> GLFW_KEY_R
          case 0x53:return 83; // DOM_VK_S -> GLFW_KEY_S
          case 0x54:return 84; // DOM_VK_T -> GLFW_KEY_T
          case 0x55:return 85; // DOM_VK_U -> GLFW_KEY_U
          case 0x56:return 86; // DOM_VK_V -> GLFW_KEY_V
          case 0x57:return 87; // DOM_VK_W -> GLFW_KEY_W
          case 0x58:return 88; // DOM_VK_X -> GLFW_KEY_X
          case 0x59:return 89; // DOM_VK_Y -> GLFW_KEY_Y
          case 0x5a:return 90; // DOM_VK_Z -> GLFW_KEY_Z
          case 0xDB:return 91; // DOM_VK_OPEN_BRACKET -> GLFW_KEY_LEFT_BRACKET
          case 0xDC:return 92; // DOM_VK_BACKSLASH -> GLFW_KEY_BACKSLASH
          case 0xDD:return 93; // DOM_VK_CLOSE_BRACKET -> GLFW_KEY_RIGHT_BRACKET
          case 0xC0:return 94; // DOM_VK_BACK_QUOTE -> GLFW_KEY_GRAVE_ACCENT
          case 0x1B:return 256; // DOM_VK_ESCAPE -> GLFW_KEY_ESCAPE
          case 0x0D:return 257; // DOM_VK_RETURN -> GLFW_KEY_ENTER
          case 0x09:return 258; // DOM_VK_TAB -> GLFW_KEY_TAB
          case 0x08:return 259; // DOM_VK_BACK -> GLFW_KEY_BACKSPACE
          case 0x2D:return 260; // DOM_VK_INSERT -> GLFW_KEY_INSERT
          case 0x2E:return 261; // DOM_VK_DELETE -> GLFW_KEY_DELETE
          case 0x27:return 262; // DOM_VK_RIGHT -> GLFW_KEY_RIGHT
          case 0x25:return 263; // DOM_VK_LEFT -> GLFW_KEY_LEFT
          case 0x28:return 264; // DOM_VK_DOWN -> GLFW_KEY_DOWN
          case 0x26:return 265; // DOM_VK_UP -> GLFW_KEY_UP
          case 0x21:return 266; // DOM_VK_PAGE_UP -> GLFW_KEY_PAGE_UP
          case 0x22:return 267; // DOM_VK_PAGE_DOWN -> GLFW_KEY_PAGE_DOWN
          case 0x24:return 268; // DOM_VK_HOME -> GLFW_KEY_HOME
          case 0x23:return 269; // DOM_VK_END -> GLFW_KEY_END
          case 0x14:return 280; // DOM_VK_CAPS_LOCK -> GLFW_KEY_CAPS_LOCK
          case 0x91:return 281; // DOM_VK_SCROLL_LOCK -> GLFW_KEY_SCROLL_LOCK
          case 0x90:return 282; // DOM_VK_NUM_LOCK -> GLFW_KEY_NUM_LOCK
          case 0x2C:return 283; // DOM_VK_SNAPSHOT -> GLFW_KEY_PRINT_SCREEN
          case 0x13:return 284; // DOM_VK_PAUSE -> GLFW_KEY_PAUSE
          case 0x70:return 290; // DOM_VK_F1 -> GLFW_KEY_F1
          case 0x71:return 291; // DOM_VK_F2 -> GLFW_KEY_F2
          case 0x72:return 292; // DOM_VK_F3 -> GLFW_KEY_F3
          case 0x73:return 293; // DOM_VK_F4 -> GLFW_KEY_F4
          case 0x74:return 294; // DOM_VK_F5 -> GLFW_KEY_F5
          case 0x75:return 295; // DOM_VK_F6 -> GLFW_KEY_F6
          case 0x76:return 296; // DOM_VK_F7 -> GLFW_KEY_F7
          case 0x77:return 297; // DOM_VK_F8 -> GLFW_KEY_F8
          case 0x78:return 298; // DOM_VK_F9 -> GLFW_KEY_F9
          case 0x79:return 299; // DOM_VK_F10 -> GLFW_KEY_F10
          case 0x7A:return 300; // DOM_VK_F11 -> GLFW_KEY_F11
          case 0x7B:return 301; // DOM_VK_F12 -> GLFW_KEY_F12
          case 0x7C:return 302; // DOM_VK_F13 -> GLFW_KEY_F13
          case 0x7D:return 303; // DOM_VK_F14 -> GLFW_KEY_F14
          case 0x7E:return 304; // DOM_VK_F15 -> GLFW_KEY_F15
          case 0x7F:return 305; // DOM_VK_F16 -> GLFW_KEY_F16
          case 0x80:return 306; // DOM_VK_F17 -> GLFW_KEY_F17
          case 0x81:return 307; // DOM_VK_F18 -> GLFW_KEY_F18
          case 0x82:return 308; // DOM_VK_F19 -> GLFW_KEY_F19
          case 0x83:return 309; // DOM_VK_F20 -> GLFW_KEY_F20
          case 0x84:return 310; // DOM_VK_F21 -> GLFW_KEY_F21
          case 0x85:return 311; // DOM_VK_F22 -> GLFW_KEY_F22
          case 0x86:return 312; // DOM_VK_F23 -> GLFW_KEY_F23
          case 0x87:return 313; // DOM_VK_F24 -> GLFW_KEY_F24
          case 0x88:return 314; // 0x88 (not used?) -> GLFW_KEY_F25
          case 0x60:return 320; // DOM_VK_NUMPAD0 -> GLFW_KEY_KP_0
          case 0x61:return 321; // DOM_VK_NUMPAD1 -> GLFW_KEY_KP_1
          case 0x62:return 322; // DOM_VK_NUMPAD2 -> GLFW_KEY_KP_2
          case 0x63:return 323; // DOM_VK_NUMPAD3 -> GLFW_KEY_KP_3
          case 0x64:return 324; // DOM_VK_NUMPAD4 -> GLFW_KEY_KP_4
          case 0x65:return 325; // DOM_VK_NUMPAD5 -> GLFW_KEY_KP_5
          case 0x66:return 326; // DOM_VK_NUMPAD6 -> GLFW_KEY_KP_6
          case 0x67:return 327; // DOM_VK_NUMPAD7 -> GLFW_KEY_KP_7
          case 0x68:return 328; // DOM_VK_NUMPAD8 -> GLFW_KEY_KP_8
          case 0x69:return 329; // DOM_VK_NUMPAD9 -> GLFW_KEY_KP_9
          case 0x6E:return 330; // DOM_VK_DECIMAL -> GLFW_KEY_KP_DECIMAL
          case 0x6F:return 331; // DOM_VK_DIVIDE -> GLFW_KEY_KP_DIVIDE
          case 0x6A:return 332; // DOM_VK_MULTIPLY -> GLFW_KEY_KP_MULTIPLY
          case 0x6D:return 333; // DOM_VK_SUBTRACT -> GLFW_KEY_KP_SUBTRACT
          case 0x6B:return 334; // DOM_VK_ADD -> GLFW_KEY_KP_ADD
          // case 0x0D:return 335; // DOM_VK_RETURN -> GLFW_KEY_KP_ENTER (DOM_KEY_LOCATION_RIGHT)
          // case 0x61:return 336; // DOM_VK_EQUALS -> GLFW_KEY_KP_EQUAL (DOM_KEY_LOCATION_RIGHT)
          case 0x10:return 340; // DOM_VK_SHIFT -> GLFW_KEY_LEFT_SHIFT
          case 0x11:return 341; // DOM_VK_CONTROL -> GLFW_KEY_LEFT_CONTROL
          case 0x12:return 342; // DOM_VK_ALT -> GLFW_KEY_LEFT_ALT
          case 0x5B:return 343; // DOM_VK_WIN -> GLFW_KEY_LEFT_SUPER
          // case 0x10:return 344; // DOM_VK_SHIFT -> GLFW_KEY_RIGHT_SHIFT (DOM_KEY_LOCATION_RIGHT)
          // case 0x11:return 345; // DOM_VK_CONTROL -> GLFW_KEY_RIGHT_CONTROL (DOM_KEY_LOCATION_RIGHT)
          // case 0x12:return 346; // DOM_VK_ALT -> GLFW_KEY_RIGHT_ALT (DOM_KEY_LOCATION_RIGHT)
          // case 0x5B:return 347; // DOM_VK_WIN -> GLFW_KEY_RIGHT_SUPER (DOM_KEY_LOCATION_RIGHT)
          case 0x5D:return 348; // DOM_VK_CONTEXT_MENU -> GLFW_KEY_MENU
  
          // XXX: GLFW_KEY_WORLD_1, GLFW_KEY_WORLD_2 what are these?
          default:return -1; // GLFW_KEY_UNKNOWN
        };
      },getModBits:function (win) {
        var mod = 0;
        if (win.keys[340]) mod |= 0x0001; // GLFW_MOD_SHIFT
        if (win.keys[341]) mod |= 0x0002; // GLFW_MOD_CONTROL
        if (win.keys[342]) mod |= 0x0004; // GLFW_MOD_ALT
        if (win.keys[343]) mod |= 0x0008; // GLFW_MOD_SUPER
        return mod;
      },onKeyPress:function (event) {
        if (!GLFW.active || !GLFW.active.charFunc) return;
  
        // correct unicode charCode is only available with onKeyPress event
        var charCode = event.charCode;
        if (charCode == 0 || (charCode >= 0x00 && charCode <= 0x1F)) return;
  
        Runtime.dynCall('vii', GLFW.active.charFunc, [charCode, 1]);
  
      },onKeyChanged:function (event, status) {
        if (!GLFW.active) return;
  
        var key = GLFW.DOMToGLFWKeyCode(event.keyCode);
        if (key == -1) return;
  
        GLFW.active.keys[key] = status;
        if (!GLFW.active.keyFunc) return;
  
        Runtime.dynCall('vii', GLFW.active.keyFunc, [key, status]);
  
      },onKeydown:function (event) {
        GLFW.onKeyChanged(event, 1); // GLFW_PRESS
  
        // This logic comes directly from the sdl implementation. We cannot
        // call preventDefault on all keydown events otherwise onKeyPress will
        // not get called
        if (event.keyCode === 8 /* backspace */ || event.keyCode === 9 /* tab */) {
          event.preventDefault();
        }
      },onKeyup:function (event) {
        GLFW.onKeyChanged(event, 0); // GLFW_RELEASE
      },onMousemove:function (event) {
        if (!GLFW.active) return;
  
        Browser.calculateMouseEvent(event);
  
        if (event.target != Module["canvas"] || !GLFW.active.cursorPosFunc) return;
  
        Runtime.dynCall('vii', GLFW.active.cursorPosFunc, [Browser.mouseX, Browser.mouseY]);
  
      },onMouseButtonChanged:function (event, status) {
        if (!GLFW.active || !GLFW.active.mouseButtonFunc) return;
  
        Browser.calculateMouseEvent(event);
  
        if (event.target != Module["canvas"]) return;
  
        if (status == 1) { // GLFW_PRESS
          try {
            event.target.setCapture();
          } catch (e) {}
        }
  
        // DOM and glfw have different button codes
        var eventButton = event['button'];
        if (eventButton > 0) {
          if (eventButton == 1) {
            eventButton = 2;
          } else {
            eventButton = 1;
          }
        }
  
        Runtime.dynCall('vii', GLFW.active.mouseButtonFunc, [eventButton, status]);
  
      },onMouseButtonDown:function (event) {
        if (!GLFW.active) return;
        GLFW.active.buttons |= (1 << event['button']);
        GLFW.onMouseButtonChanged(event, 1); // GLFW_PRESS
      },onMouseButtonUp:function (event) {
        if (!GLFW.active) return;
        GLFW.active.buttons &= ~(1 << event['button']);
        GLFW.onMouseButtonChanged(event, 0); // GLFW_RELEASE
      },onMouseWheel:function (event) {
        // Note the minus sign that flips browser wheel direction (positive direction scrolls page down) to native wheel direction (positive direction is mouse wheel up)
        var delta = -Browser.getMouseWheelDelta(event);
        delta = (delta == 0) ? 0 : (delta > 0 ? Math.max(delta, 1) : Math.min(delta, -1)); // Quantize to integer so that minimum scroll is at least +/- 1.
        GLFW.wheelPos += delta;
  
        if (!GLFW.active || !GLFW.active.scrollFunc || event.target != Module['canvas']) return;
  
        Runtime.dynCall('vi', GLFW.active.scrollFunc, [GLFW.wheelPos]);
  
  
        event.preventDefault();
      },onFullScreenEventChange:function () {
        if (!GLFW.active) return;
  
        if (document["fullScreen"] || document["mozFullScreen"] || document["webkitIsFullScreen"]) {
          GLFW.active.storedX = GLFW.active.x;
          GLFW.active.storedY = GLFW.active.y;
          GLFW.active.storedWidth = GLFW.active.width;
          GLFW.active.storedHeight = GLFW.active.height;
          GLFW.active.x = GLFW.active.y = 0;
          GLFW.active.width = screen.width;
          GLFW.active.height = screen.height;
        } else {
          GLFW.active.x = GLFW.active.storedX;
          GLFW.active.y = GLFW.active.storedY;
          GLFW.active.width = GLFW.active.storedWidth;
          GLFW.active.height = GLFW.active.storedHeight;
        }
  
        Browser.setCanvasSize(GLFW.active.width, GLFW.active.height, true); // resets the canvas size to counter the aspect preservation of Browser.updateCanvasDimensions
  
        if (!GLFW.active.windowSizeFunc) return;
  
        Runtime.dynCall('vii', GLFW.active.windowSizeFunc, [GLFW.active.width, GLFW.active.height]);
  
      },requestFullScreen:function () {
        var RFS = Module["canvas"]['requestFullscreen'] ||
                  Module["canvas"]['requestFullScreen'] ||
                  Module["canvas"]['mozRequestFullScreen'] ||
                  Module["canvas"]['webkitRequestFullScreen'] ||
                  (function() {});
        RFS.apply(Module["canvas"], []);
      },cancelFullScreen:function () {
        var CFS = document['exitFullscreen'] ||
                  document['cancelFullScreen'] ||
                  document['mozCancelFullScreen'] ||
                  document['webkitCancelFullScreen'] ||
            (function() {});
        CFS.apply(document, []);
      },getTime:function () {
        return _emscripten_get_now() / 1000;
      },setWindowTitle:function (winid, title) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
  
        win.title = Pointer_stringify(title);
        if (GLFW.active.id == win.id) {
          document.title = win.title;
        }
      },setKeyCallback:function (winid, cbfun) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
        win.keyFunc = cbfun;
      },setCharCallback:function (winid, cbfun) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
        win.charFunc = cbfun;
      },setMouseButtonCallback:function (winid, cbfun) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
        win.mouseButtonFunc = cbfun;
      },setCursorPosCallback:function (winid, cbfun) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
        win.cursorPosFunc = cbfun;
      },setScrollCallback:function (winid, cbfun) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
        win.scrollFunc = cbfun;
      },setWindowSizeCallback:function (winid, cbfun) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
        win.windowSizeFunc = cbfun;
      },setWindowCloseCallback:function (winid, cbfun) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
        win.windowCloseFunc = cbfun;
      },setWindowRefreshCallback:function (winid, cbfun) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
        win.windowRefreshFunc = cbfun;
      },getKey:function (winid, key) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return 0;
        return win.keys[key];
      },getMouseButton:function (winid, button) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return 0;
        return (win.buttons & (1 << button)) > 0;
      },getCursorPos:function (winid, x, y) {
        setValue(x, Browser.mouseX, 'double');
        setValue(y, Browser.mouseY, 'double');
      },getMousePos:function (winid, x, y) {
        setValue(x, Browser.mouseX, 'i32');
        setValue(y, Browser.mouseY, 'i32');
      },setCursorPos:function (winid, x, y) {
      },getWindowPos:function (winid, x, y) {
        var wx = 0;
        var wy = 0;
  
        var win = GLFW.WindowFromId(winid);
        if (win) {
          wx = win.x;
          wy = win.y;
        }
  
        setValue(x, wx, 'i32');
        setValue(y, wy, 'i32');
      },setWindowPos:function (winid, x, y) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
        win.x = x;
        win.y = y;
      },getWindowSize:function (winid, width, height) {
        var ww = 0;
        var wh = 0;
  
        var win = GLFW.WindowFromId(winid);
        if (win) {
          ww = win.width;
          wh = win.height;
        }
  
        setValue(width, ww, 'i32');
        setValue(height, wh, 'i32');
      },setWindowSize:function (winid, width, height) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
  
        if (GLFW.active.id == win.id) {
          if (width == screen.width && height == screen.height) {
            GLFW.requestFullScreen();
          } else {
            GLFW.cancelFullScreen();
            Browser.setCanvasSize(width, height);
            win.width = width;
            win.height = height;
          }
        }
  
        if (!win.windowResizeFunc) return;
  
        Runtime.dynCall('vii', win.windowResizeFunc, [width, height]);
  
      },createWindow:function (width, height, title, monitor, share) {
        var i, id;
        for (i = 0; i < GLFW.windows.length && GLFW.windows[i] !== null; i++);
        if (i > 0) throw "glfwCreateWindow only supports one window at time currently";
  
        // id for window
        id = i + 1;
  
        // not valid
        if (width <= 0 || height <= 0) return 0;
  
        if (monitor) {
          GLFW.requestFullScreen();
        } else {
          Browser.setCanvasSize(width, height);
        }
  
        // Create context when there are no existing alive windows
        for (i = 0; i < GLFW.windows.length && GLFW.windows[i] == null; i++);
        if (i == GLFW.windows.length) {
          var contextAttributes = {
            antialias: (GLFW.hints[0x0002100D] > 1), // GLFW_SAMPLES
            depth: (GLFW.hints[0x00021005] > 0),     // GLFW_DEPTH_BITS
            stencil: (GLFW.hints[0x00021006] > 0)    // GLFW_STENCIL_BITS
          }
          Module.ctx = Browser.createContext(Module['canvas'], true, true, contextAttributes);
        }
  
        // If context creation failed, do not return a valid window
        if (!Module.ctx) return 0;
  
        // Get non alive id
        var win = new GLFW.Window(id, width, height, title, monitor, share);
  
        // Set window to array
        if (id - 1 == GLFW.windows.length) {
          GLFW.windows.push(win);
        } else {
          GLFW.windows[id - 1] = win;
        }
  
        GLFW.active = win;
        return win.id;
      },destroyWindow:function (winid) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
  
  
        GLFW.windows[win.id - 1] = null;
        if (GLFW.active.id == win.id)
          GLFW.active = null;
  
        // Destroy context when no alive windows
        for (var i = 0; i < GLFW.windows.length; i++)
          if (GLFW.windows[i] !== null) return;
  
        Module.ctx = Browser.destroyContext(Module['canvas'], true, true);
      },swapBuffers:function (winid) {
      },GLFW2ParamToGLFW3Param:function (param) {
        table = {
          0x00030001:0, // GLFW_MOUSE_CURSOR
          0x00030002:0, // GLFW_STICKY_KEYS
          0x00030003:0, // GLFW_STICKY_MOUSE_BUTTONS
          0x00030004:0, // GLFW_SYSTEM_KEYS
          0x00030005:0, // GLFW_KEY_REPEAT
          0x00030006:0, // GLFW_AUTO_POLL_EVENTS
          0x00020001:0, // GLFW_OPENED
          0x00020002:0, // GLFW_ACTIVE
          0x00020003:0, // GLFW_ICONIFIED
          0x00020004:0, // GLFW_ACCELERATED
          0x00020005:0x00021001, // GLFW_RED_BITS
          0x00020006:0x00021002, // GLFW_GREEN_BITS
          0x00020007:0x00021003, // GLFW_BLUE_BITS
          0x00020008:0x00021004, // GLFW_ALPHA_BITS
          0x00020009:0x00021005, // GLFW_DEPTH_BITS
          0x0002000A:0x00021006, // GLFW_STENCIL_BITS
          0x0002000B:0x0002100F, // GLFW_REFRESH_RATE
          0x0002000C:0x00021007, // GLFW_ACCUM_RED_BITS
          0x0002000D:0x00021008, // GLFW_ACCUM_GREEN_BITS
          0x0002000E:0x00021009, // GLFW_ACCUM_BLUE_BITS
          0x0002000F:0x0002100A, // GLFW_ACCUM_ALPHA_BITS
          0x00020010:0x0002100B, // GLFW_AUX_BUFFERS
          0x00020011:0x0002100C, // GLFW_STEREO
          0x00020012:0, // GLFW_WINDOW_NO_RESIZE
          0x00020013:0x0002100D, // GLFW_FSAA_SAMPLES
          0x00020014:0x00022002, // GLFW_OPENGL_VERSION_MAJOR
          0x00020015:0x00022003, // GLFW_OPENGL_VERSION_MINOR
          0x00020016:0x00022006, // GLFW_OPENGL_FORWARD_COMPAT
          0x00020017:0x00022007, // GLFW_OPENGL_DEBUG_CONTEXT
          0x00020018:0x00022008, // GLFW_OPENGL_PROFILE
        };
        return table[param];
      }};function _glfwSetWindowSizeCallback(cbfun) {
      GLFW.setWindowSizeCallback(GLFW.active.id, cbfun);
    }

  function _emscripten_glGetTexParameterfv(target, pname, params) {
      if (!params) {
        // GLES2 specification does not specify how to behave if params is a null pointer. Since calling this function does not make sense
        // if p == null, issue a GL error to notify user about it. 
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
      HEAPF32[((params)>>2)]=GLctx.getTexParameter(target, pname);
    }

  var _ceil=Math_ceil;

  function _emscripten_glBindRenderbuffer(target, renderbuffer) {
      GLctx.bindRenderbuffer(target, renderbuffer ? GL.renderbuffers[renderbuffer] : null);
    }

  function _emscripten_glViewport(x0, x1, x2, x3) { GLctx.viewport(x0, x1, x2, x3) }

  function _glfwSetMousePosCallback(cbfun) {
      GLFW.setCursorPosCallback(GLFW.active.id, cbfun);
    }

  
  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);
      return dest;
    } 
  Module["_memcpy"] = _memcpy;

  var _llvm_pow_f64=Math_pow;

  function _emscripten_glCopyTexImage2D(x0, x1, x2, x3, x4, x5, x6, x7) { GLctx.copyTexImage2D(x0, x1, x2, x3, x4, x5, x6, x7) }

  function _emscripten_glTexParameterfv(target, pname, params) {
      var param = HEAPF32[((params)>>2)];
      GLctx.texParameterf(target, pname, param);
    }

  var _emscripten_preinvoke=true;

  function _emscripten_glLinkProgram(program) {
      GLctx.linkProgram(GL.programs[program]);
      GL.programInfos[program] = null; // uniforms no longer keep the same names after linking
      GL.populateUniformTable(program);
    }

  function _emscripten_glUniform3f(location, v0, v1, v2) {
      location = GL.uniforms[location];
      GLctx.uniform3f(location, v0, v1, v2);
    }

  
  function _emscripten_glGetProgramiv(program, pname, p) {
      if (!p) {
        // GLES2 specification does not specify how to behave if p is a null pointer. Since calling this function does not make sense
        // if p == null, issue a GL error to notify user about it. 
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
      if (pname == 0x8B84) { // GL_INFO_LOG_LENGTH
        var log = GLctx.getProgramInfoLog(GL.programs[program]);
        if (log === null) log = '(unknown error)';
        HEAP32[((p)>>2)]=log.length + 1;
      } else if (pname == 0x8B87 /* GL_ACTIVE_UNIFORM_MAX_LENGTH */) {
        var ptable = GL.programInfos[program];
        if (ptable) {
          HEAP32[((p)>>2)]=ptable.maxUniformLength;
          return;
        } else if (program < GL.counter) {
          GL.recordError(0x0502 /* GL_INVALID_OPERATION */);
        } else {
          GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        }
      } else if (pname == 0x8B8A /* GL_ACTIVE_ATTRIBUTE_MAX_LENGTH */) {
        var ptable = GL.programInfos[program];
        if (ptable) {
          if (ptable.maxAttributeLength == -1) {
            var program = GL.programs[program];
            var numAttribs = GLctx.getProgramParameter(program, GLctx.ACTIVE_ATTRIBUTES);
            ptable.maxAttributeLength = 0; // Spec says if there are no active attribs, 0 must be returned.
            for(var i = 0; i < numAttribs; ++i) {
              var activeAttrib = GLctx.getActiveAttrib(program, i);
              ptable.maxAttributeLength = Math.max(ptable.maxAttributeLength, activeAttrib.name.length+1);
            }
          }
          HEAP32[((p)>>2)]=ptable.maxAttributeLength;
          return;
        } else if (program < GL.counter) {
          GL.recordError(0x0502 /* GL_INVALID_OPERATION */);
        } else {
          GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        }
      } else {
        HEAP32[((p)>>2)]=GLctx.getProgramParameter(GL.programs[program], pname);
      }
    }
  
  function _emscripten_glGetShaderiv(shader, pname, p) {
      if (!p) {
        // GLES2 specification does not specify how to behave if p is a null pointer. Since calling this function does not make sense
        // if p == null, issue a GL error to notify user about it. 
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
      if (pname == 0x8B84) { // GL_INFO_LOG_LENGTH
        var log = GLctx.getShaderInfoLog(GL.shaders[shader]);
        if (log === null) log = '(unknown error)';
        HEAP32[((p)>>2)]=log.length + 1;
      } else {
        HEAP32[((p)>>2)]=GLctx.getShaderParameter(GL.shaders[shader], pname);
      }
    }function _emscripten_glGetObjectParameterivARB(id, type, result) {
      if (GL.programs[id]) {
        if (type == 0x8B84) { // GL_OBJECT_INFO_LOG_LENGTH_ARB
          var log = GLctx.getProgramInfoLog(GL.programs[id]);
          if (log === null) log = '(unknown error)';
          HEAP32[((result)>>2)]=log.length;
          return;
        }
        _emscripten_glGetProgramiv(id, type, result);
      } else if (GL.shaders[id]) {
        if (type == 0x8B84) { // GL_OBJECT_INFO_LOG_LENGTH_ARB
          var log = GLctx.getShaderInfoLog(GL.shaders[id]);
          if (log === null) log = '(unknown error)';
          HEAP32[((result)>>2)]=log.length;
          return;
        } else if (type == 0x8B88) { // GL_OBJECT_SHADER_SOURCE_LENGTH_ARB
          var source = GLctx.getShaderSource(GL.shaders[id]);
          if (source === null) return; // If an error occurs, nothing will be written to result
          HEAP32[((result)>>2)]=source.length;
          return;
        }
        _emscripten_glGetShaderiv(id, type, result);
      } else {
        Module.printErr('WARNING: getObjectParameteriv received invalid id: ' + id);
      }
    }

  function _emscripten_glBlendFunc(x0, x1) { GLctx.blendFunc(x0, x1) }

  function _emscripten_glUniform3i(location, v0, v1, v2) {
      location = GL.uniforms[location];
      GLctx.uniform3i(location, v0, v1, v2);
    }

  function _emscripten_glStencilOp(x0, x1, x2) { GLctx.stencilOp(x0, x1, x2) }

  function _emscripten_glBindAttribLocation(program, index, name) {
      name = Pointer_stringify(name);
      GLctx.bindAttribLocation(GL.programs[program], index, name);
    }

  function _glfwGetMouseButton(button) {
      return GLFW.getMouseButton(GLFW.active.id, button);
    }

  function _emscripten_glEnableVertexAttribArray(index) {
      GLctx.enableVertexAttribArray(index);
    }

   
  Module["_memset"] = _memset;

  var _BDtoILow=true;

  function _emscripten_glUniform1i(location, v0) {
      location = GL.uniforms[location];
      GLctx.uniform1i(location, v0);
    }

  
  function _emscripten_glColor4f(r, g, b, a) {
      r = Math.max(Math.min(r, 1), 0);
      g = Math.max(Math.min(g, 1), 0);
      b = Math.max(Math.min(b, 1), 0);
      a = Math.max(Math.min(a, 1), 0);
  
      // TODO: make ub the default, not f, save a few mathops
      if (GLImmediate.mode >= 0) {
        var start = GLImmediate.vertexCounter << 2;
        GLImmediate.vertexDataU8[start + 0] = r * 255;
        GLImmediate.vertexDataU8[start + 1] = g * 255;
        GLImmediate.vertexDataU8[start + 2] = b * 255;
        GLImmediate.vertexDataU8[start + 3] = a * 255;
        GLImmediate.vertexCounter++;
        GLImmediate.addRendererComponent(GLImmediate.COLOR, 4, GLctx.UNSIGNED_BYTE);
      } else {
        GLImmediate.clientColor[0] = r;
        GLImmediate.clientColor[1] = g;
        GLImmediate.clientColor[2] = b;
        GLImmediate.clientColor[3] = a;
      }
    }function _glColor3f(r, g, b) {
      _emscripten_glColor4f(r, g, b, 1);
    }

  function ___lock() {}

  function _emscripten_glBlendFuncSeparate(x0, x1, x2, x3) { GLctx.blendFuncSeparate(x0, x1, x2, x3) }

  var _asin=Math_asin;

  function _emscripten_glVertexAttrib3f(x0, x1, x2, x3) { GLctx.vertexAttrib3f(x0, x1, x2, x3) }

  function _clock() {
      if (_clock.start === undefined) _clock.start = Date.now();
      return ((Date.now() - _clock.start) * (1000000 / 1000))|0;
    }

  function _emscripten_glEnable(x0) { GLctx.enable(x0) }

  function _emscripten_glNormalPointer(type, stride, pointer) {
      GLImmediate.setClientAttribute(GLImmediate.NORMAL, 3, type, stride, pointer);
    }


  var _emscripten_get_longjmp_result=true;

  function _glLoadIdentity() {
      GLImmediate.matricesModified = true;
      GLImmediate.matrixVersion[GLImmediate.currentMatrix] = (GLImmediate.matrixVersion[GLImmediate.currentMatrix] + 1)|0;
      GLImmediate.matrixLib.mat4.identity(GLImmediate.matrix[GLImmediate.currentMatrix]);
    }

  function _pthread_cleanup_push(routine, arg) {
      __ATEXIT__.push(function() { Runtime.dynCall('vi', routine, [arg]) })
      _pthread_cleanup_push.level = __ATEXIT__.length;
    }

  
  function emscriptenWebGLGetVertexAttrib(index, pname, params, type) {
      if (!params) {
        // GLES2 specification does not specify how to behave if params is a null pointer. Since calling this function does not make sense
        // if params == null, issue a GL error to notify user about it. 
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
      var data = GLctx.getVertexAttrib(index, pname);
      if (typeof data == 'number' || typeof data == 'boolean') {
        switch (type) {
          case 'Integer': HEAP32[((params)>>2)]=data; break;
          case 'Float': HEAPF32[((params)>>2)]=data; break;
          case 'FloatToInteger': HEAP32[((params)>>2)]=Math.fround(data); break;
          default: throw 'internal emscriptenWebGLGetVertexAttrib() error, bad type: ' + type;
        }
      } else {
        for (var i = 0; i < data.length; i++) {
          switch (type) {
            case 'Integer': HEAP32[(((params)+(i))>>2)]=data[i]; break;
            case 'Float': HEAPF32[(((params)+(i))>>2)]=data[i]; break;
            case 'FloatToInteger': HEAP32[(((params)+(i))>>2)]=Math.fround(data[i]); break;
            default: throw 'internal emscriptenWebGLGetVertexAttrib() error, bad type: ' + type;
          }
        }
      }
    }function _emscripten_glGetVertexAttribfv(index, pname, params) {
      // N.B. This function may only be called if the vertex attribute was specified using the function glVertexAttrib*f(),
      // otherwise the results are undefined. (GLES3 spec 6.1.12)
      emscriptenWebGLGetVertexAttrib(index, pname, params, 'Float');
    }

  function _glVertex3f(x, y, z) {
      assert(GLImmediate.mode >= 0); // must be in begin/end
      GLImmediate.vertexData[GLImmediate.vertexCounter++] = x;
      GLImmediate.vertexData[GLImmediate.vertexCounter++] = y;
      GLImmediate.vertexData[GLImmediate.vertexCounter++] = z || 0;
      assert(GLImmediate.vertexCounter << 2 < GL.MAX_TEMP_BUFFER_SIZE);
      GLImmediate.addRendererComponent(GLImmediate.VERTEX, 3, GLctx.FLOAT);
    }

  function _glfwExtensionSupported(extension) {
      if (!GLFW.extensions) {
        GLFW.extensions = Pointer_stringify(_glGetString(0x1F03)).split(' ');
      }
  
      if (GLFW.extensions.indexOf(extension) != -1) return 1;
  
      // extensions from GLEmulations do not come unprefixed
      // so, try with prefix
      return (GLFW.extensions.indexOf("GL_" + extension) != -1);
    }

  
  function _gmtime_r(time, tmPtr) {
      var date = new Date(HEAP32[((time)>>2)]*1000);
      HEAP32[((tmPtr)>>2)]=date.getUTCSeconds();
      HEAP32[(((tmPtr)+(4))>>2)]=date.getUTCMinutes();
      HEAP32[(((tmPtr)+(8))>>2)]=date.getUTCHours();
      HEAP32[(((tmPtr)+(12))>>2)]=date.getUTCDate();
      HEAP32[(((tmPtr)+(16))>>2)]=date.getUTCMonth();
      HEAP32[(((tmPtr)+(20))>>2)]=date.getUTCFullYear()-1900;
      HEAP32[(((tmPtr)+(24))>>2)]=date.getUTCDay();
      HEAP32[(((tmPtr)+(36))>>2)]=0;
      HEAP32[(((tmPtr)+(32))>>2)]=0;
      var start = Date.UTC(date.getUTCFullYear(), 0, 1, 0, 0, 0, 0);
      var yday = ((date.getTime() - start) / (1000 * 60 * 60 * 24))|0;
      HEAP32[(((tmPtr)+(28))>>2)]=yday;
      HEAP32[(((tmPtr)+(40))>>2)]=___tm_timezone;
  
      return tmPtr;
    }function _gmtime(time) {
      return _gmtime_r(time, ___tm_current);
    }

  function _emscripten_glDrawArraysInstanced(mode, first, count, primcount) {
      GLctx['drawArraysInstanced'](mode, first, count, primcount);
    }

  function _emscripten_glDeleteBuffers(n, buffers) {
      for (var i = 0; i < n; i++) {
        var id = HEAP32[(((buffers)+(i*4))>>2)];
        var buffer = GL.buffers[id];
  
        // From spec: "glDeleteBuffers silently ignores 0's and names that do not
        // correspond to existing buffer objects."
        if (!buffer) continue;
  
        GLctx.deleteBuffer(buffer);
        buffer.name = 0;
        GL.buffers[id] = null;
  
        if (id == GL.currArrayBuffer) GL.currArrayBuffer = 0;
        if (id == GL.currElementArrayBuffer) GL.currElementArrayBuffer = 0;
      }
    }

  function _emscripten_glTexParameteriv(target, pname, params) {
      var param = HEAP32[((params)>>2)];
      GLctx.texParameteri(target, pname, param);
    }

  function _glfwTerminate() {
      window.removeEventListener("keydown", GLFW.onKeydown, true);
      window.removeEventListener("keypress", GLFW.onKeyPress, true);
      window.removeEventListener("keyup", GLFW.onKeyup, true);
      Module["canvas"].removeEventListener("mousemove", GLFW.onMousemove, true);
      Module["canvas"].removeEventListener("mousedown", GLFW.onMouseButtonDown, true);
      Module["canvas"].removeEventListener("mouseup", GLFW.onMouseButtonUp, true);
      Module["canvas"].removeEventListener('wheel', GLFW.onMouseWheel, true);
      Module["canvas"].removeEventListener('mousewheel', GLFW.onMouseWheel, true);
      Module["canvas"].width = Module["canvas"].height = 1;
      GLFW.windows = null;
      GLFW.active = null;
    }

  function _emscripten_glUniformMatrix2fv(location, count, transpose, value) {
      location = GL.uniforms[location];
      var view;
      if (count === 1) {
        // avoid allocation for the common case of uploading one uniform matrix
        view = GL.miniTempBufferViews[3];
        for (var i = 0; i < 4; i++) {
          view[i] = HEAPF32[(((value)+(i*4))>>2)];
        }
      } else {
        view = HEAPF32.subarray((value)>>2,(value+count*16)>>2);
      }
      GLctx.uniformMatrix2fv(location, transpose, view);
    }

  function _emscripten_glDeleteShader(id) {
      if (!id) return;
      var shader = GL.shaders[id];
      if (!shader) { // glDeleteShader actually signals an error when deleting a nonexisting object, unlike some other GL delete functions.
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
      GLctx.deleteShader(shader);
      GL.shaders[id] = null;
    }

  function ___syscall5(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // open
      var pathname = SYSCALLS.getStr(), flags = SYSCALLS.get(), mode = SYSCALLS.get() // optional TODO
      var stream = FS.open(pathname, flags, mode);
      return stream.fd;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall6(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // close
      var stream = SYSCALLS.getStreamFromFD();
      FS.close(stream);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  var _cos=Math_cos;

  function _emscripten_glGetVertexAttribiv(index, pname, params) {
      // N.B. This function may only be called if the vertex attribute was specified using the function glVertexAttrib*f(),
      // otherwise the results are undefined. (GLES3 spec 6.1.12)
      emscriptenWebGLGetVertexAttrib(index, pname, params, 'FloatToInteger');
    }

  function _emscripten_glUniformMatrix4fv(location, count, transpose, value) {
      location = GL.uniforms[location];
      var view;
      if (count === 1) {
        // avoid allocation for the common case of uploading one uniform matrix
        view = GL.miniTempBufferViews[15];
        for (var i = 0; i < 16; i++) {
          view[i] = HEAPF32[(((value)+(i*4))>>2)];
        }
      } else {
        view = HEAPF32.subarray((value)>>2,(value+count*64)>>2);
      }
      GLctx.uniformMatrix4fv(location, transpose, view);
    }

  function _glfwGetVersion(major, minor, rev) {
      setValue(major, 2, 'i32');
      setValue(minor, 7, 'i32');
      setValue(rev, 7, 'i32');
  
    }

  function _emscripten_glEnableClientState(cap) {
      var attrib = GLEmulation.getAttributeFromCapability(cap);
      if (attrib === null) {
        Module.printErr('WARNING: unhandled clientstate: ' + cap);
        return;
      }
      if (!GLImmediate.enabledClientAttributes[attrib]) {
        GLImmediate.enabledClientAttributes[attrib] = true;
        GLImmediate.totalEnabledClientAttributes++;
        GLImmediate.currentRenderer = null; // Will need to change current renderer, since the set of active vertex pointers changed.
        if (GLEmulation.currentVao) GLEmulation.currentVao.enabledClientStates[cap] = 1;
        GLImmediate.modifiedClientAttributes = true;
      }
    }

  function ___syscall265(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // clock_nanosleep
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function _emscripten_glGetPointerv(name, p) {
      var attribute;
      switch(name) {
        case 0x808E: // GL_VERTEX_ARRAY_POINTER
          attribute = GLImmediate.clientAttributes[GLImmediate.VERTEX]; break;
        case 0x8090: // GL_COLOR_ARRAY_POINTER
          attribute = GLImmediate.clientAttributes[GLImmediate.COLOR]; break;
        case 0x8092: // GL_TEXTURE_COORD_ARRAY_POINTER
          attribute = GLImmediate.clientAttributes[GLImmediate.TEXTURE0 + GLImmediate.clientActiveTexture]; break;
        default:
          GL.recordError(0x0500/*GL_INVALID_ENUM*/);
          return;
      }
      HEAP32[((p)>>2)]=attribute ? attribute.pointer : 0;
    }

  function ___syscall140(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // llseek
      var stream = SYSCALLS.getStreamFromFD(), offset_high = SYSCALLS.get(), offset_low = SYSCALLS.get(), result = SYSCALLS.get(), whence = SYSCALLS.get();
      var offset = offset_low;
      assert(offset_high === 0);
      FS.llseek(stream, offset, whence);
      HEAP32[((result)>>2)]=stream.position;
      if (stream.getdents && offset === 0 && whence === 0) stream.getdents = null; // reset readdir state
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall146(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // writev
      var stream = SYSCALLS.getStreamFromFD(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
      return SYSCALLS.doWritev(stream, iov, iovcnt);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  
  function __isLeapYear(year) {
        return year%4 === 0 && (year%100 !== 0 || year%400 === 0);
    }
  
  function __arraySum(array, index) {
      var sum = 0;
      for (var i = 0; i <= index; sum += array[i++]);
      return sum;
    }
  
  
  var __MONTH_DAYS_LEAP=[31,29,31,30,31,30,31,31,30,31,30,31];
  
  var __MONTH_DAYS_REGULAR=[31,28,31,30,31,30,31,31,30,31,30,31];function __addDays(date, days) {
      var newDate = new Date(date.getTime());
      while(days > 0) {
        var leap = __isLeapYear(newDate.getFullYear());
        var currentMonth = newDate.getMonth();
        var daysInCurrentMonth = (leap ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR)[currentMonth];
  
        if (days > daysInCurrentMonth-newDate.getDate()) {
          // we spill over to next month
          days -= (daysInCurrentMonth-newDate.getDate()+1);
          newDate.setDate(1);
          if (currentMonth < 11) {
            newDate.setMonth(currentMonth+1)
          } else {
            newDate.setMonth(0);
            newDate.setFullYear(newDate.getFullYear()+1);
          }
        } else {
          // we stay in current month 
          newDate.setDate(newDate.getDate()+days);
          return newDate;
        }
      }
  
      return newDate;
    }function _strftime(s, maxsize, format, tm) {
      // size_t strftime(char *restrict s, size_t maxsize, const char *restrict format, const struct tm *restrict timeptr);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/strftime.html
  
      var tm_zone = HEAP32[(((tm)+(40))>>2)];
  
      var date = {
        tm_sec: HEAP32[((tm)>>2)],
        tm_min: HEAP32[(((tm)+(4))>>2)],
        tm_hour: HEAP32[(((tm)+(8))>>2)],
        tm_mday: HEAP32[(((tm)+(12))>>2)],
        tm_mon: HEAP32[(((tm)+(16))>>2)],
        tm_year: HEAP32[(((tm)+(20))>>2)],
        tm_wday: HEAP32[(((tm)+(24))>>2)],
        tm_yday: HEAP32[(((tm)+(28))>>2)],
        tm_isdst: HEAP32[(((tm)+(32))>>2)],
        tm_gmtoff: HEAP32[(((tm)+(36))>>2)],
        tm_zone: tm_zone ? Pointer_stringify(tm_zone) : ''
      };
  
      var pattern = Pointer_stringify(format);
  
      // expand format
      var EXPANSION_RULES_1 = {
        '%c': '%a %b %d %H:%M:%S %Y',     // Replaced by the locale's appropriate date and time representation - e.g., Mon Aug  3 14:02:01 2013
        '%D': '%m/%d/%y',                 // Equivalent to %m / %d / %y
        '%F': '%Y-%m-%d',                 // Equivalent to %Y - %m - %d
        '%h': '%b',                       // Equivalent to %b
        '%r': '%I:%M:%S %p',              // Replaced by the time in a.m. and p.m. notation
        '%R': '%H:%M',                    // Replaced by the time in 24-hour notation
        '%T': '%H:%M:%S',                 // Replaced by the time
        '%x': '%m/%d/%y',                 // Replaced by the locale's appropriate date representation
        '%X': '%H:%M:%S'                  // Replaced by the locale's appropriate date representation
      };
      for (var rule in EXPANSION_RULES_1) {
        pattern = pattern.replace(new RegExp(rule, 'g'), EXPANSION_RULES_1[rule]);
      }
  
      var WEEKDAYS = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];
      var MONTHS = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];
  
      function leadingSomething(value, digits, character) {
        var str = typeof value === 'number' ? value.toString() : (value || '');
        while (str.length < digits) {
          str = character[0]+str;
        }
        return str;
      };
  
      function leadingNulls(value, digits) {
        return leadingSomething(value, digits, '0');
      };
  
      function compareByDay(date1, date2) {
        function sgn(value) {
          return value < 0 ? -1 : (value > 0 ? 1 : 0);
        };
  
        var compare;
        if ((compare = sgn(date1.getFullYear()-date2.getFullYear())) === 0) {
          if ((compare = sgn(date1.getMonth()-date2.getMonth())) === 0) {
            compare = sgn(date1.getDate()-date2.getDate());
          }
        }
        return compare;
      };
  
      function getFirstWeekStartDate(janFourth) {
          switch (janFourth.getDay()) {
            case 0: // Sunday
              return new Date(janFourth.getFullYear()-1, 11, 29);
            case 1: // Monday
              return janFourth;
            case 2: // Tuesday
              return new Date(janFourth.getFullYear(), 0, 3);
            case 3: // Wednesday
              return new Date(janFourth.getFullYear(), 0, 2);
            case 4: // Thursday
              return new Date(janFourth.getFullYear(), 0, 1);
            case 5: // Friday
              return new Date(janFourth.getFullYear()-1, 11, 31);
            case 6: // Saturday
              return new Date(janFourth.getFullYear()-1, 11, 30);
          }
      };
  
      function getWeekBasedYear(date) {
          var thisDate = __addDays(new Date(date.tm_year+1900, 0, 1), date.tm_yday);
  
          var janFourthThisYear = new Date(thisDate.getFullYear(), 0, 4);
          var janFourthNextYear = new Date(thisDate.getFullYear()+1, 0, 4);
  
          var firstWeekStartThisYear = getFirstWeekStartDate(janFourthThisYear);
          var firstWeekStartNextYear = getFirstWeekStartDate(janFourthNextYear);
  
          if (compareByDay(firstWeekStartThisYear, thisDate) <= 0) {
            // this date is after the start of the first week of this year
            if (compareByDay(firstWeekStartNextYear, thisDate) <= 0) {
              return thisDate.getFullYear()+1;
            } else {
              return thisDate.getFullYear();
            }
          } else { 
            return thisDate.getFullYear()-1;
          }
      };
  
      var EXPANSION_RULES_2 = {
        '%a': function(date) {
          return WEEKDAYS[date.tm_wday].substring(0,3);
        },
        '%A': function(date) {
          return WEEKDAYS[date.tm_wday];
        },
        '%b': function(date) {
          return MONTHS[date.tm_mon].substring(0,3);
        },
        '%B': function(date) {
          return MONTHS[date.tm_mon];
        },
        '%C': function(date) {
          var year = date.tm_year+1900;
          return leadingNulls((year/100)|0,2);
        },
        '%d': function(date) {
          return leadingNulls(date.tm_mday, 2);
        },
        '%e': function(date) {
          return leadingSomething(date.tm_mday, 2, ' ');
        },
        '%g': function(date) {
          // %g, %G, and %V give values according to the ISO 8601:2000 standard week-based year. 
          // In this system, weeks begin on a Monday and week 1 of the year is the week that includes 
          // January 4th, which is also the week that includes the first Thursday of the year, and 
          // is also the first week that contains at least four days in the year. 
          // If the first Monday of January is the 2nd, 3rd, or 4th, the preceding days are part of 
          // the last week of the preceding year; thus, for Saturday 2nd January 1999, 
          // %G is replaced by 1998 and %V is replaced by 53. If December 29th, 30th, 
          // or 31st is a Monday, it and any following days are part of week 1 of the following year. 
          // Thus, for Tuesday 30th December 1997, %G is replaced by 1998 and %V is replaced by 01.
          
          return getWeekBasedYear(date).toString().substring(2);
        },
        '%G': function(date) {
          return getWeekBasedYear(date);
        },
        '%H': function(date) {
          return leadingNulls(date.tm_hour, 2);
        },
        '%I': function(date) {
          return leadingNulls(date.tm_hour < 13 ? date.tm_hour : date.tm_hour-12, 2);
        },
        '%j': function(date) {
          // Day of the year (001-366)
          return leadingNulls(date.tm_mday+__arraySum(__isLeapYear(date.tm_year+1900) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, date.tm_mon-1), 3);
        },
        '%m': function(date) {
          return leadingNulls(date.tm_mon+1, 2);
        },
        '%M': function(date) {
          return leadingNulls(date.tm_min, 2);
        },
        '%n': function() {
          return '\n';
        },
        '%p': function(date) {
          if (date.tm_hour > 0 && date.tm_hour < 13) {
            return 'AM';
          } else {
            return 'PM';
          }
        },
        '%S': function(date) {
          return leadingNulls(date.tm_sec, 2);
        },
        '%t': function() {
          return '\t';
        },
        '%u': function(date) {
          var day = new Date(date.tm_year+1900, date.tm_mon+1, date.tm_mday, 0, 0, 0, 0);
          return day.getDay() || 7;
        },
        '%U': function(date) {
          // Replaced by the week number of the year as a decimal number [00,53]. 
          // The first Sunday of January is the first day of week 1; 
          // days in the new year before this are in week 0. [ tm_year, tm_wday, tm_yday]
          var janFirst = new Date(date.tm_year+1900, 0, 1);
          var firstSunday = janFirst.getDay() === 0 ? janFirst : __addDays(janFirst, 7-janFirst.getDay());
          var endDate = new Date(date.tm_year+1900, date.tm_mon, date.tm_mday);
          
          // is target date after the first Sunday?
          if (compareByDay(firstSunday, endDate) < 0) {
            // calculate difference in days between first Sunday and endDate
            var februaryFirstUntilEndMonth = __arraySum(__isLeapYear(endDate.getFullYear()) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, endDate.getMonth()-1)-31;
            var firstSundayUntilEndJanuary = 31-firstSunday.getDate();
            var days = firstSundayUntilEndJanuary+februaryFirstUntilEndMonth+endDate.getDate();
            return leadingNulls(Math.ceil(days/7), 2);
          }
  
          return compareByDay(firstSunday, janFirst) === 0 ? '01': '00';
        },
        '%V': function(date) {
          // Replaced by the week number of the year (Monday as the first day of the week) 
          // as a decimal number [01,53]. If the week containing 1 January has four 
          // or more days in the new year, then it is considered week 1. 
          // Otherwise, it is the last week of the previous year, and the next week is week 1. 
          // Both January 4th and the first Thursday of January are always in week 1. [ tm_year, tm_wday, tm_yday]
          var janFourthThisYear = new Date(date.tm_year+1900, 0, 4);
          var janFourthNextYear = new Date(date.tm_year+1901, 0, 4);
  
          var firstWeekStartThisYear = getFirstWeekStartDate(janFourthThisYear);
          var firstWeekStartNextYear = getFirstWeekStartDate(janFourthNextYear);
  
          var endDate = __addDays(new Date(date.tm_year+1900, 0, 1), date.tm_yday);
  
          if (compareByDay(endDate, firstWeekStartThisYear) < 0) {
            // if given date is before this years first week, then it belongs to the 53rd week of last year
            return '53';
          } 
  
          if (compareByDay(firstWeekStartNextYear, endDate) <= 0) {
            // if given date is after next years first week, then it belongs to the 01th week of next year
            return '01';
          }
  
          // given date is in between CW 01..53 of this calendar year
          var daysDifference;
          if (firstWeekStartThisYear.getFullYear() < date.tm_year+1900) {
            // first CW of this year starts last year
            daysDifference = date.tm_yday+32-firstWeekStartThisYear.getDate()
          } else {
            // first CW of this year starts this year
            daysDifference = date.tm_yday+1-firstWeekStartThisYear.getDate();
          }
          return leadingNulls(Math.ceil(daysDifference/7), 2);
        },
        '%w': function(date) {
          var day = new Date(date.tm_year+1900, date.tm_mon+1, date.tm_mday, 0, 0, 0, 0);
          return day.getDay();
        },
        '%W': function(date) {
          // Replaced by the week number of the year as a decimal number [00,53]. 
          // The first Monday of January is the first day of week 1; 
          // days in the new year before this are in week 0. [ tm_year, tm_wday, tm_yday]
          var janFirst = new Date(date.tm_year, 0, 1);
          var firstMonday = janFirst.getDay() === 1 ? janFirst : __addDays(janFirst, janFirst.getDay() === 0 ? 1 : 7-janFirst.getDay()+1);
          var endDate = new Date(date.tm_year+1900, date.tm_mon, date.tm_mday);
  
          // is target date after the first Monday?
          if (compareByDay(firstMonday, endDate) < 0) {
            var februaryFirstUntilEndMonth = __arraySum(__isLeapYear(endDate.getFullYear()) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, endDate.getMonth()-1)-31;
            var firstMondayUntilEndJanuary = 31-firstMonday.getDate();
            var days = firstMondayUntilEndJanuary+februaryFirstUntilEndMonth+endDate.getDate();
            return leadingNulls(Math.ceil(days/7), 2);
          }
          return compareByDay(firstMonday, janFirst) === 0 ? '01': '00';
        },
        '%y': function(date) {
          // Replaced by the last two digits of the year as a decimal number [00,99]. [ tm_year]
          return (date.tm_year+1900).toString().substring(2);
        },
        '%Y': function(date) {
          // Replaced by the year as a decimal number (for example, 1997). [ tm_year]
          return date.tm_year+1900;
        },
        '%z': function(date) {
          // Replaced by the offset from UTC in the ISO 8601:2000 standard format ( +hhmm or -hhmm ).
          // For example, "-0430" means 4 hours 30 minutes behind UTC (west of Greenwich).
          var off = date.tm_gmtoff;
          var ahead = off >= 0;
          off = Math.abs(off) / 60;
          // convert from minutes into hhmm format (which means 60 minutes = 100 units)
          off = (off / 60)*100 + (off % 60);
          return (ahead ? '+' : '-') + String("0000" + off).slice(-4);
        },
        '%Z': function(date) {
          return date.tm_zone;
        },
        '%%': function() {
          return '%';
        }
      };
      for (var rule in EXPANSION_RULES_2) {
        if (pattern.indexOf(rule) >= 0) {
          pattern = pattern.replace(new RegExp(rule, 'g'), EXPANSION_RULES_2[rule](date));
        }
      }
  
      var bytes = intArrayFromString(pattern, false);
      if (bytes.length > maxsize) {
        return 0;
      } 
  
      writeArrayToMemory(bytes, s);
      return bytes.length-1;
    }

  function ___syscall145(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // readv
      var stream = SYSCALLS.getStreamFromFD(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
      return SYSCALLS.doReadv(stream, iov, iovcnt);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function _emscripten_glStencilMask(x0) { GLctx.stencilMask(x0) }

  function _emscripten_glStencilFuncSeparate(x0, x1, x2, x3) { GLctx.stencilFuncSeparate(x0, x1, x2, x3) }

   
  Module["_i64Subtract"] = _i64Subtract;

   
  Module["_i64Add"] = _i64Add;

  function _glBegin(mode) {
      // Push the old state:
      GLImmediate.enabledClientAttributes_preBegin = GLImmediate.enabledClientAttributes;
      GLImmediate.enabledClientAttributes = [];
  
      GLImmediate.clientAttributes_preBegin = GLImmediate.clientAttributes;
      GLImmediate.clientAttributes = []
      for (var i = 0; i < GLImmediate.clientAttributes_preBegin.length; i++) {
        GLImmediate.clientAttributes.push({});
      }
  
      GLImmediate.mode = mode;
      GLImmediate.vertexCounter = 0;
      var components = GLImmediate.rendererComponents = [];
      for (var i = 0; i < GLImmediate.NUM_ATTRIBUTES; i++) {
        components[i] = 0;
      }
      GLImmediate.rendererComponentPointer = 0;
      GLImmediate.vertexData = GLImmediate.tempData;
    }

  function _emscripten_glDisableVertexAttribArray(index) {
      GLctx.disableVertexAttribArray(index);
    }

  function _emscripten_glVertexAttrib1f(x0, x1) { GLctx.vertexAttrib1f(x0, x1) }

  function _emscripten_glFinish() { GLctx.finish() }

  function _emscripten_glDepthFunc(x0) { GLctx.depthFunc(x0) }

  function _sysconf(name) {
      // long sysconf(int name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/sysconf.html
      switch(name) {
        case 30: return PAGE_SIZE;
        case 85: return totalMemory / PAGE_SIZE;
        case 132:
        case 133:
        case 12:
        case 137:
        case 138:
        case 15:
        case 235:
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
        case 149:
        case 13:
        case 10:
        case 236:
        case 153:
        case 9:
        case 21:
        case 22:
        case 159:
        case 154:
        case 14:
        case 77:
        case 78:
        case 139:
        case 80:
        case 81:
        case 82:
        case 68:
        case 67:
        case 164:
        case 11:
        case 29:
        case 47:
        case 48:
        case 95:
        case 52:
        case 51:
        case 46:
          return 200809;
        case 79:
          return 0;
        case 27:
        case 246:
        case 127:
        case 128:
        case 23:
        case 24:
        case 160:
        case 161:
        case 181:
        case 182:
        case 242:
        case 183:
        case 184:
        case 243:
        case 244:
        case 245:
        case 165:
        case 178:
        case 179:
        case 49:
        case 50:
        case 168:
        case 169:
        case 175:
        case 170:
        case 171:
        case 172:
        case 97:
        case 76:
        case 32:
        case 173:
        case 35:
          return -1;
        case 176:
        case 177:
        case 7:
        case 155:
        case 8:
        case 157:
        case 125:
        case 126:
        case 92:
        case 93:
        case 129:
        case 130:
        case 131:
        case 94:
        case 91:
          return 1;
        case 74:
        case 60:
        case 69:
        case 70:
        case 4:
          return 1024;
        case 31:
        case 42:
        case 72:
          return 32;
        case 87:
        case 26:
        case 33:
          return 2147483647;
        case 34:
        case 1:
          return 47839;
        case 38:
        case 36:
          return 99;
        case 43:
        case 37:
          return 2048;
        case 0: return 2097152;
        case 3: return 65536;
        case 28: return 32768;
        case 44: return 32767;
        case 75: return 16384;
        case 39: return 1000;
        case 89: return 700;
        case 71: return 256;
        case 40: return 255;
        case 2: return 100;
        case 180: return 64;
        case 25: return 20;
        case 5: return 16;
        case 6: return 6;
        case 73: return 4;
        case 84: {
          if (typeof navigator === 'object') return navigator['hardwareConcurrency'] || 1;
          return 1;
        }
      }
      ___setErrNo(ERRNO_CODES.EINVAL);
      return -1;
    }

  var _emscripten_postinvoke=true;

  function _emscripten_glReleaseShaderCompiler() {
      // NOP (as allowed by GLES 2.0 spec)
    }

  
  function _usleep(useconds) {
      // int usleep(useconds_t useconds);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/usleep.html
      // We're single-threaded, so use a busy loop. Super-ugly.
      var msec = useconds / 1000;
      if ((ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) && self['performance'] && self['performance']['now']) {
        var start = self['performance']['now']();
        while (self['performance']['now']() - start < msec) {
          // Do nothing.
        }
      } else {
        var start = Date.now();
        while (Date.now() - start < msec) {
          // Do nothing.
        }
      }
      return 0;
    }
  Module["_usleep"] = _usleep;function _nanosleep(rqtp, rmtp) {
      // int nanosleep(const struct timespec  *rqtp, struct timespec *rmtp);
      var seconds = HEAP32[((rqtp)>>2)];
      var nanoseconds = HEAP32[(((rqtp)+(4))>>2)];
      if (rmtp !== 0) {
        HEAP32[((rmtp)>>2)]=0;
        HEAP32[(((rmtp)+(4))>>2)]=0;
      }
      return _usleep((seconds * 1e6) + (nanoseconds / 1000));
    }

  function _glClear(x0) { GLctx.clear(x0) }

  
  function emscriptenWebGLGetUniform(program, location, params, type) {
      if (!params) {
        // GLES2 specification does not specify how to behave if params is a null pointer. Since calling this function does not make sense
        // if params == null, issue a GL error to notify user about it. 
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
      var data = GLctx.getUniform(GL.programs[program], GL.uniforms[location]);
      if (typeof data == 'number' || typeof data == 'boolean') {
        switch (type) {
          case 'Integer': HEAP32[((params)>>2)]=data; break;
          case 'Float': HEAPF32[((params)>>2)]=data; break;
          default: throw 'internal emscriptenWebGLGetUniform() error, bad type: ' + type;
        }
      } else {
        for (var i = 0; i < data.length; i++) {
          switch (type) {
            case 'Integer': HEAP32[(((params)+(i))>>2)]=data[i]; break;
            case 'Float': HEAPF32[(((params)+(i))>>2)]=data[i]; break;
            default: throw 'internal emscriptenWebGLGetUniform() error, bad type: ' + type;
          }
        }
      }
    }function _emscripten_glGetUniformiv(program, location, params) {
      emscriptenWebGLGetUniform(program, location, params, 'Integer');
    }

  function _emscripten_glLoadIdentity() {
      GLImmediate.matricesModified = true;
      GLImmediate.matrixVersion[GLImmediate.currentMatrix] = (GLImmediate.matrixVersion[GLImmediate.currentMatrix] + 1)|0;
      GLImmediate.matrixLib.mat4.identity(GLImmediate.matrix[GLImmediate.currentMatrix]);
    }

  function _emscripten_glUniform3fv(location, count, value) {
      location = GL.uniforms[location];
      var view;
      if (count === 1) {
        // avoid allocation for the common case of uploading one uniform
        view = GL.miniTempBufferViews[2];
        view[0] = HEAPF32[((value)>>2)];
        view[1] = HEAPF32[(((value)+(4))>>2)];
        view[2] = HEAPF32[(((value)+(8))>>2)];
      } else {
        view = HEAPF32.subarray((value)>>2,(value+count*12)>>2);
      }
      GLctx.uniform3fv(location, view);
    }

  function _emscripten_glAttachShader(program, shader) {
      GLctx.attachShader(GL.programs[program],
                              GL.shaders[shader]);
    }

  function _glRotatef(angle, x, y, z) {
      GLImmediate.matricesModified = true;
      GLImmediate.matrixVersion[GLImmediate.currentMatrix] = (GLImmediate.matrixVersion[GLImmediate.currentMatrix] + 1)|0;
      GLImmediate.matrixLib.mat4.rotate(GLImmediate.matrix[GLImmediate.currentMatrix], angle*Math.PI/180, [x, y, z]);
    }

  function _emscripten_glPolygonOffset(x0, x1) { GLctx.polygonOffset(x0, x1) }

  function _glTranslatef(x, y, z) {
      GLImmediate.matricesModified = true;
      GLImmediate.matrixVersion[GLImmediate.currentMatrix] = (GLImmediate.matrixVersion[GLImmediate.currentMatrix] + 1)|0;
      GLImmediate.matrixLib.mat4.translate(GLImmediate.matrix[GLImmediate.currentMatrix], [x, y, z]);
    }

  var _emscripten_prep_setjmp=true;

  function _pthread_cleanup_pop() {
      assert(_pthread_cleanup_push.level == __ATEXIT__.length, 'cannot pop if something else added meanwhile!');
      __ATEXIT__.pop();
      _pthread_cleanup_push.level = __ATEXIT__.length;
    }

  function _emscripten_glClearStencil(x0) { GLctx.clearStencil(x0) }

  function _emscripten_glDetachShader(program, shader) {
      GLctx.detachShader(GL.programs[program],
                              GL.shaders[shader]);
    }

  
  function _emulGlDeleteVertexArrays(n, vaos) {
      for (var i = 0; i < n; i++) {
        var id = HEAP32[(((vaos)+(i*4))>>2)];
        GLEmulation.vaos[id] = null;
        if (GLEmulation.currentVao && GLEmulation.currentVao.id == id) GLEmulation.currentVao = null;
      }
    }function _emscripten_glDeleteVertexArrays(n, vaos) {
      _emulGlDeleteVertexArrays(n, vaos);
    }

  function _glfwEnable(target) {
      target = GLFW.GLFW2ParamToGLFW3Param(target);
      GLFW.hints[target] = false;
    }

  function _glfwInit() {
      if (GLFW.windows) return 1; // GL_TRUE
  
      GLFW.initialTime = GLFW.getTime();
      GLFW.hints = GLFW.defaultHints;
      GLFW.windows = new Array()
      GLFW.active = null;
  
      window.addEventListener("keydown", GLFW.onKeydown, true);
      window.addEventListener("keypress", GLFW.onKeyPress, true);
      window.addEventListener("keyup", GLFW.onKeyup, true);
      Module["canvas"].addEventListener("mousemove", GLFW.onMousemove, true);
      Module["canvas"].addEventListener("mousedown", GLFW.onMouseButtonDown, true);
      Module["canvas"].addEventListener("mouseup", GLFW.onMouseButtonUp, true);
      Module["canvas"].addEventListener('wheel', GLFW.onMouseWheel, true);
      Module["canvas"].addEventListener('mousewheel', GLFW.onMouseWheel, true);
  
      Browser.resizeListeners.push(function(width, height) {
         GLFW.onFullScreenEventChange();
      });
      return 1; // GL_TRUE
    }

  function _emscripten_glGetTexParameteriv(target, pname, params) {
      if (!params) {
        // GLES2 specification does not specify how to behave if params is a null pointer. Since calling this function does not make sense
        // if p == null, issue a GL error to notify user about it. 
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
      HEAP32[((params)>>2)]=GLctx.getTexParameter(target, pname);
    }

  function _glfwSwapBuffers() {
      GLFW.swapBuffers(GLFW.active.id);
    }

  function _emscripten_glGenerateMipmap(x0) { GLctx.generateMipmap(x0) }

  function _emscripten_glSampleCoverage(x0, x1) { GLctx.sampleCoverage(x0, x1) }

  function _emscripten_glCullFace(x0) { GLctx.cullFace(x0) }

  function _glfwSetWindowCloseCallback(cbfun) {
      GLFW.setWindowCloseCallback(GLFW.active.id, cbfun);
    }

  function _emscripten_glUseProgram(program) {
      GLctx.useProgram(program ? GL.programs[program] : null);
    }

  function _gluPerspective(fov, aspect, near, far) {
      GLImmediate.matricesModified = true;
      GLImmediate.matrixVersion[GLImmediate.currentMatrix] = (GLImmediate.matrixVersion[GLImmediate.currentMatrix] + 1)|0;
      GLImmediate.matrix[GLImmediate.currentMatrix] =
        GLImmediate.matrixLib.mat4.perspective(fov, aspect, near, far,
                                                 GLImmediate.matrix[GLImmediate.currentMatrix]);
    }

  function _emscripten_glHint(x0, x1) { GLctx.hint(x0, x1) }

  function ___syscall63(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // dup2
      var old = SYSCALLS.getStreamFromFD(), suggestFD = SYSCALLS.get();
      if (old.fd === suggestFD) return suggestFD;
      return SYSCALLS.doDup(old.path, old.flags, suggestFD);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function _glfwGetWindowSize(width, height) {
      GLFW.getWindowSize(GLFW.active.id, width, height);
    }

  function _emscripten_glUniform2fv(location, count, value) {
      location = GL.uniforms[location];
      var view;
      if (count === 1) {
        // avoid allocation for the common case of uploading one uniform
        view = GL.miniTempBufferViews[1];
        view[0] = HEAPF32[((value)>>2)];
        view[1] = HEAPF32[(((value)+(4))>>2)];
      } else {
        view = HEAPF32.subarray((value)>>2,(value+count*8)>>2);
      }
      GLctx.uniform2fv(location, view);
    }

  function _glfwSwapInterval(interval) {
      interval = Math.abs(interval); // GLFW uses negative values to enable GLX_EXT_swap_control_tear, which we don't have, so just treat negative and positive the same.
      if (interval == 0) _emscripten_set_main_loop_timing(0/*EM_TIMING_SETTIMEOUT*/, 0);
      else _emscripten_set_main_loop_timing(1/*EM_TIMING_RAF*/, interval);
    }

  function _emscripten_glMatrixMode(mode) {
      if (mode == 0x1700 /* GL_MODELVIEW */) {
        GLImmediate.currentMatrix = 0/*m*/;
      } else if (mode == 0x1701 /* GL_PROJECTION */) {
        GLImmediate.currentMatrix = 1/*p*/;
      } else if (mode == 0x1702) { // GL_TEXTURE
        GLImmediate.useTextureMatrix = true;
        GLImmediate.currentMatrix = 2/*t*/ + GLImmediate.clientActiveTexture;
      } else {
        throw "Wrong mode " + mode + " passed to glMatrixMode";
      }
    }

  function _abort() {
      Module['abort']();
    }

  function _emscripten_glFramebufferRenderbuffer(target, attachment, renderbuffertarget, renderbuffer) {
      GLctx.framebufferRenderbuffer(target, attachment, renderbuffertarget,
                                         GL.renderbuffers[renderbuffer]);
    }

  var _tan=Math_tan;

  function _emscripten_glCompressedTexImage2D(target, level, internalFormat, width, height, border, imageSize, data) {
      var heapView;
      if (data) {
        heapView = HEAPU8.subarray((data),(data+imageSize));
      } else {
        heapView = null;
      }
      GLctx['compressedTexImage2D'](target, level, internalFormat, width, height, border, heapView);
    }

  function _emscripten_glIsBuffer(buffer) {
      var b = GL.buffers[buffer];
      if (!b) return 0;
      return GLctx.isBuffer(b);
    }

  function _emscripten_glUniform2iv(location, count, value) {
      location = GL.uniforms[location];
      count *= 2;
      value = HEAP32.subarray((value)>>2,(value+count*4)>>2);
      GLctx.uniform2iv(location, value);
    }

  function _emscripten_glVertexAttrib1fv(index, v) {
      v = HEAPF32.subarray((v)>>2,(v+4)>>2);
      GLctx.vertexAttrib1fv(index, v);
    }

  var _fabs=Math_abs;

  
  
  function emscriptenWebGLComputeImageSize(width, height, sizePerPixel, alignment) {
      function roundedToNextMultipleOf(x, y) {
        return Math.floor((x + y - 1) / y) * y
      }
      var plainRowSize = width * sizePerPixel;
      var alignedRowSize = roundedToNextMultipleOf(plainRowSize, alignment);
      return (height <= 0) ? 0 :
               ((height - 1) * alignedRowSize + plainRowSize);
    }function emscriptenWebGLGetTexPixelData(type, format, width, height, pixels, internalFormat) {
      var sizePerPixel;
      var numChannels;
      switch(format) {
        case 0x1906 /* GL_ALPHA */:
        case 0x1909 /* GL_LUMINANCE */:
        case 0x1902 /* GL_DEPTH_COMPONENT */:
        case 0x1903 /* GL_RED */:
          numChannels = 1;
          break;
        case 0x190A /* GL_LUMINANCE_ALPHA */:
        case 0x8227 /* GL_RG */:
          numChannels = 2;
          break;
        case 0x1907 /* GL_RGB */:
        case 0x8C40 /* GL_SRGB_EXT */:
          numChannels = 3;
          break;
        case 0x1908 /* GL_RGBA */:
        case 0x8C42 /* GL_SRGB_ALPHA_EXT */:
          numChannels = 4;
          break;
        default:
          GL.recordError(0x0500); // GL_INVALID_ENUM
          return {
            pixels: null,
            internalFormat: 0x0
          };
      }
      switch (type) {
        case 0x1401 /* GL_UNSIGNED_BYTE */:
          sizePerPixel = numChannels*1;
          break;
        case 0x1403 /* GL_UNSIGNED_SHORT */:
        case 0x8D61 /* GL_HALF_FLOAT_OES */:
          sizePerPixel = numChannels*2;
          break;
        case 0x1405 /* GL_UNSIGNED_INT */:
        case 0x1406 /* GL_FLOAT */:
          sizePerPixel = numChannels*4;
          break;
        case 0x84FA /* UNSIGNED_INT_24_8_WEBGL/UNSIGNED_INT_24_8 */:
          sizePerPixel = 4;
          break;
        case 0x8363 /* GL_UNSIGNED_SHORT_5_6_5 */:
        case 0x8033 /* GL_UNSIGNED_SHORT_4_4_4_4 */:
        case 0x8034 /* GL_UNSIGNED_SHORT_5_5_5_1 */:
          sizePerPixel = 2;
          break;
        default:
          GL.recordError(0x0500); // GL_INVALID_ENUM
          return {
            pixels: null,
            internalFormat: 0x0
          };
      }
      var bytes = emscriptenWebGLComputeImageSize(width, height, sizePerPixel, GL.unpackAlignment);
      if (type == 0x1401 /* GL_UNSIGNED_BYTE */) {
        pixels = HEAPU8.subarray((pixels),(pixels+bytes));
      } else if (type == 0x1406 /* GL_FLOAT */) {
        pixels = HEAPF32.subarray((pixels)>>2,(pixels+bytes)>>2);
      } else if (type == 0x1405 /* GL_UNSIGNED_INT */ || type == 0x84FA /* UNSIGNED_INT_24_8_WEBGL */) {
        pixels = HEAPU32.subarray((pixels)>>2,(pixels+bytes)>>2);
      } else {
        pixels = HEAPU16.subarray((pixels)>>1,(pixels+bytes)>>1);
      }
      return {
        pixels: pixels,
        internalFormat: internalFormat
      };
    }function _emscripten_glTexSubImage2D(target, level, xoffset, yoffset, width, height, format, type, pixels) {
      var pixelData;
      if (pixels) {
        pixelData = emscriptenWebGLGetTexPixelData(type, format, width, height, pixels, -1).pixels;
      } else {
        pixelData = null;
      }
      GLctx.texSubImage2D(target, level, xoffset, yoffset, width, height, format, type, pixelData);
    }

  function _glfwOpenWindowHint(target, hint) {
      target = GLFW.GLFW2ParamToGLFW3Param(target);
      GLFW.hints[target] = hint;
    }

  var _emscripten_asm_const_int=true;

  function _emscripten_glUniform2f(location, v0, v1) {
      location = GL.uniforms[location];
      GLctx.uniform2f(location, v0, v1);
    }

  function ___syscall330(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // dup3
      var old = SYSCALLS.getStreamFromFD(), suggestFD = SYSCALLS.get(), flags = SYSCALLS.get();
      assert(!flags);
      if (old.fd === suggestFD) return -ERRNO_CODES.EINVAL;
      return SYSCALLS.doDup(old.path, old.flags, suggestFD);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function _emscripten_glUniform2i(location, v0, v1) {
      location = GL.uniforms[location];
      GLctx.uniform2i(location, v0, v1);
    }

  function _emscripten_glDeleteRenderbuffers(n, renderbuffers) {
      for (var i = 0; i < n; i++) {
        var id = HEAP32[(((renderbuffers)+(i*4))>>2)];
        var renderbuffer = GL.renderbuffers[id];
        if (!renderbuffer) continue; // GL spec: "glDeleteRenderbuffers silently ignores 0s and names that do not correspond to existing renderbuffer objects".
        GLctx.deleteRenderbuffer(renderbuffer);
        renderbuffer.name = 0;
        GL.renderbuffers[id] = null;
      }
    }

  function _emscripten_glGetBufferParameteriv(target, value, data) {
      if (!data) {
        // GLES2 specification does not specify how to behave if data is a null pointer. Since calling this function does not make sense
        // if data == null, issue a GL error to notify user about it. 
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
      HEAP32[((data)>>2)]=GLctx.getBufferParameter(target, value);
    }

  
   
  Module["_testSetjmp"] = _testSetjmp;function _longjmp(env, value) {
      asm['setThrew'](env, value || 1);
      throw 'longjmp';
    }

  var _atan=Math_atan;

  function _emscripten_glDepthMask(x0) { GLctx.depthMask(x0) }


  function _emscripten_glDepthRangef(x0, x1) { GLctx.depthRange(x0, x1) }

  function _emscripten_glDepthRange(x0, x1) { GLctx.depthRange(x0, x1) }

  function _glfwGetMouseWheel() {
      return 0;
    }

  function _emscripten_glUniform4i(location, v0, v1, v2, v3) {
      location = GL.uniforms[location];
      GLctx.uniform4i(location, v0, v1, v2, v3);
    }

  function _emscripten_glBlendEquationSeparate(x0, x1) { GLctx.blendEquationSeparate(x0, x1) }

  function _glFrustum(left, right, bottom, top_, nearVal, farVal) {
      GLImmediate.matricesModified = true;
      GLImmediate.matrixVersion[GLImmediate.currentMatrix] = (GLImmediate.matrixVersion[GLImmediate.currentMatrix] + 1)|0;
      GLImmediate.matrixLib.mat4.multiply(GLImmediate.matrix[GLImmediate.currentMatrix],
          GLImmediate.matrixLib.mat4.frustum(left, right, bottom, top_, nearVal, farVal));
    }

  var _emscripten_setjmp=true;

  function _emscripten_glGetShaderPrecisionFormat() { throw 'glGetShaderPrecisionFormat: TODO' }

  function _emscripten_glUniform1fv(location, count, value) {
      location = GL.uniforms[location];
      var view;
      if (count === 1) {
        // avoid allocation for the common case of uploading one uniform
        view = GL.miniTempBufferViews[0];
        view[0] = HEAPF32[((value)>>2)];
      } else {
        view = HEAPF32.subarray((value)>>2,(value+count*4)>>2);
      }
      GLctx.uniform1fv(location, view);
    }

  function _glEnd() {
      GLImmediate.prepareClientAttributes(GLImmediate.rendererComponents[GLImmediate.VERTEX], true);
      GLImmediate.firstVertex = 0;
      GLImmediate.lastVertex = GLImmediate.vertexCounter / (GLImmediate.stride >> 2);
      GLImmediate.flush();
      GLImmediate.disableBeginEndClientAttributes();
      GLImmediate.mode = -1;
  
      // Pop the old state:
      GLImmediate.enabledClientAttributes = GLImmediate.enabledClientAttributes_preBegin;
      GLImmediate.clientAttributes = GLImmediate.clientAttributes_preBegin;
      GLImmediate.currentRenderer = null; // The set of active client attributes changed, we must re-lookup the renderer to use.
      GLImmediate.modifiedClientAttributes = true;
    }

  function _glfwSetMouseButtonCallback(cbfun) {
      GLFW.setMouseButtonCallback(GLFW.active.id, cbfun);
    }

  var _atan2=Math_atan2;

  function _emscripten_glBindProgramARB(type, id) {
      assert(id == 0);
    }

  function _emscripten_glCheckFramebufferStatus(x0) { return GLctx.checkFramebufferStatus(x0) }

  function _emscripten_glDeleteProgram(id) {
      if (!id) return;
      var program = GL.programs[id];
      if (!program) { // glDeleteProgram actually signals an error when deleting a nonexisting object, unlike some other GL delete functions.
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
      GLctx.deleteProgram(program);
      program.name = 0;
      GL.programs[id] = null;
      GL.programInfos[id] = null;
    }

  function _emscripten_glDisable(x0) { GLctx.disable(x0) }

  function _emscripten_glVertexAttrib3fv(index, v) {
      v = HEAPF32.subarray((v)>>2,(v+12)>>2);
      GLctx.vertexAttrib3fv(index, v);
    }

  function _glClearColor(x0, x1, x2, x3) { GLctx.clearColor(x0, x1, x2, x3) }

  function _emscripten_glGetActiveAttrib(program, index, bufSize, length, size, type, name) {
      program = GL.programs[program];
      var info = GLctx.getActiveAttrib(program, index);
      if (!info) return; // If an error occurs, nothing will be written to length, size and type and name.
  
      var infoname = info.name.slice(0, Math.max(0, bufSize - 1));
      if (bufSize > 0 && name) {
        writeStringToMemory(infoname, name);
        if (length) HEAP32[((length)>>2)]=infoname.length;
      } else {
        if (length) HEAP32[((length)>>2)]=0;
      }
  
      if (size) HEAP32[((size)>>2)]=info.size;
      if (type) HEAP32[((type)>>2)]=info.type;
    }

  function _emscripten_glIsFramebuffer(framebuffer) {
      var fb = GL.framebuffers[framebuffer];
      if (!fb) return 0;
      return GLctx.isFramebuffer(fb);
    }

  
  var _sleep=undefined;
  Module["_sleep"] = _sleep;function _glfwSleep(time) {
      _sleep(time);
    }

  function _emscripten_glGetString(name_) {
      if (GL.stringCache[name_]) return GL.stringCache[name_];
      var ret; 
      switch(name_) {
        case 0x1F00 /* GL_VENDOR */:
        case 0x1F01 /* GL_RENDERER */:
        case 0x1F02 /* GL_VERSION */:
          ret = allocate(intArrayFromString(GLctx.getParameter(name_)), 'i8', ALLOC_NORMAL);
          break;
        case 0x1F03 /* GL_EXTENSIONS */:
          var exts = GLctx.getSupportedExtensions();
          var gl_exts = [];
          for (var i in exts) {
            gl_exts.push(exts[i]);
            gl_exts.push("GL_" + exts[i]);
          }
          ret = allocate(intArrayFromString(gl_exts.join(' ')), 'i8', ALLOC_NORMAL);
          break;
        case 0x8B8C /* GL_SHADING_LANGUAGE_VERSION */:
          ret = allocate(intArrayFromString('OpenGL ES GLSL 1.00 (WebGL)'), 'i8', ALLOC_NORMAL);
          break;
        default:
          GL.recordError(0x0500/*GL_INVALID_ENUM*/);
          return 0;
      }
      GL.stringCache[name_] = ret;
      return ret;
    }

  var _sqrt=Math_sqrt;

  function _glfwSetMouseWheelCallback(cbfun) {
      GLFW.setScrollCallback(GLFW.active.id, cbfun);
    }

  function _emscripten_glGetAttribLocation(program, name) {
      program = GL.programs[program];
      name = Pointer_stringify(name);
      return GLctx.getAttribLocation(program, name);
    }

  function _emscripten_glRotatef(angle, x, y, z) {
      GLImmediate.matricesModified = true;
      GLImmediate.matrixVersion[GLImmediate.currentMatrix] = (GLImmediate.matrixVersion[GLImmediate.currentMatrix] + 1)|0;
      GLImmediate.matrixLib.mat4.rotate(GLImmediate.matrix[GLImmediate.currentMatrix], angle*Math.PI/180, [x, y, z]);
    }

  function _emscripten_glGetIntegerv(name_, p) {
      emscriptenWebGLGet(name_, p, 'Integer');
    }

  var _emscripten_check_longjmp=true;

  function _emscripten_glGetFramebufferAttachmentParameteriv(target, attachment, pname, params) {
      var result = GLctx.getFramebufferAttachmentParameter(target, attachment, pname);
      HEAP32[((params)>>2)]=result;
    }

  function _emscripten_glGetVertexAttribPointerv(index, pname, pointer) {
      if (!pointer) {
        // GLES2 specification does not specify how to behave if pointer is a null pointer. Since calling this function does not make sense
        // if pointer == null, issue a GL error to notify user about it. 
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
      HEAP32[((pointer)>>2)]=GLctx.getVertexAttribOffset(index, pname);
    }

  function _emscripten_glClientActiveTexture(texture) {
      GLImmediate.clientActiveTexture = texture - 0x84C0; // GL_TEXTURE0
    }

  function _emscripten_glGetShaderInfoLog(shader, maxLength, length, infoLog) {
      var log = GLctx.getShaderInfoLog(GL.shaders[shader]);
      if (log === null) log = '(unknown error)';
      log = log.substr(0, maxLength - 1);
      if (maxLength > 0 && infoLog) {
        writeStringToMemory(log, infoLog);
        if (length) HEAP32[((length)>>2)]=log.length;
      } else {
        if (length) HEAP32[((length)>>2)]=0;
      }
    }

  function _glfwGetTime() {
      return GLFW.getTime() - GLFW.initialTime;
    }

  function _emscripten_glGetRenderbufferParameteriv(target, pname, params) {
      if (!params) {
        // GLES2 specification does not specify how to behave if params is a null pointer. Since calling this function does not make sense
        // if params == null, issue a GL error to notify user about it. 
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
      HEAP32[((params)>>2)]=GLctx.getRenderbufferParameter(target, pname);
    }

  function _emscripten_glStencilOpSeparate(x0, x1, x2, x3) { GLctx.stencilOpSeparate(x0, x1, x2, x3) }

  function _glfwGetWindowParam(param) {
      param = GLFW.GLFW2ParamToGLFW3Param(param);
      return GLFW.hints[param];
    }

  function _emscripten_glReadPixels(x, y, width, height, format, type, pixels) {
      var data = emscriptenWebGLGetTexPixelData(type, format, width, height, pixels, format);
      if (!data.pixels) {
        GL.recordError(0x0500/*GL_INVALID_ENUM*/);
        return;
      }
      GLctx.readPixels(x, y, width, height, format, type, data.pixels);
    }

  function _emscripten_glCompressedTexSubImage2D(target, level, xoffset, yoffset, width, height, format, imageSize, data) {
      var heapView;
      if (data) {
        heapView = HEAPU8.subarray((data),(data+imageSize));
      } else {
        heapView = null;
      }
      GLctx['compressedTexSubImage2D'](target, level, xoffset, yoffset, width, height, format, heapView);
    }

  function _emscripten_glGetError() {
      // First return any GL error generated by the emscripten library_gl.js interop layer.
      if (GL.lastError) {
        var error = GL.lastError;
        GL.lastError = 0/*GL_NO_ERROR*/;
        return error;
      } else { // If there were none, return the GL error from the browser GL context.
        return GLctx.getError();
      }
    }

  function _emscripten_glFramebufferTexture2D(target, attachment, textarget, texture, level) {
      GLctx.framebufferTexture2D(target, attachment, textarget,
                                      GL.textures[texture], level);
    }

  function ___syscall38(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // rename
      var old_path = SYSCALLS.getStr(), new_path = SYSCALLS.getStr();
      FS.rename(old_path, new_path);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall33(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // access
      var path = SYSCALLS.getStr(), amode = SYSCALLS.get();
      return SYSCALLS.doAccess(path, amode);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function _glfwSetWindowTitle(title) {
      GLFW.setWindowTitle(GLFW.active.id, title);
    }

  function _emscripten_glIsEnabled(x0) { return GLctx.isEnabled(x0) }

  function _emscripten_glClearDepthf(x0) { GLctx.clearDepth(x0) }

  function _emscripten_glVertexAttrib4f(x0, x1, x2, x3, x4) { GLctx.vertexAttrib4f(x0, x1, x2, x3, x4) }

  function _glfwSetWindowRefreshCallback(cbfun) {
      GLFW.setWindowRefreshCallback(GLFW.active.id, cbfun);
    }

  var _sin=Math_sin;

  
  var _emscripten_GetProcAddress=undefined;
  Module["_emscripten_GetProcAddress"] = _emscripten_GetProcAddress;function _glfwGetProcAddress(procname) {
      return _emscripten_GetProcAddress(procname);
    }

  function _emscripten_glClear(x0) { GLctx.clear(x0) }

  function _glfwGetMousePos(x, y) {
      GLFW.getMousePos(GLFW.active.id, x, y);
    }

  function ___syscall40(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // rmdir
      var path = SYSCALLS.getStr();
      FS.rmdir(path);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function _emscripten_glBindBuffer(target, buffer) {
      var bufferObj = buffer ? GL.buffers[buffer] : null;
  
      if (target == GLctx.ARRAY_BUFFER) {
        GL.currArrayBuffer = buffer;
        GLImmediate.lastArrayBuffer = buffer;
      } else if (target == GLctx.ELEMENT_ARRAY_BUFFER) {
        GL.currElementArrayBuffer = buffer;
      }
  
      GLctx.bindBuffer(target, bufferObj);
    }

  var _emscripten_cleanup_setjmp=true;

  function _emscripten_glGetUniformfv(program, location, params) {
      emscriptenWebGLGetUniform(program, location, params, 'Float');
    }


  function _emscripten_glGetAttachedShaders(program, maxCount, count, shaders) {
      var result = GLctx.getAttachedShaders(GL.programs[program]);
      var len = result.length;
      if (len > maxCount) {
        len = maxCount;
      }
      HEAP32[((count)>>2)]=len;
      for (var i = 0; i < len; ++i) {
        var id = GL.shaders.indexOf(result[i]);
        assert(id !== -1, 'shader not bound to local id');
        HEAP32[(((shaders)+(i*4))>>2)]=id;
      }
    }

  function _emscripten_glGenRenderbuffers(n, renderbuffers) {
      for (var i = 0; i < n; i++) {
        var renderbuffer = GLctx.createRenderbuffer();
        if (!renderbuffer) {
          GL.recordError(0x0502 /* GL_INVALID_OPERATION */);
          while(i < n) HEAP32[(((renderbuffers)+(i++*4))>>2)]=0;
          return;
        }
        var id = GL.getNewId(GL.renderbuffers);
        renderbuffer.name = id;
        GL.renderbuffers[id] = renderbuffer;
        HEAP32[(((renderbuffers)+(i*4))>>2)]=id;
      }
    }

  function _emscripten_glFrontFace(x0) { GLctx.frontFace(x0) }

  function _emscripten_glActiveTexture(x0) { GLctx.activeTexture(x0) }

  function _emscripten_glUniform1iv(location, count, value) {
      location = GL.uniforms[location];
      value = HEAP32.subarray((value)>>2,(value+count*4)>>2);
      GLctx.uniform1iv(location, value);
    }

  function _emscripten_glTexCoordPointer(size, type, stride, pointer) {
      GLImmediate.setClientAttribute(GLImmediate.TEXTURE0 + GLImmediate.clientActiveTexture, size, type, stride, pointer);
    }

  
  function _emscripten_glGetProgramInfoLog(program, maxLength, length, infoLog) {
      var log = GLctx.getProgramInfoLog(GL.programs[program]);
      if (log === null) log = '(unknown error)';
  
      log = log.substr(0, maxLength - 1);
      if (maxLength > 0 && infoLog) {
        writeStringToMemory(log, infoLog);
        if (length) HEAP32[((length)>>2)]=log.length;
      } else {
        if (length) HEAP32[((length)>>2)]=0;
      }
    }function _emscripten_glGetInfoLogARB(id, maxLength, length, infoLog) {
      if (GL.programs[id]) {
        _emscripten_glGetProgramInfoLog(id, maxLength, length, infoLog);
      } else if (GL.shaders[id]) {
        _emscripten_glGetShaderInfoLog(id, maxLength, length, infoLog);
      } else {
        Module.printErr('WARNING: getObjectParameteriv received invalid id: ' + id);
      }
    }

  
  function __exit(status) {
      // void _exit(int status);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/exit.html
      Module['exit'](status);
    }function _exit(status) {
      __exit(status);
    }

  function _emscripten_glRenderbufferStorage(x0, x1, x2, x3) { GLctx.renderbufferStorage(x0, x1, x2, x3) }

  function _emscripten_glCopyTexSubImage2D(x0, x1, x2, x3, x4, x5, x6, x7) { GLctx.copyTexSubImage2D(x0, x1, x2, x3, x4, x5, x6, x7) }

  function ___syscall10(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // unlink
      var path = SYSCALLS.getStr();
      FS.unlink(path);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function _emscripten_glShaderBinary() {
      GL.recordError(0x0500/*GL_INVALID_ENUM*/);
    }

  function _emscripten_glIsProgram(program) {
      var program = GL.programs[program];
      if (!program) return 0;
      return GLctx.isProgram(program);
    }

  function _emscripten_glBlendColor(x0, x1, x2, x3) { GLctx.blendColor(x0, x1, x2, x3) }


  function _emscripten_glUniformMatrix3fv(location, count, transpose, value) {
      location = GL.uniforms[location];
      var view;
      if (count === 1) {
        // avoid allocation for the common case of uploading one uniform matrix
        view = GL.miniTempBufferViews[8];
        for (var i = 0; i < 9; i++) {
          view[i] = HEAPF32[(((value)+(i*4))>>2)];
        }
      } else {
        view = HEAPF32.subarray((value)>>2,(value+count*36)>>2);
      }
      GLctx.uniformMatrix3fv(location, transpose, view);
    }

  function _emscripten_glVertexAttrib2f(x0, x1, x2) { GLctx.vertexAttrib2f(x0, x1, x2) }

  function _emscripten_glUniform4fv(location, count, value) {
      location = GL.uniforms[location];
      var view;
      if (count === 1) {
        // avoid allocation for the common case of uploading one uniform
        view = GL.miniTempBufferViews[3];
        view[0] = HEAPF32[((value)>>2)];
        view[1] = HEAPF32[(((value)+(4))>>2)];
        view[2] = HEAPF32[(((value)+(8))>>2)];
        view[3] = HEAPF32[(((value)+(12))>>2)];
      } else {
        view = HEAPF32.subarray((value)>>2,(value+count*16)>>2);
      }
      GLctx.uniform4fv(location, view);
    }

  function _emscripten_glLineWidth(x0) { GLctx.lineWidth(x0) }

  function _glMatrixMode(mode) {
      if (mode == 0x1700 /* GL_MODELVIEW */) {
        GLImmediate.currentMatrix = 0/*m*/;
      } else if (mode == 0x1701 /* GL_PROJECTION */) {
        GLImmediate.currentMatrix = 1/*p*/;
      } else if (mode == 0x1702) { // GL_TEXTURE
        GLImmediate.useTextureMatrix = true;
        GLImmediate.currentMatrix = 2/*t*/ + GLImmediate.clientActiveTexture;
      } else {
        throw "Wrong mode " + mode + " passed to glMatrixMode";
      }
    }

  function _emscripten_glGenFramebuffers(n, ids) {
      for (var i = 0; i < n; ++i) {
        var framebuffer = GLctx.createFramebuffer();
        if (!framebuffer) {
          GL.recordError(0x0502 /* GL_INVALID_OPERATION */);
          while(i < n) HEAP32[(((ids)+(i++*4))>>2)]=0;
          return;
        }
        var id = GL.getNewId(GL.framebuffers);
        framebuffer.name = id;
        GL.framebuffers[id] = framebuffer;
        HEAP32[(((ids)+(i*4))>>2)]=id;
      }
    }

  var _acos=Math_acos;

  function _emscripten_glUniform4iv(location, count, value) {
      location = GL.uniforms[location];
      count *= 4;
      value = HEAP32.subarray((value)>>2,(value+count*4)>>2);
      GLctx.uniform4iv(location, value);
    }

  function _emscripten_glBindTexture(target, texture) {
      GLctx.bindTexture(target, texture ? GL.textures[texture] : null);
    }

  
  function _emscripten_glDrawElements(mode, count, type, indices) {
  
      GLctx.drawElements(mode, count, type, indices);
  
    }function _emscripten_glDrawRangeElements(mode, start, end, count, type, indices) {
      _emscripten_glDrawElements(mode, count, type, indices, start, end);
    }

  function _emscripten_glGenTextures(n, textures) {
      for (var i = 0; i < n; i++) {
        var texture = GLctx.createTexture();
        if (!texture) {
          GL.recordError(0x0502 /* GL_INVALID_OPERATION */); // GLES + EGL specs don't specify what should happen here, so best to issue an error and create IDs with 0.
          while(i < n) HEAP32[(((textures)+(i++*4))>>2)]=0;
          return;
        }
        var id = GL.getNewId(GL.textures);
        texture.name = id;
        GL.textures[id] = texture;
        HEAP32[(((textures)+(i*4))>>2)]=id;
      }
    }

  function _emscripten_glVertexAttrib2fv(index, v) {
      v = HEAPF32.subarray((v)>>2,(v+8)>>2);
      GLctx.vertexAttrib2fv(index, v);
    }

  function _emscripten_glGetActiveUniform(program, index, bufSize, length, size, type, name) {
      program = GL.programs[program];
      var info = GLctx.getActiveUniform(program, index);
      if (!info) return; // If an error occurs, nothing will be written to length, size, type and name.
  
      var infoname = info.name.slice(0, Math.max(0, bufSize - 1));
      if (bufSize > 0 && name) {
        writeStringToMemory(infoname, name);
        if (length) HEAP32[((length)>>2)]=infoname.length;
      } else {
        if (length) HEAP32[((length)>>2)]=0;
      }
  
      if (size) HEAP32[((size)>>2)]=info.size;
      if (type) HEAP32[((type)>>2)]=info.type;
    }

  function _emscripten_glDeleteObjectARB(id) {
      if (GL.programs[id]) {
        _emscripten_glDeleteProgram(id);
      } else if (GL.shaders[id]) {
        _emscripten_glDeleteShader(id);
      } else {
        Module.printErr('WARNING: deleteObject received invalid id: ' + id);
      }
    }

  function _emscripten_glUniform1f(location, v0) {
      location = GL.uniforms[location];
      GLctx.uniform1f(location, v0);
    }

  function _emscripten_glVertexAttribPointer(index, size, type, normalized, stride, ptr) {
      GLctx.vertexAttribPointer(index, size, type, normalized, stride, ptr);
    }

  function _emscripten_glDrawArrays(mode, first, count) {
  
      GLctx.drawArrays(mode, first, count);
  
    }

  function _emscripten_glGenBuffers(n, buffers) {
      for (var i = 0; i < n; i++) {
        var buffer = GLctx.createBuffer();
        if (!buffer) {
          GL.recordError(0x0502 /* GL_INVALID_OPERATION */);
          while(i < n) HEAP32[(((buffers)+(i++*4))>>2)]=0;
          return;
        }
        var id = GL.getNewId(GL.buffers);
        buffer.name = id;
        GL.buffers[id] = buffer;
        HEAP32[(((buffers)+(i*4))>>2)]=id;
      }
    }

  var _log=Math_log;

  function _system(command) {
      // int system(const char *command);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/system.html
      // Can't call external programs.
      ___setErrNo(ERRNO_CODES.EAGAIN);
      return -1;
    }

  function _glfwSetCharCallback(cbfun) {
      GLFW.setCharCallback(GLFW.active.id, cbfun);
    }

  function _emscripten_glGetUniformLocation(program, name) {
      name = Pointer_stringify(name);
  
      var arrayOffset = 0;
      // If user passed an array accessor "[index]", parse the array index off the accessor.
      if (name.indexOf(']', name.length-1) !== -1) {
        var ls = name.lastIndexOf('[');
        var arrayIndex = name.slice(ls+1, -1);
        if (arrayIndex.length > 0) {
          arrayOffset = parseInt(arrayIndex);
          if (arrayOffset < 0) {
            return -1;
          }
        }
        name = name.slice(0, ls);
      }
  
      var ptable = GL.programInfos[program];
      if (!ptable) {
        return -1;
      }
      var utable = ptable.uniforms;
      var uniformInfo = utable[name]; // returns pair [ dimension_of_uniform_array, uniform_location ]
      if (uniformInfo && arrayOffset < uniformInfo[0]) { // Check if user asked for an out-of-bounds element, i.e. for 'vec4 colors[3];' user could ask for 'colors[10]' which should return -1.
        return uniformInfo[1]+arrayOffset;
      } else {
        return -1;
      }
    }

  function _emscripten_glVertexAttrib4fv(index, v) {
      v = HEAPF32.subarray((v)>>2,(v+16)>>2);
      GLctx.vertexAttrib4fv(index, v);
    }

  function _emscripten_glScissor(x0, x1, x2, x3) { GLctx.scissor(x0, x1, x2, x3) }

   
  Module["_bitshift64Lshr"] = _bitshift64Lshr;

  var _BDtoIHigh=true;

  function _emscripten_glIsShader(shader) {
      var s = GL.shaders[shader];
      if (!s) return 0;
      return GLctx.isShader(s);
    }

  function _emscripten_longjmp(env, value) {
      _longjmp(env, value);
    }

  
  
  
  
  var _environ=allocate(1, "i32*", ALLOC_STATIC);var ___environ=_environ;function ___buildEnvironment(env) {
      // WARNING: Arbitrary limit!
      var MAX_ENV_VALUES = 64;
      var TOTAL_ENV_SIZE = 1024;
  
      // Statically allocate memory for the environment.
      var poolPtr;
      var envPtr;
      if (!___buildEnvironment.called) {
        ___buildEnvironment.called = true;
        // Set default values. Use string keys for Closure Compiler compatibility.
        ENV['USER'] = ENV['LOGNAME'] = 'web_user';
        ENV['PATH'] = '/';
        ENV['PWD'] = '/';
        ENV['HOME'] = '/home/web_user';
        ENV['LANG'] = 'C';
        ENV['_'] = Module['thisProgram'];
        // Allocate memory.
        poolPtr = allocate(TOTAL_ENV_SIZE, 'i8', ALLOC_STATIC);
        envPtr = allocate(MAX_ENV_VALUES * 4,
                          'i8*', ALLOC_STATIC);
        HEAP32[((envPtr)>>2)]=poolPtr;
        HEAP32[((_environ)>>2)]=envPtr;
      } else {
        envPtr = HEAP32[((_environ)>>2)];
        poolPtr = HEAP32[((envPtr)>>2)];
      }
  
      // Collect key=value lines.
      var strings = [];
      var totalSize = 0;
      for (var key in env) {
        if (typeof env[key] === 'string') {
          var line = key + '=' + env[key];
          strings.push(line);
          totalSize += line.length;
        }
      }
      if (totalSize > TOTAL_ENV_SIZE) {
        throw new Error('Environment size exceeded TOTAL_ENV_SIZE!');
      }
  
      // Make new.
      var ptrSize = 4;
      for (var i = 0; i < strings.length; i++) {
        var line = strings[i];
        writeAsciiToMemory(line, poolPtr);
        HEAP32[(((envPtr)+(i * ptrSize))>>2)]=poolPtr;
        poolPtr += line.length + 1;
      }
      HEAP32[(((envPtr)+(strings.length * ptrSize))>>2)]=0;
    }var ENV={};function _getenv(name) {
      // char *getenv(const char *name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/getenv.html
      if (name === 0) return 0;
      name = Pointer_stringify(name);
      if (!ENV.hasOwnProperty(name)) return 0;
  
      if (_getenv.ret) _free(_getenv.ret);
      _getenv.ret = allocate(intArrayFromString(ENV[name]), 'i8', ALLOC_NORMAL);
      return _getenv.ret;
    }

  function _emscripten_glDrawBuffers(n, bufs) {
      var bufArray = [];
      for (var i = 0; i < n; i++)
        bufArray.push(HEAP32[(((bufs)+(i*4))>>2)]);
  
      GLctx['drawBuffers'](bufArray);
    }

  function _emscripten_glBindFramebuffer(target, framebuffer) {
      GLctx.bindFramebuffer(target, framebuffer ? GL.framebuffers[framebuffer] : null);
    }

  function _emscripten_glBlendEquation(x0) { GLctx.blendEquation(x0) }

  function _emscripten_glBufferSubData(target, offset, size, data) {
      GLctx.bufferSubData(target, offset, HEAPU8.subarray(data, data+size));
    }

  function _emscripten_glBufferData(target, size, data, usage) {
      switch (usage) { // fix usages, WebGL only has *_DRAW
        case 0x88E1: // GL_STREAM_READ
        case 0x88E2: // GL_STREAM_COPY
          usage = 0x88E0; // GL_STREAM_DRAW
          break;
        case 0x88E5: // GL_STATIC_READ
        case 0x88E6: // GL_STATIC_COPY
          usage = 0x88E4; // GL_STATIC_DRAW
          break;
        case 0x88E9: // GL_DYNAMIC_READ
        case 0x88EA: // GL_DYNAMIC_COPY
          usage = 0x88E8; // GL_DYNAMIC_DRAW
          break;
      }
      if (!data) {
        GLctx.bufferData(target, size, usage);
      } else {
        GLctx.bufferData(target, HEAPU8.subarray(data, data+size), usage);
      }
    }

  function _sbrk(bytes) {
      // Implement a Linux-like 'memory area' for our 'process'.
      // Changes the size of the memory area by |bytes|; returns the
      // address of the previous top ('break') of the memory area
      // We control the "dynamic" memory - DYNAMIC_BASE to DYNAMICTOP
      var self = _sbrk;
      if (!self.called) {
        DYNAMICTOP = alignMemoryPage(DYNAMICTOP); // make sure we start out aligned
        self.called = true;
        assert(Runtime.dynamicAlloc);
        self.alloc = Runtime.dynamicAlloc;
        Runtime.dynamicAlloc = function() { abort('cannot dynamically allocate, sbrk now has control') };
      }
      var ret = DYNAMICTOP;
      if (bytes != 0) {
        var success = self.alloc(bytes);
        if (!success) return -1 >>> 0; // sbrk failure code
      }
      return ret;  // Previous break location.
    }

   
  Module["_bitshift64Shl"] = _bitshift64Shl;

  var _BItoD=true;

  function _emscripten_glGetShaderSource(shader, bufSize, length, source) {
      var result = GLctx.getShaderSource(GL.shaders[shader]);
      if (!result) return; // If an error occurs, nothing will be written to length or source.
      result = result.slice(0, Math.max(0, bufSize - 1));
      if (bufSize > 0 && source) {
        writeStringToMemory(result, source);
        if (length) HEAP32[((length)>>2)]=result.length;
      } else {
        if (length) HEAP32[((length)>>2)]=0;
      }
    }

  function _emscripten_glClearDepth(x0) { GLctx.clearDepth(x0) }

  
  
  function _glEnableClientState(cap) {
      var attrib = GLEmulation.getAttributeFromCapability(cap);
      if (attrib === null) {
        Module.printErr('WARNING: unhandled clientstate: ' + cap);
        return;
      }
      if (!GLImmediate.enabledClientAttributes[attrib]) {
        GLImmediate.enabledClientAttributes[attrib] = true;
        GLImmediate.totalEnabledClientAttributes++;
        GLImmediate.currentRenderer = null; // Will need to change current renderer, since the set of active vertex pointers changed.
        if (GLEmulation.currentVao) GLEmulation.currentVao.enabledClientStates[cap] = 1;
        GLImmediate.modifiedClientAttributes = true;
      }
    }function _emulGlBindVertexArray(vao) {
      // undo vao-related things, wipe the slate clean, both for vao of 0 or an actual vao
      GLEmulation.currentVao = null; // make sure the commands we run here are not recorded
      if (GLImmediate.lastRenderer) GLImmediate.lastRenderer.cleanup();
      _glBindBuffer(GLctx.ARRAY_BUFFER, 0); // XXX if one was there before we were bound?
      _glBindBuffer(GLctx.ELEMENT_ARRAY_BUFFER, 0);
      for (var vaa in GLEmulation.enabledVertexAttribArrays) {
        GLctx.disableVertexAttribArray(vaa);
      }
      GLEmulation.enabledVertexAttribArrays = {};
      GLImmediate.enabledClientAttributes = [0, 0];
      GLImmediate.totalEnabledClientAttributes = 0;
      GLImmediate.modifiedClientAttributes = true;
      if (vao) {
        // replay vao
        var info = GLEmulation.vaos[vao];
        _glBindBuffer(GLctx.ARRAY_BUFFER, info.arrayBuffer); // XXX overwrite current binding?
        _glBindBuffer(GLctx.ELEMENT_ARRAY_BUFFER, info.elementArrayBuffer);
        for (var vaa in info.enabledVertexAttribArrays) {
          _glEnableVertexAttribArray(vaa);
        }
        for (var vaa in info.vertexAttribPointers) {
          _glVertexAttribPointer.apply(null, info.vertexAttribPointers[vaa]);
        }
        for (var attrib in info.enabledClientStates) {
          _glEnableClientState(attrib|0);
        }
        GLEmulation.currentVao = info; // set currentVao last, so the commands we ran here were not recorded
      }
    }function _emscripten_glBindVertexArray(vao) {
      _emulGlBindVertexArray(vao);
    }

  function _glfwSetKeyCallback(cbfun) {
      GLFW.setKeyCallback(GLFW.active.id, cbfun);
    }

  function _emscripten_glGetFloatv(name_, p) {
      emscriptenWebGLGet(name_, p, 'Float');
    }

  function ___assert_fail(condition, filename, line, func) {
      ABORT = true;
      throw 'Assertion failed: ' + Pointer_stringify(condition) + ', at: ' + [filename ? Pointer_stringify(filename) : 'unknown filename', line, func ? Pointer_stringify(func) : 'unknown function'] + ' at ' + stackTrace();
    }

  function _emscripten_glVertexAttribDivisor(index, divisor) {
      GLctx['vertexAttribDivisor'](index, divisor);
    }

  function _emscripten_glDrawElementsInstanced(mode, count, type, indices, primcount) {
      GLctx['drawElementsInstanced'](mode, count, type, indices, primcount);
    }


  function _glfwOpenWindow(width, height, redbits, greenbits, bluebits, alphabits, depthbits, stencilbits, mode) {
      GLFW.hints[0x00021001] = redbits;     // GLFW_RED_BITS
      GLFW.hints[0x00021002] = greenbits;   // GLFW_GREEN_BITS
      GLFW.hints[0x00021003] = bluebits;    // GLFW_BLUE_BITS
      GLFW.hints[0x00021004] = alphabits;   // GLFW_ALPHA_BITS
      GLFW.hints[0x00021005] = depthbits;   // GLFW_DEPTH_BITS
      GLFW.hints[0x00021006] = stencilbits; // GLFW_STENCIL_BITS
      GLFW.createWindow(width, height, "GLFW2 Window", 0, 0);
      return 1; // GL_TRUE
    }

  function _emscripten_glCreateProgram() {
      var id = GL.getNewId(GL.programs);
      var program = GLctx.createProgram();
      program.name = id;
      GL.programs[id] = program;
      return id;
    }

  function _emscripten_glDeleteFramebuffers(n, framebuffers) {
      for (var i = 0; i < n; ++i) {
        var id = HEAP32[(((framebuffers)+(i*4))>>2)];
        var framebuffer = GL.framebuffers[id];
        if (!framebuffer) continue; // GL spec: "glDeleteFramebuffers silently ignores 0s and names that do not correspond to existing framebuffer objects".
        GLctx.deleteFramebuffer(framebuffer);
        framebuffer.name = 0;
        GL.framebuffers[id] = null;
      }
    }

  function _emscripten_glClearColor(x0, x1, x2, x3) { GLctx.clearColor(x0, x1, x2, x3) }

  function ___unlock() {}

  function _glfwGetNumberOfProcessors() {
      // Threads are disabled anyway…
      return 1;
    }

  var _floor=Math_floor;

  function _gluLookAt(ex, ey, ez, cx, cy, cz, ux, uy, uz) {
      GLImmediate.matricesModified = true;
      GLImmediate.matrixVersion[GLImmediate.currentMatrix] = (GLImmediate.matrixVersion[GLImmediate.currentMatrix] + 1)|0;
      GLImmediate.matrixLib.mat4.lookAt(GLImmediate.matrix[GLImmediate.currentMatrix], [ex, ey, ez],
          [cx, cy, cz], [ux, uy, uz]);
    }

  function _emscripten_glLoadMatrixf(matrix) {
      GLImmediate.matricesModified = true;
      GLImmediate.matrixVersion[GLImmediate.currentMatrix] = (GLImmediate.matrixVersion[GLImmediate.currentMatrix] + 1)|0;
      GLImmediate.matrixLib.mat4.set(HEAPF32.subarray((matrix)>>2,(matrix+64)>>2), GLImmediate.matrix[GLImmediate.currentMatrix]);
    }


  function _emscripten_glTexImage2D(target, level, internalFormat, width, height, border, format, type, pixels) {
      var pixelData;
      if (pixels) {
        var data = emscriptenWebGLGetTexPixelData(type, format, width, height, pixels, internalFormat);
        pixelData = data.pixels;
        internalFormat = data.internalFormat;
      } else {
        pixelData = null;
      }
      GLctx.texImage2D(target, level, internalFormat, width, height, border, format, type, pixelData);
    }

  var _exp=Math_exp;

  function _emscripten_glColorPointer(size, type, stride, pointer) {
      GLImmediate.setClientAttribute(GLImmediate.COLOR, size, type, stride, pointer);
    }

  function _glViewport(x0, x1, x2, x3) { GLctx.viewport(x0, x1, x2, x3) }

  function _glfwGetGLVersion(major, minor, rev) {
      setValue(major, 0, 'i32');
      setValue(minor, 0, 'i32');
      setValue(rev, 1, 'i32');
    }

  function _emscripten_glFlush() { GLctx.flush() }

  function _emscripten_glCreateShader(shaderType) {
      var id = GL.getNewId(GL.shaders);
      GL.shaders[id] = GLctx.createShader(shaderType);
      return id;
    }

  function _emscripten_glValidateProgram(program) {
      GLctx.validateProgram(GL.programs[program]);
    }

  function _difftime(time1, time0) {
      return time1 - time0;
    }

  function _emscripten_glColorMask(x0, x1, x2, x3) { GLctx.colorMask(x0, x1, x2, x3) }

  function _emscripten_glPixelStorei(pname, param) {
      if (pname == 0x0D05 /* GL_PACK_ALIGNMENT */) {
        GL.packAlignment = param;
      } else if (pname == 0x0cf5 /* GL_UNPACK_ALIGNMENT */) {
        GL.unpackAlignment = param;
      }
      GLctx.pixelStorei(pname, param);
    }

  function _emscripten_glDeleteTextures(n, textures) {
      for (var i = 0; i < n; i++) {
        var id = HEAP32[(((textures)+(i*4))>>2)];
        var texture = GL.textures[id];
        if (!texture) continue; // GL spec: "glDeleteTextures silently ignores 0s and names that do not correspond to existing textures".
        GLctx.deleteTexture(texture);
        texture.name = 0;
        GL.textures[id] = null;
      }
    }

  function _glfwGetKey(key) {
      return GLFW.getKey(GLFW.active.id, key);
    }

  function _emscripten_glCompileShader(shader) {
      GLctx.compileShader(GL.shaders[shader]);
    }

  
  function _emulGlGenVertexArrays(n, vaos) {
      for (var i = 0; i < n; i++) {
        var id = GL.getNewId(GLEmulation.vaos);
        GLEmulation.vaos[id] = {
          id: id,
          arrayBuffer: 0,
          elementArrayBuffer: 0,
          enabledVertexAttribArrays: {},
          vertexAttribPointers: {},
          enabledClientStates: {},
        };
        HEAP32[(((vaos)+(i*4))>>2)]=id;
      }
    }function _emscripten_glGenVertexArrays(n, arrays) {
      _emulGlGenVertexArrays(n, arrays);
    }

  function _time(ptr) {
      var ret = (Date.now()/1000)|0;
      if (ptr) {
        HEAP32[((ptr)>>2)]=ret;
      }
      return ret;
    }

  function _pthread_self() {
      //FIXME: assumes only a single thread
      return 0;
    }

  function _emscripten_glGetBooleanv(name_, p) {
      emscriptenWebGLGet(name_, p, 'Boolean');
    }

  function ___syscall221(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // fcntl64
      var stream = SYSCALLS.getStreamFromFD(), cmd = SYSCALLS.get();
      switch (cmd) {
        case 0: {
          var arg = SYSCALLS.get();
          if (arg < 0) {
            return -ERRNO_CODES.EINVAL;
          }
          var newStream;
          newStream = FS.open(stream.path, stream.flags, 0, arg);
          return newStream.fd;
        }
        case 1:
        case 2:
          return 0;  // FD_CLOEXEC makes no sense for a single process.
        case 3:
          return stream.flags;
        case 4: {
          var arg = SYSCALLS.get();
          stream.flags |= arg;
          return 0;
        }
        case 12:
        case 12: {
          var arg = SYSCALLS.get();
          var offset = 0;
          // We're always unlocked.
          HEAP16[(((arg)+(offset))>>1)]=2;
          return 0;
        }
        case 13:
        case 14:
        case 13:
        case 14:
          return 0; // Pretend that the locking is successful.
        case 16:
        case 8:
          return -ERRNO_CODES.EINVAL; // These are for sockets. We don't have them fully implemented yet.
        case 9:
          // musl trusts getown return values, due to a bug where they must be, as they overlap with errors. just return -1 here, so fnctl() returns that, and we set errno ourselves.
          ___setErrNo(ERRNO_CODES.EINVAL);
          return -1;
        default: {
          return -ERRNO_CODES.EINVAL;
        }
      }
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

var GLctx; GL.init()
GLEmulation.init();
GLImmediate.setupFuncs(); Browser.moduleContextCreatedCallbacks.push(function() { GLImmediate.init() });
Module["requestFullScreen"] = function Module_requestFullScreen(lockPointer, resizeCanvas, vrDevice) { Browser.requestFullScreen(lockPointer, resizeCanvas, vrDevice) };
  Module["requestAnimationFrame"] = function Module_requestAnimationFrame(func) { Browser.requestAnimationFrame(func) };
  Module["setCanvasSize"] = function Module_setCanvasSize(width, height, noUpdates) { Browser.setCanvasSize(width, height, noUpdates) };
  Module["pauseMainLoop"] = function Module_pauseMainLoop() { Browser.mainLoop.pause() };
  Module["resumeMainLoop"] = function Module_resumeMainLoop() { Browser.mainLoop.resume() };
  Module["getUserMedia"] = function Module_getUserMedia() { Browser.getUserMedia() }
  Module["createContext"] = function Module_createContext(canvas, useWebGL, setInModule, webGLContextAttributes) { return Browser.createContext(canvas, useWebGL, setInModule, webGLContextAttributes) }
FS.staticInit();__ATINIT__.unshift(function() { if (!Module["noFSInit"] && !FS.init.initialized) FS.init() });__ATMAIN__.push(function() { FS.ignorePermissions = false });__ATEXIT__.push(function() { FS.quit() });Module["FS_createFolder"] = FS.createFolder;Module["FS_createPath"] = FS.createPath;Module["FS_createDataFile"] = FS.createDataFile;Module["FS_createPreloadedFile"] = FS.createPreloadedFile;Module["FS_createLazyFile"] = FS.createLazyFile;Module["FS_createLink"] = FS.createLink;Module["FS_createDevice"] = FS.createDevice;Module["FS_unlink"] = FS.unlink;
__ATINIT__.unshift(function() { TTY.init() });__ATEXIT__.push(function() { TTY.shutdown() });
if (ENVIRONMENT_IS_NODE) { var fs = require("fs"); var NODEJS_PATH = require("path"); NODEFS.staticInit(); }
___buildEnvironment(ENV);
STACK_BASE = STACKTOP = Runtime.alignMemory(STATICTOP);

staticSealed = true; // seal the static portion of memory

STACK_MAX = STACK_BASE + TOTAL_STACK;

DYNAMIC_BASE = DYNAMICTOP = Runtime.alignMemory(STACK_MAX);

assert(DYNAMIC_BASE < TOTAL_MEMORY, "TOTAL_MEMORY not big enough for stack");

 var cttz_i8 = allocate([8,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,7,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0], "i8", ALLOC_DYNAMIC);


function nullFunc_viiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vd(x) { Module["printErr"]("Invalid function pointer called with signature 'vd'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vid(x) { Module["printErr"]("Invalid function pointer called with signature 'vid'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vi(x) { Module["printErr"]("Invalid function pointer called with signature 'vi'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vii(x) { Module["printErr"]("Invalid function pointer called with signature 'vii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_ii(x) { Module["printErr"]("Invalid function pointer called with signature 'ii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viddd(x) { Module["printErr"]("Invalid function pointer called with signature 'viddd'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vidd(x) { Module["printErr"]("Invalid function pointer called with signature 'vidd'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viii(x) { Module["printErr"]("Invalid function pointer called with signature 'viii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vidddd(x) { Module["printErr"]("Invalid function pointer called with signature 'vidddd'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vdi(x) { Module["printErr"]("Invalid function pointer called with signature 'vdi'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiiiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iii(x) { Module["printErr"]("Invalid function pointer called with signature 'iii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_i(x) { Module["printErr"]("Invalid function pointer called with signature 'i'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vdddddd(x) { Module["printErr"]("Invalid function pointer called with signature 'vdddddd'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vdddd(x) { Module["printErr"]("Invalid function pointer called with signature 'vdddd'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vdd(x) { Module["printErr"]("Invalid function pointer called with signature 'vdd'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_v(x) { Module["printErr"]("Invalid function pointer called with signature 'v'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viid(x) { Module["printErr"]("Invalid function pointer called with signature 'viid'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function invoke_viiiii(index,a1,a2,a3,a4,a5) {
  try {
    Module["dynCall_viiiii"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vd(index,a1) {
  try {
    Module["dynCall_vd"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vid(index,a1,a2) {
  try {
    Module["dynCall_vid"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vi(index,a1) {
  try {
    Module["dynCall_vi"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vii(index,a1,a2) {
  try {
    Module["dynCall_vii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_ii(index,a1) {
  try {
    return Module["dynCall_ii"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viddd(index,a1,a2,a3,a4) {
  try {
    Module["dynCall_viddd"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vidd(index,a1,a2,a3) {
  try {
    Module["dynCall_vidd"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiii(index,a1,a2,a3) {
  try {
    return Module["dynCall_iiii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8) {
  try {
    Module["dynCall_viiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiii(index,a1,a2,a3,a4,a5,a6) {
  try {
    Module["dynCall_viiiiii"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viii(index,a1,a2,a3) {
  try {
    Module["dynCall_viii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vidddd(index,a1,a2,a3,a4,a5) {
  try {
    Module["dynCall_vidddd"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vdi(index,a1,a2) {
  try {
    Module["dynCall_vdi"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiiii(index,a1,a2,a3,a4,a5,a6,a7) {
  try {
    Module["dynCall_viiiiiii"](index,a1,a2,a3,a4,a5,a6,a7);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9) {
  try {
    Module["dynCall_viiiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8,a9);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iii(index,a1,a2) {
  try {
    return Module["dynCall_iii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_i(index) {
  try {
    return Module["dynCall_i"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiii(index,a1,a2,a3,a4) {
  try {
    return Module["dynCall_iiiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vdddddd(index,a1,a2,a3,a4,a5,a6) {
  try {
    Module["dynCall_vdddddd"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vdddd(index,a1,a2,a3,a4) {
  try {
    Module["dynCall_vdddd"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vdd(index,a1,a2) {
  try {
    Module["dynCall_vdd"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_v(index) {
  try {
    Module["dynCall_v"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viid(index,a1,a2,a3) {
  try {
    Module["dynCall_viid"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiii(index,a1,a2,a3,a4) {
  try {
    Module["dynCall_viiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

Module.asmGlobalArg = { "Math": Math, "Int8Array": Int8Array, "Int16Array": Int16Array, "Int32Array": Int32Array, "Uint8Array": Uint8Array, "Uint16Array": Uint16Array, "Uint32Array": Uint32Array, "Float32Array": Float32Array, "Float64Array": Float64Array, "NaN": NaN, "Infinity": Infinity };

Module.asmLibraryArg = { "abort": abort, "assert": assert, "nullFunc_viiiii": nullFunc_viiiii, "nullFunc_vd": nullFunc_vd, "nullFunc_vid": nullFunc_vid, "nullFunc_vi": nullFunc_vi, "nullFunc_vii": nullFunc_vii, "nullFunc_ii": nullFunc_ii, "nullFunc_viddd": nullFunc_viddd, "nullFunc_vidd": nullFunc_vidd, "nullFunc_iiii": nullFunc_iiii, "nullFunc_viiiiiiii": nullFunc_viiiiiiii, "nullFunc_viiiiii": nullFunc_viiiiii, "nullFunc_viii": nullFunc_viii, "nullFunc_vidddd": nullFunc_vidddd, "nullFunc_vdi": nullFunc_vdi, "nullFunc_viiiiiii": nullFunc_viiiiiii, "nullFunc_viiiiiiiii": nullFunc_viiiiiiiii, "nullFunc_iii": nullFunc_iii, "nullFunc_i": nullFunc_i, "nullFunc_iiiii": nullFunc_iiiii, "nullFunc_vdddddd": nullFunc_vdddddd, "nullFunc_vdddd": nullFunc_vdddd, "nullFunc_vdd": nullFunc_vdd, "nullFunc_v": nullFunc_v, "nullFunc_viid": nullFunc_viid, "nullFunc_viiii": nullFunc_viiii, "invoke_viiiii": invoke_viiiii, "invoke_vd": invoke_vd, "invoke_vid": invoke_vid, "invoke_vi": invoke_vi, "invoke_vii": invoke_vii, "invoke_ii": invoke_ii, "invoke_viddd": invoke_viddd, "invoke_vidd": invoke_vidd, "invoke_iiii": invoke_iiii, "invoke_viiiiiiii": invoke_viiiiiiii, "invoke_viiiiii": invoke_viiiiii, "invoke_viii": invoke_viii, "invoke_vidddd": invoke_vidddd, "invoke_vdi": invoke_vdi, "invoke_viiiiiii": invoke_viiiiiii, "invoke_viiiiiiiii": invoke_viiiiiiiii, "invoke_iii": invoke_iii, "invoke_i": invoke_i, "invoke_iiiii": invoke_iiiii, "invoke_vdddddd": invoke_vdddddd, "invoke_vdddd": invoke_vdddd, "invoke_vdd": invoke_vdd, "invoke_v": invoke_v, "invoke_viid": invoke_viid, "invoke_viiii": invoke_viiii, "_glUseProgram": _glUseProgram, "_emscripten_glGetTexParameterfv": _emscripten_glGetTexParameterfv, "_glfwSleep": _glfwSleep, "_exp": _exp, "_emscripten_glReleaseShaderCompiler": _emscripten_glReleaseShaderCompiler, "_emscripten_glBlendFuncSeparate": _emscripten_glBlendFuncSeparate, "_emscripten_glVertexAttribPointer": _emscripten_glVertexAttribPointer, "___syscall63": ___syscall63, "_emscripten_glGetIntegerv": _emscripten_glGetIntegerv, "_glRotatef": _glRotatef, "_emscripten_glCullFace": _emscripten_glCullFace, "_glfwGetMouseWheel": _glfwGetMouseWheel, "_emscripten_glStencilMaskSeparate": _emscripten_glStencilMaskSeparate, "_gluLookAt": _gluLookAt, "_emscripten_glFrontFace": _emscripten_glFrontFace, "___assert_fail": ___assert_fail, "_glDeleteProgram": _glDeleteProgram, "_emscripten_glUniform3fv": _emscripten_glUniform3fv, "_emscripten_glPolygonOffset": _emscripten_glPolygonOffset, "_glfwEnable": _glfwEnable, "_emscripten_glUseProgram": _emscripten_glUseProgram, "_emscripten_glBlendColor": _emscripten_glBlendColor, "_glBindBuffer": _glBindBuffer, "_emscripten_glDepthFunc": _emscripten_glDepthFunc, "__addDays": __addDays, "_emscripten_glCompressedTexImage2D": _emscripten_glCompressedTexImage2D, "_emscripten_set_main_loop_timing": _emscripten_set_main_loop_timing, "_glTranslatef": _glTranslatef, "_sbrk": _sbrk, "_emscripten_glDisableVertexAttribArray": _emscripten_glDisableVertexAttribArray, "_emscripten_glUniform3iv": _emscripten_glUniform3iv, "_glDisableVertexAttribArray": _glDisableVertexAttribArray, "_glCreateShader": _glCreateShader, "_glCompileShader": _glCompileShader, "_sysconf": _sysconf, "_emscripten_glSampleCoverage": _emscripten_glSampleCoverage, "_emscripten_glVertexPointer": _emscripten_glVertexPointer, "_clock": _clock, "emscriptenWebGLComputeImageSize": emscriptenWebGLComputeImageSize, "_emscripten_glGetBooleanv": _emscripten_glGetBooleanv, "_emulGlBindVertexArray": _emulGlBindVertexArray, "_fabs": _fabs, "_cos": _cos, "_glfwTerminate": _glfwTerminate, "_emscripten_glUniform1i": _emscripten_glUniform1i, "_emscripten_glGenBuffers": _emscripten_glGenBuffers, "_glLoadIdentity": _glLoadIdentity, "_glfwGetProcAddress": _glfwGetProcAddress, "_glfwSetWindowSizeCallback": _glfwSetWindowSizeCallback, "_emscripten_glGetShaderPrecisionFormat": _emscripten_glGetShaderPrecisionFormat, "_glfwInit": _glfwInit, "_glfwGetGLVersion": _glfwGetGLVersion, "__isLeapYear": __isLeapYear, "_gluPerspective": _gluPerspective, "_emscripten_glBlendEquationSeparate": _emscripten_glBlendEquationSeparate, "_glShaderSource": _glShaderSource, "_emscripten_glGetPointerv": _emscripten_glGetPointerv, "_emscripten_glGetString": _emscripten_glGetString, "_emscripten_glIsFramebuffer": _emscripten_glIsFramebuffer, "_gmtime_r": _gmtime_r, "_emscripten_glIsEnabled": _emscripten_glIsEnabled, "_emscripten_glScissor": _emscripten_glScissor, "_emscripten_glTexParameteriv": _emscripten_glTexParameteriv, "_pthread_cleanup_push": _pthread_cleanup_push, "_emscripten_glBindProgramARB": _emscripten_glBindProgramARB, "_glGetBooleanv": _glGetBooleanv, "_emulGlDeleteVertexArrays": _emulGlDeleteVertexArrays, "___syscall140": ___syscall140, "___syscall145": ___syscall145, "___syscall146": ___syscall146, "_pthread_cleanup_pop": _pthread_cleanup_pop, "_emscripten_glAttachShader": _emscripten_glAttachShader, "_emscripten_glDrawRangeElements": _emscripten_glDrawRangeElements, "_glVertexAttribPointer": _glVertexAttribPointer, "_glHint": _glHint, "_emscripten_glUniform2i": _emscripten_glUniform2i, "_emscripten_glUniform2f": _emscripten_glUniform2f, "_emscripten_glTexParameterfv": _emscripten_glTexParameterfv, "_emscripten_glUniformMatrix2fv": _emscripten_glUniformMatrix2fv, "_glBegin": _glBegin, "_atan2": _atan2, "_glIsEnabled": _glIsEnabled, "_emscripten_glTexParameterf": _emscripten_glTexParameterf, "_emscripten_glGetAttachedShaders": _emscripten_glGetAttachedShaders, "_emscripten_glGenTextures": _emscripten_glGenTextures, "_emscripten_glTexParameteri": _emscripten_glTexParameteri, "_glfwOpenWindow": _glfwOpenWindow, "_emscripten_glColor4f": _emscripten_glColor4f, "_strftime": _strftime, "_emscripten_glClear": _emscripten_glClear, "_emscripten_glHint": _emscripten_glHint, "_emscripten_glGenVertexArrays": _emscripten_glGenVertexArrays, "_emscripten_glVertexAttrib2fv": _emscripten_glVertexAttrib2fv, "_glViewport": _glViewport, "_emscripten_glUniform4iv": _emscripten_glUniform4iv, "_emscripten_glGetTexParameteriv": _emscripten_glGetTexParameteriv, "___setErrNo": ___setErrNo, "_emscripten_glDrawArrays": _emscripten_glDrawArrays, "_emscripten_glBindAttribLocation": _emscripten_glBindAttribLocation, "___syscall330": ___syscall330, "_emscripten_glClientActiveTexture": _emscripten_glClientActiveTexture, "_emscripten_glVertexAttrib2f": _emscripten_glVertexAttrib2f, "_emscripten_glFlush": _emscripten_glFlush, "_emscripten_glBlendFunc": _emscripten_glBlendFunc, "_emscripten_glUniform4i": _emscripten_glUniform4i, "_emscripten_glCheckFramebufferStatus": _emscripten_glCheckFramebufferStatus, "_mktime": _mktime, "_emscripten_glGetError": _emscripten_glGetError, "_emscripten_glClearDepthf": _emscripten_glClearDepthf, "_nanosleep": _nanosleep, "_emscripten_glBindFramebuffer": _emscripten_glBindFramebuffer, "_emscripten_glUniform3f": _emscripten_glUniform3f, "_emscripten_glUniform3i": _emscripten_glUniform3i, "_glFrustum": _glFrustum, "_emscripten_glValidateProgram": _emscripten_glValidateProgram, "_emscripten_glDeleteShader": _emscripten_glDeleteShader, "_glEnable": _glEnable, "_emscripten_glReadPixels": _emscripten_glReadPixels, "_emscripten_glMatrixMode": _emscripten_glMatrixMode, "_glGetIntegerv": _glGetIntegerv, "_glGetString": _glGetString, "_emscripten_glClearStencil": _emscripten_glClearStencil, "_sqrt": _sqrt, "_emscripten_glIsProgram": _emscripten_glIsProgram, "emscriptenWebGLGet": emscriptenWebGLGet, "_emscripten_glEnableVertexAttribArray": _emscripten_glEnableVertexAttribArray, "_emscripten_glGetAttribLocation": _emscripten_glGetAttribLocation, "_emscripten_get_now": _emscripten_get_now, "___syscall10": ___syscall10, "_emscripten_glNormalPointer": _emscripten_glNormalPointer, "_emscripten_glBindVertexArray": _emscripten_glBindVertexArray, "_emscripten_glTexCoordPointer": _emscripten_glTexCoordPointer, "_emscripten_glEnable": _emscripten_glEnable, "_emscripten_glShaderSource": _emscripten_glShaderSource, "_emscripten_glClearDepth": _emscripten_glClearDepth, "_glDisable": _glDisable, "___lock": ___lock, "emscriptenWebGLGetTexPixelData": emscriptenWebGLGetTexPixelData, "___syscall6": ___syscall6, "___syscall5": ___syscall5, "_emscripten_glIsBuffer": _emscripten_glIsBuffer, "_emscripten_glBindRenderbuffer": _emscripten_glBindRenderbuffer, "_time": _time, "_glColor3f": _glColor3f, "_glDetachShader": _glDetachShader, "_emscripten_glVertexAttrib1f": _emscripten_glVertexAttrib1f, "_glfwSetMouseButtonCallback": _glfwSetMouseButtonCallback, "_exit": _exit, "_emscripten_asm_const_2": _emscripten_asm_const_2, "_emscripten_glStencilOpSeparate": _emscripten_glStencilOpSeparate, "_emscripten_glGetActiveAttrib": _emscripten_glGetActiveAttrib, "_emscripten_glDeleteBuffers": _emscripten_glDeleteBuffers, "_llvm_pow_f64": _llvm_pow_f64, "___syscall265": ___syscall265, "_localtime_r": _localtime_r, "___syscall54": ___syscall54, "_emscripten_glUniform4f": _emscripten_glUniform4f, "_emscripten_glUniform2fv": _emscripten_glUniform2fv, "_emscripten_glGetUniformLocation": _emscripten_glGetUniformLocation, "_emscripten_glLoadMatrixf": _emscripten_glLoadMatrixf, "_emscripten_glFinish": _emscripten_glFinish, "_glEnd": _glEnd, "_emscripten_glShaderBinary": _emscripten_glShaderBinary, "_emscripten_glDrawElements": _emscripten_glDrawElements, "_asin": _asin, "_emscripten_glGetShaderInfoLog": _emscripten_glGetShaderInfoLog, "___syscall221": ___syscall221, "_emscripten_glStencilMask": _emscripten_glStencilMask, "_glfwSetMousePosCallback": _glfwSetMousePosCallback, "_emscripten_glGetVertexAttribPointerv": _emscripten_glGetVertexAttribPointerv, "_emscripten_glCompressedTexSubImage2D": _emscripten_glCompressedTexSubImage2D, "emscriptenWebGLGetUniform": emscriptenWebGLGetUniform, "_tzset": _tzset, "_emscripten_glDeleteVertexArrays": _emscripten_glDeleteVertexArrays, "_glClearColor": _glClearColor, "_glfwGetNumberOfProcessors": _glfwGetNumberOfProcessors, "_emscripten_glGetActiveUniform": _emscripten_glGetActiveUniform, "emscriptenWebGLGetVertexAttrib": emscriptenWebGLGetVertexAttrib, "_emscripten_glUniform2iv": _emscripten_glUniform2iv, "_emscripten_glDisable": _emscripten_glDisable, "_glfwSetCharCallback": _glfwSetCharCallback, "_emscripten_glGetBufferParameteriv": _emscripten_glGetBufferParameteriv, "_glGetFloatv": _glGetFloatv, "_emscripten_glDeleteProgram": _emscripten_glDeleteProgram, "_emscripten_glDeleteRenderbuffers": _emscripten_glDeleteRenderbuffers, "_emscripten_memcpy_big": _emscripten_memcpy_big, "_emscripten_glDrawElementsInstanced": _emscripten_glDrawElementsInstanced, "_emscripten_glVertexAttrib4f": _emscripten_glVertexAttrib4f, "_emscripten_glGetVertexAttribiv": _emscripten_glGetVertexAttribiv, "_emscripten_glTexSubImage2D": _emscripten_glTexSubImage2D, "_emscripten_glGetProgramiv": _emscripten_glGetProgramiv, "_emscripten_glPixelStorei": _emscripten_glPixelStorei, "_glAttachShader": _glAttachShader, "_emulGlGenVertexArrays": _emulGlGenVertexArrays, "_glfwGetMouseButton": _glfwGetMouseButton, "_emscripten_glColorPointer": _emscripten_glColorPointer, "_getenv": _getenv, "_glfwGetWindowSize": _glfwGetWindowSize, "___syscall33": ___syscall33, "_log": _log, "_glActiveTexture": _glActiveTexture, "_glfwSwapBuffers": _glfwSwapBuffers, "___syscall38": ___syscall38, "_emscripten_glDepthMask": _emscripten_glDepthMask, "_emscripten_glDrawBuffers": _emscripten_glDrawBuffers, "_emscripten_glLineWidth": _emscripten_glLineWidth, "_tan": _tan, "_emscripten_glUniform1iv": _emscripten_glUniform1iv, "_emscripten_glGetObjectParameterivARB": _emscripten_glGetObjectParameterivARB, "_emscripten_glFramebufferTexture2D": _emscripten_glFramebufferTexture2D, "_glfwSwapInterval": _glfwSwapInterval, "_emscripten_glVertexAttrib4fv": _emscripten_glVertexAttrib4fv, "_glEnableVertexAttribArray": _glEnableVertexAttribArray, "_emscripten_glStencilFunc": _emscripten_glStencilFunc, "_abort": _abort, "_emscripten_glGetUniformiv": _emscripten_glGetUniformiv, "_glfwGetWindowParam": _glfwGetWindowParam, "_ceil": _ceil, "_emscripten_glRotatef": _emscripten_glRotatef, "_emscripten_glGetShaderiv": _emscripten_glGetShaderiv, "_localtime": _localtime, "_emscripten_glGenFramebuffers": _emscripten_glGenFramebuffers, "_floor": _floor, "_emscripten_glUniformMatrix4fv": _emscripten_glUniformMatrix4fv, "_emscripten_glLoadIdentity": _emscripten_glLoadIdentity, "_sin": _sin, "_glVertex3f": _glVertex3f, "_glEnableClientState": _glEnableClientState, "_emscripten_glUniform1f": _emscripten_glUniform1f, "_acos": _acos, "_emscripten_glUniform1fv": _emscripten_glUniform1fv, "_emscripten_glIsRenderbuffer": _emscripten_glIsRenderbuffer, "___buildEnvironment": ___buildEnvironment, "_glfwGetTime": _glfwGetTime, "_emscripten_glRenderbufferStorage": _emscripten_glRenderbufferStorage, "___syscall40": ___syscall40, "_emscripten_glFramebufferRenderbuffer": _emscripten_glFramebufferRenderbuffer, "__arraySum": __arraySum, "_emscripten_glDrawArraysInstanced": _emscripten_glDrawArraysInstanced, "_difftime": _difftime, "_emscripten_glCreateShader": _emscripten_glCreateShader, "_emscripten_glStencilFuncSeparate": _emscripten_glStencilFuncSeparate, "_usleep": _usleep, "_emscripten_glDeleteTextures": _emscripten_glDeleteTextures, "_glfwGetKey": _glfwGetKey, "_system": _system, "_glLinkProgram": _glLinkProgram, "_emscripten_glVertexAttribDivisor": _emscripten_glVertexAttribDivisor, "_glfwSetWindowRefreshCallback": _glfwSetWindowRefreshCallback, "_emscripten_glGetUniformfv": _emscripten_glGetUniformfv, "_glfwSetMouseWheelCallback": _glfwSetMouseWheelCallback, "_glfwOpenWindowHint": _glfwOpenWindowHint, "_emscripten_glViewport": _emscripten_glViewport, "_emscripten_glGetRenderbufferParameteriv": _emscripten_glGetRenderbufferParameteriv, "_emscripten_glVertexAttrib3fv": _emscripten_glVertexAttrib3fv, "_glfwGetMousePos": _glfwGetMousePos, "_glfwGetVersion": _glfwGetVersion, "_longjmp": _longjmp, "_emscripten_glCompileShader": _emscripten_glCompileShader, "_glClear": _glClear, "_emscripten_glFrustum": _emscripten_glFrustum, "_glMatrixMode": _glMatrixMode, "_emscripten_glDepthRangef": _emscripten_glDepthRangef, "_emscripten_glClearColor": _emscripten_glClearColor, "__exit": __exit, "_glfwSetWindowCloseCallback": _glfwSetWindowCloseCallback, "_gmtime": _gmtime, "_emscripten_glStencilOp": _emscripten_glStencilOp, "_glBindAttribLocation": _glBindAttribLocation, "_emscripten_glGenerateMipmap": _emscripten_glGenerateMipmap, "_emscripten_glColorMask": _emscripten_glColorMask, "_emscripten_glLinkProgram": _emscripten_glLinkProgram, "_emscripten_glBlendEquation": _emscripten_glBlendEquation, "_atan": _atan, "_emscripten_glIsTexture": _emscripten_glIsTexture, "_pthread_self": _pthread_self, "_emscripten_glVertexAttrib1fv": _emscripten_glVertexAttrib1fv, "_emscripten_glUniformMatrix3fv": _emscripten_glUniformMatrix3fv, "_emscripten_glBindTexture": _emscripten_glBindTexture, "_emscripten_glGetFramebufferAttachmentParameteriv": _emscripten_glGetFramebufferAttachmentParameteriv, "_emscripten_glDeleteObjectARB": _emscripten_glDeleteObjectARB, "_emscripten_glActiveTexture": _emscripten_glActiveTexture, "_emscripten_glGenRenderbuffers": _emscripten_glGenRenderbuffers, "_glfwExtensionSupported": _glfwExtensionSupported, "___unlock": ___unlock, "_emscripten_glBufferSubData": _emscripten_glBufferSubData, "_emscripten_glDepthRange": _emscripten_glDepthRange, "_emscripten_set_main_loop": _emscripten_set_main_loop, "_emscripten_glIsShader": _emscripten_glIsShader, "_emscripten_glGetProgramInfoLog": _emscripten_glGetProgramInfoLog, "_emscripten_glDeleteFramebuffers": _emscripten_glDeleteFramebuffers, "_emscripten_glUniform4fv": _emscripten_glUniform4fv, "_glfwSetKeyCallback": _glfwSetKeyCallback, "_emscripten_glVertexAttrib3f": _emscripten_glVertexAttrib3f, "_emscripten_glBufferData": _emscripten_glBufferData, "_emscripten_glCreateProgram": _emscripten_glCreateProgram, "_emscripten_glCopyTexSubImage2D": _emscripten_glCopyTexSubImage2D, "_emscripten_glGetInfoLogARB": _emscripten_glGetInfoLogARB, "_emscripten_longjmp": _emscripten_longjmp, "_emscripten_glGetShaderSource": _emscripten_glGetShaderSource, "_emscripten_glBindBuffer": _emscripten_glBindBuffer, "_emscripten_glGetFloatv": _emscripten_glGetFloatv, "_emscripten_glDetachShader": _emscripten_glDetachShader, "_glfwSetWindowTitle": _glfwSetWindowTitle, "_emscripten_glEnableClientState": _emscripten_glEnableClientState, "_emscripten_glGetVertexAttribfv": _emscripten_glGetVertexAttribfv, "_emscripten_glCopyTexImage2D": _emscripten_glCopyTexImage2D, "_emscripten_glTexImage2D": _emscripten_glTexImage2D, "STACKTOP": STACKTOP, "STACK_MAX": STACK_MAX, "tempDoublePtr": tempDoublePtr, "ABORT": ABORT, "cttz_i8": cttz_i8 };
// EMSCRIPTEN_START_ASM
var asm = (function(global, env, buffer) {
  'almost asm';
  
  
  var HEAP8 = new global.Int8Array(buffer);
  var HEAP16 = new global.Int16Array(buffer);
  var HEAP32 = new global.Int32Array(buffer);
  var HEAPU8 = new global.Uint8Array(buffer);
  var HEAPU16 = new global.Uint16Array(buffer);
  var HEAPU32 = new global.Uint32Array(buffer);
  var HEAPF32 = new global.Float32Array(buffer);
  var HEAPF64 = new global.Float64Array(buffer);


  var STACKTOP=env.STACKTOP|0;
  var STACK_MAX=env.STACK_MAX|0;
  var tempDoublePtr=env.tempDoublePtr|0;
  var ABORT=env.ABORT|0;
  var cttz_i8=env.cttz_i8|0;

  var __THREW__ = 0;
  var threwValue = 0;
  var setjmpId = 0;
  var undef = 0;
  var nan = global.NaN, inf = global.Infinity;
  var tempInt = 0, tempBigInt = 0, tempBigIntP = 0, tempBigIntS = 0, tempBigIntR = 0.0, tempBigIntI = 0, tempBigIntD = 0, tempValue = 0, tempDouble = 0.0;

  var tempRet0 = 0;
  var tempRet1 = 0;
  var tempRet2 = 0;
  var tempRet3 = 0;
  var tempRet4 = 0;
  var tempRet5 = 0;
  var tempRet6 = 0;
  var tempRet7 = 0;
  var tempRet8 = 0;
  var tempRet9 = 0;
  var Math_floor=global.Math.floor;
  var Math_abs=global.Math.abs;
  var Math_sqrt=global.Math.sqrt;
  var Math_pow=global.Math.pow;
  var Math_cos=global.Math.cos;
  var Math_sin=global.Math.sin;
  var Math_tan=global.Math.tan;
  var Math_acos=global.Math.acos;
  var Math_asin=global.Math.asin;
  var Math_atan=global.Math.atan;
  var Math_atan2=global.Math.atan2;
  var Math_exp=global.Math.exp;
  var Math_log=global.Math.log;
  var Math_ceil=global.Math.ceil;
  var Math_imul=global.Math.imul;
  var Math_min=global.Math.min;
  var Math_clz32=global.Math.clz32;
  var abort=env.abort;
  var assert=env.assert;
  var nullFunc_viiiii=env.nullFunc_viiiii;
  var nullFunc_vd=env.nullFunc_vd;
  var nullFunc_vid=env.nullFunc_vid;
  var nullFunc_vi=env.nullFunc_vi;
  var nullFunc_vii=env.nullFunc_vii;
  var nullFunc_ii=env.nullFunc_ii;
  var nullFunc_viddd=env.nullFunc_viddd;
  var nullFunc_vidd=env.nullFunc_vidd;
  var nullFunc_iiii=env.nullFunc_iiii;
  var nullFunc_viiiiiiii=env.nullFunc_viiiiiiii;
  var nullFunc_viiiiii=env.nullFunc_viiiiii;
  var nullFunc_viii=env.nullFunc_viii;
  var nullFunc_vidddd=env.nullFunc_vidddd;
  var nullFunc_vdi=env.nullFunc_vdi;
  var nullFunc_viiiiiii=env.nullFunc_viiiiiii;
  var nullFunc_viiiiiiiii=env.nullFunc_viiiiiiiii;
  var nullFunc_iii=env.nullFunc_iii;
  var nullFunc_i=env.nullFunc_i;
  var nullFunc_iiiii=env.nullFunc_iiiii;
  var nullFunc_vdddddd=env.nullFunc_vdddddd;
  var nullFunc_vdddd=env.nullFunc_vdddd;
  var nullFunc_vdd=env.nullFunc_vdd;
  var nullFunc_v=env.nullFunc_v;
  var nullFunc_viid=env.nullFunc_viid;
  var nullFunc_viiii=env.nullFunc_viiii;
  var invoke_viiiii=env.invoke_viiiii;
  var invoke_vd=env.invoke_vd;
  var invoke_vid=env.invoke_vid;
  var invoke_vi=env.invoke_vi;
  var invoke_vii=env.invoke_vii;
  var invoke_ii=env.invoke_ii;
  var invoke_viddd=env.invoke_viddd;
  var invoke_vidd=env.invoke_vidd;
  var invoke_iiii=env.invoke_iiii;
  var invoke_viiiiiiii=env.invoke_viiiiiiii;
  var invoke_viiiiii=env.invoke_viiiiii;
  var invoke_viii=env.invoke_viii;
  var invoke_vidddd=env.invoke_vidddd;
  var invoke_vdi=env.invoke_vdi;
  var invoke_viiiiiii=env.invoke_viiiiiii;
  var invoke_viiiiiiiii=env.invoke_viiiiiiiii;
  var invoke_iii=env.invoke_iii;
  var invoke_i=env.invoke_i;
  var invoke_iiiii=env.invoke_iiiii;
  var invoke_vdddddd=env.invoke_vdddddd;
  var invoke_vdddd=env.invoke_vdddd;
  var invoke_vdd=env.invoke_vdd;
  var invoke_v=env.invoke_v;
  var invoke_viid=env.invoke_viid;
  var invoke_viiii=env.invoke_viiii;
  var _glUseProgram=env._glUseProgram;
  var _emscripten_glGetTexParameterfv=env._emscripten_glGetTexParameterfv;
  var _glfwSleep=env._glfwSleep;
  var _exp=env._exp;
  var _emscripten_glReleaseShaderCompiler=env._emscripten_glReleaseShaderCompiler;
  var _emscripten_glBlendFuncSeparate=env._emscripten_glBlendFuncSeparate;
  var _emscripten_glVertexAttribPointer=env._emscripten_glVertexAttribPointer;
  var ___syscall63=env.___syscall63;
  var _emscripten_glGetIntegerv=env._emscripten_glGetIntegerv;
  var _glRotatef=env._glRotatef;
  var _emscripten_glCullFace=env._emscripten_glCullFace;
  var _glfwGetMouseWheel=env._glfwGetMouseWheel;
  var _emscripten_glStencilMaskSeparate=env._emscripten_glStencilMaskSeparate;
  var _gluLookAt=env._gluLookAt;
  var _emscripten_glFrontFace=env._emscripten_glFrontFace;
  var ___assert_fail=env.___assert_fail;
  var _glDeleteProgram=env._glDeleteProgram;
  var _emscripten_glUniform3fv=env._emscripten_glUniform3fv;
  var _emscripten_glPolygonOffset=env._emscripten_glPolygonOffset;
  var _glfwEnable=env._glfwEnable;
  var _emscripten_glUseProgram=env._emscripten_glUseProgram;
  var _emscripten_glBlendColor=env._emscripten_glBlendColor;
  var _glBindBuffer=env._glBindBuffer;
  var _emscripten_glDepthFunc=env._emscripten_glDepthFunc;
  var __addDays=env.__addDays;
  var _emscripten_glCompressedTexImage2D=env._emscripten_glCompressedTexImage2D;
  var _emscripten_set_main_loop_timing=env._emscripten_set_main_loop_timing;
  var _glTranslatef=env._glTranslatef;
  var _sbrk=env._sbrk;
  var _emscripten_glDisableVertexAttribArray=env._emscripten_glDisableVertexAttribArray;
  var _emscripten_glUniform3iv=env._emscripten_glUniform3iv;
  var _glDisableVertexAttribArray=env._glDisableVertexAttribArray;
  var _glCreateShader=env._glCreateShader;
  var _glCompileShader=env._glCompileShader;
  var _sysconf=env._sysconf;
  var _emscripten_glSampleCoverage=env._emscripten_glSampleCoverage;
  var _emscripten_glVertexPointer=env._emscripten_glVertexPointer;
  var _clock=env._clock;
  var emscriptenWebGLComputeImageSize=env.emscriptenWebGLComputeImageSize;
  var _emscripten_glGetBooleanv=env._emscripten_glGetBooleanv;
  var _emulGlBindVertexArray=env._emulGlBindVertexArray;
  var _fabs=env._fabs;
  var _cos=env._cos;
  var _glfwTerminate=env._glfwTerminate;
  var _emscripten_glUniform1i=env._emscripten_glUniform1i;
  var _emscripten_glGenBuffers=env._emscripten_glGenBuffers;
  var _glLoadIdentity=env._glLoadIdentity;
  var _glfwGetProcAddress=env._glfwGetProcAddress;
  var _glfwSetWindowSizeCallback=env._glfwSetWindowSizeCallback;
  var _emscripten_glGetShaderPrecisionFormat=env._emscripten_glGetShaderPrecisionFormat;
  var _glfwInit=env._glfwInit;
  var _glfwGetGLVersion=env._glfwGetGLVersion;
  var __isLeapYear=env.__isLeapYear;
  var _gluPerspective=env._gluPerspective;
  var _emscripten_glBlendEquationSeparate=env._emscripten_glBlendEquationSeparate;
  var _glShaderSource=env._glShaderSource;
  var _emscripten_glGetPointerv=env._emscripten_glGetPointerv;
  var _emscripten_glGetString=env._emscripten_glGetString;
  var _emscripten_glIsFramebuffer=env._emscripten_glIsFramebuffer;
  var _gmtime_r=env._gmtime_r;
  var _emscripten_glIsEnabled=env._emscripten_glIsEnabled;
  var _emscripten_glScissor=env._emscripten_glScissor;
  var _emscripten_glTexParameteriv=env._emscripten_glTexParameteriv;
  var _pthread_cleanup_push=env._pthread_cleanup_push;
  var _emscripten_glBindProgramARB=env._emscripten_glBindProgramARB;
  var _glGetBooleanv=env._glGetBooleanv;
  var _emulGlDeleteVertexArrays=env._emulGlDeleteVertexArrays;
  var ___syscall140=env.___syscall140;
  var ___syscall145=env.___syscall145;
  var ___syscall146=env.___syscall146;
  var _pthread_cleanup_pop=env._pthread_cleanup_pop;
  var _emscripten_glAttachShader=env._emscripten_glAttachShader;
  var _emscripten_glDrawRangeElements=env._emscripten_glDrawRangeElements;
  var _glVertexAttribPointer=env._glVertexAttribPointer;
  var _glHint=env._glHint;
  var _emscripten_glUniform2i=env._emscripten_glUniform2i;
  var _emscripten_glUniform2f=env._emscripten_glUniform2f;
  var _emscripten_glTexParameterfv=env._emscripten_glTexParameterfv;
  var _emscripten_glUniformMatrix2fv=env._emscripten_glUniformMatrix2fv;
  var _glBegin=env._glBegin;
  var _atan2=env._atan2;
  var _glIsEnabled=env._glIsEnabled;
  var _emscripten_glTexParameterf=env._emscripten_glTexParameterf;
  var _emscripten_glGetAttachedShaders=env._emscripten_glGetAttachedShaders;
  var _emscripten_glGenTextures=env._emscripten_glGenTextures;
  var _emscripten_glTexParameteri=env._emscripten_glTexParameteri;
  var _glfwOpenWindow=env._glfwOpenWindow;
  var _emscripten_glColor4f=env._emscripten_glColor4f;
  var _strftime=env._strftime;
  var _emscripten_glClear=env._emscripten_glClear;
  var _emscripten_glHint=env._emscripten_glHint;
  var _emscripten_glGenVertexArrays=env._emscripten_glGenVertexArrays;
  var _emscripten_glVertexAttrib2fv=env._emscripten_glVertexAttrib2fv;
  var _glViewport=env._glViewport;
  var _emscripten_glUniform4iv=env._emscripten_glUniform4iv;
  var _emscripten_glGetTexParameteriv=env._emscripten_glGetTexParameteriv;
  var ___setErrNo=env.___setErrNo;
  var _emscripten_glDrawArrays=env._emscripten_glDrawArrays;
  var _emscripten_glBindAttribLocation=env._emscripten_glBindAttribLocation;
  var ___syscall330=env.___syscall330;
  var _emscripten_glClientActiveTexture=env._emscripten_glClientActiveTexture;
  var _emscripten_glVertexAttrib2f=env._emscripten_glVertexAttrib2f;
  var _emscripten_glFlush=env._emscripten_glFlush;
  var _emscripten_glBlendFunc=env._emscripten_glBlendFunc;
  var _emscripten_glUniform4i=env._emscripten_glUniform4i;
  var _emscripten_glCheckFramebufferStatus=env._emscripten_glCheckFramebufferStatus;
  var _mktime=env._mktime;
  var _emscripten_glGetError=env._emscripten_glGetError;
  var _emscripten_glClearDepthf=env._emscripten_glClearDepthf;
  var _nanosleep=env._nanosleep;
  var _emscripten_glBindFramebuffer=env._emscripten_glBindFramebuffer;
  var _emscripten_glUniform3f=env._emscripten_glUniform3f;
  var _emscripten_glUniform3i=env._emscripten_glUniform3i;
  var _glFrustum=env._glFrustum;
  var _emscripten_glValidateProgram=env._emscripten_glValidateProgram;
  var _emscripten_glDeleteShader=env._emscripten_glDeleteShader;
  var _glEnable=env._glEnable;
  var _emscripten_glReadPixels=env._emscripten_glReadPixels;
  var _emscripten_glMatrixMode=env._emscripten_glMatrixMode;
  var _glGetIntegerv=env._glGetIntegerv;
  var _glGetString=env._glGetString;
  var _emscripten_glClearStencil=env._emscripten_glClearStencil;
  var _sqrt=env._sqrt;
  var _emscripten_glIsProgram=env._emscripten_glIsProgram;
  var emscriptenWebGLGet=env.emscriptenWebGLGet;
  var _emscripten_glEnableVertexAttribArray=env._emscripten_glEnableVertexAttribArray;
  var _emscripten_glGetAttribLocation=env._emscripten_glGetAttribLocation;
  var _emscripten_get_now=env._emscripten_get_now;
  var ___syscall10=env.___syscall10;
  var _emscripten_glNormalPointer=env._emscripten_glNormalPointer;
  var _emscripten_glBindVertexArray=env._emscripten_glBindVertexArray;
  var _emscripten_glTexCoordPointer=env._emscripten_glTexCoordPointer;
  var _emscripten_glEnable=env._emscripten_glEnable;
  var _emscripten_glShaderSource=env._emscripten_glShaderSource;
  var _emscripten_glClearDepth=env._emscripten_glClearDepth;
  var _glDisable=env._glDisable;
  var ___lock=env.___lock;
  var emscriptenWebGLGetTexPixelData=env.emscriptenWebGLGetTexPixelData;
  var ___syscall6=env.___syscall6;
  var ___syscall5=env.___syscall5;
  var _emscripten_glIsBuffer=env._emscripten_glIsBuffer;
  var _emscripten_glBindRenderbuffer=env._emscripten_glBindRenderbuffer;
  var _time=env._time;
  var _glColor3f=env._glColor3f;
  var _glDetachShader=env._glDetachShader;
  var _emscripten_glVertexAttrib1f=env._emscripten_glVertexAttrib1f;
  var _glfwSetMouseButtonCallback=env._glfwSetMouseButtonCallback;
  var _exit=env._exit;
  var _emscripten_asm_const_2=env._emscripten_asm_const_2;
  var _emscripten_glStencilOpSeparate=env._emscripten_glStencilOpSeparate;
  var _emscripten_glGetActiveAttrib=env._emscripten_glGetActiveAttrib;
  var _emscripten_glDeleteBuffers=env._emscripten_glDeleteBuffers;
  var _llvm_pow_f64=env._llvm_pow_f64;
  var ___syscall265=env.___syscall265;
  var _localtime_r=env._localtime_r;
  var ___syscall54=env.___syscall54;
  var _emscripten_glUniform4f=env._emscripten_glUniform4f;
  var _emscripten_glUniform2fv=env._emscripten_glUniform2fv;
  var _emscripten_glGetUniformLocation=env._emscripten_glGetUniformLocation;
  var _emscripten_glLoadMatrixf=env._emscripten_glLoadMatrixf;
  var _emscripten_glFinish=env._emscripten_glFinish;
  var _glEnd=env._glEnd;
  var _emscripten_glShaderBinary=env._emscripten_glShaderBinary;
  var _emscripten_glDrawElements=env._emscripten_glDrawElements;
  var _asin=env._asin;
  var _emscripten_glGetShaderInfoLog=env._emscripten_glGetShaderInfoLog;
  var ___syscall221=env.___syscall221;
  var _emscripten_glStencilMask=env._emscripten_glStencilMask;
  var _glfwSetMousePosCallback=env._glfwSetMousePosCallback;
  var _emscripten_glGetVertexAttribPointerv=env._emscripten_glGetVertexAttribPointerv;
  var _emscripten_glCompressedTexSubImage2D=env._emscripten_glCompressedTexSubImage2D;
  var emscriptenWebGLGetUniform=env.emscriptenWebGLGetUniform;
  var _tzset=env._tzset;
  var _emscripten_glDeleteVertexArrays=env._emscripten_glDeleteVertexArrays;
  var _glClearColor=env._glClearColor;
  var _glfwGetNumberOfProcessors=env._glfwGetNumberOfProcessors;
  var _emscripten_glGetActiveUniform=env._emscripten_glGetActiveUniform;
  var emscriptenWebGLGetVertexAttrib=env.emscriptenWebGLGetVertexAttrib;
  var _emscripten_glUniform2iv=env._emscripten_glUniform2iv;
  var _emscripten_glDisable=env._emscripten_glDisable;
  var _glfwSetCharCallback=env._glfwSetCharCallback;
  var _emscripten_glGetBufferParameteriv=env._emscripten_glGetBufferParameteriv;
  var _glGetFloatv=env._glGetFloatv;
  var _emscripten_glDeleteProgram=env._emscripten_glDeleteProgram;
  var _emscripten_glDeleteRenderbuffers=env._emscripten_glDeleteRenderbuffers;
  var _emscripten_memcpy_big=env._emscripten_memcpy_big;
  var _emscripten_glDrawElementsInstanced=env._emscripten_glDrawElementsInstanced;
  var _emscripten_glVertexAttrib4f=env._emscripten_glVertexAttrib4f;
  var _emscripten_glGetVertexAttribiv=env._emscripten_glGetVertexAttribiv;
  var _emscripten_glTexSubImage2D=env._emscripten_glTexSubImage2D;
  var _emscripten_glGetProgramiv=env._emscripten_glGetProgramiv;
  var _emscripten_glPixelStorei=env._emscripten_glPixelStorei;
  var _glAttachShader=env._glAttachShader;
  var _emulGlGenVertexArrays=env._emulGlGenVertexArrays;
  var _glfwGetMouseButton=env._glfwGetMouseButton;
  var _emscripten_glColorPointer=env._emscripten_glColorPointer;
  var _getenv=env._getenv;
  var _glfwGetWindowSize=env._glfwGetWindowSize;
  var ___syscall33=env.___syscall33;
  var _log=env._log;
  var _glActiveTexture=env._glActiveTexture;
  var _glfwSwapBuffers=env._glfwSwapBuffers;
  var ___syscall38=env.___syscall38;
  var _emscripten_glDepthMask=env._emscripten_glDepthMask;
  var _emscripten_glDrawBuffers=env._emscripten_glDrawBuffers;
  var _emscripten_glLineWidth=env._emscripten_glLineWidth;
  var _tan=env._tan;
  var _emscripten_glUniform1iv=env._emscripten_glUniform1iv;
  var _emscripten_glGetObjectParameterivARB=env._emscripten_glGetObjectParameterivARB;
  var _emscripten_glFramebufferTexture2D=env._emscripten_glFramebufferTexture2D;
  var _glfwSwapInterval=env._glfwSwapInterval;
  var _emscripten_glVertexAttrib4fv=env._emscripten_glVertexAttrib4fv;
  var _glEnableVertexAttribArray=env._glEnableVertexAttribArray;
  var _emscripten_glStencilFunc=env._emscripten_glStencilFunc;
  var _abort=env._abort;
  var _emscripten_glGetUniformiv=env._emscripten_glGetUniformiv;
  var _glfwGetWindowParam=env._glfwGetWindowParam;
  var _ceil=env._ceil;
  var _emscripten_glRotatef=env._emscripten_glRotatef;
  var _emscripten_glGetShaderiv=env._emscripten_glGetShaderiv;
  var _localtime=env._localtime;
  var _emscripten_glGenFramebuffers=env._emscripten_glGenFramebuffers;
  var _floor=env._floor;
  var _emscripten_glUniformMatrix4fv=env._emscripten_glUniformMatrix4fv;
  var _emscripten_glLoadIdentity=env._emscripten_glLoadIdentity;
  var _sin=env._sin;
  var _glVertex3f=env._glVertex3f;
  var _glEnableClientState=env._glEnableClientState;
  var _emscripten_glUniform1f=env._emscripten_glUniform1f;
  var _acos=env._acos;
  var _emscripten_glUniform1fv=env._emscripten_glUniform1fv;
  var _emscripten_glIsRenderbuffer=env._emscripten_glIsRenderbuffer;
  var ___buildEnvironment=env.___buildEnvironment;
  var _glfwGetTime=env._glfwGetTime;
  var _emscripten_glRenderbufferStorage=env._emscripten_glRenderbufferStorage;
  var ___syscall40=env.___syscall40;
  var _emscripten_glFramebufferRenderbuffer=env._emscripten_glFramebufferRenderbuffer;
  var __arraySum=env.__arraySum;
  var _emscripten_glDrawArraysInstanced=env._emscripten_glDrawArraysInstanced;
  var _difftime=env._difftime;
  var _emscripten_glCreateShader=env._emscripten_glCreateShader;
  var _emscripten_glStencilFuncSeparate=env._emscripten_glStencilFuncSeparate;
  var _usleep=env._usleep;
  var _emscripten_glDeleteTextures=env._emscripten_glDeleteTextures;
  var _glfwGetKey=env._glfwGetKey;
  var _system=env._system;
  var _glLinkProgram=env._glLinkProgram;
  var _emscripten_glVertexAttribDivisor=env._emscripten_glVertexAttribDivisor;
  var _glfwSetWindowRefreshCallback=env._glfwSetWindowRefreshCallback;
  var _emscripten_glGetUniformfv=env._emscripten_glGetUniformfv;
  var _glfwSetMouseWheelCallback=env._glfwSetMouseWheelCallback;
  var _glfwOpenWindowHint=env._glfwOpenWindowHint;
  var _emscripten_glViewport=env._emscripten_glViewport;
  var _emscripten_glGetRenderbufferParameteriv=env._emscripten_glGetRenderbufferParameteriv;
  var _emscripten_glVertexAttrib3fv=env._emscripten_glVertexAttrib3fv;
  var _glfwGetMousePos=env._glfwGetMousePos;
  var _glfwGetVersion=env._glfwGetVersion;
  var _longjmp=env._longjmp;
  var _emscripten_glCompileShader=env._emscripten_glCompileShader;
  var _glClear=env._glClear;
  var _emscripten_glFrustum=env._emscripten_glFrustum;
  var _glMatrixMode=env._glMatrixMode;
  var _emscripten_glDepthRangef=env._emscripten_glDepthRangef;
  var _emscripten_glClearColor=env._emscripten_glClearColor;
  var __exit=env.__exit;
  var _glfwSetWindowCloseCallback=env._glfwSetWindowCloseCallback;
  var _gmtime=env._gmtime;
  var _emscripten_glStencilOp=env._emscripten_glStencilOp;
  var _glBindAttribLocation=env._glBindAttribLocation;
  var _emscripten_glGenerateMipmap=env._emscripten_glGenerateMipmap;
  var _emscripten_glColorMask=env._emscripten_glColorMask;
  var _emscripten_glLinkProgram=env._emscripten_glLinkProgram;
  var _emscripten_glBlendEquation=env._emscripten_glBlendEquation;
  var _atan=env._atan;
  var _emscripten_glIsTexture=env._emscripten_glIsTexture;
  var _pthread_self=env._pthread_self;
  var _emscripten_glVertexAttrib1fv=env._emscripten_glVertexAttrib1fv;
  var _emscripten_glUniformMatrix3fv=env._emscripten_glUniformMatrix3fv;
  var _emscripten_glBindTexture=env._emscripten_glBindTexture;
  var _emscripten_glGetFramebufferAttachmentParameteriv=env._emscripten_glGetFramebufferAttachmentParameteriv;
  var _emscripten_glDeleteObjectARB=env._emscripten_glDeleteObjectARB;
  var _emscripten_glActiveTexture=env._emscripten_glActiveTexture;
  var _emscripten_glGenRenderbuffers=env._emscripten_glGenRenderbuffers;
  var _glfwExtensionSupported=env._glfwExtensionSupported;
  var ___unlock=env.___unlock;
  var _emscripten_glBufferSubData=env._emscripten_glBufferSubData;
  var _emscripten_glDepthRange=env._emscripten_glDepthRange;
  var _emscripten_set_main_loop=env._emscripten_set_main_loop;
  var _emscripten_glIsShader=env._emscripten_glIsShader;
  var _emscripten_glGetProgramInfoLog=env._emscripten_glGetProgramInfoLog;
  var _emscripten_glDeleteFramebuffers=env._emscripten_glDeleteFramebuffers;
  var _emscripten_glUniform4fv=env._emscripten_glUniform4fv;
  var _glfwSetKeyCallback=env._glfwSetKeyCallback;
  var _emscripten_glVertexAttrib3f=env._emscripten_glVertexAttrib3f;
  var _emscripten_glBufferData=env._emscripten_glBufferData;
  var _emscripten_glCreateProgram=env._emscripten_glCreateProgram;
  var _emscripten_glCopyTexSubImage2D=env._emscripten_glCopyTexSubImage2D;
  var _emscripten_glGetInfoLogARB=env._emscripten_glGetInfoLogARB;
  var _emscripten_longjmp=env._emscripten_longjmp;
  var _emscripten_glGetShaderSource=env._emscripten_glGetShaderSource;
  var _emscripten_glBindBuffer=env._emscripten_glBindBuffer;
  var _emscripten_glGetFloatv=env._emscripten_glGetFloatv;
  var _emscripten_glDetachShader=env._emscripten_glDetachShader;
  var _glfwSetWindowTitle=env._glfwSetWindowTitle;
  var _emscripten_glEnableClientState=env._emscripten_glEnableClientState;
  var _emscripten_glGetVertexAttribfv=env._emscripten_glGetVertexAttribfv;
  var _emscripten_glCopyTexImage2D=env._emscripten_glCopyTexImage2D;
  var _emscripten_glTexImage2D=env._emscripten_glTexImage2D;
  var tempFloat = 0.0;

// EMSCRIPTEN_START_FUNCS
function stackAlloc(size) {
  size = size|0;
  var ret = 0;
  ret = STACKTOP;
  STACKTOP = (STACKTOP + size)|0;
  STACKTOP = (STACKTOP + 15)&-16;
if ((STACKTOP|0) >= (STACK_MAX|0)) abort();

  return ret|0;
}
function stackSave() {
  return STACKTOP|0;
}
function stackRestore(top) {
  top = top|0;
  STACKTOP = top;
}
function establishStackSpace(stackBase, stackMax) {
  stackBase = stackBase|0;
  stackMax = stackMax|0;
  STACKTOP = stackBase;
  STACK_MAX = stackMax;
}

function setThrew(threw, value) {
  threw = threw|0;
  value = value|0;
  if ((__THREW__|0) == 0) {
    __THREW__ = threw;
    threwValue = value;
  }
}
function copyTempFloat(ptr) {
  ptr = ptr|0;
  HEAP8[tempDoublePtr>>0] = HEAP8[ptr>>0];
  HEAP8[tempDoublePtr+1>>0] = HEAP8[ptr+1>>0];
  HEAP8[tempDoublePtr+2>>0] = HEAP8[ptr+2>>0];
  HEAP8[tempDoublePtr+3>>0] = HEAP8[ptr+3>>0];
}
function copyTempDouble(ptr) {
  ptr = ptr|0;
  HEAP8[tempDoublePtr>>0] = HEAP8[ptr>>0];
  HEAP8[tempDoublePtr+1>>0] = HEAP8[ptr+1>>0];
  HEAP8[tempDoublePtr+2>>0] = HEAP8[ptr+2>>0];
  HEAP8[tempDoublePtr+3>>0] = HEAP8[ptr+3>>0];
  HEAP8[tempDoublePtr+4>>0] = HEAP8[ptr+4>>0];
  HEAP8[tempDoublePtr+5>>0] = HEAP8[ptr+5>>0];
  HEAP8[tempDoublePtr+6>>0] = HEAP8[ptr+6>>0];
  HEAP8[tempDoublePtr+7>>0] = HEAP8[ptr+7>>0];
}

function setTempRet0(value) {
  value = value|0;
  tempRet0 = value;
}
function getTempRet0() {
  return tempRet0|0;
}

function _main() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $L = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = 0;
 $1 = (_luaL_newstate()|0);
 $L = $1;
 $2 = $L;
 _luaL_openlibs($2);
 $3 = $L;
 $4 = (_luaL_loadfilex($3,3200,0)|0);
 $5 = ($4|0)!=(0);
 if (!($5)) {
  $6 = $L;
  $7 = (_lua_pcallk($6,0,-1,0,0,0)|0);
  $8 = ($7|0)!=(0);
  if (!($8)) {
   $12 = $L;
   _lua_close($12);
   _Init();
   $13 = (+_glfwGetTime());
   HEAPF64[8>>3] = $13;
   _emscripten_set_main_loop((147|0),0,1);
   _Shut_Down(0);
   $14 = $0;
   STACKTOP = sp;return ($14|0);
  }
 }
 $9 = $L;
 $10 = (_lua_tolstring($9,-1,0)|0);
 HEAP32[$vararg_buffer>>2] = $10;
 (_printf(3209,$vararg_buffer)|0);
 $11 = $L;
 _lua_close($11);
 $0 = 0;
 $14 = $0;
 STACKTOP = sp;return ($14|0);
}
function _Init() {
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0.0, $aspect_ratio = 0.0, $red_bits = 0, $window_height = 0, $window_width = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $window_width = 800;
 $window_height = 600;
 $0 = (_glfwInit()|0);
 $1 = ($0|0)!=(1);
 if ($1) {
  _Shut_Down(1);
 }
 _glfwEnable(196613);
 $2 = (_glfwGetWindowParam(131077)|0);
 $red_bits = $2;
 _glfwOpenWindowHint(131077,8);
 $3 = (_glfwGetWindowParam(131077)|0);
 $4 = ($3|0)==(8);
 if (!($4)) {
  ___assert_fail((3234|0),(3273|0),70,(3309|0));
  // unreachable;
 }
 $5 = $red_bits;
 _glfwOpenWindowHint(131077,($5|0));
 $6 = (_glfwOpenWindow(800,600,5,6,5,0,0,0,65537)|0);
 $7 = ($6|0)!=(1);
 if ($7) {
  _Shut_Down(1);
 }
 _glfwSetWindowTitle((3314|0));
 _glfwSetKeyCallback((148|0));
 _glfwSetCharCallback((149|0));
 _glfwSetWindowCloseCallback((150|0));
 _glfwSetWindowSizeCallback((151|0));
 _glfwSetWindowRefreshCallback((152|0));
 _glfwSetMouseWheelCallback((153|0));
 _glfwSetMousePosCallback((154|0));
 _glfwSetMouseButtonCallback((155|0));
 _glMatrixMode(5889);
 _glLoadIdentity();
 $aspect_ratio = 0.75;
 $8 = $aspect_ratio;
 $9 = $8;
 $10 = -0.5 * $9;
 $11 = $aspect_ratio;
 $12 = $11;
 $13 = 0.5 * $12;
 _glFrustum(0.5,-0.5,(+$10),(+$13),1.0,50.0);
 _glMatrixMode(5888);
 _PullInfo();
 STACKTOP = sp;return;
}
function _Iteration() {
 var $0 = 0.0, $1 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0.0, $30 = 0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0, $8 = 0, $9 = 0.0, $current_time = 0.0, $delta_rotate = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = (+_glfwGetTime());
 $current_time = $0;
 $1 = $current_time;
 $2 = +HEAPF64[8>>3];
 $3 = $1 - $2;
 $4 = $3 * 0.20000000298023224;
 $5 = $4 * 360.0;
 $delta_rotate = $5;
 $6 = $current_time;
 HEAPF64[8>>3] = $6;
 $7 = (_glfwGetKey(285)|0);
 $8 = ($7|0)==(1);
 if ($8) {
  $9 = $delta_rotate;
  $10 = +HEAPF32[180>>2];
  $11 = $10;
  $12 = $11 + $9;
  $13 = $12;
  HEAPF32[180>>2] = $13;
 }
 $14 = (_glfwGetKey(286)|0);
 $15 = ($14|0)==(1);
 if ($15) {
  $16 = $delta_rotate;
  $17 = +HEAPF32[180>>2];
  $18 = $17;
  $19 = $18 - $16;
  $20 = $19;
  HEAPF32[180>>2] = $20;
 }
 $21 = $delta_rotate;
 $22 = +HEAPF32[184>>2];
 $23 = $22;
 $24 = $23 + $21;
 $25 = $24;
 HEAPF32[184>>2] = $25;
 _glClear(16640);
 _Draw();
 $26 = HEAP32[188>>2]|0;
 _glfwSwapInterval(($26|0));
 $27 = HEAP32[188>>2]|0;
 $28 = ($27|0)<(2);
 if (!($28)) {
  _glfwSwapBuffers();
  STACKTOP = sp;return;
 }
 $29 = HEAP32[188>>2]|0;
 $30 = (($29) + 1)|0;
 HEAP32[188>>2] = $30;
 _glfwSwapBuffers();
 STACKTOP = sp;return;
}
function _Shut_Down($return_code) {
 $return_code = $return_code|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $return_code;
 _glfwTerminate();
 $1 = $0;
 _exit(($1|0));
 // unreachable;
}
function _OnKeyPressed($key,$action) {
 $key = $key|0;
 $action = $action|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $key_name = 0, $or$cond = 0;
 var $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer3 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = $key;
 $1 = $action;
 $2 = $0;
 $3 = (_GetKeyName($2)|0);
 $key_name = $3;
 $4 = $key_name;
 $5 = ($4|0)==(0|0);
 if ($5) {
  STACKTOP = sp;return;
 }
 $6 = $1;
 $7 = ($6|0)==(1);
 if ($7) {
  $8 = $key_name;
  $9 = $0;
  HEAP32[$vararg_buffer>>2] = $8;
  $vararg_ptr2 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr2>>2] = $9;
  (_printf(4493,$vararg_buffer)|0);
 }
 $10 = $1;
 $11 = ($10|0)==(0);
 if ($11) {
  $12 = $key_name;
  $13 = $0;
  HEAP32[$vararg_buffer3>>2] = $12;
  $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
  HEAP32[$vararg_ptr6>>2] = $13;
  (_printf(4519,$vararg_buffer3)|0);
 }
 $14 = $1;
 $15 = ($14|0)==(0);
 $16 = $0;
 $17 = ($16|0)==(294);
 $or$cond = $15 & $17;
 if (!($or$cond)) {
  STACKTOP = sp;return;
 }
 _PullInfo();
 STACKTOP = sp;return;
}
function _OnCharPressed($character,$action) {
 $character = $character|0;
 $action = $action|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_ptr1 = 0, $vararg_ptr5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = $character;
 $1 = $action;
 $2 = $1;
 $3 = ($2|0)==(1);
 if ($3) {
  $4 = $0;
  $5 = $0;
  HEAP32[$vararg_buffer>>2] = $4;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $5;
  (_printf(3330,$vararg_buffer)|0);
 }
 $6 = $1;
 $7 = ($6|0)==(0);
 if (!($7)) {
  STACKTOP = sp;return;
 }
 $8 = $0;
 $9 = $0;
 HEAP32[$vararg_buffer2>>2] = $8;
 $vararg_ptr5 = ((($vararg_buffer2)) + 4|0);
 HEAP32[$vararg_ptr5>>2] = $9;
 (_printf(3357,$vararg_buffer2)|0);
 STACKTOP = sp;return;
}
function _OnResize($width,$height) {
 $width = $width|0;
 $height = $height|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $width;
 $1 = $height;
 $2 = $0;
 $3 = $1;
 HEAP32[$vararg_buffer>>2] = $2;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $3;
 (_printf(4563,$vararg_buffer)|0);
 STACKTOP = sp;return;
}
function _OnMouseWheel($pos) {
 $pos = $pos|0;
 var $0 = 0, $1 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $pos;
 $1 = $0;
 HEAP32[$vararg_buffer>>2] = $1;
 (_printf(4691,$vararg_buffer)|0);
 STACKTOP = sp;return;
}
function _OnMouseMove($x,$y) {
 $x = $x|0;
 $y = $y|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $lState = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $0 = $x;
 $1 = $y;
 $2 = (_glfwGetMouseButton(0)|0);
 $lState = $2;
 $3 = $lState;
 $4 = ($3|0)==(1);
 if ($4) {
  $5 = $0;
  $6 = $1;
  HEAP32[$vararg_buffer>>2] = 0;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $5;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = $6;
  (_printf(4651,$vararg_buffer)|0);
 }
 $7 = $lState;
 $8 = ($7|0)==(0);
 if (!($8)) {
  STACKTOP = sp;return;
 }
 $9 = $0;
 $10 = $1;
 HEAP32[$vararg_buffer3>>2] = 0;
 $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
 HEAP32[$vararg_ptr6>>2] = $9;
 $vararg_ptr7 = ((($vararg_buffer3)) + 8|0);
 HEAP32[$vararg_ptr7>>2] = $10;
 (_printf(4672,$vararg_buffer3)|0);
 STACKTOP = sp;return;
}
function _OnMouseClick($button,$action) {
 $button = $button|0;
 $action = $action|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = $button;
 $1 = $action;
 $2 = $1;
 $3 = ($2|0)==(1);
 if ($3) {
  $4 = $0;
  HEAP32[$vararg_buffer>>2] = $4;
  (_printf(4582,$vararg_buffer)|0);
 }
 $5 = $1;
 $6 = ($5|0)==(0);
 if (!($6)) {
  STACKTOP = sp;return;
 }
 $7 = $0;
 HEAP32[$vararg_buffer1>>2] = $7;
 (_printf(4616,$vararg_buffer1)|0);
 STACKTOP = sp;return;
}
function _Draw() {
 var $0 = 0.0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0;
 var $height = 0, $t = 0.0, $width = 0, $x = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $width = sp + 16|0;
 $height = sp + 12|0;
 $x = sp + 8|0;
 $0 = (+_glfwGetTime());
 $t = $0;
 _glfwGetMousePos(($x|0),(0|0));
 _glfwGetWindowSize(($width|0),($height|0));
 $1 = HEAP32[$height>>2]|0;
 $2 = ($1|0)>(0);
 $3 = HEAP32[$height>>2]|0;
 $4 = $2 ? $3 : 1;
 HEAP32[$height>>2] = $4;
 $5 = HEAP32[$width>>2]|0;
 $6 = HEAP32[$height>>2]|0;
 _glViewport(0,0,($5|0),($6|0));
 _glClearColor(0.10000000149011612,0.20000000298023224,0.30000001192092896,0.0);
 _glClear(16384);
 _glMatrixMode(5889);
 _glLoadIdentity();
 $7 = HEAP32[$width>>2]|0;
 $8 = (+($7|0));
 $9 = HEAP32[$height>>2]|0;
 $10 = (+($9|0));
 $11 = $8 / $10;
 $12 = $11;
 _gluPerspective(65.0,(+$12),1.0,100.0);
 _glMatrixMode(5888);
 _glLoadIdentity();
 _gluLookAt(0.0,1.0,0.0,0.0,20.0,0.0,0.0,0.0,1.0);
 _glTranslatef(0.0,1.0,0.0);
 $13 = HEAP32[$x>>2]|0;
 $14 = (+($13|0));
 $15 = 0.30000001192092896 * $14;
 $16 = $t;
 $17 = $16;
 $18 = $17 * 100.0;
 $19 = $15 + $18;
 _glRotatef((+$19),0.0,0.0,1.0);
 _glBegin(4);
 _glColor3f(1.0,0.0,0.0);
 _glVertex3f(-5.0,0.0,-4.0);
 _glColor3f(0.0,1.0,0.0);
 _glVertex3f(5.0,0.0,-4.0);
 _glColor3f(0.0,0.0,1.0);
 _glVertex3f(0.0,0.0,6.0);
 _glEnd();
 _glfwSwapBuffers();
 STACKTOP = sp;return;
}
function _GetKeyName($key) {
 $key = $key|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $chr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $key;
 $2 = $1;
 do {
  switch ($2|0) {
  case -1:  {
   $0 = 3385;
   break;
  }
  case 32:  {
   $0 = 3393;
   break;
  }
  case 256:  {
   $0 = 3399;
   break;
  }
  case 257:  {
   $0 = 3407;
   break;
  }
  case 258:  {
   $0 = 3414;
   break;
  }
  case 259:  {
   $0 = 3417;
   break;
  }
  case 260:  {
   $0 = 3420;
   break;
  }
  case 261:  {
   $0 = 3423;
   break;
  }
  case 262:  {
   $0 = 3426;
   break;
  }
  case 263:  {
   $0 = 3429;
   break;
  }
  case 264:  {
   $0 = 3432;
   break;
  }
  case 265:  {
   $0 = 3435;
   break;
  }
  case 266:  {
   $0 = 3438;
   break;
  }
  case 267:  {
   $0 = 3441;
   break;
  }
  case 268:  {
   $0 = 3445;
   break;
  }
  case 269:  {
   $0 = 3449;
   break;
  }
  case 270:  {
   $0 = 3453;
   break;
  }
  case 271:  {
   $0 = 3457;
   break;
  }
  case 272:  {
   $0 = 3461;
   break;
  }
  case 273:  {
   $0 = 3465;
   break;
  }
  case 274:  {
   $0 = 3469;
   break;
  }
  case 275:  {
   $0 = 3473;
   break;
  }
  case 276:  {
   $0 = 3477;
   break;
  }
  case 277:  {
   $0 = 3481;
   break;
  }
  case 278:  {
   $0 = 3485;
   break;
  }
  case 279:  {
   $0 = 3489;
   break;
  }
  case 280:  {
   $0 = 3493;
   break;
  }
  case 281:  {
   $0 = 3497;
   break;
  }
  case 282:  {
   $0 = 3501;
   break;
  }
  case 283:  {
   $0 = 3505;
   break;
  }
  case 284:  {
   $0 = 3508;
   break;
  }
  case 285:  {
   $0 = 3513;
   break;
  }
  case 286:  {
   $0 = 3518;
   break;
  }
  case 287:  {
   $0 = 3524;
   break;
  }
  case 288:  {
   $0 = 3535;
   break;
  }
  case 289:  {
   $0 = 3547;
   break;
  }
  case 290:  {
   $0 = 3557;
   break;
  }
  case 291:  {
   $0 = 3568;
   break;
  }
  case 292:  {
   $0 = 3577;
   break;
  }
  case 293:  {
   $0 = 3587;
   break;
  }
  case 294:  {
   $0 = 3591;
   break;
  }
  case 295:  {
   $0 = 3597;
   break;
  }
  case 296:  {
   $0 = 3607;
   break;
  }
  case 297:  {
   $0 = 3615;
   break;
  }
  case 298:  {
   $0 = 3619;
   break;
  }
  case 299:  {
   $0 = 3627;
   break;
  }
  case 300:  {
   $0 = 3637;
   break;
  }
  case 301:  {
   $0 = 10478;
   break;
  }
  case 302:  {
   $0 = 3642;
   break;
  }
  case 303:  {
   $0 = 3644;
   break;
  }
  case 304:  {
   $0 = 3646;
   break;
  }
  case 305:  {
   $0 = 3648;
   break;
  }
  case 306:  {
   $0 = 3650;
   break;
  }
  case 307:  {
   $0 = 3652;
   break;
  }
  case 308:  {
   $0 = 3654;
   break;
  }
  case 309:  {
   $0 = 3656;
   break;
  }
  case 310:  {
   $0 = 3658;
   break;
  }
  case 311:  {
   $0 = 3660;
   break;
  }
  case 312:  {
   $0 = 12725;
   break;
  }
  case 313:  {
   $0 = 3662;
   break;
  }
  case 314:  {
   $0 = 3664;
   break;
  }
  case 315:  {
   $0 = 3666;
   break;
  }
  case 316:  {
   $0 = 20752;
   break;
  }
  case 317:  {
   $0 = 3668;
   break;
  }
  case 318:  {
   $0 = 3591;
   break;
  }
  case 319:  {
   $0 = 3670;
   break;
  }
  case 320:  {
   $0 = 3679;
   break;
  }
  case 321:  {
   $0 = 3689;
   break;
  }
  case 322:  {
   $0 = 3701;
   break;
  }
  case 323:  {
   $0 = 3707;
   break;
  }
  case 324:  {
   $0 = 3718;
   break;
  }
  case 325:  {
   $0 = 3730;
   break;
  }
  default: {
   $3 = (_malloc(2)|0);
   $chr = $3;
   $4 = $1;
   $5 = $4&255;
   $6 = $chr;
   HEAP8[$6>>0] = $5;
   $7 = $chr;
   $8 = ((($7)) + 1|0);
   HEAP8[$8>>0] = 0;
   $9 = $chr;
   $0 = $9;
  }
  }
 } while(0);
 $10 = $0;
 STACKTOP = sp;return ($10|0);
}
function _GetParamName($param) {
 $param = $param|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $switch$split102D = 0, $switch$split12D = 0, $switch$split132D = 0, $switch$split162D = 0, $switch$split192D = 0, $switch$split222D = 0, $switch$split252D = 0, $switch$split282D = 0, $switch$split2D = 0, $switch$split312D = 0, $switch$split42D = 0, $switch$split72D = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $param;
 $2 = $1;
 $switch$split2D = ($2|0)<(131087);
 L1: do {
  if ($switch$split2D) {
   $switch$split12D = ($2|0)<(131077);
   if (!($switch$split12D)) {
    do {
     switch ($2|0) {
     case 131077:  {
      $0 = 3819;
      break L1;
      break;
     }
     case 131078:  {
      $0 = 3833;
      break L1;
      break;
     }
     case 131079:  {
      $0 = 3849;
      break L1;
      break;
     }
     case 131080:  {
      $0 = 3864;
      break L1;
      break;
     }
     case 131081:  {
      $0 = 3880;
      break L1;
      break;
     }
     case 131082:  {
      $0 = 3896;
      break L1;
      break;
     }
     case 131083:  {
      $0 = 3914;
      break L1;
      break;
     }
     case 131084:  {
      $0 = 3932;
      break L1;
      break;
     }
     case 131085:  {
      $0 = 3952;
      break L1;
      break;
     }
     case 131086:  {
      $0 = 3849;
      break L1;
      break;
     }
     default: {
      label = 43;
      break L1;
     }
     }
    } while(0);
   }
   $switch$split72D = ($2|0)<(65538);
   if (!($switch$split72D)) {
    $switch$split162D = ($2|0)<(131074);
    if (!($switch$split162D)) {
     switch ($2|0) {
     case 131074:  {
      $0 = 3775;
      break L1;
      break;
     }
     case 131075:  {
      $0 = 3787;
      break L1;
      break;
     }
     case 131076:  {
      $0 = 3802;
      break L1;
      break;
     }
     default: {
      label = 43;
      break L1;
     }
     }
    }
    $switch$split252D = ($2|0)<(131073);
    if ($switch$split252D) {
     switch ($2|0) {
     case 65538:  {
      break;
     }
     default: {
      label = 43;
      break L1;
     }
     }
     $0 = 3747;
     break;
    } else {
     switch ($2|0) {
     case 131073:  {
      break;
     }
     default: {
      label = 43;
      break L1;
     }
     }
     $0 = 3763;
     break;
    }
   }
   $switch$split132D = ($2|0)<(4);
   if ($switch$split132D) {
    switch ($2|0) {
    case 1:  {
     $0 = 4398;
     break L1;
     break;
    }
    case 2:  {
     $0 = 4418;
     break L1;
     break;
    }
    default: {
     label = 43;
     break L1;
    }
    }
   }
   $switch$split222D = ($2|0)<(8);
   if ($switch$split222D) {
    switch ($2|0) {
    case 4:  {
     break;
    }
    default: {
     label = 43;
     break L1;
    }
    }
    $0 = 4437;
    break;
   }
   $switch$split312D = ($2|0)<(65537);
   if ($switch$split312D) {
    switch ($2|0) {
    case 8:  {
     break;
    }
    default: {
     label = 43;
     break L1;
    }
    }
    $0 = 4460;
    break;
   } else {
    switch ($2|0) {
    case 65537:  {
     break;
    }
    default: {
     label = 43;
     break L1;
    }
    }
    $0 = 3735;
    break;
   }
  } else {
   $switch$split42D = ($2|0)<(196609);
   if ($switch$split42D) {
    do {
     switch ($2|0) {
     case 131087:  {
      $0 = 3864;
      break L1;
      break;
     }
     case 131088:  {
      $0 = 3974;
      break L1;
      break;
     }
     case 131089:  {
      $0 = 3991;
      break L1;
      break;
     }
     case 131090:  {
      $0 = 4003;
      break L1;
      break;
     }
     case 131091:  {
      $0 = 4025;
      break L1;
      break;
     }
     case 131092:  {
      $0 = 4043;
      break L1;
      break;
     }
     case 131093:  {
      $0 = 4069;
      break L1;
      break;
     }
     case 131094:  {
      $0 = 4095;
      break L1;
      break;
     }
     case 131095:  {
      $0 = 4122;
      break L1;
      break;
     }
     case 131096:  {
      $0 = 4148;
      break L1;
      break;
     }
     default: {
      label = 43;
      break L1;
     }
     }
    } while(0);
   }
   $switch$split102D = ($2|0)<(196614);
   if ($switch$split102D) {
    switch ($2|0) {
    case 196609:  {
     $0 = 4247;
     break L1;
     break;
    }
    case 196610:  {
     $0 = 4265;
     break L1;
     break;
    }
    case 196611:  {
     $0 = 4282;
     break L1;
     break;
    }
    case 196612:  {
     $0 = 4308;
     break L1;
     break;
    }
    case 196613:  {
     $0 = 4325;
     break L1;
     break;
    }
    default: {
     label = 43;
     break L1;
    }
    }
   }
   $switch$split192D = ($2|0)<(327681);
   if (!($switch$split192D)) {
    switch ($2|0) {
    case 327681:  {
     $0 = 4168;
     break L1;
     break;
    }
    case 327682:  {
     $0 = 4208;
     break L1;
     break;
    }
    case 327683:  {
     $0 = 4385;
     break L1;
     break;
    }
    default: {
     label = 43;
     break L1;
    }
    }
   }
   $switch$split282D = ($2|0)<(262145);
   if ($switch$split282D) {
    switch ($2|0) {
    case 196614:  {
     break;
    }
    default: {
     label = 43;
     break L1;
    }
    }
    $0 = 4341;
    break;
   }
   switch ($2|0) {
   case 262145:  {
    $0 = 4363;
    break L1;
    break;
   }
   case 262146:  {
    $0 = 4373;
    break L1;
    break;
   }
   default: {
    label = 43;
    break L1;
   }
   }
  }
 } while(0);
 if ((label|0) == 43) {
  $0 = 4479;
 }
 $3 = $0;
 STACKTOP = sp;return ($3|0);
}
function _OnClose() {
 var $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 (_printf(4546,$vararg_buffer)|0);
 STACKTOP = sp;return 0;
}
function _OnRefresh() {
 var $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 (_printf(4554,$vararg_buffer)|0);
 STACKTOP = sp;return;
}
function _PullInfo() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $extension = 0, $height = 0, $i = 0, $major = 0, $minor = 0, $proc = 0, $proc_addr = 0, $rev = 0, $status = 0, $time = 0.0, $vararg_buffer = 0;
 var $vararg_buffer1 = 0, $vararg_buffer11 = 0, $vararg_buffer13 = 0, $vararg_buffer15 = 0, $vararg_buffer17 = 0, $vararg_buffer21 = 0, $vararg_buffer24 = 0, $vararg_buffer27 = 0, $vararg_buffer32 = 0, $vararg_buffer35 = 0, $vararg_buffer39 = 0, $vararg_buffer43 = 0, $vararg_buffer47 = 0, $vararg_buffer5 = 0, $vararg_buffer51 = 0, $vararg_buffer53 = 0, $vararg_buffer55 = 0, $vararg_buffer9 = 0, $vararg_ptr20 = 0, $vararg_ptr3 = 0;
 var $vararg_ptr30 = 0, $vararg_ptr31 = 0, $vararg_ptr38 = 0, $vararg_ptr4 = 0, $vararg_ptr42 = 0, $vararg_ptr46 = 0, $vararg_ptr50 = 0, $vararg_ptr8 = 0, $wheel = 0, $width = 0, $x = 0, $y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer55 = sp + 168|0;
 $vararg_buffer53 = sp + 160|0;
 $vararg_buffer51 = sp + 152|0;
 $vararg_buffer47 = sp + 144|0;
 $vararg_buffer43 = sp + 136|0;
 $vararg_buffer39 = sp + 128|0;
 $vararg_buffer35 = sp + 120|0;
 $vararg_buffer32 = sp + 112|0;
 $vararg_buffer27 = sp + 96|0;
 $vararg_buffer24 = sp + 88|0;
 $vararg_buffer21 = sp + 80|0;
 $vararg_buffer17 = sp + 72|0;
 $vararg_buffer15 = sp + 64|0;
 $vararg_buffer13 = sp + 56|0;
 $vararg_buffer11 = sp + 48|0;
 $vararg_buffer9 = sp + 40|0;
 $vararg_buffer5 = sp + 32|0;
 $vararg_buffer1 = sp + 16|0;
 $vararg_buffer = sp + 8|0;
 $major = sp + 220|0;
 $minor = sp + 216|0;
 $rev = sp + 212|0;
 $width = sp + 208|0;
 $height = sp + 204|0;
 $x = sp + 196|0;
 $y = sp + 192|0;
 (_printf(4725,$vararg_buffer)|0);
 _glfwGetVersion(($major|0),($minor|0),($rev|0));
 $0 = HEAP32[$major>>2]|0;
 $1 = HEAP32[$minor>>2]|0;
 $2 = HEAP32[$rev>>2]|0;
 HEAP32[$vararg_buffer1>>2] = $0;
 $vararg_ptr3 = ((($vararg_buffer1)) + 4|0);
 HEAP32[$vararg_ptr3>>2] = $1;
 $vararg_ptr4 = ((($vararg_buffer1)) + 8|0);
 HEAP32[$vararg_ptr4>>2] = $2;
 (_printf(4807,$vararg_buffer1)|0);
 _glfwGetWindowSize(($width|0),($height|0));
 $3 = HEAP32[$width>>2]|0;
 $4 = HEAP32[$height>>2]|0;
 HEAP32[$vararg_buffer5>>2] = $3;
 $vararg_ptr8 = ((($vararg_buffer5)) + 4|0);
 HEAP32[$vararg_ptr8>>2] = $4;
 (_printf(4833,$vararg_buffer5)|0);
 $5 = (_glfwGetKey(289)|0);
 $status = $5;
 $6 = $status;
 $7 = ($6|0)==(1);
 if ($7) {
  (_printf(4855,$vararg_buffer9)|0);
 } else {
  (_printf(4880,$vararg_buffer11)|0);
 }
 $8 = (_glfwGetMouseButton(0)|0);
 $status = $8;
 $9 = $status;
 $10 = ($9|0)==(1);
 if ($10) {
  (_printf(4906,$vararg_buffer13)|0);
 } else {
  (_printf(4933,$vararg_buffer15)|0);
 }
 _glfwGetMousePos(($x|0),($y|0));
 $11 = HEAP32[$x>>2]|0;
 $12 = HEAP32[$y>>2]|0;
 HEAP32[$vararg_buffer17>>2] = $11;
 $vararg_ptr20 = ((($vararg_buffer17)) + 4|0);
 HEAP32[$vararg_ptr20>>2] = $12;
 (_printf(4961,$vararg_buffer17)|0);
 $13 = (_glfwGetMouseWheel()|0);
 $wheel = $13;
 $14 = $wheel;
 HEAP32[$vararg_buffer21>>2] = $14;
 (_printf(4986,$vararg_buffer21)|0);
 $15 = (+_glfwGetTime());
 $time = $15;
 $16 = $time;
 HEAPF64[$vararg_buffer24>>3] = $16;
 (_printf(5009,$vararg_buffer24)|0);
 _glfwGetGLVersion(($major|0),($minor|0),($rev|0));
 $17 = HEAP32[$major>>2]|0;
 $18 = HEAP32[$minor>>2]|0;
 $19 = HEAP32[$rev>>2]|0;
 HEAP32[$vararg_buffer27>>2] = $17;
 $vararg_ptr30 = ((($vararg_buffer27)) + 4|0);
 HEAP32[$vararg_ptr30>>2] = $18;
 $vararg_ptr31 = ((($vararg_buffer27)) + 8|0);
 HEAP32[$vararg_ptr31>>2] = $19;
 (_printf(5021,$vararg_buffer27)|0);
 $20 = (_glfwGetNumberOfProcessors()|0);
 $proc = $20;
 $21 = $proc;
 HEAP32[$vararg_buffer32>>2] = $21;
 (_printf(5045,$vararg_buffer32)|0);
 $i = 0;
 while(1) {
  $22 = $i;
  $23 = HEAP32[176>>2]|0;
  $24 = ($22>>>0)<($23>>>0);
  if (!($24)) {
   break;
  }
  $25 = $i;
  $26 = (80 + ($25<<2)|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = (_GetParamName($27)|0);
  $29 = $i;
  $30 = (80 + ($29<<2)|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = (_glfwGetWindowParam(($31|0))|0);
  HEAP32[$vararg_buffer35>>2] = $28;
  $vararg_ptr38 = ((($vararg_buffer35)) + 4|0);
  HEAP32[$vararg_ptr38>>2] = $32;
  (_printf(5074,$vararg_buffer35)|0);
  $33 = $i;
  $34 = (($33) + 1)|0;
  $i = $34;
 }
 $extension = 5089;
 $35 = $extension;
 $36 = $extension;
 $37 = (_glfwExtensionSupported(($36|0))|0);
 $38 = ($37|0)!=(0);
 $39 = $38 ? 5142 : 5152;
 HEAP32[$vararg_buffer39>>2] = $35;
 $vararg_ptr42 = ((($vararg_buffer39)) + 4|0);
 HEAP32[$vararg_ptr42>>2] = $39;
 (_printf(5119,$vararg_buffer39)|0);
 $extension = 5166;
 $40 = $extension;
 $41 = $extension;
 $42 = (_glfwExtensionSupported(($41|0))|0);
 $43 = ($42|0)!=(0);
 $44 = $43 ? 5142 : 5152;
 HEAP32[$vararg_buffer43>>2] = $40;
 $vararg_ptr46 = ((($vararg_buffer43)) + 4|0);
 HEAP32[$vararg_ptr46>>2] = $44;
 (_printf(5119,$vararg_buffer43)|0);
 $extension = 14036;
 $45 = $extension;
 $46 = (_glfwGetProcAddress(($45|0))|0);
 $proc_addr = $46;
 $47 = $extension;
 $48 = $proc_addr;
 HEAP32[$vararg_buffer47>>2] = $47;
 $vararg_ptr50 = ((($vararg_buffer47)) + 4|0);
 HEAP32[$vararg_ptr50>>2] = $48;
 (_printf(5192,$vararg_buffer47)|0);
 (_printf(5228,$vararg_buffer51)|0);
 _glfwSleep(1.0);
 (_printf(5247,$vararg_buffer53)|0);
 (_printf(4725,$vararg_buffer55)|0);
 STACKTOP = sp;return;
}
function _lua_checkstack($L,$size) {
 $L = $L|0;
 $size = $size|0;
 var $$pre = 0, $$pre4 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $res$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp;
 HEAP32[$0>>2] = $size;
 $1 = ((($L)) + 16|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($L)) + 24|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($L)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $4;
 $8 = $6;
 $9 = (($7) - ($8))|0;
 $10 = $9 >> 4;
 $11 = ($10|0)>($size|0);
 do {
  if ($11) {
   $25 = $6;$26 = $size;
  } else {
   $12 = ((($L)) + 28|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = $13;
   $15 = (($8) - ($14))|0;
   $16 = $15 >> 4;
   $17 = (($16) + 5)|0;
   $18 = (1000000 - ($size))|0;
   $19 = ($17|0)>($18|0);
   if ($19) {
    $res$01 = 0;
    STACKTOP = sp;return ($res$01|0);
   }
   $20 = (_luaD_rawrunprotected($L,156,$0)|0);
   $21 = ($20|0)==(0);
   if ($21) {
    $$pre = HEAP32[$5>>2]|0;
    $$pre4 = HEAP32[$0>>2]|0;
    $25 = $$pre;$26 = $$pre4;
    break;
   } else {
    $res$01 = 0;
    STACKTOP = sp;return ($res$01|0);
   }
  }
 } while(0);
 $22 = ((($2)) + 4|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = (($25) + ($26<<4)|0);
 $27 = ($23>>>0)<($24>>>0);
 if (!($27)) {
  $res$01 = 1;
  STACKTOP = sp;return ($res$01|0);
 }
 HEAP32[$22>>2] = $24;
 $res$01 = 1;
 STACKTOP = sp;return ($res$01|0);
}
function _lua_xmove($from,$to,$n) {
 $from = $from|0;
 $to = $to|0;
 $n = $n|0;
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $exitcond = 0, $exitcond2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($from|0)==($to|0);
 if ($0) {
  return;
 }
 $1 = ((($from)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (0 - ($n))|0;
 $4 = (($2) + ($3<<4)|0);
 HEAP32[$1>>2] = $4;
 $5 = ($n|0)>(0);
 if (!($5)) {
  return;
 }
 $6 = ((($to)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($7)) + 16|0);
 HEAP32[$6>>2] = $8;
 $9 = $4;
 $10 = $9;
 $11 = HEAP32[$10>>2]|0;
 $12 = (($9) + 4)|0;
 $13 = $12;
 $14 = HEAP32[$13>>2]|0;
 $15 = $7;
 $16 = $15;
 HEAP32[$16>>2] = $11;
 $17 = (($15) + 4)|0;
 $18 = $17;
 HEAP32[$18>>2] = $14;
 $19 = (((($2) + ($3<<4)|0)) + 8|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ((($7)) + 8|0);
 HEAP32[$21>>2] = $20;
 $exitcond2 = ($n|0)==(1);
 if ($exitcond2) {
  return;
 } else {
  $23 = 1;
 }
 while(1) {
  $$pre = HEAP32[$1>>2]|0;
  $22 = (($$pre) + ($23<<4)|0);
  $24 = HEAP32[$6>>2]|0;
  $25 = ((($24)) + 16|0);
  HEAP32[$6>>2] = $25;
  $26 = $22;
  $27 = $26;
  $28 = HEAP32[$27>>2]|0;
  $29 = (($26) + 4)|0;
  $30 = $29;
  $31 = HEAP32[$30>>2]|0;
  $32 = $24;
  $33 = $32;
  HEAP32[$33>>2] = $28;
  $34 = (($32) + 4)|0;
  $35 = $34;
  HEAP32[$35>>2] = $31;
  $36 = (((($$pre) + ($23<<4)|0)) + 8|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = ((($24)) + 8|0);
  HEAP32[$38>>2] = $37;
  $39 = (($23) + 1)|0;
  $exitcond = ($39|0)==($n|0);
  if ($exitcond) {
   break;
  } else {
   $23 = $39;
  }
 }
 return;
}
function _lua_atpanic($L,$panicf) {
 $L = $L|0;
 $panicf = $panicf|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($L)) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 168|0);
 $3 = HEAP32[$2>>2]|0;
 HEAP32[$2>>2] = $panicf;
 return ($3|0);
}
function _lua_version($L) {
 $L = $L|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($L|0)==(0|0);
 if ($0) {
  $$0 = 16;
  return ($$0|0);
 }
 $1 = ((($L)) + 12|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 176|0);
 $4 = HEAP32[$3>>2]|0;
 $$0 = $4;
 return ($$0|0);
}
function _lua_absindex($L,$idx) {
 $L = $L|0;
 $idx = $idx|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $idx$off = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $idx$off = (($idx) + 1000999)|0;
 $0 = ($idx$off>>>0)>(1000999);
 if ($0) {
  $11 = $idx;
  return ($11|0);
 }
 $1 = ((($L)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($L)) + 16|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = HEAP32[$4>>2]|0;
 $6 = $2;
 $7 = $5;
 $8 = (($6) - ($7))|0;
 $9 = $8 >> 4;
 $10 = (($9) + ($idx))|0;
 $11 = $10;
 return ($11|0);
}
function _lua_gettop($L) {
 $L = $L|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($L)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($L)) + 16|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 16|0);
 $6 = $1;
 $7 = $5;
 $8 = (($6) - ($7))|0;
 $9 = $8 >> 4;
 return ($9|0);
}
function _lua_settop($L,$idx) {
 $L = $L|0;
 $idx = $idx|0;
 var $$sum = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $scevgep = 0, $scevgep4 = 0, $scevgep7 = 0, $uglygep = 0, $uglygep6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($idx|0)>(-1);
 if (!($0)) {
  $16 = (($idx) + 1)|0;
  $17 = ((($L)) + 8|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = (($18) + ($16<<4)|0);
  HEAP32[$17>>2] = $19;
  return;
 }
 $1 = ((($L)) + 16|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($L)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $$sum = (($idx) + 1)|0;
 $6 = (($3) + ($$sum<<4)|0);
 $7 = ($5>>>0)<($6>>>0);
 if ($7) {
  $8 = $5;
  $scevgep = (((($3) + ($idx<<4)|0)) + 8|0);
  $scevgep4 = ((($scevgep)) + 4|0);
  $9 = (3 - ($8))|0;
  $uglygep = (($scevgep4) + ($9)|0);
  $uglygep6 = $uglygep;
  $10 = $uglygep6 >>> 4;
  $11 = (($10) + 1)|0;
  $13 = $5;
  while(1) {
   $12 = ((($13)) + 16|0);
   $14 = ((($13)) + 8|0);
   HEAP32[$14>>2] = 0;
   $15 = ($12>>>0)<($6>>>0);
   if ($15) {
    $13 = $12;
   } else {
    break;
   }
  }
  $scevgep7 = (($5) + ($11<<4)|0);
  HEAP32[$4>>2] = $scevgep7;
 }
 HEAP32[$4>>2] = $6;
 return;
}
function _lua_remove($L,$idx) {
 $L = $L|0;
 $idx = $idx|0;
 var $$lcssa1 = 0, $$luaO_nilobject_$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $p$0$ph = 0, $p$02 = 0, $p$02$phi = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($L)) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($idx|0)>(0);
 do {
  if ($2) {
   $3 = HEAP32[$1>>2]|0;
   $4 = (($3) + ($idx<<4)|0);
   $5 = ((($L)) + 8|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = ($4>>>0)<($6>>>0);
   $$luaO_nilobject_$i = $7 ? $4 : 24;
   $p$0$ph = $$luaO_nilobject_$i;
  } else {
   $8 = ($idx|0)<(-1000999);
   if (!($8)) {
    $9 = ((($L)) + 8|0);
    $10 = HEAP32[$9>>2]|0;
    $11 = (($10) + ($idx<<4)|0);
    $p$0$ph = $11;
    break;
   }
   $12 = ($idx|0)==(-1001000);
   if ($12) {
    $13 = ((($L)) + 12|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = ((($14)) + 40|0);
    $p$0$ph = $15;
    break;
   }
   $16 = (-1001000 - ($idx))|0;
   $17 = HEAP32[$1>>2]|0;
   $18 = ((($17)) + 8|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = ($19|0)==(22);
   if ($20) {
    $p$0$ph = 24;
   } else {
    $21 = HEAP32[$17>>2]|0;
    $22 = ((($21)) + 6|0);
    $23 = HEAP8[$22>>0]|0;
    $24 = $23&255;
    $25 = ($16|0)>($24|0);
    $26 = (($16) + -1)|0;
    $27 = (((($21)) + 16|0) + ($26<<4)|0);
    $28 = $25 ? 24 : $27;
    $p$0$ph = $28;
   }
  }
 } while(0);
 $29 = ((($p$0$ph)) + 16|0);
 $30 = ((($L)) + 8|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = ($29>>>0)<($31>>>0);
 if ($32) {
  $34 = $29;$p$02 = $p$0$ph;
 } else {
  $$lcssa1 = $31;
  $50 = ((($$lcssa1)) + -16|0);
  HEAP32[$30>>2] = $50;
  return;
 }
 while(1) {
  $33 = $34;
  $35 = $33;
  $36 = HEAP32[$35>>2]|0;
  $37 = (($33) + 4)|0;
  $38 = $37;
  $39 = HEAP32[$38>>2]|0;
  $40 = $p$02;
  $41 = $40;
  HEAP32[$41>>2] = $36;
  $42 = (($40) + 4)|0;
  $43 = $42;
  HEAP32[$43>>2] = $39;
  $44 = ((($p$02)) + 24|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = ((($p$02)) + 8|0);
  HEAP32[$46>>2] = $45;
  $47 = ((($34)) + 16|0);
  $48 = HEAP32[$30>>2]|0;
  $49 = ($47>>>0)<($48>>>0);
  if ($49) {
   $p$02$phi = $34;$34 = $47;$p$02 = $p$02$phi;
  } else {
   $$lcssa1 = $48;
   break;
  }
 }
 $50 = ((($$lcssa1)) + -16|0);
 HEAP32[$30>>2] = $50;
 return;
}
function _lua_insert($L,$idx) {
 $L = $L|0;
 $idx = $idx|0;
 var $$0$i = 0, $$luaO_nilobject_$i = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $7 = 0, $8 = 0, $9 = 0, $q$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($L)) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($idx|0)>(0);
 do {
  if ($2) {
   $3 = HEAP32[$1>>2]|0;
   $4 = (($3) + ($idx<<4)|0);
   $5 = ((($L)) + 8|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = ($4>>>0)<($6>>>0);
   $$luaO_nilobject_$i = $7 ? $4 : 24;
   $$0$i = $$luaO_nilobject_$i;
  } else {
   $8 = ($idx|0)<(-1000999);
   if (!($8)) {
    $9 = ((($L)) + 8|0);
    $10 = HEAP32[$9>>2]|0;
    $11 = (($10) + ($idx<<4)|0);
    $$0$i = $11;
    break;
   }
   $12 = ($idx|0)==(-1001000);
   if ($12) {
    $13 = ((($L)) + 12|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = ((($14)) + 40|0);
    $$0$i = $15;
    break;
   }
   $16 = (-1001000 - ($idx))|0;
   $17 = HEAP32[$1>>2]|0;
   $18 = ((($17)) + 8|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = ($19|0)==(22);
   if ($20) {
    $$0$i = 24;
   } else {
    $21 = HEAP32[$17>>2]|0;
    $22 = ((($21)) + 6|0);
    $23 = HEAP8[$22>>0]|0;
    $24 = $23&255;
    $25 = ($16|0)>($24|0);
    $26 = (($16) + -1)|0;
    $27 = (((($21)) + 16|0) + ($26<<4)|0);
    $28 = $25 ? 24 : $27;
    $$0$i = $28;
   }
  }
 } while(0);
 $29 = ((($L)) + 8|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = ($30>>>0)>($$0$i>>>0);
 if ($31) {
  $q$01 = $30;
  while(1) {
   $32 = ((($q$01)) + -16|0);
   $33 = $32;
   $34 = $33;
   $35 = HEAP32[$34>>2]|0;
   $36 = (($33) + 4)|0;
   $37 = $36;
   $38 = HEAP32[$37>>2]|0;
   $39 = $q$01;
   $40 = $39;
   HEAP32[$40>>2] = $35;
   $41 = (($39) + 4)|0;
   $42 = $41;
   HEAP32[$42>>2] = $38;
   $43 = ((($q$01)) + -8|0);
   $44 = HEAP32[$43>>2]|0;
   $45 = ((($q$01)) + 8|0);
   HEAP32[$45>>2] = $44;
   $46 = ($32>>>0)>($$0$i>>>0);
   if ($46) {
    $q$01 = $32;
   } else {
    break;
   }
  }
  $$pre = HEAP32[$29>>2]|0;
  $48 = $$pre;
 } else {
  $48 = $30;
 }
 $47 = $48;
 $49 = $47;
 $50 = HEAP32[$49>>2]|0;
 $51 = (($47) + 4)|0;
 $52 = $51;
 $53 = HEAP32[$52>>2]|0;
 $54 = $$0$i;
 $55 = $54;
 HEAP32[$55>>2] = $50;
 $56 = (($54) + 4)|0;
 $57 = $56;
 HEAP32[$57>>2] = $53;
 $58 = ((($48)) + 8|0);
 $59 = HEAP32[$58>>2]|0;
 $60 = ((($$0$i)) + 8|0);
 HEAP32[$60>>2] = $59;
 return;
}
function _lua_replace($L,$idx) {
 $L = $L|0;
 $idx = $idx|0;
 var $$0$i = 0, $$luaO_nilobject_$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($L)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + -16|0);
 $3 = ((($L)) + 16|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($idx|0)>(0);
 do {
  if ($5) {
   $6 = HEAP32[$4>>2]|0;
   $7 = (($6) + ($idx<<4)|0);
   $8 = ($7>>>0)<($1>>>0);
   $$luaO_nilobject_$i = $8 ? $7 : 24;
   $$0$i = $$luaO_nilobject_$i;
  } else {
   $9 = ($idx|0)<(-1000999);
   if (!($9)) {
    $10 = (($1) + ($idx<<4)|0);
    $$0$i = $10;
    break;
   }
   $11 = ($idx|0)==(-1001000);
   if ($11) {
    $12 = ((($L)) + 12|0);
    $13 = HEAP32[$12>>2]|0;
    $14 = ((($13)) + 40|0);
    $$0$i = $14;
    break;
   }
   $15 = (-1001000 - ($idx))|0;
   $16 = HEAP32[$4>>2]|0;
   $17 = ((($16)) + 8|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = ($18|0)==(22);
   if ($19) {
    $$0$i = 24;
   } else {
    $20 = HEAP32[$16>>2]|0;
    $21 = ((($20)) + 6|0);
    $22 = HEAP8[$21>>0]|0;
    $23 = $22&255;
    $24 = ($15|0)>($23|0);
    $25 = (($15) + -1)|0;
    $26 = (((($20)) + 16|0) + ($25<<4)|0);
    $27 = $24 ? 24 : $26;
    $$0$i = $27;
   }
  }
 } while(0);
 $28 = $2;
 $29 = $28;
 $30 = HEAP32[$29>>2]|0;
 $31 = (($28) + 4)|0;
 $32 = $31;
 $33 = HEAP32[$32>>2]|0;
 $34 = $$0$i;
 $35 = $34;
 HEAP32[$35>>2] = $30;
 $36 = (($34) + 4)|0;
 $37 = $36;
 HEAP32[$37>>2] = $33;
 $38 = ((($1)) + -8|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = ((($$0$i)) + 8|0);
 HEAP32[$40>>2] = $39;
 $41 = ($idx|0)<(-1001000);
 if ($41) {
  $42 = HEAP32[$38>>2]|0;
  $43 = $42 & 64;
  $44 = ($43|0)==(0);
  if (!($44)) {
   $45 = HEAP32[$2>>2]|0;
   $46 = ((($45)) + 5|0);
   $47 = HEAP8[$46>>0]|0;
   $48 = $47 & 3;
   $49 = ($48<<24>>24)==(0);
   if (!($49)) {
    $50 = HEAP32[$3>>2]|0;
    $51 = HEAP32[$50>>2]|0;
    $52 = HEAP32[$51>>2]|0;
    $53 = ((($52)) + 5|0);
    $54 = HEAP8[$53>>0]|0;
    $55 = $54 & 4;
    $56 = ($55<<24>>24)==(0);
    if (!($56)) {
     _luaC_barrier_($L,$52,$45);
    }
   }
  }
 }
 $57 = HEAP32[$0>>2]|0;
 $58 = ((($57)) + -16|0);
 HEAP32[$0>>2] = $58;
 return;
}
function _lua_copy($L,$fromidx,$toidx) {
 $L = $L|0;
 $fromidx = $fromidx|0;
 $toidx = $toidx|0;
 var $$0$i = 0, $$0$i2 = 0, $$luaO_nilobject_$i = 0, $$luaO_nilobject_$i1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($L)) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($fromidx|0)>(0);
 do {
  if ($2) {
   $3 = HEAP32[$1>>2]|0;
   $4 = (($3) + ($fromidx<<4)|0);
   $5 = ((($L)) + 8|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = ($4>>>0)<($6>>>0);
   $$luaO_nilobject_$i = $7 ? $4 : 24;
   $$0$i = $$luaO_nilobject_$i;
  } else {
   $8 = ($fromidx|0)<(-1000999);
   if (!($8)) {
    $9 = ((($L)) + 8|0);
    $10 = HEAP32[$9>>2]|0;
    $11 = (($10) + ($fromidx<<4)|0);
    $$0$i = $11;
    break;
   }
   $12 = ($fromidx|0)==(-1001000);
   if ($12) {
    $13 = ((($L)) + 12|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = ((($14)) + 40|0);
    $$0$i = $15;
    break;
   }
   $16 = (-1001000 - ($fromidx))|0;
   $17 = HEAP32[$1>>2]|0;
   $18 = ((($17)) + 8|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = ($19|0)==(22);
   if ($20) {
    $$0$i = 24;
   } else {
    $21 = HEAP32[$17>>2]|0;
    $22 = ((($21)) + 6|0);
    $23 = HEAP8[$22>>0]|0;
    $24 = $23&255;
    $25 = ($16|0)>($24|0);
    $26 = (($16) + -1)|0;
    $27 = (((($21)) + 16|0) + ($26<<4)|0);
    $28 = $25 ? 24 : $27;
    $$0$i = $28;
   }
  }
 } while(0);
 $29 = ($toidx|0)>(0);
 do {
  if ($29) {
   $30 = HEAP32[$1>>2]|0;
   $31 = (($30) + ($toidx<<4)|0);
   $32 = ((($L)) + 8|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = ($31>>>0)<($33>>>0);
   $$luaO_nilobject_$i1 = $34 ? $31 : 24;
   $$0$i2 = $$luaO_nilobject_$i1;
  } else {
   $35 = ($toidx|0)<(-1000999);
   if (!($35)) {
    $36 = ((($L)) + 8|0);
    $37 = HEAP32[$36>>2]|0;
    $38 = (($37) + ($toidx<<4)|0);
    $$0$i2 = $38;
    break;
   }
   $39 = ($toidx|0)==(-1001000);
   if ($39) {
    $40 = ((($L)) + 12|0);
    $41 = HEAP32[$40>>2]|0;
    $42 = ((($41)) + 40|0);
    $$0$i2 = $42;
    break;
   }
   $43 = (-1001000 - ($toidx))|0;
   $44 = HEAP32[$1>>2]|0;
   $45 = ((($44)) + 8|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = ($46|0)==(22);
   if ($47) {
    $$0$i2 = 24;
   } else {
    $48 = HEAP32[$44>>2]|0;
    $49 = ((($48)) + 6|0);
    $50 = HEAP8[$49>>0]|0;
    $51 = $50&255;
    $52 = ($43|0)>($51|0);
    $53 = (($43) + -1)|0;
    $54 = (((($48)) + 16|0) + ($53<<4)|0);
    $55 = $52 ? 24 : $54;
    $$0$i2 = $55;
   }
  }
 } while(0);
 $56 = $$0$i;
 $57 = $56;
 $58 = HEAP32[$57>>2]|0;
 $59 = (($56) + 4)|0;
 $60 = $59;
 $61 = HEAP32[$60>>2]|0;
 $62 = $$0$i2;
 $63 = $62;
 HEAP32[$63>>2] = $58;
 $64 = (($62) + 4)|0;
 $65 = $64;
 HEAP32[$65>>2] = $61;
 $66 = ((($$0$i)) + 8|0);
 $67 = HEAP32[$66>>2]|0;
 $68 = ((($$0$i2)) + 8|0);
 HEAP32[$68>>2] = $67;
 $69 = ($toidx|0)<(-1001000);
 if (!($69)) {
  return;
 }
 $70 = HEAP32[$66>>2]|0;
 $71 = $70 & 64;
 $72 = ($71|0)==(0);
 if ($72) {
  return;
 }
 $73 = HEAP32[$$0$i>>2]|0;
 $74 = ((($73)) + 5|0);
 $75 = HEAP8[$74>>0]|0;
 $76 = $75 & 3;
 $77 = ($76<<24>>24)==(0);
 if ($77) {
  return;
 }
 $78 = HEAP32[$0>>2]|0;
 $79 = HEAP32[$78>>2]|0;
 $80 = HEAP32[$79>>2]|0;
 $81 = ((($80)) + 5|0);
 $82 = HEAP8[$81>>0]|0;
 $83 = $82 & 4;
 $84 = ($83<<24>>24)==(0);
 if ($84) {
  return;
 }
 _luaC_barrier_($L,$80,$73);
 return;
}
function _lua_pushvalue($L,$idx) {
 $L = $L|0;
 $idx = $idx|0;
 var $$0$i = 0, $$luaO_nilobject_$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($L)) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($idx|0)>(0);
 do {
  if ($2) {
   $3 = HEAP32[$1>>2]|0;
   $4 = (($3) + ($idx<<4)|0);
   $5 = ((($L)) + 8|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = ($4>>>0)<($6>>>0);
   $$luaO_nilobject_$i = $7 ? $4 : 24;
   $$0$i = $$luaO_nilobject_$i;
  } else {
   $8 = ($idx|0)<(-1000999);
   if (!($8)) {
    $9 = ((($L)) + 8|0);
    $10 = HEAP32[$9>>2]|0;
    $11 = (($10) + ($idx<<4)|0);
    $$0$i = $11;
    break;
   }
   $12 = ($idx|0)==(-1001000);
   if ($12) {
    $13 = ((($L)) + 12|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = ((($14)) + 40|0);
    $$0$i = $15;
    break;
   }
   $16 = (-1001000 - ($idx))|0;
   $17 = HEAP32[$1>>2]|0;
   $18 = ((($17)) + 8|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = ($19|0)==(22);
   if ($20) {
    $$0$i = 24;
   } else {
    $21 = HEAP32[$17>>2]|0;
    $22 = ((($21)) + 6|0);
    $23 = HEAP8[$22>>0]|0;
    $24 = $23&255;
    $25 = ($16|0)>($24|0);
    $26 = (($16) + -1)|0;
    $27 = (((($21)) + 16|0) + ($26<<4)|0);
    $28 = $25 ? 24 : $27;
    $$0$i = $28;
   }
  }
 } while(0);
 $29 = ((($L)) + 8|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = $$0$i;
 $32 = $31;
 $33 = HEAP32[$32>>2]|0;
 $34 = (($31) + 4)|0;
 $35 = $34;
 $36 = HEAP32[$35>>2]|0;
 $37 = $30;
 $38 = $37;
 HEAP32[$38>>2] = $33;
 $39 = (($37) + 4)|0;
 $40 = $39;
 HEAP32[$40>>2] = $36;
 $41 = ((($$0$i)) + 8|0);
 $42 = HEAP32[$41>>2]|0;
 $43 = ((($30)) + 8|0);
 HEAP32[$43>>2] = $42;
 $44 = HEAP32[$29>>2]|0;
 $45 = ((($44)) + 16|0);
 HEAP32[$29>>2] = $45;
 return;
}
function _lua_type($L,$idx) {
 $L = $L|0;
 $idx = $idx|0;
 var $$0$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($L)) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($idx|0)>(0);
 do {
  if ($2) {
   $3 = HEAP32[$1>>2]|0;
   $4 = (($3) + ($idx<<4)|0);
   $5 = ((($L)) + 8|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = ($4>>>0)<($6>>>0);
   if ($7) {
    $$0$i = $4;
   } else {
    $32 = -1;
    return ($32|0);
   }
  } else {
   $8 = ($idx|0)<(-1000999);
   if (!($8)) {
    $9 = ((($L)) + 8|0);
    $10 = HEAP32[$9>>2]|0;
    $11 = (($10) + ($idx<<4)|0);
    $$0$i = $11;
    break;
   }
   $12 = ($idx|0)==(-1001000);
   if ($12) {
    $13 = ((($L)) + 12|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = ((($14)) + 40|0);
    $$0$i = $15;
    break;
   }
   $16 = (-1001000 - ($idx))|0;
   $17 = HEAP32[$1>>2]|0;
   $18 = ((($17)) + 8|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = ($19|0)==(22);
   if ($20) {
    $32 = -1;
    return ($32|0);
   }
   $21 = HEAP32[$17>>2]|0;
   $22 = ((($21)) + 6|0);
   $23 = HEAP8[$22>>0]|0;
   $24 = $23&255;
   $25 = ($16|0)>($24|0);
   $26 = (($16) + -1)|0;
   $27 = (((($21)) + 16|0) + ($26<<4)|0);
   if ($25) {
    $32 = -1;
    return ($32|0);
   } else {
    $$0$i = $27;
   }
  }
 } while(0);
 $28 = ($$0$i|0)==(24|0);
 if ($28) {
  $32 = -1;
  return ($32|0);
 }
 $29 = ((($$0$i)) + 8|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = $30 & 15;
 $32 = $31;
 return ($32|0);
}
function _lua_typename($L,$t) {
 $L = $L|0;
 $t = $t|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($t) + 1)|0;
 $1 = (192 + ($0<<2)|0);
 $2 = HEAP32[$1>>2]|0;
 return ($2|0);
}
function _lua_iscfunction($L,$idx) {
 $L = $L|0;
 $idx = $idx|0;
 var $$ = 0, $$0$i = 0, $$luaO_nilobject_$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($L)) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($idx|0)>(0);
 do {
  if ($2) {
   $3 = HEAP32[$1>>2]|0;
   $4 = (($3) + ($idx<<4)|0);
   $5 = ((($L)) + 8|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = ($4>>>0)<($6>>>0);
   $$luaO_nilobject_$i = $7 ? $4 : 24;
   $$0$i = $$luaO_nilobject_$i;
  } else {
   $8 = ($idx|0)<(-1000999);
   if (!($8)) {
    $9 = ((($L)) + 8|0);
    $10 = HEAP32[$9>>2]|0;
    $11 = (($10) + ($idx<<4)|0);
    $$0$i = $11;
    break;
   }
   $12 = ($idx|0)==(-1001000);
   if ($12) {
    $13 = ((($L)) + 12|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = ((($14)) + 40|0);
    $$0$i = $15;
    break;
   }
   $16 = (-1001000 - ($idx))|0;
   $17 = HEAP32[$1>>2]|0;
   $18 = ((($17)) + 8|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = ($19|0)==(22);
   if ($20) {
    $$0$i = 24;
   } else {
    $21 = HEAP32[$17>>2]|0;
    $22 = ((($21)) + 6|0);
    $23 = HEAP8[$22>>0]|0;
    $24 = $23&255;
    $25 = ($16|0)>($24|0);
    $26 = (($16) + -1)|0;
    $27 = (((($21)) + 16|0) + ($26<<4)|0);
    $28 = $25 ? 24 : $27;
    $$0$i = $28;
   }
  }
 } while(0);
 $29 = ((($$0$i)) + 8|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = ($30|0)==(22);
 $32 = ($30|0)==(102);
 $$ = $31 | $32;
 $33 = $$&1;
 return ($33|0);
}
function _lua_isnumber($L,$idx) {
 $L = $L|0;
 $idx = $idx|0;
 var $$0$i = 0, $$luaO_nilobject_$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $n = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $n = sp;
 $0 = ((($L)) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($idx|0)>(0);
 do {
  if ($2) {
   $3 = HEAP32[$1>>2]|0;
   $4 = (($3) + ($idx<<4)|0);
   $5 = ((($L)) + 8|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = ($4>>>0)<($6>>>0);
   $$luaO_nilobject_$i = $7 ? $4 : 24;
   $$0$i = $$luaO_nilobject_$i;
  } else {
   $8 = ($idx|0)<(-1000999);
   if (!($8)) {
    $9 = ((($L)) + 8|0);
    $10 = HEAP32[$9>>2]|0;
    $11 = (($10) + ($idx<<4)|0);
    $$0$i = $11;
    break;
   }
   $12 = ($idx|0)==(-1001000);
   if ($12) {
    $13 = ((($L)) + 12|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = ((($14)) + 40|0);
    $$0$i = $15;
    break;
   }
   $16 = (-1001000 - ($idx))|0;
   $17 = HEAP32[$1>>2]|0;
   $18 = ((($17)) + 8|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = ($19|0)==(22);
   if ($20) {
    $$0$i = 24;
   } else {
    $21 = HEAP32[$17>>2]|0;
    $22 = ((($21)) + 6|0);
    $23 = HEAP8[$22>>0]|0;
    $24 = $23&255;
    $25 = ($16|0)>($24|0);
    $26 = (($16) + -1)|0;
    $27 = (((($21)) + 16|0) + ($26<<4)|0);
    $28 = $25 ? 24 : $27;
    $$0$i = $28;
   }
  }
 } while(0);
 $29 = ((($$0$i)) + 8|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = ($30|0)==(3);
 if ($31) {
  $35 = 1;
  $34 = $35&1;
  STACKTOP = sp;return ($34|0);
 }
 $32 = (_luaV_tonumber($$0$i,$n)|0);
 $33 = ($32|0)!=(0|0);
 $35 = $33;
 $34 = $35&1;
 STACKTOP = sp;return ($34|0);
}
function _lua_isstring($L,$idx) {
 $L = $L|0;
 $idx = $idx|0;
 var $$0$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp = 0, $phitmp1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($L)) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($idx|0)>(0);
 do {
  if ($2) {
   $3 = HEAP32[$1>>2]|0;
   $4 = (($3) + ($idx<<4)|0);
   $5 = ((($L)) + 8|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = ($4>>>0)<($6>>>0);
   if ($7) {
    $$0$i$i = $4;
   } else {
    $33 = 0;
    $32 = $33&1;
    return ($32|0);
   }
  } else {
   $8 = ($idx|0)<(-1000999);
   if (!($8)) {
    $9 = ((($L)) + 8|0);
    $10 = HEAP32[$9>>2]|0;
    $11 = (($10) + ($idx<<4)|0);
    $$0$i$i = $11;
    break;
   }
   $12 = ($idx|0)==(-1001000);
   if ($12) {
    $13 = ((($L)) + 12|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = ((($14)) + 40|0);
    $$0$i$i = $15;
    break;
   }
   $16 = (-1001000 - ($idx))|0;
   $17 = HEAP32[$1>>2]|0;
   $18 = ((($17)) + 8|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = ($19|0)==(22);
   if ($20) {
    $33 = 0;
    $32 = $33&1;
    return ($32|0);
   }
   $21 = HEAP32[$17>>2]|0;
   $22 = ((($21)) + 6|0);
   $23 = HEAP8[$22>>0]|0;
   $24 = $23&255;
   $25 = ($16|0)>($24|0);
   $26 = (($16) + -1)|0;
   $27 = (((($21)) + 16|0) + ($26<<4)|0);
   if ($25) {
    $33 = 0;
    $32 = $33&1;
    return ($32|0);
   } else {
    $$0$i$i = $27;
   }
  }
 } while(0);
 $28 = ($$0$i$i|0)==(24|0);
 if ($28) {
  $33 = 0;
  $32 = $33&1;
  return ($32|0);
 }
 $29 = ((($$0$i$i)) + 8|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = $30 & 15;
 $phitmp = (($31) + -3)|0;
 $phitmp1 = ($phitmp>>>0)<(2);
 $33 = $phitmp1;
 $32 = $33&1;
 return ($32|0);
}
function _lua_rawequal($L,$index1,$index2) {
 $L = $L|0;
 $index1 = $index1|0;
 $index2 = $index2|0;
 var $$0$i = 0, $$0$i3 = 0, $$luaO_nilobject_$i = 0, $$luaO_nilobject_$i2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($L)) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($index1|0)>(0);
 do {
  if ($2) {
   $3 = HEAP32[$1>>2]|0;
   $4 = (($3) + ($index1<<4)|0);
   $5 = ((($L)) + 8|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = ($4>>>0)<($6>>>0);
   $$luaO_nilobject_$i = $7 ? $4 : 24;
   $$0$i = $$luaO_nilobject_$i;
  } else {
   $8 = ($index1|0)<(-1000999);
   if (!($8)) {
    $9 = ((($L)) + 8|0);
    $10 = HEAP32[$9>>2]|0;
    $11 = (($10) + ($index1<<4)|0);
    $$0$i = $11;
    break;
   }
   $12 = ($index1|0)==(-1001000);
   if ($12) {
    $13 = ((($L)) + 12|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = ((($14)) + 40|0);
    $$0$i = $15;
    break;
   }
   $16 = (-1001000 - ($index1))|0;
   $17 = HEAP32[$1>>2]|0;
   $18 = ((($17)) + 8|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = ($19|0)==(22);
   if ($20) {
    $$0$i = 24;
   } else {
    $21 = HEAP32[$17>>2]|0;
    $22 = ((($21)) + 6|0);
    $23 = HEAP8[$22>>0]|0;
    $24 = $23&255;
    $25 = ($16|0)>($24|0);
    $26 = (($16) + -1)|0;
    $27 = (((($21)) + 16|0) + ($26<<4)|0);
    $28 = $25 ? 24 : $27;
    $$0$i = $28;
   }
  }
 } while(0);
 $29 = ($index2|0)>(0);
 do {
  if ($29) {
   $30 = HEAP32[$1>>2]|0;
   $31 = (($30) + ($index2<<4)|0);
   $32 = ((($L)) + 8|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = ($31>>>0)<($33>>>0);
   $$luaO_nilobject_$i2 = $34 ? $31 : 24;
   $$0$i3 = $$luaO_nilobject_$i2;
  } else {
   $35 = ($index2|0)<(-1000999);
   if (!($35)) {
    $36 = ((($L)) + 8|0);
    $37 = HEAP32[$36>>2]|0;
    $38 = (($37) + ($index2<<4)|0);
    $$0$i3 = $38;
    break;
   }
   $39 = ($index2|0)==(-1001000);
   if ($39) {
    $40 = ((($L)) + 12|0);
    $41 = HEAP32[$40>>2]|0;
    $42 = ((($41)) + 40|0);
    $$0$i3 = $42;
    break;
   }
   $43 = (-1001000 - ($index2))|0;
   $44 = HEAP32[$1>>2]|0;
   $45 = ((($44)) + 8|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = ($46|0)==(22);
   if ($47) {
    $67 = 0;
    return ($67|0);
   } else {
    $48 = HEAP32[$44>>2]|0;
    $49 = ((($48)) + 6|0);
    $50 = HEAP8[$49>>0]|0;
    $51 = $50&255;
    $52 = ($43|0)>($51|0);
    $53 = (($43) + -1)|0;
    $54 = (((($48)) + 16|0) + ($53<<4)|0);
    $55 = $52 ? 24 : $54;
    $$0$i3 = $55;
    break;
   }
  }
 } while(0);
 $56 = ($$0$i|0)!=(24|0);
 $57 = ($$0$i3|0)!=(24|0);
 $or$cond = $56 & $57;
 if (!($or$cond)) {
  $67 = 0;
  return ($67|0);
 }
 $58 = ((($$0$i)) + 8|0);
 $59 = HEAP32[$58>>2]|0;
 $60 = ((($$0$i3)) + 8|0);
 $61 = HEAP32[$60>>2]|0;
 $62 = ($59|0)==($61|0);
 if ($62) {
  $63 = (_luaV_equalobj_(0,$$0$i,$$0$i3)|0);
  $64 = ($63|0)!=(0);
  $66 = $64;
 } else {
  $66 = 0;
 }
 $65 = $66&1;
 $67 = $65;
 return ($67|0);
}
function _lua_compare($L,$index1,$index2,$op) {
 $L = $L|0;
 $index1 = $index1|0;
 $index2 = $index2|0;
 $op = $op|0;
 var $$0$i = 0, $$0$i3 = 0, $$luaO_nilobject_$i = 0, $$luaO_nilobject_$i2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $7 = 0, $8 = 0, $9 = 0, $i$0 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($L)) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($index1|0)>(0);
 do {
  if ($2) {
   $3 = HEAP32[$1>>2]|0;
   $4 = (($3) + ($index1<<4)|0);
   $5 = ((($L)) + 8|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = ($4>>>0)<($6>>>0);
   $$luaO_nilobject_$i = $7 ? $4 : 24;
   $$0$i = $$luaO_nilobject_$i;
  } else {
   $8 = ($index1|0)<(-1000999);
   if (!($8)) {
    $9 = ((($L)) + 8|0);
    $10 = HEAP32[$9>>2]|0;
    $11 = (($10) + ($index1<<4)|0);
    $$0$i = $11;
    break;
   }
   $12 = ($index1|0)==(-1001000);
   if ($12) {
    $13 = ((($L)) + 12|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = ((($14)) + 40|0);
    $$0$i = $15;
    break;
   }
   $16 = (-1001000 - ($index1))|0;
   $17 = HEAP32[$1>>2]|0;
   $18 = ((($17)) + 8|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = ($19|0)==(22);
   if ($20) {
    $$0$i = 24;
   } else {
    $21 = HEAP32[$17>>2]|0;
    $22 = ((($21)) + 6|0);
    $23 = HEAP8[$22>>0]|0;
    $24 = $23&255;
    $25 = ($16|0)>($24|0);
    $26 = (($16) + -1)|0;
    $27 = (((($21)) + 16|0) + ($26<<4)|0);
    $28 = $25 ? 24 : $27;
    $$0$i = $28;
   }
  }
 } while(0);
 $29 = ($index2|0)>(0);
 do {
  if ($29) {
   $30 = HEAP32[$1>>2]|0;
   $31 = (($30) + ($index2<<4)|0);
   $32 = ((($L)) + 8|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = ($31>>>0)<($33>>>0);
   $$luaO_nilobject_$i2 = $34 ? $31 : 24;
   $$0$i3 = $$luaO_nilobject_$i2;
  } else {
   $35 = ($index2|0)<(-1000999);
   if (!($35)) {
    $36 = ((($L)) + 8|0);
    $37 = HEAP32[$36>>2]|0;
    $38 = (($37) + ($index2<<4)|0);
    $$0$i3 = $38;
    break;
   }
   $39 = ($index2|0)==(-1001000);
   if ($39) {
    $40 = ((($L)) + 12|0);
    $41 = HEAP32[$40>>2]|0;
    $42 = ((($41)) + 40|0);
    $$0$i3 = $42;
    break;
   }
   $43 = (-1001000 - ($index2))|0;
   $44 = HEAP32[$1>>2]|0;
   $45 = ((($44)) + 8|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = ($46|0)==(22);
   if ($47) {
    $i$0 = 0;
    return ($i$0|0);
   } else {
    $48 = HEAP32[$44>>2]|0;
    $49 = ((($48)) + 6|0);
    $50 = HEAP8[$49>>0]|0;
    $51 = $50&255;
    $52 = ($43|0)>($51|0);
    $53 = (($43) + -1)|0;
    $54 = (((($48)) + 16|0) + ($53<<4)|0);
    $55 = $52 ? 24 : $54;
    $$0$i3 = $55;
    break;
   }
  }
 } while(0);
 $56 = ($$0$i|0)!=(24|0);
 $57 = ($$0$i3|0)!=(24|0);
 $or$cond = $56 & $57;
 if (!($or$cond)) {
  $i$0 = 0;
  return ($i$0|0);
 }
 switch ($op|0) {
 case 0:  {
  $58 = ((($$0$i)) + 8|0);
  $59 = HEAP32[$58>>2]|0;
  $60 = ((($$0$i3)) + 8|0);
  $61 = HEAP32[$60>>2]|0;
  $62 = ($59|0)==($61|0);
  if ($62) {
   $63 = (_luaV_equalobj_($L,$$0$i,$$0$i3)|0);
   $64 = ($63|0)!=(0);
   $66 = $64;
  } else {
   $66 = 0;
  }
  $65 = $66&1;
  $i$0 = $65;
  return ($i$0|0);
  break;
 }
 case 1:  {
  $67 = (_luaV_lessthan($L,$$0$i,$$0$i3)|0);
  $i$0 = $67;
  return ($i$0|0);
  break;
 }
 case 2:  {
  $68 = (_luaV_lessequal($L,$$0$i,$$0$i3)|0);
  $i$0 = $68;
  return ($i$0|0);
  break;
 }
 default: {
  $i$0 = 0;
  return ($i$0|0);
 }
 }
 return (0)|0;
}
function _lua_tonumberx($L,$idx,$isnum) {
 $L = $L|0;
 $idx = $idx|0;
 $isnum = $isnum|0;
 var $$0 = 0.0, $$0$i = 0, $$luaO_nilobject_$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $n = 0, $o$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $n = sp;
 $0 = ((($L)) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($idx|0)>(0);
 do {
  if ($2) {
   $3 = HEAP32[$1>>2]|0;
   $4 = (($3) + ($idx<<4)|0);
   $5 = ((($L)) + 8|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = ($4>>>0)<($6>>>0);
   $$luaO_nilobject_$i = $7 ? $4 : 24;
   $$0$i = $$luaO_nilobject_$i;
  } else {
   $8 = ($idx|0)<(-1000999);
   if (!($8)) {
    $9 = ((($L)) + 8|0);
    $10 = HEAP32[$9>>2]|0;
    $11 = (($10) + ($idx<<4)|0);
    $$0$i = $11;
    break;
   }
   $12 = ($idx|0)==(-1001000);
   if ($12) {
    $13 = ((($L)) + 12|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = ((($14)) + 40|0);
    $$0$i = $15;
    break;
   }
   $16 = (-1001000 - ($idx))|0;
   $17 = HEAP32[$1>>2]|0;
   $18 = ((($17)) + 8|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = ($19|0)==(22);
   if ($20) {
    $$0$i = 24;
   } else {
    $21 = HEAP32[$17>>2]|0;
    $22 = ((($21)) + 6|0);
    $23 = HEAP8[$22>>0]|0;
    $24 = $23&255;
    $25 = ($16|0)>($24|0);
    $26 = (($16) + -1)|0;
    $27 = (((($21)) + 16|0) + ($26<<4)|0);
    $28 = $25 ? 24 : $27;
    $$0$i = $28;
   }
  }
 } while(0);
 $29 = ((($$0$i)) + 8|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = ($30|0)==(3);
 if ($31) {
  $o$0 = $$0$i;
 } else {
  $32 = (_luaV_tonumber($$0$i,$n)|0);
  $33 = ($32|0)==(0|0);
  if ($33) {
   $36 = ($isnum|0)==(0|0);
   if ($36) {
    $$0 = 0.0;
    STACKTOP = sp;return (+$$0);
   }
   HEAP32[$isnum>>2] = 0;
   $$0 = 0.0;
   STACKTOP = sp;return (+$$0);
  } else {
   $o$0 = $32;
  }
 }
 $34 = ($isnum|0)==(0|0);
 if (!($34)) {
  HEAP32[$isnum>>2] = 1;
 }
 $35 = +HEAPF64[$o$0>>3];
 $$0 = $35;
 STACKTOP = sp;return (+$$0);
}
function _lua_tointegerx($L,$idx,$isnum) {
 $L = $L|0;
 $idx = $idx|0;
 $isnum = $isnum|0;
 var $$0 = 0, $$0$i = 0, $$luaO_nilobject_$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0.0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $n = 0, $o$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $n = sp;
 $0 = ((($L)) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($idx|0)>(0);
 do {
  if ($2) {
   $3 = HEAP32[$1>>2]|0;
   $4 = (($3) + ($idx<<4)|0);
   $5 = ((($L)) + 8|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = ($4>>>0)<($6>>>0);
   $$luaO_nilobject_$i = $7 ? $4 : 24;
   $$0$i = $$luaO_nilobject_$i;
  } else {
   $8 = ($idx|0)<(-1000999);
   if (!($8)) {
    $9 = ((($L)) + 8|0);
    $10 = HEAP32[$9>>2]|0;
    $11 = (($10) + ($idx<<4)|0);
    $$0$i = $11;
    break;
   }
   $12 = ($idx|0)==(-1001000);
   if ($12) {
    $13 = ((($L)) + 12|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = ((($14)) + 40|0);
    $$0$i = $15;
    break;
   }
   $16 = (-1001000 - ($idx))|0;
   $17 = HEAP32[$1>>2]|0;
   $18 = ((($17)) + 8|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = ($19|0)==(22);
   if ($20) {
    $$0$i = 24;
   } else {
    $21 = HEAP32[$17>>2]|0;
    $22 = ((($21)) + 6|0);
    $23 = HEAP8[$22>>0]|0;
    $24 = $23&255;
    $25 = ($16|0)>($24|0);
    $26 = (($16) + -1)|0;
    $27 = (((($21)) + 16|0) + ($26<<4)|0);
    $28 = $25 ? 24 : $27;
    $$0$i = $28;
   }
  }
 } while(0);
 $29 = ((($$0$i)) + 8|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = ($30|0)==(3);
 if ($31) {
  $o$0 = $$0$i;
 } else {
  $32 = (_luaV_tonumber($$0$i,$n)|0);
  $33 = ($32|0)==(0|0);
  if ($33) {
   $37 = ($isnum|0)==(0|0);
   if ($37) {
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
   HEAP32[$isnum>>2] = 0;
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  } else {
   $o$0 = $32;
  }
 }
 $34 = +HEAPF64[$o$0>>3];
 $35 = (~~(($34)));
 $36 = ($isnum|0)==(0|0);
 if ($36) {
  $$0 = $35;
  STACKTOP = sp;return ($$0|0);
 }
 HEAP32[$isnum>>2] = 1;
 $$0 = $35;
 STACKTOP = sp;return ($$0|0);
}
function _lua_tounsignedx($L,$idx,$isnum) {
 $L = $L|0;
 $idx = $idx|0;
 $isnum = $isnum|0;
 var $$0 = 0, $$0$i = 0, $$luaO_nilobject_$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0.0, $35 = 0.0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $n = 0, $o$0 = 0, $u$sroa$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $n = sp + 8|0;
 $u$sroa$0 = sp;
 $0 = ((($L)) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($idx|0)>(0);
 do {
  if ($2) {
   $3 = HEAP32[$1>>2]|0;
   $4 = (($3) + ($idx<<4)|0);
   $5 = ((($L)) + 8|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = ($4>>>0)<($6>>>0);
   $$luaO_nilobject_$i = $7 ? $4 : 24;
   $$0$i = $$luaO_nilobject_$i;
  } else {
   $8 = ($idx|0)<(-1000999);
   if (!($8)) {
    $9 = ((($L)) + 8|0);
    $10 = HEAP32[$9>>2]|0;
    $11 = (($10) + ($idx<<4)|0);
    $$0$i = $11;
    break;
   }
   $12 = ($idx|0)==(-1001000);
   if ($12) {
    $13 = ((($L)) + 12|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = ((($14)) + 40|0);
    $$0$i = $15;
    break;
   }
   $16 = (-1001000 - ($idx))|0;
   $17 = HEAP32[$1>>2]|0;
   $18 = ((($17)) + 8|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = ($19|0)==(22);
   if ($20) {
    $$0$i = 24;
   } else {
    $21 = HEAP32[$17>>2]|0;
    $22 = ((($21)) + 6|0);
    $23 = HEAP8[$22>>0]|0;
    $24 = $23&255;
    $25 = ($16|0)>($24|0);
    $26 = (($16) + -1)|0;
    $27 = (((($21)) + 16|0) + ($26<<4)|0);
    $28 = $25 ? 24 : $27;
    $$0$i = $28;
   }
  }
 } while(0);
 $29 = ((($$0$i)) + 8|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = ($30|0)==(3);
 if ($31) {
  $o$0 = $$0$i;
 } else {
  $32 = (_luaV_tonumber($$0$i,$n)|0);
  $33 = ($32|0)==(0|0);
  if ($33) {
   $38 = ($isnum|0)==(0|0);
   if ($38) {
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
   HEAP32[$isnum>>2] = 0;
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  } else {
   $o$0 = $32;
  }
 }
 $34 = +HEAPF64[$o$0>>3];
 $35 = $34 + 6755399441055744.0;
 HEAPF64[$u$sroa$0>>3] = $35;
 $36 = HEAP32[$u$sroa$0>>2]|0;
 $37 = ($isnum|0)==(0|0);
 if ($37) {
  $$0 = $36;
  STACKTOP = sp;return ($$0|0);
 }
 HEAP32[$isnum>>2] = 1;
 $$0 = $36;
 STACKTOP = sp;return ($$0|0);
}
function _lua_toboolean($L,$idx) {
 $L = $L|0;
 $idx = $idx|0;
 var $$0$i = 0, $$luaO_nilobject_$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = ((($L)) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($idx|0)>(0);
 do {
  if ($2) {
   $3 = HEAP32[$1>>2]|0;
   $4 = (($3) + ($idx<<4)|0);
   $5 = ((($L)) + 8|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = ($4>>>0)<($6>>>0);
   $$luaO_nilobject_$i = $7 ? $4 : 24;
   $$0$i = $$luaO_nilobject_$i;
  } else {
   $8 = ($idx|0)<(-1000999);
   if (!($8)) {
    $9 = ((($L)) + 8|0);
    $10 = HEAP32[$9>>2]|0;
    $11 = (($10) + ($idx<<4)|0);
    $$0$i = $11;
    break;
   }
   $12 = ($idx|0)==(-1001000);
   if ($12) {
    $13 = ((($L)) + 12|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = ((($14)) + 40|0);
    $$0$i = $15;
    break;
   }
   $16 = (-1001000 - ($idx))|0;
   $17 = HEAP32[$1>>2]|0;
   $18 = ((($17)) + 8|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = ($19|0)==(22);
   if ($20) {
    $$0$i = 24;
   } else {
    $21 = HEAP32[$17>>2]|0;
    $22 = ((($21)) + 6|0);
    $23 = HEAP8[$22>>0]|0;
    $24 = $23&255;
    $25 = ($16|0)>($24|0);
    $26 = (($16) + -1)|0;
    $27 = (((($21)) + 16|0) + ($26<<4)|0);
    $28 = $25 ? 24 : $27;
    $$0$i = $28;
   }
  }
 } while(0);
 $29 = ((($$0$i)) + 8|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = ($30|0)==(0);
 if ($31) {
  $35 = 0;
  $34 = $35&1;
  return ($34|0);
 }
 $32 = ($30|0)==(1);
 if (!($32)) {
  $35 = 1;
  $34 = $35&1;
  return ($34|0);
 }
 $33 = HEAP32[$$0$i>>2]|0;
 $phitmp = ($33|0)!=(0);
 $35 = $phitmp;
 $34 = $35&1;
 return ($34|0);
}
function _lua_tolstring($L,$idx,$len) {
 $L = $L|0;
 $idx = $idx|0;
 $len = $len|0;
 var $$0 = 0, $$0$i = 0, $$luaO_nilobject_$i = 0, $$luaO_nilobject_$i1 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $8 = 0, $9 = 0, $o$0 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = ((($L)) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($idx|0)>(0);
 do {
  if ($2) {
   $3 = HEAP32[$1>>2]|0;
   $4 = (($3) + ($idx<<4)|0);
   $5 = ((($L)) + 8|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = ($4>>>0)<($6>>>0);
   $$luaO_nilobject_$i = $7 ? $4 : 24;
   $$0$i = $$luaO_nilobject_$i;
  } else {
   $8 = ($idx|0)<(-1000999);
   if (!($8)) {
    $9 = ((($L)) + 8|0);
    $10 = HEAP32[$9>>2]|0;
    $11 = (($10) + ($idx<<4)|0);
    $$0$i = $11;
    break;
   }
   $12 = ($idx|0)==(-1001000);
   if ($12) {
    $13 = ((($L)) + 12|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = ((($14)) + 40|0);
    $$0$i = $15;
    break;
   }
   $16 = (-1001000 - ($idx))|0;
   $17 = HEAP32[$1>>2]|0;
   $18 = ((($17)) + 8|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = ($19|0)==(22);
   if ($20) {
    $$0$i = 24;
   } else {
    $21 = HEAP32[$17>>2]|0;
    $22 = ((($21)) + 6|0);
    $23 = HEAP8[$22>>0]|0;
    $24 = $23&255;
    $25 = ($16|0)>($24|0);
    $26 = (($16) + -1)|0;
    $27 = (((($21)) + 16|0) + ($26<<4)|0);
    $28 = $25 ? 24 : $27;
    $$0$i = $28;
   }
  }
 } while(0);
 $29 = ((($$0$i)) + 8|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = $30 & 15;
 $32 = ($31|0)==(4);
 do {
  if ($32) {
   $o$0 = $$0$i;
  } else {
   $33 = (_luaV_tostring($L,$$0$i)|0);
   $34 = ($33|0)==(0);
   if ($34) {
    $35 = ($len|0)==(0|0);
    if ($35) {
     $$0 = 0;
     return ($$0|0);
    }
    HEAP32[$len>>2] = 0;
    $$0 = 0;
    return ($$0|0);
   }
   $36 = ((($L)) + 12|0);
   $37 = HEAP32[$36>>2]|0;
   $38 = ((($37)) + 12|0);
   $39 = HEAP32[$38>>2]|0;
   $40 = ($39|0)>(0);
   if ($40) {
    _luaC_step($L);
   }
   $41 = HEAP32[$0>>2]|0;
   if ($2) {
    $42 = HEAP32[$41>>2]|0;
    $43 = (($42) + ($idx<<4)|0);
    $44 = ((($L)) + 8|0);
    $45 = HEAP32[$44>>2]|0;
    $46 = ($43>>>0)<($45>>>0);
    $$luaO_nilobject_$i1 = $46 ? $43 : 24;
    $o$0 = $$luaO_nilobject_$i1;
    break;
   }
   $47 = ($idx|0)<(-1000999);
   if (!($47)) {
    $48 = ((($L)) + 8|0);
    $49 = HEAP32[$48>>2]|0;
    $50 = (($49) + ($idx<<4)|0);
    $o$0 = $50;
    break;
   }
   $51 = ($idx|0)==(-1001000);
   if ($51) {
    $52 = HEAP32[$36>>2]|0;
    $53 = ((($52)) + 40|0);
    $o$0 = $53;
    break;
   }
   $54 = (-1001000 - ($idx))|0;
   $55 = HEAP32[$41>>2]|0;
   $56 = ((($55)) + 8|0);
   $57 = HEAP32[$56>>2]|0;
   $58 = ($57|0)==(22);
   if ($58) {
    $o$0 = 24;
   } else {
    $59 = HEAP32[$55>>2]|0;
    $60 = ((($59)) + 6|0);
    $61 = HEAP8[$60>>0]|0;
    $62 = $61&255;
    $63 = ($54|0)>($62|0);
    $64 = (($54) + -1)|0;
    $65 = (((($59)) + 16|0) + ($64<<4)|0);
    $66 = $63 ? 24 : $65;
    $o$0 = $66;
   }
  }
 } while(0);
 $67 = ($len|0)==(0|0);
 if ($67) {
  $$pre = HEAP32[$o$0>>2]|0;
  $72 = $$pre;
 } else {
  $68 = HEAP32[$o$0>>2]|0;
  $69 = ((($68)) + 12|0);
  $70 = HEAP32[$69>>2]|0;
  HEAP32[$len>>2] = $70;
  $72 = $68;
 }
 $71 = ((($72)) + 16|0);
 $$0 = $71;
 return ($$0|0);
}
function _lua_rawlen($L,$idx) {
 $L = $L|0;
 $idx = $idx|0;
 var $$0 = 0, $$0$i = 0, $$luaO_nilobject_$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($L)) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($idx|0)>(0);
 do {
  if ($2) {
   $3 = HEAP32[$1>>2]|0;
   $4 = (($3) + ($idx<<4)|0);
   $5 = ((($L)) + 8|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = ($4>>>0)<($6>>>0);
   $$luaO_nilobject_$i = $7 ? $4 : 24;
   $$0$i = $$luaO_nilobject_$i;
  } else {
   $8 = ($idx|0)<(-1000999);
   if (!($8)) {
    $9 = ((($L)) + 8|0);
    $10 = HEAP32[$9>>2]|0;
    $11 = (($10) + ($idx<<4)|0);
    $$0$i = $11;
    break;
   }
   $12 = ($idx|0)==(-1001000);
   if ($12) {
    $13 = ((($L)) + 12|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = ((($14)) + 40|0);
    $$0$i = $15;
    break;
   }
   $16 = (-1001000 - ($idx))|0;
   $17 = HEAP32[$1>>2]|0;
   $18 = ((($17)) + 8|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = ($19|0)==(22);
   if ($20) {
    $$0$i = 24;
   } else {
    $21 = HEAP32[$17>>2]|0;
    $22 = ((($21)) + 6|0);
    $23 = HEAP8[$22>>0]|0;
    $24 = $23&255;
    $25 = ($16|0)>($24|0);
    $26 = (($16) + -1)|0;
    $27 = (((($21)) + 16|0) + ($26<<4)|0);
    $28 = $25 ? 24 : $27;
    $$0$i = $28;
   }
  }
 } while(0);
 $29 = ((($$0$i)) + 8|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = $30 & 15;
 switch ($31|0) {
 case 4:  {
  $32 = HEAP32[$$0$i>>2]|0;
  $33 = ((($32)) + 12|0);
  $34 = HEAP32[$33>>2]|0;
  $$0 = $34;
  return ($$0|0);
  break;
 }
 case 7:  {
  $35 = HEAP32[$$0$i>>2]|0;
  $36 = ((($35)) + 16|0);
  $37 = HEAP32[$36>>2]|0;
  $$0 = $37;
  return ($$0|0);
  break;
 }
 case 5:  {
  $38 = HEAP32[$$0$i>>2]|0;
  $39 = (_luaH_getn($38)|0);
  $$0 = $39;
  return ($$0|0);
  break;
 }
 default: {
  $$0 = 0;
  return ($$0|0);
 }
 }
 return (0)|0;
}
function _lua_touserdata($L,$idx) {
 $L = $L|0;
 $idx = $idx|0;
 var $$0 = 0, $$0$i = 0, $$luaO_nilobject_$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($L)) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($idx|0)>(0);
 do {
  if ($2) {
   $3 = HEAP32[$1>>2]|0;
   $4 = (($3) + ($idx<<4)|0);
   $5 = ((($L)) + 8|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = ($4>>>0)<($6>>>0);
   $$luaO_nilobject_$i = $7 ? $4 : 24;
   $$0$i = $$luaO_nilobject_$i;
  } else {
   $8 = ($idx|0)<(-1000999);
   if (!($8)) {
    $9 = ((($L)) + 8|0);
    $10 = HEAP32[$9>>2]|0;
    $11 = (($10) + ($idx<<4)|0);
    $$0$i = $11;
    break;
   }
   $12 = ($idx|0)==(-1001000);
   if ($12) {
    $13 = ((($L)) + 12|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = ((($14)) + 40|0);
    $$0$i = $15;
    break;
   }
   $16 = (-1001000 - ($idx))|0;
   $17 = HEAP32[$1>>2]|0;
   $18 = ((($17)) + 8|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = ($19|0)==(22);
   if ($20) {
    $$0$i = 24;
   } else {
    $21 = HEAP32[$17>>2]|0;
    $22 = ((($21)) + 6|0);
    $23 = HEAP8[$22>>0]|0;
    $24 = $23&255;
    $25 = ($16|0)>($24|0);
    $26 = (($16) + -1)|0;
    $27 = (((($21)) + 16|0) + ($26<<4)|0);
    $28 = $25 ? 24 : $27;
    $$0$i = $28;
   }
  }
 } while(0);
 $29 = ((($$0$i)) + 8|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = $30 & 15;
 switch ($31|0) {
 case 7:  {
  $32 = HEAP32[$$0$i>>2]|0;
  $33 = ((($32)) + 24|0);
  $$0 = $33;
  return ($$0|0);
  break;
 }
 case 2:  {
  $34 = HEAP32[$$0$i>>2]|0;
  $$0 = $34;
  return ($$0|0);
  break;
 }
 default: {
  $$0 = 0;
  return ($$0|0);
 }
 }
 return (0)|0;
}
function _lua_tothread($L,$idx) {
 $L = $L|0;
 $idx = $idx|0;
 var $$0$i = 0, $$luaO_nilobject_$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($L)) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($idx|0)>(0);
 do {
  if ($2) {
   $3 = HEAP32[$1>>2]|0;
   $4 = (($3) + ($idx<<4)|0);
   $5 = ((($L)) + 8|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = ($4>>>0)<($6>>>0);
   $$luaO_nilobject_$i = $7 ? $4 : 24;
   $$0$i = $$luaO_nilobject_$i;
  } else {
   $8 = ($idx|0)<(-1000999);
   if (!($8)) {
    $9 = ((($L)) + 8|0);
    $10 = HEAP32[$9>>2]|0;
    $11 = (($10) + ($idx<<4)|0);
    $$0$i = $11;
    break;
   }
   $12 = ($idx|0)==(-1001000);
   if ($12) {
    $13 = ((($L)) + 12|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = ((($14)) + 40|0);
    $$0$i = $15;
    break;
   }
   $16 = (-1001000 - ($idx))|0;
   $17 = HEAP32[$1>>2]|0;
   $18 = ((($17)) + 8|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = ($19|0)==(22);
   if ($20) {
    $$0$i = 24;
   } else {
    $21 = HEAP32[$17>>2]|0;
    $22 = ((($21)) + 6|0);
    $23 = HEAP8[$22>>0]|0;
    $24 = $23&255;
    $25 = ($16|0)>($24|0);
    $26 = (($16) + -1)|0;
    $27 = (((($21)) + 16|0) + ($26<<4)|0);
    $28 = $25 ? 24 : $27;
    $$0$i = $28;
   }
  }
 } while(0);
 $29 = ((($$0$i)) + 8|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = ($30|0)==(72);
 if (!($31)) {
  $33 = 0;
  return ($33|0);
 }
 $32 = HEAP32[$$0$i>>2]|0;
 $33 = $32;
 return ($33|0);
}
function _lua_topointer($L,$idx) {
 $L = $L|0;
 $idx = $idx|0;
 var $$0 = 0, $$0$i = 0, $$0$i$i = 0, $$luaO_nilobject_$i = 0, $$luaO_nilobject_$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($L)) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($idx|0)>(0);
 do {
  if ($2) {
   $3 = HEAP32[$1>>2]|0;
   $4 = (($3) + ($idx<<4)|0);
   $5 = ((($L)) + 8|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = ($4>>>0)<($6>>>0);
   $$luaO_nilobject_$i = $7 ? $4 : 24;
   $$0$i = $$luaO_nilobject_$i;
  } else {
   $8 = ($idx|0)<(-1000999);
   if (!($8)) {
    $9 = ((($L)) + 8|0);
    $10 = HEAP32[$9>>2]|0;
    $11 = (($10) + ($idx<<4)|0);
    $$0$i = $11;
    break;
   }
   $12 = ($idx|0)==(-1001000);
   if ($12) {
    $13 = ((($L)) + 12|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = ((($14)) + 40|0);
    $$0$i = $15;
    break;
   }
   $16 = (-1001000 - ($idx))|0;
   $17 = HEAP32[$1>>2]|0;
   $18 = ((($17)) + 8|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = ($19|0)==(22);
   if ($20) {
    $$0$i = 24;
   } else {
    $21 = HEAP32[$17>>2]|0;
    $22 = ((($21)) + 6|0);
    $23 = HEAP8[$22>>0]|0;
    $24 = $23&255;
    $25 = ($16|0)>($24|0);
    $26 = (($16) + -1)|0;
    $27 = (((($21)) + 16|0) + ($26<<4)|0);
    $28 = $25 ? 24 : $27;
    $$0$i = $28;
   }
  }
 } while(0);
 $29 = ((($$0$i)) + 8|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = $30 & 63;
 switch ($31|0) {
 case 5:  {
  $32 = HEAP32[$$0$i>>2]|0;
  $$0 = $32;
  return ($$0|0);
  break;
 }
 case 6:  {
  $33 = HEAP32[$$0$i>>2]|0;
  $$0 = $33;
  return ($$0|0);
  break;
 }
 case 38:  {
  $34 = HEAP32[$$0$i>>2]|0;
  $$0 = $34;
  return ($$0|0);
  break;
 }
 case 22:  {
  $35 = HEAP32[$$0$i>>2]|0;
  $$0 = $35;
  return ($$0|0);
  break;
 }
 case 8:  {
  $36 = HEAP32[$$0$i>>2]|0;
  $$0 = $36;
  return ($$0|0);
  break;
 }
 case 2: case 7:  {
  do {
   if ($2) {
    $37 = HEAP32[$1>>2]|0;
    $38 = (($37) + ($idx<<4)|0);
    $39 = ((($L)) + 8|0);
    $40 = HEAP32[$39>>2]|0;
    $41 = ($38>>>0)<($40>>>0);
    $$luaO_nilobject_$i$i = $41 ? $38 : 24;
    $$0$i$i = $$luaO_nilobject_$i$i;
   } else {
    $42 = ($idx|0)<(-1000999);
    if (!($42)) {
     $43 = ((($L)) + 8|0);
     $44 = HEAP32[$43>>2]|0;
     $45 = (($44) + ($idx<<4)|0);
     $$0$i$i = $45;
     break;
    }
    $46 = ($idx|0)==(-1001000);
    if ($46) {
     $47 = ((($L)) + 12|0);
     $48 = HEAP32[$47>>2]|0;
     $49 = ((($48)) + 40|0);
     $$0$i$i = $49;
     break;
    }
    $50 = (-1001000 - ($idx))|0;
    $51 = HEAP32[$1>>2]|0;
    $52 = ((($51)) + 8|0);
    $53 = HEAP32[$52>>2]|0;
    $54 = ($53|0)==(22);
    if ($54) {
     $$0$i$i = 24;
    } else {
     $55 = HEAP32[$51>>2]|0;
     $56 = ((($55)) + 6|0);
     $57 = HEAP8[$56>>0]|0;
     $58 = $57&255;
     $59 = ($50|0)>($58|0);
     $60 = (($50) + -1)|0;
     $61 = (((($55)) + 16|0) + ($60<<4)|0);
     $62 = $59 ? 24 : $61;
     $$0$i$i = $62;
    }
   }
  } while(0);
  $63 = ((($$0$i$i)) + 8|0);
  $64 = HEAP32[$63>>2]|0;
  $65 = $64 & 15;
  switch ($65|0) {
  case 7:  {
   $66 = HEAP32[$$0$i$i>>2]|0;
   $67 = ((($66)) + 24|0);
   $$0 = $67;
   return ($$0|0);
   break;
  }
  case 2:  {
   $68 = HEAP32[$$0$i$i>>2]|0;
   $$0 = $68;
   return ($$0|0);
   break;
  }
  default: {
   $$0 = 0;
   return ($$0|0);
  }
  }
  break;
 }
 default: {
  $$0 = 0;
  return ($$0|0);
 }
 }
 return (0)|0;
}
function _lua_pushnil($L) {
 $L = $L|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($L)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 8|0);
 HEAP32[$2>>2] = 0;
 $3 = ((($1)) + 16|0);
 HEAP32[$0>>2] = $3;
 return;
}
function _lua_pushnumber($L,$n) {
 $L = $L|0;
 $n = +$n;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($L)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 HEAPF64[$1>>3] = $n;
 $2 = ((($1)) + 8|0);
 HEAP32[$2>>2] = 3;
 $3 = ((($1)) + 16|0);
 HEAP32[$0>>2] = $3;
 return;
}
function _lua_pushinteger($L,$n) {
 $L = $L|0;
 $n = $n|0;
 var $0 = 0, $1 = 0, $2 = 0.0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($L)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (+($n|0));
 HEAPF64[$1>>3] = $2;
 $3 = ((($1)) + 8|0);
 HEAP32[$3>>2] = 3;
 $4 = ((($1)) + 16|0);
 HEAP32[$0>>2] = $4;
 return;
}
function _lua_pushunsigned($L,$u) {
 $L = $L|0;
 $u = $u|0;
 var $0 = 0, $1 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($u|0)>(-1);
 $1 = (+($u|0));
 $2 = (+($u>>>0));
 $3 = $0 ? $1 : $2;
 $4 = ((($L)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 HEAPF64[$5>>3] = $3;
 $6 = ((($5)) + 8|0);
 HEAP32[$6>>2] = 3;
 $7 = ((($5)) + 16|0);
 HEAP32[$4>>2] = $7;
 return;
}
function _lua_pushlstring($L,$s,$len) {
 $L = $L|0;
 $s = $s|0;
 $len = $len|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($L)) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)>(0);
 if ($4) {
  _luaC_step($L);
 }
 $5 = (_luaS_newlstr($L,$s,$len)|0);
 $6 = ((($L)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 HEAP32[$7>>2] = $5;
 $8 = ((($5)) + 4|0);
 $9 = HEAP8[$8>>0]|0;
 $10 = $9&255;
 $11 = $10 | 64;
 $12 = ((($7)) + 8|0);
 HEAP32[$12>>2] = $11;
 $13 = HEAP32[$6>>2]|0;
 $14 = ((($13)) + 16|0);
 HEAP32[$6>>2] = $14;
 $15 = ((($5)) + 16|0);
 return ($15|0);
}
function _lua_pushstring($L,$s) {
 $L = $L|0;
 $s = $s|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($s|0)==(0|0);
 if ($0) {
  $1 = ((($L)) + 8|0);
  $2 = HEAP32[$1>>2]|0;
  $3 = ((($2)) + 8|0);
  HEAP32[$3>>2] = 0;
  $4 = ((($2)) + 16|0);
  HEAP32[$1>>2] = $4;
  $$0 = 0;
  return ($$0|0);
 }
 $5 = ((($L)) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($6)) + 12|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)>(0);
 if ($9) {
  _luaC_step($L);
 }
 $10 = (_luaS_new($L,$s)|0);
 $11 = ((($L)) + 8|0);
 $12 = HEAP32[$11>>2]|0;
 HEAP32[$12>>2] = $10;
 $13 = ((($10)) + 4|0);
 $14 = HEAP8[$13>>0]|0;
 $15 = $14&255;
 $16 = $15 | 64;
 $17 = ((($12)) + 8|0);
 HEAP32[$17>>2] = $16;
 $18 = HEAP32[$11>>2]|0;
 $19 = ((($18)) + 16|0);
 HEAP32[$11>>2] = $19;
 $20 = ((($10)) + 16|0);
 $$0 = $20;
 return ($$0|0);
}
function _lua_pushvfstring($L,$fmt,$argp) {
 $L = $L|0;
 $fmt = $fmt|0;
 $argp = $argp|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($L)) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)>(0);
 if ($4) {
  _luaC_step($L);
 }
 $5 = (_luaO_pushvfstring($L,$fmt,$argp)|0);
 return ($5|0);
}
function _lua_pushfstring($L,$fmt,$varargs) {
 $L = $L|0;
 $fmt = $fmt|0;
 $varargs = $varargs|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $argp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $argp = sp;
 $0 = ((($L)) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)>(0);
 if ($4) {
  _luaC_step($L);
 }
 HEAP32[$argp>>2] = $varargs;
 $5 = (_luaO_pushvfstring($L,$fmt,$argp)|0);
 STACKTOP = sp;return ($5|0);
}
function _lua_pushcclosure($L,$fn,$n) {
 $L = $L|0;
 $fn = $fn|0;
 $n = $n|0;
 var $$in = 0, $$lcssa = 0, $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n|0)==(0);
 if ($0) {
  $1 = ((($L)) + 8|0);
  $2 = HEAP32[$1>>2]|0;
  HEAP32[$2>>2] = $fn;
  $3 = ((($2)) + 8|0);
  HEAP32[$3>>2] = 22;
  $$pre$phiZ2D = $1;
  $35 = HEAP32[$$pre$phiZ2D>>2]|0;
  $36 = ((($35)) + 16|0);
  HEAP32[$$pre$phiZ2D>>2] = $36;
  return;
 }
 $4 = ((($L)) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($5)) + 12|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)>(0);
 if ($8) {
  _luaC_step($L);
 }
 $9 = (_luaF_newCclosure($L,$n)|0);
 $10 = ((($9)) + 12|0);
 HEAP32[$10>>2] = $fn;
 $11 = ((($L)) + 8|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (0 - ($n))|0;
 $14 = (($12) + ($13<<4)|0);
 HEAP32[$11>>2] = $14;
 $$in = $n;$17 = $14;
 while(1) {
  $15 = (($$in) + -1)|0;
  $16 = (($17) + ($15<<4)|0);
  $18 = (((($9)) + 16|0) + ($15<<4)|0);
  $19 = $16;
  $20 = $19;
  $21 = HEAP32[$20>>2]|0;
  $22 = (($19) + 4)|0;
  $23 = $22;
  $24 = HEAP32[$23>>2]|0;
  $25 = $18;
  $26 = $25;
  HEAP32[$26>>2] = $21;
  $27 = (($25) + 4)|0;
  $28 = $27;
  HEAP32[$28>>2] = $24;
  $29 = (((($17) + ($15<<4)|0)) + 8|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = (((((($9)) + 16|0) + ($15<<4)|0)) + 8|0);
  HEAP32[$31>>2] = $30;
  $32 = ($15|0)==(0);
  $33 = HEAP32[$11>>2]|0;
  if ($32) {
   $$lcssa = $33;
   break;
  } else {
   $$in = $15;$17 = $33;
  }
 }
 HEAP32[$$lcssa>>2] = $9;
 $34 = ((($$lcssa)) + 8|0);
 HEAP32[$34>>2] = 102;
 $$pre$phiZ2D = $11;
 $35 = HEAP32[$$pre$phiZ2D>>2]|0;
 $36 = ((($35)) + 16|0);
 HEAP32[$$pre$phiZ2D>>2] = $36;
 return;
}
function _lua_pushboolean($L,$b) {
 $L = $L|0;
 $b = $b|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($L)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($b|0)!=(0);
 $3 = $2&1;
 HEAP32[$1>>2] = $3;
 $4 = ((($1)) + 8|0);
 HEAP32[$4>>2] = 1;
 $5 = ((($1)) + 16|0);
 HEAP32[$0>>2] = $5;
 return;
}
function _lua_pushlightuserdata($L,$p) {
 $L = $L|0;
 $p = $p|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($L)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 HEAP32[$1>>2] = $p;
 $2 = ((($1)) + 8|0);
 HEAP32[$2>>2] = 2;
 $3 = HEAP32[$0>>2]|0;
 $4 = ((($3)) + 16|0);
 HEAP32[$0>>2] = $4;
 return;
}
function _lua_pushthread($L) {
 $L = $L|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($L)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 HEAP32[$1>>2] = $L;
 $2 = ((($1)) + 8|0);
 HEAP32[$2>>2] = 72;
 $3 = HEAP32[$0>>2]|0;
 $4 = ((($3)) + 16|0);
 HEAP32[$0>>2] = $4;
 $5 = ((($L)) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($6)) + 172|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==($L|0);
 $10 = $9&1;
 return ($10|0);
}
function _lua_getglobal($L,$var) {
 $L = $L|0;
 $var = $var|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($L)) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 40|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (_luaH_getint($3,2)|0);
 $5 = ((($L)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($6)) + 16|0);
 HEAP32[$5>>2] = $7;
 $8 = (_luaS_new($L,$var)|0);
 HEAP32[$6>>2] = $8;
 $9 = ((($8)) + 4|0);
 $10 = HEAP8[$9>>0]|0;
 $11 = $10&255;
 $12 = $11 | 64;
 $13 = ((($6)) + 8|0);
 HEAP32[$13>>2] = $12;
 $14 = HEAP32[$5>>2]|0;
 $15 = ((($14)) + -16|0);
 _luaV_gettable($L,$4,$15,$15);
 return;
}
function _lua_gettable($L,$idx) {
 $L = $L|0;
 $idx = $idx|0;
 var $$0$i = 0, $$luaO_nilobject_$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($L)) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($idx|0)>(0);
 do {
  if ($2) {
   $3 = HEAP32[$1>>2]|0;
   $4 = (($3) + ($idx<<4)|0);
   $5 = ((($L)) + 8|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = ($4>>>0)<($6>>>0);
   $$luaO_nilobject_$i = $7 ? $4 : 24;
   $$0$i = $$luaO_nilobject_$i;
  } else {
   $8 = ($idx|0)<(-1000999);
   if (!($8)) {
    $9 = ((($L)) + 8|0);
    $10 = HEAP32[$9>>2]|0;
    $11 = (($10) + ($idx<<4)|0);
    $$0$i = $11;
    break;
   }
   $12 = ($idx|0)==(-1001000);
   if ($12) {
    $13 = ((($L)) + 12|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = ((($14)) + 40|0);
    $$0$i = $15;
    break;
   }
   $16 = (-1001000 - ($idx))|0;
   $17 = HEAP32[$1>>2]|0;
   $18 = ((($17)) + 8|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = ($19|0)==(22);
   if ($20) {
    $$0$i = 24;
   } else {
    $21 = HEAP32[$17>>2]|0;
    $22 = ((($21)) + 6|0);
    $23 = HEAP8[$22>>0]|0;
    $24 = $23&255;
    $25 = ($16|0)>($24|0);
    $26 = (($16) + -1)|0;
    $27 = (((($21)) + 16|0) + ($26<<4)|0);
    $28 = $25 ? 24 : $27;
    $$0$i = $28;
   }
  }
 } while(0);
 $29 = ((($L)) + 8|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = ((($30)) + -16|0);
 _luaV_gettable($L,$$0$i,$31,$31);
 return;
}
function _lua_getfield($L,$idx,$k) {
 $L = $L|0;
 $idx = $idx|0;
 $k = $k|0;
 var $$0$i = 0, $$luaO_nilobject_$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($L)) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($idx|0)>(0);
 do {
  if ($2) {
   $3 = HEAP32[$1>>2]|0;
   $4 = (($3) + ($idx<<4)|0);
   $5 = ((($L)) + 8|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = ($4>>>0)<($6>>>0);
   $$luaO_nilobject_$i = $7 ? $4 : 24;
   $$0$i = $$luaO_nilobject_$i;
  } else {
   $8 = ($idx|0)<(-1000999);
   if (!($8)) {
    $9 = ((($L)) + 8|0);
    $10 = HEAP32[$9>>2]|0;
    $11 = (($10) + ($idx<<4)|0);
    $$0$i = $11;
    break;
   }
   $12 = ($idx|0)==(-1001000);
   if ($12) {
    $13 = ((($L)) + 12|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = ((($14)) + 40|0);
    $$0$i = $15;
    break;
   }
   $16 = (-1001000 - ($idx))|0;
   $17 = HEAP32[$1>>2]|0;
   $18 = ((($17)) + 8|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = ($19|0)==(22);
   if ($20) {
    $$0$i = 24;
   } else {
    $21 = HEAP32[$17>>2]|0;
    $22 = ((($21)) + 6|0);
    $23 = HEAP8[$22>>0]|0;
    $24 = $23&255;
    $25 = ($16|0)>($24|0);
    $26 = (($16) + -1)|0;
    $27 = (((($21)) + 16|0) + ($26<<4)|0);
    $28 = $25 ? 24 : $27;
    $$0$i = $28;
   }
  }
 } while(0);
 $29 = ((($L)) + 8|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = (_luaS_new($L,$k)|0);
 HEAP32[$30>>2] = $31;
 $32 = ((($31)) + 4|0);
 $33 = HEAP8[$32>>0]|0;
 $34 = $33&255;
 $35 = $34 | 64;
 $36 = ((($30)) + 8|0);
 HEAP32[$36>>2] = $35;
 $37 = HEAP32[$29>>2]|0;
 $38 = ((($37)) + 16|0);
 HEAP32[$29>>2] = $38;
 _luaV_gettable($L,$$0$i,$37,$37);
 return;
}
function _lua_rawget($L,$idx) {
 $L = $L|0;
 $idx = $idx|0;
 var $$0$i = 0, $$luaO_nilobject_$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($L)) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($idx|0)>(0);
 do {
  if ($2) {
   $3 = HEAP32[$1>>2]|0;
   $4 = (($3) + ($idx<<4)|0);
   $5 = ((($L)) + 8|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = ($4>>>0)<($6>>>0);
   $$luaO_nilobject_$i = $7 ? $4 : 24;
   $$0$i = $$luaO_nilobject_$i;
  } else {
   $8 = ($idx|0)<(-1000999);
   if (!($8)) {
    $9 = ((($L)) + 8|0);
    $10 = HEAP32[$9>>2]|0;
    $11 = (($10) + ($idx<<4)|0);
    $$0$i = $11;
    break;
   }
   $12 = ($idx|0)==(-1001000);
   if ($12) {
    $13 = ((($L)) + 12|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = ((($14)) + 40|0);
    $$0$i = $15;
    break;
   }
   $16 = (-1001000 - ($idx))|0;
   $17 = HEAP32[$1>>2]|0;
   $18 = ((($17)) + 8|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = ($19|0)==(22);
   if ($20) {
    $$0$i = 24;
   } else {
    $21 = HEAP32[$17>>2]|0;
    $22 = ((($21)) + 6|0);
    $23 = HEAP8[$22>>0]|0;
    $24 = $23&255;
    $25 = ($16|0)>($24|0);
    $26 = (($16) + -1)|0;
    $27 = (((($21)) + 16|0) + ($26<<4)|0);
    $28 = $25 ? 24 : $27;
    $$0$i = $28;
   }
  }
 } while(0);
 $29 = HEAP32[$$0$i>>2]|0;
 $30 = ((($L)) + 8|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = ((($31)) + -16|0);
 $33 = (_luaH_get($29,$32)|0);
 $34 = HEAP32[$30>>2]|0;
 $35 = ((($34)) + -16|0);
 $36 = $33;
 $37 = $36;
 $38 = HEAP32[$37>>2]|0;
 $39 = (($36) + 4)|0;
 $40 = $39;
 $41 = HEAP32[$40>>2]|0;
 $42 = $35;
 $43 = $42;
 HEAP32[$43>>2] = $38;
 $44 = (($42) + 4)|0;
 $45 = $44;
 HEAP32[$45>>2] = $41;
 $46 = ((($33)) + 8|0);
 $47 = HEAP32[$46>>2]|0;
 $48 = ((($34)) + -8|0);
 HEAP32[$48>>2] = $47;
 return;
}
function _lua_rawgeti($L,$idx,$n) {
 $L = $L|0;
 $idx = $idx|0;
 $n = $n|0;
 var $$0$i = 0, $$luaO_nilobject_$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($L)) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($idx|0)>(0);
 do {
  if ($2) {
   $3 = HEAP32[$1>>2]|0;
   $4 = (($3) + ($idx<<4)|0);
   $5 = ((($L)) + 8|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = ($4>>>0)<($6>>>0);
   $$luaO_nilobject_$i = $7 ? $4 : 24;
   $$0$i = $$luaO_nilobject_$i;
  } else {
   $8 = ($idx|0)<(-1000999);
   if (!($8)) {
    $9 = ((($L)) + 8|0);
    $10 = HEAP32[$9>>2]|0;
    $11 = (($10) + ($idx<<4)|0);
    $$0$i = $11;
    break;
   }
   $12 = ($idx|0)==(-1001000);
   if ($12) {
    $13 = ((($L)) + 12|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = ((($14)) + 40|0);
    $$0$i = $15;
    break;
   }
   $16 = (-1001000 - ($idx))|0;
   $17 = HEAP32[$1>>2]|0;
   $18 = ((($17)) + 8|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = ($19|0)==(22);
   if ($20) {
    $$0$i = 24;
   } else {
    $21 = HEAP32[$17>>2]|0;
    $22 = ((($21)) + 6|0);
    $23 = HEAP8[$22>>0]|0;
    $24 = $23&255;
    $25 = ($16|0)>($24|0);
    $26 = (($16) + -1)|0;
    $27 = (((($21)) + 16|0) + ($26<<4)|0);
    $28 = $25 ? 24 : $27;
    $$0$i = $28;
   }
  }
 } while(0);
 $29 = HEAP32[$$0$i>>2]|0;
 $30 = (_luaH_getint($29,$n)|0);
 $31 = ((($L)) + 8|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = $30;
 $34 = $33;
 $35 = HEAP32[$34>>2]|0;
 $36 = (($33) + 4)|0;
 $37 = $36;
 $38 = HEAP32[$37>>2]|0;
 $39 = $32;
 $40 = $39;
 HEAP32[$40>>2] = $35;
 $41 = (($39) + 4)|0;
 $42 = $41;
 HEAP32[$42>>2] = $38;
 $43 = ((($30)) + 8|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = ((($32)) + 8|0);
 HEAP32[$45>>2] = $44;
 $46 = HEAP32[$31>>2]|0;
 $47 = ((($46)) + 16|0);
 HEAP32[$31>>2] = $47;
 return;
}
function _lua_createtable($L,$narray,$nrec) {
 $L = $L|0;
 $narray = $narray|0;
 $nrec = $nrec|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($L)) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)>(0);
 if ($4) {
  _luaC_step($L);
 }
 $5 = (_luaH_new($L)|0);
 $6 = ((($L)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 HEAP32[$7>>2] = $5;
 $8 = ((($7)) + 8|0);
 HEAP32[$8>>2] = 69;
 $9 = HEAP32[$6>>2]|0;
 $10 = ((($9)) + 16|0);
 HEAP32[$6>>2] = $10;
 $11 = ($narray|0)>(0);
 $12 = ($nrec|0)>(0);
 $or$cond = $11 | $12;
 if (!($or$cond)) {
  return;
 }
 _luaH_resize($L,$5,$narray,$nrec);
 return;
}
function _lua_getmetatable($L,$objindex) {
 $L = $L|0;
 $objindex = $objindex|0;
 var $$0$i = 0, $$luaO_nilobject_$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $mt$0 = 0, $mt$0$in = 0, $res$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($L)) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($objindex|0)>(0);
 do {
  if ($2) {
   $3 = HEAP32[$1>>2]|0;
   $4 = (($3) + ($objindex<<4)|0);
   $5 = ((($L)) + 8|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = ($4>>>0)<($6>>>0);
   $$luaO_nilobject_$i = $7 ? $4 : 24;
   $$0$i = $$luaO_nilobject_$i;
  } else {
   $8 = ($objindex|0)<(-1000999);
   if (!($8)) {
    $9 = ((($L)) + 8|0);
    $10 = HEAP32[$9>>2]|0;
    $11 = (($10) + ($objindex<<4)|0);
    $$0$i = $11;
    break;
   }
   $12 = ($objindex|0)==(-1001000);
   if ($12) {
    $13 = ((($L)) + 12|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = ((($14)) + 40|0);
    $$0$i = $15;
    break;
   }
   $16 = (-1001000 - ($objindex))|0;
   $17 = HEAP32[$1>>2]|0;
   $18 = ((($17)) + 8|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = ($19|0)==(22);
   if ($20) {
    $$0$i = 24;
   } else {
    $21 = HEAP32[$17>>2]|0;
    $22 = ((($21)) + 6|0);
    $23 = HEAP8[$22>>0]|0;
    $24 = $23&255;
    $25 = ($16|0)>($24|0);
    $26 = (($16) + -1)|0;
    $27 = (((($21)) + 16|0) + ($26<<4)|0);
    $28 = $25 ? 24 : $27;
    $$0$i = $28;
   }
  }
 } while(0);
 $29 = ((($$0$i)) + 8|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = $30 & 15;
 switch ($31|0) {
 case 5:  {
  $32 = HEAP32[$$0$i>>2]|0;
  $33 = ((($32)) + 8|0);
  $mt$0$in = $33;
  break;
 }
 case 7:  {
  $34 = HEAP32[$$0$i>>2]|0;
  $35 = ((($34)) + 8|0);
  $mt$0$in = $35;
  break;
 }
 default: {
  $36 = ((($L)) + 12|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = (((($37)) + 252|0) + ($31<<2)|0);
  $mt$0$in = $38;
 }
 }
 $mt$0 = HEAP32[$mt$0$in>>2]|0;
 $39 = ($mt$0|0)==(0|0);
 if ($39) {
  $res$0 = 0;
  return ($res$0|0);
 }
 $40 = ((($L)) + 8|0);
 $41 = HEAP32[$40>>2]|0;
 HEAP32[$41>>2] = $mt$0;
 $42 = ((($41)) + 8|0);
 HEAP32[$42>>2] = 69;
 $43 = HEAP32[$40>>2]|0;
 $44 = ((($43)) + 16|0);
 HEAP32[$40>>2] = $44;
 $res$0 = 1;
 return ($res$0|0);
}
function _lua_getuservalue($L,$idx) {
 $L = $L|0;
 $idx = $idx|0;
 var $$0$i = 0, $$luaO_nilobject_$i = 0, $$sink = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($L)) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($idx|0)>(0);
 do {
  if ($2) {
   $3 = HEAP32[$1>>2]|0;
   $4 = (($3) + ($idx<<4)|0);
   $5 = ((($L)) + 8|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = ($4>>>0)<($6>>>0);
   $$luaO_nilobject_$i = $7 ? $4 : 24;
   $$0$i = $$luaO_nilobject_$i;
  } else {
   $8 = ($idx|0)<(-1000999);
   if (!($8)) {
    $9 = ((($L)) + 8|0);
    $10 = HEAP32[$9>>2]|0;
    $11 = (($10) + ($idx<<4)|0);
    $$0$i = $11;
    break;
   }
   $12 = ($idx|0)==(-1001000);
   if ($12) {
    $13 = ((($L)) + 12|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = ((($14)) + 40|0);
    $$0$i = $15;
    break;
   }
   $16 = (-1001000 - ($idx))|0;
   $17 = HEAP32[$1>>2]|0;
   $18 = ((($17)) + 8|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = ($19|0)==(22);
   if ($20) {
    $$0$i = 24;
   } else {
    $21 = HEAP32[$17>>2]|0;
    $22 = ((($21)) + 6|0);
    $23 = HEAP8[$22>>0]|0;
    $24 = $23&255;
    $25 = ($16|0)>($24|0);
    $26 = (($16) + -1)|0;
    $27 = (((($21)) + 16|0) + ($26<<4)|0);
    $28 = $25 ? 24 : $27;
    $$0$i = $28;
   }
  }
 } while(0);
 $29 = HEAP32[$$0$i>>2]|0;
 $30 = ((($29)) + 12|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = ($31|0)==(0|0);
 $33 = ((($L)) + 8|0);
 $34 = HEAP32[$33>>2]|0;
 if ($32) {
  $$sink = 0;
  $35 = ((($34)) + 8|0);
  HEAP32[$35>>2] = $$sink;
  $36 = HEAP32[$33>>2]|0;
  $37 = ((($36)) + 16|0);
  HEAP32[$33>>2] = $37;
  return;
 }
 HEAP32[$34>>2] = $31;
 $$sink = 69;
 $35 = ((($34)) + 8|0);
 HEAP32[$35>>2] = $$sink;
 $36 = HEAP32[$33>>2]|0;
 $37 = ((($36)) + 16|0);
 HEAP32[$33>>2] = $37;
 return;
}
function _lua_setglobal($L,$var) {
 $L = $L|0;
 $var = $var|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = ((($L)) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 40|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (_luaH_getint($3,2)|0);
 $5 = ((($L)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($6)) + 16|0);
 HEAP32[$5>>2] = $7;
 $8 = (_luaS_new($L,$var)|0);
 HEAP32[$6>>2] = $8;
 $9 = ((($8)) + 4|0);
 $10 = HEAP8[$9>>0]|0;
 $11 = $10&255;
 $12 = $11 | 64;
 $13 = ((($6)) + 8|0);
 HEAP32[$13>>2] = $12;
 $14 = HEAP32[$5>>2]|0;
 $15 = ((($14)) + -16|0);
 $16 = ((($14)) + -32|0);
 _luaV_settable($L,$4,$15,$16);
 $17 = HEAP32[$5>>2]|0;
 $18 = ((($17)) + -32|0);
 HEAP32[$5>>2] = $18;
 return;
}
function _lua_settable($L,$idx) {
 $L = $L|0;
 $idx = $idx|0;
 var $$0$i = 0, $$luaO_nilobject_$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($L)) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($idx|0)>(0);
 do {
  if ($2) {
   $3 = HEAP32[$1>>2]|0;
   $4 = (($3) + ($idx<<4)|0);
   $5 = ((($L)) + 8|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = ($4>>>0)<($6>>>0);
   $$luaO_nilobject_$i = $7 ? $4 : 24;
   $$0$i = $$luaO_nilobject_$i;
  } else {
   $8 = ($idx|0)<(-1000999);
   if (!($8)) {
    $9 = ((($L)) + 8|0);
    $10 = HEAP32[$9>>2]|0;
    $11 = (($10) + ($idx<<4)|0);
    $$0$i = $11;
    break;
   }
   $12 = ($idx|0)==(-1001000);
   if ($12) {
    $13 = ((($L)) + 12|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = ((($14)) + 40|0);
    $$0$i = $15;
    break;
   }
   $16 = (-1001000 - ($idx))|0;
   $17 = HEAP32[$1>>2]|0;
   $18 = ((($17)) + 8|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = ($19|0)==(22);
   if ($20) {
    $$0$i = 24;
   } else {
    $21 = HEAP32[$17>>2]|0;
    $22 = ((($21)) + 6|0);
    $23 = HEAP8[$22>>0]|0;
    $24 = $23&255;
    $25 = ($16|0)>($24|0);
    $26 = (($16) + -1)|0;
    $27 = (((($21)) + 16|0) + ($26<<4)|0);
    $28 = $25 ? 24 : $27;
    $$0$i = $28;
   }
  }
 } while(0);
 $29 = ((($L)) + 8|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = ((($30)) + -32|0);
 $32 = ((($30)) + -16|0);
 _luaV_settable($L,$$0$i,$31,$32);
 $33 = HEAP32[$29>>2]|0;
 $34 = ((($33)) + -32|0);
 HEAP32[$29>>2] = $34;
 return;
}
function _lua_setfield($L,$idx,$k) {
 $L = $L|0;
 $idx = $idx|0;
 $k = $k|0;
 var $$0$i = 0, $$luaO_nilobject_$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($L)) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($idx|0)>(0);
 do {
  if ($2) {
   $3 = HEAP32[$1>>2]|0;
   $4 = (($3) + ($idx<<4)|0);
   $5 = ((($L)) + 8|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = ($4>>>0)<($6>>>0);
   $$luaO_nilobject_$i = $7 ? $4 : 24;
   $$0$i = $$luaO_nilobject_$i;
  } else {
   $8 = ($idx|0)<(-1000999);
   if (!($8)) {
    $9 = ((($L)) + 8|0);
    $10 = HEAP32[$9>>2]|0;
    $11 = (($10) + ($idx<<4)|0);
    $$0$i = $11;
    break;
   }
   $12 = ($idx|0)==(-1001000);
   if ($12) {
    $13 = ((($L)) + 12|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = ((($14)) + 40|0);
    $$0$i = $15;
    break;
   }
   $16 = (-1001000 - ($idx))|0;
   $17 = HEAP32[$1>>2]|0;
   $18 = ((($17)) + 8|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = ($19|0)==(22);
   if ($20) {
    $$0$i = 24;
   } else {
    $21 = HEAP32[$17>>2]|0;
    $22 = ((($21)) + 6|0);
    $23 = HEAP8[$22>>0]|0;
    $24 = $23&255;
    $25 = ($16|0)>($24|0);
    $26 = (($16) + -1)|0;
    $27 = (((($21)) + 16|0) + ($26<<4)|0);
    $28 = $25 ? 24 : $27;
    $$0$i = $28;
   }
  }
 } while(0);
 $29 = ((($L)) + 8|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = ((($30)) + 16|0);
 HEAP32[$29>>2] = $31;
 $32 = (_luaS_new($L,$k)|0);
 HEAP32[$30>>2] = $32;
 $33 = ((($32)) + 4|0);
 $34 = HEAP8[$33>>0]|0;
 $35 = $34&255;
 $36 = $35 | 64;
 $37 = ((($30)) + 8|0);
 HEAP32[$37>>2] = $36;
 $38 = HEAP32[$29>>2]|0;
 $39 = ((($38)) + -16|0);
 $40 = ((($38)) + -32|0);
 _luaV_settable($L,$$0$i,$39,$40);
 $41 = HEAP32[$29>>2]|0;
 $42 = ((($41)) + -32|0);
 HEAP32[$29>>2] = $42;
 return;
}
function _lua_rawset($L,$idx) {
 $L = $L|0;
 $idx = $idx|0;
 var $$0$i = 0, $$luaO_nilobject_$i = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($L)) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($idx|0)>(0);
 do {
  if ($2) {
   $3 = HEAP32[$1>>2]|0;
   $4 = (($3) + ($idx<<4)|0);
   $5 = ((($L)) + 8|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = ($4>>>0)<($6>>>0);
   $$luaO_nilobject_$i = $7 ? $4 : 24;
   $$0$i = $$luaO_nilobject_$i;
  } else {
   $8 = ($idx|0)<(-1000999);
   if (!($8)) {
    $9 = ((($L)) + 8|0);
    $10 = HEAP32[$9>>2]|0;
    $11 = (($10) + ($idx<<4)|0);
    $$0$i = $11;
    break;
   }
   $12 = ($idx|0)==(-1001000);
   if ($12) {
    $13 = ((($L)) + 12|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = ((($14)) + 40|0);
    $$0$i = $15;
    break;
   }
   $16 = (-1001000 - ($idx))|0;
   $17 = HEAP32[$1>>2]|0;
   $18 = ((($17)) + 8|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = ($19|0)==(22);
   if ($20) {
    $$0$i = 24;
   } else {
    $21 = HEAP32[$17>>2]|0;
    $22 = ((($21)) + 6|0);
    $23 = HEAP8[$22>>0]|0;
    $24 = $23&255;
    $25 = ($16|0)>($24|0);
    $26 = (($16) + -1)|0;
    $27 = (((($21)) + 16|0) + ($26<<4)|0);
    $28 = $25 ? 24 : $27;
    $$0$i = $28;
   }
  }
 } while(0);
 $29 = ((($L)) + 8|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = ((($30)) + -16|0);
 $32 = HEAP32[$$0$i>>2]|0;
 $33 = ((($30)) + -32|0);
 $34 = (_luaH_set($L,$32,$33)|0);
 $35 = $31;
 $36 = $35;
 $37 = HEAP32[$36>>2]|0;
 $38 = (($35) + 4)|0;
 $39 = $38;
 $40 = HEAP32[$39>>2]|0;
 $41 = $34;
 $42 = $41;
 HEAP32[$42>>2] = $37;
 $43 = (($41) + 4)|0;
 $44 = $43;
 HEAP32[$44>>2] = $40;
 $45 = ((($30)) + -8|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = ((($34)) + 8|0);
 HEAP32[$47>>2] = $46;
 $48 = HEAP32[$$0$i>>2]|0;
 $49 = ((($48)) + 6|0);
 HEAP8[$49>>0] = 0;
 $50 = HEAP32[$29>>2]|0;
 $51 = ((($50)) + -8|0);
 $52 = HEAP32[$51>>2]|0;
 $53 = $52 & 64;
 $54 = ($53|0)==(0);
 if ($54) {
  $66 = $50;
  $65 = ((($66)) + -32|0);
  HEAP32[$29>>2] = $65;
  return;
 }
 $55 = ((($50)) + -16|0);
 $56 = HEAP32[$55>>2]|0;
 $57 = ((($56)) + 5|0);
 $58 = HEAP8[$57>>0]|0;
 $59 = $58 & 3;
 $60 = ($59<<24>>24)==(0);
 if ($60) {
  $66 = $50;
  $65 = ((($66)) + -32|0);
  HEAP32[$29>>2] = $65;
  return;
 }
 $61 = ((($48)) + 5|0);
 $62 = HEAP8[$61>>0]|0;
 $63 = $62 & 4;
 $64 = ($63<<24>>24)==(0);
 if ($64) {
  $66 = $50;
  $65 = ((($66)) + -32|0);
  HEAP32[$29>>2] = $65;
  return;
 }
 _luaC_barrierback_($L,$48);
 $$pre = HEAP32[$29>>2]|0;
 $66 = $$pre;
 $65 = ((($66)) + -32|0);
 HEAP32[$29>>2] = $65;
 return;
}
function _lua_rawseti($L,$idx,$n) {
 $L = $L|0;
 $idx = $idx|0;
 $n = $n|0;
 var $$0$i = 0, $$luaO_nilobject_$i = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($L)) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($idx|0)>(0);
 do {
  if ($2) {
   $3 = HEAP32[$1>>2]|0;
   $4 = (($3) + ($idx<<4)|0);
   $5 = ((($L)) + 8|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = ($4>>>0)<($6>>>0);
   $$luaO_nilobject_$i = $7 ? $4 : 24;
   $$0$i = $$luaO_nilobject_$i;
  } else {
   $8 = ($idx|0)<(-1000999);
   if (!($8)) {
    $9 = ((($L)) + 8|0);
    $10 = HEAP32[$9>>2]|0;
    $11 = (($10) + ($idx<<4)|0);
    $$0$i = $11;
    break;
   }
   $12 = ($idx|0)==(-1001000);
   if ($12) {
    $13 = ((($L)) + 12|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = ((($14)) + 40|0);
    $$0$i = $15;
    break;
   }
   $16 = (-1001000 - ($idx))|0;
   $17 = HEAP32[$1>>2]|0;
   $18 = ((($17)) + 8|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = ($19|0)==(22);
   if ($20) {
    $$0$i = 24;
   } else {
    $21 = HEAP32[$17>>2]|0;
    $22 = ((($21)) + 6|0);
    $23 = HEAP8[$22>>0]|0;
    $24 = $23&255;
    $25 = ($16|0)>($24|0);
    $26 = (($16) + -1)|0;
    $27 = (((($21)) + 16|0) + ($26<<4)|0);
    $28 = $25 ? 24 : $27;
    $$0$i = $28;
   }
  }
 } while(0);
 $29 = HEAP32[$$0$i>>2]|0;
 $30 = ((($L)) + 8|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = ((($31)) + -16|0);
 _luaH_setint($L,$29,$n,$32);
 $33 = HEAP32[$30>>2]|0;
 $34 = ((($33)) + -8|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = $35 & 64;
 $37 = ($36|0)==(0);
 if ($37) {
  $50 = $33;
  $49 = ((($50)) + -16|0);
  HEAP32[$30>>2] = $49;
  return;
 }
 $38 = ((($33)) + -16|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = ((($39)) + 5|0);
 $41 = HEAP8[$40>>0]|0;
 $42 = $41 & 3;
 $43 = ($42<<24>>24)==(0);
 if ($43) {
  $50 = $33;
  $49 = ((($50)) + -16|0);
  HEAP32[$30>>2] = $49;
  return;
 }
 $44 = HEAP32[$$0$i>>2]|0;
 $45 = ((($44)) + 5|0);
 $46 = HEAP8[$45>>0]|0;
 $47 = $46 & 4;
 $48 = ($47<<24>>24)==(0);
 if ($48) {
  $50 = $33;
  $49 = ((($50)) + -16|0);
  HEAP32[$30>>2] = $49;
  return;
 }
 _luaC_barrierback_($L,$44);
 $$pre = HEAP32[$30>>2]|0;
 $50 = $$pre;
 $49 = ((($50)) + -16|0);
 HEAP32[$30>>2] = $49;
 return;
}
function _lua_setmetatable($L,$objindex) {
 $L = $L|0;
 $objindex = $objindex|0;
 var $$0$i = 0, $$luaO_nilobject_$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $8 = 0, $9 = 0, $mt$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($L)) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($objindex|0)>(0);
 do {
  if ($2) {
   $3 = HEAP32[$1>>2]|0;
   $4 = (($3) + ($objindex<<4)|0);
   $5 = ((($L)) + 8|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = ($4>>>0)<($6>>>0);
   $$luaO_nilobject_$i = $7 ? $4 : 24;
   $$0$i = $$luaO_nilobject_$i;
  } else {
   $8 = ($objindex|0)<(-1000999);
   if (!($8)) {
    $9 = ((($L)) + 8|0);
    $10 = HEAP32[$9>>2]|0;
    $11 = (($10) + ($objindex<<4)|0);
    $$0$i = $11;
    break;
   }
   $12 = ($objindex|0)==(-1001000);
   if ($12) {
    $13 = ((($L)) + 12|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = ((($14)) + 40|0);
    $$0$i = $15;
    break;
   }
   $16 = (-1001000 - ($objindex))|0;
   $17 = HEAP32[$1>>2]|0;
   $18 = ((($17)) + 8|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = ($19|0)==(22);
   if ($20) {
    $$0$i = 24;
   } else {
    $21 = HEAP32[$17>>2]|0;
    $22 = ((($21)) + 6|0);
    $23 = HEAP8[$22>>0]|0;
    $24 = $23&255;
    $25 = ($16|0)>($24|0);
    $26 = (($16) + -1)|0;
    $27 = (((($21)) + 16|0) + ($26<<4)|0);
    $28 = $25 ? 24 : $27;
    $$0$i = $28;
   }
  }
 } while(0);
 $29 = ((($L)) + 8|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = ((($30)) + -8|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = ($32|0)==(0);
 if ($33) {
  $mt$0 = 0;
 } else {
  $34 = ((($30)) + -16|0);
  $35 = HEAP32[$34>>2]|0;
  $mt$0 = $35;
 }
 $36 = ((($$0$i)) + 8|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = $37 & 15;
 switch ($38|0) {
 case 5:  {
  $39 = HEAP32[$$0$i>>2]|0;
  $40 = ((($39)) + 8|0);
  HEAP32[$40>>2] = $mt$0;
  $41 = ($mt$0|0)==(0|0);
  if ($41) {
   $68 = HEAP32[$29>>2]|0;
   $69 = ((($68)) + -16|0);
   HEAP32[$29>>2] = $69;
   return 1;
  }
  $42 = ((($mt$0)) + 5|0);
  $43 = HEAP8[$42>>0]|0;
  $44 = $43 & 3;
  $45 = ($44<<24>>24)==(0);
  if (!($45)) {
   $46 = HEAP32[$$0$i>>2]|0;
   $47 = ((($46)) + 5|0);
   $48 = HEAP8[$47>>0]|0;
   $49 = $48 & 4;
   $50 = ($49<<24>>24)==(0);
   if (!($50)) {
    _luaC_barrierback_($L,$46);
   }
  }
  $51 = HEAP32[$$0$i>>2]|0;
  _luaC_checkfinalizer($L,$51,$mt$0);
  $68 = HEAP32[$29>>2]|0;
  $69 = ((($68)) + -16|0);
  HEAP32[$29>>2] = $69;
  return 1;
  break;
 }
 case 7:  {
  $52 = HEAP32[$$0$i>>2]|0;
  $53 = ((($52)) + 8|0);
  HEAP32[$53>>2] = $mt$0;
  $54 = ($mt$0|0)==(0|0);
  if ($54) {
   $68 = HEAP32[$29>>2]|0;
   $69 = ((($68)) + -16|0);
   HEAP32[$29>>2] = $69;
   return 1;
  }
  $55 = ((($mt$0)) + 5|0);
  $56 = HEAP8[$55>>0]|0;
  $57 = $56 & 3;
  $58 = ($57<<24>>24)==(0);
  if (!($58)) {
   $59 = HEAP32[$$0$i>>2]|0;
   $60 = ((($59)) + 5|0);
   $61 = HEAP8[$60>>0]|0;
   $62 = $61 & 4;
   $63 = ($62<<24>>24)==(0);
   if (!($63)) {
    _luaC_barrier_($L,$59,$mt$0);
   }
  }
  $64 = HEAP32[$$0$i>>2]|0;
  _luaC_checkfinalizer($L,$64,$mt$0);
  $68 = HEAP32[$29>>2]|0;
  $69 = ((($68)) + -16|0);
  HEAP32[$29>>2] = $69;
  return 1;
  break;
 }
 default: {
  $65 = ((($L)) + 12|0);
  $66 = HEAP32[$65>>2]|0;
  $67 = (((($66)) + 252|0) + ($38<<2)|0);
  HEAP32[$67>>2] = $mt$0;
  $68 = HEAP32[$29>>2]|0;
  $69 = ((($68)) + -16|0);
  HEAP32[$29>>2] = $69;
  return 1;
 }
 }
 return (0)|0;
}
function _lua_setuservalue($L,$idx) {
 $L = $L|0;
 $idx = $idx|0;
 var $$0$i = 0, $$luaO_nilobject_$i = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($L)) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($idx|0)>(0);
 do {
  if ($2) {
   $3 = HEAP32[$1>>2]|0;
   $4 = (($3) + ($idx<<4)|0);
   $5 = ((($L)) + 8|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = ($4>>>0)<($6>>>0);
   $$luaO_nilobject_$i = $7 ? $4 : 24;
   $$0$i = $$luaO_nilobject_$i;
  } else {
   $8 = ($idx|0)<(-1000999);
   if (!($8)) {
    $9 = ((($L)) + 8|0);
    $10 = HEAP32[$9>>2]|0;
    $11 = (($10) + ($idx<<4)|0);
    $$0$i = $11;
    break;
   }
   $12 = ($idx|0)==(-1001000);
   if ($12) {
    $13 = ((($L)) + 12|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = ((($14)) + 40|0);
    $$0$i = $15;
    break;
   }
   $16 = (-1001000 - ($idx))|0;
   $17 = HEAP32[$1>>2]|0;
   $18 = ((($17)) + 8|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = ($19|0)==(22);
   if ($20) {
    $$0$i = 24;
   } else {
    $21 = HEAP32[$17>>2]|0;
    $22 = ((($21)) + 6|0);
    $23 = HEAP8[$22>>0]|0;
    $24 = $23&255;
    $25 = ($16|0)>($24|0);
    $26 = (($16) + -1)|0;
    $27 = (((($21)) + 16|0) + ($26<<4)|0);
    $28 = $25 ? 24 : $27;
    $$0$i = $28;
   }
  }
 } while(0);
 $29 = ((($L)) + 8|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = ((($30)) + -8|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = ($32|0)==(0);
 if ($33) {
  $34 = HEAP32[$$0$i>>2]|0;
  $35 = ((($34)) + 12|0);
  HEAP32[$35>>2] = 0;
  $51 = $30;
  $50 = ((($51)) + -16|0);
  HEAP32[$29>>2] = $50;
  return;
 }
 $36 = ((($30)) + -16|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = HEAP32[$$0$i>>2]|0;
 $39 = ((($38)) + 12|0);
 HEAP32[$39>>2] = $37;
 $40 = HEAP32[$36>>2]|0;
 $41 = ((($40)) + 5|0);
 $42 = HEAP8[$41>>0]|0;
 $43 = $42 & 3;
 $44 = ($43<<24>>24)==(0);
 if ($44) {
  $51 = $30;
  $50 = ((($51)) + -16|0);
  HEAP32[$29>>2] = $50;
  return;
 }
 $45 = HEAP32[$$0$i>>2]|0;
 $46 = ((($45)) + 5|0);
 $47 = HEAP8[$46>>0]|0;
 $48 = $47 & 4;
 $49 = ($48<<24>>24)==(0);
 if ($49) {
  $51 = $30;
  $50 = ((($51)) + -16|0);
  HEAP32[$29>>2] = $50;
  return;
 }
 _luaC_barrier_($L,$45,$40);
 $$pre = HEAP32[$29>>2]|0;
 $51 = $$pre;
 $50 = ((($51)) + -16|0);
 HEAP32[$29>>2] = $50;
 return;
}
function _lua_getctx($L,$ctx) {
 $L = $L|0;
 $ctx = $ctx|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($L)) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 18|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = $3 & 8;
 $5 = ($4<<24>>24)==(0);
 if ($5) {
  $$0 = 0;
  return ($$0|0);
 }
 $6 = ($ctx|0)==(0|0);
 if (!($6)) {
  $7 = ((($1)) + 24|0);
  $8 = HEAP32[$7>>2]|0;
  HEAP32[$ctx>>2] = $8;
 }
 $9 = ((($1)) + 37|0);
 $10 = HEAP8[$9>>0]|0;
 $11 = $10&255;
 $$0 = $11;
 return ($$0|0);
}
function _lua_callk($L,$nargs,$nresults,$ctx,$k) {
 $L = $L|0;
 $nargs = $nargs|0;
 $nresults = $nresults|0;
 $ctx = $ctx|0;
 $k = $k|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = ((($L)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $nargs ^ -1;
 $3 = (($1) + ($2<<4)|0);
 $4 = ($k|0)==(0|0);
 if ($4) {
  label = 4;
 } else {
  $5 = ((($L)) + 36|0);
  $6 = HEAP16[$5>>1]|0;
  $7 = ($6<<16>>16)==(0);
  if ($7) {
   $8 = ((($L)) + 16|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = ((($9)) + 28|0);
   HEAP32[$10>>2] = $k;
   $11 = ((($9)) + 24|0);
   HEAP32[$11>>2] = $ctx;
   _luaD_call($L,$3,$nresults,1);
  } else {
   label = 4;
  }
 }
 if ((label|0) == 4) {
  _luaD_call($L,$3,$nresults,0);
 }
 $12 = ($nresults|0)==(-1);
 if (!($12)) {
  return;
 }
 $13 = ((($L)) + 16|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ((($14)) + 4|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = HEAP32[$0>>2]|0;
 $18 = ($16>>>0)<($17>>>0);
 if (!($18)) {
  return;
 }
 HEAP32[$15>>2] = $17;
 return;
}
function _lua_pcallk($L,$nargs,$nresults,$errfunc,$ctx,$k) {
 $L = $L|0;
 $nargs = $nargs|0;
 $nresults = $nresults|0;
 $errfunc = $errfunc|0;
 $ctx = $ctx|0;
 $k = $k|0;
 var $$0$i = 0, $$luaO_nilobject_$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $9 = 0, $c = 0, $func$0 = 0, $status$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $c = sp;
 $0 = ($errfunc|0)==(0);
 if ($0) {
  $func$0 = 0;
 } else {
  $1 = ((($L)) + 16|0);
  $2 = HEAP32[$1>>2]|0;
  $3 = ($errfunc|0)>(0);
  do {
   if ($3) {
    $4 = HEAP32[$2>>2]|0;
    $5 = (($4) + ($errfunc<<4)|0);
    $6 = ((($L)) + 8|0);
    $7 = HEAP32[$6>>2]|0;
    $8 = ($5>>>0)<($7>>>0);
    $$luaO_nilobject_$i = $8 ? $5 : 24;
    $$0$i = $$luaO_nilobject_$i;
   } else {
    $9 = ($errfunc|0)<(-1000999);
    if (!($9)) {
     $10 = ((($L)) + 8|0);
     $11 = HEAP32[$10>>2]|0;
     $12 = (($11) + ($errfunc<<4)|0);
     $$0$i = $12;
     break;
    }
    $13 = ($errfunc|0)==(-1001000);
    if ($13) {
     $14 = ((($L)) + 12|0);
     $15 = HEAP32[$14>>2]|0;
     $16 = ((($15)) + 40|0);
     $$0$i = $16;
     break;
    }
    $17 = (-1001000 - ($errfunc))|0;
    $18 = HEAP32[$2>>2]|0;
    $19 = ((($18)) + 8|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = ($20|0)==(22);
    if ($21) {
     $$0$i = 24;
    } else {
     $22 = HEAP32[$18>>2]|0;
     $23 = ((($22)) + 6|0);
     $24 = HEAP8[$23>>0]|0;
     $25 = $24&255;
     $26 = ($17|0)>($25|0);
     $27 = (($17) + -1)|0;
     $28 = (((($22)) + 16|0) + ($27<<4)|0);
     $29 = $26 ? 24 : $28;
     $$0$i = $29;
    }
   }
  } while(0);
  $30 = ((($L)) + 28|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = $$0$i;
  $33 = $31;
  $34 = (($32) - ($33))|0;
  $func$0 = $34;
 }
 $35 = ((($L)) + 8|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = $nargs ^ -1;
 $38 = (($36) + ($37<<4)|0);
 HEAP32[$c>>2] = $38;
 $39 = ($k|0)==(0|0);
 if ($39) {
  label = 13;
 } else {
  $40 = ((($L)) + 36|0);
  $41 = HEAP16[$40>>1]|0;
  $42 = ($41<<16>>16)==(0);
  if ($42) {
   $50 = ((($L)) + 16|0);
   $51 = HEAP32[$50>>2]|0;
   $52 = ((($51)) + 28|0);
   HEAP32[$52>>2] = $k;
   $53 = ((($51)) + 24|0);
   HEAP32[$53>>2] = $ctx;
   $54 = ((($L)) + 28|0);
   $55 = HEAP32[$54>>2]|0;
   $56 = $38;
   $57 = $55;
   $58 = (($56) - ($57))|0;
   $59 = ((($51)) + 20|0);
   HEAP32[$59>>2] = $58;
   $60 = ((($L)) + 41|0);
   $61 = HEAP8[$60>>0]|0;
   $62 = ((($51)) + 36|0);
   HEAP8[$62>>0] = $61;
   $63 = ((($L)) + 68|0);
   $64 = HEAP32[$63>>2]|0;
   $65 = ((($51)) + 32|0);
   HEAP32[$65>>2] = $64;
   HEAP32[$63>>2] = $func$0;
   $66 = ((($51)) + 18|0);
   $67 = HEAP8[$66>>0]|0;
   $68 = $67&255;
   $69 = $68 | 16;
   $70 = $69&255;
   HEAP8[$66>>0] = $70;
   _luaD_call($L,$38,$nresults,1);
   $71 = HEAP8[$66>>0]|0;
   $72 = $71&255;
   $73 = $72 & 239;
   $74 = $73&255;
   HEAP8[$66>>0] = $74;
   $75 = HEAP32[$65>>2]|0;
   HEAP32[$63>>2] = $75;
   $status$0 = 0;
  } else {
   label = 13;
  }
 }
 if ((label|0) == 13) {
  $43 = ((($c)) + 4|0);
  HEAP32[$43>>2] = $nresults;
  $44 = ((($L)) + 28|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = $38;
  $47 = $45;
  $48 = (($46) - ($47))|0;
  $49 = (_luaD_pcall($L,157,$c,$48,$func$0)|0);
  $status$0 = $49;
 }
 $76 = ($nresults|0)==(-1);
 if (!($76)) {
  STACKTOP = sp;return ($status$0|0);
 }
 $77 = ((($L)) + 16|0);
 $78 = HEAP32[$77>>2]|0;
 $79 = ((($78)) + 4|0);
 $80 = HEAP32[$79>>2]|0;
 $81 = HEAP32[$35>>2]|0;
 $82 = ($80>>>0)<($81>>>0);
 if (!($82)) {
  STACKTOP = sp;return ($status$0|0);
 }
 HEAP32[$79>>2] = $81;
 STACKTOP = sp;return ($status$0|0);
}
function _lua_load($L,$reader,$data,$chunkname,$mode) {
 $L = $L|0;
 $reader = $reader|0;
 $data = $data|0;
 $chunkname = $chunkname|0;
 $mode = $mode|0;
 var $$chunkname = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $z = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $z = sp;
 $0 = ($chunkname|0)==(0|0);
 $$chunkname = $0 ? 12875 : $chunkname;
 _luaZ_init($L,$z,$reader,$data);
 $1 = (_luaD_protectedparser($L,$z,$$chunkname,$mode)|0);
 $2 = ($1|0)==(0);
 if (!($2)) {
  STACKTOP = sp;return ($1|0);
 }
 $3 = ((($L)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + -16|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($6)) + 6|0);
 $8 = HEAP8[$7>>0]|0;
 $9 = ($8<<24>>24)==(1);
 if (!($9)) {
  STACKTOP = sp;return ($1|0);
 }
 $10 = ((($L)) + 12|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ((($11)) + 40|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (_luaH_getint($13,2)|0);
 $15 = ((($6)) + 16|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ((($16)) + 8|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = $14;
 $20 = $19;
 $21 = HEAP32[$20>>2]|0;
 $22 = (($19) + 4)|0;
 $23 = $22;
 $24 = HEAP32[$23>>2]|0;
 $25 = $18;
 $26 = $25;
 HEAP32[$26>>2] = $21;
 $27 = (($25) + 4)|0;
 $28 = $27;
 HEAP32[$28>>2] = $24;
 $29 = ((($14)) + 8|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = ((($18)) + 8|0);
 HEAP32[$31>>2] = $30;
 $32 = HEAP32[$29>>2]|0;
 $33 = $32 & 64;
 $34 = ($33|0)==(0);
 if ($34) {
  STACKTOP = sp;return ($1|0);
 }
 $35 = HEAP32[$14>>2]|0;
 $36 = ((($35)) + 5|0);
 $37 = HEAP8[$36>>0]|0;
 $38 = $37 & 3;
 $39 = ($38<<24>>24)==(0);
 if ($39) {
  STACKTOP = sp;return ($1|0);
 }
 $40 = HEAP32[$15>>2]|0;
 $41 = ((($40)) + 5|0);
 $42 = HEAP8[$41>>0]|0;
 $43 = $42 & 4;
 $44 = ($43<<24>>24)==(0);
 if ($44) {
  STACKTOP = sp;return ($1|0);
 }
 _luaC_barrier_($L,$40,$35);
 STACKTOP = sp;return ($1|0);
}
function _lua_dump($L,$writer,$data) {
 $L = $L|0;
 $writer = $writer|0;
 $data = $data|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $status$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($L)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + -8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(70);
 if (!($4)) {
  $status$0 = 1;
  return ($status$0|0);
 }
 $5 = ((($1)) + -16|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($6)) + 12|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (_luaU_dump($L,$8,$writer,$data,0)|0);
 $status$0 = $9;
 return ($status$0|0);
}
function _lua_status($L) {
 $L = $L|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($L)) + 6|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1&255;
 return ($2|0);
}
function _lua_gc($L,$what,$data) {
 $L = $L|0;
 $what = $what|0;
 $data = $data|0;
 var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $debt$0 = 0, $res$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($L)) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 do {
  switch ($what|0) {
  case 0:  {
   $2 = ((($1)) + 63|0);
   HEAP8[$2>>0] = 0;
   $res$0 = 0;
   return ($res$0|0);
   break;
  }
  case 1:  {
   _luaE_setdebt($1,0);
   $3 = ((($1)) + 63|0);
   HEAP8[$3>>0] = 1;
   $res$0 = 0;
   return ($res$0|0);
   break;
  }
  case 2:  {
   _luaC_fullgc($L,0);
   $res$0 = 0;
   return ($res$0|0);
   break;
  }
  case 3:  {
   $4 = ((($1)) + 8|0);
   $5 = HEAP32[$4>>2]|0;
   $6 = ((($1)) + 12|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = (($7) + ($5))|0;
   $9 = $8 >>> 10;
   $res$0 = $9;
   return ($res$0|0);
   break;
  }
  case 4:  {
   $10 = ((($1)) + 8|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = ((($1)) + 12|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = (($13) + ($11))|0;
   $15 = $14 & 1023;
   $res$0 = $15;
   return ($res$0|0);
   break;
  }
  case 5:  {
   $16 = ((($1)) + 62|0);
   $17 = HEAP8[$16>>0]|0;
   $18 = ($17<<24>>24)==(2);
   if ($18) {
    $19 = ((($1)) + 20|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = ($20|0)==(0);
    $22 = $21&1;
    _luaC_forcestep($L);
    $res$0 = $22;
    return ($res$0|0);
   }
   $23 = $data << 10;
   $24 = (($23) + -1600)|0;
   $25 = ((($1)) + 63|0);
   $26 = HEAP8[$25>>0]|0;
   $27 = ($26<<24>>24)==(0);
   if ($27) {
    $debt$0 = $24;
    _luaE_setdebt($1,$debt$0);
    _luaC_forcestep($L);
    $31 = ((($1)) + 61|0);
    $32 = HEAP8[$31>>0]|0;
    $33 = ($32<<24>>24)==(5);
    $$ = $33&1;
    return ($$|0);
   }
   $28 = ((($1)) + 12|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = (($29) + ($24))|0;
   $debt$0 = $30;
   _luaE_setdebt($1,$debt$0);
   _luaC_forcestep($L);
   $31 = ((($1)) + 61|0);
   $32 = HEAP8[$31>>0]|0;
   $33 = ($32<<24>>24)==(5);
   $$ = $33&1;
   return ($$|0);
   break;
  }
  case 6:  {
   $34 = ((($1)) + 156|0);
   $35 = HEAP32[$34>>2]|0;
   HEAP32[$34>>2] = $data;
   $res$0 = $35;
   return ($res$0|0);
   break;
  }
  case 8:  {
   $36 = ((($1)) + 160|0);
   $37 = HEAP32[$36>>2]|0;
   HEAP32[$36>>2] = $data;
   $res$0 = $37;
   return ($res$0|0);
   break;
  }
  case 7:  {
   $38 = ((($1)) + 164|0);
   $39 = HEAP32[$38>>2]|0;
   HEAP32[$38>>2] = $data;
   $res$0 = $39;
   return ($res$0|0);
   break;
  }
  case 9:  {
   $40 = ((($1)) + 63|0);
   $41 = HEAP8[$40>>0]|0;
   $42 = $41&255;
   $res$0 = $42;
   return ($res$0|0);
   break;
  }
  case 10:  {
   _luaC_changemode($L,2);
   $res$0 = 0;
   return ($res$0|0);
   break;
  }
  case 11:  {
   _luaC_changemode($L,0);
   $res$0 = 0;
   return ($res$0|0);
   break;
  }
  default: {
   $res$0 = -1;
   return ($res$0|0);
  }
  }
 } while(0);
 return (0)|0;
}
function _lua_error($L) {
 $L = $L|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _luaG_errormsg($L);
 // unreachable;
 return (0)|0;
}
function _lua_next($L,$idx) {
 $L = $L|0;
 $idx = $idx|0;
 var $$0$i = 0, $$luaO_nilobject_$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($L)) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($idx|0)>(0);
 do {
  if ($2) {
   $3 = HEAP32[$1>>2]|0;
   $4 = (($3) + ($idx<<4)|0);
   $5 = ((($L)) + 8|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = ($4>>>0)<($6>>>0);
   $$luaO_nilobject_$i = $7 ? $4 : 24;
   $$0$i = $$luaO_nilobject_$i;
  } else {
   $8 = ($idx|0)<(-1000999);
   if (!($8)) {
    $9 = ((($L)) + 8|0);
    $10 = HEAP32[$9>>2]|0;
    $11 = (($10) + ($idx<<4)|0);
    $$0$i = $11;
    break;
   }
   $12 = ($idx|0)==(-1001000);
   if ($12) {
    $13 = ((($L)) + 12|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = ((($14)) + 40|0);
    $$0$i = $15;
    break;
   }
   $16 = (-1001000 - ($idx))|0;
   $17 = HEAP32[$1>>2]|0;
   $18 = ((($17)) + 8|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = ($19|0)==(22);
   if ($20) {
    $$0$i = 24;
   } else {
    $21 = HEAP32[$17>>2]|0;
    $22 = ((($21)) + 6|0);
    $23 = HEAP8[$22>>0]|0;
    $24 = $23&255;
    $25 = ($16|0)>($24|0);
    $26 = (($16) + -1)|0;
    $27 = (((($21)) + 16|0) + ($26<<4)|0);
    $28 = $25 ? 24 : $27;
    $$0$i = $28;
   }
  }
 } while(0);
 $29 = HEAP32[$$0$i>>2]|0;
 $30 = ((($L)) + 8|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = ((($31)) + -16|0);
 $33 = (_luaH_next($L,$29,$32)|0);
 $34 = ($33|0)==(0);
 $35 = HEAP32[$30>>2]|0;
 $36 = ((($35)) + -16|0);
 $37 = ((($35)) + 16|0);
 $storemerge = $34 ? $36 : $37;
 HEAP32[$30>>2] = $storemerge;
 return ($33|0);
}
function _lua_concat($L,$n) {
 $L = $L|0;
 $n = $n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n|0)>(1);
 if ($0) {
  $1 = ((($L)) + 12|0);
  $2 = HEAP32[$1>>2]|0;
  $3 = ((($2)) + 12|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($4|0)>(0);
  if ($5) {
   _luaC_step($L);
  }
  _luaV_concat($L,$n);
  return;
 } else {
  $6 = ($n|0)==(0);
  if (!($6)) {
   return;
  }
  $7 = ((($L)) + 8|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = (_luaS_newlstr($L,20754,0)|0);
  HEAP32[$8>>2] = $9;
  $10 = ((($9)) + 4|0);
  $11 = HEAP8[$10>>0]|0;
  $12 = $11&255;
  $13 = $12 | 64;
  $14 = ((($8)) + 8|0);
  HEAP32[$14>>2] = $13;
  $15 = HEAP32[$7>>2]|0;
  $16 = ((($15)) + 16|0);
  HEAP32[$7>>2] = $16;
  return;
 }
}
function _lua_len($L,$idx) {
 $L = $L|0;
 $idx = $idx|0;
 var $$0$i = 0, $$luaO_nilobject_$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($L)) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($idx|0)>(0);
 do {
  if ($2) {
   $3 = HEAP32[$1>>2]|0;
   $4 = (($3) + ($idx<<4)|0);
   $5 = ((($L)) + 8|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = ($4>>>0)<($6>>>0);
   $$luaO_nilobject_$i = $7 ? $4 : 24;
   $$0$i = $$luaO_nilobject_$i;
  } else {
   $8 = ($idx|0)<(-1000999);
   if (!($8)) {
    $9 = ((($L)) + 8|0);
    $10 = HEAP32[$9>>2]|0;
    $11 = (($10) + ($idx<<4)|0);
    $$0$i = $11;
    break;
   }
   $12 = ($idx|0)==(-1001000);
   if ($12) {
    $13 = ((($L)) + 12|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = ((($14)) + 40|0);
    $$0$i = $15;
    break;
   }
   $16 = (-1001000 - ($idx))|0;
   $17 = HEAP32[$1>>2]|0;
   $18 = ((($17)) + 8|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = ($19|0)==(22);
   if ($20) {
    $$0$i = 24;
   } else {
    $21 = HEAP32[$17>>2]|0;
    $22 = ((($21)) + 6|0);
    $23 = HEAP8[$22>>0]|0;
    $24 = $23&255;
    $25 = ($16|0)>($24|0);
    $26 = (($16) + -1)|0;
    $27 = (((($21)) + 16|0) + ($26<<4)|0);
    $28 = $25 ? 24 : $27;
    $$0$i = $28;
   }
  }
 } while(0);
 $29 = ((($L)) + 8|0);
 $30 = HEAP32[$29>>2]|0;
 _luaV_objlen($L,$30,$$0$i);
 $31 = HEAP32[$29>>2]|0;
 $32 = ((($31)) + 16|0);
 HEAP32[$29>>2] = $32;
 return;
}
function _lua_newuserdata($L,$size) {
 $L = $L|0;
 $size = $size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($L)) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)>(0);
 if ($4) {
  _luaC_step($L);
 }
 $5 = (_luaS_newudata($L,$size,0)|0);
 $6 = ((($L)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 HEAP32[$7>>2] = $5;
 $8 = ((($7)) + 8|0);
 HEAP32[$8>>2] = 71;
 $9 = HEAP32[$6>>2]|0;
 $10 = ((($9)) + 16|0);
 HEAP32[$6>>2] = $10;
 $11 = ((($5)) + 24|0);
 return ($11|0);
}
function _lua_getupvalue($L,$funcindex,$n) {
 $L = $L|0;
 $funcindex = $funcindex|0;
 $n = $n|0;
 var $$0$i = 0, $$0$i12 = 0, $$0$i15 = 0, $$luaO_nilobject_$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($L)) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($funcindex|0)>(0);
 do {
  if ($2) {
   $3 = HEAP32[$1>>2]|0;
   $4 = (($3) + ($funcindex<<4)|0);
   $5 = ((($L)) + 8|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = ($4>>>0)<($6>>>0);
   $$luaO_nilobject_$i = $7 ? $4 : 24;
   $$0$i = $$luaO_nilobject_$i;
  } else {
   $8 = ($funcindex|0)<(-1000999);
   if (!($8)) {
    $9 = ((($L)) + 8|0);
    $10 = HEAP32[$9>>2]|0;
    $11 = (($10) + ($funcindex<<4)|0);
    $$0$i = $11;
    break;
   }
   $12 = ($funcindex|0)==(-1001000);
   if ($12) {
    $13 = ((($L)) + 12|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = ((($14)) + 40|0);
    $$0$i = $15;
    break;
   }
   $16 = (-1001000 - ($funcindex))|0;
   $17 = HEAP32[$1>>2]|0;
   $18 = ((($17)) + 8|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = ($19|0)==(22);
   if ($20) {
    $$0$i = 24;
   } else {
    $21 = HEAP32[$17>>2]|0;
    $22 = ((($21)) + 6|0);
    $23 = HEAP8[$22>>0]|0;
    $24 = $23&255;
    $25 = ($16|0)>($24|0);
    $26 = (($16) + -1)|0;
    $27 = (((($21)) + 16|0) + ($26<<4)|0);
    $28 = $25 ? 24 : $27;
    $$0$i = $28;
   }
  }
 } while(0);
 $29 = ((($$0$i)) + 8|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = $30 & 63;
 L12: do {
  switch ($31|0) {
  case 38:  {
   $32 = HEAP32[$$0$i>>2]|0;
   $33 = ($n|0)>(0);
   if (!($33)) {
    $$0$i12 = 0;
    return ($$0$i12|0);
   }
   $34 = ((($32)) + 6|0);
   $35 = HEAP8[$34>>0]|0;
   $36 = $35&255;
   $37 = ($36|0)<($n|0);
   if ($37) {
    $$0$i12 = 0;
    return ($$0$i12|0);
   } else {
    $38 = (($n) + -1)|0;
    $39 = (((($32)) + 16|0) + ($38<<4)|0);
    $40 = $39;
    $$0$i15 = 20754;$60 = $40;
    break L12;
   }
   break;
  }
  case 6:  {
   $41 = HEAP32[$$0$i>>2]|0;
   $42 = ((($41)) + 12|0);
   $43 = HEAP32[$42>>2]|0;
   $44 = ($n|0)>(0);
   if (!($44)) {
    $$0$i12 = 0;
    return ($$0$i12|0);
   }
   $45 = ((($43)) + 40|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = ($46|0)<($n|0);
   if ($47) {
    $$0$i12 = 0;
    return ($$0$i12|0);
   }
   $48 = (($n) + -1)|0;
   $49 = (((($41)) + 16|0) + ($48<<2)|0);
   $50 = HEAP32[$49>>2]|0;
   $51 = ((($50)) + 8|0);
   $52 = HEAP32[$51>>2]|0;
   $53 = ((($43)) + 28|0);
   $54 = HEAP32[$53>>2]|0;
   $55 = (($54) + ($48<<3)|0);
   $56 = HEAP32[$55>>2]|0;
   $57 = ($56|0)==(0|0);
   if ($57) {
    $$0$i15 = 20754;$60 = $52;
   } else {
    $58 = ((($56)) + 16|0);
    $$0$i15 = $58;$60 = $52;
   }
   break;
  }
  default: {
   $$0$i12 = 0;
   return ($$0$i12|0);
  }
  }
 } while(0);
 $59 = $60;
 $61 = ((($L)) + 8|0);
 $62 = HEAP32[$61>>2]|0;
 $63 = $60;
 $64 = $63;
 $65 = $64;
 $66 = HEAP32[$65>>2]|0;
 $67 = (($64) + 4)|0;
 $68 = $67;
 $69 = HEAP32[$68>>2]|0;
 $70 = $62;
 $71 = $70;
 HEAP32[$71>>2] = $66;
 $72 = (($70) + 4)|0;
 $73 = $72;
 HEAP32[$73>>2] = $69;
 $74 = ((($59)) + 8|0);
 $75 = HEAP32[$74>>2]|0;
 $76 = ((($62)) + 8|0);
 HEAP32[$76>>2] = $75;
 $77 = HEAP32[$61>>2]|0;
 $78 = ((($77)) + 16|0);
 HEAP32[$61>>2] = $78;
 $$0$i12 = $$0$i15;
 return ($$0$i12|0);
}
function _lua_setupvalue($L,$funcindex,$n) {
 $L = $L|0;
 $funcindex = $funcindex|0;
 $n = $n|0;
 var $$0$i = 0, $$0$i12 = 0, $$0$i16 = 0, $$cast = 0, $$luaO_nilobject_$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($L)) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($funcindex|0)>(0);
 do {
  if ($2) {
   $3 = HEAP32[$1>>2]|0;
   $4 = (($3) + ($funcindex<<4)|0);
   $5 = ((($L)) + 8|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = ($4>>>0)<($6>>>0);
   $$luaO_nilobject_$i = $7 ? $4 : 24;
   $$0$i = $$luaO_nilobject_$i;
  } else {
   $8 = ($funcindex|0)<(-1000999);
   if (!($8)) {
    $9 = ((($L)) + 8|0);
    $10 = HEAP32[$9>>2]|0;
    $11 = (($10) + ($funcindex<<4)|0);
    $$0$i = $11;
    break;
   }
   $12 = ($funcindex|0)==(-1001000);
   if ($12) {
    $13 = ((($L)) + 12|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = ((($14)) + 40|0);
    $$0$i = $15;
    break;
   }
   $16 = (-1001000 - ($funcindex))|0;
   $17 = HEAP32[$1>>2]|0;
   $18 = ((($17)) + 8|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = ($19|0)==(22);
   if ($20) {
    $$0$i = 24;
   } else {
    $21 = HEAP32[$17>>2]|0;
    $22 = ((($21)) + 6|0);
    $23 = HEAP8[$22>>0]|0;
    $24 = $23&255;
    $25 = ($16|0)>($24|0);
    $26 = (($16) + -1)|0;
    $27 = (((($21)) + 16|0) + ($26<<4)|0);
    $28 = $25 ? 24 : $27;
    $$0$i = $28;
   }
  }
 } while(0);
 $29 = ((($$0$i)) + 8|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = $30 & 63;
 L12: do {
  switch ($31|0) {
  case 38:  {
   $32 = HEAP32[$$0$i>>2]|0;
   $33 = ($n|0)>(0);
   if (!($33)) {
    $$0$i12 = 0;
    return ($$0$i12|0);
   }
   $34 = ((($32)) + 6|0);
   $35 = HEAP8[$34>>0]|0;
   $36 = $35&255;
   $37 = ($36|0)<($n|0);
   if ($37) {
    $$0$i12 = 0;
    return ($$0$i12|0);
   } else {
    $38 = (($n) + -1)|0;
    $39 = (((($32)) + 16|0) + ($38<<4)|0);
    $40 = $39;
    $41 = $32;
    $$0$i16 = 20754;$64 = $40;$90 = $41;
    break L12;
   }
   break;
  }
  case 6:  {
   $42 = HEAP32[$$0$i>>2]|0;
   $43 = ((($42)) + 12|0);
   $44 = HEAP32[$43>>2]|0;
   $45 = ($n|0)>(0);
   if (!($45)) {
    $$0$i12 = 0;
    return ($$0$i12|0);
   }
   $46 = ((($44)) + 40|0);
   $47 = HEAP32[$46>>2]|0;
   $48 = ($47|0)<($n|0);
   if ($48) {
    $$0$i12 = 0;
    return ($$0$i12|0);
   }
   $49 = (($n) + -1)|0;
   $50 = (((($42)) + 16|0) + ($49<<2)|0);
   $51 = HEAP32[$50>>2]|0;
   $52 = ((($51)) + 8|0);
   $53 = HEAP32[$52>>2]|0;
   $$cast = $51;
   $54 = ((($44)) + 28|0);
   $55 = HEAP32[$54>>2]|0;
   $56 = (($55) + ($49<<3)|0);
   $57 = HEAP32[$56>>2]|0;
   $58 = ($57|0)==(0|0);
   if ($58) {
    $$0$i16 = 20754;$64 = $53;$90 = $$cast;
   } else {
    $59 = ((($57)) + 16|0);
    $$0$i16 = $59;$64 = $53;$90 = $$cast;
   }
   break;
  }
  default: {
   $$0$i12 = 0;
   return ($$0$i12|0);
  }
  }
 } while(0);
 $60 = ((($L)) + 8|0);
 $61 = HEAP32[$60>>2]|0;
 $62 = ((($61)) + -16|0);
 HEAP32[$60>>2] = $62;
 $63 = $64;
 $65 = $64;
 $66 = $62;
 $67 = $66;
 $68 = HEAP32[$67>>2]|0;
 $69 = (($66) + 4)|0;
 $70 = $69;
 $71 = HEAP32[$70>>2]|0;
 $72 = $65;
 $73 = $72;
 HEAP32[$73>>2] = $68;
 $74 = (($72) + 4)|0;
 $75 = $74;
 HEAP32[$75>>2] = $71;
 $76 = ((($61)) + -8|0);
 $77 = HEAP32[$76>>2]|0;
 $78 = ((($63)) + 8|0);
 HEAP32[$78>>2] = $77;
 $79 = HEAP32[$60>>2]|0;
 $80 = ((($79)) + 8|0);
 $81 = HEAP32[$80>>2]|0;
 $82 = $81 & 64;
 $83 = ($82|0)==(0);
 if ($83) {
  $$0$i12 = $$0$i16;
  return ($$0$i12|0);
 }
 $84 = HEAP32[$79>>2]|0;
 $85 = ((($84)) + 5|0);
 $86 = HEAP8[$85>>0]|0;
 $87 = $86 & 3;
 $88 = ($87<<24>>24)==(0);
 if ($88) {
  $$0$i12 = $$0$i16;
  return ($$0$i12|0);
 }
 $89 = $90;
 $91 = ((($89)) + 5|0);
 $92 = HEAP8[$91>>0]|0;
 $93 = $92 & 4;
 $94 = ($93<<24>>24)==(0);
 if ($94) {
  $$0$i12 = $$0$i16;
  return ($$0$i12|0);
 }
 _luaC_barrier_($L,$89,$84);
 $$0$i12 = $$0$i16;
 return ($$0$i12|0);
}
function _lua_upvalueid($L,$fidx,$n) {
 $L = $L|0;
 $fidx = $fidx|0;
 $n = $n|0;
 var $$0 = 0, $$0$i = 0, $$0$i$i = 0, $$luaO_nilobject_$i = 0, $$luaO_nilobject_$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($L)) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($fidx|0)>(0);
 do {
  if ($2) {
   $3 = HEAP32[$1>>2]|0;
   $4 = (($3) + ($fidx<<4)|0);
   $5 = ((($L)) + 8|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = ($4>>>0)<($6>>>0);
   $$luaO_nilobject_$i = $7 ? $4 : 24;
   $$0$i = $$luaO_nilobject_$i;
  } else {
   $8 = ($fidx|0)<(-1000999);
   if (!($8)) {
    $9 = ((($L)) + 8|0);
    $10 = HEAP32[$9>>2]|0;
    $11 = (($10) + ($fidx<<4)|0);
    $$0$i = $11;
    break;
   }
   $12 = ($fidx|0)==(-1001000);
   if ($12) {
    $13 = ((($L)) + 12|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = ((($14)) + 40|0);
    $$0$i = $15;
    break;
   }
   $16 = (-1001000 - ($fidx))|0;
   $17 = HEAP32[$1>>2]|0;
   $18 = ((($17)) + 8|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = ($19|0)==(22);
   if ($20) {
    $$0$i = 24;
   } else {
    $21 = HEAP32[$17>>2]|0;
    $22 = ((($21)) + 6|0);
    $23 = HEAP8[$22>>0]|0;
    $24 = $23&255;
    $25 = ($16|0)>($24|0);
    $26 = (($16) + -1)|0;
    $27 = (((($21)) + 16|0) + ($26<<4)|0);
    $28 = $25 ? 24 : $27;
    $$0$i = $28;
   }
  }
 } while(0);
 $29 = ((($$0$i)) + 8|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = $30 & 63;
 switch ($31|0) {
 case 6:  {
  do {
   if ($2) {
    $32 = HEAP32[$1>>2]|0;
    $33 = (($32) + ($fidx<<4)|0);
    $34 = ((($L)) + 8|0);
    $35 = HEAP32[$34>>2]|0;
    $36 = ($33>>>0)<($35>>>0);
    $$luaO_nilobject_$i$i = $36 ? $33 : 24;
    $$0$i$i = $$luaO_nilobject_$i$i;
   } else {
    $37 = ($fidx|0)<(-1000999);
    if (!($37)) {
     $38 = ((($L)) + 8|0);
     $39 = HEAP32[$38>>2]|0;
     $40 = (($39) + ($fidx<<4)|0);
     $$0$i$i = $40;
     break;
    }
    $41 = ($fidx|0)==(-1001000);
    if ($41) {
     $42 = ((($L)) + 12|0);
     $43 = HEAP32[$42>>2]|0;
     $44 = ((($43)) + 40|0);
     $$0$i$i = $44;
     break;
    }
    $45 = (-1001000 - ($fidx))|0;
    $46 = HEAP32[$1>>2]|0;
    $47 = ((($46)) + 8|0);
    $48 = HEAP32[$47>>2]|0;
    $49 = ($48|0)==(22);
    if ($49) {
     $$0$i$i = 24;
    } else {
     $50 = HEAP32[$46>>2]|0;
     $51 = ((($50)) + 6|0);
     $52 = HEAP8[$51>>0]|0;
     $53 = $52&255;
     $54 = ($45|0)>($53|0);
     $55 = (($45) + -1)|0;
     $56 = (((($50)) + 16|0) + ($55<<4)|0);
     $57 = $54 ? 24 : $56;
     $$0$i$i = $57;
    }
   }
  } while(0);
  $58 = HEAP32[$$0$i$i>>2]|0;
  $59 = (($n) + -1)|0;
  $60 = (((($58)) + 16|0) + ($59<<2)|0);
  $61 = HEAP32[$60>>2]|0;
  $$0 = $61;
  return ($$0|0);
  break;
 }
 case 38:  {
  $62 = HEAP32[$$0$i>>2]|0;
  $63 = (($n) + -1)|0;
  $64 = (((($62)) + 16|0) + ($63<<4)|0);
  $$0 = $64;
  return ($$0|0);
  break;
 }
 default: {
  $$0 = 0;
  return ($$0|0);
 }
 }
 return (0)|0;
}
function _lua_upvaluejoin($L,$fidx1,$n1,$fidx2,$n2) {
 $L = $L|0;
 $fidx1 = $fidx1|0;
 $n1 = $n1|0;
 $fidx2 = $fidx2|0;
 $n2 = $n2|0;
 var $$0$i$i = 0, $$0$i$i2 = 0, $$luaO_nilobject_$i$i = 0, $$luaO_nilobject_$i$i1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($L)) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($fidx1|0)>(0);
 do {
  if ($2) {
   $3 = HEAP32[$1>>2]|0;
   $4 = (($3) + ($fidx1<<4)|0);
   $5 = ((($L)) + 8|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = ($4>>>0)<($6>>>0);
   $$luaO_nilobject_$i$i = $7 ? $4 : 24;
   $$0$i$i = $$luaO_nilobject_$i$i;
  } else {
   $8 = ($fidx1|0)<(-1000999);
   if (!($8)) {
    $9 = ((($L)) + 8|0);
    $10 = HEAP32[$9>>2]|0;
    $11 = (($10) + ($fidx1<<4)|0);
    $$0$i$i = $11;
    break;
   }
   $12 = ($fidx1|0)==(-1001000);
   if ($12) {
    $13 = ((($L)) + 12|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = ((($14)) + 40|0);
    $$0$i$i = $15;
    break;
   }
   $16 = (-1001000 - ($fidx1))|0;
   $17 = HEAP32[$1>>2]|0;
   $18 = ((($17)) + 8|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = ($19|0)==(22);
   if ($20) {
    $$0$i$i = 24;
   } else {
    $21 = HEAP32[$17>>2]|0;
    $22 = ((($21)) + 6|0);
    $23 = HEAP8[$22>>0]|0;
    $24 = $23&255;
    $25 = ($16|0)>($24|0);
    $26 = (($16) + -1)|0;
    $27 = (((($21)) + 16|0) + ($26<<4)|0);
    $28 = $25 ? 24 : $27;
    $$0$i$i = $28;
   }
  }
 } while(0);
 $29 = HEAP32[$$0$i$i>>2]|0;
 $30 = (($n1) + -1)|0;
 $31 = (((($29)) + 16|0) + ($30<<2)|0);
 $32 = ($fidx2|0)>(0);
 do {
  if ($32) {
   $33 = HEAP32[$1>>2]|0;
   $34 = (($33) + ($fidx2<<4)|0);
   $35 = ((($L)) + 8|0);
   $36 = HEAP32[$35>>2]|0;
   $37 = ($34>>>0)<($36>>>0);
   $$luaO_nilobject_$i$i1 = $37 ? $34 : 24;
   $$0$i$i2 = $$luaO_nilobject_$i$i1;
  } else {
   $38 = ($fidx2|0)<(-1000999);
   if (!($38)) {
    $39 = ((($L)) + 8|0);
    $40 = HEAP32[$39>>2]|0;
    $41 = (($40) + ($fidx2<<4)|0);
    $$0$i$i2 = $41;
    break;
   }
   $42 = ($fidx2|0)==(-1001000);
   if ($42) {
    $43 = ((($L)) + 12|0);
    $44 = HEAP32[$43>>2]|0;
    $45 = ((($44)) + 40|0);
    $$0$i$i2 = $45;
    break;
   }
   $46 = (-1001000 - ($fidx2))|0;
   $47 = HEAP32[$1>>2]|0;
   $48 = ((($47)) + 8|0);
   $49 = HEAP32[$48>>2]|0;
   $50 = ($49|0)==(22);
   if ($50) {
    $$0$i$i2 = 24;
   } else {
    $51 = HEAP32[$47>>2]|0;
    $52 = ((($51)) + 6|0);
    $53 = HEAP8[$52>>0]|0;
    $54 = $53&255;
    $55 = ($46|0)>($54|0);
    $56 = (($46) + -1)|0;
    $57 = (((($51)) + 16|0) + ($56<<4)|0);
    $58 = $55 ? 24 : $57;
    $$0$i$i2 = $58;
   }
  }
 } while(0);
 $59 = HEAP32[$$0$i$i2>>2]|0;
 $60 = (($n2) + -1)|0;
 $61 = (((($59)) + 16|0) + ($60<<2)|0);
 $62 = HEAP32[$61>>2]|0;
 HEAP32[$31>>2] = $62;
 $63 = HEAP32[$61>>2]|0;
 $64 = ((($63)) + 5|0);
 $65 = HEAP8[$64>>0]|0;
 $66 = $65 & 3;
 $67 = ($66<<24>>24)==(0);
 if ($67) {
  return;
 }
 $68 = ((($29)) + 5|0);
 $69 = HEAP8[$68>>0]|0;
 $70 = $69 & 4;
 $71 = ($70<<24>>24)==(0);
 if ($71) {
  return;
 }
 _luaC_barrier_($L,$29,$63);
 return;
}
function _growstack($L,$ud) {
 $L = $L|0;
 $ud = $ud|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$ud>>2]|0;
 _luaD_growstack($L,$0);
 return;
}
function _f_call($L,$ud) {
 $L = $L|0;
 $ud = $ud|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$ud>>2]|0;
 $1 = ((($ud)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 _luaD_call($L,$0,$2,0);
 return;
}
function _lua_sethook($L,$func,$mask,$count) {
 $L = $L|0;
 $func = $func|0;
 $mask = $mask|0;
 $count = $count|0;
 var $$func = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = ($func|0)==(0|0);
 $1 = ($mask|0)==(0);
 $or$cond = $0 | $1;
 $$func = $or$cond ? 0 : $func;
 $2 = ((($L)) + 16|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 18|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = $5 & 1;
 $7 = ($6<<24>>24)==(0);
 if (!($7)) {
  $8 = ((($3)) + 28|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ((($L)) + 20|0);
  HEAP32[$10>>2] = $9;
 }
 $11 = ((($L)) + 52|0);
 HEAP32[$11>>2] = $$func;
 $12 = ((($L)) + 44|0);
 HEAP32[$12>>2] = $count;
 $13 = ((($L)) + 48|0);
 HEAP32[$13>>2] = $count;
 $14 = $mask&255;
 $15 = $or$cond ? 0 : $14;
 $16 = ((($L)) + 40|0);
 HEAP8[$16>>0] = $15;
 return 1;
}
function _lua_gethook($L) {
 $L = $L|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($L)) + 52|0);
 $1 = HEAP32[$0>>2]|0;
 return ($1|0);
}
function _lua_gethookmask($L) {
 $L = $L|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($L)) + 40|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1&255;
 return ($2|0);
}
function _lua_gethookcount($L) {
 $L = $L|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($L)) + 44|0);
 $1 = HEAP32[$0>>2]|0;
 return ($1|0);
}
function _lua_getstack($L,$level,$ar) {
 $L = $L|0;
 $level = $level|0;
 $ar = $ar|0;
 var $$0 = 0, $$01$lcssa = 0, $$014 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ci$0 = 0, $ci$0$lcssa = 0, $ci$03 = 0;
 var $ci$05 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($level|0)<(0);
 if ($0) {
  $$0 = 0;
  return ($$0|0);
 }
 $1 = ((($L)) + 16|0);
 $ci$03 = HEAP32[$1>>2]|0;
 $2 = ($level|0)>(0);
 $3 = ((($L)) + 72|0);
 $4 = ($ci$03|0)!=($3|0);
 $5 = $2 & $4;
 if ($5) {
  $$014 = $level;$ci$05 = $ci$03;
  while(1) {
   $6 = (($$014) + -1)|0;
   $7 = ((($ci$05)) + 8|0);
   $ci$0 = HEAP32[$7>>2]|0;
   $8 = ($$014|0)>(1);
   $9 = ($ci$0|0)!=($3|0);
   $10 = $8 & $9;
   if ($10) {
    $$014 = $6;$ci$05 = $ci$0;
   } else {
    $$01$lcssa = $6;$ci$0$lcssa = $ci$0;
    break;
   }
  }
 } else {
  $$01$lcssa = $level;$ci$0$lcssa = $ci$03;
 }
 $11 = ($$01$lcssa|0)!=(0);
 $12 = ($ci$0$lcssa|0)==($3|0);
 $or$cond = $11 | $12;
 if ($or$cond) {
  $$0 = 0;
  return ($$0|0);
 }
 $13 = ((($ar)) + 96|0);
 HEAP32[$13>>2] = $ci$0$lcssa;
 $$0 = 1;
 return ($$0|0);
}
function _lua_getlocal($L,$ar,$n) {
 $L = $L|0;
 $ar = $ar|0;
 $n = $n|0;
 var $$0$i$ph = 0, $$in$i = 0, $$ph = 0, $$sum$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $9 = 0, $base$02$i = 0, $base$03$i = 0, $name$0 = 0, $name$1$i = 0, $or$cond$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($ar|0)==(0|0);
 if ($0) {
  $1 = ((($L)) + 8|0);
  $2 = HEAP32[$1>>2]|0;
  $3 = ((($2)) + -8|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($4|0)==(70);
  if (!($5)) {
   $name$0 = 0;
   return ($name$0|0);
  }
  $6 = ((($2)) + -16|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ((($7)) + 12|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = (_luaF_getlocalname($9,$n,0)|0);
  $name$0 = $10;
  return ($name$0|0);
 }
 $11 = ((($ar)) + 96|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ((($12)) + 18|0);
 $14 = HEAP8[$13>>0]|0;
 $15 = $14 & 1;
 $16 = ($15<<24>>24)==(0);
 do {
  if ($16) {
   $35 = HEAP32[$12>>2]|0;
   $36 = ((($35)) + 16|0);
   $base$02$i = $36;
   label = 10;
  } else {
   $17 = ($n|0)<(0);
   if (!($17)) {
    $37 = ((($12)) + 24|0);
    $38 = HEAP32[$37>>2]|0;
    $39 = HEAP32[$12>>2]|0;
    $40 = HEAP32[$39>>2]|0;
    $41 = ((($40)) + 12|0);
    $42 = HEAP32[$41>>2]|0;
    $43 = ((($12)) + 28|0);
    $44 = HEAP32[$43>>2]|0;
    $45 = ((($42)) + 12|0);
    $46 = HEAP32[$45>>2]|0;
    $47 = $44;
    $48 = $46;
    $49 = (($47) - ($48))|0;
    $50 = $49 >> 2;
    $51 = (($50) + -1)|0;
    $52 = (_luaF_getlocalname($42,$n,$51)|0);
    $53 = ($52|0)==(0|0);
    if ($53) {
     $base$02$i = $38;
     label = 10;
     break;
    } else {
     $base$03$i = $38;$name$1$i = $52;
     label = 14;
     break;
    }
   }
   $18 = (0 - ($n))|0;
   $19 = HEAP32[$12>>2]|0;
   $20 = HEAP32[$19>>2]|0;
   $21 = ((($20)) + 12|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = ((($22)) + 76|0);
   $24 = HEAP8[$23>>0]|0;
   $25 = $24&255;
   $26 = ((($12)) + 24|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = $27;
   $29 = $19;
   $30 = (($28) - ($29))|0;
   $31 = $30 >> 4;
   $32 = (($31) - ($25))|0;
   $33 = ($32|0)>($18|0);
   if ($33) {
    $$sum$i$i = (($25) - ($n))|0;
    $34 = (($19) + ($$sum$i$i<<4)|0);
    $$0$i$ph = 5270;$$ph = $34;
    break;
   } else {
    $name$0 = 0;
    return ($name$0|0);
   }
  }
 } while(0);
 if ((label|0) == 10) {
  $54 = ((($L)) + 16|0);
  $55 = HEAP32[$54>>2]|0;
  $56 = ($55|0)==($12|0);
  if ($56) {
   $57 = ((($L)) + 8|0);
   $$in$i = $57;
  } else {
   $58 = ((($12)) + 12|0);
   $59 = HEAP32[$58>>2]|0;
   $$in$i = $59;
  }
  $60 = HEAP32[$$in$i>>2]|0;
  $61 = $60;
  $62 = $base$02$i;
  $63 = (($61) - ($62))|0;
  $64 = $63 >> 4;
  $65 = ($64|0)>=($n|0);
  $66 = ($n|0)>(0);
  $or$cond$i = $66 & $65;
  if ($or$cond$i) {
   $base$03$i = $base$02$i;$name$1$i = 5257;
   label = 14;
  } else {
   $name$0 = 0;
   return ($name$0|0);
  }
 }
 if ((label|0) == 14) {
  $67 = (($n) + -1)|0;
  $68 = (($base$03$i) + ($67<<4)|0);
  $$0$i$ph = $name$1$i;$$ph = $68;
 }
 $69 = ((($L)) + 8|0);
 $70 = HEAP32[$69>>2]|0;
 $71 = $$ph;
 $72 = $71;
 $73 = HEAP32[$72>>2]|0;
 $74 = (($71) + 4)|0;
 $75 = $74;
 $76 = HEAP32[$75>>2]|0;
 $77 = $70;
 $78 = $77;
 HEAP32[$78>>2] = $73;
 $79 = (($77) + 4)|0;
 $80 = $79;
 HEAP32[$80>>2] = $76;
 $81 = ((($$ph)) + 8|0);
 $82 = HEAP32[$81>>2]|0;
 $83 = ((($70)) + 8|0);
 HEAP32[$83>>2] = $82;
 $84 = HEAP32[$69>>2]|0;
 $85 = ((($84)) + 16|0);
 HEAP32[$69>>2] = $85;
 $name$0 = $$0$i$ph;
 return ($name$0|0);
}
function _lua_setlocal($L,$ar,$n) {
 $L = $L|0;
 $ar = $ar|0;
 $n = $n|0;
 var $$0$i$ph = 0, $$0$i1 = 0, $$in$i = 0, $$ph = 0, $$sum$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $8 = 0, $9 = 0, $base$02$i = 0, $base$03$i = 0, $name$1$i = 0, $or$cond$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($ar)) + 96|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 18|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = $3 & 1;
 $5 = ($4<<24>>24)==(0);
 do {
  if ($5) {
   $24 = HEAP32[$1>>2]|0;
   $25 = ((($24)) + 16|0);
   $base$02$i = $25;
   label = 7;
  } else {
   $6 = ($n|0)<(0);
   if (!($6)) {
    $26 = ((($1)) + 24|0);
    $27 = HEAP32[$26>>2]|0;
    $28 = HEAP32[$1>>2]|0;
    $29 = HEAP32[$28>>2]|0;
    $30 = ((($29)) + 12|0);
    $31 = HEAP32[$30>>2]|0;
    $32 = ((($1)) + 28|0);
    $33 = HEAP32[$32>>2]|0;
    $34 = ((($31)) + 12|0);
    $35 = HEAP32[$34>>2]|0;
    $36 = $33;
    $37 = $35;
    $38 = (($36) - ($37))|0;
    $39 = $38 >> 2;
    $40 = (($39) + -1)|0;
    $41 = (_luaF_getlocalname($31,$n,$40)|0);
    $42 = ($41|0)==(0|0);
    if ($42) {
     $base$02$i = $27;
     label = 7;
     break;
    } else {
     $base$03$i = $27;$name$1$i = $41;
     label = 11;
     break;
    }
   }
   $7 = (0 - ($n))|0;
   $8 = HEAP32[$1>>2]|0;
   $9 = HEAP32[$8>>2]|0;
   $10 = ((($9)) + 12|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = ((($11)) + 76|0);
   $13 = HEAP8[$12>>0]|0;
   $14 = $13&255;
   $15 = ((($1)) + 24|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = $16;
   $18 = $8;
   $19 = (($17) - ($18))|0;
   $20 = $19 >> 4;
   $21 = (($20) - ($14))|0;
   $22 = ($21|0)>($7|0);
   if ($22) {
    $$sum$i$i = (($14) - ($n))|0;
    $23 = (($8) + ($$sum$i$i<<4)|0);
    $$0$i$ph = 5270;$$ph = $23;
    break;
   } else {
    $$0$i1 = 0;
    $74 = ((($L)) + 8|0);
    $75 = HEAP32[$74>>2]|0;
    $76 = ((($75)) + -16|0);
    HEAP32[$74>>2] = $76;
    return ($$0$i1|0);
   }
  }
 } while(0);
 if ((label|0) == 7) {
  $43 = ((($L)) + 16|0);
  $44 = HEAP32[$43>>2]|0;
  $45 = ($44|0)==($1|0);
  if ($45) {
   $46 = ((($L)) + 8|0);
   $$in$i = $46;
  } else {
   $47 = ((($1)) + 12|0);
   $48 = HEAP32[$47>>2]|0;
   $$in$i = $48;
  }
  $49 = HEAP32[$$in$i>>2]|0;
  $50 = $49;
  $51 = $base$02$i;
  $52 = (($50) - ($51))|0;
  $53 = $52 >> 4;
  $54 = ($53|0)>=($n|0);
  $55 = ($n|0)>(0);
  $or$cond$i = $55 & $54;
  if ($or$cond$i) {
   $base$03$i = $base$02$i;$name$1$i = 5257;
   label = 11;
  } else {
   $$0$i1 = 0;
   $74 = ((($L)) + 8|0);
   $75 = HEAP32[$74>>2]|0;
   $76 = ((($75)) + -16|0);
   HEAP32[$74>>2] = $76;
   return ($$0$i1|0);
  }
 }
 if ((label|0) == 11) {
  $56 = (($n) + -1)|0;
  $57 = (($base$03$i) + ($56<<4)|0);
  $$0$i$ph = $name$1$i;$$ph = $57;
 }
 $58 = ((($L)) + 8|0);
 $59 = HEAP32[$58>>2]|0;
 $60 = ((($59)) + -16|0);
 $61 = $60;
 $62 = $61;
 $63 = HEAP32[$62>>2]|0;
 $64 = (($61) + 4)|0;
 $65 = $64;
 $66 = HEAP32[$65>>2]|0;
 $67 = $$ph;
 $68 = $67;
 HEAP32[$68>>2] = $63;
 $69 = (($67) + 4)|0;
 $70 = $69;
 HEAP32[$70>>2] = $66;
 $71 = ((($59)) + -8|0);
 $72 = HEAP32[$71>>2]|0;
 $73 = ((($$ph)) + 8|0);
 HEAP32[$73>>2] = $72;
 $$0$i1 = $$0$i$ph;
 $74 = ((($L)) + 8|0);
 $75 = HEAP32[$74>>2]|0;
 $76 = ((($75)) + -16|0);
 HEAP32[$74>>2] = $76;
 return ($$0$i1|0);
}
function _lua_getinfo($L,$what,$ar) {
 $L = $L|0;
 $what = $what|0;
 $ar = $ar|0;
 var $$0 = 0, $$01$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0;
 var $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ci$0 = 0, $func$0 = 0, $i$01$i = 0, $status$0$lcssa$i = 0;
 var $status$02$i = 0, $status$1$i = 0, $storemerge$ph$i = 0, $storemerge3$i = 0, $tm$0$i$i = 0, $v$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $v$i = sp;
 $0 = HEAP8[$what>>0]|0;
 $1 = ($0<<24>>24)==(62);
 if ($1) {
  $2 = ((($L)) + 8|0);
  $3 = HEAP32[$2>>2]|0;
  $4 = ((($3)) + -16|0);
  $5 = ((($what)) + 1|0);
  HEAP32[$2>>2] = $4;
  $$0 = $5;$ci$0 = 0;$func$0 = $4;
 } else {
  $6 = ((($ar)) + 96|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = HEAP32[$7>>2]|0;
  $$0 = $what;$ci$0 = $7;$func$0 = $8;
 }
 $9 = ((($func$0)) + 8|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $10 & 31;
 $12 = ($11|0)==(6);
 if ($12) {
  $13 = HEAP32[$func$0>>2]|0;
  $17 = $13;
 } else {
  $17 = 0;
 }
 $14 = HEAP8[$$0>>0]|0;
 $15 = ($14<<24>>24)==(0);
 L8: do {
  if ($15) {
   $status$0$lcssa$i = 1;
  } else {
   $16 = ($17|0)==(0|0);
   $18 = ((($ar)) + 16|0);
   $19 = ((($ar)) + 24|0);
   $20 = ((($ar)) + 28|0);
   $21 = ((($ar)) + 12|0);
   $22 = ((($ar)) + 36|0);
   $23 = ((($17)) + 4|0);
   $24 = ((($17)) + 12|0);
   $25 = ($ci$0|0)==(0|0);
   $26 = ((($ar)) + 20|0);
   $27 = ((($ci$0)) + 18|0);
   $28 = ((($ci$0)) + 28|0);
   $29 = ((($ar)) + 32|0);
   $30 = ((($ar)) + 34|0);
   $31 = ((($ar)) + 33|0);
   $32 = ((($17)) + 6|0);
   $33 = ((($ar)) + 35|0);
   $34 = ((($ar)) + 8|0);
   $35 = ((($ar)) + 4|0);
   $36 = ((($ci$0)) + 8|0);
   $37 = ((($L)) + 12|0);
   $$01$i = $$0;$39 = $14;$status$02$i = 1;
   while(1) {
    $38 = $39 << 24 >> 24;
    L12: do {
     switch ($38|0) {
     case 83:  {
      if ($16) {
       label = 11;
      } else {
       $40 = HEAP8[$23>>0]|0;
       $41 = ($40<<24>>24)==(38);
       if ($41) {
        label = 11;
       } else {
        $42 = HEAP32[$24>>2]|0;
        $43 = ((($42)) + 36|0);
        $44 = HEAP32[$43>>2]|0;
        $45 = ($44|0)==(0|0);
        $46 = ((($44)) + 16|0);
        $47 = $45 ? 5285 : $46;
        HEAP32[$18>>2] = $47;
        $48 = ((($42)) + 64|0);
        $49 = HEAP32[$48>>2]|0;
        HEAP32[$19>>2] = $49;
        $50 = ((($42)) + 68|0);
        $51 = HEAP32[$50>>2]|0;
        HEAP32[$20>>2] = $51;
        $52 = ($49|0)==(0);
        $53 = $52 ? 5288 : 5293;
        $54 = $47;$storemerge3$i = $53;
       }
      }
      if ((label|0) == 11) {
       label = 0;
       HEAP32[$18>>2] = 5280;
       HEAP32[$19>>2] = -1;
       HEAP32[$20>>2] = -1;
       $54 = 5280;$storemerge3$i = 5297;
      }
      HEAP32[$21>>2] = $storemerge3$i;
      _luaO_chunkid($22,$54,60);
      $status$1$i = $status$02$i;
      break;
     }
     case 108:  {
      if ($25) {
       $75 = -1;
      } else {
       $55 = HEAP8[$27>>0]|0;
       $56 = $55 & 1;
       $57 = ($56<<24>>24)==(0);
       if ($57) {
        $75 = -1;
       } else {
        $58 = HEAP32[$ci$0>>2]|0;
        $59 = HEAP32[$58>>2]|0;
        $60 = ((($59)) + 12|0);
        $61 = HEAP32[$60>>2]|0;
        $62 = ((($61)) + 20|0);
        $63 = HEAP32[$62>>2]|0;
        $64 = ($63|0)==(0|0);
        if ($64) {
         $75 = 0;
        } else {
         $65 = HEAP32[$28>>2]|0;
         $66 = ((($61)) + 12|0);
         $67 = HEAP32[$66>>2]|0;
         $68 = $65;
         $69 = $67;
         $70 = (($68) - ($69))|0;
         $71 = $70 >> 2;
         $72 = (($71) + -1)|0;
         $73 = (($63) + ($72<<2)|0);
         $74 = HEAP32[$73>>2]|0;
         $75 = $74;
        }
       }
      }
      HEAP32[$26>>2] = $75;
      $status$1$i = $status$02$i;
      break;
     }
     case 117:  {
      if ($16) {
       HEAP8[$29>>0] = 0;
      } else {
       $76 = HEAP8[$32>>0]|0;
       HEAP8[$29>>0] = $76;
       $77 = HEAP8[$23>>0]|0;
       $78 = ($77<<24>>24)==(38);
       if (!($78)) {
        $79 = HEAP32[$24>>2]|0;
        $80 = ((($79)) + 77|0);
        $81 = HEAP8[$80>>0]|0;
        HEAP8[$30>>0] = $81;
        $82 = ((($79)) + 76|0);
        $83 = HEAP8[$82>>0]|0;
        HEAP8[$31>>0] = $83;
        $status$1$i = $status$02$i;
        break L12;
       }
      }
      HEAP8[$30>>0] = 1;
      HEAP8[$31>>0] = 0;
      $status$1$i = $status$02$i;
      break;
     }
     case 116:  {
      if ($25) {
       $88 = 0;
      } else {
       $84 = HEAP8[$27>>0]|0;
       $85 = $84&255;
       $86 = $85 & 64;
       $88 = $86;
      }
      $87 = $88&255;
      HEAP8[$33>>0] = $87;
      $status$1$i = $status$02$i;
      break;
     }
     case 110:  {
      L38: do {
       if ($25) {
        label = 46;
       } else {
        $89 = HEAP8[$27>>0]|0;
        $90 = $89 & 64;
        $91 = ($90<<24>>24)==(0);
        if ($91) {
         $92 = HEAP32[$36>>2]|0;
         $93 = ((($92)) + 18|0);
         $94 = HEAP8[$93>>0]|0;
         $95 = $94 & 1;
         $96 = ($95<<24>>24)==(0);
         if ($96) {
          label = 46;
         } else {
          $97 = HEAP32[$92>>2]|0;
          $98 = HEAP32[$97>>2]|0;
          $99 = ((($98)) + 12|0);
          $100 = HEAP32[$99>>2]|0;
          $101 = ((($92)) + 28|0);
          $102 = HEAP32[$101>>2]|0;
          $103 = ((($100)) + 12|0);
          $104 = HEAP32[$103>>2]|0;
          $105 = $102;
          $106 = $104;
          $107 = (($105) - ($106))|0;
          $108 = $107 >> 2;
          $109 = (($108) + -1)|0;
          $110 = (($104) + ($109<<2)|0);
          $111 = HEAP32[$110>>2]|0;
          $112 = $111 & 63;
          do {
           switch ($112|0) {
           case 30: case 29:  {
            $117 = $111 >>> 6;
            $118 = $117 & 255;
            $119 = (_getobjname($100,$109,$118,$35)|0);
            HEAP32[$34>>2] = $119;
            $120 = ($119|0)==(0|0);
            if ($120) {
             break L38;
            } else {
             $status$1$i = $status$02$i;
             break L12;
            }
            break;
           }
           case 34:  {
            HEAP32[$35>>2] = 5299;
            $storemerge$ph$i = 5299;
            break;
           }
           case 7: case 6: case 12:  {
            $tm$0$i$i = 0;
            label = 45;
            break;
           }
           case 10: case 8:  {
            $tm$0$i$i = 1;
            label = 45;
            break;
           }
           case 24:  {
            $tm$0$i$i = 5;
            label = 45;
            break;
           }
           case 13:  {
            $tm$0$i$i = 6;
            label = 45;
            break;
           }
           case 14:  {
            $tm$0$i$i = 7;
            label = 45;
            break;
           }
           case 15:  {
            $tm$0$i$i = 8;
            label = 45;
            break;
           }
           case 16:  {
            $tm$0$i$i = 9;
            label = 45;
            break;
           }
           case 17:  {
            $tm$0$i$i = 10;
            label = 45;
            break;
           }
           case 18:  {
            $tm$0$i$i = 11;
            label = 45;
            break;
           }
           case 19:  {
            $tm$0$i$i = 12;
            label = 45;
            break;
           }
           case 21:  {
            $tm$0$i$i = 4;
            label = 45;
            break;
           }
           case 25:  {
            $tm$0$i$i = 13;
            label = 45;
            break;
           }
           case 26:  {
            $tm$0$i$i = 14;
            label = 45;
            break;
           }
           case 22:  {
            $tm$0$i$i = 15;
            label = 45;
            break;
           }
           default: {
            label = 46;
            break L38;
           }
           }
          } while(0);
          if ((label|0) == 45) {
           label = 0;
           $113 = HEAP32[$37>>2]|0;
           $114 = (((($113)) + 184|0) + ($tm$0$i$i<<2)|0);
           $115 = HEAP32[$114>>2]|0;
           $116 = ((($115)) + 16|0);
           HEAP32[$35>>2] = $116;
           $storemerge$ph$i = 5312;
          }
          HEAP32[$34>>2] = $storemerge$ph$i;
          $status$1$i = $status$02$i;
          break L12;
         }
        } else {
         label = 46;
        }
       }
      } while(0);
      if ((label|0) == 46) {
       label = 0;
       HEAP32[$34>>2] = 0;
      }
      HEAP32[$34>>2] = 20754;
      HEAP32[$35>>2] = 0;
      $status$1$i = $status$02$i;
      break;
     }
     case 102: case 76:  {
      $status$1$i = $status$02$i;
      break;
     }
     default: {
      $status$1$i = 0;
     }
     }
    } while(0);
    $121 = ((($$01$i)) + 1|0);
    $122 = HEAP8[$121>>0]|0;
    $123 = ($122<<24>>24)==(0);
    if ($123) {
     $status$0$lcssa$i = $status$1$i;
     break L8;
    } else {
     $$01$i = $121;$39 = $122;$status$02$i = $status$1$i;
    }
   }
  }
 } while(0);
 $124 = (_strchr($$0,102)|0);
 $125 = ($124|0)==(0|0);
 if (!($125)) {
  $126 = ((($L)) + 8|0);
  $127 = HEAP32[$126>>2]|0;
  $128 = $func$0;
  $129 = $128;
  $130 = HEAP32[$129>>2]|0;
  $131 = (($128) + 4)|0;
  $132 = $131;
  $133 = HEAP32[$132>>2]|0;
  $134 = $127;
  $135 = $134;
  HEAP32[$135>>2] = $130;
  $136 = (($134) + 4)|0;
  $137 = $136;
  HEAP32[$137>>2] = $133;
  $138 = HEAP32[$9>>2]|0;
  $139 = ((($127)) + 8|0);
  HEAP32[$139>>2] = $138;
  $140 = HEAP32[$126>>2]|0;
  $141 = ((($140)) + 16|0);
  HEAP32[$126>>2] = $141;
 }
 $142 = (_strchr($$0,76)|0);
 $143 = ($142|0)==(0|0);
 if ($143) {
  STACKTOP = sp;return ($status$0$lcssa$i|0);
 }
 $144 = ($17|0)==(0|0);
 if ($144) {
  label = 57;
 } else {
  $145 = ((($17)) + 4|0);
  $146 = HEAP8[$145>>0]|0;
  $147 = ($146<<24>>24)==(38);
  if ($147) {
   label = 57;
  } else {
   $152 = ((($17)) + 12|0);
   $153 = HEAP32[$152>>2]|0;
   $154 = ((($153)) + 20|0);
   $155 = HEAP32[$154>>2]|0;
   $156 = (_luaH_new($L)|0);
   $157 = ((($L)) + 8|0);
   $158 = HEAP32[$157>>2]|0;
   HEAP32[$158>>2] = $156;
   $159 = ((($158)) + 8|0);
   HEAP32[$159>>2] = 69;
   $160 = HEAP32[$157>>2]|0;
   $161 = ((($160)) + 16|0);
   HEAP32[$157>>2] = $161;
   HEAP32[$v$i>>2] = 1;
   $162 = ((($v$i)) + 8|0);
   HEAP32[$162>>2] = 1;
   $163 = HEAP32[$152>>2]|0;
   $164 = ((($163)) + 52|0);
   $165 = HEAP32[$164>>2]|0;
   $166 = ($165|0)>(0);
   if ($166) {
    $i$01$i = 0;
    while(1) {
     $167 = (($155) + ($i$01$i<<2)|0);
     $168 = HEAP32[$167>>2]|0;
     _luaH_setint($L,$156,$168,$v$i);
     $169 = (($i$01$i) + 1)|0;
     $170 = HEAP32[$152>>2]|0;
     $171 = ((($170)) + 52|0);
     $172 = HEAP32[$171>>2]|0;
     $173 = ($169|0)<($172|0);
     if ($173) {
      $i$01$i = $169;
     } else {
      break;
     }
    }
   }
  }
 }
 if ((label|0) == 57) {
  $148 = ((($L)) + 8|0);
  $149 = HEAP32[$148>>2]|0;
  $150 = ((($149)) + 8|0);
  HEAP32[$150>>2] = 0;
  $151 = ((($149)) + 16|0);
  HEAP32[$148>>2] = $151;
 }
 STACKTOP = sp;return ($status$0$lcssa$i|0);
}
function _luaG_typeerror($L,$o,$op) {
 $L = $L|0;
 $o = $o|0;
 $op = $op|0;
 var $$0$i$i = 0, $$idx$i = 0, $$idx$val$i = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $i$02$i = 0, $i$02$i$lcssa = 0, $kind$06 = 0, $name = 0, $p$01$i = 0, $vararg_buffer = 0, $vararg_buffer4 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer = sp;
 $name = sp + 24|0;
 $0 = ((($L)) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 HEAP32[$name>>2] = 0;
 $2 = ((($o)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 & 15;
 $5 = (($4) + 1)|0;
 $6 = (192 + ($5<<2)|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($1)) + 18|0);
 $9 = HEAP8[$8>>0]|0;
 $10 = $9 & 1;
 $11 = ($10<<24>>24)==(0);
 L1: do {
  if (!($11)) {
   $12 = HEAP32[$1>>2]|0;
   $13 = HEAP32[$12>>2]|0;
   $14 = ((($13)) + 6|0);
   $15 = HEAP8[$14>>0]|0;
   $16 = ($15<<24>>24)==(0);
   L3: do {
    if (!($16)) {
     $17 = $15&255;
     $i$02$i = 0;
     while(1) {
      $18 = (((($13)) + 16|0) + ($i$02$i<<2)|0);
      $19 = HEAP32[$18>>2]|0;
      $20 = ((($19)) + 8|0);
      $21 = HEAP32[$20>>2]|0;
      $22 = ($21|0)==($o|0);
      if ($22) {
       $i$02$i$lcssa = $i$02$i;
       break;
      }
      $23 = (($i$02$i) + 1)|0;
      $24 = ($23|0)<($17|0);
      if ($24) {
       $i$02$i = $23;
      } else {
       break L3;
      }
     }
     $25 = ((($13)) + 12|0);
     $26 = HEAP32[$25>>2]|0;
     $$idx$i = ((($26)) + 28|0);
     $$idx$val$i = HEAP32[$$idx$i>>2]|0;
     $27 = (($$idx$val$i) + ($i$02$i$lcssa<<3)|0);
     $28 = HEAP32[$27>>2]|0;
     $29 = ($28|0)==(0|0);
     $30 = ((($28)) + 16|0);
     $$0$i$i = $29 ? 12875 : $30;
     HEAP32[$name>>2] = $$0$i$i;
     $56 = $$0$i$i;$kind$06 = 5323;
     HEAP32[$vararg_buffer>>2] = $op;
     $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
     HEAP32[$vararg_ptr1>>2] = $kind$06;
     $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
     HEAP32[$vararg_ptr2>>2] = $56;
     $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
     HEAP32[$vararg_ptr3>>2] = $7;
     _luaG_runerror($L,5331,$vararg_buffer);
     // unreachable;
    }
   } while(0);
   $31 = ((($1)) + 24|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = ((($1)) + 4|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = ($32>>>0)<($34>>>0);
   if ($35) {
    $p$01$i = $32;
    while(1) {
     $38 = ($p$01$i|0)==($o|0);
     $37 = ((($p$01$i)) + 16|0);
     if ($38) {
      break;
     }
     $36 = ($37>>>0)<($34>>>0);
     if ($36) {
      $p$01$i = $37;
     } else {
      break L1;
     }
    }
    $39 = ((($13)) + 12|0);
    $40 = HEAP32[$39>>2]|0;
    $41 = ((($1)) + 28|0);
    $42 = HEAP32[$41>>2]|0;
    $43 = ((($40)) + 12|0);
    $44 = HEAP32[$43>>2]|0;
    $45 = $42;
    $46 = $44;
    $47 = (($45) - ($46))|0;
    $48 = $47 >> 2;
    $49 = (($48) + -1)|0;
    $50 = $o;
    $51 = $32;
    $52 = (($50) - ($51))|0;
    $53 = $52 >> 4;
    $54 = (_getobjname($40,$49,$53,$name)|0);
    $55 = ($54|0)==(0|0);
    if (!($55)) {
     $$pre = HEAP32[$name>>2]|0;
     $56 = $$pre;$kind$06 = $54;
     HEAP32[$vararg_buffer>>2] = $op;
     $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
     HEAP32[$vararg_ptr1>>2] = $kind$06;
     $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
     HEAP32[$vararg_ptr2>>2] = $56;
     $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
     HEAP32[$vararg_ptr3>>2] = $7;
     _luaG_runerror($L,5331,$vararg_buffer);
     // unreachable;
    }
   }
  }
 } while(0);
 HEAP32[$vararg_buffer4>>2] = $op;
 $vararg_ptr7 = ((($vararg_buffer4)) + 4|0);
 HEAP32[$vararg_ptr7>>2] = $7;
 _luaG_runerror($L,5366,$vararg_buffer4);
 // unreachable;
}
function _luaG_runerror($L,$fmt,$varargs) {
 $L = $L|0;
 $fmt = $fmt|0;
 $varargs = $varargs|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $argp = 0, $buff$i = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $buff$i = sp + 32|0;
 $argp = sp + 16|0;
 HEAP32[$argp>>2] = $varargs;
 $0 = (_luaO_pushvfstring($L,$fmt,$argp)|0);
 $1 = ((($L)) + 16|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 18|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = $4 & 1;
 $6 = ($5<<24>>24)==(0);
 if ($6) {
  _luaG_errormsg($L);
  // unreachable;
 }
 $7 = HEAP32[$2>>2]|0;
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($8)) + 12|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($10)) + 20|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)==(0|0);
 if ($13) {
  $30 = 0;
 } else {
  $14 = ((($2)) + 28|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = ((($10)) + 12|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = $15;
  $19 = $17;
  $20 = (($18) - ($19))|0;
  $21 = $20 >> 2;
  $22 = (($21) + -1)|0;
  $23 = (($12) + ($22<<2)|0);
  $24 = HEAP32[$23>>2]|0;
  $30 = $24;
 }
 $25 = ((($10)) + 36|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = ($26|0)==(0|0);
 if ($27) {
  HEAP8[$buff$i>>0] = 63;
  $29 = ((($buff$i)) + 1|0);
  HEAP8[$29>>0] = 0;
 } else {
  $28 = ((($26)) + 16|0);
  _luaO_chunkid($buff$i,$28,60);
 }
 HEAP32[$vararg_buffer>>2] = $buff$i;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $30;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $0;
 (_luaO_pushfstring($L,8616,$vararg_buffer)|0);
 _luaG_errormsg($L);
 // unreachable;
}
function _luaG_concaterror($L,$p1,$p2) {
 $L = $L|0;
 $p1 = $p1|0;
 $p2 = $p2|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($p1)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & 15;
 $3 = ($2|0)==(4);
 $4 = ($1|0)==(3);
 $or$cond = $4 | $3;
 $$0 = $or$cond ? $p2 : $p1;
 _luaG_typeerror($L,$$0,5391);
 // unreachable;
}
function _luaG_aritherror($L,$p1,$p2) {
 $L = $L|0;
 $p1 = $p1|0;
 $p2 = $p2|0;
 var $0 = 0, $1 = 0, $p1$p2 = 0, $temp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $temp = sp;
 $0 = (_luaV_tonumber($p1,$temp)|0);
 $1 = ($0|0)==(0|0);
 $p1$p2 = $1 ? $p1 : $p2;
 _luaG_typeerror($L,$p1$p2,5403);
 // unreachable;
}
function _luaG_ordererror($L,$p1,$p2) {
 $L = $L|0;
 $p1 = $p1|0;
 $p2 = $p2|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_ptr4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = ((($p1)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & 15;
 $3 = (($2) + 1)|0;
 $4 = (192 + ($3<<2)|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($p2)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $7 & 15;
 $9 = (($8) + 1)|0;
 $10 = (192 + ($9<<2)|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($5|0)==($11|0);
 if ($12) {
  HEAP32[$vararg_buffer>>2] = $5;
  _luaG_runerror($L,5425,$vararg_buffer);
  // unreachable;
 } else {
  HEAP32[$vararg_buffer1>>2] = $5;
  $vararg_ptr4 = ((($vararg_buffer1)) + 4|0);
  HEAP32[$vararg_ptr4>>2] = $11;
  _luaG_runerror($L,5458,$vararg_buffer1);
  // unreachable;
 }
}
function _luaG_errormsg($L) {
 $L = $L|0;
 var $$sum = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($L)) + 68|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if ($2) {
  _luaD_throw($L,2);
  // unreachable;
 }
 $3 = ((($L)) + 28|0);
 $4 = HEAP32[$3>>2]|0;
 $$sum = (($1) + 8)|0;
 $5 = (($4) + ($$sum)|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $6 & 15;
 $8 = ($7|0)==(6);
 if (!($8)) {
  _luaD_throw($L,6);
  // unreachable;
 }
 $9 = (($4) + ($1)|0);
 $10 = ((($L)) + 8|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ((($11)) + -16|0);
 $13 = $12;
 $14 = $13;
 $15 = HEAP32[$14>>2]|0;
 $16 = (($13) + 4)|0;
 $17 = $16;
 $18 = HEAP32[$17>>2]|0;
 $19 = $11;
 $20 = $19;
 HEAP32[$20>>2] = $15;
 $21 = (($19) + 4)|0;
 $22 = $21;
 HEAP32[$22>>2] = $18;
 $23 = ((($11)) + -8|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = ((($11)) + 8|0);
 HEAP32[$25>>2] = $24;
 $26 = HEAP32[$10>>2]|0;
 $27 = ((($26)) + -16|0);
 $28 = $9;
 $29 = $28;
 $30 = HEAP32[$29>>2]|0;
 $31 = (($28) + 4)|0;
 $32 = $31;
 $33 = HEAP32[$32>>2]|0;
 $34 = $27;
 $35 = $34;
 HEAP32[$35>>2] = $30;
 $36 = (($34) + 4)|0;
 $37 = $36;
 HEAP32[$37>>2] = $33;
 $38 = HEAP32[$5>>2]|0;
 $39 = ((($26)) + -8|0);
 HEAP32[$39>>2] = $38;
 $40 = HEAP32[$10>>2]|0;
 $41 = ((($40)) + 16|0);
 HEAP32[$10>>2] = $41;
 $42 = ((($40)) + -16|0);
 _luaD_call($L,$42,1,0);
 _luaD_throw($L,2);
 // unreachable;
}
function _getobjname($p,$lastpc,$reg,$name) {
 $p = $p|0;
 $lastpc = $lastpc|0;
 $reg = $reg|0;
 $name = $name|0;
 var $$0 = 0, $$0$i = 0, $$0$i2 = 0, $$lcssa = 0, $$lcssa101 = 0, $$lcssa96 = 0, $$lcssa97 = 0, $$lcssa98 = 0, $$lcssa99 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $lastpc$tr = 0, $or$cond$i = 0;
 var $or$cond3$i = 0, $p$idx = 0, $p$idx$val = 0, $p$idx1 = 0, $p$idx1$val = 0, $pc$0$$i = 0, $pc$0$setreg$0$i = 0, $pc$0$setreg$04$i = 0, $pc$06$i = 0, $pc$1$i = 0, $phitmp = 0, $reg$tr = 0, $setreg$0$pc$0$i = 0, $setreg$0$pc$01$i = 0, $setreg$0$pc$02$i = 0, $setreg$05$i = 0, $setreg$1$i = 0, $setreg$1$i$lcssa = 0, $setreg$1$i$lcssa$lcssa = 0, $setreg$1$i$lcssa$lcssa90 = 0;
 var $setreg$1$i$lcssa$lcssa92 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($p)) + 12|0);
 $lastpc$tr = $lastpc;$reg$tr = $reg;
 L1: while(1) {
  $1 = (($reg$tr) + 1)|0;
  $2 = (_luaF_getlocalname($p,$1,$lastpc$tr)|0);
  HEAP32[$name>>2] = $2;
  $3 = ($2|0)==(0|0);
  if (!($3)) {
   $$0 = 8692;
   label = 39;
   break;
  }
  $4 = ($lastpc$tr|0)>(0);
  if (!($4)) {
   $$0 = 0;
   label = 39;
   break;
  }
  $5 = HEAP32[$0>>2]|0;
  $pc$06$i = 0;$setreg$05$i = -1;
  while(1) {
   $6 = (($5) + ($pc$06$i<<2)|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = $7 & 63;
   $9 = $7 >>> 6;
   $10 = $9 & 255;
   switch ($8|0) {
   case 4:  {
    $11 = ($10|0)>($reg$tr|0);
    if ($11) {
     $pc$1$i = $pc$06$i;$setreg$1$i = $setreg$05$i;
    } else {
     $12 = $7 >>> 23;
     $13 = (($10) + ($12))|0;
     $14 = ($13|0)<($reg$tr|0);
     $setreg$0$pc$0$i = $14 ? $setreg$05$i : $pc$06$i;
     $pc$1$i = $pc$06$i;$setreg$1$i = $setreg$0$pc$0$i;
    }
    break;
   }
   case 34:  {
    $15 = (($10) + 2)|0;
    $16 = ($15|0)>($reg$tr|0);
    $setreg$0$pc$01$i = $16 ? $setreg$05$i : $pc$06$i;
    $pc$1$i = $pc$06$i;$setreg$1$i = $setreg$0$pc$01$i;
    break;
   }
   case 30: case 29:  {
    $17 = ($10|0)>($reg$tr|0);
    $setreg$0$pc$02$i = $17 ? $setreg$05$i : $pc$06$i;
    $pc$1$i = $pc$06$i;$setreg$1$i = $setreg$0$pc$02$i;
    break;
   }
   case 23:  {
    $18 = $7 >>> 14;
    $19 = (($18) + -131071)|0;
    $20 = (($pc$06$i) + 1)|0;
    $21 = (($20) + ($19))|0;
    $22 = ($pc$06$i|0)>=($21|0);
    $23 = ($21|0)>($lastpc$tr|0);
    $or$cond$i = $22 | $23;
    $24 = $or$cond$i ? 0 : $19;
    $pc$0$$i = (($24) + ($pc$06$i))|0;
    $pc$1$i = $pc$0$$i;$setreg$1$i = $setreg$05$i;
    break;
   }
   case 27:  {
    $25 = ($10|0)==($reg$tr|0);
    $pc$0$setreg$0$i = $25 ? $pc$06$i : $setreg$05$i;
    $pc$1$i = $pc$06$i;$setreg$1$i = $pc$0$setreg$0$i;
    break;
   }
   default: {
    $26 = (6156 + ($8)|0);
    $27 = HEAP8[$26>>0]|0;
    $28 = $27 & 64;
    $29 = ($28<<24>>24)!=(0);
    $30 = ($10|0)==($reg$tr|0);
    $or$cond3$i = $30 & $29;
    $pc$0$setreg$04$i = $or$cond3$i ? $pc$06$i : $setreg$05$i;
    $pc$1$i = $pc$06$i;$setreg$1$i = $pc$0$setreg$04$i;
   }
   }
   $31 = (($pc$1$i) + 1)|0;
   $32 = ($31|0)<($lastpc$tr|0);
   if ($32) {
    $pc$06$i = $31;$setreg$05$i = $setreg$1$i;
   } else {
    $setreg$1$i$lcssa = $setreg$1$i;
    break;
   }
  }
  $33 = ($setreg$1$i$lcssa|0)==(-1);
  if ($33) {
   $$0 = 0;
   label = 39;
   break;
  }
  $34 = (($5) + ($setreg$1$i$lcssa<<2)|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = $35 & 63;
  switch ($36|0) {
  case 7: case 6:  {
   $$lcssa = $35;$$lcssa101 = $36;$setreg$1$i$lcssa$lcssa = $setreg$1$i$lcssa;
   label = 17;
   break L1;
   break;
  }
  case 5:  {
   $$lcssa97 = $35;
   label = 28;
   break L1;
   break;
  }
  case 12:  {
   $$lcssa98 = $35;$setreg$1$i$lcssa$lcssa90 = $setreg$1$i$lcssa;
   label = 33;
   break L1;
   break;
  }
  case 1:  {
   $$lcssa99 = $35;
   label = 29;
   break L1;
   break;
  }
  case 2:  {
   $$lcssa96 = $5;$setreg$1$i$lcssa$lcssa92 = $setreg$1$i$lcssa;
   label = 30;
   break L1;
   break;
  }
  case 0:  {
   break;
  }
  default: {
   $$0 = 0;
   label = 39;
   break L1;
  }
  }
  $37 = $35 >>> 23;
  $38 = $35 >>> 6;
  $39 = $38 & 255;
  $40 = ($37>>>0)<($39>>>0);
  if ($40) {
   $lastpc$tr = $setreg$1$i$lcssa;$reg$tr = $37;
  } else {
   $$0 = 0;
   label = 39;
   break;
  }
 }
 if ((label|0) == 17) {
  $41 = $$lcssa >>> 14;
  $42 = $41 & 511;
  $43 = $$lcssa >>> 23;
  $44 = ($$lcssa101|0)==(7);
  if ($44) {
   $45 = (($43) + 1)|0;
   $46 = (_luaF_getlocalname($p,$45,$setreg$1$i$lcssa$lcssa)|0);
   $68 = $46;
  } else {
   $p$idx1 = ((($p)) + 28|0);
   $p$idx1$val = HEAP32[$p$idx1>>2]|0;
   $47 = (($p$idx1$val) + ($43<<3)|0);
   $48 = HEAP32[$47>>2]|0;
   $49 = ($48|0)==(0|0);
   $50 = ((($48)) + 16|0);
   $$0$i2 = $49 ? 12875 : $50;
   $68 = $$0$i2;
  }
  $51 = $41 & 256;
  $52 = ($51|0)==(0);
  if ($52) {
   $63 = (_getobjname($p,$setreg$1$i$lcssa$lcssa,$42,$name)|0);
   $64 = ($63|0)==(0|0);
   if ($64) {
    label = 25;
   } else {
    $65 = HEAP8[$63>>0]|0;
    $66 = ($65<<24>>24)==(99);
    if (!($66)) {
     label = 25;
    }
   }
  } else {
   $53 = $41 & 255;
   $54 = ((($p)) + 8|0);
   $55 = HEAP32[$54>>2]|0;
   $56 = (((($55) + ($53<<4)|0)) + 8|0);
   $57 = HEAP32[$56>>2]|0;
   $58 = $57 & 15;
   $59 = ($58|0)==(4);
   if ($59) {
    $60 = (($55) + ($53<<4)|0);
    $61 = HEAP32[$60>>2]|0;
    $62 = ((($61)) + 16|0);
    HEAP32[$name>>2] = $62;
   } else {
    label = 25;
   }
  }
  if ((label|0) == 25) {
   HEAP32[$name>>2] = 12875;
  }
  $67 = ($68|0)==(0|0);
  if ($67) {
   $$0 = 5495;
   return ($$0|0);
  }
  $69 = (_strcmp($68,8361)|0);
  $70 = ($69|0)==(0);
  $phitmp = $70 ? 5488 : 5495;
  $$0 = $phitmp;
  return ($$0|0);
 }
 else if ((label|0) == 28) {
  $71 = $$lcssa97 >>> 23;
  $p$idx = ((($p)) + 28|0);
  $p$idx$val = HEAP32[$p$idx>>2]|0;
  $72 = (($p$idx$val) + ($71<<3)|0);
  $73 = HEAP32[$72>>2]|0;
  $74 = ($73|0)==(0|0);
  $75 = ((($73)) + 16|0);
  $$0$i = $74 ? 12875 : $75;
  HEAP32[$name>>2] = $$0$i;
  $$0 = 5323;
  return ($$0|0);
 }
 else if ((label|0) == 29) {
  $76 = $$lcssa99 >>> 14;
  $84 = $76;
 }
 else if ((label|0) == 30) {
  $77 = (($setreg$1$i$lcssa$lcssa92) + 1)|0;
  $78 = (($$lcssa96) + ($77<<2)|0);
  $79 = HEAP32[$78>>2]|0;
  $80 = $79 >>> 6;
  $84 = $80;
 }
 else if ((label|0) == 33) {
  $91 = $$lcssa98 >>> 14;
  $92 = $91 & 256;
  $93 = ($92|0)==(0);
  if ($93) {
   $104 = $91 & 511;
   $105 = (_getobjname($p,$setreg$1$i$lcssa$lcssa90,$104,$name)|0);
   $106 = ($105|0)==(0|0);
   if (!($106)) {
    $107 = HEAP8[$105>>0]|0;
    $108 = ($107<<24>>24)==(99);
    if ($108) {
     $$0 = 7453;
     return ($$0|0);
    }
   }
  } else {
   $94 = $91 & 255;
   $95 = ((($p)) + 8|0);
   $96 = HEAP32[$95>>2]|0;
   $97 = (((($96) + ($94<<4)|0)) + 8|0);
   $98 = HEAP32[$97>>2]|0;
   $99 = $98 & 15;
   $100 = ($99|0)==(4);
   if ($100) {
    $101 = (($96) + ($94<<4)|0);
    $102 = HEAP32[$101>>2]|0;
    $103 = ((($102)) + 16|0);
    HEAP32[$name>>2] = $103;
    $$0 = 7453;
    return ($$0|0);
   }
  }
  HEAP32[$name>>2] = 12875;
  $$0 = 7453;
  return ($$0|0);
 }
 else if ((label|0) == 39) {
  return ($$0|0);
 }
 $81 = ((($p)) + 8|0);
 $82 = HEAP32[$81>>2]|0;
 $83 = (((($82) + ($84<<4)|0)) + 8|0);
 $85 = HEAP32[$83>>2]|0;
 $86 = $85 & 15;
 $87 = ($86|0)==(4);
 if (!($87)) {
  $$0 = 0;
  return ($$0|0);
 }
 $88 = (($82) + ($84<<4)|0);
 $89 = HEAP32[$88>>2]|0;
 $90 = ((($89)) + 16|0);
 HEAP32[$name>>2] = $90;
 $$0 = 5501;
 return ($$0|0);
}
function _luaD_throw($L,$errcode) {
 $L = $L|0;
 $errcode = $errcode|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($L)) + 64|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if (!($2)) {
  $3 = ((($1)) + 160|0);
  HEAP32[$3>>2] = $errcode;
  $4 = HEAP32[$0>>2]|0;
  $5 = ((($4)) + 4|0);
  _longjmp(($5|0),1);
  // unreachable;
 }
 $6 = $errcode&255;
 $7 = ((($L)) + 6|0);
 HEAP8[$7>>0] = $6;
 $8 = ((($L)) + 12|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($9)) + 172|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ((($11)) + 64|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13|0)==(0|0);
 if (!($14)) {
  $15 = ((($L)) + 8|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = ((($16)) + -16|0);
  $18 = ((($11)) + 8|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = ((($19)) + 16|0);
  HEAP32[$18>>2] = $20;
  $21 = $17;
  $22 = $21;
  $23 = HEAP32[$22>>2]|0;
  $24 = (($21) + 4)|0;
  $25 = $24;
  $26 = HEAP32[$25>>2]|0;
  $27 = $19;
  $28 = $27;
  HEAP32[$28>>2] = $23;
  $29 = (($27) + 4)|0;
  $30 = $29;
  HEAP32[$30>>2] = $26;
  $31 = ((($16)) + -8|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = ((($19)) + 8|0);
  HEAP32[$33>>2] = $32;
  $34 = HEAP32[$8>>2]|0;
  $35 = ((($34)) + 172|0);
  $36 = HEAP32[$35>>2]|0;
  _luaD_throw($36,$errcode);
  // unreachable;
 }
 $37 = ((($9)) + 168|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = ($38|0)==(0|0);
 if ($39) {
  _abort();
  // unreachable;
 }
 (FUNCTION_TABLE_ii[$38 & 511]($L)|0);
 _abort();
 // unreachable;
}
function _luaD_rawrunprotected($L,$f,$ud) {
 $L = $L|0;
 $f = $f|0;
 $ud = $ud|0;
 var $$reg2mem22$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cond = 0, $cond1 = 0, $lj = 0, _setjmpTable = 0;
 var _setjmpTableSize = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 _setjmpTableSize = 4;_setjmpTable = _malloc(40) | 0;HEAP32[_setjmpTable>>2]=0;
 $lj = sp;
 $0 = ((($L)) + 38|0);
 $1 = HEAP16[$0>>1]|0;
 $2 = ((($lj)) + 160|0);
 HEAP32[$2>>2] = 0;
 $3 = ((($L)) + 64|0);
 $4 = HEAP32[$3>>2]|0;
 HEAP32[$lj>>2] = $4;
 HEAP32[$3>>2] = $lj;
 $5 = ((($lj)) + 4|0);
 _setjmpTable = _saveSetjmp($5,1,_setjmpTable|0,_setjmpTableSize|0)|0;_setjmpTableSize = tempRet0;
 __THREW__ = 0;
 $6 = __THREW__; __THREW__ = 0;
 if ((($6|0) != 0) & ((threwValue|0) != 0)) { $7 = _testSetjmp(HEAP32[$6>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($7|0) == 0) { _longjmp($6|0, threwValue|0); } tempRet0 = (threwValue); } else { $7 = -1; };
 $8 = tempRet0;
 $cond = ($7|0)==(1);
 if ($cond) {
  $$reg2mem22$0 = $8;
 } else {
  $$reg2mem22$0 = 0;
 }
 while(1) {
  $9 = ($$reg2mem22$0|0)==(0);
  if (!($9)) {
   label = 6;
   break;
  }
  __THREW__ = 0;
  invoke_vii($f|0,($L|0),($ud|0));
  $10 = __THREW__; __THREW__ = 0;
  if ((($10|0) != 0) & ((threwValue|0) != 0)) { $11 = _testSetjmp(HEAP32[$10>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($11|0) == 0) { _longjmp($10|0, threwValue|0); } tempRet0 = (threwValue); } else { $11 = -1; };
  $12 = tempRet0;
  $cond1 = ($11|0)==(1);
  if ($cond1) {
   $$reg2mem22$0 = $12;
  } else {
   break;
  }
 }
 if ((label|0) == 6) {
  $13 = HEAP32[$lj>>2]|0;
  HEAP32[$3>>2] = $13;
  HEAP16[$0>>1] = $1;
  $14 = HEAP32[$2>>2]|0;
  _free(_setjmpTable|0);
  STACKTOP = sp;return ($14|0);
 }
 $13 = HEAP32[$lj>>2]|0;
 HEAP32[$3>>2] = $13;
 HEAP16[$0>>1] = $1;
 $14 = HEAP32[$2>>2]|0;
 _free(_setjmpTable|0);
 STACKTOP = sp;return ($14|0);
}
function _luaD_reallocstack($L,$newsize) {
 $L = $L|0;
 $newsize = $newsize|0;
 var $$sum = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ci$0$i = 0, $ci$01$i = 0, $ci$02$i = 0, $exitcond = 0;
 var $lim$01 = 0, $up$0$i = 0, $up$03$i = 0, $up$04$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($L)) + 28|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($L)) + 32|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($newsize) + 1)|0;
 $5 = ($4>>>0)>(268435455);
 if ($5) {
  _luaM_toobig($L);
  // unreachable;
 }
 $6 = $3 << 4;
 $7 = $newsize << 4;
 $8 = (_luaM_realloc_($L,$1,$6,$7)|0);
 HEAP32[$0>>2] = $8;
 $9 = ($3|0)<($newsize|0);
 if ($9) {
  $lim$01 = $3;
  while(1) {
   $10 = (((($8) + ($lim$01<<4)|0)) + 8|0);
   HEAP32[$10>>2] = 0;
   $11 = (($lim$01) + 1)|0;
   $exitcond = ($11|0)==($newsize|0);
   if ($exitcond) {
    break;
   } else {
    $lim$01 = $11;
   }
  }
 }
 HEAP32[$2>>2] = $newsize;
 $$sum = (($newsize) + -5)|0;
 $12 = (($8) + ($$sum<<4)|0);
 $13 = ((($L)) + 24|0);
 HEAP32[$13>>2] = $12;
 $14 = ((($L)) + 8|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $15;
 $17 = $1;
 $18 = (($16) - ($17))|0;
 $19 = $18 >> 4;
 $20 = (($8) + ($19<<4)|0);
 HEAP32[$14>>2] = $20;
 $21 = ((($L)) + 56|0);
 $up$03$i = HEAP32[$21>>2]|0;
 $22 = ($up$03$i|0)==(0|0);
 if (!($22)) {
  $up$04$i = $up$03$i;
  while(1) {
   $23 = ((($up$04$i)) + 8|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = $24;
   $26 = (($25) - ($17))|0;
   $27 = $26 >> 4;
   $28 = (($8) + ($27<<4)|0);
   HEAP32[$23>>2] = $28;
   $up$0$i = HEAP32[$up$04$i>>2]|0;
   $29 = ($up$0$i|0)==(0|0);
   if ($29) {
    break;
   } else {
    $up$04$i = $up$0$i;
   }
  }
 }
 $30 = ((($L)) + 16|0);
 $ci$01$i = HEAP32[$30>>2]|0;
 $31 = ($ci$01$i|0)==(0|0);
 if ($31) {
  return;
 } else {
  $ci$02$i = $ci$01$i;
 }
 while(1) {
  $32 = ((($ci$02$i)) + 4|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = $33;
  $35 = (($34) - ($17))|0;
  $36 = $35 >> 4;
  $37 = (($8) + ($36<<4)|0);
  HEAP32[$32>>2] = $37;
  $38 = HEAP32[$ci$02$i>>2]|0;
  $39 = $38;
  $40 = (($39) - ($17))|0;
  $41 = $40 >> 4;
  $42 = (($8) + ($41<<4)|0);
  HEAP32[$ci$02$i>>2] = $42;
  $43 = ((($ci$02$i)) + 18|0);
  $44 = HEAP8[$43>>0]|0;
  $45 = $44 & 1;
  $46 = ($45<<24>>24)==(0);
  if (!($46)) {
   $47 = ((($ci$02$i)) + 24|0);
   $48 = HEAP32[$47>>2]|0;
   $49 = $48;
   $50 = (($49) - ($17))|0;
   $51 = $50 >> 4;
   $52 = (($8) + ($51<<4)|0);
   HEAP32[$47>>2] = $52;
  }
  $53 = ((($ci$02$i)) + 8|0);
  $ci$0$i = HEAP32[$53>>2]|0;
  $54 = ($ci$0$i|0)==(0|0);
  if ($54) {
   break;
  } else {
   $ci$02$i = $ci$0$i;
  }
 }
 return;
}
function _luaD_growstack($L,$n) {
 $L = $L|0;
 $n = $n|0;
 var $$ = 0, $$$ = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = ((($L)) + 32|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)>(1000000);
 if ($2) {
  _luaD_throw($L,6);
  // unreachable;
 }
 $3 = ((($L)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($L)) + 28|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $4;
 $8 = $6;
 $9 = (($7) - ($8))|0;
 $10 = $9 >> 4;
 $11 = (($n) + 5)|0;
 $12 = (($11) + ($10))|0;
 $13 = $1 << 1;
 $14 = ($13|0)>(1000000);
 $$ = $14 ? 1000000 : $13;
 $15 = ($$|0)<($12|0);
 $$$ = $15 ? $12 : $$;
 $16 = ($$$|0)>(1000000);
 if ($16) {
  _luaD_reallocstack($L,1000200);
  _luaG_runerror($L,8978,$vararg_buffer);
  // unreachable;
 } else {
  _luaD_reallocstack($L,$$$);
  STACKTOP = sp;return;
 }
}
function _luaD_shrinkstack($L) {
 $L = $L|0;
 var $$ = 0, $$lim$0$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ci$0$i = 0, $ci$01$i = 0, $ci$03$i = 0, $lim$0$lcssa$i = 0, $lim$02$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($L)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($L)) + 16|0);
 $ci$01$i = HEAP32[$2>>2]|0;
 $3 = ($ci$01$i|0)==(0|0);
 if ($3) {
  $lim$0$lcssa$i = $1;
 } else {
  $ci$03$i = $ci$01$i;$lim$02$i = $1;
  while(1) {
   $4 = ((($ci$03$i)) + 4|0);
   $5 = HEAP32[$4>>2]|0;
   $6 = ($lim$02$i>>>0)<($5>>>0);
   $$lim$0$i = $6 ? $5 : $lim$02$i;
   $7 = ((($ci$03$i)) + 8|0);
   $ci$0$i = HEAP32[$7>>2]|0;
   $8 = ($ci$0$i|0)==(0|0);
   if ($8) {
    $lim$0$lcssa$i = $$lim$0$i;
    break;
   } else {
    $ci$03$i = $ci$0$i;$lim$02$i = $$lim$0$i;
   }
  }
 }
 $9 = ((($L)) + 28|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $lim$0$lcssa$i;
 $12 = $10;
 $13 = (($11) - ($12))|0;
 $14 = $13 >> 4;
 $15 = (($14) + 1)|0;
 $16 = (($15|0) / 8)&-1;
 $17 = (($16) + 10)|0;
 $18 = (($17) + ($15))|0;
 $19 = ($18|0)>(1000000);
 $$ = $19 ? 1000000 : $18;
 $20 = ($13|0)>(15999984);
 if ($20) {
  return;
 }
 $21 = ((($L)) + 32|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = ($$|0)<($22|0);
 if (!($23)) {
  return;
 }
 _luaD_reallocstack($L,$$);
 return;
}
function _luaD_hook($L,$event,$line) {
 $L = $L|0;
 $event = $event|0;
 $line = $line|0;
 var $$$$i = 0, $$$i = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ar = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $ar = sp + 4|0;
 $0 = ((($L)) + 52|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  STACKTOP = sp;return;
 }
 $3 = ((($L)) + 41|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = ($4<<24>>24)==(0);
 if ($5) {
  STACKTOP = sp;return;
 }
 $6 = ((($L)) + 16|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($L)) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($L)) + 28|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $9;
 $13 = $11;
 $14 = (($12) - ($13))|0;
 $15 = ((($7)) + 4|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = $16;
 $18 = (($17) - ($13))|0;
 HEAP32[$ar>>2] = $event;
 $19 = ((($ar)) + 20|0);
 HEAP32[$19>>2] = $line;
 $20 = ((($ar)) + 96|0);
 HEAP32[$20>>2] = $7;
 $21 = ((($L)) + 24|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = $22;
 $24 = $9;
 $25 = (($23) - ($24))|0;
 $26 = ($25|0)<(336);
 do {
  if ($26) {
   $27 = ((($L)) + 32|0);
   $28 = HEAP32[$27>>2]|0;
   $29 = ($28|0)>(1000000);
   if ($29) {
    _luaD_throw($L,6);
    // unreachable;
   }
   $30 = $11;
   $31 = (($24) - ($30))|0;
   $32 = $31 >> 4;
   $33 = (($32) + 25)|0;
   $34 = $28 << 1;
   $35 = ($34|0)>(1000000);
   $$$i = $35 ? 1000000 : $34;
   $36 = ($$$i|0)<($33|0);
   $$$$i = $36 ? $33 : $$$i;
   $37 = ($$$$i|0)>(1000000);
   if ($37) {
    _luaD_reallocstack($L,1000200);
    _luaG_runerror($L,8978,$vararg_buffer);
    // unreachable;
   } else {
    _luaD_reallocstack($L,$$$$i);
    $$pre = HEAP32[$8>>2]|0;
    $39 = $$pre;
    break;
   }
  } else {
   $39 = $9;
  }
 } while(0);
 $38 = ((($39)) + 320|0);
 HEAP32[$15>>2] = $38;
 HEAP8[$3>>0] = 0;
 $40 = ((($7)) + 18|0);
 $41 = HEAP8[$40>>0]|0;
 $42 = $41&255;
 $43 = $42 | 2;
 $44 = $43&255;
 HEAP8[$40>>0] = $44;
 FUNCTION_TABLE_vii[$1 & 511]($L,$ar);
 HEAP8[$3>>0] = 1;
 $45 = HEAP32[$10>>2]|0;
 $46 = (($45) + ($18)|0);
 HEAP32[$15>>2] = $46;
 $47 = (($45) + ($14)|0);
 HEAP32[$8>>2] = $47;
 $48 = HEAP8[$40>>0]|0;
 $49 = $48&255;
 $50 = $49 & 253;
 $51 = $50&255;
 HEAP8[$40>>0] = $51;
 STACKTOP = sp;return;
}
function _luaD_precall($L,$func,$nresults) {
 $L = $L|0;
 $func = $func|0;
 $nresults = $nresults|0;
 var $$$$i = 0, $$$$i$i = 0, $$$$i2 = 0, $$$i = 0, $$$i$i = 0, $$$i1 = 0, $$0 = 0, $$0$i = 0, $$1$i = 0, $$25$i = 0, $$lcssa144 = 0, $$lcssa145 = 0, $$lcssa146 = 0, $$lcssa150 = 0, $$lcssa151 = 0, $$lcssa152 = 0, $$phi$trans$insert$i = 0, $$pre = 0, $$pre$i = 0, $$pre$i5 = 0;
 var $$pre$i8 = 0, $$pre70 = 0, $$promoted = 0, $$sum = 0, $$sum$i = 0, $$sum$i10 = 0, $$sum$i36 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0;
 var $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0;
 var $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0;
 var $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0;
 var $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0;
 var $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0;
 var $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0;
 var $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0;
 var $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0;
 var $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0;
 var $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0;
 var $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $exitcond$i = 0, $exitcond$i37 = 0, $f$0 = 0, $f$0$in = 0, $func$tr = 0, $func$tr$lcssa = 0, $func$tr$lcssa139 = 0, $func$tr$lcssa140 = 0, $func$tr$lcssa141 = 0, $hook$0$i = 0, $i$03$i = 0, $i$03$i$lcssa = 0, $i$11$i = 0, $n$0$lcssa = 0, $n$038 = 0, $p$01$i = 0, $res$04$i = 0;
 var $res$04$i$lcssa = 0, $res$1$lcssa$i = 0, $res$12$i = 0, $scevgep = 0, $scevgep$i = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = ((($L)) + 28|0);
 $1 = ((($L)) + 8|0);
 $2 = ((($L)) + 24|0);
 $3 = ((($L)) + 32|0);
 $func$tr = $func;
 L1: while(1) {
  $4 = HEAP32[$0>>2]|0;
  $5 = $func$tr;
  $6 = ((($func$tr)) + 8|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = $7 & 63;
  switch ($8|0) {
  case 22:  {
   $$lcssa144 = $4;$$lcssa150 = $5;$func$tr$lcssa = $func$tr;
   label = 3;
   break L1;
   break;
  }
  case 38:  {
   $$lcssa145 = $4;$$lcssa151 = $5;$func$tr$lcssa139 = $func$tr;
   label = 4;
   break L1;
   break;
  }
  case 6:  {
   $$lcssa146 = $4;$$lcssa152 = $5;$func$tr$lcssa140 = $func$tr;
   label = 30;
   break L1;
   break;
  }
  default: {
  }
  }
  $239 = (_luaT_gettmbyobj($L,$func$tr,16)|0);
  $240 = HEAP32[$0>>2]|0;
  $241 = $240;
  $242 = (($5) - ($241))|0;
  $243 = ((($239)) + 8|0);
  $244 = HEAP32[$243>>2]|0;
  $245 = $244 & 15;
  $246 = ($245|0)==(6);
  if (!($246)) {
   $func$tr$lcssa141 = $func$tr;
   label = 55;
   break;
  }
  $247 = HEAP32[$1>>2]|0;
  $248 = ($247>>>0)>($func$tr>>>0);
  if ($248) {
   $p$01$i = $247;
   while(1) {
    $249 = ((($p$01$i)) + -16|0);
    $250 = $249;
    $251 = $250;
    $252 = HEAP32[$251>>2]|0;
    $253 = (($250) + 4)|0;
    $254 = $253;
    $255 = HEAP32[$254>>2]|0;
    $256 = $p$01$i;
    $257 = $256;
    HEAP32[$257>>2] = $252;
    $258 = (($256) + 4)|0;
    $259 = $258;
    HEAP32[$259>>2] = $255;
    $260 = ((($p$01$i)) + -8|0);
    $261 = HEAP32[$260>>2]|0;
    $262 = ((($p$01$i)) + 8|0);
    HEAP32[$262>>2] = $261;
    $263 = ($249>>>0)>($func$tr>>>0);
    if ($263) {
     $p$01$i = $249;
    } else {
     break;
    }
   }
   $$pre$i8 = HEAP32[$1>>2]|0;
   $265 = $$pre$i8;
  } else {
   $265 = $247;
  }
  $264 = ((($265)) + 16|0);
  HEAP32[$1>>2] = $264;
  $266 = HEAP32[$2>>2]|0;
  $267 = $266;
  $268 = $264;
  $269 = (($267) - ($268))|0;
  $270 = ($269|0)<(16);
  if ($270) {
   $271 = HEAP32[$3>>2]|0;
   $272 = ($271|0)>(1000000);
   if ($272) {
    label = 61;
    break;
   }
   $273 = HEAP32[$0>>2]|0;
   $274 = $273;
   $275 = (($268) - ($274))|0;
   $276 = $275 >> 4;
   $277 = (($276) + 5)|0;
   $278 = $271 << 1;
   $279 = ($278|0)>(1000000);
   $$$i$i = $279 ? 1000000 : $278;
   $280 = ($$$i$i|0)<($277|0);
   $$$$i$i = $280 ? $277 : $$$i$i;
   $281 = ($$$$i$i|0)>(1000000);
   if ($281) {
    label = 63;
    break;
   }
   _luaD_reallocstack($L,$$$$i$i);
  }
  $282 = HEAP32[$0>>2]|0;
  $283 = (($282) + ($242)|0);
  $284 = $239;
  $285 = $284;
  $286 = HEAP32[$285>>2]|0;
  $287 = (($284) + 4)|0;
  $288 = $287;
  $289 = HEAP32[$288>>2]|0;
  $290 = $283;
  $291 = $290;
  HEAP32[$291>>2] = $286;
  $292 = (($290) + 4)|0;
  $293 = $292;
  HEAP32[$293>>2] = $289;
  $294 = HEAP32[$243>>2]|0;
  $$sum$i10 = (($242) + 8)|0;
  $295 = (($282) + ($$sum$i10)|0);
  HEAP32[$295>>2] = $294;
  $func$tr = $283;
 }
 if ((label|0) == 3) {
  $12 = $$lcssa144;$14 = $$lcssa150;$f$0$in = $func$tr$lcssa;
 }
 else if ((label|0) == 4) {
  $9 = HEAP32[$func$tr$lcssa139>>2]|0;
  $10 = ((($9)) + 12|0);
  $12 = $$lcssa145;$14 = $$lcssa151;$f$0$in = $10;
 }
 else if ((label|0) == 30) {
  $108 = $$lcssa146;
  $109 = (($$lcssa152) - ($108))|0;
  $110 = HEAP32[$func$tr$lcssa140>>2]|0;
  $111 = ((($110)) + 12|0);
  $112 = HEAP32[$111>>2]|0;
  $113 = HEAP32[$2>>2]|0;
  $114 = HEAP32[$1>>2]|0;
  $115 = $113;
  $116 = $114;
  $117 = (($115) - ($116))|0;
  $118 = $117 >> 4;
  $119 = ((($112)) + 78|0);
  $120 = HEAP8[$119>>0]|0;
  $121 = $120&255;
  $122 = ($118|0)>($121|0);
  do {
   if ($122) {
    $$promoted = $114;$135 = $$lcssa146;
   } else {
    $123 = HEAP32[$3>>2]|0;
    $124 = ($123|0)>(1000000);
    if ($124) {
     _luaD_throw($L,6);
     // unreachable;
    }
    $125 = $$lcssa146;
    $126 = (($116) - ($125))|0;
    $127 = $126 >> 4;
    $128 = (($121) + 5)|0;
    $129 = (($128) + ($127))|0;
    $130 = $123 << 1;
    $131 = ($130|0)>(1000000);
    $$$i1 = $131 ? 1000000 : $130;
    $132 = ($$$i1|0)<($129|0);
    $$$$i2 = $132 ? $129 : $$$i1;
    $133 = ($$$$i2|0)>(1000000);
    if ($133) {
     _luaD_reallocstack($L,1000200);
     _luaG_runerror($L,8978,$vararg_buffer1);
     // unreachable;
    } else {
     _luaD_reallocstack($L,$$$$i2);
     $$pre = HEAP32[$0>>2]|0;
     $$pre70 = HEAP32[$1>>2]|0;
     $$promoted = $$pre70;$135 = $$pre;
     break;
    }
   }
  } while(0);
  $134 = (($135) + ($109)|0);
  $136 = $$promoted;
  $137 = $134;
  $138 = (($136) - ($137))|0;
  $139 = $138 >> 4;
  $140 = (($139) + -1)|0;
  $141 = ((($112)) + 76|0);
  $142 = HEAP8[$141>>0]|0;
  $143 = $142&255;
  $144 = ($139|0)>($143|0);
  if ($144) {
   $158 = $$promoted;$n$0$lcssa = $140;
  } else {
   $145 = (($143) + 1)|0;
   $146 = (($145) - ($139))|0;
   $148 = $$promoted;$n$038 = $140;
   while(1) {
    $147 = ((($148)) + 16|0);
    $149 = ((($148)) + 8|0);
    HEAP32[$149>>2] = 0;
    $150 = (($n$038) + 1)|0;
    $151 = ($150|0)<($143|0);
    if ($151) {
     $148 = $147;$n$038 = $150;
    } else {
     break;
    }
   }
   $scevgep = (($$promoted) + ($146<<4)|0);
   HEAP32[$1>>2] = $scevgep;
   $158 = $scevgep;$n$0$lcssa = $143;
  }
  $152 = ((($112)) + 77|0);
  $153 = HEAP8[$152>>0]|0;
  $154 = ($153<<24>>24)==(0);
  if ($154) {
   $$sum = (($109) + 16)|0;
   $155 = (($135) + ($$sum)|0);
   $200 = $155;
  } else {
   $156 = ($142<<24>>24)==(0);
   if ($156) {
    $200 = $158;
   } else {
    $$sum$i36 = (0 - ($n$0$lcssa))|0;
    $157 = (($158) + ($$sum$i36<<4)|0);
    $159 = ((($158)) + 16|0);
    HEAP32[$1>>2] = $159;
    $160 = $157;
    $161 = $160;
    $162 = HEAP32[$161>>2]|0;
    $163 = (($160) + 4)|0;
    $164 = $163;
    $165 = HEAP32[$164>>2]|0;
    $166 = $158;
    $167 = $166;
    HEAP32[$167>>2] = $162;
    $168 = (($166) + 4)|0;
    $169 = $168;
    HEAP32[$169>>2] = $165;
    $170 = (((($158) + ($$sum$i36<<4)|0)) + 8|0);
    $171 = HEAP32[$170>>2]|0;
    $172 = ((($158)) + 8|0);
    HEAP32[$172>>2] = $171;
    HEAP32[$170>>2] = 0;
    $exitcond$i37 = ($142<<24>>24)==(1);
    if ($exitcond$i37) {
     $200 = $158;
    } else {
     $173 = 1;
     while(1) {
      $$pre$i5 = HEAP32[$1>>2]|0;
      $$sum$i = (($173) - ($n$0$lcssa))|0;
      $174 = (($158) + ($$sum$i<<4)|0);
      $175 = ((($$pre$i5)) + 16|0);
      HEAP32[$1>>2] = $175;
      $176 = $174;
      $177 = $176;
      $178 = HEAP32[$177>>2]|0;
      $179 = (($176) + 4)|0;
      $180 = $179;
      $181 = HEAP32[$180>>2]|0;
      $182 = $$pre$i5;
      $183 = $182;
      HEAP32[$183>>2] = $178;
      $184 = (($182) + 4)|0;
      $185 = $184;
      HEAP32[$185>>2] = $181;
      $186 = (((($158) + ($$sum$i<<4)|0)) + 8|0);
      $187 = HEAP32[$186>>2]|0;
      $188 = ((($$pre$i5)) + 8|0);
      HEAP32[$188>>2] = $187;
      HEAP32[$186>>2] = 0;
      $189 = (($173) + 1)|0;
      $exitcond$i = ($189|0)==($143|0);
      if ($exitcond$i) {
       $200 = $158;
       break;
      } else {
       $173 = $189;
      }
     }
    }
   }
  }
  $190 = ((($L)) + 16|0);
  $191 = HEAP32[$190>>2]|0;
  $192 = ((($191)) + 12|0);
  $193 = HEAP32[$192>>2]|0;
  $194 = ($193|0)==(0|0);
  if ($194) {
   $195 = (_luaE_extendCI($L)|0);
   $196 = $195;
  } else {
   $196 = $193;
  }
  HEAP32[$190>>2] = $196;
  $197 = $nresults&65535;
  $198 = ((($196)) + 16|0);
  HEAP16[$198>>1] = $197;
  HEAP32[$196>>2] = $134;
  $199 = ((($196)) + 24|0);
  HEAP32[$199>>2] = $200;
  $201 = HEAP8[$119>>0]|0;
  $202 = $201&255;
  $203 = (($200) + ($202<<4)|0);
  $204 = ((($196)) + 4|0);
  HEAP32[$204>>2] = $203;
  $205 = ((($112)) + 12|0);
  $206 = HEAP32[$205>>2]|0;
  $207 = ((($196)) + 28|0);
  HEAP32[$207>>2] = $206;
  $208 = ((($196)) + 18|0);
  HEAP8[$208>>0] = 1;
  $209 = $203;
  HEAP32[$1>>2] = $209;
  $210 = ((($L)) + 12|0);
  $211 = HEAP32[$210>>2]|0;
  $212 = ((($211)) + 12|0);
  $213 = HEAP32[$212>>2]|0;
  $214 = ($213|0)>(0);
  if ($214) {
   _luaC_step($L);
  }
  $215 = ((($L)) + 40|0);
  $216 = HEAP8[$215>>0]|0;
  $217 = $216 & 1;
  $218 = ($217<<24>>24)==(0);
  if ($218) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
  $219 = HEAP32[$207>>2]|0;
  $220 = ((($219)) + 4|0);
  HEAP32[$207>>2] = $220;
  $221 = ((($196)) + 8|0);
  $222 = HEAP32[$221>>2]|0;
  $223 = ((($222)) + 18|0);
  $224 = HEAP8[$223>>0]|0;
  $225 = $224 & 1;
  $226 = ($225<<24>>24)==(0);
  if ($226) {
   $hook$0$i = 0;
  } else {
   $227 = ((($222)) + 28|0);
   $228 = HEAP32[$227>>2]|0;
   $229 = ((($228)) + -4|0);
   $230 = HEAP32[$229>>2]|0;
   $231 = $230 & 63;
   $232 = ($231|0)==(30);
   if ($232) {
    $233 = HEAP8[$208>>0]|0;
    $234 = $233&255;
    $235 = $234 | 64;
    $236 = $235&255;
    HEAP8[$208>>0] = $236;
    $hook$0$i = 4;
   } else {
    $hook$0$i = 0;
   }
  }
  _luaD_hook($L,$hook$0$i,-1);
  $237 = HEAP32[$207>>2]|0;
  $238 = ((($237)) + -4|0);
  HEAP32[$207>>2] = $238;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 else if ((label|0) == 55) {
  _luaG_typeerror($L,$func$tr$lcssa141,9905);
  // unreachable;
 }
 else if ((label|0) == 61) {
  _luaD_throw($L,6);
  // unreachable;
 }
 else if ((label|0) == 63) {
  _luaD_reallocstack($L,1000200);
  _luaG_runerror($L,8978,$vararg_buffer3);
  // unreachable;
 }
 $11 = $12;
 $13 = (($14) - ($11))|0;
 $f$0 = HEAP32[$f$0$in>>2]|0;
 $15 = HEAP32[$2>>2]|0;
 $16 = HEAP32[$1>>2]|0;
 $17 = $15;
 $18 = $16;
 $19 = (($17) - ($18))|0;
 $20 = ($19|0)<(336);
 do {
  if ($20) {
   $21 = HEAP32[$3>>2]|0;
   $22 = ($21|0)>(1000000);
   if ($22) {
    _luaD_throw($L,6);
    // unreachable;
   }
   $23 = $12;
   $24 = (($18) - ($23))|0;
   $25 = $24 >> 4;
   $26 = (($25) + 25)|0;
   $27 = $21 << 1;
   $28 = ($27|0)>(1000000);
   $$$i = $28 ? 1000000 : $27;
   $29 = ($$$i|0)<($26|0);
   $$$$i = $29 ? $26 : $$$i;
   $30 = ($$$$i|0)>(1000000);
   if ($30) {
    _luaD_reallocstack($L,1000200);
    _luaG_runerror($L,8978,$vararg_buffer);
    // unreachable;
   } else {
    _luaD_reallocstack($L,$$$$i);
    break;
   }
  }
 } while(0);
 $31 = ((($L)) + 16|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = ((($32)) + 12|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = ($34|0)==(0|0);
 if ($35) {
  $36 = (_luaE_extendCI($L)|0);
  $37 = $36;
 } else {
  $37 = $34;
 }
 HEAP32[$31>>2] = $37;
 $38 = $nresults&65535;
 $39 = ((($37)) + 16|0);
 HEAP16[$39>>1] = $38;
 $40 = HEAP32[$0>>2]|0;
 $41 = (($40) + ($13)|0);
 HEAP32[$37>>2] = $41;
 $42 = HEAP32[$1>>2]|0;
 $43 = ((($42)) + 320|0);
 $44 = ((($37)) + 4|0);
 HEAP32[$44>>2] = $43;
 $45 = ((($37)) + 18|0);
 HEAP8[$45>>0] = 0;
 $46 = ((($L)) + 12|0);
 $47 = HEAP32[$46>>2]|0;
 $48 = ((($47)) + 12|0);
 $49 = HEAP32[$48>>2]|0;
 $50 = ($49|0)>(0);
 if ($50) {
  _luaC_step($L);
 }
 $51 = ((($L)) + 40|0);
 $52 = HEAP8[$51>>0]|0;
 $53 = $52 & 1;
 $54 = ($53<<24>>24)==(0);
 if (!($54)) {
  _luaD_hook($L,0,-1);
 }
 $55 = (FUNCTION_TABLE_ii[$f$0 & 511]($L)|0);
 $56 = HEAP32[$1>>2]|0;
 $57 = (0 - ($55))|0;
 $58 = (($56) + ($57<<4)|0);
 $59 = HEAP32[$31>>2]|0;
 $60 = HEAP8[$51>>0]|0;
 $61 = $60&255;
 $62 = $61 & 6;
 $63 = ($62|0)==(0);
 if ($63) {
  $$phi$trans$insert$i = ((($59)) + 8|0);
  $$pre$i = HEAP32[$$phi$trans$insert$i>>2]|0;
  $$1$i = $58;$81 = $$pre$i;
 } else {
  $64 = $61 & 2;
  $65 = ($64|0)==(0);
  if ($65) {
   $$0$i = $58;
  } else {
   $66 = HEAP32[$0>>2]|0;
   $67 = $58;
   $68 = $66;
   $69 = (($67) - ($68))|0;
   _luaD_hook($L,1,-1);
   $70 = HEAP32[$0>>2]|0;
   $71 = (($70) + ($69)|0);
   $$0$i = $71;
  }
  $72 = ((($59)) + 8|0);
  $73 = HEAP32[$72>>2]|0;
  $74 = ((($73)) + 28|0);
  $75 = HEAP32[$74>>2]|0;
  $76 = ((($L)) + 20|0);
  HEAP32[$76>>2] = $75;
  $77 = $73;
  $$1$i = $$0$i;$81 = $77;
 }
 $78 = HEAP32[$59>>2]|0;
 $79 = ((($59)) + 16|0);
 $80 = HEAP16[$79>>1]|0;
 HEAP32[$31>>2] = $81;
 $82 = ($80<<16>>16)==(0);
 L84: do {
  if ($82) {
   $res$1$lcssa$i = $78;
  } else {
   $83 = $80 << 16 >> 16;
   $$25$i = $$1$i;$i$03$i = $83;$res$04$i = $78;
   while(1) {
    $85 = HEAP32[$1>>2]|0;
    $86 = ($$25$i>>>0)<($85>>>0);
    if (!($86)) {
     $i$03$i$lcssa = $i$03$i;$res$04$i$lcssa = $res$04$i;
     break;
    }
    $87 = ((($$25$i)) + 16|0);
    $88 = ((($res$04$i)) + 16|0);
    $89 = $$25$i;
    $90 = $89;
    $91 = HEAP32[$90>>2]|0;
    $92 = (($89) + 4)|0;
    $93 = $92;
    $94 = HEAP32[$93>>2]|0;
    $95 = $res$04$i;
    $96 = $95;
    HEAP32[$96>>2] = $91;
    $97 = (($95) + 4)|0;
    $98 = $97;
    HEAP32[$98>>2] = $94;
    $99 = ((($$25$i)) + 8|0);
    $100 = HEAP32[$99>>2]|0;
    $101 = ((($res$04$i)) + 8|0);
    HEAP32[$101>>2] = $100;
    $102 = (($i$03$i) + -1)|0;
    $103 = ($102|0)==(0);
    if ($103) {
     $res$1$lcssa$i = $88;
     break L84;
    } else {
     $$25$i = $87;$i$03$i = $102;$res$04$i = $88;
    }
   }
   $84 = ($i$03$i$lcssa|0)>(0);
   if ($84) {
    $i$11$i = $i$03$i$lcssa;$res$12$i = $res$04$i$lcssa;
    while(1) {
     $104 = (($i$11$i) + -1)|0;
     $105 = ((($res$12$i)) + 16|0);
     $106 = ((($res$12$i)) + 8|0);
     HEAP32[$106>>2] = 0;
     $107 = ($i$11$i|0)>(1);
     if ($107) {
      $i$11$i = $104;$res$12$i = $105;
     } else {
      break;
     }
    }
    $scevgep$i = (($res$04$i$lcssa) + ($i$03$i$lcssa<<4)|0);
    $res$1$lcssa$i = $scevgep$i;
   } else {
    $res$1$lcssa$i = $res$04$i$lcssa;
   }
  }
 } while(0);
 HEAP32[$1>>2] = $res$1$lcssa$i;
 $$0 = 1;
 STACKTOP = sp;return ($$0|0);
}
function _luaD_poscall($L,$firstResult) {
 $L = $L|0;
 $firstResult = $firstResult|0;
 var $$0 = 0, $$1 = 0, $$25 = 0, $$phi$trans$insert = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$03 = 0;
 var $i$03$lcssa = 0, $i$11 = 0, $res$04 = 0, $res$04$lcssa = 0, $res$1$lcssa = 0, $res$12 = 0, $scevgep = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($L)) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($L)) + 40|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = $3&255;
 $5 = $4 & 6;
 $6 = ($5|0)==(0);
 if ($6) {
  $$phi$trans$insert = ((($1)) + 8|0);
  $$pre = HEAP32[$$phi$trans$insert>>2]|0;
  $$1 = $firstResult;$26 = $$pre;
 } else {
  $7 = $4 & 2;
  $8 = ($7|0)==(0);
  if ($8) {
   $$0 = $firstResult;
  } else {
   $9 = ((($L)) + 28|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = $firstResult;
   $12 = $10;
   $13 = (($11) - ($12))|0;
   _luaD_hook($L,1,-1);
   $14 = HEAP32[$9>>2]|0;
   $15 = (($14) + ($13)|0);
   $$0 = $15;
  }
  $16 = ((($1)) + 8|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = ((($17)) + 28|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = ((($L)) + 20|0);
  HEAP32[$20>>2] = $19;
  $21 = $17;
  $$1 = $$0;$26 = $21;
 }
 $22 = HEAP32[$1>>2]|0;
 $23 = ((($1)) + 16|0);
 $24 = HEAP16[$23>>1]|0;
 $25 = $24 << 16 >> 16;
 HEAP32[$0>>2] = $26;
 $27 = ((($L)) + 8|0);
 $28 = ($24<<16>>16)==(0);
 if ($28) {
  $res$1$lcssa = $22;
  HEAP32[$27>>2] = $res$1$lcssa;
  $53 = (($25) + 1)|0;
  return ($53|0);
 } else {
  $$25 = $$1;$i$03 = $25;$res$04 = $22;
 }
 while(1) {
  $30 = HEAP32[$27>>2]|0;
  $31 = ($$25>>>0)<($30>>>0);
  if (!($31)) {
   $i$03$lcssa = $i$03;$res$04$lcssa = $res$04;
   break;
  }
  $32 = ((($$25)) + 16|0);
  $33 = ((($res$04)) + 16|0);
  $34 = $$25;
  $35 = $34;
  $36 = HEAP32[$35>>2]|0;
  $37 = (($34) + 4)|0;
  $38 = $37;
  $39 = HEAP32[$38>>2]|0;
  $40 = $res$04;
  $41 = $40;
  HEAP32[$41>>2] = $36;
  $42 = (($40) + 4)|0;
  $43 = $42;
  HEAP32[$43>>2] = $39;
  $44 = ((($$25)) + 8|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = ((($res$04)) + 8|0);
  HEAP32[$46>>2] = $45;
  $47 = (($i$03) + -1)|0;
  $48 = ($47|0)==(0);
  if ($48) {
   $res$1$lcssa = $33;
   label = 12;
   break;
  } else {
   $$25 = $32;$i$03 = $47;$res$04 = $33;
  }
 }
 if ((label|0) == 12) {
  HEAP32[$27>>2] = $res$1$lcssa;
  $53 = (($25) + 1)|0;
  return ($53|0);
 }
 $29 = ($i$03$lcssa|0)>(0);
 if ($29) {
  $i$11 = $i$03$lcssa;$res$12 = $res$04$lcssa;
 } else {
  $res$1$lcssa = $res$04$lcssa;
  HEAP32[$27>>2] = $res$1$lcssa;
  $53 = (($25) + 1)|0;
  return ($53|0);
 }
 while(1) {
  $49 = (($i$11) + -1)|0;
  $50 = ((($res$12)) + 16|0);
  $51 = ((($res$12)) + 8|0);
  HEAP32[$51>>2] = 0;
  $52 = ($i$11|0)>(1);
  if ($52) {
   $i$11 = $49;$res$12 = $50;
  } else {
   break;
  }
 }
 $scevgep = (($res$04$lcssa) + ($i$03$lcssa<<4)|0);
 $res$1$lcssa = $scevgep;
 HEAP32[$27>>2] = $res$1$lcssa;
 $53 = (($25) + 1)|0;
 return ($53|0);
}
function _luaD_call($L,$func,$nResults,$allowyield) {
 $L = $L|0;
 $func = $func|0;
 $nResults = $nResults|0;
 $allowyield = $allowyield|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = ((($L)) + 38|0);
 $1 = HEAP16[$0>>1]|0;
 $2 = (($1) + 1)<<16>>16;
 HEAP16[$0>>1] = $2;
 $3 = ($2&65535)>(199);
 if ($3) {
  $4 = ($2<<16>>16)==(200);
  if ($4) {
   _luaG_runerror($L,5510,$vararg_buffer);
   // unreachable;
  }
  $5 = ($2&65535)>(224);
  if ($5) {
   _luaD_throw($L,6);
   // unreachable;
  }
 }
 $6 = ($allowyield|0)!=(0);
 if (!($6)) {
  $7 = ((($L)) + 36|0);
  $8 = HEAP16[$7>>1]|0;
  $9 = (($8) + 1)<<16>>16;
  HEAP16[$7>>1] = $9;
 }
 $10 = (_luaD_precall($L,$func,$nResults)|0);
 $11 = ($10|0)==(0);
 if ($11) {
  _luaV_execute($L);
 }
 if ($6) {
  $15 = HEAP16[$0>>1]|0;
  $16 = (($15) + -1)<<16>>16;
  HEAP16[$0>>1] = $16;
  STACKTOP = sp;return;
 }
 $12 = ((($L)) + 36|0);
 $13 = HEAP16[$12>>1]|0;
 $14 = (($13) + -1)<<16>>16;
 HEAP16[$12>>1] = $14;
 $15 = HEAP16[$0>>1]|0;
 $16 = (($15) + -1)<<16>>16;
 HEAP16[$0>>1] = $16;
 STACKTOP = sp;return;
}
function _lua_resume($L,$from,$nargs) {
 $L = $L|0;
 $from = $from|0;
 $nargs = $nargs|0;
 var $$$i$i = 0, $$cast = 0, $$lcssa = 0, $$lim$0$i$i$i = 0, $$lim$0$i$i$i$lcssa = 0, $$sum$i = 0, $$sum3$i = 0, $$sum4$i = 0, $$sum5$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0;
 var $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ci$0$i$i = 0, $ci$0$i$i$i = 0, $ci$01$i$i = 0, $ci$02$i$i = 0, $ci$02$i$i$lcssa = 0;
 var $ci$03$i$i$i = 0, $lim$02$i$i$i = 0, $phitmp = 0, $status$0$cmp = 0, $status$0$cmp10 = 0, $status$011 = 0, $status$01143 = 0, $status$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($from|0)==(0|0);
 if ($0) {
  $6 = 1;
 } else {
  $1 = ((($from)) + 38|0);
  $2 = HEAP16[$1>>1]|0;
  $3 = $2&65535;
  $4 = (($3) + 1)|0;
  $phitmp = $4&65535;
  $6 = $phitmp;
 }
 $5 = ((($L)) + 38|0);
 HEAP16[$5>>1] = $6;
 $7 = ((($L)) + 36|0);
 HEAP16[$7>>1] = 0;
 $8 = ((($L)) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (0 - ($nargs))|0;
 $11 = (($9) + ($10<<4)|0);
 $12 = (_luaD_rawrunprotected($L,158,$11)|0);
 $13 = ($12|0)==(-1);
 if ($13) {
  $status$1 = 2;
  HEAP16[$7>>1] = 1;
  $124 = HEAP16[$5>>1]|0;
  $125 = (($124) + -1)<<16>>16;
  HEAP16[$5>>1] = $125;
  return ($status$1|0);
 }
 $status$0$cmp10 = ($12>>>0)>(1);
 if (!($status$0$cmp10)) {
  $status$1 = $12;
  HEAP16[$7>>1] = 1;
  $124 = HEAP16[$5>>1]|0;
  $125 = (($124) + -1)<<16>>16;
  HEAP16[$5>>1] = $125;
  return ($status$1|0);
 }
 $14 = ((($L)) + 16|0);
 $15 = ((($L)) + 28|0);
 $16 = ((($L)) + 41|0);
 $17 = ((($L)) + 68|0);
 $18 = ((($L)) + 32|0);
 $19 = ((($L)) + 12|0);
 $status$011 = $12;
 L10: while(1) {
  $ci$01$i$i = HEAP32[$14>>2]|0;
  $20 = ($ci$01$i$i|0)==(0|0);
  if ($20) {
   $status$01143 = $status$011;
   break;
  } else {
   $ci$02$i$i = $ci$01$i$i;
  }
  while(1) {
   $21 = ((($ci$02$i$i)) + 18|0);
   $22 = HEAP8[$21>>0]|0;
   $23 = $22 & 16;
   $24 = ($23<<24>>24)==(0);
   if (!($24)) {
    $$lcssa = $21;$ci$02$i$i$lcssa = $ci$02$i$i;
    break;
   }
   $25 = ((($ci$02$i$i)) + 8|0);
   $ci$0$i$i = HEAP32[$25>>2]|0;
   $26 = ($ci$0$i$i|0)==(0|0);
   if ($26) {
    $status$01143 = $status$011;
    break L10;
   } else {
    $ci$02$i$i = $ci$0$i$i;
   }
  }
  $27 = HEAP32[$15>>2]|0;
  $28 = ((($ci$02$i$i$lcssa)) + 20|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = (($27) + ($29)|0);
  _luaF_close($L,$30);
  switch ($status$011|0) {
  case 4:  {
   $31 = HEAP32[$19>>2]|0;
   $32 = ((($31)) + 180|0);
   $33 = HEAP32[$32>>2]|0;
   HEAP32[$30>>2] = $33;
   $34 = ((($33)) + 4|0);
   $35 = HEAP8[$34>>0]|0;
   $36 = $35&255;
   $37 = $36 | 64;
   $$sum4$i = (($29) + 8)|0;
   $38 = (($27) + ($$sum4$i)|0);
   HEAP32[$38>>2] = $37;
   break;
  }
  case 6:  {
   $39 = (_luaS_newlstr($L,5527,23)|0);
   HEAP32[$30>>2] = $39;
   $40 = ((($39)) + 4|0);
   $41 = HEAP8[$40>>0]|0;
   $42 = $41&255;
   $43 = $42 | 64;
   $$sum$i = (($29) + 8)|0;
   $44 = (($27) + ($$sum$i)|0);
   HEAP32[$44>>2] = $43;
   break;
  }
  default: {
   $45 = HEAP32[$8>>2]|0;
   $46 = ((($45)) + -16|0);
   $47 = $46;
   $48 = $47;
   $49 = HEAP32[$48>>2]|0;
   $50 = (($47) + 4)|0;
   $51 = $50;
   $52 = HEAP32[$51>>2]|0;
   $53 = $30;
   $54 = $53;
   HEAP32[$54>>2] = $49;
   $55 = (($53) + 4)|0;
   $56 = $55;
   HEAP32[$56>>2] = $52;
   $57 = ((($45)) + -8|0);
   $58 = HEAP32[$57>>2]|0;
   $$sum5$i = (($29) + 8)|0;
   $59 = (($27) + ($$sum5$i)|0);
   HEAP32[$59>>2] = $58;
  }
  }
  $$sum3$i = (($29) + 16)|0;
  $60 = (($27) + ($$sum3$i)|0);
  HEAP32[$8>>2] = $60;
  HEAP32[$14>>2] = $ci$02$i$i$lcssa;
  $61 = ((($ci$02$i$i$lcssa)) + 36|0);
  $62 = HEAP8[$61>>0]|0;
  HEAP8[$16>>0] = $62;
  HEAP16[$7>>1] = 0;
  $ci$03$i$i$i = $ci$02$i$i$lcssa;$lim$02$i$i$i = $60;
  while(1) {
   $63 = ((($ci$03$i$i$i)) + 4|0);
   $64 = HEAP32[$63>>2]|0;
   $65 = ($lim$02$i$i$i>>>0)<($64>>>0);
   $$lim$0$i$i$i = $65 ? $64 : $lim$02$i$i$i;
   $66 = ((($ci$03$i$i$i)) + 8|0);
   $ci$0$i$i$i = HEAP32[$66>>2]|0;
   $67 = ($ci$0$i$i$i|0)==(0|0);
   if ($67) {
    $$lim$0$i$i$i$lcssa = $$lim$0$i$i$i;
    break;
   } else {
    $ci$03$i$i$i = $ci$0$i$i$i;$lim$02$i$i$i = $$lim$0$i$i$i;
   }
  }
  $68 = HEAP32[$15>>2]|0;
  $69 = $$lim$0$i$i$i$lcssa;
  $70 = $68;
  $71 = (($69) - ($70))|0;
  $72 = $71 >> 4;
  $73 = (($72) + 1)|0;
  $74 = (($73|0) / 8)&-1;
  $75 = (($74) + 10)|0;
  $76 = (($75) + ($73))|0;
  $77 = ($76|0)>(1000000);
  $$$i$i = $77 ? 1000000 : $76;
  $78 = ($71|0)>(15999984);
  if (!($78)) {
   $79 = HEAP32[$18>>2]|0;
   $80 = ($$$i$i|0)<($79|0);
   if ($80) {
    _luaD_reallocstack($L,$$$i$i);
   }
  }
  $81 = ((($ci$02$i$i$lcssa)) + 32|0);
  $82 = HEAP32[$81>>2]|0;
  HEAP32[$17>>2] = $82;
  $83 = HEAP8[$$lcssa>>0]|0;
  $84 = $83&255;
  $85 = $84 | 32;
  $86 = $85&255;
  HEAP8[$$lcssa>>0] = $86;
  $87 = $status$011&255;
  $88 = ((($ci$02$i$i$lcssa)) + 37|0);
  HEAP8[$88>>0] = $87;
  $89 = (_luaD_rawrunprotected($L,159,0)|0);
  $status$0$cmp = ($89>>>0)>(1);
  if ($status$0$cmp) {
   $status$011 = $89;
  } else {
   $status$1 = $89;
   label = 24;
   break;
  }
 }
 if ((label|0) == 24) {
  HEAP16[$7>>1] = 1;
  $124 = HEAP16[$5>>1]|0;
  $125 = (($124) + -1)<<16>>16;
  HEAP16[$5>>1] = $125;
  return ($status$1|0);
 }
 $90 = $status$01143&255;
 $91 = ((($L)) + 6|0);
 HEAP8[$91>>0] = $90;
 $92 = HEAP32[$8>>2]|0;
 switch ($status$01143|0) {
 case 4:  {
  $93 = HEAP32[$19>>2]|0;
  $94 = ((($93)) + 180|0);
  $95 = HEAP32[$94>>2]|0;
  HEAP32[$92>>2] = $95;
  $96 = ((($95)) + 4|0);
  $97 = HEAP8[$96>>0]|0;
  $98 = $97&255;
  $99 = $98 | 64;
  $100 = ((($92)) + 8|0);
  HEAP32[$100>>2] = $99;
  break;
 }
 case 6:  {
  $101 = (_luaS_newlstr($L,5527,23)|0);
  HEAP32[$92>>2] = $101;
  $102 = ((($101)) + 4|0);
  $103 = HEAP8[$102>>0]|0;
  $104 = $103&255;
  $105 = $104 | 64;
  $106 = ((($92)) + 8|0);
  HEAP32[$106>>2] = $105;
  break;
 }
 default: {
  $107 = ((($92)) + -16|0);
  $108 = $107;
  $109 = $108;
  $110 = HEAP32[$109>>2]|0;
  $111 = (($108) + 4)|0;
  $112 = $111;
  $113 = HEAP32[$112>>2]|0;
  $114 = $92;
  $115 = $114;
  HEAP32[$115>>2] = $110;
  $116 = (($114) + 4)|0;
  $117 = $116;
  HEAP32[$117>>2] = $113;
  $118 = ((($92)) + -8|0);
  $119 = HEAP32[$118>>2]|0;
  $120 = ((($92)) + 8|0);
  HEAP32[$120>>2] = $119;
 }
 }
 $121 = ((($92)) + 16|0);
 HEAP32[$8>>2] = $121;
 $$cast = $121;
 $122 = HEAP32[$14>>2]|0;
 $123 = ((($122)) + 4|0);
 HEAP32[$123>>2] = $$cast;
 $status$1 = $status$01143;
 HEAP16[$7>>1] = 1;
 $124 = HEAP16[$5>>1]|0;
 $125 = (($124) + -1)<<16>>16;
 HEAP16[$5>>1] = $125;
 return ($status$1|0);
}
function _lua_yieldk($L,$nresults,$ctx,$k) {
 $L = $L|0;
 $nresults = $nresults|0;
 $ctx = $ctx|0;
 $k = $k|0;
 var $$sum = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = ((($L)) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($L)) + 36|0);
 $3 = HEAP16[$2>>1]|0;
 $4 = ($3<<16>>16)==(0);
 if (!($4)) {
  $5 = ((($L)) + 12|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ((($6)) + 172|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($8|0)==($L|0);
  if ($9) {
   _luaG_runerror($L,5593,$vararg_buffer1);
   // unreachable;
  } else {
   _luaG_runerror($L,5551,$vararg_buffer);
   // unreachable;
  }
 }
 $10 = ((($L)) + 6|0);
 HEAP8[$10>>0] = 1;
 $11 = HEAP32[$1>>2]|0;
 $12 = ((($L)) + 28|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = $11;
 $15 = $13;
 $16 = (($14) - ($15))|0;
 $17 = ((($1)) + 20|0);
 HEAP32[$17>>2] = $16;
 $18 = ((($1)) + 18|0);
 $19 = HEAP8[$18>>0]|0;
 $20 = $19 & 1;
 $21 = ($20<<24>>24)==(0);
 if (!($21)) {
  STACKTOP = sp;return 0;
 }
 $22 = ((($1)) + 28|0);
 HEAP32[$22>>2] = $k;
 $23 = ($k|0)==(0|0);
 if ($23) {
  $25 = ((($L)) + 8|0);
  $26 = HEAP32[$25>>2]|0;
  $$sum = $nresults ^ -1;
  $27 = (($26) + ($$sum<<4)|0);
  HEAP32[$1>>2] = $27;
  _luaD_throw($L,1);
  // unreachable;
 }
 $24 = ((($1)) + 24|0);
 HEAP32[$24>>2] = $ctx;
 $25 = ((($L)) + 8|0);
 $26 = HEAP32[$25>>2]|0;
 $$sum = $nresults ^ -1;
 $27 = (($26) + ($$sum<<4)|0);
 HEAP32[$1>>2] = $27;
 _luaD_throw($L,1);
 // unreachable;
 return (0)|0;
}
function _luaD_pcall($L,$func,$u,$old_top,$ef) {
 $L = $L|0;
 $func = $func|0;
 $u = $u|0;
 $old_top = $old_top|0;
 $ef = $ef|0;
 var $$$i = 0, $$lim$0$i$i = 0, $$sum = 0, $$sum1 = 0, $$sum2 = 0, $$sum3 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $7 = 0, $8 = 0, $9 = 0, $ci$0$i$i = 0, $ci$03$i$i = 0, $lim$0$lcssa$i$i = 0, $lim$02$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($L)) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($L)) + 41|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = ((($L)) + 36|0);
 $5 = HEAP16[$4>>1]|0;
 $6 = ((($L)) + 68|0);
 $7 = HEAP32[$6>>2]|0;
 HEAP32[$6>>2] = $ef;
 $8 = (_luaD_rawrunprotected($L,$func,$u)|0);
 $9 = ($8|0)==(0);
 if ($9) {
  HEAP32[$6>>2] = $7;
  return ($8|0);
 }
 $10 = ((($L)) + 28|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($11) + ($old_top)|0);
 _luaF_close($L,$12);
 switch ($8|0) {
 case 4:  {
  $13 = ((($L)) + 12|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ((($14)) + 180|0);
  $16 = HEAP32[$15>>2]|0;
  HEAP32[$12>>2] = $16;
  $17 = ((($16)) + 4|0);
  $18 = HEAP8[$17>>0]|0;
  $19 = $18&255;
  $20 = $19 | 64;
  $$sum2 = (($old_top) + 8)|0;
  $21 = (($11) + ($$sum2)|0);
  HEAP32[$21>>2] = $20;
  break;
 }
 case 6:  {
  $22 = (_luaS_newlstr($L,5527,23)|0);
  HEAP32[$12>>2] = $22;
  $23 = ((($22)) + 4|0);
  $24 = HEAP8[$23>>0]|0;
  $25 = $24&255;
  $26 = $25 | 64;
  $$sum = (($old_top) + 8)|0;
  $27 = (($11) + ($$sum)|0);
  HEAP32[$27>>2] = $26;
  break;
 }
 default: {
  $28 = ((($L)) + 8|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = ((($29)) + -16|0);
  $31 = $30;
  $32 = $31;
  $33 = HEAP32[$32>>2]|0;
  $34 = (($31) + 4)|0;
  $35 = $34;
  $36 = HEAP32[$35>>2]|0;
  $37 = $12;
  $38 = $37;
  HEAP32[$38>>2] = $33;
  $39 = (($37) + 4)|0;
  $40 = $39;
  HEAP32[$40>>2] = $36;
  $41 = ((($29)) + -8|0);
  $42 = HEAP32[$41>>2]|0;
  $$sum3 = (($old_top) + 8)|0;
  $43 = (($11) + ($$sum3)|0);
  HEAP32[$43>>2] = $42;
 }
 }
 $$sum1 = (($old_top) + 16)|0;
 $44 = (($11) + ($$sum1)|0);
 $45 = ((($L)) + 8|0);
 HEAP32[$45>>2] = $44;
 HEAP32[$0>>2] = $1;
 HEAP8[$2>>0] = $3;
 HEAP16[$4>>1] = $5;
 $46 = ($1|0)==(0);
 if ($46) {
  $lim$0$lcssa$i$i = $44;
 } else {
  $47 = $1;
  $ci$03$i$i = $47;$lim$02$i$i = $44;
  while(1) {
   $48 = ((($ci$03$i$i)) + 4|0);
   $49 = HEAP32[$48>>2]|0;
   $50 = ($lim$02$i$i>>>0)<($49>>>0);
   $$lim$0$i$i = $50 ? $49 : $lim$02$i$i;
   $51 = ((($ci$03$i$i)) + 8|0);
   $ci$0$i$i = HEAP32[$51>>2]|0;
   $52 = ($ci$0$i$i|0)==(0|0);
   if ($52) {
    $lim$0$lcssa$i$i = $$lim$0$i$i;
    break;
   } else {
    $ci$03$i$i = $ci$0$i$i;$lim$02$i$i = $$lim$0$i$i;
   }
  }
 }
 $53 = HEAP32[$10>>2]|0;
 $54 = $lim$0$lcssa$i$i;
 $55 = $53;
 $56 = (($54) - ($55))|0;
 $57 = $56 >> 4;
 $58 = (($57) + 1)|0;
 $59 = (($58|0) / 8)&-1;
 $60 = (($59) + 10)|0;
 $61 = (($60) + ($58))|0;
 $62 = ($61|0)>(1000000);
 $$$i = $62 ? 1000000 : $61;
 $63 = ($56|0)>(15999984);
 if ($63) {
  HEAP32[$6>>2] = $7;
  return ($8|0);
 }
 $64 = ((($L)) + 32|0);
 $65 = HEAP32[$64>>2]|0;
 $66 = ($$$i|0)<($65|0);
 if (!($66)) {
  HEAP32[$6>>2] = $7;
  return ($8|0);
 }
 _luaD_reallocstack($L,$$$i);
 HEAP32[$6>>2] = $7;
 return ($8|0);
}
function _luaD_protectedparser($L,$z,$name,$mode) {
 $L = $L|0;
 $z = $z|0;
 $name = $name|0;
 $mode = $mode|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $p = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $p = sp;
 $0 = ((($L)) + 36|0);
 $1 = HEAP16[$0>>1]|0;
 $2 = (($1) + 1)<<16>>16;
 HEAP16[$0>>1] = $2;
 HEAP32[$p>>2] = $z;
 $3 = ((($p)) + 56|0);
 HEAP32[$3>>2] = $name;
 $4 = ((($p)) + 52|0);
 HEAP32[$4>>2] = $mode;
 $5 = ((($p)) + 16|0);
 HEAP32[$5>>2] = 0;
 $6 = ((($p)) + 24|0);
 HEAP32[$6>>2] = 0;
 $7 = ((($p)) + 28|0);
 HEAP32[$7>>2] = 0;
 $8 = ((($p)) + 36|0);
 HEAP32[$8>>2] = 0;
 $9 = ((($p)) + 40|0);
 HEAP32[$9>>2] = 0;
 $10 = ((($p)) + 48|0);
 HEAP32[$10>>2] = 0;
 $11 = ((($p)) + 4|0);
 HEAP32[$11>>2] = 0;
 $12 = ((($p)) + 12|0);
 HEAP32[$12>>2] = 0;
 $13 = ((($L)) + 8|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ((($L)) + 28|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = $14;
 $18 = $16;
 $19 = (($17) - ($18))|0;
 $20 = ((($L)) + 68|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = (_luaD_pcall($L,160,$p,$19,$21)|0);
 $23 = HEAP32[$11>>2]|0;
 $24 = HEAP32[$12>>2]|0;
 $25 = (_luaM_realloc_($L,$23,$24,0)|0);
 HEAP32[$11>>2] = $25;
 HEAP32[$12>>2] = 0;
 $26 = HEAP32[$5>>2]|0;
 $27 = HEAP32[$6>>2]|0;
 $28 = $27 << 1;
 (_luaM_realloc_($L,$26,$28,0)|0);
 $29 = HEAP32[$7>>2]|0;
 $30 = HEAP32[$8>>2]|0;
 $31 = $30 << 4;
 (_luaM_realloc_($L,$29,$31,0)|0);
 $32 = HEAP32[$9>>2]|0;
 $33 = HEAP32[$10>>2]|0;
 $34 = $33 << 4;
 (_luaM_realloc_($L,$32,$34,0)|0);
 $35 = HEAP16[$0>>1]|0;
 $36 = (($35) + -1)<<16>>16;
 HEAP16[$0>>1] = $36;
 STACKTOP = sp;return ($22|0);
}
function _resume($L,$ud) {
 $L = $L|0;
 $ud = $ud|0;
 var $$0$i = 0, $$1$i = 0, $$25$i = 0, $$phi$trans$insert$i = 0, $$pre = 0, $$pre$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $9 = 0, $firstArg$0 = 0, $i$03$i = 0, $i$03$i$lcssa = 0, $i$11$i = 0, $res$04$i = 0, $res$04$i$lcssa = 0, $res$1$lcssa$i = 0, $res$12$i = 0, $scevgep$i = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = ((($L)) + 38|0);
 $1 = HEAP16[$0>>1]|0;
 $2 = ((($L)) + 16|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($1&65535)>(199);
 if ($4) {
  _resume_error($L,5510,$ud);
  // unreachable;
 }
 $5 = ((($L)) + 6|0);
 $6 = HEAP8[$5>>0]|0;
 switch ($6<<24>>24) {
 case 0:  {
  $7 = ((($L)) + 72|0);
  $8 = ($3|0)==($7|0);
  if (!($8)) {
   _resume_error($L,5689,$ud);
   // unreachable;
  }
  $9 = ((($ud)) + -16|0);
  $10 = (_luaD_precall($L,$9,-1)|0);
  $11 = ($10|0)==(0);
  if (!($11)) {
   return;
  }
  _luaV_execute($L);
  return;
  break;
 }
 case 1:  {
  HEAP8[$5>>0] = 0;
  $12 = ((($L)) + 28|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ((($3)) + 20|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = (($13) + ($15)|0);
  HEAP32[$3>>2] = $16;
  $17 = ((($3)) + 18|0);
  $18 = HEAP8[$17>>0]|0;
  $19 = $18 & 1;
  $20 = ($19<<24>>24)==(0);
  if ($20) {
   $21 = ((($3)) + 28|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = ($22|0)==(0|0);
   if ($23) {
    $38 = $3;$firstArg$0 = $ud;
   } else {
    $24 = ((($3)) + 37|0);
    HEAP8[$24>>0] = 1;
    $25 = $18&255;
    $26 = $25 | 8;
    $27 = $26&255;
    HEAP8[$17>>0] = $27;
    $28 = (FUNCTION_TABLE_ii[$22 & 511]($L)|0);
    $29 = ((($L)) + 8|0);
    $30 = HEAP32[$29>>2]|0;
    $31 = (0 - ($28))|0;
    $32 = (($30) + ($31<<4)|0);
    $$pre = HEAP32[$2>>2]|0;
    $38 = $$pre;$firstArg$0 = $32;
   }
   $33 = ((($L)) + 40|0);
   $34 = HEAP8[$33>>0]|0;
   $35 = $34&255;
   $36 = $35 & 6;
   $37 = ($36|0)==(0);
   if ($37) {
    $$phi$trans$insert$i = ((($38)) + 8|0);
    $$pre$i = HEAP32[$$phi$trans$insert$i>>2]|0;
    $$1$i = $firstArg$0;$56 = $$pre$i;
   } else {
    $39 = $35 & 2;
    $40 = ($39|0)==(0);
    if ($40) {
     $$0$i = $firstArg$0;
    } else {
     $41 = HEAP32[$12>>2]|0;
     $42 = $firstArg$0;
     $43 = $41;
     $44 = (($42) - ($43))|0;
     _luaD_hook($L,1,-1);
     $45 = HEAP32[$12>>2]|0;
     $46 = (($45) + ($44)|0);
     $$0$i = $46;
    }
    $47 = ((($38)) + 8|0);
    $48 = HEAP32[$47>>2]|0;
    $49 = ((($48)) + 28|0);
    $50 = HEAP32[$49>>2]|0;
    $51 = ((($L)) + 20|0);
    HEAP32[$51>>2] = $50;
    $52 = $48;
    $$1$i = $$0$i;$56 = $52;
   }
   $53 = HEAP32[$38>>2]|0;
   $54 = ((($38)) + 16|0);
   $55 = HEAP16[$54>>1]|0;
   HEAP32[$2>>2] = $56;
   $57 = ((($L)) + 8|0);
   $58 = ($55<<16>>16)==(0);
   L27: do {
    if ($58) {
     $res$1$lcssa$i = $53;
    } else {
     $59 = $55 << 16 >> 16;
     $$25$i = $$1$i;$i$03$i = $59;$res$04$i = $53;
     while(1) {
      $61 = HEAP32[$57>>2]|0;
      $62 = ($$25$i>>>0)<($61>>>0);
      if (!($62)) {
       $i$03$i$lcssa = $i$03$i;$res$04$i$lcssa = $res$04$i;
       break;
      }
      $63 = ((($$25$i)) + 16|0);
      $64 = ((($res$04$i)) + 16|0);
      $65 = $$25$i;
      $66 = $65;
      $67 = HEAP32[$66>>2]|0;
      $68 = (($65) + 4)|0;
      $69 = $68;
      $70 = HEAP32[$69>>2]|0;
      $71 = $res$04$i;
      $72 = $71;
      HEAP32[$72>>2] = $67;
      $73 = (($71) + 4)|0;
      $74 = $73;
      HEAP32[$74>>2] = $70;
      $75 = ((($$25$i)) + 8|0);
      $76 = HEAP32[$75>>2]|0;
      $77 = ((($res$04$i)) + 8|0);
      HEAP32[$77>>2] = $76;
      $78 = (($i$03$i) + -1)|0;
      $79 = ($78|0)==(0);
      if ($79) {
       $res$1$lcssa$i = $64;
       break L27;
      } else {
       $$25$i = $63;$i$03$i = $78;$res$04$i = $64;
      }
     }
     $60 = ($i$03$i$lcssa|0)>(0);
     if ($60) {
      $i$11$i = $i$03$i$lcssa;$res$12$i = $res$04$i$lcssa;
      while(1) {
       $80 = (($i$11$i) + -1)|0;
       $81 = ((($res$12$i)) + 16|0);
       $82 = ((($res$12$i)) + 8|0);
       HEAP32[$82>>2] = 0;
       $83 = ($i$11$i|0)>(1);
       if ($83) {
        $i$11$i = $80;$res$12$i = $81;
       } else {
        break;
       }
      }
      $scevgep$i = (($res$04$i$lcssa) + ($i$03$i$lcssa<<4)|0);
      $res$1$lcssa$i = $scevgep$i;
     } else {
      $res$1$lcssa$i = $res$04$i$lcssa;
     }
    }
   } while(0);
   HEAP32[$57>>2] = $res$1$lcssa$i;
  } else {
   _luaV_execute($L);
  }
  _unroll($L,0);
  return;
  break;
 }
 default: {
  _resume_error($L,9586,$ud);
  // unreachable;
 }
 }
}
function _unroll($L,$ud) {
 $L = $L|0;
 $ud = $ud|0;
 var $$0$i$i = 0, $$1$i$i = 0, $$25$i$i = 0, $$phi$trans$insert$i$i = 0, $$pre$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $i$03$i$i = 0, $i$03$i$i$lcssa = 0, $i$11$i$i = 0;
 var $res$04$i$i = 0, $res$04$i$i$lcssa = 0, $res$1$lcssa$i$i = 0, $res$12$i$i = 0, $scevgep$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($L)) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($L)) + 72|0);
 $3 = ($1|0)==($2|0);
 if ($3) {
  return;
 }
 $4 = ((($L)) + 8|0);
 $5 = ((($L)) + 40|0);
 $6 = ((($L)) + 20|0);
 $7 = ((($L)) + 28|0);
 $8 = ((($L)) + 68|0);
 $10 = $1;
 while(1) {
  $9 = ((($10)) + 18|0);
  $11 = HEAP8[$9>>0]|0;
  $12 = $11 & 1;
  $13 = ($12<<24>>24)==(0);
  if ($13) {
   $14 = $11&255;
   $15 = $14 & 16;
   $16 = ($15|0)==(0);
   if ($16) {
    $29 = $11;
   } else {
    $17 = $14 & 239;
    $18 = $17&255;
    HEAP8[$9>>0] = $18;
    $19 = ((($10)) + 32|0);
    $20 = HEAP32[$19>>2]|0;
    HEAP32[$8>>2] = $20;
    $29 = $18;
   }
   $21 = ((($10)) + 16|0);
   $22 = HEAP16[$21>>1]|0;
   $23 = ($22<<16>>16)==(-1);
   if ($23) {
    $24 = ((($10)) + 4|0);
    $25 = HEAP32[$24>>2]|0;
    $26 = HEAP32[$4>>2]|0;
    $27 = ($25>>>0)<($26>>>0);
    if ($27) {
     HEAP32[$24>>2] = $26;
    }
   }
   $28 = $29 & 32;
   $30 = ($28<<24>>24)==(0);
   if ($30) {
    $31 = ((($10)) + 37|0);
    HEAP8[$31>>0] = 1;
   }
   $32 = $29&255;
   $33 = $32 & 199;
   $34 = $33 | 8;
   $35 = $34&255;
   HEAP8[$9>>0] = $35;
   $36 = ((($10)) + 28|0);
   $37 = HEAP32[$36>>2]|0;
   $38 = (FUNCTION_TABLE_ii[$37 & 511]($L)|0);
   $39 = HEAP32[$4>>2]|0;
   $40 = (0 - ($38))|0;
   $41 = (($39) + ($40<<4)|0);
   $42 = HEAP32[$0>>2]|0;
   $43 = HEAP8[$5>>0]|0;
   $44 = $43&255;
   $45 = $44 & 6;
   $46 = ($45|0)==(0);
   if ($46) {
    $$phi$trans$insert$i$i = ((($42)) + 8|0);
    $$pre$i$i = HEAP32[$$phi$trans$insert$i$i>>2]|0;
    $$1$i$i = $41;$63 = $$pre$i$i;
   } else {
    $47 = $44 & 2;
    $48 = ($47|0)==(0);
    if ($48) {
     $$0$i$i = $41;
    } else {
     $49 = HEAP32[$7>>2]|0;
     $50 = $41;
     $51 = $49;
     $52 = (($50) - ($51))|0;
     _luaD_hook($L,1,-1);
     $53 = HEAP32[$7>>2]|0;
     $54 = (($53) + ($52)|0);
     $$0$i$i = $54;
    }
    $55 = ((($42)) + 8|0);
    $56 = HEAP32[$55>>2]|0;
    $57 = ((($56)) + 28|0);
    $58 = HEAP32[$57>>2]|0;
    HEAP32[$6>>2] = $58;
    $59 = $56;
    $$1$i$i = $$0$i$i;$63 = $59;
   }
   $60 = HEAP32[$42>>2]|0;
   $61 = ((($42)) + 16|0);
   $62 = HEAP16[$61>>1]|0;
   HEAP32[$0>>2] = $63;
   $64 = ($62<<16>>16)==(0);
   L25: do {
    if ($64) {
     $res$1$lcssa$i$i = $60;
    } else {
     $65 = $62 << 16 >> 16;
     $$25$i$i = $$1$i$i;$i$03$i$i = $65;$res$04$i$i = $60;
     while(1) {
      $67 = HEAP32[$4>>2]|0;
      $68 = ($$25$i$i>>>0)<($67>>>0);
      if (!($68)) {
       $i$03$i$i$lcssa = $i$03$i$i;$res$04$i$i$lcssa = $res$04$i$i;
       break;
      }
      $69 = ((($$25$i$i)) + 16|0);
      $70 = ((($res$04$i$i)) + 16|0);
      $71 = $$25$i$i;
      $72 = $71;
      $73 = HEAP32[$72>>2]|0;
      $74 = (($71) + 4)|0;
      $75 = $74;
      $76 = HEAP32[$75>>2]|0;
      $77 = $res$04$i$i;
      $78 = $77;
      HEAP32[$78>>2] = $73;
      $79 = (($77) + 4)|0;
      $80 = $79;
      HEAP32[$80>>2] = $76;
      $81 = ((($$25$i$i)) + 8|0);
      $82 = HEAP32[$81>>2]|0;
      $83 = ((($res$04$i$i)) + 8|0);
      HEAP32[$83>>2] = $82;
      $84 = (($i$03$i$i) + -1)|0;
      $85 = ($84|0)==(0);
      if ($85) {
       $res$1$lcssa$i$i = $70;
       break L25;
      } else {
       $$25$i$i = $69;$i$03$i$i = $84;$res$04$i$i = $70;
      }
     }
     $66 = ($i$03$i$i$lcssa|0)>(0);
     if ($66) {
      $i$11$i$i = $i$03$i$i$lcssa;$res$12$i$i = $res$04$i$i$lcssa;
      while(1) {
       $86 = (($i$11$i$i) + -1)|0;
       $87 = ((($res$12$i$i)) + 16|0);
       $88 = ((($res$12$i$i)) + 8|0);
       HEAP32[$88>>2] = 0;
       $89 = ($i$11$i$i|0)>(1);
       if ($89) {
        $i$11$i$i = $86;$res$12$i$i = $87;
       } else {
        break;
       }
      }
      $scevgep$i$i = (($res$04$i$i$lcssa) + ($i$03$i$i$lcssa<<4)|0);
      $res$1$lcssa$i$i = $scevgep$i$i;
     } else {
      $res$1$lcssa$i$i = $res$04$i$i$lcssa;
     }
    }
   } while(0);
   HEAP32[$4>>2] = $res$1$lcssa$i$i;
  } else {
   _luaV_finishOp($L);
   _luaV_execute($L);
  }
  $90 = HEAP32[$0>>2]|0;
  $91 = ($90|0)==($2|0);
  if ($91) {
   break;
  } else {
   $10 = $90;
  }
 }
 return;
}
function _f_parser($L,$ud) {
 $L = $L|0;
 $ud = $ud|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cl$0 = 0, $i$02 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_ptr1 = 0, $vararg_ptr5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = HEAP32[$ud>>2]|0;
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + -1)|0;
 HEAP32[$0>>2] = $2;
 $3 = ($1|0)==(0);
 if ($3) {
  $9 = (_luaZ_fill($0)|0);
  $11 = $9;
 } else {
  $4 = ((($0)) + 4|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ((($5)) + 1|0);
  HEAP32[$4>>2] = $6;
  $7 = HEAP8[$5>>0]|0;
  $8 = $7&255;
  $11 = $8;
 }
 $10 = ($11|0)==(27);
 $12 = ((($ud)) + 52|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13|0)==(0|0);
 if ($10) {
  if (!($14)) {
   $15 = (_strchr($13,98)|0);
   $16 = ($15|0)==(0|0);
   if ($16) {
    HEAP32[$vararg_buffer>>2] = 5677;
    $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
    HEAP32[$vararg_ptr1>>2] = $13;
    (_luaO_pushfstring($L,5635,$vararg_buffer)|0);
    _luaD_throw($L,3);
    // unreachable;
   }
  }
  $17 = HEAP32[$ud>>2]|0;
  $18 = ((($ud)) + 4|0);
  $19 = ((($ud)) + 56|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = (_luaU_undump($L,$17,$18,$20)|0);
  $cl$0 = $21;
 } else {
  if (!($14)) {
   $22 = (_strchr($13,116)|0);
   $23 = ($22|0)==(0|0);
   if ($23) {
    HEAP32[$vararg_buffer2>>2] = 5684;
    $vararg_ptr5 = ((($vararg_buffer2)) + 4|0);
    HEAP32[$vararg_ptr5>>2] = $13;
    (_luaO_pushfstring($L,5635,$vararg_buffer2)|0);
    _luaD_throw($L,3);
    // unreachable;
   }
  }
  $24 = HEAP32[$ud>>2]|0;
  $25 = ((($ud)) + 4|0);
  $26 = ((($ud)) + 16|0);
  $27 = ((($ud)) + 56|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = (_luaY_parser($L,$24,$25,$26,$28,$11)|0);
  $cl$0 = $29;
 }
 $30 = ((($cl$0)) + 6|0);
 $31 = HEAP8[$30>>0]|0;
 $32 = ($31<<24>>24)==(0);
 if ($32) {
  STACKTOP = sp;return;
 }
 $33 = ((($cl$0)) + 16|0);
 $34 = ((($cl$0)) + 5|0);
 $i$02 = 0;
 while(1) {
  $35 = (_luaF_newupval($L)|0);
  $36 = (($33) + ($i$02<<2)|0);
  HEAP32[$36>>2] = $35;
  $37 = ((($35)) + 5|0);
  $38 = HEAP8[$37>>0]|0;
  $39 = $38 & 3;
  $40 = ($39<<24>>24)==(0);
  if (!($40)) {
   $41 = HEAP8[$34>>0]|0;
   $42 = $41 & 4;
   $43 = ($42<<24>>24)==(0);
   if (!($43)) {
    _luaC_barrier_($L,$cl$0,$35);
   }
  }
  $44 = (($i$02) + 1)|0;
  $45 = HEAP8[$30>>0]|0;
  $46 = $45&255;
  $47 = ($44|0)<($46|0);
  if ($47) {
   $i$02 = $44;
  } else {
   break;
  }
 }
 STACKTOP = sp;return;
}
function _resume_error($L,$msg,$firstArg) {
 $L = $L|0;
 $msg = $msg|0;
 $firstArg = $firstArg|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($L)) + 8|0);
 HEAP32[$0>>2] = $firstArg;
 $1 = (_luaS_new($L,$msg)|0);
 HEAP32[$firstArg>>2] = $1;
 $2 = ((($1)) + 4|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = $3&255;
 $5 = $4 | 64;
 $6 = ((($firstArg)) + 8|0);
 HEAP32[$6>>2] = $5;
 $7 = HEAP32[$0>>2]|0;
 $8 = ((($7)) + 16|0);
 HEAP32[$0>>2] = $8;
 _luaD_throw($L,-1);
 // unreachable;
}
function _luaU_dump($L,$f,$w,$data,$strip) {
 $L = $L|0;
 $f = $f|0;
 $w = $w|0;
 $data = $data|0;
 $strip = $strip|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $D = 0, $h$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $h$i = sp + 20|0;
 $D = sp;
 HEAP32[$D>>2] = $L;
 $0 = ((($D)) + 4|0);
 HEAP32[$0>>2] = $w;
 $1 = ((($D)) + 8|0);
 HEAP32[$1>>2] = $data;
 $2 = ((($D)) + 12|0);
 HEAP32[$2>>2] = $strip;
 $3 = ((($D)) + 16|0);
 _luaU_header($h$i);
 $4 = (FUNCTION_TABLE_iiiii[$w & 255]($L,$h$i,18,$data)|0);
 HEAP32[$3>>2] = $4;
 _DumpFunction($f,$D);
 $5 = HEAP32[$3>>2]|0;
 STACKTOP = sp;return ($5|0);
}
function _DumpFunction($f,$D) {
 $f = $f|0;
 $D = $D|0;
 var $$ph = 0, $$pre = 0, $$pre$i = 0, $$pre$i9 = 0, $$pre24 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
 var $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0.0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0;
 var $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0;
 var $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0;
 var $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0;
 var $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0;
 var $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0;
 var $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0;
 var $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0;
 var $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0;
 var $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0;
 var $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0;
 var $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0;
 var $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0;
 var $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0;
 var $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond = 0, $exitcond$i = 0, $exitcond$i10 = 0, $exitcond16$i = 0, $exitcond23 = 0, $i$0$i21 = 0;
 var $i$013$i = 0, $i$03$i = 0, $i$1$i20 = 0, $i$112$i = 0, $size$i$i = 0, $size$i$i11 = 0, $size$i1$i = 0, $size$i8$i = 0, $size1$i$i = 0, $size1$i$i12 = 0, $size1$i2$i = 0, $size1$i9$i = 0, $x$i = 0, $x$i$i = 0, $x$i$i14 = 0, $x$i1$i = 0, $x$i1$i13 = 0, $x$i2 = 0, $x$i4 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 80|0;
 $size$i$i11 = sp + 76|0;
 $size1$i$i12 = sp + 72|0;
 $1 = sp;
 $x$i1$i13 = sp + 90|0;
 $x$i$i14 = sp + 89|0;
 $2 = sp + 68|0;
 $x$i1$i = sp + 88|0;
 $x$i$i = sp + 87|0;
 $3 = sp + 64|0;
 $4 = sp + 60|0;
 $x$i4 = sp + 86|0;
 $x$i2 = sp + 85|0;
 $x$i = sp + 84|0;
 $5 = sp + 56|0;
 $6 = sp + 52|0;
 $size$i8$i = sp + 48|0;
 $size1$i9$i = sp + 44|0;
 $7 = sp + 40|0;
 $8 = sp + 36|0;
 $9 = sp + 32|0;
 $size$i1$i = sp + 28|0;
 $size1$i2$i = sp + 24|0;
 $10 = sp + 20|0;
 $11 = sp + 16|0;
 $size$i$i = sp + 12|0;
 $size1$i$i = sp + 8|0;
 $12 = ((($f)) + 64|0);
 $13 = HEAP32[$12>>2]|0;
 HEAP32[$6>>2] = $13;
 $14 = ((($D)) + 16|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ($15|0)==(0);
 if ($16) {
  $17 = ((($D)) + 4|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = HEAP32[$D>>2]|0;
  $20 = ((($D)) + 8|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = (FUNCTION_TABLE_iiiii[$18 & 255]($19,$6,4,$21)|0);
  HEAP32[$14>>2] = $22;
  $26 = $22;
 } else {
  $26 = $15;
 }
 $23 = ((($f)) + 68|0);
 $24 = HEAP32[$23>>2]|0;
 HEAP32[$5>>2] = $24;
 $25 = ($26|0)==(0);
 if ($25) {
  $27 = ((($D)) + 4|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = HEAP32[$D>>2]|0;
  $30 = ((($D)) + 8|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = (FUNCTION_TABLE_iiiii[$28 & 255]($29,$5,4,$31)|0);
  HEAP32[$14>>2] = $32;
  $36 = $32;
 } else {
  $36 = $26;
 }
 $33 = ((($f)) + 76|0);
 $34 = HEAP8[$33>>0]|0;
 HEAP8[$x$i>>0] = $34;
 $35 = ($36|0)==(0);
 if ($35) {
  $37 = ((($D)) + 4|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = HEAP32[$D>>2]|0;
  $40 = ((($D)) + 8|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = (FUNCTION_TABLE_iiiii[$38 & 255]($39,$x$i,1,$41)|0);
  HEAP32[$14>>2] = $42;
  $46 = $42;
 } else {
  $46 = $36;
 }
 $43 = ((($f)) + 77|0);
 $44 = HEAP8[$43>>0]|0;
 HEAP8[$x$i2>>0] = $44;
 $45 = ($46|0)==(0);
 if ($45) {
  $47 = ((($D)) + 4|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = HEAP32[$D>>2]|0;
  $50 = ((($D)) + 8|0);
  $51 = HEAP32[$50>>2]|0;
  $52 = (FUNCTION_TABLE_iiiii[$48 & 255]($49,$x$i2,1,$51)|0);
  HEAP32[$14>>2] = $52;
  $56 = $52;
 } else {
  $56 = $46;
 }
 $53 = ((($f)) + 78|0);
 $54 = HEAP8[$53>>0]|0;
 HEAP8[$x$i4>>0] = $54;
 $55 = ($56|0)==(0);
 if ($55) {
  $57 = ((($D)) + 4|0);
  $58 = HEAP32[$57>>2]|0;
  $59 = HEAP32[$D>>2]|0;
  $60 = ((($D)) + 8|0);
  $61 = HEAP32[$60>>2]|0;
  $62 = (FUNCTION_TABLE_iiiii[$58 & 255]($59,$x$i4,1,$61)|0);
  HEAP32[$14>>2] = $62;
  $68 = $62;
 } else {
  $68 = $56;
 }
 $63 = ((($f)) + 12|0);
 $64 = HEAP32[$63>>2]|0;
 $65 = ((($f)) + 48|0);
 $66 = HEAP32[$65>>2]|0;
 HEAP32[$4>>2] = $66;
 $67 = ($68|0)==(0);
 if ($67) {
  $69 = ((($D)) + 4|0);
  $70 = HEAP32[$69>>2]|0;
  $71 = HEAP32[$D>>2]|0;
  $72 = ((($D)) + 8|0);
  $73 = HEAP32[$72>>2]|0;
  $74 = (FUNCTION_TABLE_iiiii[$70 & 255]($71,$4,4,$73)|0);
  HEAP32[$14>>2] = $74;
  $75 = ($74|0)==(0);
  if ($75) {
   $78 = $66 << 2;
   $79 = HEAP32[$69>>2]|0;
   $80 = HEAP32[$D>>2]|0;
   $81 = HEAP32[$72>>2]|0;
   $82 = (FUNCTION_TABLE_iiiii[$79 & 255]($80,$64,$78,$81)|0);
   HEAP32[$14>>2] = $82;
   $83 = ((($f)) + 44|0);
   $84 = HEAP32[$83>>2]|0;
   HEAP32[$2>>2] = $84;
   $85 = ($82|0)==(0);
   if ($85) {
    $86 = ((($D)) + 4|0);
    $87 = HEAP32[$86>>2]|0;
    $88 = HEAP32[$D>>2]|0;
    $89 = ((($D)) + 8|0);
    $90 = HEAP32[$89>>2]|0;
    $91 = (FUNCTION_TABLE_iiiii[$87 & 255]($88,$2,4,$90)|0);
    HEAP32[$14>>2] = $91;
    $353 = $2;$354 = $91;$93 = $84;
   } else {
    $353 = $2;$354 = $82;$93 = $84;
   }
  } else {
   $$ph = $74;
   label = 14;
  }
 } else {
  $$ph = $68;
  label = 14;
 }
 if ((label|0) == 14) {
  $76 = ((($f)) + 44|0);
  $77 = HEAP32[$76>>2]|0;
  HEAP32[$2>>2] = $77;
  $353 = $2;$354 = $$ph;$93 = $77;
 }
 $92 = ($93|0)>(0);
 L24: do {
  if ($92) {
   $94 = ((($f)) + 8|0);
   $95 = ((($D)) + 4|0);
   $96 = ((($D)) + 8|0);
   $104 = $354;$i$0$i21 = 0;
   while(1) {
    $97 = HEAP32[$94>>2]|0;
    $98 = (($97) + ($i$0$i21<<4)|0);
    $99 = (((($97) + ($i$0$i21<<4)|0)) + 8|0);
    $100 = HEAP32[$99>>2]|0;
    $101 = $100 & 15;
    $102 = $101&255;
    HEAP8[$x$i$i14>>0] = $102;
    $103 = ($104|0)==(0);
    if ($103) {
     $105 = HEAP32[$95>>2]|0;
     $106 = HEAP32[$D>>2]|0;
     $107 = HEAP32[$96>>2]|0;
     $108 = (FUNCTION_TABLE_iiiii[$105 & 255]($106,$x$i$i14,1,$107)|0);
     HEAP32[$14>>2] = $108;
     $$pre = HEAP32[$99>>2]|0;
     $110 = $$pre;$114 = $108;
    } else {
     $110 = $100;$114 = $104;
    }
    $109 = $110 & 15;
    switch ($109|0) {
    case 4:  {
     $125 = HEAP32[$98>>2]|0;
     $126 = ($125|0)==(0|0);
     if ($126) {
      HEAP32[$size$i$i11>>2] = 0;
      $127 = ($114|0)==(0);
      if ($127) {
       $128 = HEAP32[$95>>2]|0;
       $129 = HEAP32[$D>>2]|0;
       $130 = HEAP32[$96>>2]|0;
       $131 = (FUNCTION_TABLE_iiiii[$128 & 255]($129,$size$i$i11,4,$130)|0);
       HEAP32[$14>>2] = $131;
       $358 = $131;
      } else {
       $358 = $114;
      }
     } else {
      $132 = ((($125)) + 12|0);
      $133 = HEAP32[$132>>2]|0;
      $134 = (($133) + 1)|0;
      HEAP32[$size1$i$i12>>2] = $134;
      $135 = ($114|0)==(0);
      if ($135) {
       $136 = HEAP32[$95>>2]|0;
       $137 = HEAP32[$D>>2]|0;
       $138 = HEAP32[$96>>2]|0;
       $139 = (FUNCTION_TABLE_iiiii[$136 & 255]($137,$size1$i$i12,4,$138)|0);
       HEAP32[$14>>2] = $139;
       $140 = ($139|0)==(0);
       if ($140) {
        $141 = HEAP32[$size1$i$i12>>2]|0;
        $142 = ((($125)) + 16|0);
        $143 = HEAP32[$95>>2]|0;
        $144 = HEAP32[$D>>2]|0;
        $145 = HEAP32[$96>>2]|0;
        $146 = (FUNCTION_TABLE_iiiii[$143 & 255]($144,$142,$141,$145)|0);
        HEAP32[$14>>2] = $146;
        $358 = $146;
       } else {
        $358 = $139;
       }
      } else {
       $358 = $114;
      }
     }
     $355 = $358;
     break;
    }
    case 1:  {
     $111 = HEAP32[$98>>2]|0;
     $112 = $111&255;
     HEAP8[$x$i1$i13>>0] = $112;
     $113 = ($114|0)==(0);
     if ($113) {
      $115 = HEAP32[$95>>2]|0;
      $116 = HEAP32[$D>>2]|0;
      $117 = HEAP32[$96>>2]|0;
      $118 = (FUNCTION_TABLE_iiiii[$115 & 255]($116,$x$i1$i13,1,$117)|0);
      HEAP32[$14>>2] = $118;
      $356 = $118;
     } else {
      $356 = $114;
     }
     $355 = $356;
     break;
    }
    case 3:  {
     $119 = +HEAPF64[$98>>3];
     HEAPF64[$1>>3] = $119;
     $120 = ($114|0)==(0);
     if ($120) {
      $121 = HEAP32[$95>>2]|0;
      $122 = HEAP32[$D>>2]|0;
      $123 = HEAP32[$96>>2]|0;
      $124 = (FUNCTION_TABLE_iiiii[$121 & 255]($122,$1,8,$123)|0);
      HEAP32[$14>>2] = $124;
      $357 = $124;
     } else {
      $357 = $114;
     }
     $355 = $357;
     break;
    }
    default: {
     $355 = $114;
    }
    }
    $147 = (($i$0$i21) + 1)|0;
    $exitcond23 = ($147|0)==($93|0);
    if ($exitcond23) {
     $151 = $355;
     break L24;
    } else {
     $104 = $355;$i$0$i21 = $147;
    }
   }
  } else {
   $151 = $354;
  }
 } while(0);
 $148 = ((($f)) + 56|0);
 $149 = HEAP32[$148>>2]|0;
 HEAP32[$0>>2] = $149;
 $150 = ($151|0)==(0);
 if ($150) {
  $152 = ((($D)) + 4|0);
  $153 = HEAP32[$152>>2]|0;
  $154 = HEAP32[$D>>2]|0;
  $155 = ((($D)) + 8|0);
  $156 = HEAP32[$155>>2]|0;
  $157 = (FUNCTION_TABLE_iiiii[$153 & 255]($154,$0,4,$156)|0);
  HEAP32[$14>>2] = $157;
  $359 = $157;
 } else {
  $359 = $151;
 }
 $158 = ($149|0)>(0);
 if ($158) {
  $159 = ((($f)) + 16|0);
  $i$1$i20 = 0;
  while(1) {
   $160 = HEAP32[$159>>2]|0;
   $161 = (($160) + ($i$1$i20<<2)|0);
   $162 = HEAP32[$161>>2]|0;
   _DumpFunction($162,$D);
   $163 = (($i$1$i20) + 1)|0;
   $exitcond = ($163|0)==($149|0);
   if ($exitcond) {
    break;
   } else {
    $i$1$i20 = $163;
   }
  }
  $$pre24 = HEAP32[$14>>2]|0;
  $167 = $$pre24;
 } else {
  $167 = $359;
 }
 $164 = ((($f)) + 40|0);
 $165 = HEAP32[$164>>2]|0;
 HEAP32[$3>>2] = $165;
 $166 = ($167|0)==(0);
 if ($166) {
  $168 = ((($D)) + 4|0);
  $169 = HEAP32[$168>>2]|0;
  $170 = HEAP32[$D>>2]|0;
  $171 = ((($D)) + 8|0);
  $172 = HEAP32[$171>>2]|0;
  $173 = (FUNCTION_TABLE_iiiii[$169 & 255]($170,$3,4,$172)|0);
  HEAP32[$14>>2] = $173;
  $360 = $173;
 } else {
  $360 = $167;
 }
 $174 = ($165|0)>(0);
 if ($174) {
  $175 = ((($f)) + 28|0);
  $176 = ((($D)) + 4|0);
  $177 = ((($D)) + 8|0);
  $182 = $360;$i$03$i = 0;
  while(1) {
   $178 = HEAP32[$175>>2]|0;
   $179 = (((($178) + ($i$03$i<<3)|0)) + 4|0);
   $180 = HEAP8[$179>>0]|0;
   HEAP8[$x$i$i>>0] = $180;
   $181 = ($182|0)==(0);
   if ($181) {
    $183 = HEAP32[$176>>2]|0;
    $184 = HEAP32[$D>>2]|0;
    $185 = HEAP32[$177>>2]|0;
    $186 = (FUNCTION_TABLE_iiiii[$183 & 255]($184,$x$i$i,1,$185)|0);
    HEAP32[$14>>2] = $186;
    $$pre$i9 = HEAP32[$175>>2]|0;
    $188 = $$pre$i9;$191 = $186;
   } else {
    $188 = $178;$191 = $182;
   }
   $187 = (((($188) + ($i$03$i<<3)|0)) + 5|0);
   $189 = HEAP8[$187>>0]|0;
   HEAP8[$x$i1$i>>0] = $189;
   $190 = ($191|0)==(0);
   if ($190) {
    $192 = HEAP32[$176>>2]|0;
    $193 = HEAP32[$D>>2]|0;
    $194 = HEAP32[$177>>2]|0;
    $195 = (FUNCTION_TABLE_iiiii[$192 & 255]($193,$x$i1$i,1,$194)|0);
    HEAP32[$14>>2] = $195;
    $361 = $195;
   } else {
    $361 = $191;
   }
   $196 = (($i$03$i) + 1)|0;
   $exitcond$i10 = ($196|0)==($165|0);
   if ($exitcond$i10) {
    $204 = $361;
    break;
   } else {
    $182 = $361;$i$03$i = $196;
   }
  }
 } else {
  $204 = $360;
 }
 $197 = ((($D)) + 12|0);
 $198 = HEAP32[$197>>2]|0;
 $199 = ($198|0)==(0);
 if ($199) {
  $200 = ((($f)) + 36|0);
  $201 = HEAP32[$200>>2]|0;
  $202 = ($201|0)==(0|0);
  if ($202) {
   $210 = $size$i$i;$362 = $size1$i$i;
   label = 54;
  } else {
   $212 = ((($201)) + 12|0);
   $213 = HEAP32[$212>>2]|0;
   $214 = (($213) + 1)|0;
   HEAP32[$size1$i$i>>2] = $214;
   $215 = ($204|0)==(0);
   if ($215) {
    $216 = ((($D)) + 4|0);
    $217 = HEAP32[$216>>2]|0;
    $218 = HEAP32[$D>>2]|0;
    $219 = ((($D)) + 8|0);
    $220 = HEAP32[$219>>2]|0;
    $221 = (FUNCTION_TABLE_iiiii[$217 & 255]($218,$size1$i$i,4,$220)|0);
    HEAP32[$14>>2] = $221;
    $222 = ($221|0)==(0);
    if ($222) {
     $223 = HEAP32[$size1$i$i>>2]|0;
     $224 = ((($201)) + 16|0);
     $225 = HEAP32[$216>>2]|0;
     $226 = HEAP32[$D>>2]|0;
     $227 = HEAP32[$219>>2]|0;
     $228 = (FUNCTION_TABLE_iiiii[$225 & 255]($226,$224,$223,$227)|0);
     HEAP32[$14>>2] = $228;
     $363 = $size1$i$i;$364 = $size$i$i;
    } else {
     $363 = $size1$i$i;$364 = $size$i$i;
    }
   } else {
    $363 = $size1$i$i;$364 = $size$i$i;
   }
  }
 } else {
  $210 = $size$i$i;$362 = $size1$i$i;
  label = 54;
 }
 if ((label|0) == 54) {
  HEAP32[$size$i$i>>2] = 0;
  $203 = ($204|0)==(0);
  if ($203) {
   $205 = ((($D)) + 4|0);
   $206 = HEAP32[$205>>2]|0;
   $207 = HEAP32[$D>>2]|0;
   $208 = ((($D)) + 8|0);
   $209 = HEAP32[$208>>2]|0;
   $211 = (FUNCTION_TABLE_iiiii[$206 & 255]($207,$210,4,$209)|0);
   HEAP32[$14>>2] = $211;
   $363 = $362;$364 = $210;
  } else {
   $363 = $362;$364 = $210;
  }
 }
 $229 = HEAP32[$197>>2]|0;
 $230 = ($229|0)==(0);
 if ($230) {
  $231 = ((($f)) + 52|0);
  $232 = HEAP32[$231>>2]|0;
  $235 = $232;
 } else {
  $235 = 0;
 }
 $233 = ((($f)) + 20|0);
 $234 = HEAP32[$233>>2]|0;
 HEAP32[$11>>2] = $235;
 $236 = HEAP32[$14>>2]|0;
 $237 = ($236|0)==(0);
 if ($237) {
  $238 = ((($D)) + 4|0);
  $239 = HEAP32[$238>>2]|0;
  $240 = HEAP32[$D>>2]|0;
  $241 = ((($D)) + 8|0);
  $242 = HEAP32[$241>>2]|0;
  $243 = (FUNCTION_TABLE_iiiii[$239 & 255]($240,$11,4,$242)|0);
  HEAP32[$14>>2] = $243;
  $244 = ($243|0)==(0);
  if ($244) {
   $245 = $235 << 2;
   $246 = HEAP32[$238>>2]|0;
   $247 = HEAP32[$D>>2]|0;
   $248 = HEAP32[$241>>2]|0;
   $249 = (FUNCTION_TABLE_iiiii[$246 & 255]($247,$234,$245,$248)|0);
   HEAP32[$14>>2] = $249;
   $256 = $249;
  } else {
   $256 = $243;
  }
 } else {
  $256 = $236;
 }
 $250 = HEAP32[$197>>2]|0;
 $251 = ($250|0)==(0);
 if ($251) {
  $252 = ((($f)) + 60|0);
  $253 = HEAP32[$252>>2]|0;
  $254 = $253;
 } else {
  $254 = 0;
 }
 HEAP32[$10>>2] = $254;
 $255 = ($256|0)==(0);
 if ($255) {
  $257 = ((($D)) + 4|0);
  $258 = HEAP32[$257>>2]|0;
  $259 = HEAP32[$D>>2]|0;
  $260 = ((($D)) + 8|0);
  $261 = HEAP32[$260>>2]|0;
  $262 = (FUNCTION_TABLE_iiiii[$258 & 255]($259,$10,4,$261)|0);
  HEAP32[$14>>2] = $262;
  $365 = $262;
 } else {
  $365 = $256;
 }
 $263 = ($254|0)>(0);
 if ($263) {
  $264 = ((($f)) + 24|0);
  $265 = ((($D)) + 4|0);
  $266 = ((($D)) + 8|0);
  $272 = $365;$i$013$i = 0;
  while(1) {
   $267 = HEAP32[$264>>2]|0;
   $268 = (($267) + (($i$013$i*12)|0)|0);
   $269 = HEAP32[$268>>2]|0;
   $270 = ($269|0)==(0|0);
   do {
    if ($270) {
     HEAP32[$size$i1$i>>2] = 0;
     $271 = ($272|0)==(0);
     if (!($271)) {
      $296 = $272;
      break;
     }
     $273 = HEAP32[$265>>2]|0;
     $274 = HEAP32[$D>>2]|0;
     $275 = HEAP32[$266>>2]|0;
     $276 = (FUNCTION_TABLE_iiiii[$273 & 255]($274,$size$i1$i,4,$275)|0);
     HEAP32[$14>>2] = $276;
     $296 = $276;
    } else {
     $277 = ((($269)) + 12|0);
     $278 = HEAP32[$277>>2]|0;
     $279 = (($278) + 1)|0;
     HEAP32[$size1$i2$i>>2] = $279;
     $280 = ($272|0)==(0);
     if (!($280)) {
      $296 = $272;
      break;
     }
     $281 = HEAP32[$265>>2]|0;
     $282 = HEAP32[$D>>2]|0;
     $283 = HEAP32[$266>>2]|0;
     $284 = (FUNCTION_TABLE_iiiii[$281 & 255]($282,$size1$i2$i,4,$283)|0);
     HEAP32[$14>>2] = $284;
     $285 = ($284|0)==(0);
     if (!($285)) {
      $296 = $284;
      break;
     }
     $286 = HEAP32[$size1$i2$i>>2]|0;
     $287 = ((($269)) + 16|0);
     $288 = HEAP32[$265>>2]|0;
     $289 = HEAP32[$D>>2]|0;
     $290 = HEAP32[$266>>2]|0;
     $291 = (FUNCTION_TABLE_iiiii[$288 & 255]($289,$287,$286,$290)|0);
     HEAP32[$14>>2] = $291;
     $296 = $291;
    }
   } while(0);
   $292 = HEAP32[$264>>2]|0;
   $293 = (((($292) + (($i$013$i*12)|0)|0)) + 4|0);
   $294 = HEAP32[$293>>2]|0;
   HEAP32[$9>>2] = $294;
   $295 = ($296|0)==(0);
   if ($295) {
    $297 = HEAP32[$265>>2]|0;
    $298 = HEAP32[$D>>2]|0;
    $299 = HEAP32[$266>>2]|0;
    $300 = (FUNCTION_TABLE_iiiii[$297 & 255]($298,$9,4,$299)|0);
    HEAP32[$14>>2] = $300;
    $$pre$i = HEAP32[$264>>2]|0;
    $302 = $$pre$i;$305 = $300;
   } else {
    $302 = $292;$305 = $296;
   }
   $301 = (((($302) + (($i$013$i*12)|0)|0)) + 8|0);
   $303 = HEAP32[$301>>2]|0;
   HEAP32[$8>>2] = $303;
   $304 = ($305|0)==(0);
   if ($304) {
    $306 = HEAP32[$265>>2]|0;
    $307 = HEAP32[$D>>2]|0;
    $308 = HEAP32[$266>>2]|0;
    $309 = (FUNCTION_TABLE_iiiii[$306 & 255]($307,$8,4,$308)|0);
    HEAP32[$14>>2] = $309;
    $366 = $309;
   } else {
    $366 = $305;
   }
   $310 = (($i$013$i) + 1)|0;
   $exitcond16$i = ($310|0)==($254|0);
   if ($exitcond16$i) {
    $316 = $366;
    break;
   } else {
    $272 = $366;$i$013$i = $310;
   }
  }
 } else {
  $316 = $365;
 }
 $311 = HEAP32[$197>>2]|0;
 $312 = ($311|0)==(0);
 if ($312) {
  $313 = HEAP32[$164>>2]|0;
  $314 = $313;
 } else {
  $314 = 0;
 }
 HEAP32[$7>>2] = $314;
 $315 = ($316|0)==(0);
 if ($315) {
  $317 = ((($D)) + 4|0);
  $318 = HEAP32[$317>>2]|0;
  $319 = HEAP32[$D>>2]|0;
  $320 = ((($D)) + 8|0);
  $321 = HEAP32[$320>>2]|0;
  $322 = (FUNCTION_TABLE_iiiii[$318 & 255]($319,$7,4,$321)|0);
  HEAP32[$14>>2] = $322;
  $367 = $322;
 } else {
  $367 = $316;
 }
 $323 = ($314|0)>(0);
 if (!($323)) {
  STACKTOP = sp;return;
 }
 $324 = ((($f)) + 28|0);
 $325 = ((($D)) + 4|0);
 $326 = ((($D)) + 8|0);
 $332 = $367;$i$112$i = 0;
 while(1) {
  $327 = HEAP32[$324>>2]|0;
  $328 = (($327) + ($i$112$i<<3)|0);
  $329 = HEAP32[$328>>2]|0;
  $330 = ($329|0)==(0|0);
  do {
   if ($330) {
    HEAP32[$size$i8$i>>2] = 0;
    $331 = ($332|0)==(0);
    if (!($331)) {
     $368 = $332;
     break;
    }
    $333 = HEAP32[$325>>2]|0;
    $334 = HEAP32[$D>>2]|0;
    $335 = HEAP32[$326>>2]|0;
    $336 = (FUNCTION_TABLE_iiiii[$333 & 255]($334,$size$i8$i,4,$335)|0);
    HEAP32[$14>>2] = $336;
    $368 = $336;
   } else {
    $337 = ((($329)) + 12|0);
    $338 = HEAP32[$337>>2]|0;
    $339 = (($338) + 1)|0;
    HEAP32[$size1$i9$i>>2] = $339;
    $340 = ($332|0)==(0);
    if (!($340)) {
     $368 = $332;
     break;
    }
    $341 = HEAP32[$325>>2]|0;
    $342 = HEAP32[$D>>2]|0;
    $343 = HEAP32[$326>>2]|0;
    $344 = (FUNCTION_TABLE_iiiii[$341 & 255]($342,$size1$i9$i,4,$343)|0);
    HEAP32[$14>>2] = $344;
    $345 = ($344|0)==(0);
    if (!($345)) {
     $368 = $344;
     break;
    }
    $346 = HEAP32[$size1$i9$i>>2]|0;
    $347 = ((($329)) + 16|0);
    $348 = HEAP32[$325>>2]|0;
    $349 = HEAP32[$D>>2]|0;
    $350 = HEAP32[$326>>2]|0;
    $351 = (FUNCTION_TABLE_iiiii[$348 & 255]($349,$347,$346,$350)|0);
    HEAP32[$14>>2] = $351;
    $368 = $351;
   }
  } while(0);
  $352 = (($i$112$i) + 1)|0;
  $exitcond$i = ($352|0)==($314|0);
  if ($exitcond$i) {
   break;
  } else {
   $332 = $368;$i$112$i = $352;
  }
 }
 STACKTOP = sp;return;
}
function _luaF_newCclosure($L,$n) {
 $L = $L|0;
 $n = $n|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $n << 4;
 $1 = (($0) + 16)|0;
 $2 = (_luaC_newobj($L,38,$1,0,0)|0);
 $3 = $n&255;
 $4 = ((($2)) + 6|0);
 HEAP8[$4>>0] = $3;
 return ($2|0);
}
function _luaF_newLclosure($L,$n) {
 $L = $L|0;
 $n = $n|0;
 var $$in = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $n << 2;
 $1 = (($0) + 16)|0;
 $2 = (_luaC_newobj($L,6,$1,0,0)|0);
 $3 = ((($2)) + 12|0);
 HEAP32[$3>>2] = 0;
 $4 = $n&255;
 $5 = ((($2)) + 6|0);
 HEAP8[$5>>0] = $4;
 $6 = ($n|0)==(0);
 if ($6) {
  return ($2|0);
 }
 $7 = ((($2)) + 16|0);
 $$in = $n;
 while(1) {
  $8 = (($$in) + -1)|0;
  $9 = (($7) + ($8<<2)|0);
  HEAP32[$9>>2] = 0;
  $10 = ($8|0)==(0);
  if ($10) {
   break;
  } else {
   $$in = $8;
  }
 }
 return ($2|0);
}
function _luaF_newupval($L) {
 $L = $L|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_luaC_newobj($L,10,32,0,0)|0);
 $1 = ((($0)) + 16|0);
 $2 = ((($0)) + 8|0);
 HEAP32[$2>>2] = $1;
 $3 = ((($0)) + 24|0);
 HEAP32[$3>>2] = 0;
 return ($0|0);
}
function _luaF_findupval($L,$level) {
 $L = $L|0;
 $level = $level|0;
 var $$0$in = 0, $$lcssa13 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $pp$0$lcssa = 0, $pp$03 = 0, $pp$03$phi = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($L)) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($L)) + 56|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0|0);
 L1: do {
  if ($4) {
   $pp$0$lcssa = $2;
  } else {
   $6 = $3;$pp$03 = $2;
   while(1) {
    $5 = ((($6)) + 8|0);
    $7 = HEAP32[$5>>2]|0;
    $8 = ($7>>>0)<($level>>>0);
    if ($8) {
     $pp$0$lcssa = $pp$03;
     break L1;
    }
    $9 = ($7|0)==($level|0);
    if ($9) {
     $$lcssa13 = $6;
     break;
    }
    $21 = HEAP32[$6>>2]|0;
    $22 = ($21|0)==(0|0);
    if ($22) {
     $pp$0$lcssa = $6;
     break L1;
    } else {
     $pp$03$phi = $6;$6 = $21;$pp$03 = $pp$03$phi;
    }
   }
   $10 = ((($$lcssa13)) + 5|0);
   $11 = HEAP8[$10>>0]|0;
   $12 = $11&255;
   $13 = $12 ^ 3;
   $14 = ((($1)) + 60|0);
   $15 = HEAP8[$14>>0]|0;
   $16 = $15&255;
   $17 = $16 ^ 3;
   $18 = $17 & $13;
   $19 = ($18|0)==(0);
   if (!($19)) {
    $$0$in = $$lcssa13;
    return ($$0$in|0);
   }
   $20 = $13&255;
   HEAP8[$10>>0] = $20;
   $$0$in = $$lcssa13;
   return ($$0$in|0);
  }
 } while(0);
 $23 = (_luaC_newobj($L,10,32,$pp$0$lcssa,0)|0);
 $24 = ((($23)) + 8|0);
 HEAP32[$24>>2] = $level;
 $25 = ((($1)) + 112|0);
 $26 = ((($23)) + 16|0);
 HEAP32[$26>>2] = $25;
 $27 = ((($1)) + 128|0);
 $28 = ((($27)) + 4|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = ((($26)) + 4|0);
 HEAP32[$30>>2] = $29;
 $31 = ((($29)) + 16|0);
 HEAP32[$31>>2] = $23;
 HEAP32[$28>>2] = $23;
 $$0$in = $23;
 return ($$0$in|0);
}
function _luaF_freeupval($L,$uv) {
 $L = $L|0;
 $uv = $uv|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($uv)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($uv)) + 16|0);
 $3 = ($1|0)==($2|0);
 if ($3) {
  (_luaM_realloc_($L,$uv,32,0)|0);
  return;
 }
 $4 = ((($uv)) + 16|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($4)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($7)) + 16|0);
 HEAP32[$8>>2] = $5;
 $9 = $7;
 $10 = HEAP32[$4>>2]|0;
 $11 = ((($10)) + 16|0);
 $12 = ((($11)) + 4|0);
 HEAP32[$12>>2] = $9;
 (_luaM_realloc_($L,$uv,32,0)|0);
 return;
}
function _luaF_close($L,$level) {
 $L = $L|0;
 $level = $level|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($L)) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($L)) + 56|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0|0);
 if ($4) {
  return;
 }
 $5 = ((($1)) + 60|0);
 $6 = ((($1)) + 68|0);
 $8 = $3;
 while(1) {
  $7 = ((($8)) + 8|0);
  $9 = HEAP32[$7>>2]|0;
  $10 = ($9>>>0)<($level>>>0);
  if ($10) {
   label = 10;
   break;
  }
  $11 = HEAP32[$8>>2]|0;
  HEAP32[$2>>2] = $11;
  $12 = ((($8)) + 5|0);
  $13 = HEAP8[$12>>0]|0;
  $14 = $13&255;
  $15 = $14 ^ 3;
  $16 = HEAP8[$5>>0]|0;
  $17 = $16&255;
  $18 = $17 ^ 3;
  $19 = $18 & $15;
  $20 = ($19|0)==(0);
  if ($20) {
   $21 = ((($8)) + 16|0);
   $22 = ($9|0)==($21|0);
   if (!($22)) {
    $23 = ((($8)) + 16|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = ((($23)) + 4|0);
    $26 = HEAP32[$25>>2]|0;
    $27 = ((($26)) + 16|0);
    HEAP32[$27>>2] = $24;
    $28 = $26;
    $29 = HEAP32[$23>>2]|0;
    $30 = ((($29)) + 16|0);
    $31 = ((($30)) + 4|0);
    HEAP32[$31>>2] = $28;
   }
   (_luaM_realloc_($L,$8,32,0)|0);
  } else {
   $32 = ((($8)) + 16|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = ((($32)) + 4|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = ((($35)) + 16|0);
   HEAP32[$36>>2] = $33;
   $37 = $35;
   $38 = HEAP32[$32>>2]|0;
   $39 = ((($38)) + 16|0);
   $40 = ((($39)) + 4|0);
   HEAP32[$40>>2] = $37;
   $41 = ((($8)) + 16|0);
   $42 = $9;
   $43 = $42;
   $44 = HEAP32[$43>>2]|0;
   $45 = (($42) + 4)|0;
   $46 = $45;
   $47 = HEAP32[$46>>2]|0;
   $48 = $41;
   $49 = $48;
   HEAP32[$49>>2] = $44;
   $50 = (($48) + 4)|0;
   $51 = $50;
   HEAP32[$51>>2] = $47;
   $52 = ((($9)) + 8|0);
   $53 = HEAP32[$52>>2]|0;
   $54 = ((($8)) + 24|0);
   HEAP32[$54>>2] = $53;
   HEAP32[$7>>2] = $41;
   $55 = HEAP32[$6>>2]|0;
   HEAP32[$8>>2] = $55;
   HEAP32[$6>>2] = $8;
   _luaC_checkupvalcolor($1,$8);
  }
  $56 = HEAP32[$2>>2]|0;
  $57 = ($56|0)==(0|0);
  if ($57) {
   label = 10;
   break;
  } else {
   $8 = $56;
  }
 }
 if ((label|0) == 10) {
  return;
 }
}
function _luaF_newproto($L) {
 $L = $L|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_luaC_newobj($L,9,80,0,0)|0);
 $1 = ((($0)) + 8|0);
 HEAP32[$1>>2] = 0;
 $2 = ((($0)) + 44|0);
 HEAP32[$2>>2] = 0;
 $3 = ((($0)) + 16|0);
 HEAP32[$3>>2] = 0;
 $4 = ((($0)) + 56|0);
 HEAP32[$4>>2] = 0;
 $5 = ((($0)) + 12|0);
 HEAP32[$5>>2] = 0;
 $6 = ((($0)) + 32|0);
 HEAP32[$6>>2] = 0;
 $7 = ((($0)) + 48|0);
 HEAP32[$7>>2] = 0;
 $8 = ((($0)) + 20|0);
 HEAP32[$8>>2] = 0;
 $9 = ((($0)) + 52|0);
 HEAP32[$9>>2] = 0;
 $10 = ((($0)) + 28|0);
 HEAP32[$10>>2] = 0;
 $11 = ((($0)) + 40|0);
 HEAP32[$11>>2] = 0;
 $12 = ((($0)) + 76|0);
 HEAP8[$12>>0] = 0;
 $13 = ((($0)) + 77|0);
 HEAP8[$13>>0] = 0;
 $14 = ((($0)) + 78|0);
 HEAP8[$14>>0] = 0;
 $15 = ((($0)) + 24|0);
 HEAP32[$15>>2] = 0;
 $16 = ((($0)) + 60|0);
 HEAP32[$16>>2] = 0;
 $17 = ((($0)) + 64|0);
 HEAP32[$17>>2] = 0;
 $18 = ((($0)) + 68|0);
 HEAP32[$18>>2] = 0;
 $19 = ((($0)) + 36|0);
 HEAP32[$19>>2] = 0;
 return ($0|0);
}
function _luaF_freeproto($L,$f) {
 $L = $L|0;
 $f = $f|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($f)) + 48|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 << 2;
 (_luaM_realloc_($L,$1,$4,0)|0);
 $5 = ((($f)) + 16|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($f)) + 56|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $8 << 2;
 (_luaM_realloc_($L,$6,$9,0)|0);
 $10 = ((($f)) + 8|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ((($f)) + 44|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = $13 << 4;
 (_luaM_realloc_($L,$11,$14,0)|0);
 $15 = ((($f)) + 20|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ((($f)) + 52|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = $18 << 2;
 (_luaM_realloc_($L,$16,$19,0)|0);
 $20 = ((($f)) + 24|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = ((($f)) + 60|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = ($23*12)|0;
 (_luaM_realloc_($L,$21,$24,0)|0);
 $25 = ((($f)) + 28|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = ((($f)) + 40|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = $28 << 3;
 (_luaM_realloc_($L,$26,$29,0)|0);
 (_luaM_realloc_($L,$f,80,0)|0);
 return;
}
function _luaF_getlocalname($f,$local_number,$pc) {
 $f = $f|0;
 $local_number = $local_number|0;
 $pc = $pc|0;
 var $$0 = 0, $$013 = 0, $$1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $i$04 = 0, $i$04$lcssa11 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 60|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)>(0);
 if (!($2)) {
  $$0 = 0;
  return ($$0|0);
 }
 $3 = ((($f)) + 24|0);
 $4 = HEAP32[$3>>2]|0;
 $$013 = $local_number;$i$04 = 0;
 while(1) {
  $5 = (((($4) + (($i$04*12)|0)|0)) + 4|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ($6|0)>($pc|0);
  if ($7) {
   $$0 = 0;
   label = 8;
   break;
  }
  $8 = (((($4) + (($i$04*12)|0)|0)) + 8|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ($9|0)>($pc|0);
  if ($10) {
   $11 = (($$013) + -1)|0;
   $12 = ($11|0)==(0);
   if ($12) {
    $i$04$lcssa11 = $i$04;
    label = 6;
    break;
   } else {
    $$1 = $11;
   }
  } else {
   $$1 = $$013;
  }
  $16 = (($i$04) + 1)|0;
  $17 = ($16|0)<($1|0);
  if ($17) {
   $$013 = $$1;$i$04 = $16;
  } else {
   $$0 = 0;
   label = 8;
   break;
  }
 }
 if ((label|0) == 6) {
  $13 = (($4) + (($i$04$lcssa11*12)|0)|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ((($14)) + 16|0);
  $$0 = $15;
  return ($$0|0);
 }
 else if ((label|0) == 8) {
  return ($$0|0);
 }
 return (0)|0;
}
function _luaC_barrier_($L,$o,$v) {
 $L = $L|0;
 $o = $o|0;
 $v = $v|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($L)) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 61|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = ($3&255)<(2);
 if ($4) {
  _reallymarkobject($1,$v);
  return;
 } else {
  $5 = ((($o)) + 5|0);
  $6 = HEAP8[$5>>0]|0;
  $7 = $6&255;
  $8 = $7 & 184;
  $9 = ((($1)) + 60|0);
  $10 = HEAP8[$9>>0]|0;
  $11 = $10&255;
  $12 = $11 & 3;
  $13 = $12 | $8;
  $14 = $13&255;
  HEAP8[$5>>0] = $14;
  return;
 }
}
function _luaC_barrierback_($L,$o) {
 $L = $L|0;
 $o = $o|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($L)) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($o)) + 5|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = $3&255;
 $5 = $4 & 251;
 $6 = $5&255;
 HEAP8[$2>>0] = $6;
 $7 = ((($1)) + 88|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($o)) + 24|0);
 HEAP32[$9>>2] = $8;
 HEAP32[$7>>2] = $o;
 return;
}
function _luaC_barrierproto_($L,$p,$c) {
 $L = $L|0;
 $p = $p|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($p)) + 32|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if (!($2)) {
  $24 = ((($L)) + 12|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = ((($p)) + 5|0);
  $27 = HEAP8[$26>>0]|0;
  $28 = $27&255;
  $29 = $28 & 251;
  $30 = $29&255;
  HEAP8[$26>>0] = $30;
  $31 = ((($25)) + 88|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = ((($p)) + 72|0);
  HEAP32[$33>>2] = $32;
  HEAP32[$31>>2] = $p;
  return;
 }
 $3 = ((($c)) + 5|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = $4 & 3;
 $6 = ($5<<24>>24)==(0);
 if ($6) {
  return;
 }
 $7 = ((($p)) + 5|0);
 $8 = HEAP8[$7>>0]|0;
 $9 = $8 & 4;
 $10 = ($9<<24>>24)==(0);
 if ($10) {
  return;
 }
 $11 = ((($L)) + 12|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ((($12)) + 61|0);
 $14 = HEAP8[$13>>0]|0;
 $15 = ($14&255)<(2);
 if ($15) {
  _reallymarkobject($12,$c);
  return;
 } else {
  $16 = $8&255;
  $17 = $16 & 184;
  $18 = ((($12)) + 60|0);
  $19 = HEAP8[$18>>0]|0;
  $20 = $19&255;
  $21 = $20 & 3;
  $22 = $21 | $17;
  $23 = $22&255;
  HEAP8[$7>>0] = $23;
  return;
 }
}
function _luaC_checkupvalcolor($g,$uv) {
 $g = $g|0;
 $uv = $uv|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($uv)) + 5|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1&255;
 $3 = $2 & 7;
 $4 = ($3|0)==(0);
 if (!($4)) {
  return;
 }
 $5 = ((($g)) + 62|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = ($6<<24>>24)==(2);
 if (!($7)) {
  $8 = ((($g)) + 61|0);
  $9 = HEAP8[$8>>0]|0;
  $10 = ($9&255)<(2);
  if (!($10)) {
   $25 = $2 & 184;
   $26 = ((($g)) + 60|0);
   $27 = HEAP8[$26>>0]|0;
   $28 = $27&255;
   $29 = $28 & 3;
   $30 = $29 | $25;
   $31 = $30&255;
   HEAP8[$0>>0] = $31;
   return;
  }
 }
 $11 = $2 & 187;
 $12 = $11 | 4;
 $13 = $12&255;
 HEAP8[$0>>0] = $13;
 $14 = ((($uv)) + 8|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ((($15)) + 8|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $17 & 64;
 $19 = ($18|0)==(0);
 if ($19) {
  return;
 }
 $20 = HEAP32[$15>>2]|0;
 $21 = ((($20)) + 5|0);
 $22 = HEAP8[$21>>0]|0;
 $23 = $22 & 3;
 $24 = ($23<<24>>24)==(0);
 if ($24) {
  return;
 }
 _reallymarkobject($g,$20);
 return;
}
function _luaC_newobj($L,$tt,$sz,$list,$offset) {
 $L = $L|0;
 $tt = $tt|0;
 $sz = $sz|0;
 $list = $list|0;
 $offset = $offset|0;
 var $$list = 0, $$sum = 0, $$sum1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = ((($L)) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $tt & 15;
 $3 = (_luaM_realloc_($L,0,$2,$sz)|0);
 $4 = (($3) + ($offset)|0);
 $5 = ($list|0)==(0|0);
 $6 = ((($1)) + 68|0);
 $$list = $5 ? $6 : $list;
 $7 = ((($1)) + 60|0);
 $8 = HEAP8[$7>>0]|0;
 $9 = $8&255;
 $10 = $9 & 3;
 $11 = $10&255;
 $$sum = (($offset) + 5)|0;
 $12 = (($3) + ($$sum)|0);
 HEAP8[$12>>0] = $11;
 $13 = $tt&255;
 $$sum1 = (($offset) + 4)|0;
 $14 = (($3) + ($$sum1)|0);
 HEAP8[$14>>0] = $13;
 $15 = HEAP32[$$list>>2]|0;
 HEAP32[$4>>2] = $15;
 HEAP32[$$list>>2] = $4;
 return ($4|0);
}
function _luaC_checkfinalizer($L,$o,$mt) {
 $L = $L|0;
 $o = $o|0;
 $mt = $mt|0;
 var $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $or$cond$not = 0, $or$cond3 = 0, $p$0 = 0, $p$0$lcssa = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($L)) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($o)) + 5|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = $3 & 24;
 $or$cond$not = ($4<<24>>24)!=(0);
 $5 = ($mt|0)==(0|0);
 $or$cond3 = $5 | $or$cond$not;
 if ($or$cond3) {
  return;
 }
 $6 = ((($mt)) + 6|0);
 $7 = HEAP8[$6>>0]|0;
 $8 = $7 & 4;
 $9 = ($8<<24>>24)==(0);
 if (!($9)) {
  return;
 }
 $10 = ((($1)) + 192|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (_luaT_gettm($mt,2,$11)|0);
 $phitmp = ($12|0)==(0|0);
 if ($phitmp) {
  return;
 }
 $13 = ((($1)) + 76|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($14|0)==($o|0);
 if ($15) {
  while(1) {
   $16 = (_sweeplist($L,$14,1)|0);
   $17 = ($16|0)==($14|0);
   if (!($17)) {
    $$lcssa = $16;
    break;
   }
  }
  HEAP32[$13>>2] = $$lcssa;
 }
 $18 = ((($1)) + 68|0);
 $p$0 = $18;
 while(1) {
  $19 = HEAP32[$p$0>>2]|0;
  $20 = ($19|0)==($o|0);
  if ($20) {
   $p$0$lcssa = $p$0;
   break;
  } else {
   $p$0 = $19;
  }
 }
 $21 = HEAP32[$o>>2]|0;
 HEAP32[$p$0$lcssa>>2] = $21;
 $22 = ((($1)) + 72|0);
 $23 = HEAP32[$22>>2]|0;
 HEAP32[$o>>2] = $23;
 HEAP32[$22>>2] = $o;
 $24 = HEAP8[$2>>0]|0;
 $25 = $24&255;
 $26 = $25 | 16;
 $27 = $26&255;
 HEAP8[$2>>0] = $27;
 $28 = ((($1)) + 61|0);
 $29 = HEAP8[$28>>0]|0;
 $30 = ($29&255)<(2);
 if ($30) {
  $38 = $26 & 191;
  $39 = $38&255;
  HEAP8[$2>>0] = $39;
  return;
 } else {
  $31 = $26 & 184;
  $32 = ((($1)) + 60|0);
  $33 = HEAP8[$32>>0]|0;
  $34 = $33&255;
  $35 = $34 & 3;
  $36 = $35 | $31;
  $37 = $36&255;
  HEAP8[$2>>0] = $37;
  return;
 }
}
function _luaC_changemode($L,$mode) {
 $L = $L|0;
 $mode = $mode|0;
 var $$lcssa = 0, $$lcssa8 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($L)) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 62|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = $3&255;
 $5 = ($4|0)==($mode|0);
 if ($5) {
  return;
 }
 $6 = ($mode|0)==(2);
 if ($6) {
  $7 = ((($1)) + 61|0);
  $8 = HEAP8[$7>>0]|0;
  $9 = ($8<<24>>24)==(0);
  if (!($9)) {
   while(1) {
    (_singlestep($L)|0);
    $10 = HEAP8[$7>>0]|0;
    $11 = ($10<<24>>24)==(0);
    if ($11) {
     break;
    }
   }
  }
  $12 = ((($1)) + 8|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ((($1)) + 12|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = (($15) + ($13))|0;
  $17 = ((($1)) + 20|0);
  HEAP32[$17>>2] = $16;
  HEAP8[$2>>0] = 2;
  return;
 }
 HEAP8[$2>>0] = 0;
 $18 = ((($1)) + 61|0);
 HEAP8[$18>>0] = 2;
 $19 = ((($1)) + 64|0);
 HEAP32[$19>>2] = 0;
 $20 = ((($1)) + 72|0);
 while(1) {
  $21 = (_sweeplist($L,$20,1)|0);
  $22 = ($21|0)==($20|0);
  if (!($22)) {
   $$lcssa8 = $21;
   break;
  }
 }
 $23 = ((($1)) + 80|0);
 HEAP32[$23>>2] = $$lcssa8;
 $24 = ((($1)) + 68|0);
 while(1) {
  $25 = (_sweeplist($L,$24,1)|0);
  $26 = ($25|0)==($24|0);
  if (!($26)) {
   $$lcssa = $25;
   break;
  }
 }
 $27 = ((($1)) + 76|0);
 HEAP32[$27>>2] = $$lcssa;
 $28 = HEAP32[$0>>2]|0;
 $29 = ((($28)) + 61|0);
 $30 = HEAP8[$29>>0]|0;
 $31 = $30&255;
 $32 = 1 << $31;
 $33 = $32 & -29;
 $34 = ($33|0)==(0);
 if (!($34)) {
  return;
 }
 while(1) {
  (_singlestep($L)|0);
  $35 = HEAP8[$29>>0]|0;
  $36 = $35&255;
  $37 = 1 << $36;
  $38 = $37 & -29;
  $39 = ($38|0)==(0);
  if (!($39)) {
   break;
  }
 }
 return;
}
function _luaC_runtilstate($L,$statesmask) {
 $L = $L|0;
 $statesmask = $statesmask|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($L)) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 61|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = $3&255;
 $5 = 1 << $4;
 $6 = $5 & $statesmask;
 $7 = ($6|0)==(0);
 if (!($7)) {
  return;
 }
 while(1) {
  (_singlestep($L)|0);
  $8 = HEAP8[$2>>0]|0;
  $9 = $8&255;
  $10 = 1 << $9;
  $11 = $10 & $statesmask;
  $12 = ($11|0)==(0);
  if (!($12)) {
   break;
  }
 }
 return;
}
function _luaC_freeallobjects($L) {
 $L = $L|0;
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $i$02 = 0, $lastnext$0$i = 0, $lastnext$0$i$lcssa = 0, $lastnext$13$i = 0, $lastnext$13$i$phi = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($L)) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 104|0);
 $lastnext$0$i = $2;
 while(1) {
  $3 = HEAP32[$lastnext$0$i>>2]|0;
  $4 = ($3|0)==(0|0);
  if ($4) {
   $lastnext$0$i$lcssa = $lastnext$0$i;
   break;
  } else {
   $lastnext$0$i = $3;
  }
 }
 $5 = ((($1)) + 72|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(0|0);
 if ($7) {
  $19 = $1;
 } else {
  $9 = $6;$lastnext$13$i = $lastnext$0$i$lcssa;
  while(1) {
   $8 = ((($9)) + 5|0);
   $10 = HEAP8[$8>>0]|0;
   $11 = $10&255;
   $12 = $11 | 8;
   $13 = $12&255;
   HEAP8[$8>>0] = $13;
   $14 = HEAP32[$9>>2]|0;
   HEAP32[$5>>2] = $14;
   $15 = HEAP32[$lastnext$13$i>>2]|0;
   HEAP32[$9>>2] = $15;
   HEAP32[$lastnext$13$i>>2] = $9;
   $16 = HEAP32[$5>>2]|0;
   $17 = ($16|0)==(0|0);
   if ($17) {
    break;
   } else {
    $lastnext$13$i$phi = $9;$9 = $16;$lastnext$13$i = $lastnext$13$i$phi;
   }
  }
  $$pre = HEAP32[$0>>2]|0;
  $19 = $$pre;
 }
 $18 = ((($19)) + 104|0);
 $20 = HEAP32[$18>>2]|0;
 $21 = ($20|0)==(0|0);
 if (!($21)) {
  $23 = $20;
  while(1) {
   $22 = ((($23)) + 5|0);
   $24 = HEAP8[$22>>0]|0;
   $25 = $24&255;
   $26 = $25 & 191;
   $27 = $26&255;
   HEAP8[$22>>0] = $27;
   _GCTM($L,0);
   $28 = HEAP32[$18>>2]|0;
   $29 = ($28|0)==(0|0);
   if ($29) {
    break;
   } else {
    $23 = $28;
   }
  }
 }
 $30 = ((($1)) + 60|0);
 HEAP8[$30>>0] = 3;
 $31 = ((($1)) + 62|0);
 HEAP8[$31>>0] = 0;
 (_sweeplist($L,$5,-3)|0);
 $32 = ((($1)) + 68|0);
 (_sweeplist($L,$32,-3)|0);
 $33 = ((($1)) + 32|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = ($34|0)>(0);
 if (!($35)) {
  return;
 }
 $36 = ((($1)) + 24|0);
 $i$02 = 0;
 while(1) {
  $37 = HEAP32[$36>>2]|0;
  $38 = (($37) + ($i$02<<2)|0);
  (_sweeplist($L,$38,-3)|0);
  $39 = (($i$02) + 1)|0;
  $40 = HEAP32[$33>>2]|0;
  $41 = ($39|0)<($40|0);
  if ($41) {
   $i$02 = $39;
  } else {
   break;
  }
 }
 return;
}
function _luaC_forcestep($L) {
 $L = $L|0;
 var $$$i = 0, $$$neg$i$i = 0, $$$neg$i$i3 = 0, $$1$i = 0, $$op$i$i = 0, $$op$i$i2 = 0, $$pre = 0, $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $8 = 0, $9 = 0, $debt$0$i = 0, $i$07 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($L)) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 62|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = ($3<<24>>24)==(2);
 do {
  if ($4) {
   $5 = ((($1)) + 20|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = ($6|0)==(0);
   do {
    if ($7) {
     _luaC_fullgc($L,0);
     $8 = ((($1)) + 8|0);
     $9 = HEAP32[$8>>2]|0;
     $10 = ((($1)) + 12|0);
     $11 = HEAP32[$10>>2]|0;
     $12 = (($11) + ($9))|0;
     HEAP32[$5>>2] = $12;
     $29 = $9;$30 = $11;
    } else {
     $13 = ((($1)) + 61|0);
     $14 = HEAP8[$13>>0]|0;
     $15 = ($14<<24>>24)==(5);
     if (!($15)) {
      while(1) {
       (_singlestep($L)|0);
       $16 = HEAP8[$13>>0]|0;
       $17 = ($16<<24>>24)==(5);
       if ($17) {
        break;
       }
      }
     }
     HEAP8[$13>>0] = 0;
     $18 = ((($1)) + 8|0);
     $19 = HEAP32[$18>>2]|0;
     $20 = ((($1)) + 12|0);
     $21 = HEAP32[$20>>2]|0;
     $22 = (($21) + ($19))|0;
     $23 = (($6>>>0) / 100)&-1;
     $24 = ((($1)) + 160|0);
     $25 = HEAP32[$24>>2]|0;
     $26 = Math_imul($25, $23)|0;
     $27 = ($22>>>0)>($26>>>0);
     if ($27) {
      HEAP32[$5>>2] = 0;
      $29 = $19;$30 = $21;
      break;
     } else {
      HEAP32[$5>>2] = $6;
      $29 = $19;$30 = $21;
      break;
     }
    }
   } while(0);
   $28 = (($29) + ($30))|0;
   $31 = (($28|0) / 100)&-1;
   $32 = ((($1)) + 156|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = (2147483644 / ($31|0))&-1;
   $35 = ($33|0)<($34|0);
   $36 = (0 - ($31))|0;
   $$op$i$i = Math_imul($33, $36)|0;
   $$$neg$i$i = $35 ? $$op$i$i : -2147483644;
   $37 = (($$$neg$i$i) + ($28))|0;
   _luaE_setdebt($1,$37);
   $$pre = ((($1)) + 61|0);
   $$pre$phiZ2D = $$pre;
  } else {
   $38 = ((($1)) + 12|0);
   $39 = HEAP32[$38>>2]|0;
   $40 = ((($1)) + 164|0);
   $41 = HEAP32[$40>>2]|0;
   $42 = ($41|0)<(40);
   $$$i = $42 ? 40 : $41;
   $43 = (($39|0) / 200)&-1;
   $44 = (($43) + 1)|0;
   $45 = (2147483644 / ($$$i|0))&-1;
   $46 = ($44|0)<($45|0);
   $47 = Math_imul($44, $$$i)|0;
   $$1$i = $46 ? $47 : 2147483644;
   $48 = ((($1)) + 61|0);
   $debt$0$i = $$1$i;
   while(1) {
    $49 = (_singlestep($L)|0);
    $50 = (($debt$0$i) - ($49))|0;
    $51 = ($50|0)>(-1600);
    $52 = HEAP8[$48>>0]|0;
    $53 = ($52<<24>>24)==(5);
    if (!($51)) {
     label = 13;
     break;
    }
    if ($53) {
     break;
    } else {
     $debt$0$i = $50;
    }
   }
   if ((label|0) == 13) {
    if (!($53)) {
     $67 = (($50|0) / ($$$i|0))&-1;
     $68 = ($67*200)|0;
     _luaE_setdebt($1,$68);
     $$pre$phiZ2D = $48;
     break;
    }
   }
   $54 = ((($1)) + 20|0);
   $55 = HEAP32[$54>>2]|0;
   $56 = (($55|0) / 100)&-1;
   $57 = ((($1)) + 156|0);
   $58 = HEAP32[$57>>2]|0;
   $59 = (2147483644 / ($56|0))&-1;
   $60 = ($58|0)<($59|0);
   $61 = ((($1)) + 8|0);
   $62 = HEAP32[$61>>2]|0;
   $63 = HEAP32[$38>>2]|0;
   $64 = (($63) + ($62))|0;
   $65 = (0 - ($56))|0;
   $$op$i$i2 = Math_imul($58, $65)|0;
   $$$neg$i$i3 = $60 ? $$op$i$i2 : -2147483644;
   $66 = (($64) + ($$$neg$i$i3))|0;
   _luaE_setdebt($1,$66);
   $$pre$phiZ2D = $48;
  }
 } while(0);
 $69 = ((($1)) + 104|0);
 $70 = HEAP32[$69>>2]|0;
 $71 = ($70|0)==(0|0);
 if ($71) {
  return;
 } else {
  $i$07 = 0;
 }
 while(1) {
  $72 = ($i$07|0)<(4);
  if (!($72)) {
   $73 = HEAP8[$$pre$phiZ2D>>0]|0;
   $74 = ($73<<24>>24)==(5);
   if (!($74)) {
    label = 20;
    break;
   }
  }
  _GCTM($L,1);
  $75 = (($i$07) + 1)|0;
  $76 = HEAP32[$69>>2]|0;
  $77 = ($76|0)==(0|0);
  if ($77) {
   label = 20;
   break;
  } else {
   $i$07 = $75;
  }
 }
 if ((label|0) == 20) {
  return;
 }
}
function _luaC_step($L) {
 $L = $L|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($L)) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 63|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = ($3<<24>>24)==(0);
 if ($4) {
  _luaE_setdebt($1,-1600);
  return;
 } else {
  _luaC_forcestep($L);
  return;
 }
}
function _luaC_fullgc($L,$isemergency) {
 $L = $L|0;
 $isemergency = $isemergency|0;
 var $$$neg$i = 0, $$lcssa = 0, $$lcssa19 = 0, $$op$i = 0, $$phi$trans$insert = 0, $$phi$trans$insert14 = 0, $$pr = 0, $$pre = 0, $$pre12 = 0, $$pre13 = 0, $$pre15 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($L)) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 62|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = ($isemergency|0)!=(0);
 if ($4) {
  HEAP8[$2>>0] = 1;
  label = 6;
 } else {
  HEAP8[$2>>0] = 0;
  $5 = ((($1)) + 104|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ($6|0)==(0|0);
  if ($7) {
   label = 6;
  } else {
   $9 = $6;
   while(1) {
    $8 = ((($9)) + 5|0);
    $10 = HEAP8[$8>>0]|0;
    $11 = $10&255;
    $12 = $11 & 191;
    $13 = $12&255;
    HEAP8[$8>>0] = $13;
    _GCTM($L,1);
    $14 = HEAP32[$5>>2]|0;
    $15 = ($14|0)==(0|0);
    if ($15) {
     break;
    } else {
     $9 = $14;
    }
   }
   $$pr = HEAP8[$2>>0]|0;
   $16 = ($$pr<<24>>24)==(2);
   if ($16) {
    label = 7;
   } else {
    label = 6;
   }
  }
 }
 if ((label|0) == 6) {
  $17 = ((($1)) + 61|0);
  $18 = HEAP8[$17>>0]|0;
  $19 = ($18&255)<(2);
  if ($19) {
   label = 7;
  }
 }
 if ((label|0) == 7) {
  $20 = HEAP32[$0>>2]|0;
  $21 = ((($20)) + 61|0);
  HEAP8[$21>>0] = 2;
  $22 = ((($20)) + 64|0);
  HEAP32[$22>>2] = 0;
  $23 = ((($20)) + 72|0);
  while(1) {
   $24 = (_sweeplist($L,$23,1)|0);
   $25 = ($24|0)==($23|0);
   if (!($25)) {
    $$lcssa19 = $24;
    break;
   }
  }
  $26 = ((($20)) + 80|0);
  HEAP32[$26>>2] = $$lcssa19;
  $27 = ((($20)) + 68|0);
  while(1) {
   $28 = (_sweeplist($L,$27,1)|0);
   $29 = ($28|0)==($27|0);
   if (!($29)) {
    $$lcssa = $28;
    break;
   }
  }
  $30 = ((($20)) + 76|0);
  HEAP32[$30>>2] = $$lcssa;
 }
 $31 = HEAP32[$0>>2]|0;
 $32 = ((($31)) + 61|0);
 $33 = HEAP8[$32>>0]|0;
 $34 = ($33<<24>>24)==(5);
 if ($34) {
  $38 = $31;$40 = 5;
 } else {
  while(1) {
   (_singlestep($L)|0);
   $35 = HEAP8[$32>>0]|0;
   $36 = ($35<<24>>24)==(5);
   if ($36) {
    break;
   }
  }
  $$pre = HEAP32[$0>>2]|0;
  $$phi$trans$insert = ((($$pre)) + 61|0);
  $$pre12 = HEAP8[$$phi$trans$insert>>0]|0;
  $38 = $$pre;$40 = $$pre12;
 }
 $37 = ((($38)) + 61|0);
 $39 = $40&255;
 $41 = 1 << $39;
 $42 = $41 & -33;
 $43 = ($42|0)==(0);
 if ($43) {
  while(1) {
   (_singlestep($L)|0);
   $44 = HEAP8[$37>>0]|0;
   $45 = $44&255;
   $46 = 1 << $45;
   $47 = $46 & -33;
   $48 = ($47|0)==(0);
   if (!($48)) {
    break;
   }
  }
  $$pre13 = HEAP32[$0>>2]|0;
  $$phi$trans$insert14 = ((($$pre13)) + 61|0);
  $$pre15 = HEAP8[$$phi$trans$insert14>>0]|0;
  $50 = $$pre13;$52 = $$pre15;
 } else {
  $50 = $38;$52 = $40;
 }
 $49 = ((($50)) + 61|0);
 $51 = ($52<<24>>24)==(5);
 if (!($51)) {
  while(1) {
   (_singlestep($L)|0);
   $53 = HEAP8[$49>>0]|0;
   $54 = ($53<<24>>24)==(5);
   if ($54) {
    break;
   }
  }
 }
 $55 = ($3<<24>>24)==(2);
 if ($55) {
  $56 = HEAP32[$0>>2]|0;
  $57 = ((($56)) + 61|0);
  $58 = HEAP8[$57>>0]|0;
  $59 = ($58<<24>>24)==(0);
  if (!($59)) {
   while(1) {
    (_singlestep($L)|0);
    $60 = HEAP8[$57>>0]|0;
    $61 = ($60<<24>>24)==(0);
    if ($61) {
     break;
    }
   }
  }
 }
 HEAP8[$2>>0] = $3;
 $62 = ((($1)) + 8|0);
 $63 = HEAP32[$62>>2]|0;
 $64 = ((($1)) + 12|0);
 $65 = HEAP32[$64>>2]|0;
 $66 = (($65) + ($63))|0;
 $67 = (($66|0) / 100)&-1;
 $68 = ((($1)) + 156|0);
 $69 = HEAP32[$68>>2]|0;
 $70 = (2147483644 / ($67|0))&-1;
 $71 = ($69|0)<($70|0);
 $72 = (0 - ($67))|0;
 $$op$i = Math_imul($69, $72)|0;
 $$$neg$i = $71 ? $$op$i : -2147483644;
 $73 = (($$$neg$i) + ($66))|0;
 _luaE_setdebt($1,$73);
 if ($4) {
  return;
 }
 $74 = HEAP32[$0>>2]|0;
 $75 = ((($74)) + 104|0);
 $76 = HEAP32[$75>>2]|0;
 $77 = ($76|0)==(0|0);
 if ($77) {
  return;
 } else {
  $79 = $76;
 }
 while(1) {
  $78 = ((($79)) + 5|0);
  $80 = HEAP8[$78>>0]|0;
  $81 = $80&255;
  $82 = $81 & 191;
  $83 = $82&255;
  HEAP8[$78>>0] = $83;
  _GCTM($L,1);
  $84 = HEAP32[$75>>2]|0;
  $85 = ($84|0)==(0|0);
  if ($85) {
   break;
  } else {
   $79 = $84;
  }
 }
 return;
}
function _reallymarkobject($g,$o) {
 $g = $g|0;
 $o = $o|0;
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $7 = 0, $8 = 0, $9 = 0, $size$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($o)) + 5|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1&255;
 $3 = $2 & 252;
 $4 = $3&255;
 HEAP8[$0>>0] = $4;
 $5 = ((($o)) + 4|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = $6&255;
 switch ($7|0) {
 case 20: case 4:  {
  $8 = ((($o)) + 12|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = (($9) + 17)|0;
  $size$0 = $10;
  break;
 }
 case 7:  {
  $11 = ((($o)) + 8|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ($12|0)==(0|0);
  if (!($13)) {
   $14 = ((($12)) + 5|0);
   $15 = HEAP8[$14>>0]|0;
   $16 = $15 & 3;
   $17 = ($16<<24>>24)==(0);
   if (!($17)) {
    _reallymarkobject($g,$12);
   }
  }
  $18 = ((($o)) + 12|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = ($19|0)==(0|0);
  if (!($20)) {
   $21 = ((($19)) + 5|0);
   $22 = HEAP8[$21>>0]|0;
   $23 = $22 & 3;
   $24 = ($23<<24>>24)==(0);
   if (!($24)) {
    _reallymarkobject($g,$19);
   }
  }
  $25 = ((($o)) + 16|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = (($26) + 24)|0;
  $size$0 = $27;
  break;
 }
 case 10:  {
  $28 = ((($o)) + 8|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = ((($29)) + 8|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = $31 & 64;
  $33 = ($32|0)==(0);
  if ($33) {
   $41 = $29;
  } else {
   $34 = HEAP32[$29>>2]|0;
   $35 = ((($34)) + 5|0);
   $36 = HEAP8[$35>>0]|0;
   $37 = $36 & 3;
   $38 = ($37<<24>>24)==(0);
   if ($38) {
    $41 = $29;
   } else {
    _reallymarkobject($g,$34);
    $$pre = HEAP32[$28>>2]|0;
    $41 = $$pre;
   }
  }
  $39 = ((($o)) + 16|0);
  $40 = ($41|0)==($39|0);
  if ($40) {
   $size$0 = 32;
  } else {
   return;
  }
  break;
 }
 case 6:  {
  $42 = ((($g)) + 84|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = ((($o)) + 8|0);
  HEAP32[$44>>2] = $43;
  HEAP32[$42>>2] = $o;
  return;
  break;
 }
 case 38:  {
  $45 = ((($g)) + 84|0);
  $46 = HEAP32[$45>>2]|0;
  $47 = ((($o)) + 8|0);
  HEAP32[$47>>2] = $46;
  HEAP32[$45>>2] = $o;
  return;
  break;
 }
 case 5:  {
  $48 = ((($g)) + 84|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = ((($o)) + 24|0);
  HEAP32[$50>>2] = $49;
  HEAP32[$48>>2] = $o;
  return;
  break;
 }
 case 8:  {
  $51 = ((($g)) + 84|0);
  $52 = HEAP32[$51>>2]|0;
  $53 = ((($o)) + 60|0);
  HEAP32[$53>>2] = $52;
  HEAP32[$51>>2] = $o;
  return;
  break;
 }
 case 9:  {
  $54 = ((($g)) + 84|0);
  $55 = HEAP32[$54>>2]|0;
  $56 = ((($o)) + 72|0);
  HEAP32[$56>>2] = $55;
  HEAP32[$54>>2] = $o;
  return;
  break;
 }
 default: {
  return;
 }
 }
 $57 = HEAP8[$0>>0]|0;
 $58 = $57&255;
 $59 = $58 | 4;
 $60 = $59&255;
 HEAP8[$0>>0] = $60;
 $61 = ((($g)) + 16|0);
 $62 = HEAP32[$61>>2]|0;
 $63 = (($62) + ($size$0))|0;
 HEAP32[$61>>2] = $63;
 return;
}
function _sweeplist($L,$p,$count) {
 $L = $L|0;
 $p = $p|0;
 $count = $count|0;
 var $$ = 0, $$0 = 0, $$01$be = 0, $$01$lcssa = 0, $$0111 = 0, $$1 = 0, $$112 = 0, $$19 = 0, $$3 = 0, $$4 = 0, $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $7 = 0, $8 = 0, $9 = 0, $not$ = 0, $not$510 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($L)) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 60|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = $3&255;
 $5 = $4 ^ 3;
 $6 = ((($1)) + 62|0);
 $7 = HEAP8[$6>>0]|0;
 $8 = ($7<<24>>24)==(2);
 $9 = $4 & 3;
 $$ = $8 ? 255 : 184;
 $$3 = $8 ? 64 : $9;
 $$4 = $8 ? 64 : 0;
 $10 = HEAP32[$p>>2]|0;
 $11 = ($10|0)==(0|0);
 $12 = ($count|0)!=(0);
 $not$510 = $11 ^ 1;
 $13 = $12 & $not$510;
 L1: do {
  if ($13) {
   $$19 = (($count) + -1)|0;
   $$0111 = $p;$$112 = $$19;$15 = $10;
   L3: while(1) {
    $14 = ((($15)) + 5|0);
    $16 = HEAP8[$14>>0]|0;
    $17 = $16&255;
    $18 = $17 ^ 3;
    $19 = $18 & $5;
    $20 = ($19|0)==(0);
    L5: do {
     if ($20) {
      $21 = HEAP32[$15>>2]|0;
      HEAP32[$$0111>>2] = $21;
      $22 = ((($15)) + 4|0);
      $23 = HEAP8[$22>>0]|0;
      $24 = $23&255;
      switch ($24|0) {
      case 9:  {
       _luaF_freeproto($L,$15);
       $$01$be = $$0111;
       break L5;
       break;
      }
      case 6:  {
       $25 = ((($15)) + 6|0);
       $26 = HEAP8[$25>>0]|0;
       $27 = $26&255;
       $28 = $27 << 2;
       $29 = (($28) + 16)|0;
       (_luaM_realloc_($L,$15,$29,0)|0);
       $$01$be = $$0111;
       break L5;
       break;
      }
      case 38:  {
       $30 = ((($15)) + 6|0);
       $31 = HEAP8[$30>>0]|0;
       $32 = $31&255;
       $33 = $32 << 4;
       $34 = (($33) + 16)|0;
       (_luaM_realloc_($L,$15,$34,0)|0);
       $$01$be = $$0111;
       break L5;
       break;
      }
      case 10:  {
       _luaF_freeupval($L,$15);
       $$01$be = $$0111;
       break L5;
       break;
      }
      case 5:  {
       _luaH_free($L,$15);
       $$01$be = $$0111;
       break L5;
       break;
      }
      case 8:  {
       _luaE_freethread($L,$15);
       $$01$be = $$0111;
       break L5;
       break;
      }
      case 7:  {
       $35 = ((($15)) + 16|0);
       $36 = HEAP32[$35>>2]|0;
       $37 = (($36) + 24)|0;
       (_luaM_realloc_($L,$15,$37,0)|0);
       $$01$be = $$0111;
       break L5;
       break;
      }
      case 4:  {
       $38 = HEAP32[$0>>2]|0;
       $39 = ((($38)) + 28|0);
       $40 = HEAP32[$39>>2]|0;
       $41 = (($40) + -1)|0;
       HEAP32[$39>>2] = $41;
       break;
      }
      case 20:  {
       break;
      }
      default: {
       $$01$be = $$0111;
       break L5;
      }
      }
      $42 = ((($15)) + 12|0);
      $43 = HEAP32[$42>>2]|0;
      $44 = (($43) + 17)|0;
      (_luaM_realloc_($L,$15,$44,0)|0);
      $$01$be = $$0111;
     } else {
      $45 = $17 & $$4;
      $46 = ($45|0)==(0);
      if (!($46)) {
       $$0 = 0;
       break L3;
      }
      $47 = ((($15)) + 4|0);
      $48 = HEAP8[$47>>0]|0;
      $49 = ($48<<24>>24)==(8);
      if ($49) {
       $50 = ((($15)) + 28|0);
       $51 = HEAP32[$50>>2]|0;
       $52 = ($51|0)==(0|0);
       if (!($52)) {
        $53 = ((($15)) + 56|0);
        (_sweeplist($L,$53,-3)|0);
        _luaE_freeCI($15);
        $54 = HEAP32[$0>>2]|0;
        $55 = ((($54)) + 62|0);
        $56 = HEAP8[$55>>0]|0;
        $57 = ($56<<24>>24)==(1);
        if (!($57)) {
         _luaD_shrinkstack($15);
        }
       }
      }
      $58 = $17 & $$;
      $59 = $58 | $$3;
      $60 = $59&255;
      HEAP8[$14>>0] = $60;
      $$01$be = $15;
     }
    } while(0);
    $61 = HEAP32[$$01$be>>2]|0;
    $62 = ($61|0)==(0|0);
    $63 = ($$112|0)!=(0);
    $not$ = $62 ^ 1;
    $64 = $not$ << 31 >> 31;
    $$1 = (($64) + ($$112))|0;
    $65 = $63 & $not$;
    if ($65) {
     $$0111 = $$01$be;$$112 = $$1;$15 = $61;
    } else {
     $$01$lcssa = $$01$be;$$lcssa = $62;
     break L1;
    }
   }
   return ($$0|0);
  } else {
   $$01$lcssa = $p;$$lcssa = $11;
  }
 } while(0);
 $66 = $$lcssa ? 0 : $$01$lcssa;
 $$0 = $66;
 return ($$0|0);
}
function _singlestep($L) {
 $L = $L|0;
 var $$0 = 0, $$02$i$i = 0, $$02$i16$i = 0, $$lcssa = 0, $$lcssa71 = 0, $$lcssa72 = 0, $$lcssa73 = 0, $$lcssa74 = 0, $$lcssa75 = 0, $$lcssa78 = 0, $$lcssa84 = 0, $$pre = 0, $$pre25 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0;
 var $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0;
 var $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0;
 var $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0;
 var $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0;
 var $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0;
 var $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0;
 var $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0;
 var $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0;
 var $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0;
 var $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0;
 var $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0;
 var $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $L$idx$val$i = 0, $changed$0$ph$i$i = 0, $changed$0$ph$i$i$lcssa = 0, $changed$0$ph$i8$i = 0, $changed$0$ph$i8$i$lcssa = 0, $i$0$i$i = 0, $i$0$i1$i = 0, $i$0$lcssa = 0, $i$016 = 0, $lastnext$0$i$i = 0, $lastnext$0$i$i$lcssa = 0, $lastnext$1$ph5$i$i = 0;
 var $lastnext$13$i$i = 0, $lastnext$13$i$i$lcssa = 0, $lastnext$13$i$i$phi = 0, $mt = 0, $n$01$i$i = 0, $n$01$i18$i = 0, $next$0$i$i = 0, $next$0$i11$i = 0, $next$0$ph$i$i = 0, $next$0$ph$i9$i = 0, $o$0$i$i = 0, $o$0$i$i4 = 0, $o$01$i$i = 0, $o$01$i$i2 = 0, $o$02$i$i = 0, $o$02$i$i3 = 0, $p$0$ph4$i$i = 0, $uv$0$i$i = 0, $uv$0$in$i$i = 0, $uv$0$in2$i$i = 0;
 var $uv$03$i$i = 0, $uv$04$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $mt = sp;
 $0 = ((($L)) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 61|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = $3&255;
 switch ($4|0) {
 case 5:  {
  $8 = ((($1)) + 32|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = $9 << 2;
  $11 = ((($1)) + 16|0);
  HEAP32[$11>>2] = $10;
  $12 = ((($1)) + 84|0);
  $13 = ((($1)) + 172|0);
  ;HEAP32[$12>>2]=0|0;HEAP32[$12+4>>2]=0|0;HEAP32[$12+8>>2]=0|0;HEAP32[$12+12>>2]=0|0;HEAP32[$12+16>>2]=0|0;
  $14 = HEAP32[$13>>2]|0;
  $15 = ($14|0)==(0|0);
  if (!($15)) {
   $16 = ((($14)) + 5|0);
   $17 = HEAP8[$16>>0]|0;
   $18 = $17 & 3;
   $19 = ($18<<24>>24)==(0);
   if (!($19)) {
    _reallymarkobject($1,$14);
   }
  }
  $20 = ((($1)) + 48|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = $21 & 64;
  $23 = ($22|0)==(0);
  if (!($23)) {
   $24 = ((($1)) + 40|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = ((($25)) + 5|0);
   $27 = HEAP8[$26>>0]|0;
   $28 = $27 & 3;
   $29 = ($28<<24>>24)==(0);
   if (!($29)) {
    _reallymarkobject($1,$25);
   }
  }
  _markmt($1);
  $30 = ((($1)) + 104|0);
  $o$01$i$i = HEAP32[$30>>2]|0;
  $31 = ($o$01$i$i|0)==(0|0);
  if (!($31)) {
   $32 = ((($1)) + 60|0);
   $o$02$i$i = $o$01$i$i;
   while(1) {
    $33 = ((($o$02$i$i)) + 5|0);
    $34 = HEAP8[$33>>0]|0;
    $35 = $34&255;
    $36 = $35 & 184;
    $37 = HEAP8[$32>>0]|0;
    $38 = $37&255;
    $39 = $38 & 3;
    $40 = $39 | $36;
    $41 = $40&255;
    HEAP8[$33>>0] = $41;
    _reallymarkobject($1,$o$02$i$i);
    $o$0$i$i = HEAP32[$o$02$i$i>>2]|0;
    $42 = ($o$0$i$i|0)==(0|0);
    if ($42) {
     break;
    } else {
     $o$02$i$i = $o$0$i$i;
    }
   }
  }
  HEAP8[$2>>0] = 0;
  $43 = HEAP32[$11>>2]|0;
  $$0 = $43;
  STACKTOP = sp;return ($$0|0);
  break;
 }
 case 0:  {
  $44 = ((($1)) + 84|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = ($45|0)==(0|0);
  if (!($46)) {
   $47 = ((($1)) + 16|0);
   $48 = HEAP32[$47>>2]|0;
   _propagatemark($1);
   $49 = HEAP32[$47>>2]|0;
   $50 = (($49) - ($48))|0;
   $$0 = $50;
   STACKTOP = sp;return ($$0|0);
  }
  HEAP8[$2>>0] = 1;
  $51 = ((($1)) + 16|0);
  $52 = HEAP32[$51>>2]|0;
  $53 = ((($1)) + 20|0);
  HEAP32[$53>>2] = $52;
  $54 = ((($L)) + 5|0);
  $55 = HEAP8[$54>>0]|0;
  $56 = $55 & 3;
  $57 = ($56<<24>>24)==(0);
  if (!($57)) {
   _reallymarkobject($1,$L);
  }
  $58 = ((($1)) + 48|0);
  $59 = HEAP32[$58>>2]|0;
  $60 = $59 & 64;
  $61 = ($60|0)==(0);
  if (!($61)) {
   $62 = ((($1)) + 40|0);
   $63 = HEAP32[$62>>2]|0;
   $64 = ((($63)) + 5|0);
   $65 = HEAP8[$64>>0]|0;
   $66 = $65 & 3;
   $67 = ($66<<24>>24)==(0);
   if (!($67)) {
    _reallymarkobject($1,$63);
   }
  }
  _markmt($1);
  $68 = ((($1)) + 112|0);
  $69 = ((($1)) + 128|0);
  $uv$0$in2$i$i = ((($69)) + 4|0);
  $uv$03$i$i = HEAP32[$uv$0$in2$i$i>>2]|0;
  $70 = ($uv$03$i$i|0)==($68|0);
  if (!($70)) {
   $uv$04$i$i = $uv$03$i$i;
   while(1) {
    $71 = ((($uv$04$i$i)) + 5|0);
    $72 = HEAP8[$71>>0]|0;
    $73 = $72 & 7;
    $74 = ($73<<24>>24)==(0);
    if ($74) {
     $75 = ((($uv$04$i$i)) + 8|0);
     $76 = HEAP32[$75>>2]|0;
     $77 = ((($76)) + 8|0);
     $78 = HEAP32[$77>>2]|0;
     $79 = $78 & 64;
     $80 = ($79|0)==(0);
     if (!($80)) {
      $81 = HEAP32[$76>>2]|0;
      $82 = ((($81)) + 5|0);
      $83 = HEAP8[$82>>0]|0;
      $84 = $83 & 3;
      $85 = ($84<<24>>24)==(0);
      if (!($85)) {
       _reallymarkobject($1,$81);
      }
     }
    }
    $86 = ((($uv$04$i$i)) + 16|0);
    $uv$0$in$i$i = ((($86)) + 4|0);
    $uv$0$i$i = HEAP32[$uv$0$in$i$i>>2]|0;
    $87 = ($uv$0$i$i|0)==($68|0);
    if ($87) {
     break;
    } else {
     $uv$04$i$i = $uv$0$i$i;
    }
   }
  }
  $88 = HEAP32[$44>>2]|0;
  $89 = ($88|0)==(0|0);
  if (!($89)) {
   while(1) {
    _propagatemark($1);
    $90 = HEAP32[$44>>2]|0;
    $91 = ($90|0)==(0|0);
    if ($91) {
     break;
    }
   }
  }
  $92 = HEAP32[$51>>2]|0;
  $93 = (($92) - ($52))|0;
  $94 = ((($1)) + 92|0);
  $95 = HEAP32[$94>>2]|0;
  $96 = ((($1)) + 88|0);
  $97 = HEAP32[$96>>2]|0;
  $98 = ((($1)) + 96|0);
  $99 = HEAP32[$98>>2]|0;
  HEAP32[$98>>2] = 0;
  HEAP32[$96>>2] = 0;
  HEAP32[$94>>2] = 0;
  HEAP32[$44>>2] = $97;
  $100 = ($97|0)==(0|0);
  if (!($100)) {
   while(1) {
    _propagatemark($1);
    $101 = HEAP32[$44>>2]|0;
    $102 = ($101|0)==(0|0);
    if ($102) {
     break;
    }
   }
  }
  HEAP32[$44>>2] = $95;
  $103 = ($95|0)==(0|0);
  if (!($103)) {
   while(1) {
    _propagatemark($1);
    $104 = HEAP32[$44>>2]|0;
    $105 = ($104|0)==(0|0);
    if ($105) {
     break;
    }
   }
  }
  HEAP32[$44>>2] = $99;
  $106 = ($99|0)==(0|0);
  if (!($106)) {
   while(1) {
    _propagatemark($1);
    $107 = HEAP32[$44>>2]|0;
    $108 = ($107|0)==(0|0);
    if ($108) {
     break;
    }
   }
  }
  $109 = HEAP32[$51>>2]|0;
  while(1) {
   $110 = HEAP32[$98>>2]|0;
   HEAP32[$98>>2] = 0;
   $changed$0$ph$i$i = 0;$next$0$ph$i$i = $110;
   L56: while(1) {
    $next$0$i$i = $next$0$ph$i$i;
    while(1) {
     $111 = ($next$0$i$i|0)==(0|0);
     if ($111) {
      $changed$0$ph$i$i$lcssa = $changed$0$ph$i$i;
      break L56;
     }
     $112 = ((($next$0$i$i)) + 24|0);
     $113 = HEAP32[$112>>2]|0;
     $114 = (_traverseephemeron($1,$next$0$i$i)|0);
     $115 = ($114|0)==(0);
     if ($115) {
      $next$0$i$i = $113;
     } else {
      $$lcssa78 = $113;
      break;
     }
    }
    $116 = HEAP32[$44>>2]|0;
    $117 = ($116|0)==(0|0);
    if ($117) {
     $changed$0$ph$i$i = 1;$next$0$ph$i$i = $$lcssa78;
     continue;
    }
    while(1) {
     _propagatemark($1);
     $118 = HEAP32[$44>>2]|0;
     $119 = ($118|0)==(0|0);
     if ($119) {
      $changed$0$ph$i$i = 1;$next$0$ph$i$i = $$lcssa78;
      continue L56;
     }
    }
   }
   $120 = ($changed$0$ph$i$i$lcssa|0)==(0);
   if ($120) {
    break;
   }
  }
  $121 = HEAP32[$94>>2]|0;
  _clearvalues($1,$121,0);
  $122 = ((($1)) + 100|0);
  $123 = HEAP32[$122>>2]|0;
  _clearvalues($1,$123,0);
  $124 = HEAP32[$94>>2]|0;
  $125 = HEAP32[$122>>2]|0;
  $126 = HEAP32[$51>>2]|0;
  $L$idx$val$i = HEAP32[$0>>2]|0;
  $127 = ((($L$idx$val$i)) + 104|0);
  $lastnext$0$i$i = $127;
  while(1) {
   $128 = HEAP32[$lastnext$0$i$i>>2]|0;
   $129 = ($128|0)==(0|0);
   if ($129) {
    $lastnext$0$i$i$lcssa = $lastnext$0$i$i;
    break;
   } else {
    $lastnext$0$i$i = $128;
   }
  }
  $130 = (($93) - ($109))|0;
  $131 = (($130) + ($126))|0;
  $132 = ((($L$idx$val$i)) + 72|0);
  $133 = HEAP32[$132>>2]|0;
  $134 = ($133|0)==(0|0);
  L69: do {
   if (!($134)) {
    $314 = $133;$lastnext$1$ph5$i$i = $lastnext$0$i$i$lcssa;$p$0$ph4$i$i = $132;
    while(1) {
     $136 = $314;$lastnext$13$i$i = $lastnext$1$ph5$i$i;
     while(1) {
      $135 = ((($136)) + 5|0);
      $137 = HEAP8[$135>>0]|0;
      $138 = $137&255;
      $139 = $138 & 3;
      $140 = ($139|0)==(0);
      if ($140) {
       $$lcssa75 = $136;$lastnext$13$i$i$lcssa = $lastnext$13$i$i;
       break;
      }
      $143 = $138 | 8;
      $144 = $143&255;
      HEAP8[$135>>0] = $144;
      $145 = HEAP32[$136>>2]|0;
      HEAP32[$p$0$ph4$i$i>>2] = $145;
      $146 = HEAP32[$lastnext$13$i$i>>2]|0;
      HEAP32[$136>>2] = $146;
      HEAP32[$lastnext$13$i$i>>2] = $136;
      $147 = HEAP32[$p$0$ph4$i$i>>2]|0;
      $148 = ($147|0)==(0|0);
      if ($148) {
       break L69;
      } else {
       $lastnext$13$i$i$phi = $136;$136 = $147;$lastnext$13$i$i = $lastnext$13$i$i$phi;
      }
     }
     $141 = HEAP32[$$lcssa75>>2]|0;
     $142 = ($141|0)==(0|0);
     if ($142) {
      break;
     } else {
      $314 = $141;$lastnext$1$ph5$i$i = $lastnext$13$i$i$lcssa;$p$0$ph4$i$i = $$lcssa75;
     }
    }
   }
  } while(0);
  $149 = ((($1)) + 104|0);
  $o$01$i$i2 = HEAP32[$149>>2]|0;
  $150 = ($o$01$i$i2|0)==(0|0);
  if (!($150)) {
   $151 = ((($1)) + 60|0);
   $o$02$i$i3 = $o$01$i$i2;
   while(1) {
    $152 = ((($o$02$i$i3)) + 5|0);
    $153 = HEAP8[$152>>0]|0;
    $154 = $153&255;
    $155 = $154 & 184;
    $156 = HEAP8[$151>>0]|0;
    $157 = $156&255;
    $158 = $157 & 3;
    $159 = $158 | $155;
    $160 = $159&255;
    HEAP8[$152>>0] = $160;
    _reallymarkobject($1,$o$02$i$i3);
    $o$0$i$i4 = HEAP32[$o$02$i$i3>>2]|0;
    $161 = ($o$0$i$i4|0)==(0|0);
    if ($161) {
     break;
    } else {
     $o$02$i$i3 = $o$0$i$i4;
    }
   }
  }
  $162 = HEAP32[$44>>2]|0;
  $163 = ($162|0)==(0|0);
  if (!($163)) {
   while(1) {
    _propagatemark($1);
    $164 = HEAP32[$44>>2]|0;
    $165 = ($164|0)==(0|0);
    if ($165) {
     break;
    }
   }
  }
  $166 = HEAP32[$51>>2]|0;
  while(1) {
   $167 = HEAP32[$98>>2]|0;
   HEAP32[$98>>2] = 0;
   $changed$0$ph$i8$i = 0;$next$0$ph$i9$i = $167;
   L88: while(1) {
    $next$0$i11$i = $next$0$ph$i9$i;
    while(1) {
     $168 = ($next$0$i11$i|0)==(0|0);
     if ($168) {
      $changed$0$ph$i8$i$lcssa = $changed$0$ph$i8$i;
      break L88;
     }
     $169 = ((($next$0$i11$i)) + 24|0);
     $170 = HEAP32[$169>>2]|0;
     $171 = (_traverseephemeron($1,$next$0$i11$i)|0);
     $172 = ($171|0)==(0);
     if ($172) {
      $next$0$i11$i = $170;
     } else {
      $$lcssa74 = $170;
      break;
     }
    }
    $173 = HEAP32[$44>>2]|0;
    $174 = ($173|0)==(0|0);
    if ($174) {
     $changed$0$ph$i8$i = 1;$next$0$ph$i9$i = $$lcssa74;
     continue;
    }
    while(1) {
     _propagatemark($1);
     $175 = HEAP32[$44>>2]|0;
     $176 = ($175|0)==(0|0);
     if ($176) {
      $changed$0$ph$i8$i = 1;$next$0$ph$i9$i = $$lcssa74;
      continue L88;
     }
    }
   }
   $177 = ($changed$0$ph$i8$i$lcssa|0)==(0);
   if ($177) {
    break;
   }
  }
  $178 = (($131) - ($166))|0;
  $179 = HEAP32[$98>>2]|0;
  $180 = ($179|0)==(0|0);
  if (!($180)) {
   $$02$i$i = $179;
   while(1) {
    $181 = ((($$02$i$i)) + 7|0);
    $182 = HEAP8[$181>>0]|0;
    $183 = $182&255;
    $184 = 1 << $183;
    $185 = ((($$02$i$i)) + 16|0);
    $186 = HEAP32[$185>>2]|0;
    $187 = (($186) + ($184<<5)|0);
    $188 = ($182<<24>>24)==(31);
    if (!($188)) {
     $n$01$i$i = $186;
     while(1) {
      $189 = ((($n$01$i$i)) + 8|0);
      $190 = HEAP32[$189>>2]|0;
      $191 = ($190|0)==(0);
      do {
       if (!($191)) {
        $192 = ((($n$01$i$i)) + 24|0);
        $193 = HEAP32[$192>>2]|0;
        $194 = $193 & 64;
        $195 = ($194|0)==(0);
        if ($195) {
         break;
        }
        $196 = ((($n$01$i$i)) + 16|0);
        $197 = $193 & 15;
        $198 = ($197|0)==(4);
        $199 = HEAP32[$196>>2]|0;
        if (!($198)) {
         $205 = ((($199)) + 5|0);
         $206 = HEAP8[$205>>0]|0;
         $207 = $206 & 3;
         $208 = ($207<<24>>24)==(0);
         if ($208) {
          break;
         }
         HEAP32[$189>>2] = 0;
         HEAP32[$192>>2] = 11;
         break;
        }
        $200 = ($199|0)==(0|0);
        if ($200) {
         break;
        }
        $201 = ((($199)) + 5|0);
        $202 = HEAP8[$201>>0]|0;
        $203 = $202 & 3;
        $204 = ($203<<24>>24)==(0);
        if ($204) {
         break;
        }
        _reallymarkobject($1,$199);
       }
      } while(0);
      $209 = ((($n$01$i$i)) + 32|0);
      $210 = ($209>>>0)<($187>>>0);
      if ($210) {
       $n$01$i$i = $209;
      } else {
       break;
      }
     }
    }
    $211 = ((($$02$i$i)) + 24|0);
    $212 = HEAP32[$211>>2]|0;
    $213 = ($212|0)==(0|0);
    if ($213) {
     break;
    } else {
     $$02$i$i = $212;
    }
   }
  }
  $214 = HEAP32[$122>>2]|0;
  $215 = ($214|0)==(0|0);
  if (!($215)) {
   $$02$i16$i = $214;
   while(1) {
    $216 = ((($$02$i16$i)) + 7|0);
    $217 = HEAP8[$216>>0]|0;
    $218 = $217&255;
    $219 = 1 << $218;
    $220 = ((($$02$i16$i)) + 16|0);
    $221 = HEAP32[$220>>2]|0;
    $222 = (($221) + ($219<<5)|0);
    $223 = ($217<<24>>24)==(31);
    if (!($223)) {
     $n$01$i18$i = $221;
     while(1) {
      $224 = ((($n$01$i18$i)) + 8|0);
      $225 = HEAP32[$224>>2]|0;
      $226 = ($225|0)==(0);
      do {
       if (!($226)) {
        $227 = ((($n$01$i18$i)) + 24|0);
        $228 = HEAP32[$227>>2]|0;
        $229 = $228 & 64;
        $230 = ($229|0)==(0);
        if ($230) {
         break;
        }
        $231 = ((($n$01$i18$i)) + 16|0);
        $232 = $228 & 15;
        $233 = ($232|0)==(4);
        $234 = HEAP32[$231>>2]|0;
        if (!($233)) {
         $240 = ((($234)) + 5|0);
         $241 = HEAP8[$240>>0]|0;
         $242 = $241 & 3;
         $243 = ($242<<24>>24)==(0);
         if ($243) {
          break;
         }
         HEAP32[$224>>2] = 0;
         HEAP32[$227>>2] = 11;
         break;
        }
        $235 = ($234|0)==(0|0);
        if ($235) {
         break;
        }
        $236 = ((($234)) + 5|0);
        $237 = HEAP8[$236>>0]|0;
        $238 = $237 & 3;
        $239 = ($238<<24>>24)==(0);
        if ($239) {
         break;
        }
        _reallymarkobject($1,$234);
       }
      } while(0);
      $244 = ((($n$01$i18$i)) + 32|0);
      $245 = ($244>>>0)<($222>>>0);
      if ($245) {
       $n$01$i18$i = $244;
      } else {
       break;
      }
     }
    }
    $246 = ((($$02$i16$i)) + 24|0);
    $247 = HEAP32[$246>>2]|0;
    $248 = ($247|0)==(0|0);
    if ($248) {
     break;
    } else {
     $$02$i16$i = $247;
    }
   }
  }
  $249 = HEAP32[$94>>2]|0;
  _clearvalues($1,$249,$124);
  $250 = HEAP32[$122>>2]|0;
  _clearvalues($1,$250,$125);
  $251 = ((($1)) + 60|0);
  $252 = HEAP8[$251>>0]|0;
  $253 = $252&255;
  $254 = $253 ^ 3;
  $255 = $254&255;
  HEAP8[$251>>0] = $255;
  $256 = HEAP32[$51>>2]|0;
  $257 = (($178) + ($256))|0;
  $258 = HEAP32[$53>>2]|0;
  $259 = (($258) + ($257))|0;
  HEAP32[$53>>2] = $259;
  $260 = HEAP32[$0>>2]|0;
  $261 = ((($260)) + 61|0);
  HEAP8[$261>>0] = 2;
  $262 = ((($260)) + 64|0);
  HEAP32[$262>>2] = 0;
  $263 = ((($260)) + 72|0);
  $i$0$i$i = 0;
  while(1) {
   $264 = (($i$0$i$i) + 1)|0;
   $265 = (_sweeplist($L,$263,1)|0);
   $266 = ($265|0)==($263|0);
   if ($266) {
    $i$0$i$i = $264;
   } else {
    $$lcssa72 = $264;$$lcssa73 = $265;
    break;
   }
  }
  $267 = ((($260)) + 80|0);
  HEAP32[$267>>2] = $$lcssa73;
  $268 = ((($260)) + 68|0);
  $i$0$i1$i = 0;
  while(1) {
   $269 = (($i$0$i1$i) + 1)|0;
   $270 = (_sweeplist($L,$268,1)|0);
   $271 = ($270|0)==($268|0);
   if ($271) {
    $i$0$i1$i = $269;
   } else {
    $$lcssa = $269;$$lcssa71 = $270;
    break;
   }
  }
  $272 = (($$lcssa) + ($$lcssa72))|0;
  $273 = ((($260)) + 76|0);
  HEAP32[$273>>2] = $$lcssa71;
  $274 = ($272*5)|0;
  $275 = (($274) + ($257))|0;
  $$0 = $275;
  STACKTOP = sp;return ($$0|0);
  break;
 }
 case 2:  {
  $5 = ((($1)) + 64|0);
  $6 = ((($1)) + 32|0);
  $7 = ((($1)) + 24|0);
  $i$016 = 0;
  while(1) {
   $276 = HEAP32[$5>>2]|0;
   $277 = (($276) + ($i$016))|0;
   $278 = HEAP32[$6>>2]|0;
   $279 = ($277|0)<($278|0);
   if (!($279)) {
    $285 = $276;$287 = $278;$i$0$lcssa = $i$016;
    break;
   }
   $280 = HEAP32[$7>>2]|0;
   $281 = (($280) + ($277<<2)|0);
   (_sweeplist($L,$281,-3)|0);
   $282 = (($i$016) + 1)|0;
   $283 = ($282|0)<(80);
   if ($283) {
    $i$016 = $282;
   } else {
    $$lcssa84 = $282;
    label = 93;
    break;
   }
  }
  if ((label|0) == 93) {
   $$pre = HEAP32[$5>>2]|0;
   $$pre25 = HEAP32[$6>>2]|0;
   $285 = $$pre;$287 = $$pre25;$i$0$lcssa = $$lcssa84;
  }
  $284 = (($285) + ($i$0$lcssa))|0;
  HEAP32[$5>>2] = $284;
  $286 = ($284|0)<($287|0);
  if (!($286)) {
   HEAP8[$2>>0] = 3;
  }
  $288 = ($i$0$lcssa*5)|0;
  $$0 = $288;
  STACKTOP = sp;return ($$0|0);
  break;
 }
 case 3:  {
  $289 = ((($1)) + 80|0);
  $290 = HEAP32[$289>>2]|0;
  $291 = ($290|0)==(0|0);
  if ($291) {
   HEAP8[$2>>0] = 4;
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  } else {
   $292 = (_sweeplist($L,$290,80)|0);
   HEAP32[$289>>2] = $292;
   $$0 = 400;
   STACKTOP = sp;return ($$0|0);
  }
  break;
 }
 case 4:  {
  $293 = ((($1)) + 76|0);
  $294 = HEAP32[$293>>2]|0;
  $295 = ($294|0)==(0|0);
  if (!($295)) {
   $296 = (_sweeplist($L,$294,80)|0);
   HEAP32[$293>>2] = $296;
   $$0 = 400;
   STACKTOP = sp;return ($$0|0);
  }
  $297 = ((($1)) + 172|0);
  $298 = HEAP32[$297>>2]|0;
  HEAP32[$mt>>2] = $298;
  (_sweeplist($L,$mt,1)|0);
  $299 = HEAP32[$0>>2]|0;
  $300 = ((($299)) + 62|0);
  $301 = HEAP8[$300>>0]|0;
  $302 = ($301<<24>>24)==(1);
  if (!($302)) {
   $303 = ((($299)) + 32|0);
   $304 = HEAP32[$303>>2]|0;
   $305 = (($304|0) / 2)&-1;
   $306 = ((($299)) + 28|0);
   $307 = HEAP32[$306>>2]|0;
   $308 = ($307>>>0)<($305>>>0);
   if ($308) {
    _luaS_resize($L,$305);
   }
   $309 = ((($299)) + 144|0);
   $310 = HEAP32[$309>>2]|0;
   $311 = ((($299)) + 152|0);
   $312 = HEAP32[$311>>2]|0;
   $313 = (_luaM_realloc_($L,$310,$312,0)|0);
   HEAP32[$309>>2] = $313;
   HEAP32[$311>>2] = 0;
  }
  HEAP8[$2>>0] = 5;
  $$0 = 5;
  STACKTOP = sp;return ($$0|0);
  break;
 }
 default: {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 }
 return (0)|0;
}
function _GCTM($L,$propagateerrors) {
 $L = $L|0;
 $propagateerrors = $propagateerrors|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $9 = 0, $or$cond = 0, $status$0 = 0, $v = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp + 16|0;
 $v = sp;
 $0 = ((($L)) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 104|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[$3>>2]|0;
 HEAP32[$2>>2] = $4;
 $5 = ((($1)) + 68|0);
 $6 = HEAP32[$5>>2]|0;
 HEAP32[$3>>2] = $6;
 HEAP32[$5>>2] = $3;
 $7 = ((($3)) + 5|0);
 $8 = HEAP8[$7>>0]|0;
 $9 = $8&255;
 $10 = $9 & 239;
 $11 = $10&255;
 HEAP8[$7>>0] = $11;
 $12 = ((($1)) + 61|0);
 $13 = HEAP8[$12>>0]|0;
 $14 = ($13&255)<(2);
 if (!($14)) {
  $15 = $9 & 168;
  $16 = ((($1)) + 60|0);
  $17 = HEAP8[$16>>0]|0;
  $18 = $17&255;
  $19 = $18 & 3;
  $20 = $19 | $15;
  $21 = $20&255;
  HEAP8[$7>>0] = $21;
 }
 HEAP32[$v>>2] = $3;
 $22 = ((($3)) + 4|0);
 $23 = HEAP8[$22>>0]|0;
 $24 = $23&255;
 $25 = $24 | 64;
 $26 = ((($v)) + 8|0);
 HEAP32[$26>>2] = $25;
 $27 = (_luaT_gettmbyobj($L,$v,2)|0);
 $28 = ($27|0)==(0|0);
 if ($28) {
  STACKTOP = sp;return;
 }
 $29 = ((($27)) + 8|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = $30 & 15;
 $32 = ($31|0)==(6);
 if (!($32)) {
  STACKTOP = sp;return;
 }
 $33 = ((($L)) + 41|0);
 $34 = HEAP8[$33>>0]|0;
 $35 = ((($1)) + 63|0);
 $36 = HEAP8[$35>>0]|0;
 HEAP8[$33>>0] = 0;
 HEAP8[$35>>0] = 0;
 $37 = ((($L)) + 8|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = $27;
 $40 = $39;
 $41 = HEAP32[$40>>2]|0;
 $42 = (($39) + 4)|0;
 $43 = $42;
 $44 = HEAP32[$43>>2]|0;
 $45 = $38;
 $46 = $45;
 HEAP32[$46>>2] = $41;
 $47 = (($45) + 4)|0;
 $48 = $47;
 HEAP32[$48>>2] = $44;
 $49 = HEAP32[$29>>2]|0;
 $50 = ((($38)) + 8|0);
 HEAP32[$50>>2] = $49;
 $51 = HEAP32[$37>>2]|0;
 $52 = ((($51)) + 16|0);
 $53 = $v;
 $54 = $53;
 $55 = HEAP32[$54>>2]|0;
 $56 = (($53) + 4)|0;
 $57 = $56;
 $58 = HEAP32[$57>>2]|0;
 $59 = $52;
 $60 = $59;
 HEAP32[$60>>2] = $55;
 $61 = (($59) + 4)|0;
 $62 = $61;
 HEAP32[$62>>2] = $58;
 $63 = HEAP32[$26>>2]|0;
 $64 = ((($51)) + 24|0);
 HEAP32[$64>>2] = $63;
 $65 = HEAP32[$37>>2]|0;
 $66 = ((($65)) + 32|0);
 HEAP32[$37>>2] = $66;
 $67 = ((($L)) + 28|0);
 $68 = HEAP32[$67>>2]|0;
 $69 = $65;
 $70 = $68;
 $71 = (($69) - ($70))|0;
 $72 = (_luaD_pcall($L,161,0,$71,0)|0);
 HEAP8[$33>>0] = $34;
 HEAP8[$35>>0] = $36;
 $73 = ($72|0)!=(0);
 $74 = ($propagateerrors|0)!=(0);
 $or$cond = $74 & $73;
 if (!($or$cond)) {
  STACKTOP = sp;return;
 }
 $75 = ($72|0)==(2);
 if (!($75)) {
  $status$0 = $72;
  _luaD_throw($L,$status$0);
  // unreachable;
 }
 $76 = HEAP32[$37>>2]|0;
 $77 = ((($76)) + -8|0);
 $78 = HEAP32[$77>>2]|0;
 $79 = $78 & 15;
 $80 = ($79|0)==(4);
 if ($80) {
  $81 = ((($76)) + -16|0);
  $82 = HEAP32[$81>>2]|0;
  $83 = ((($82)) + 16|0);
  $84 = $83;
 } else {
  $84 = 5727;
 }
 HEAP32[$vararg_buffer>>2] = $84;
 (_luaO_pushfstring($L,5738,$vararg_buffer)|0);
 $status$0 = 5;
 _luaD_throw($L,$status$0);
 // unreachable;
}
function _dothecall($L,$ud) {
 $L = $L|0;
 $ud = $ud|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($L)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + -32|0);
 _luaD_call($L,$2,0,0);
 return;
}
function _markmt($g) {
 $g = $g|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($g)) + 252|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if (!($2)) {
  $3 = ((($1)) + 5|0);
  $4 = HEAP8[$3>>0]|0;
  $5 = $4 & 3;
  $6 = ($5<<24>>24)==(0);
  if (!($6)) {
   _reallymarkobject($g,$1);
  }
 }
 $7 = ((($g)) + 256|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==(0|0);
 if (!($9)) {
  $10 = ((($8)) + 5|0);
  $11 = HEAP8[$10>>0]|0;
  $12 = $11 & 3;
  $13 = ($12<<24>>24)==(0);
  if (!($13)) {
   _reallymarkobject($g,$8);
  }
 }
 $14 = ((($g)) + 260|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ($15|0)==(0|0);
 if (!($16)) {
  $17 = ((($15)) + 5|0);
  $18 = HEAP8[$17>>0]|0;
  $19 = $18 & 3;
  $20 = ($19<<24>>24)==(0);
  if (!($20)) {
   _reallymarkobject($g,$15);
  }
 }
 $21 = ((($g)) + 264|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = ($22|0)==(0|0);
 if (!($23)) {
  $24 = ((($22)) + 5|0);
  $25 = HEAP8[$24>>0]|0;
  $26 = $25 & 3;
  $27 = ($26<<24>>24)==(0);
  if (!($27)) {
   _reallymarkobject($g,$22);
  }
 }
 $28 = ((($g)) + 268|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = ($29|0)==(0|0);
 if (!($30)) {
  $31 = ((($29)) + 5|0);
  $32 = HEAP8[$31>>0]|0;
  $33 = $32 & 3;
  $34 = ($33<<24>>24)==(0);
  if (!($34)) {
   _reallymarkobject($g,$29);
  }
 }
 $35 = ((($g)) + 272|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = ($36|0)==(0|0);
 if (!($37)) {
  $38 = ((($36)) + 5|0);
  $39 = HEAP8[$38>>0]|0;
  $40 = $39 & 3;
  $41 = ($40<<24>>24)==(0);
  if (!($41)) {
   _reallymarkobject($g,$36);
  }
 }
 $42 = ((($g)) + 276|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = ($43|0)==(0|0);
 if (!($44)) {
  $45 = ((($43)) + 5|0);
  $46 = HEAP8[$45>>0]|0;
  $47 = $46 & 3;
  $48 = ($47<<24>>24)==(0);
  if (!($48)) {
   _reallymarkobject($g,$43);
  }
 }
 $49 = ((($g)) + 280|0);
 $50 = HEAP32[$49>>2]|0;
 $51 = ($50|0)==(0|0);
 if (!($51)) {
  $52 = ((($50)) + 5|0);
  $53 = HEAP8[$52>>0]|0;
  $54 = $53 & 3;
  $55 = ($54<<24>>24)==(0);
  if (!($55)) {
   _reallymarkobject($g,$50);
  }
 }
 $56 = ((($g)) + 284|0);
 $57 = HEAP32[$56>>2]|0;
 $58 = ($57|0)==(0|0);
 if ($58) {
  return;
 }
 $59 = ((($57)) + 5|0);
 $60 = HEAP8[$59>>0]|0;
 $61 = $60 & 3;
 $62 = ($61<<24>>24)==(0);
 if ($62) {
  return;
 }
 _reallymarkobject($g,$57);
 return;
}
function _propagatemark($g) {
 $g = $g|0;
 var $$0$i$i$i = 0, $$lcssa$i = 0, $$lcssa$i12 = 0, $$lcssa$i4 = 0, $$lcssa35 = 0, $$ph8$i = 0, $$ph9$i = 0, $$phi$trans$insert$i = 0, $$pr$pre$i = 0, $$pr7$i = 0, $$pre$i = 0, $$pre$i$i = 0, $$pre$i3 = 0, $$pre$i6 = 0, $$pre$i8 = 0, $$pre20$i = 0, $$pre21$i = 0, $$pre22$i = 0, $$pre23$i = 0, $$pre5$i = 0;
 var $$pre7$i$i = 0, $$pre8$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0;
 var $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0;
 var $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0;
 var $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0;
 var $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0;
 var $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0;
 var $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0;
 var $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0;
 var $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0;
 var $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0;
 var $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0;
 var $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $hasclears$0$$i$i = 0, $hasclears$0$lcssa$i$i = 0, $hasclears$03$i$i = 0;
 var $hasclears$1$i$i = 0, $i$01$i = 0, $i$01$i1 = 0, $i$016$i = 0, $i$03$i$i = 0, $i$113$i = 0, $i$210$i = 0, $i$39$i = 0, $n$01$i$i = 0, $n$01$i1$i = 0, $not$$i$i = 0, $o$0$lcssa$i = 0, $o$02$i = 0, $o$11$i = 0, $size$0 = 0, $tmp$i = 0, $tmp1$i = 0, $tmp2$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($g)) + 84|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 5|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = $3&255;
 $5 = $4 | 4;
 $6 = $5&255;
 HEAP8[$2>>0] = $6;
 $7 = ((($1)) + 4|0);
 $8 = HEAP8[$7>>0]|0;
 $9 = $8&255;
 switch ($9|0) {
 case 5:  {
  $10 = ((($1)) + 24|0);
  $11 = HEAP32[$10>>2]|0;
  HEAP32[$0>>2] = $11;
  $12 = ((($1)) + 8|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($13|0)==(0|0);
  do {
   if ($14) {
    label = 34;
   } else {
    $15 = ((($13)) + 6|0);
    $16 = HEAP8[$15>>0]|0;
    $17 = $16 & 8;
    $18 = ($17<<24>>24)==(0);
    if ($18) {
     $19 = ((($g)) + 196|0);
     $20 = HEAP32[$19>>2]|0;
     $21 = (_luaT_gettm($13,3,$20)|0);
     $$pr$pre$i = HEAP32[$12>>2]|0;
     $22 = ($$pr$pre$i|0)==(0|0);
     if ($22) {
      $$ph9$i = $21;
     } else {
      $$ph8$i = $21;$$pr7$i = $$pr$pre$i;
      label = 5;
     }
    } else {
     $$ph8$i = 0;$$pr7$i = $13;
     label = 5;
    }
    if ((label|0) == 5) {
     $23 = ((($$pr7$i)) + 5|0);
     $24 = HEAP8[$23>>0]|0;
     $25 = $24 & 3;
     $26 = ($25<<24>>24)==(0);
     if ($26) {
      $$ph9$i = $$ph8$i;
     } else {
      _reallymarkobject($g,$$pr7$i);
      $$ph9$i = $$ph8$i;
     }
    }
    $27 = ($$ph9$i|0)==(0|0);
    if ($27) {
     label = 34;
    } else {
     $28 = ((($$ph9$i)) + 8|0);
     $29 = HEAP32[$28>>2]|0;
     $30 = $29 & 15;
     $31 = ($30|0)==(4);
     if ($31) {
      $32 = HEAP32[$$ph9$i>>2]|0;
      $33 = ((($32)) + 16|0);
      $34 = (_strchr($33,107)|0);
      $35 = (_strchr($33,118)|0);
      $36 = ($34|0)!=(0|0);
      $37 = ($35|0)!=(0|0);
      $38 = $36 | $37;
      if ($38) {
       $39 = HEAP8[$2>>0]|0;
       $40 = $39&255;
       $41 = $40 & 251;
       $42 = $41&255;
       HEAP8[$2>>0] = $42;
       if ($36) {
        if ($37) {
         $97 = ((($g)) + 100|0);
         $98 = HEAP32[$97>>2]|0;
         HEAP32[$10>>2] = $98;
         HEAP32[$97>>2] = $1;
         break;
        } else {
         (_traverseephemeron($g,$1)|0);
         break;
        }
       }
       $43 = ((($1)) + 7|0);
       $44 = HEAP8[$43>>0]|0;
       $45 = $44&255;
       $46 = 1 << $45;
       $47 = ((($1)) + 16|0);
       $48 = HEAP32[$47>>2]|0;
       $49 = (($48) + ($46<<5)|0);
       $50 = ((($1)) + 28|0);
       $51 = HEAP32[$50>>2]|0;
       $52 = ($51|0)>(0);
       $53 = $52&1;
       $54 = ($44<<24>>24)==(31);
       if ($54) {
        $hasclears$0$lcssa$i$i = $53;
       } else {
        $hasclears$03$i$i = $53;$n$01$i$i = $48;
        while(1) {
         $55 = ((($n$01$i$i)) + 8|0);
         $56 = HEAP32[$55>>2]|0;
         $57 = ($56|0)==(0);
         $58 = ((($n$01$i$i)) + 24|0);
         $59 = HEAP32[$58>>2]|0;
         $60 = $59 & 64;
         $61 = ($60|0)==(0);
         if ($57) {
          if ($61) {
           $hasclears$1$i$i = $hasclears$03$i$i;
          } else {
           $62 = ((($n$01$i$i)) + 16|0);
           $63 = HEAP32[$62>>2]|0;
           $64 = ((($63)) + 5|0);
           $65 = HEAP8[$64>>0]|0;
           $66 = $65 & 3;
           $67 = ($66<<24>>24)==(0);
           if ($67) {
            $hasclears$1$i$i = $hasclears$03$i$i;
           } else {
            HEAP32[$58>>2] = 11;
            $hasclears$1$i$i = $hasclears$03$i$i;
           }
          }
         } else {
          if (!($61)) {
           $68 = ((($n$01$i$i)) + 16|0);
           $69 = HEAP32[$68>>2]|0;
           $70 = ((($69)) + 5|0);
           $71 = HEAP8[$70>>0]|0;
           $72 = $71 & 3;
           $73 = ($72<<24>>24)==(0);
           if (!($73)) {
            _reallymarkobject($g,$69);
           }
          }
          $74 = ($hasclears$03$i$i|0)==(0);
          if ($74) {
           $75 = HEAP32[$55>>2]|0;
           $76 = $75 & 64;
           $77 = ($76|0)==(0);
           do {
            if ($77) {
             $$0$i$i$i = 0;
            } else {
             $78 = $75 & 15;
             $79 = ($78|0)==(4);
             $80 = HEAP32[$n$01$i$i>>2]|0;
             if (!($79)) {
              $86 = ((($80)) + 5|0);
              $87 = HEAP8[$86>>0]|0;
              $88 = $87&255;
              $89 = $88 & 3;
              $$0$i$i$i = $89;
              break;
             }
             $81 = ($80|0)==(0|0);
             if ($81) {
              $$0$i$i$i = 0;
             } else {
              $82 = ((($80)) + 5|0);
              $83 = HEAP8[$82>>0]|0;
              $84 = $83 & 3;
              $85 = ($84<<24>>24)==(0);
              if ($85) {
               $$0$i$i$i = 0;
              } else {
               _reallymarkobject($g,$80);
               $$0$i$i$i = 0;
              }
             }
            }
           } while(0);
           $not$$i$i = ($$0$i$i$i|0)!=(0);
           $hasclears$0$$i$i = $not$$i$i&1;
           $hasclears$1$i$i = $hasclears$0$$i$i;
          } else {
           $hasclears$1$i$i = $hasclears$03$i$i;
          }
         }
         $90 = ((($n$01$i$i)) + 32|0);
         $91 = ($90>>>0)<($49>>>0);
         if ($91) {
          $hasclears$03$i$i = $hasclears$1$i$i;$n$01$i$i = $90;
         } else {
          $hasclears$0$lcssa$i$i = $hasclears$1$i$i;
          break;
         }
        }
       }
       $92 = ($hasclears$0$lcssa$i$i|0)==(0);
       if ($92) {
        $95 = ((($g)) + 88|0);
        $96 = HEAP32[$95>>2]|0;
        HEAP32[$10>>2] = $96;
        HEAP32[$95>>2] = $1;
        break;
       } else {
        $93 = ((($g)) + 92|0);
        $94 = HEAP32[$93>>2]|0;
        HEAP32[$10>>2] = $94;
        HEAP32[$93>>2] = $1;
        break;
       }
      } else {
       label = 34;
      }
     } else {
      label = 34;
     }
    }
   }
  } while(0);
  if ((label|0) == 34) {
   $99 = ((($1)) + 7|0);
   $100 = HEAP8[$99>>0]|0;
   $101 = $100&255;
   $102 = 1 << $101;
   $103 = ((($1)) + 16|0);
   $104 = HEAP32[$103>>2]|0;
   $105 = (($104) + ($102<<5)|0);
   $106 = ((($1)) + 28|0);
   $107 = HEAP32[$106>>2]|0;
   $108 = ($107|0)>(0);
   if ($108) {
    $109 = ((($1)) + 12|0);
    $346 = $107;$i$03$i$i = 0;
    while(1) {
     $110 = HEAP32[$109>>2]|0;
     $111 = (((($110) + ($i$03$i$i<<4)|0)) + 8|0);
     $112 = HEAP32[$111>>2]|0;
     $113 = $112 & 64;
     $114 = ($113|0)==(0);
     if ($114) {
      $123 = $346;
     } else {
      $115 = (($110) + ($i$03$i$i<<4)|0);
      $116 = HEAP32[$115>>2]|0;
      $117 = ((($116)) + 5|0);
      $118 = HEAP8[$117>>0]|0;
      $119 = $118 & 3;
      $120 = ($119<<24>>24)==(0);
      if ($120) {
       $123 = $346;
      } else {
       _reallymarkobject($g,$116);
       $$pre$i$i = HEAP32[$106>>2]|0;
       $123 = $$pre$i$i;
      }
     }
     $121 = (($i$03$i$i) + 1)|0;
     $122 = ($121|0)<($123|0);
     if ($122) {
      $346 = $123;$i$03$i$i = $121;
     } else {
      break;
     }
    }
    $$pre7$i$i = HEAP32[$103>>2]|0;
    $125 = $$pre7$i$i;
   } else {
    $125 = $104;
   }
   $124 = ($125>>>0)<($105>>>0);
   if ($124) {
    $n$01$i1$i = $125;
    while(1) {
     $126 = ((($n$01$i1$i)) + 8|0);
     $127 = HEAP32[$126>>2]|0;
     $128 = ($127|0)==(0);
     $129 = ((($n$01$i1$i)) + 24|0);
     $130 = HEAP32[$129>>2]|0;
     $131 = $130 & 64;
     $132 = ($131|0)==(0);
     if ($128) {
      if (!($132)) {
       $133 = ((($n$01$i1$i)) + 16|0);
       $134 = HEAP32[$133>>2]|0;
       $135 = ((($134)) + 5|0);
       $136 = HEAP8[$135>>0]|0;
       $137 = $136 & 3;
       $138 = ($137<<24>>24)==(0);
       if (!($138)) {
        HEAP32[$129>>2] = 11;
       }
      }
     } else {
      if ($132) {
       $146 = $127;
      } else {
       $139 = ((($n$01$i1$i)) + 16|0);
       $140 = HEAP32[$139>>2]|0;
       $141 = ((($140)) + 5|0);
       $142 = HEAP8[$141>>0]|0;
       $143 = $142 & 3;
       $144 = ($143<<24>>24)==(0);
       if ($144) {
        $146 = $127;
       } else {
        _reallymarkobject($g,$140);
        $$pre8$i$i = HEAP32[$126>>2]|0;
        $146 = $$pre8$i$i;
       }
      }
      $145 = $146 & 64;
      $147 = ($145|0)==(0);
      if (!($147)) {
       $148 = HEAP32[$n$01$i1$i>>2]|0;
       $149 = ((($148)) + 5|0);
       $150 = HEAP8[$149>>0]|0;
       $151 = $150 & 3;
       $152 = ($151<<24>>24)==(0);
       if (!($152)) {
        _reallymarkobject($g,$148);
       }
      }
     }
     $153 = ((($n$01$i1$i)) + 32|0);
     $154 = ($153>>>0)<($105>>>0);
     if ($154) {
      $n$01$i1$i = $153;
     } else {
      break;
     }
    }
   }
  }
  $155 = ((($1)) + 28|0);
  $156 = HEAP32[$155>>2]|0;
  $157 = $156 << 4;
  $158 = (($157) + 32)|0;
  $159 = ((($1)) + 7|0);
  $160 = HEAP8[$159>>0]|0;
  $161 = $160&255;
  $162 = 32 << $161;
  $163 = (($158) + ($162))|0;
  $size$0 = $163;
  break;
 }
 case 6:  {
  $164 = ((($1)) + 8|0);
  $165 = HEAP32[$164>>2]|0;
  HEAP32[$0>>2] = $165;
  $166 = ((($1)) + 12|0);
  $167 = HEAP32[$166>>2]|0;
  $168 = ($167|0)==(0|0);
  if (!($168)) {
   $169 = ((($167)) + 5|0);
   $170 = HEAP8[$169>>0]|0;
   $171 = $170 & 3;
   $172 = ($171<<24>>24)==(0);
   if (!($172)) {
    _reallymarkobject($g,$167);
   }
  }
  $173 = ((($1)) + 6|0);
  $174 = HEAP8[$173>>0]|0;
  $175 = $174&255;
  $176 = ($174<<24>>24)==(0);
  if ($176) {
   $$lcssa$i = $175;
  } else {
   $347 = $174;$i$01$i = 0;
   while(1) {
    $177 = (((($1)) + 16|0) + ($i$01$i<<2)|0);
    $178 = HEAP32[$177>>2]|0;
    $179 = ($178|0)==(0|0);
    if ($179) {
     $186 = $347;
    } else {
     $180 = ((($178)) + 5|0);
     $181 = HEAP8[$180>>0]|0;
     $182 = $181 & 3;
     $183 = ($182<<24>>24)==(0);
     if ($183) {
      $186 = $347;
     } else {
      _reallymarkobject($g,$178);
      $$pre$i = HEAP8[$173>>0]|0;
      $186 = $$pre$i;
     }
    }
    $184 = (($i$01$i) + 1)|0;
    $185 = $186&255;
    $187 = ($184|0)<($185|0);
    if ($187) {
     $347 = $186;$i$01$i = $184;
    } else {
     $$lcssa$i = $185;
     break;
    }
   }
  }
  $188 = $$lcssa$i << 2;
  $189 = (($188) + 16)|0;
  $size$0 = $189;
  break;
 }
 case 38:  {
  $190 = ((($1)) + 8|0);
  $191 = HEAP32[$190>>2]|0;
  HEAP32[$0>>2] = $191;
  $192 = ((($1)) + 6|0);
  $193 = HEAP8[$192>>0]|0;
  $194 = $193&255;
  $195 = ($193<<24>>24)==(0);
  if ($195) {
   $$lcssa$i4 = $194;
  } else {
   $348 = $193;$i$01$i1 = 0;
   while(1) {
    $196 = (((((($1)) + 16|0) + ($i$01$i1<<4)|0)) + 8|0);
    $197 = HEAP32[$196>>2]|0;
    $198 = $197 & 64;
    $199 = ($198|0)==(0);
    if ($199) {
     $208 = $348;
    } else {
     $200 = (((($1)) + 16|0) + ($i$01$i1<<4)|0);
     $201 = HEAP32[$200>>2]|0;
     $202 = ((($201)) + 5|0);
     $203 = HEAP8[$202>>0]|0;
     $204 = $203 & 3;
     $205 = ($204<<24>>24)==(0);
     if ($205) {
      $208 = $348;
     } else {
      _reallymarkobject($g,$201);
      $$pre$i3 = HEAP8[$192>>0]|0;
      $208 = $$pre$i3;
     }
    }
    $206 = (($i$01$i1) + 1)|0;
    $207 = $208&255;
    $209 = ($206|0)<($207|0);
    if ($209) {
     $348 = $208;$i$01$i1 = $206;
    } else {
     $$lcssa$i4 = $207;
     break;
    }
   }
  }
  $210 = $$lcssa$i4 << 4;
  $211 = (($210) + 16)|0;
  $size$0 = $211;
  break;
 }
 case 8:  {
  $212 = ((($1)) + 60|0);
  $213 = HEAP32[$212>>2]|0;
  HEAP32[$0>>2] = $213;
  $214 = ((($g)) + 88|0);
  $215 = HEAP32[$214>>2]|0;
  HEAP32[$212>>2] = $215;
  HEAP32[$214>>2] = $1;
  $216 = $4 & 251;
  $217 = $216&255;
  HEAP8[$2>>0] = $217;
  $218 = ((($1)) + 28|0);
  $219 = HEAP32[$218>>2]|0;
  $220 = ($219|0)==(0|0);
  if ($220) {
   $size$0 = 1;
  } else {
   $221 = ((($1)) + 8|0);
   $222 = HEAP32[$221>>2]|0;
   $223 = ($219>>>0)<($222>>>0);
   if ($223) {
    $349 = $222;$o$02$i = $219;
    while(1) {
     $224 = ((($o$02$i)) + 8|0);
     $225 = HEAP32[$224>>2]|0;
     $226 = $225 & 64;
     $227 = ($226|0)==(0);
     if ($227) {
      $235 = $349;
     } else {
      $228 = HEAP32[$o$02$i>>2]|0;
      $229 = ((($228)) + 5|0);
      $230 = HEAP8[$229>>0]|0;
      $231 = $230 & 3;
      $232 = ($231<<24>>24)==(0);
      if ($232) {
       $235 = $349;
      } else {
       _reallymarkobject($g,$228);
       $$pre$i6 = HEAP32[$221>>2]|0;
       $235 = $$pre$i6;
      }
     }
     $233 = ((($o$02$i)) + 16|0);
     $234 = ($233>>>0)<($235>>>0);
     if ($234) {
      $349 = $235;$o$02$i = $233;
     } else {
      $o$0$lcssa$i = $233;
      break;
     }
    }
   } else {
    $o$0$lcssa$i = $219;
   }
   $236 = ((($g)) + 61|0);
   $237 = HEAP8[$236>>0]|0;
   $238 = ($237<<24>>24)==(1);
   if ($238) {
    $239 = HEAP32[$218>>2]|0;
    $240 = ((($1)) + 32|0);
    $241 = HEAP32[$240>>2]|0;
    $242 = (($239) + ($241<<4)|0);
    $243 = ($o$0$lcssa$i>>>0)<($242>>>0);
    if ($243) {
     $o$11$i = $o$0$lcssa$i;
     while(1) {
      $244 = ((($o$11$i)) + 8|0);
      HEAP32[$244>>2] = 0;
      $245 = ((($o$11$i)) + 16|0);
      $246 = ($245>>>0)<($242>>>0);
      if ($246) {
       $o$11$i = $245;
      } else {
       $248 = $241;
       break;
      }
     }
    } else {
     $248 = $241;
    }
   } else {
    $$phi$trans$insert$i = ((($1)) + 32|0);
    $$pre5$i = HEAP32[$$phi$trans$insert$i>>2]|0;
    $248 = $$pre5$i;
   }
   $247 = $248 << 4;
   $249 = (($247) + 112)|0;
   $size$0 = $249;
  }
  break;
 }
 case 9:  {
  $250 = ((($1)) + 72|0);
  $251 = HEAP32[$250>>2]|0;
  HEAP32[$0>>2] = $251;
  $252 = ((($1)) + 32|0);
  $253 = HEAP32[$252>>2]|0;
  $254 = ($253|0)==(0|0);
  if (!($254)) {
   $255 = ((($253)) + 5|0);
   $256 = HEAP8[$255>>0]|0;
   $257 = $256 & 3;
   $258 = ($257<<24>>24)==(0);
   if (!($258)) {
    HEAP32[$252>>2] = 0;
   }
  }
  $259 = ((($1)) + 36|0);
  $260 = HEAP32[$259>>2]|0;
  $261 = ($260|0)==(0|0);
  if (!($261)) {
   $262 = ((($260)) + 5|0);
   $263 = HEAP8[$262>>0]|0;
   $264 = $263 & 3;
   $265 = ($264<<24>>24)==(0);
   if (!($265)) {
    _reallymarkobject($g,$260);
   }
  }
  $266 = ((($1)) + 44|0);
  $267 = HEAP32[$266>>2]|0;
  $268 = ($267|0)>(0);
  if ($268) {
   $269 = ((($1)) + 8|0);
   $350 = $267;$i$016$i = 0;
   while(1) {
    $274 = HEAP32[$269>>2]|0;
    $275 = (((($274) + ($i$016$i<<4)|0)) + 8|0);
    $276 = HEAP32[$275>>2]|0;
    $277 = $276 & 64;
    $278 = ($277|0)==(0);
    if ($278) {
     $287 = $350;
    } else {
     $279 = (($274) + ($i$016$i<<4)|0);
     $280 = HEAP32[$279>>2]|0;
     $281 = ((($280)) + 5|0);
     $282 = HEAP8[$281>>0]|0;
     $283 = $282 & 3;
     $284 = ($283<<24>>24)==(0);
     if ($284) {
      $287 = $350;
     } else {
      _reallymarkobject($g,$280);
      $$pre$i8 = HEAP32[$266>>2]|0;
      $287 = $$pre$i8;
     }
    }
    $285 = (($i$016$i) + 1)|0;
    $286 = ($285|0)<($287|0);
    if ($286) {
     $350 = $287;$i$016$i = $285;
    } else {
     break;
    }
   }
  }
  $270 = ((($1)) + 40|0);
  $271 = HEAP32[$270>>2]|0;
  $272 = ($271|0)>(0);
  if ($272) {
   $273 = ((($1)) + 28|0);
   $351 = $271;$i$113$i = 0;
   while(1) {
    $292 = HEAP32[$273>>2]|0;
    $293 = (($292) + ($i$113$i<<3)|0);
    $294 = HEAP32[$293>>2]|0;
    $295 = ($294|0)==(0|0);
    if ($295) {
     $302 = $351;
    } else {
     $296 = ((($294)) + 5|0);
     $297 = HEAP8[$296>>0]|0;
     $298 = $297 & 3;
     $299 = ($298<<24>>24)==(0);
     if ($299) {
      $302 = $351;
     } else {
      _reallymarkobject($g,$294);
      $$pre20$i = HEAP32[$270>>2]|0;
      $302 = $$pre20$i;
     }
    }
    $300 = (($i$113$i) + 1)|0;
    $301 = ($300|0)<($302|0);
    if ($301) {
     $351 = $302;$i$113$i = $300;
    } else {
     break;
    }
   }
  }
  $288 = ((($1)) + 56|0);
  $289 = HEAP32[$288>>2]|0;
  $290 = ($289|0)>(0);
  if ($290) {
   $291 = ((($1)) + 16|0);
   $353 = $289;$i$210$i = 0;
   while(1) {
    $307 = HEAP32[$291>>2]|0;
    $308 = (($307) + ($i$210$i<<2)|0);
    $309 = HEAP32[$308>>2]|0;
    $310 = ($309|0)==(0|0);
    if ($310) {
     $317 = $353;
    } else {
     $311 = ((($309)) + 5|0);
     $312 = HEAP8[$311>>0]|0;
     $313 = $312 & 3;
     $314 = ($313<<24>>24)==(0);
     if ($314) {
      $317 = $353;
     } else {
      _reallymarkobject($g,$309);
      $$pre21$i = HEAP32[$288>>2]|0;
      $317 = $$pre21$i;
     }
    }
    $315 = (($i$210$i) + 1)|0;
    $316 = ($315|0)<($317|0);
    if ($316) {
     $353 = $317;$i$210$i = $315;
    } else {
     $352 = $317;
     break;
    }
   }
  } else {
   $352 = $289;
  }
  $303 = ((($1)) + 60|0);
  $304 = HEAP32[$303>>2]|0;
  $305 = ($304|0)>(0);
  if ($305) {
   $306 = ((($1)) + 24|0);
   $354 = $304;$i$39$i = 0;
   while(1) {
    $318 = HEAP32[$306>>2]|0;
    $319 = (($318) + (($i$39$i*12)|0)|0);
    $320 = HEAP32[$319>>2]|0;
    $321 = ($320|0)==(0|0);
    if ($321) {
     $328 = $354;
    } else {
     $322 = ((($320)) + 5|0);
     $323 = HEAP8[$322>>0]|0;
     $324 = $323 & 3;
     $325 = ($324<<24>>24)==(0);
     if ($325) {
      $328 = $354;
     } else {
      _reallymarkobject($g,$320);
      $$pre22$i = HEAP32[$303>>2]|0;
      $328 = $$pre22$i;
     }
    }
    $326 = (($i$39$i) + 1)|0;
    $327 = ($326|0)<($328|0);
    if ($327) {
     $354 = $328;$i$39$i = $326;
    } else {
     $$lcssa35 = $328;
     break;
    }
   }
   $$pre23$i = HEAP32[$288>>2]|0;
   $$lcssa$i12 = $$lcssa35;$338 = $$pre23$i;
  } else {
   $$lcssa$i12 = $304;$338 = $352;
  }
  $329 = ((($1)) + 48|0);
  $330 = HEAP32[$329>>2]|0;
  $331 = HEAP32[$266>>2]|0;
  $332 = $331 << 4;
  $333 = ((($1)) + 52|0);
  $334 = HEAP32[$333>>2]|0;
  $335 = ($$lcssa$i12*12)|0;
  $336 = HEAP32[$270>>2]|0;
  $337 = $336 << 3;
  $tmp$i = (($330) + ($338))|0;
  $tmp1$i = (($tmp$i) + ($334))|0;
  $tmp2$i = $tmp1$i << 2;
  $339 = (($335) + 80)|0;
  $340 = (($339) + ($332))|0;
  $341 = (($340) + ($337))|0;
  $342 = (($341) + ($tmp2$i))|0;
  $size$0 = $342;
  break;
 }
 default: {
  return;
 }
 }
 $343 = ((($g)) + 16|0);
 $344 = HEAP32[$343>>2]|0;
 $345 = (($344) + ($size$0))|0;
 HEAP32[$343>>2] = $345;
 return;
}
function _traverseephemeron($g,$h) {
 $g = $g|0;
 $h = $h|0;
 var $$pre = 0, $$pre17 = 0, $$pre18 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $9 = 0, $hasclears$01 = 0, $hasclears$1 = 0, $hasclears$1$lcssa = 0, $i$012 = 0, $marked$0$lcssa = 0, $marked$011 = 0, $marked$1 = 0, $marked$1$lcssa = 0, $marked$2$lcssa19 = 0, $marked$2$lcssa2022 = 0, $marked$27 = 0, $marked$3 = 0, $marked$3$lcssa = 0, $n$05 = 0, $prop$0$ = 0;
 var $prop$03 = 0, $prop$1 = 0, $prop$1$lcssa = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($h)) + 7|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1&255;
 $3 = 1 << $2;
 $4 = ((($h)) + 16|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + ($3<<5)|0);
 $7 = ((($h)) + 28|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)>(0);
 if ($9) {
  $10 = ((($h)) + 12|0);
  $81 = $8;$i$012 = 0;$marked$011 = 0;
  while(1) {
   $11 = HEAP32[$10>>2]|0;
   $12 = (((($11) + ($i$012<<4)|0)) + 8|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = $13 & 64;
   $15 = ($14|0)==(0);
   if ($15) {
    $24 = $81;$marked$1 = $marked$011;
   } else {
    $16 = (($11) + ($i$012<<4)|0);
    $17 = HEAP32[$16>>2]|0;
    $18 = ((($17)) + 5|0);
    $19 = HEAP8[$18>>0]|0;
    $20 = $19 & 3;
    $21 = ($20<<24>>24)==(0);
    if ($21) {
     $24 = $81;$marked$1 = $marked$011;
    } else {
     _reallymarkobject($g,$17);
     $$pre = HEAP32[$7>>2]|0;
     $24 = $$pre;$marked$1 = 1;
    }
   }
   $22 = (($i$012) + 1)|0;
   $23 = ($22|0)<($24|0);
   if ($23) {
    $81 = $24;$i$012 = $22;$marked$011 = $marked$1;
   } else {
    $marked$1$lcssa = $marked$1;
    break;
   }
  }
  $$pre17 = HEAP32[$4>>2]|0;
  $26 = $$pre17;$marked$0$lcssa = $marked$1$lcssa;
 } else {
  $26 = $5;$marked$0$lcssa = 0;
 }
 $25 = ($26>>>0)<($6>>>0);
 if ($25) {
  $hasclears$01 = 0;$marked$27 = $marked$0$lcssa;$n$05 = $26;$prop$03 = 0;
  while(1) {
   $27 = ((($n$05)) + 8|0);
   $28 = HEAP32[$27>>2]|0;
   $29 = ($28|0)==(0);
   $30 = ((($n$05)) + 24|0);
   $31 = HEAP32[$30>>2]|0;
   $32 = $31 & 64;
   $33 = ($32|0)==(0);
   L14: do {
    if ($29) {
     if ($33) {
      $hasclears$1 = $hasclears$01;$marked$3 = $marked$27;$prop$1 = $prop$03;
     } else {
      $34 = ((($n$05)) + 16|0);
      $35 = HEAP32[$34>>2]|0;
      $36 = ((($35)) + 5|0);
      $37 = HEAP8[$36>>0]|0;
      $38 = $37 & 3;
      $39 = ($38<<24>>24)==(0);
      if ($39) {
       $hasclears$1 = $hasclears$01;$marked$3 = $marked$27;$prop$1 = $prop$03;
      } else {
       HEAP32[$30>>2] = 11;
       $hasclears$1 = $hasclears$01;$marked$3 = $marked$27;$prop$1 = $prop$03;
      }
     }
    } else {
     do {
      if ($33) {
       $50 = $28;
       label = 18;
      } else {
       $40 = ((($n$05)) + 16|0);
       $41 = $31 & 15;
       $42 = ($41|0)==(4);
       $43 = HEAP32[$40>>2]|0;
       if ($42) {
        $44 = ($43|0)==(0|0);
        if ($44) {
         $50 = $28;
         label = 18;
         break;
        }
        $45 = ((($43)) + 5|0);
        $46 = HEAP8[$45>>0]|0;
        $47 = $46 & 3;
        $48 = ($47<<24>>24)==(0);
        if ($48) {
         $50 = $28;
         label = 18;
         break;
        }
        _reallymarkobject($g,$43);
        $$pre18 = HEAP32[$27>>2]|0;
        $50 = $$pre18;
        label = 18;
        break;
       }
       $52 = ((($43)) + 5|0);
       $53 = HEAP8[$52>>0]|0;
       $54 = $53 & 3;
       $55 = ($54<<24>>24)==(0);
       $56 = $28 & 64;
       $57 = ($56|0)==(0);
       if ($55) {
        if ($57) {
         $hasclears$1 = $hasclears$01;$marked$3 = $marked$27;$prop$1 = $prop$03;
         break L14;
        } else {
         break;
        }
       }
       if ($57) {
        $hasclears$1 = 1;$marked$3 = $marked$27;$prop$1 = $prop$03;
        break L14;
       }
       $58 = HEAP32[$n$05>>2]|0;
       $59 = ((($58)) + 5|0);
       $60 = HEAP8[$59>>0]|0;
       $61 = $60 & 3;
       $62 = ($61<<24>>24)==(0);
       $prop$0$ = $62 ? $prop$03 : 1;
       $hasclears$1 = 1;$marked$3 = $marked$27;$prop$1 = $prop$0$;
       break L14;
      }
     } while(0);
     if ((label|0) == 18) {
      label = 0;
      $49 = $50 & 64;
      $51 = ($49|0)==(0);
      if ($51) {
       $hasclears$1 = $hasclears$01;$marked$3 = $marked$27;$prop$1 = $prop$03;
       break;
      }
     }
     $63 = HEAP32[$n$05>>2]|0;
     $64 = ((($63)) + 5|0);
     $65 = HEAP8[$64>>0]|0;
     $66 = $65 & 3;
     $67 = ($66<<24>>24)==(0);
     if ($67) {
      $hasclears$1 = $hasclears$01;$marked$3 = $marked$27;$prop$1 = $prop$03;
     } else {
      _reallymarkobject($g,$63);
      $hasclears$1 = $hasclears$01;$marked$3 = 1;$prop$1 = $prop$03;
     }
    }
   } while(0);
   $68 = ((($n$05)) + 32|0);
   $69 = ($68>>>0)<($6>>>0);
   if ($69) {
    $hasclears$01 = $hasclears$1;$marked$27 = $marked$3;$n$05 = $68;$prop$03 = $prop$1;
   } else {
    $hasclears$1$lcssa = $hasclears$1;$marked$3$lcssa = $marked$3;$prop$1$lcssa = $prop$1;
    break;
   }
  }
  $70 = ($prop$1$lcssa|0)==(0);
  if (!($70)) {
   $71 = ((($g)) + 96|0);
   $72 = HEAP32[$71>>2]|0;
   $73 = ((($h)) + 24|0);
   HEAP32[$73>>2] = $72;
   HEAP32[$71>>2] = $h;
   $marked$2$lcssa19 = $marked$3$lcssa;
   return ($marked$2$lcssa19|0);
  }
  $74 = ($hasclears$1$lcssa|0)==(0);
  if ($74) {
   $marked$2$lcssa2022 = $marked$3$lcssa;
  } else {
   $75 = ((($g)) + 100|0);
   $76 = HEAP32[$75>>2]|0;
   $77 = ((($h)) + 24|0);
   HEAP32[$77>>2] = $76;
   HEAP32[$75>>2] = $h;
   $marked$2$lcssa19 = $marked$3$lcssa;
   return ($marked$2$lcssa19|0);
  }
 } else {
  $marked$2$lcssa2022 = $marked$0$lcssa;
 }
 $78 = ((($g)) + 88|0);
 $79 = HEAP32[$78>>2]|0;
 $80 = ((($h)) + 24|0);
 HEAP32[$80>>2] = $79;
 HEAP32[$78>>2] = $h;
 $marked$2$lcssa19 = $marked$2$lcssa2022;
 return ($marked$2$lcssa19|0);
}
function _clearvalues($g,$l,$f) {
 $g = $g|0;
 $l = $l|0;
 $f = $f|0;
 var $$06 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$01 = 0, $n$02 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($l|0)==($f|0);
 if ($0) {
  return;
 } else {
  $$06 = $l;
 }
 while(1) {
  $1 = ((($$06)) + 7|0);
  $2 = HEAP8[$1>>0]|0;
  $3 = $2&255;
  $4 = 1 << $3;
  $5 = ((($$06)) + 16|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = (($6) + ($4<<5)|0);
  $8 = ((($$06)) + 28|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ($9|0)>(0);
  if ($10) {
   $11 = ((($$06)) + 12|0);
   $i$01 = 0;
   while(1) {
    $12 = HEAP32[$11>>2]|0;
    $13 = (($12) + ($i$01<<4)|0);
    $14 = (_iscleared($g,$13)|0);
    $15 = ($14|0)==(0);
    if (!($15)) {
     $16 = (((($12) + ($i$01<<4)|0)) + 8|0);
     HEAP32[$16>>2] = 0;
    }
    $17 = (($i$01) + 1)|0;
    $18 = HEAP32[$8>>2]|0;
    $19 = ($17|0)<($18|0);
    if ($19) {
     $i$01 = $17;
    } else {
     break;
    }
   }
   $$pre = HEAP32[$5>>2]|0;
   $21 = $$pre;
  } else {
   $21 = $6;
  }
  $20 = ($21>>>0)<($7>>>0);
  if ($20) {
   $n$02 = $21;
   while(1) {
    $22 = ((($n$02)) + 8|0);
    $23 = HEAP32[$22>>2]|0;
    $24 = ($23|0)==(0);
    if (!($24)) {
     $25 = (_iscleared($g,$n$02)|0);
     $26 = ($25|0)==(0);
     if (!($26)) {
      HEAP32[$22>>2] = 0;
      $27 = ((($n$02)) + 24|0);
      $28 = HEAP32[$27>>2]|0;
      $29 = $28 & 64;
      $30 = ($29|0)==(0);
      if (!($30)) {
       $31 = ((($n$02)) + 16|0);
       $32 = HEAP32[$31>>2]|0;
       $33 = ((($32)) + 5|0);
       $34 = HEAP8[$33>>0]|0;
       $35 = $34 & 3;
       $36 = ($35<<24>>24)==(0);
       if (!($36)) {
        HEAP32[$27>>2] = 11;
       }
      }
     }
    }
    $37 = ((($n$02)) + 32|0);
    $38 = ($37>>>0)<($7>>>0);
    if ($38) {
     $n$02 = $37;
    } else {
     break;
    }
   }
  }
  $39 = ((($$06)) + 24|0);
  $40 = HEAP32[$39>>2]|0;
  $41 = ($40|0)==($f|0);
  if ($41) {
   break;
  } else {
   $$06 = $40;
  }
 }
 return;
}
function _iscleared($g,$o) {
 $g = $g|0;
 $o = $o|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($o)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & 64;
 $3 = ($2|0)==(0);
 if ($3) {
  $$0 = 0;
  return ($$0|0);
 }
 $4 = $1 & 15;
 $5 = ($4|0)==(4);
 $6 = HEAP32[$o>>2]|0;
 if (!($5)) {
  $12 = ((($6)) + 5|0);
  $13 = HEAP8[$12>>0]|0;
  $14 = $13&255;
  $15 = $14 & 3;
  $$0 = $15;
  return ($$0|0);
 }
 $7 = ($6|0)==(0|0);
 if ($7) {
  $$0 = 0;
  return ($$0|0);
 }
 $8 = ((($6)) + 5|0);
 $9 = HEAP8[$8>>0]|0;
 $10 = $9 & 3;
 $11 = ($10<<24>>24)==(0);
 if ($11) {
  $$0 = 0;
  return ($$0|0);
 }
 _reallymarkobject($g,$6);
 $$0 = 0;
 return ($$0|0);
}
function _luaM_growaux_($L,$block,$size,$size_elems,$limit,$what) {
 $L = $L|0;
 $block = $block|0;
 $size = $size|0;
 $size_elems = $size_elems|0;
 $limit = $limit|0;
 $what = $what|0;
 var $$ = 0, $$neg$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $newblock$1$i = 0, $newsize$0 = 0, $or$cond$i = 0, $osize$op$i = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = HEAP32[$size>>2]|0;
 $1 = (($limit|0) / 2)&-1;
 $2 = ($0|0)<($1|0);
 if ($2) {
  $4 = $0 << 1;
  $5 = ($4|0)<(4);
  $$ = $5 ? 4 : $4;
  $newsize$0 = $$;
 } else {
  $3 = ($0|0)<($limit|0);
  if ($3) {
   $newsize$0 = $limit;
  } else {
   HEAP32[$vararg_buffer>>2] = $what;
   $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
   HEAP32[$vararg_ptr1>>2] = $limit;
   _luaG_runerror($L,5768,$vararg_buffer);
   // unreachable;
  }
 }
 $6 = (($newsize$0) + 1)|0;
 $7 = (4294967293 / ($size_elems>>>0))&-1;
 $8 = ($6>>>0)>($7>>>0);
 if ($8) {
  _luaM_toobig($L);
  // unreachable;
 }
 $9 = Math_imul($0, $size_elems)|0;
 $10 = Math_imul($newsize$0, $size_elems)|0;
 $11 = ((($L)) + 12|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($block|0)!=(0|0);
 $14 = HEAP32[$12>>2]|0;
 $15 = ((($12)) + 4|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (FUNCTION_TABLE_iiiii[$14 & 255]($16,$block,$9,$10)|0);
 $18 = ($17|0)==(0|0);
 $19 = ($10|0)!=(0);
 $or$cond$i = $19 & $18;
 if (!($or$cond$i)) {
  $newblock$1$i = $17;
  $27 = ((($12)) + 12|0);
  $28 = HEAP32[$27>>2]|0;
  $osize$op$i = (0 - ($9))|0;
  $$neg$i = $13 ? $osize$op$i : 0;
  $29 = (($$neg$i) + ($10))|0;
  $30 = (($29) + ($28))|0;
  HEAP32[$27>>2] = $30;
  HEAP32[$size>>2] = $newsize$0;
  STACKTOP = sp;return ($newblock$1$i|0);
 }
 $20 = ((($12)) + 63|0);
 $21 = HEAP8[$20>>0]|0;
 $22 = ($21<<24>>24)==(0);
 if ($22) {
  _luaD_throw($L,4);
  // unreachable;
 }
 _luaC_fullgc($L,1);
 $23 = HEAP32[$12>>2]|0;
 $24 = HEAP32[$15>>2]|0;
 $25 = (FUNCTION_TABLE_iiiii[$23 & 255]($24,$block,$9,$10)|0);
 $26 = ($25|0)==(0|0);
 if ($26) {
  _luaD_throw($L,4);
  // unreachable;
 } else {
  $newblock$1$i = $25;
  $27 = ((($12)) + 12|0);
  $28 = HEAP32[$27>>2]|0;
  $osize$op$i = (0 - ($9))|0;
  $$neg$i = $13 ? $osize$op$i : 0;
  $29 = (($$neg$i) + ($10))|0;
  $30 = (($29) + ($28))|0;
  HEAP32[$27>>2] = $30;
  HEAP32[$size>>2] = $newsize$0;
  STACKTOP = sp;return ($newblock$1$i|0);
 }
 return (0)|0;
}
function _luaM_toobig($L) {
 $L = $L|0;
 var $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 _luaG_runerror($L,5794,$vararg_buffer);
 // unreachable;
}
function _luaM_realloc_($L,$block,$osize,$nsize) {
 $L = $L|0;
 $block = $block|0;
 $osize = $osize|0;
 $nsize = $nsize|0;
 var $$neg = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $newblock$1 = 0, $or$cond = 0, $osize$op = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($L)) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($block|0)!=(0|0);
 $3 = HEAP32[$1>>2]|0;
 $4 = ((($1)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (FUNCTION_TABLE_iiiii[$3 & 255]($5,$block,$osize,$nsize)|0);
 $7 = ($6|0)==(0|0);
 $8 = ($nsize|0)!=(0);
 $or$cond = $8 & $7;
 if ($or$cond) {
  $9 = ((($1)) + 63|0);
  $10 = HEAP8[$9>>0]|0;
  $11 = ($10<<24>>24)==(0);
  if ($11) {
   _luaD_throw($L,4);
   // unreachable;
  }
  _luaC_fullgc($L,1);
  $12 = HEAP32[$1>>2]|0;
  $13 = HEAP32[$4>>2]|0;
  $14 = (FUNCTION_TABLE_iiiii[$12 & 255]($13,$block,$osize,$nsize)|0);
  $15 = ($14|0)==(0|0);
  if ($15) {
   _luaD_throw($L,4);
   // unreachable;
  } else {
   $newblock$1 = $14;
  }
 } else {
  $newblock$1 = $6;
 }
 $16 = ((($1)) + 12|0);
 $17 = HEAP32[$16>>2]|0;
 $osize$op = (0 - ($osize))|0;
 $$neg = $2 ? $osize$op : 0;
 $18 = (($$neg) + ($nsize))|0;
 $19 = (($18) + ($17))|0;
 HEAP32[$16>>2] = $19;
 return ($newblock$1|0);
}
function _luaO_int2fb($x) {
 $x = $x|0;
 var $$0$lcssa = 0, $$01 = 0, $$02 = 0, $$lcssa = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $e$0$lcssa = 0, $e$03 = 0, $phitmp = 0, $phitmp$lcssa = 0, $phitmp5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($x>>>0)<(8);
 if ($0) {
  $$01 = $x;
  return ($$01|0);
 }
 $1 = ($x>>>0)>(15);
 if ($1) {
  $$02 = $x;$e$03 = 1;
  while(1) {
   $2 = (($$02) + 1)|0;
   $3 = $2 >>> 1;
   $phitmp = (($e$03) + 1)|0;
   $4 = ($2>>>0)>(31);
   if ($4) {
    $$02 = $3;$e$03 = $phitmp;
   } else {
    $$lcssa = $3;$phitmp$lcssa = $phitmp;
    break;
   }
  }
  $phitmp5 = $phitmp$lcssa << 3;
  $$0$lcssa = $$lcssa;$e$0$lcssa = $phitmp5;
 } else {
  $$0$lcssa = $x;$e$0$lcssa = 8;
 }
 $5 = (($$0$lcssa) + -8)|0;
 $6 = $e$0$lcssa | $5;
 $$01 = $6;
 return ($$01|0);
}
function _luaO_fb2int($x) {
 $x = $x|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $x >>> 3;
 $1 = $0 & 31;
 $2 = ($1|0)==(0);
 if ($2) {
  $$0 = $x;
  return ($$0|0);
 }
 $3 = $x & 7;
 $4 = $3 | 8;
 $5 = (($1) + -1)|0;
 $6 = $4 << $5;
 $$0 = $6;
 return ($$0|0);
}
function _luaO_ceillog2($x) {
 $x = $x|0;
 var $$0$lcssa = 0, $$01 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $l$0$lcssa = 0, $l$02 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($x) + -1)|0;
 $1 = ($0>>>0)>(255);
 if ($1) {
  $$01 = $0;$l$02 = 0;
  while(1) {
   $2 = (($l$02) + 8)|0;
   $3 = $$01 >>> 8;
   $4 = ($$01>>>0)>(65535);
   if ($4) {
    $$01 = $3;$l$02 = $2;
   } else {
    $$0$lcssa = $3;$l$0$lcssa = $2;
    break;
   }
  }
 } else {
  $$0$lcssa = $0;$l$0$lcssa = 0;
 }
 $5 = (5833 + ($$0$lcssa)|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = $6&255;
 $8 = (($7) + ($l$0$lcssa))|0;
 return ($8|0);
}
function _luaO_arith($op,$v1,$v2) {
 $op = $op|0;
 $v1 = +$v1;
 $v2 = +$v2;
 var $$0 = 0.0, $0 = 0.0, $1 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 switch ($op|0) {
 case 0:  {
  $0 = $v1 + $v2;
  $$0 = $0;
  break;
 }
 case 1:  {
  $1 = $v1 - $v2;
  $$0 = $1;
  break;
 }
 case 2:  {
  $2 = $v1 * $v2;
  $$0 = $2;
  break;
 }
 case 3:  {
  $3 = $v1 / $v2;
  $$0 = $3;
  break;
 }
 case 4:  {
  $4 = $v1 / $v2;
  $5 = (+Math_floor((+$4)));
  $6 = $5 * $v2;
  $7 = $v1 - $6;
  $$0 = $7;
  break;
 }
 case 5:  {
  $8 = (+Math_pow((+$v1),(+$v2)));
  $$0 = $8;
  break;
 }
 case 6:  {
  $9 = -$v1;
  $$0 = $9;
  break;
 }
 default: {
  $$0 = 0.0;
 }
 }
 return (+$$0);
}
function _luaO_hexavalue($c) {
 $c = $c|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($c) + 1)|0;
 $1 = (8085 + ($0)|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = $2 & 2;
 $4 = ($3<<24>>24)==(0);
 $5 = (($c) + -48)|0;
 $6 = $c | 32;
 $7 = (($6) + -87)|0;
 $$0 = $4 ? $7 : $5;
 return ($$0|0);
}
function _luaO_str2d($s,$len,$result) {
 $s = $s|0;
 $len = $len|0;
 $result = $result|0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i$i = 0, $$0$i$i7$i = 0, $$0$i2$i = 0, $$0$lcssa$i8$i = 0.0, $$01$i$i = 0.0, $$01$i6$i = 0.0, $$in$i = 0, $$in10$i = 0, $$in1121$i = 0, $$in12$i = 0, $$lcssa = 0, $$lcssa18$i = 0, $$lcssa19$i = 0, $$lcssa20$i = 0, $$lcssa61 = 0, $$lcssa62 = 0, $$lcssa63 = 0, $$lcssa71 = 0;
 var $$lcssa72 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0.0, $13 = 0, $130 = 0, $131 = 0.0;
 var $132 = 0.0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0.0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0.0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0.0, $8 = 0, $80 = 0.0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $endptr = 0, $exp1$0$$i = 0;
 var $exp1$022$i = 0, $phitmp$i = 0, $r$0$$i = 0.0, $r$0$i = 0.0, $storemerge = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $endptr = sp;
 $0 = (_strpbrk($s,6089)|0);
 $1 = ($0|0)==(0|0);
 if (!($1)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $2 = (_strpbrk($s,6092)|0);
 $3 = ($2|0)==(0|0);
 L4: do {
  if ($3) {
   $132 = (+_strtod($s,$endptr));
   $$pre = HEAP32[$endptr>>2]|0;
   $134 = $$pre;$storemerge = $132;
  } else {
   $4 = $s;
   HEAP32[$endptr>>2] = $4;
   $5 = HEAP8[$s>>0]|0;
   $6 = $5&255;
   $7 = (($6) + 1)|0;
   $8 = (8085 + ($7)|0);
   $9 = HEAP8[$8>>0]|0;
   $10 = $9 & 8;
   $11 = ($10<<24>>24)==(0);
   if ($11) {
    $$lcssa18$i = $4;$$lcssa19$i = $s;$$lcssa20$i = $5;
   } else {
    $13 = $s;
    while(1) {
     $12 = ((($13)) + 1|0);
     $14 = HEAP8[$12>>0]|0;
     $15 = $14&255;
     $16 = (($15) + 1)|0;
     $17 = (8085 + ($16)|0);
     $18 = HEAP8[$17>>0]|0;
     $19 = $18 & 8;
     $20 = ($19<<24>>24)==(0);
     if ($20) {
      $$lcssa71 = $12;$$lcssa72 = $14;
      break;
     } else {
      $13 = $12;
     }
    }
    $21 = $$lcssa71;
    $$lcssa18$i = $21;$$lcssa19$i = $$lcssa71;$$lcssa20$i = $$lcssa72;
   }
   switch ($$lcssa20$i<<24>>24) {
   case 45:  {
    $22 = ((($$lcssa19$i)) + 1|0);
    $23 = $22;
    $$0$i$i = 1;$27 = $23;
    break;
   }
   case 43:  {
    $24 = ((($$lcssa19$i)) + 1|0);
    $25 = $24;
    $$0$i$i = 0;$27 = $25;
    break;
   }
   default: {
    $$0$i$i = 0;$27 = $$lcssa18$i;
   }
   }
   $26 = $27;
   $28 = HEAP8[$26>>0]|0;
   $29 = ($28<<24>>24)==(48);
   L16: do {
    if ($29) {
     $30 = ((($26)) + 1|0);
     $31 = HEAP8[$30>>0]|0;
     switch ($31<<24>>24) {
     case 88: case 120:  {
      break;
     }
     default: {
      break L16;
     }
     }
     $32 = ((($26)) + 2|0);
     $33 = HEAP8[$32>>0]|0;
     $34 = $33&255;
     $35 = (($34) + 1)|0;
     $36 = (8085 + ($35)|0);
     $37 = HEAP8[$36>>0]|0;
     $38 = $37 & 16;
     $39 = ($38<<24>>24)==(0);
     if ($39) {
      $$0$lcssa$i8$i = 0.0;$$in$i = $32;$62 = $33;$95 = 0;
     } else {
      $$01$i6$i = 0.0;$42 = $37;$45 = $34;$51 = 0;$53 = $32;
      while(1) {
       $40 = $$01$i6$i * 16.0;
       $41 = $42 & 2;
       $43 = ($41<<24>>24)==(0);
       $44 = (($45) + -48)|0;
       $46 = $45 | 32;
       $47 = (($46) + -87)|0;
       $$0$i$i7$i = $43 ? $47 : $44;
       $48 = (+($$0$i$i7$i|0));
       $49 = $40 + $48;
       $50 = (($51) + 1)|0;
       $52 = ((($53)) + 1|0);
       $54 = HEAP8[$52>>0]|0;
       $55 = $54&255;
       $56 = (($55) + 1)|0;
       $57 = (8085 + ($56)|0);
       $58 = HEAP8[$57>>0]|0;
       $59 = $58 & 16;
       $60 = ($59<<24>>24)==(0);
       if ($60) {
        $$0$lcssa$i8$i = $49;$$in$i = $52;$62 = $54;$95 = $50;
        break;
       } else {
        $$01$i6$i = $49;$42 = $58;$45 = $55;$51 = $50;$53 = $52;
       }
      }
     }
     $61 = ($62<<24>>24)==(46);
     if ($61) {
      $63 = ((($$in$i)) + 1|0);
      $64 = HEAP8[$63>>0]|0;
      $65 = $64&255;
      $66 = (($65) + 1)|0;
      $67 = (8085 + ($66)|0);
      $68 = HEAP8[$67>>0]|0;
      $69 = $68 & 16;
      $70 = ($69<<24>>24)==(0);
      if ($70) {
       $$in12$i = $63;$94 = 0;$r$0$i = $$0$lcssa$i8$i;
      } else {
       $$01$i$i = $$0$lcssa$i8$i;$73 = $68;$76 = $65;$82 = 0;$84 = $63;
       while(1) {
        $71 = $$01$i$i * 16.0;
        $72 = $73 & 2;
        $74 = ($72<<24>>24)==(0);
        $75 = (($76) + -48)|0;
        $77 = $76 | 32;
        $78 = (($77) + -87)|0;
        $$0$i$i$i = $74 ? $78 : $75;
        $79 = (+($$0$i$i$i|0));
        $80 = $71 + $79;
        $81 = (($82) + 1)|0;
        $83 = ((($84)) + 1|0);
        $85 = HEAP8[$83>>0]|0;
        $86 = $85&255;
        $87 = (($86) + 1)|0;
        $88 = (8085 + ($87)|0);
        $89 = HEAP8[$88>>0]|0;
        $90 = $89 & 16;
        $91 = ($90<<24>>24)==(0);
        if ($91) {
         $$in12$i = $83;$94 = $81;$r$0$i = $80;
         break;
        } else {
         $$01$i$i = $80;$73 = $89;$76 = $86;$82 = $81;$84 = $83;
        }
       }
      }
     } else {
      $$in12$i = $$in$i;$94 = 0;$r$0$i = $$0$lcssa$i8$i;
     }
     $92 = $$in12$i;
     $93 = $94 | $95;
     $96 = ($93|0)==(0);
     if (!($96)) {
      $97 = Math_imul($94, -4)|0;
      HEAP32[$endptr>>2] = $92;
      $98 = HEAP8[$$in12$i>>0]|0;
      switch ($98<<24>>24) {
      case 80: case 112:  {
       $99 = ((($$in12$i)) + 1|0);
       $100 = HEAP8[$99>>0]|0;
       switch ($100<<24>>24) {
       case 45:  {
        $101 = ((($$in12$i)) + 2|0);
        $$0$i2$i = 1;$$in10$i = $101;
        break;
       }
       case 43:  {
        $102 = ((($$in12$i)) + 2|0);
        $$0$i2$i = 0;$$in10$i = $102;
        break;
       }
       default: {
        $$0$i2$i = 0;$$in10$i = $99;
       }
       }
       $103 = HEAP8[$$in10$i>>0]|0;
       $104 = $103&255;
       $105 = (($104) + 1)|0;
       $106 = (8085 + ($105)|0);
       $107 = HEAP8[$106>>0]|0;
       $108 = $107 & 2;
       $109 = ($108<<24>>24)==(0);
       if ($109) {
        $130 = $97;$155 = $$in12$i;
       } else {
        $$in1121$i = $$in10$i;$113 = $103;$exp1$022$i = 0;
        while(1) {
         $110 = ($exp1$022$i*10)|0;
         $111 = ((($$in1121$i)) + 1|0);
         $112 = $113 << 24 >> 24;
         $114 = (($112) + -48)|0;
         $115 = (($114) + ($110))|0;
         $116 = HEAP8[$111>>0]|0;
         $117 = $116&255;
         $118 = (($117) + 1)|0;
         $119 = (8085 + ($118)|0);
         $120 = HEAP8[$119>>0]|0;
         $121 = $120 & 2;
         $122 = ($121<<24>>24)==(0);
         if ($122) {
          $$lcssa62 = $111;$$lcssa63 = $115;
          break;
         } else {
          $$in1121$i = $111;$113 = $116;$exp1$022$i = $115;
         }
        }
        $phitmp$i = $$lcssa62;
        $123 = ($$0$i2$i|0)==(0);
        $124 = (0 - ($$lcssa63))|0;
        $exp1$0$$i = $123 ? $$lcssa63 : $124;
        $125 = (($exp1$0$$i) + ($97))|0;
        $126 = $phitmp$i;$154 = $125;
        label = 24;
       }
       break;
      }
      default: {
       $126 = $92;$154 = $97;
       label = 24;
      }
      }
      if ((label|0) == 24) {
       HEAP32[$endptr>>2] = $126;
       $127 = $126;
       $130 = $154;$155 = $127;
      }
      $128 = ($$0$i$i|0)==(0);
      $129 = -$r$0$i;
      $r$0$$i = $128 ? $r$0$i : $129;
      $131 = (+_ldexp($r$0$$i,$130));
      $134 = $155;$storemerge = $131;
      break L4;
     }
    }
   } while(0);
   HEAPF64[$result>>3] = 0.0;
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 HEAPF64[$result>>3] = $storemerge;
 $133 = ($134|0)==($s|0);
 if ($133) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $135 = HEAP8[$134>>0]|0;
 $136 = $135&255;
 $137 = (($136) + 1)|0;
 $138 = (8085 + ($137)|0);
 $139 = HEAP8[$138>>0]|0;
 $140 = $139 & 8;
 $141 = ($140<<24>>24)==(0);
 if ($141) {
  $$lcssa = $134;
 } else {
  $143 = $134;
  while(1) {
   $142 = ((($143)) + 1|0);
   $144 = HEAP8[$142>>0]|0;
   $145 = $144&255;
   $146 = (($145) + 1)|0;
   $147 = (8085 + ($146)|0);
   $148 = HEAP8[$147>>0]|0;
   $149 = $148 & 8;
   $150 = ($149<<24>>24)==(0);
   if ($150) {
    $$lcssa61 = $142;
    break;
   } else {
    $143 = $142;
   }
  }
  HEAP32[$endptr>>2] = $$lcssa61;
  $$lcssa = $$lcssa61;
 }
 $151 = (($s) + ($len)|0);
 $152 = ($$lcssa|0)==($151|0);
 $153 = $152&1;
 $$0 = $153;
 STACKTOP = sp;return ($$0|0);
}
function _luaO_pushvfstring($L,$fmt,$argp) {
 $L = $L|0;
 $fmt = $fmt|0;
 $argp = $argp|0;
 var $$ = 0, $$0$lcssa = 0, $$08 = 0, $$lcssa = 0, $$lcssa4 = 0, $$pre = 0, $$pre16 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0;
 var $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0;
 var $128 = 0, $129 = 0, $13 = 0, $130 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0.0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0.0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $arglist_current = 0, $arglist_current11 = 0;
 var $arglist_current2 = 0, $arglist_current5 = 0, $arglist_current8 = 0, $arglist_next = 0, $arglist_next12 = 0, $arglist_next3 = 0, $arglist_next6 = 0, $arglist_next9 = 0, $buff = 0, $buff2 = 0, $expanded = 0, $expanded16 = 0, $expanded18 = 0, $expanded19 = 0, $expanded20 = 0, $expanded22 = 0, $expanded23 = 0, $expanded25 = 0, $expanded26 = 0, $expanded27 = 0;
 var $expanded29 = 0, $expanded30 = 0, $expanded32 = 0, $expanded33 = 0, $expanded34 = 0, $expanded36 = 0, $expanded37 = 0, $expanded39 = 0, $expanded40 = 0, $expanded41 = 0, $expanded43 = 0, $expanded44 = 0, $expanded46 = 0, $expanded47 = 0, $expanded48 = 0, $n$0$lcssa = 0, $n$07 = 0, $vararg_buffer = 0, $vararg_buffer13 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer13 = sp + 8|0;
 $vararg_buffer = sp;
 $buff = sp + 40|0;
 $buff2 = sp + 16|0;
 $0 = (_strchr($fmt,37)|0);
 $1 = ($0|0)==(0|0);
 $2 = ((($L)) + 24|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($L)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $3;
 $7 = $5;
 $8 = (($6) - ($7))|0;
 L1: do {
  if ($1) {
   $$0$lcssa = $fmt;$$lcssa4 = $8;$129 = $5;$n$0$lcssa = 0;
  } else {
   $$08 = $fmt;$10 = $8;$12 = $0;$130 = $5;$n$07 = 0;
   L3: while(1) {
    $9 = ($10|0)<(48);
    if ($9) {
     _luaD_growstack($L,2);
     $$pre = HEAP32[$4>>2]|0;
     $16 = $$pre;
    } else {
     $16 = $130;
    }
    $11 = $12;
    $13 = $$08;
    $14 = (($11) - ($13))|0;
    $15 = ((($16)) + 16|0);
    HEAP32[$4>>2] = $15;
    $17 = (_luaS_newlstr($L,$$08,$14)|0);
    HEAP32[$16>>2] = $17;
    $18 = ((($17)) + 4|0);
    $19 = HEAP8[$18>>0]|0;
    $20 = $19&255;
    $21 = $20 | 64;
    $22 = ((($16)) + 8|0);
    HEAP32[$22>>2] = $21;
    $23 = ((($12)) + 1|0);
    $24 = HEAP8[$23>>0]|0;
    $25 = $24 << 24 >> 24;
    switch ($25|0) {
    case 115:  {
     $arglist_current = HEAP32[$argp>>2]|0;
     $26 = $arglist_current;
     $27 = ((0) + 4|0);
     $expanded16 = $27;
     $expanded = (($expanded16) - 1)|0;
     $28 = (($26) + ($expanded))|0;
     $29 = ((0) + 4|0);
     $expanded20 = $29;
     $expanded19 = (($expanded20) - 1)|0;
     $expanded18 = $expanded19 ^ -1;
     $30 = $28 & $expanded18;
     $31 = $30;
     $32 = HEAP32[$31>>2]|0;
     $arglist_next = ((($31)) + 4|0);
     HEAP32[$argp>>2] = $arglist_next;
     $33 = ($32|0)==(0|0);
     $$ = $33 ? 20710 : $32;
     $34 = (_strlen($$)|0);
     $35 = HEAP32[$4>>2]|0;
     $36 = ((($35)) + 16|0);
     HEAP32[$4>>2] = $36;
     $37 = (_luaS_newlstr($L,$$,$34)|0);
     HEAP32[$35>>2] = $37;
     $38 = ((($37)) + 4|0);
     $39 = HEAP8[$38>>0]|0;
     $40 = $39&255;
     $41 = $40 | 64;
     $42 = ((($35)) + 8|0);
     HEAP32[$42>>2] = $41;
     break;
    }
    case 99:  {
     $arglist_current2 = HEAP32[$argp>>2]|0;
     $43 = $arglist_current2;
     $44 = ((0) + 4|0);
     $expanded23 = $44;
     $expanded22 = (($expanded23) - 1)|0;
     $45 = (($43) + ($expanded22))|0;
     $46 = ((0) + 4|0);
     $expanded27 = $46;
     $expanded26 = (($expanded27) - 1)|0;
     $expanded25 = $expanded26 ^ -1;
     $47 = $45 & $expanded25;
     $48 = $47;
     $49 = HEAP32[$48>>2]|0;
     $arglist_next3 = ((($48)) + 4|0);
     HEAP32[$argp>>2] = $arglist_next3;
     $50 = $49&255;
     HEAP8[$buff>>0] = $50;
     $51 = HEAP32[$4>>2]|0;
     $52 = ((($51)) + 16|0);
     HEAP32[$4>>2] = $52;
     $53 = (_luaS_newlstr($L,$buff,1)|0);
     HEAP32[$51>>2] = $53;
     $54 = ((($53)) + 4|0);
     $55 = HEAP8[$54>>0]|0;
     $56 = $55&255;
     $57 = $56 | 64;
     $58 = ((($51)) + 8|0);
     HEAP32[$58>>2] = $57;
     break;
    }
    case 100:  {
     $59 = HEAP32[$4>>2]|0;
     $60 = ((($59)) + 16|0);
     HEAP32[$4>>2] = $60;
     $arglist_current5 = HEAP32[$argp>>2]|0;
     $61 = $arglist_current5;
     $62 = ((0) + 4|0);
     $expanded30 = $62;
     $expanded29 = (($expanded30) - 1)|0;
     $63 = (($61) + ($expanded29))|0;
     $64 = ((0) + 4|0);
     $expanded34 = $64;
     $expanded33 = (($expanded34) - 1)|0;
     $expanded32 = $expanded33 ^ -1;
     $65 = $63 & $expanded32;
     $66 = $65;
     $67 = HEAP32[$66>>2]|0;
     $arglist_next6 = ((($66)) + 4|0);
     HEAP32[$argp>>2] = $arglist_next6;
     $68 = (+($67|0));
     HEAPF64[$59>>3] = $68;
     $69 = ((($59)) + 8|0);
     HEAP32[$69>>2] = 3;
     break;
    }
    case 102:  {
     $70 = HEAP32[$4>>2]|0;
     $71 = ((($70)) + 16|0);
     HEAP32[$4>>2] = $71;
     $arglist_current8 = HEAP32[$argp>>2]|0;
     $72 = $arglist_current8;
     $73 = ((0) + 8|0);
     $expanded37 = $73;
     $expanded36 = (($expanded37) - 1)|0;
     $74 = (($72) + ($expanded36))|0;
     $75 = ((0) + 8|0);
     $expanded41 = $75;
     $expanded40 = (($expanded41) - 1)|0;
     $expanded39 = $expanded40 ^ -1;
     $76 = $74 & $expanded39;
     $77 = $76;
     $78 = +HEAPF64[$77>>3];
     $arglist_next9 = ((($77)) + 8|0);
     HEAP32[$argp>>2] = $arglist_next9;
     HEAPF64[$70>>3] = $78;
     $79 = ((($70)) + 8|0);
     HEAP32[$79>>2] = 3;
     break;
    }
    case 112:  {
     $arglist_current11 = HEAP32[$argp>>2]|0;
     $80 = $arglist_current11;
     $81 = ((0) + 4|0);
     $expanded44 = $81;
     $expanded43 = (($expanded44) - 1)|0;
     $82 = (($80) + ($expanded43))|0;
     $83 = ((0) + 4|0);
     $expanded48 = $83;
     $expanded47 = (($expanded48) - 1)|0;
     $expanded46 = $expanded47 ^ -1;
     $84 = $82 & $expanded46;
     $85 = $84;
     $86 = HEAP32[$85>>2]|0;
     $arglist_next12 = ((($85)) + 4|0);
     HEAP32[$argp>>2] = $arglist_next12;
     HEAP32[$vararg_buffer>>2] = $86;
     $87 = (_sprintf($buff2,6095,$vararg_buffer)|0);
     $88 = HEAP32[$4>>2]|0;
     $89 = ((($88)) + 16|0);
     HEAP32[$4>>2] = $89;
     $90 = (_luaS_newlstr($L,$buff2,$87)|0);
     HEAP32[$88>>2] = $90;
     $91 = ((($90)) + 4|0);
     $92 = HEAP8[$91>>0]|0;
     $93 = $92&255;
     $94 = $93 | 64;
     $95 = ((($88)) + 8|0);
     HEAP32[$95>>2] = $94;
     break;
    }
    case 37:  {
     $96 = HEAP32[$4>>2]|0;
     $97 = ((($96)) + 16|0);
     HEAP32[$4>>2] = $97;
     $98 = (_luaS_newlstr($L,6098,1)|0);
     HEAP32[$96>>2] = $98;
     $99 = ((($98)) + 4|0);
     $100 = HEAP8[$99>>0]|0;
     $101 = $100&255;
     $102 = $101 | 64;
     $103 = ((($96)) + 8|0);
     HEAP32[$103>>2] = $102;
     break;
    }
    default: {
     $$lcssa = $25;
     break L3;
    }
    }
    $104 = (($n$07) + 2)|0;
    $105 = ((($12)) + 2|0);
    $106 = (_strchr($105,37)|0);
    $107 = ($106|0)==(0|0);
    $108 = HEAP32[$2>>2]|0;
    $109 = HEAP32[$4>>2]|0;
    $110 = $108;
    $111 = $109;
    $112 = (($110) - ($111))|0;
    if ($107) {
     $$0$lcssa = $105;$$lcssa4 = $112;$129 = $109;$n$0$lcssa = $104;
     break L1;
    } else {
     $$08 = $105;$10 = $112;$12 = $106;$130 = $109;$n$07 = $104;
    }
   }
   HEAP32[$vararg_buffer13>>2] = $$lcssa;
   _luaG_runerror($L,6100,$vararg_buffer13);
   // unreachable;
  }
 } while(0);
 $113 = ($$lcssa4|0)<(32);
 if ($113) {
  _luaD_growstack($L,1);
  $$pre16 = HEAP32[$4>>2]|0;
  $116 = $$pre16;
 } else {
  $116 = $129;
 }
 $114 = (_strlen($$0$lcssa)|0);
 $115 = ((($116)) + 16|0);
 HEAP32[$4>>2] = $115;
 $117 = (_luaS_newlstr($L,$$0$lcssa,$114)|0);
 HEAP32[$116>>2] = $117;
 $118 = ((($117)) + 4|0);
 $119 = HEAP8[$118>>0]|0;
 $120 = $119&255;
 $121 = $120 | 64;
 $122 = ((($116)) + 8|0);
 HEAP32[$122>>2] = $121;
 $123 = ($n$0$lcssa|0)>(0);
 if (!($123)) {
  $125 = HEAP32[$4>>2]|0;
  $126 = ((($125)) + -16|0);
  $127 = HEAP32[$126>>2]|0;
  $128 = ((($127)) + 16|0);
  STACKTOP = sp;return ($128|0);
 }
 $124 = $n$0$lcssa | 1;
 _luaV_concat($L,$124);
 $125 = HEAP32[$4>>2]|0;
 $126 = ((($125)) + -16|0);
 $127 = HEAP32[$126>>2]|0;
 $128 = ((($127)) + 16|0);
 STACKTOP = sp;return ($128|0);
}
function _luaO_pushfstring($L,$fmt,$varargs) {
 $L = $L|0;
 $fmt = $fmt|0;
 $varargs = $varargs|0;
 var $0 = 0, $argp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $argp = sp;
 HEAP32[$argp>>2] = $varargs;
 $0 = (_luaO_pushvfstring($L,$fmt,$argp)|0);
 STACKTOP = sp;return ($0|0);
}
function _luaO_chunkid($out,$source,$bufflen) {
 $out = $out|0;
 $source = $source|0;
 $bufflen = $bufflen|0;
 var $$0 = 0, $$l$0 = 0, $$sum = 0, $$sum2 = 0, $$sum3 = 0, $$sum3$pn = 0, $$sum5 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $l$0 = 0, $or$cond = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 $0 = (_strlen($source)|0);
 $1 = HEAP8[$source>>0]|0;
 switch ($1<<24>>24) {
 case 61:  {
  $2 = ($0>>>0)>($bufflen>>>0);
  $3 = ((($source)) + 1|0);
  if ($2) {
   $4 = (($bufflen) + -1)|0;
   _memcpy(($out|0),($3|0),($4|0))|0;
   $5 = (($out) + ($4)|0);
   HEAP8[$5>>0] = 0;
   return;
  } else {
   _memcpy(($out|0),($3|0),($0|0))|0;
   return;
  }
  break;
 }
 case 64:  {
  $6 = ($0>>>0)>($bufflen>>>0);
  if ($6) {
   ;HEAP8[$out>>0]=HEAP8[8741>>0]|0;HEAP8[$out+1>>0]=HEAP8[8741+1>>0]|0;HEAP8[$out+2>>0]=HEAP8[8741+2>>0]|0;
   $8 = ((($out)) + 3|0);
   $9 = (($bufflen) + -3)|0;
   $10 = (4 - ($bufflen))|0;
   $$sum5 = (($10) + ($0))|0;
   $11 = (($source) + ($$sum5)|0);
   _memcpy(($8|0),($11|0),($9|0))|0;
   return;
  } else {
   $7 = ((($source)) + 1|0);
   _memcpy(($out|0),($7|0),($0|0))|0;
   return;
  }
  break;
 }
 default: {
  $12 = (_strchr($source,10)|0);
  dest=$out; src=6143; stop=dest+9|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
  $13 = ((($out)) + 9|0);
  $14 = (($bufflen) + -15)|0;
  $15 = ($0>>>0)<($14>>>0);
  $16 = ($12|0)==(0|0);
  $or$cond = $15 & $16;
  if ($or$cond) {
   _memcpy(($13|0),($source|0),($0|0))|0;
   $$sum3 = (($0) + 9)|0;
   $$sum3$pn = $$sum3;
  } else {
   $17 = $12;
   $18 = $source;
   $19 = (($17) - ($18))|0;
   $l$0 = $16 ? $0 : $19;
   $20 = ($l$0>>>0)>($14>>>0);
   $$l$0 = $20 ? $14 : $l$0;
   _memcpy(($13|0),($source|0),($$l$0|0))|0;
   $$sum = (($$l$0) + 9)|0;
   $21 = (($out) + ($$sum)|0);
   ;HEAP8[$21>>0]=HEAP8[8741>>0]|0;HEAP8[$21+1>>0]=HEAP8[8741+1>>0]|0;HEAP8[$21+2>>0]=HEAP8[8741+2>>0]|0;
   $$sum2 = (($$l$0) + 12)|0;
   $$sum3$pn = $$sum2;
  }
  $$0 = (($out) + ($$sum3$pn)|0);
  ;HEAP8[$$0>>0]=HEAP8[6153>>0]|0;HEAP8[$$0+1>>0]=HEAP8[6153+1>>0]|0;HEAP8[$$0+2>>0]=HEAP8[6153+2>>0]|0;
  return;
 }
 }
}
function _luaY_parser($L,$z,$buff,$dyd,$name,$firstchar) {
 $L = $L|0;
 $z = $z|0;
 $buff = $buff|0;
 $dyd = $dyd|0;
 $name = $name|0;
 $firstchar = $firstchar|0;
 var $$pr$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $9 = 0, $bl$i = 0, $funcstate = 0, $lexstate = 0, $ls$idx$val$i$i = 0, $v$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $bl$i = sp + 156|0;
 $v$i = sp + 80|0;
 $lexstate = sp;
 $funcstate = sp + 104|0;
 $0 = (_luaF_newLclosure($L,1)|0);
 $1 = ((($L)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 HEAP32[$2>>2] = $0;
 $3 = ((($2)) + 8|0);
 HEAP32[$3>>2] = 70;
 $4 = HEAP32[$1>>2]|0;
 $5 = ((($4)) + 16|0);
 HEAP32[$1>>2] = $5;
 $6 = ((($L)) + 24|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $7;
 $9 = $5;
 $10 = (($8) - ($9))|0;
 $11 = ($10|0)<(16);
 if ($11) {
  _luaD_growstack($L,0);
 }
 $12 = (_luaF_newproto($L)|0);
 $13 = ((($0)) + 12|0);
 HEAP32[$13>>2] = $12;
 HEAP32[$funcstate>>2] = $12;
 $14 = (_luaS_new($L,$name)|0);
 $15 = ((($12)) + 36|0);
 HEAP32[$15>>2] = $14;
 $16 = ((($lexstate)) + 60|0);
 HEAP32[$16>>2] = $buff;
 $17 = ((($lexstate)) + 64|0);
 HEAP32[$17>>2] = $dyd;
 $18 = ((($dyd)) + 28|0);
 HEAP32[$18>>2] = 0;
 $19 = ((($dyd)) + 16|0);
 HEAP32[$19>>2] = 0;
 $20 = ((($dyd)) + 4|0);
 HEAP32[$20>>2] = 0;
 _luaX_setinput($L,$lexstate,$z,$14,$firstchar);
 $21 = ((($lexstate)) + 52|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = ((($lexstate)) + 48|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = ((($funcstate)) + 8|0);
 HEAP32[$25>>2] = $24;
 $26 = ((($funcstate)) + 12|0);
 HEAP32[$26>>2] = $lexstate;
 HEAP32[$23>>2] = $funcstate;
 $27 = ((($funcstate)) + 20|0);
 HEAP32[$27>>2] = 0;
 $28 = ((($funcstate)) + 24|0);
 HEAP32[$28>>2] = 0;
 $29 = ((($funcstate)) + 28|0);
 HEAP32[$29>>2] = -1;
 $30 = ((($funcstate)) + 32|0);
 HEAP32[$30>>2] = 0;
 $31 = ((($funcstate)) + 36|0);
 HEAP32[$31>>2] = 0;
 $32 = ((($funcstate)) + 44|0);
 ;HEAP32[$32>>2]=0|0;HEAP8[$32+4>>0]=0|0;
 $33 = HEAP32[$17>>2]|0;
 $34 = ((($33)) + 4|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = ((($funcstate)) + 40|0);
 HEAP32[$36>>2] = $35;
 $37 = ((($funcstate)) + 16|0);
 HEAP32[$37>>2] = 0;
 $38 = ((($lexstate)) + 68|0);
 $39 = HEAP32[$38>>2]|0;
 HEAP32[$15>>2] = $39;
 $40 = ((($12)) + 78|0);
 HEAP8[$40>>0] = 2;
 $41 = (_luaH_new($22)|0);
 $42 = ((($funcstate)) + 4|0);
 HEAP32[$42>>2] = $41;
 $43 = ((($22)) + 8|0);
 $44 = HEAP32[$43>>2]|0;
 HEAP32[$44>>2] = $41;
 $45 = ((($44)) + 8|0);
 HEAP32[$45>>2] = 69;
 $46 = HEAP32[$43>>2]|0;
 $47 = ((($46)) + 16|0);
 HEAP32[$43>>2] = $47;
 $48 = ((($22)) + 24|0);
 $49 = HEAP32[$48>>2]|0;
 $50 = $49;
 $51 = $47;
 $52 = (($50) - ($51))|0;
 $53 = ($52|0)<(16);
 if ($53) {
  _luaD_growstack($22,0);
 }
 $54 = ((($bl$i)) + 10|0);
 HEAP8[$54>>0] = 0;
 $55 = ((($funcstate)) + 46|0);
 $56 = HEAP8[$55>>0]|0;
 $57 = ((($bl$i)) + 8|0);
 HEAP8[$57>>0] = $56;
 $58 = HEAP32[$26>>2]|0;
 $59 = ((($58)) + 64|0);
 $60 = HEAP32[$59>>2]|0;
 $61 = ((($60)) + 28|0);
 $62 = HEAP32[$61>>2]|0;
 $63 = $62&65535;
 $64 = ((($bl$i)) + 4|0);
 HEAP16[$64>>1] = $63;
 $65 = ((($60)) + 16|0);
 $66 = HEAP32[$65>>2]|0;
 $67 = $66&65535;
 $68 = ((($bl$i)) + 6|0);
 HEAP16[$68>>1] = $67;
 $69 = ((($bl$i)) + 9|0);
 HEAP8[$69>>0] = 0;
 $70 = HEAP32[$37>>2]|0;
 HEAP32[$bl$i>>2] = $70;
 HEAP32[$37>>2] = $bl$i;
 $71 = HEAP32[$funcstate>>2]|0;
 $72 = ((($71)) + 77|0);
 HEAP8[$72>>0] = 1;
 $73 = ((($v$i)) + 16|0);
 HEAP32[$73>>2] = -1;
 $74 = ((($v$i)) + 20|0);
 HEAP32[$74>>2] = -1;
 HEAP32[$v$i>>2] = 7;
 $75 = ((($v$i)) + 8|0);
 HEAP32[$75>>2] = 0;
 $76 = ((($lexstate)) + 72|0);
 $77 = HEAP32[$76>>2]|0;
 (_newupvalue($funcstate,$77,$v$i)|0);
 _luaX_next($lexstate);
 $78 = ((($lexstate)) + 16|0);
 L7: while(1) {
  $ls$idx$val$i$i = HEAP32[$78>>2]|0;
  switch ($ls$idx$val$i$i|0) {
  case 277: case 286: case 262: case 261: case 260:  {
   $81 = $ls$idx$val$i$i;
   break L7;
   break;
  }
  default: {
  }
  }
  $79 = ($ls$idx$val$i$i|0)==(274);
  _statement($lexstate);
  if ($79) {
   label = 8;
   break;
  }
 }
 if ((label|0) == 8) {
  $$pr$i = HEAP32[$78>>2]|0;
  $81 = $$pr$i;
 }
 $80 = ($81|0)==(286);
 if ($80) {
  _close_func($lexstate);
  STACKTOP = sp;return ($0|0);
 } else {
  _error_expected($lexstate,286);
  // unreachable;
 }
 return (0)|0;
}
function _newupvalue($fs,$name,$v) {
 $fs = $fs|0;
 $name = $name|0;
 $v = $v|0;
 var $$pre = 0, $$pre3 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $oldsize$01 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_ptr4 = 0, $vararg_ptr5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = HEAP32[$fs>>2]|0;
 $1 = ((($0)) + 40|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($fs)) + 47|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = $4&255;
 $6 = (($5) + 1)|0;
 $7 = ($6>>>0)>(255);
 if ($7) {
  $8 = ((($fs)) + 12|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ((($9)) + 52|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ((($0)) + 64|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($13|0)==(0);
  if ($14) {
   $16 = 6375;
   HEAP32[$vararg_buffer1>>2] = 6814;
   $vararg_ptr4 = ((($vararg_buffer1)) + 4|0);
   HEAP32[$vararg_ptr4>>2] = 255;
   $vararg_ptr5 = ((($vararg_buffer1)) + 8|0);
   HEAP32[$vararg_ptr5>>2] = $16;
   $17 = (_luaO_pushfstring($11,6389,$vararg_buffer1)|0);
   $18 = HEAP32[$8>>2]|0;
   _luaX_syntaxerror($18,$17);
   // unreachable;
  }
  HEAP32[$vararg_buffer>>2] = $13;
  $15 = (_luaO_pushfstring($11,6355,$vararg_buffer)|0);
  $16 = $15;
  HEAP32[$vararg_buffer1>>2] = 6814;
  $vararg_ptr4 = ((($vararg_buffer1)) + 4|0);
  HEAP32[$vararg_ptr4>>2] = 255;
  $vararg_ptr5 = ((($vararg_buffer1)) + 8|0);
  HEAP32[$vararg_ptr5>>2] = $16;
  $17 = (_luaO_pushfstring($11,6389,$vararg_buffer1)|0);
  $18 = HEAP32[$8>>2]|0;
  _luaX_syntaxerror($18,$17);
  // unreachable;
 }
 $19 = ($5|0)<($2|0);
 if ($19) {
  $28 = $2;
 } else {
  $20 = ((($fs)) + 12|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = ((($21)) + 52|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = ((($0)) + 28|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = (_luaM_growaux_($23,$25,$1,8,255,6814)|0);
  HEAP32[$24>>2] = $26;
  $$pre = HEAP32[$1>>2]|0;
  $28 = $$pre;
 }
 $27 = ($2|0)<($28|0);
 $29 = ((($0)) + 28|0);
 $30 = HEAP32[$29>>2]|0;
 if ($27) {
  $oldsize$01 = $2;
  while(1) {
   $31 = (($oldsize$01) + 1)|0;
   $32 = (($30) + ($oldsize$01<<3)|0);
   HEAP32[$32>>2] = 0;
   $33 = ($31|0)<($28|0);
   if ($33) {
    $oldsize$01 = $31;
   } else {
    break;
   }
  }
 }
 $34 = HEAP32[$v>>2]|0;
 $35 = ($34|0)==(7);
 $36 = $35&1;
 $37 = HEAP8[$3>>0]|0;
 $38 = $37&255;
 $39 = (((($30) + ($38<<3)|0)) + 4|0);
 HEAP8[$39>>0] = $36;
 $40 = ((($v)) + 8|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = $41&255;
 $43 = (((($30) + ($38<<3)|0)) + 5|0);
 HEAP8[$43>>0] = $42;
 $44 = (($30) + ($38<<3)|0);
 HEAP32[$44>>2] = $name;
 $45 = ((($name)) + 5|0);
 $46 = HEAP8[$45>>0]|0;
 $47 = $46 & 3;
 $48 = ($47<<24>>24)==(0);
 if ($48) {
  $58 = $37;
  $57 = (($58) + 1)<<24>>24;
  HEAP8[$3>>0] = $57;
  $59 = $58&255;
  STACKTOP = sp;return ($59|0);
 }
 $49 = ((($0)) + 5|0);
 $50 = HEAP8[$49>>0]|0;
 $51 = $50 & 4;
 $52 = ($51<<24>>24)==(0);
 if ($52) {
  $58 = $37;
  $57 = (($58) + 1)<<24>>24;
  HEAP8[$3>>0] = $57;
  $59 = $58&255;
  STACKTOP = sp;return ($59|0);
 }
 $53 = ((($fs)) + 12|0);
 $54 = HEAP32[$53>>2]|0;
 $55 = ((($54)) + 52|0);
 $56 = HEAP32[$55>>2]|0;
 _luaC_barrier_($56,$0,$name);
 $$pre3 = HEAP8[$3>>0]|0;
 $58 = $$pre3;
 $57 = (($58) + 1)<<24>>24;
 HEAP8[$3>>0] = $57;
 $59 = $58&255;
 STACKTOP = sp;return ($59|0);
}
function _statement($ls) {
 $ls = $ls|0;
 var $$$i$i = 0, $$$i$i$i = 0, $$01$i$i42 = 0, $$idx$val$i = 0, $$idx$val$i$i = 0, $$idx$val$i$i31 = 0, $$idx$val$idx$i = 0, $$idx$val$idx$i$i = 0, $$idx$val$idx$i$i36 = 0, $$idx$val$idx$val$i = 0, $$idx$val$idx$val$i$i = 0, $$idx$val$idx$val$i$i37 = 0, $$idx1$i = 0, $$idx1$i$i = 0, $$idx1$i$i32 = 0, $$idx1$val$i = 0, $$idx1$val$i$i = 0, $$idx1$val$i$i33 = 0, $$idx1$val$idx$i = 0, $$idx1$val$idx$i$i = 0;
 var $$idx1$val$idx$i$i38 = 0, $$idx1$val$idx$val$i = 0, $$idx1$val$idx$val$i$i = 0, $$idx1$val$idx$val$i$i39 = 0, $$idx1$val$idx$val$idx$val$i = 0, $$idx1$val$idx$val$idx$val$i$i = 0, $$idx1$val$idx$val$idx$val$i$i41 = 0, $$idx2$i = 0, $$idx2$i$i = 0, $$idx2$i$i34 = 0, $$idx2$val$i = 0, $$idx2$val$i$i = 0, $$idx2$val$i$i35 = 0, $$lcssa157 = 0, $$lcssa160 = 0, $$lcssa161 = 0, $$pre = 0, $$pre$i = 0, $$pre$i$i = 0, $$pre1$i = 0;
 var $$pre1$i$i = 0, $$pre108 = 0, $$pre109 = 0, $$pre110 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
 var $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0;
 var $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0;
 var $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0;
 var $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0;
 var $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0;
 var $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0;
 var $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0;
 var $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0;
 var $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0;
 var $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0;
 var $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0;
 var $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0;
 var $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0;
 var $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0;
 var $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0;
 var $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0;
 var $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0;
 var $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0;
 var $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0;
 var $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0;
 var $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $b$i = 0, $b$i21 = 0, $bl$i = 0, $bl$i$i = 0, $bl$i$i2 = 0, $bl$i8 = 0, $bl$i9 = 0, $bl1$i = 0, $bl2$i = 0, $e$i = 0, $e$i$i = 0, $e$i48 = 0, $e$i71 = 0;
 var $e$i72 = 0, $e$i73 = 0, $escapelist$i = 0, $first$0$i = 0, $i$0$ph1$i$i = 0, $i$02$i$i = 0, $i$02$i$i$lcssa = 0, $ismethod$0$i$i = 0, $key$i$i$i = 0, $label$0$i = 0, $ls$idx = 0, $ls$idx$val = 0, $ls$idx$val$i = 0, $ls$idx$val$i$i = 0, $ls$idx$val$i$i$i = 0, $ls$idx$val$i$i$i20 = 0, $ls$idx$val$i$i$i4 = 0, $ls$idx$val$i$i12 = 0, $ls$idx$val$i$i15 = 0, $ls$idx$val$i29 = 0;
 var $ls$idx$val$i50 = 0, $ls$idx1 = 0, $ls$idx1$val = 0, $ls$idx1$val$i = 0, $ls$idx1$val$i112 = 0, $ls$idx1$val$i113 = 0, $n$0$i$i$lcssa = 0, $n$0$i$i53$lcssa = 0, $n$0$i$i5396 = 0, $n$0$i$i90 = 0, $n$0$i$lcssa = 0, $n$0$i86 = 0, $nret$0$i = 0, $nvars$0$i$i$lcssa = 0, $nvars$0$i$i87 = 0, $nvars$0$i$i87$lcssa156 = 0, $nvars$0$i94 = 0, $or$cond$i = 0, $phitmp = 0, $switch$i = 0;
 var $v$i = 0, $v$i$i = 0, $v$i$i13 = 0, $v$i59 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer11 = 0, $vararg_buffer16 = 0, $vararg_buffer21 = 0, $vararg_buffer26 = 0, $vararg_buffer31 = 0, $vararg_buffer6 = 0, $vararg_ptr10 = 0, $vararg_ptr14 = 0, $vararg_ptr15 = 0, $vararg_ptr19 = 0, $vararg_ptr20 = 0, $vararg_ptr24 = 0, $vararg_ptr25 = 0, $vararg_ptr29 = 0;
 var $vararg_ptr30 = 0, $vararg_ptr34 = 0, $vararg_ptr4 = 0, $vararg_ptr5 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 528|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer31 = sp + 424|0;
 $vararg_buffer26 = sp + 408|0;
 $vararg_buffer21 = sp + 392|0;
 $vararg_buffer16 = sp + 376|0;
 $vararg_buffer11 = sp + 360|0;
 $vararg_buffer6 = sp + 344|0;
 $vararg_buffer1 = sp + 328|0;
 $vararg_buffer = sp + 320|0;
 $e$i73 = sp + 296|0;
 $e$i72 = sp + 272|0;
 $e$i71 = sp + 248|0;
 $v$i59 = sp + 216|0;
 $e$i48 = sp + 192|0;
 $e$i = sp + 168|0;
 $b$i21 = sp + 144|0;
 $key$i$i$i = sp + 120|0;
 $v$i = sp + 96|0;
 $b$i = sp + 72|0;
 $v$i$i13 = sp + 48|0;
 $bl1$i = sp + 508|0;
 $bl2$i = sp + 496|0;
 $e$i$i = sp + 24|0;
 $bl$i9 = sp + 484|0;
 $bl$i8 = sp + 472|0;
 $v$i$i = sp;
 $bl$i$i2 = sp + 460|0;
 $bl$i = sp + 448|0;
 $bl$i$i = sp + 436|0;
 $escapelist$i = sp + 432|0;
 $0 = ((($ls)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $ls$idx = ((($ls)) + 48|0);
 $ls$idx$val = HEAP32[$ls$idx>>2]|0;
 $ls$idx1 = ((($ls)) + 52|0);
 $ls$idx1$val = HEAP32[$ls$idx1>>2]|0;
 $2 = ((($ls$idx1$val)) + 38|0);
 $3 = HEAP16[$2>>1]|0;
 $4 = (($3) + 1)<<16>>16;
 HEAP16[$2>>1] = $4;
 $5 = ($4&65535)>(200);
 if ($5) {
  $6 = ((($ls$idx$val)) + 12|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ((($7)) + 52|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = HEAP32[$ls$idx$val>>2]|0;
  $11 = ((($10)) + 64|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ($12|0)==(0);
  if ($13) {
   $15 = 6375;
   HEAP32[$vararg_buffer1>>2] = 6421;
   $vararg_ptr4 = ((($vararg_buffer1)) + 4|0);
   HEAP32[$vararg_ptr4>>2] = 200;
   $vararg_ptr5 = ((($vararg_buffer1)) + 8|0);
   HEAP32[$vararg_ptr5>>2] = $15;
   $16 = (_luaO_pushfstring($9,6389,$vararg_buffer1)|0);
   $17 = HEAP32[$6>>2]|0;
   _luaX_syntaxerror($17,$16);
   // unreachable;
  }
  HEAP32[$vararg_buffer>>2] = $12;
  $14 = (_luaO_pushfstring($9,6355,$vararg_buffer)|0);
  $15 = $14;
  HEAP32[$vararg_buffer1>>2] = 6421;
  $vararg_ptr4 = ((($vararg_buffer1)) + 4|0);
  HEAP32[$vararg_ptr4>>2] = 200;
  $vararg_ptr5 = ((($vararg_buffer1)) + 8|0);
  HEAP32[$vararg_ptr5>>2] = $15;
  $16 = (_luaO_pushfstring($9,6389,$vararg_buffer1)|0);
  $17 = HEAP32[$6>>2]|0;
  _luaX_syntaxerror($17,$16);
  // unreachable;
 }
 $18 = ((($ls)) + 16|0);
 $19 = HEAP32[$18>>2]|0;
 do {
  switch ($19|0) {
  case 59:  {
   _luaX_next($ls);
   $514 = HEAP32[$ls$idx>>2]|0;
   $515 = ((($514)) + 46|0);
   $516 = HEAP8[$515>>0]|0;
   $517 = ((($514)) + 48|0);
   HEAP8[$517>>0] = $516;
   $518 = HEAP32[$ls$idx1>>2]|0;
   $519 = ((($518)) + 38|0);
   $520 = HEAP16[$519>>1]|0;
   $521 = (($520) + -1)<<16>>16;
   HEAP16[$519>>1] = $521;
   STACKTOP = sp;return;
   break;
  }
  case 267:  {
   HEAP32[$escapelist$i>>2] = -1;
   _test_then_block($ls,$escapelist$i);
   L21: while(1) {
    $20 = HEAP32[$18>>2]|0;
    switch ($20|0) {
    case 260:  {
     label = 10;
     break L21;
     break;
    }
    case 261:  {
     break;
    }
    default: {
     $43 = $20;
     break L21;
    }
    }
    _test_then_block($ls,$escapelist$i);
   }
   if ((label|0) == 10) {
    _luaX_next($ls);
    $21 = HEAP32[$ls$idx>>2]|0;
    $22 = ((($bl$i$i)) + 10|0);
    HEAP8[$22>>0] = 0;
    $23 = ((($21)) + 46|0);
    $24 = HEAP8[$23>>0]|0;
    $25 = ((($bl$i$i)) + 8|0);
    HEAP8[$25>>0] = $24;
    $26 = ((($21)) + 12|0);
    $27 = HEAP32[$26>>2]|0;
    $28 = ((($27)) + 64|0);
    $29 = HEAP32[$28>>2]|0;
    $30 = ((($29)) + 28|0);
    $31 = HEAP32[$30>>2]|0;
    $32 = $31&65535;
    $33 = ((($bl$i$i)) + 4|0);
    HEAP16[$33>>1] = $32;
    $34 = ((($29)) + 16|0);
    $35 = HEAP32[$34>>2]|0;
    $36 = $35&65535;
    $37 = ((($bl$i$i)) + 6|0);
    HEAP16[$37>>1] = $36;
    $38 = ((($bl$i$i)) + 9|0);
    HEAP8[$38>>0] = 0;
    $39 = ((($21)) + 16|0);
    $40 = HEAP32[$39>>2]|0;
    HEAP32[$bl$i$i>>2] = $40;
    HEAP32[$39>>2] = $bl$i$i;
    L26: while(1) {
     $ls$idx$val$i$i$i = HEAP32[$18>>2]|0;
     switch ($ls$idx$val$i$i$i|0) {
     case 277: case 286: case 262: case 261: case 260:  {
      break L26;
      break;
     }
     default: {
     }
     }
     $41 = ($ls$idx$val$i$i$i|0)==(274);
     _statement($ls);
     if ($41) {
      break;
     }
    }
    _leaveblock($21);
    $$pre110 = HEAP32[$18>>2]|0;
    $43 = $$pre110;
   }
   $42 = ($43|0)==(262);
   if ($42) {
    _luaX_next($ls);
    $50 = HEAP32[$escapelist$i>>2]|0;
    _luaK_patchtohere($ls$idx$val,$50);
    $514 = HEAP32[$ls$idx>>2]|0;
    $515 = ((($514)) + 46|0);
    $516 = HEAP8[$515>>0]|0;
    $517 = ((($514)) + 48|0);
    HEAP8[$517>>0] = $516;
    $518 = HEAP32[$ls$idx1>>2]|0;
    $519 = ((($518)) + 38|0);
    $520 = HEAP16[$519>>1]|0;
    $521 = (($520) + -1)<<16>>16;
    HEAP16[$519>>1] = $521;
    STACKTOP = sp;return;
   }
   $44 = HEAP32[$0>>2]|0;
   $45 = ($44|0)==($1|0);
   if ($45) {
    _error_expected($ls,262);
    // unreachable;
   } else {
    $46 = HEAP32[$ls$idx1>>2]|0;
    $47 = (_luaX_token2str($ls,262)|0);
    $48 = (_luaX_token2str($ls,267)|0);
    HEAP32[$vararg_buffer6>>2] = $47;
    $vararg_ptr9 = ((($vararg_buffer6)) + 4|0);
    HEAP32[$vararg_ptr9>>2] = $48;
    $vararg_ptr10 = ((($vararg_buffer6)) + 8|0);
    HEAP32[$vararg_ptr10>>2] = $1;
    $49 = (_luaO_pushfstring($46,6430,$vararg_buffer6)|0);
    _luaX_syntaxerror($ls,$49);
    // unreachable;
   }
   break;
  }
  case 278:  {
   _luaX_next($ls);
   $51 = (_luaK_getlabel($ls$idx$val)|0);
   (_subexpr($ls,$v$i$i,0)|0);
   $52 = HEAP32[$v$i$i>>2]|0;
   $53 = ($52|0)==(1);
   if ($53) {
    HEAP32[$v$i$i>>2] = 3;
   }
   $54 = HEAP32[$ls$idx>>2]|0;
   _luaK_goiftrue($54,$v$i$i);
   $55 = ((($v$i$i)) + 20|0);
   $56 = HEAP32[$55>>2]|0;
   $57 = ((($bl$i)) + 10|0);
   HEAP8[$57>>0] = 1;
   $58 = ((($ls$idx$val)) + 46|0);
   $59 = HEAP8[$58>>0]|0;
   $60 = ((($bl$i)) + 8|0);
   HEAP8[$60>>0] = $59;
   $61 = ((($ls$idx$val)) + 12|0);
   $62 = HEAP32[$61>>2]|0;
   $63 = ((($62)) + 64|0);
   $64 = HEAP32[$63>>2]|0;
   $65 = ((($64)) + 28|0);
   $66 = HEAP32[$65>>2]|0;
   $67 = $66&65535;
   $68 = ((($bl$i)) + 4|0);
   HEAP16[$68>>1] = $67;
   $69 = ((($64)) + 16|0);
   $70 = HEAP32[$69>>2]|0;
   $71 = $70&65535;
   $72 = ((($bl$i)) + 6|0);
   HEAP16[$72>>1] = $71;
   $73 = ((($bl$i)) + 9|0);
   HEAP8[$73>>0] = 0;
   $74 = ((($ls$idx$val)) + 16|0);
   $75 = HEAP32[$74>>2]|0;
   HEAP32[$bl$i>>2] = $75;
   HEAP32[$74>>2] = $bl$i;
   $76 = HEAP32[$18>>2]|0;
   $77 = ($76|0)==(259);
   if (!($77)) {
    _error_expected($ls,259);
    // unreachable;
   }
   _luaX_next($ls);
   $78 = HEAP32[$ls$idx>>2]|0;
   $79 = ((($bl$i$i2)) + 10|0);
   HEAP8[$79>>0] = 0;
   $80 = ((($78)) + 46|0);
   $81 = HEAP8[$80>>0]|0;
   $82 = ((($bl$i$i2)) + 8|0);
   HEAP8[$82>>0] = $81;
   $83 = ((($78)) + 12|0);
   $84 = HEAP32[$83>>2]|0;
   $85 = ((($84)) + 64|0);
   $86 = HEAP32[$85>>2]|0;
   $87 = ((($86)) + 28|0);
   $88 = HEAP32[$87>>2]|0;
   $89 = $88&65535;
   $90 = ((($bl$i$i2)) + 4|0);
   HEAP16[$90>>1] = $89;
   $91 = ((($86)) + 16|0);
   $92 = HEAP32[$91>>2]|0;
   $93 = $92&65535;
   $94 = ((($bl$i$i2)) + 6|0);
   HEAP16[$94>>1] = $93;
   $95 = ((($bl$i$i2)) + 9|0);
   HEAP8[$95>>0] = 0;
   $96 = ((($78)) + 16|0);
   $97 = HEAP32[$96>>2]|0;
   HEAP32[$bl$i$i2>>2] = $97;
   HEAP32[$96>>2] = $bl$i$i2;
   L45: while(1) {
    $ls$idx$val$i$i$i4 = HEAP32[$18>>2]|0;
    switch ($ls$idx$val$i$i$i4|0) {
    case 277: case 286: case 262: case 261: case 260:  {
     break L45;
     break;
    }
    default: {
    }
    }
    $98 = ($ls$idx$val$i$i$i4|0)==(274);
    _statement($ls);
    if ($98) {
     break;
    }
   }
   _leaveblock($78);
   $99 = (_luaK_jump($ls$idx$val)|0);
   _luaK_patchlist($ls$idx$val,$99,$51);
   $100 = HEAP32[$18>>2]|0;
   $101 = ($100|0)==(262);
   if ($101) {
    _luaX_next($ls);
    _leaveblock($ls$idx$val);
    _luaK_patchtohere($ls$idx$val,$56);
    $514 = HEAP32[$ls$idx>>2]|0;
    $515 = ((($514)) + 46|0);
    $516 = HEAP8[$515>>0]|0;
    $517 = ((($514)) + 48|0);
    HEAP8[$517>>0] = $516;
    $518 = HEAP32[$ls$idx1>>2]|0;
    $519 = ((($518)) + 38|0);
    $520 = HEAP16[$519>>1]|0;
    $521 = (($520) + -1)<<16>>16;
    HEAP16[$519>>1] = $521;
    STACKTOP = sp;return;
   }
   $102 = HEAP32[$0>>2]|0;
   $103 = ($102|0)==($1|0);
   if ($103) {
    _error_expected($ls,262);
    // unreachable;
   } else {
    $104 = HEAP32[$ls$idx1>>2]|0;
    $105 = (_luaX_token2str($ls,262)|0);
    $106 = (_luaX_token2str($ls,278)|0);
    HEAP32[$vararg_buffer11>>2] = $105;
    $vararg_ptr14 = ((($vararg_buffer11)) + 4|0);
    HEAP32[$vararg_ptr14>>2] = $106;
    $vararg_ptr15 = ((($vararg_buffer11)) + 8|0);
    HEAP32[$vararg_ptr15>>2] = $1;
    $107 = (_luaO_pushfstring($104,6430,$vararg_buffer11)|0);
    _luaX_syntaxerror($ls,$107);
    // unreachable;
   }
   break;
  }
  case 259:  {
   _luaX_next($ls);
   $108 = HEAP32[$ls$idx>>2]|0;
   $109 = ((($bl$i8)) + 10|0);
   HEAP8[$109>>0] = 0;
   $110 = ((($108)) + 46|0);
   $111 = HEAP8[$110>>0]|0;
   $112 = ((($bl$i8)) + 8|0);
   HEAP8[$112>>0] = $111;
   $113 = ((($108)) + 12|0);
   $114 = HEAP32[$113>>2]|0;
   $115 = ((($114)) + 64|0);
   $116 = HEAP32[$115>>2]|0;
   $117 = ((($116)) + 28|0);
   $118 = HEAP32[$117>>2]|0;
   $119 = $118&65535;
   $120 = ((($bl$i8)) + 4|0);
   HEAP16[$120>>1] = $119;
   $121 = ((($116)) + 16|0);
   $122 = HEAP32[$121>>2]|0;
   $123 = $122&65535;
   $124 = ((($bl$i8)) + 6|0);
   HEAP16[$124>>1] = $123;
   $125 = ((($bl$i8)) + 9|0);
   HEAP8[$125>>0] = 0;
   $126 = ((($108)) + 16|0);
   $127 = HEAP32[$126>>2]|0;
   HEAP32[$bl$i8>>2] = $127;
   HEAP32[$126>>2] = $bl$i8;
   L57: while(1) {
    $ls$idx$val$i$i = HEAP32[$18>>2]|0;
    switch ($ls$idx$val$i$i|0) {
    case 277: case 286: case 262: case 261: case 260:  {
     break L57;
     break;
    }
    default: {
    }
    }
    $128 = ($ls$idx$val$i$i|0)==(274);
    _statement($ls);
    if ($128) {
     break;
    }
   }
   _leaveblock($108);
   $129 = HEAP32[$18>>2]|0;
   $130 = ($129|0)==(262);
   if ($130) {
    _luaX_next($ls);
    $514 = HEAP32[$ls$idx>>2]|0;
    $515 = ((($514)) + 46|0);
    $516 = HEAP8[$515>>0]|0;
    $517 = ((($514)) + 48|0);
    HEAP8[$517>>0] = $516;
    $518 = HEAP32[$ls$idx1>>2]|0;
    $519 = ((($518)) + 38|0);
    $520 = HEAP16[$519>>1]|0;
    $521 = (($520) + -1)<<16>>16;
    HEAP16[$519>>1] = $521;
    STACKTOP = sp;return;
   }
   $131 = HEAP32[$0>>2]|0;
   $132 = ($131|0)==($1|0);
   if ($132) {
    _error_expected($ls,262);
    // unreachable;
   } else {
    $133 = HEAP32[$ls$idx1>>2]|0;
    $134 = (_luaX_token2str($ls,262)|0);
    $135 = (_luaX_token2str($ls,259)|0);
    HEAP32[$vararg_buffer16>>2] = $134;
    $vararg_ptr19 = ((($vararg_buffer16)) + 4|0);
    HEAP32[$vararg_ptr19>>2] = $135;
    $vararg_ptr20 = ((($vararg_buffer16)) + 8|0);
    HEAP32[$vararg_ptr20>>2] = $1;
    $136 = (_luaO_pushfstring($133,6430,$vararg_buffer16)|0);
    _luaX_syntaxerror($ls,$136);
    // unreachable;
   }
   break;
  }
  case 264:  {
   $137 = ((($bl$i9)) + 10|0);
   HEAP8[$137>>0] = 1;
   $138 = ((($ls$idx$val)) + 46|0);
   $139 = HEAP8[$138>>0]|0;
   $140 = ((($bl$i9)) + 8|0);
   HEAP8[$140>>0] = $139;
   $141 = ((($ls$idx$val)) + 12|0);
   $142 = HEAP32[$141>>2]|0;
   $143 = ((($142)) + 64|0);
   $144 = HEAP32[$143>>2]|0;
   $145 = ((($144)) + 28|0);
   $146 = HEAP32[$145>>2]|0;
   $147 = $146&65535;
   $148 = ((($bl$i9)) + 4|0);
   HEAP16[$148>>1] = $147;
   $149 = ((($144)) + 16|0);
   $150 = HEAP32[$149>>2]|0;
   $151 = $150&65535;
   $152 = ((($bl$i9)) + 6|0);
   HEAP16[$152>>1] = $151;
   $153 = ((($bl$i9)) + 9|0);
   HEAP8[$153>>0] = 0;
   $154 = ((($ls$idx$val)) + 16|0);
   $155 = HEAP32[$154>>2]|0;
   HEAP32[$bl$i9>>2] = $155;
   HEAP32[$154>>2] = $bl$i9;
   _luaX_next($ls);
   $156 = HEAP32[$18>>2]|0;
   $157 = ($156|0)==(288);
   if (!($157)) {
    _error_expected($ls,288);
    // unreachable;
   }
   $158 = ((($ls)) + 24|0);
   $159 = HEAP32[$158>>2]|0;
   _luaX_next($ls);
   $160 = HEAP32[$18>>2]|0;
   switch ($160|0) {
   case 61:  {
    $161 = HEAP32[$ls$idx>>2]|0;
    $162 = ((($161)) + 48|0);
    $163 = HEAP8[$162>>0]|0;
    $164 = $163&255;
    $165 = (_luaX_newstring($ls,6467,11)|0);
    _new_localvar($ls,$165);
    $166 = (_luaX_newstring($ls,6479,11)|0);
    _new_localvar($ls,$166);
    $167 = (_luaX_newstring($ls,6491,10)|0);
    _new_localvar($ls,$167);
    _new_localvar($ls,$159);
    $168 = HEAP32[$18>>2]|0;
    $169 = ($168|0)==(61);
    if (!($169)) {
     _error_expected($ls,61);
     // unreachable;
    }
    _luaX_next($ls);
    (_subexpr($ls,$e$i71,0)|0);
    $170 = HEAP32[$ls$idx>>2]|0;
    _luaK_exp2nextreg($170,$e$i71);
    $171 = HEAP32[$18>>2]|0;
    $172 = ($171|0)==(44);
    if (!($172)) {
     _error_expected($ls,44);
     // unreachable;
    }
    _luaX_next($ls);
    (_subexpr($ls,$e$i72,0)|0);
    $173 = HEAP32[$ls$idx>>2]|0;
    _luaK_exp2nextreg($173,$e$i72);
    $174 = HEAP32[$18>>2]|0;
    $175 = ($174|0)==(44);
    if ($175) {
     _luaX_next($ls);
     (_subexpr($ls,$e$i73,0)|0);
     $176 = HEAP32[$ls$idx>>2]|0;
     _luaK_exp2nextreg($176,$e$i73);
    } else {
     $177 = HEAP8[$162>>0]|0;
     $178 = $177&255;
     $179 = (_luaK_numberK($161,1.0)|0);
     (_luaK_codek($161,$178,$179)|0);
     _luaK_reserveregs($161,1);
    }
    _forbody($ls,$164,$1,1,1);
    break;
   }
   case 268: case 44:  {
    $180 = HEAP32[$ls$idx>>2]|0;
    $181 = ((($180)) + 48|0);
    $182 = HEAP8[$181>>0]|0;
    $183 = $182&255;
    $184 = (_luaX_newstring($ls,6502,15)|0);
    _new_localvar($ls,$184);
    $185 = (_luaX_newstring($ls,6518,11)|0);
    _new_localvar($ls,$185);
    $186 = (_luaX_newstring($ls,6530,13)|0);
    _new_localvar($ls,$186);
    _new_localvar($ls,$159);
    $187 = HEAP32[$18>>2]|0;
    $188 = ($187|0)==(44);
    do {
     if ($188) {
      $nvars$0$i$i87 = 4;
      while(1) {
       _luaX_next($ls);
       $189 = HEAP32[$18>>2]|0;
       $190 = ($189|0)==(288);
       if (!($190)) {
        label = 52;
        break;
       }
       $191 = HEAP32[$158>>2]|0;
       _luaX_next($ls);
       _new_localvar($ls,$191);
       $192 = (($nvars$0$i$i87) + 1)|0;
       $193 = HEAP32[$18>>2]|0;
       $194 = ($193|0)==(44);
       if ($194) {
        $nvars$0$i$i87 = $192;
       } else {
        $$lcssa157 = $193;$nvars$0$i$i87$lcssa156 = $nvars$0$i$i87;
        label = 54;
        break;
       }
      }
      if ((label|0) == 52) {
       _error_expected($ls,288);
       // unreachable;
      }
      else if ((label|0) == 54) {
       $phitmp = (($nvars$0$i$i87$lcssa156) + -2)|0;
       $196 = $$lcssa157;$nvars$0$i$i$lcssa = $phitmp;
       break;
      }
     } else {
      $196 = $187;$nvars$0$i$i$lcssa = 1;
     }
    } while(0);
    $195 = ($196|0)==(268);
    if (!($195)) {
     _error_expected($ls,268);
     // unreachable;
    }
    _luaX_next($ls);
    $197 = HEAP32[$0>>2]|0;
    (_subexpr($ls,$e$i$i,0)|0);
    $198 = HEAP32[$18>>2]|0;
    $199 = ($198|0)==(44);
    if ($199) {
     $n$0$i86 = 1;
     while(1) {
      _luaX_next($ls);
      $200 = HEAP32[$ls$idx>>2]|0;
      _luaK_exp2nextreg($200,$e$i$i);
      (_subexpr($ls,$e$i$i,0)|0);
      $201 = (($n$0$i86) + 1)|0;
      $202 = HEAP32[$18>>2]|0;
      $203 = ($202|0)==(44);
      if ($203) {
       $n$0$i86 = $201;
      } else {
       $n$0$i$lcssa = $201;
       break;
      }
     }
    } else {
     $n$0$i$lcssa = 1;
    }
    $ls$idx$val$i$i12 = HEAP32[$ls$idx>>2]|0;
    $204 = (3 - ($n$0$i$lcssa))|0;
    $205 = HEAP32[$e$i$i>>2]|0;
    switch ($205|0) {
    case 13: case 12:  {
     $206 = (($204) + 1)|0;
     $207 = ($206|0)<(0);
     $$$i$i$i = $207 ? 0 : $206;
     _luaK_setreturns($ls$idx$val$i$i12,$e$i$i,$$$i$i$i);
     $208 = ($$$i$i$i|0)>(1);
     if ($208) {
      $209 = (($$$i$i$i) + -1)|0;
      _luaK_reserveregs($ls$idx$val$i$i12,$209);
     }
     break;
    }
    case 0:  {
     label = 63;
     break;
    }
    default: {
     _luaK_exp2nextreg($ls$idx$val$i$i12,$e$i$i);
     label = 63;
    }
    }
    if ((label|0) == 63) {
     $210 = ($204|0)>(0);
     if ($210) {
      $211 = ((($ls$idx$val$i$i12)) + 48|0);
      $212 = HEAP8[$211>>0]|0;
      $213 = $212&255;
      _luaK_reserveregs($ls$idx$val$i$i12,$204);
      _luaK_nil($ls$idx$val$i$i12,$213,$204);
     }
    }
    _luaK_checkstack($180,3);
    _forbody($ls,$183,$197,$nvars$0$i$i$lcssa,0);
    break;
   }
   default: {
    _luaX_syntaxerror($ls,6544);
    // unreachable;
   }
   }
   $214 = HEAP32[$18>>2]|0;
   $215 = ($214|0)==(262);
   if ($215) {
    _luaX_next($ls);
    _leaveblock($ls$idx$val);
    $514 = HEAP32[$ls$idx>>2]|0;
    $515 = ((($514)) + 46|0);
    $516 = HEAP8[$515>>0]|0;
    $517 = ((($514)) + 48|0);
    HEAP8[$517>>0] = $516;
    $518 = HEAP32[$ls$idx1>>2]|0;
    $519 = ((($518)) + 38|0);
    $520 = HEAP16[$519>>1]|0;
    $521 = (($520) + -1)<<16>>16;
    HEAP16[$519>>1] = $521;
    STACKTOP = sp;return;
   }
   $216 = HEAP32[$0>>2]|0;
   $217 = ($216|0)==($1|0);
   if ($217) {
    _error_expected($ls,262);
    // unreachable;
   } else {
    $218 = HEAP32[$ls$idx1>>2]|0;
    $219 = (_luaX_token2str($ls,262)|0);
    $220 = (_luaX_token2str($ls,264)|0);
    HEAP32[$vararg_buffer21>>2] = $219;
    $vararg_ptr24 = ((($vararg_buffer21)) + 4|0);
    HEAP32[$vararg_ptr24>>2] = $220;
    $vararg_ptr25 = ((($vararg_buffer21)) + 8|0);
    HEAP32[$vararg_ptr25>>2] = $1;
    $221 = (_luaO_pushfstring($218,6430,$vararg_buffer21)|0);
    _luaX_syntaxerror($ls,$221);
    // unreachable;
   }
   break;
  }
  case 273:  {
   $222 = (_luaK_getlabel($ls$idx$val)|0);
   $223 = ((($bl1$i)) + 10|0);
   HEAP8[$223>>0] = 1;
   $224 = ((($ls$idx$val)) + 46|0);
   $225 = HEAP8[$224>>0]|0;
   $226 = ((($bl1$i)) + 8|0);
   HEAP8[$226>>0] = $225;
   $227 = ((($ls$idx$val)) + 12|0);
   $228 = HEAP32[$227>>2]|0;
   $229 = ((($228)) + 64|0);
   $230 = HEAP32[$229>>2]|0;
   $231 = ((($230)) + 28|0);
   $232 = HEAP32[$231>>2]|0;
   $233 = $232&65535;
   $234 = ((($bl1$i)) + 4|0);
   HEAP16[$234>>1] = $233;
   $235 = ((($230)) + 16|0);
   $236 = HEAP32[$235>>2]|0;
   $237 = $236&65535;
   $238 = ((($bl1$i)) + 6|0);
   HEAP16[$238>>1] = $237;
   $239 = ((($bl1$i)) + 9|0);
   HEAP8[$239>>0] = 0;
   $240 = ((($ls$idx$val)) + 16|0);
   $241 = HEAP32[$240>>2]|0;
   HEAP32[$bl1$i>>2] = $241;
   $242 = ((($bl2$i)) + 10|0);
   HEAP8[$242>>0] = 0;
   $243 = ((($bl2$i)) + 8|0);
   HEAP8[$243>>0] = $225;
   $244 = ((($bl2$i)) + 4|0);
   HEAP16[$244>>1] = $233;
   $245 = ((($bl2$i)) + 6|0);
   HEAP16[$245>>1] = $237;
   $246 = ((($bl2$i)) + 9|0);
   HEAP8[$246>>0] = 0;
   $247 = $bl1$i;
   HEAP32[$bl2$i>>2] = $247;
   HEAP32[$240>>2] = $bl2$i;
   _luaX_next($ls);
   L118: while(1) {
    $ls$idx$val$i$i15 = HEAP32[$18>>2]|0;
    switch ($ls$idx$val$i$i15|0) {
    case 277: case 286: case 262: case 261: case 260:  {
     $250 = $ls$idx$val$i$i15;
     break L118;
     break;
    }
    default: {
    }
    }
    $248 = ($ls$idx$val$i$i15|0)==(274);
    _statement($ls);
    if ($248) {
     label = 75;
     break;
    }
   }
   if ((label|0) == 75) {
    $$pre109 = HEAP32[$18>>2]|0;
    $250 = $$pre109;
   }
   $249 = ($250|0)==(277);
   if (!($249)) {
    $251 = HEAP32[$0>>2]|0;
    $252 = ($251|0)==($1|0);
    if ($252) {
     _error_expected($ls,277);
     // unreachable;
    } else {
     $253 = HEAP32[$ls$idx1>>2]|0;
     $254 = (_luaX_token2str($ls,277)|0);
     $255 = (_luaX_token2str($ls,273)|0);
     HEAP32[$vararg_buffer26>>2] = $254;
     $vararg_ptr29 = ((($vararg_buffer26)) + 4|0);
     HEAP32[$vararg_ptr29>>2] = $255;
     $vararg_ptr30 = ((($vararg_buffer26)) + 8|0);
     HEAP32[$vararg_ptr30>>2] = $1;
     $256 = (_luaO_pushfstring($253,6430,$vararg_buffer26)|0);
     _luaX_syntaxerror($ls,$256);
     // unreachable;
    }
   }
   _luaX_next($ls);
   (_subexpr($ls,$v$i$i13,0)|0);
   $257 = HEAP32[$v$i$i13>>2]|0;
   $258 = ($257|0)==(1);
   if ($258) {
    HEAP32[$v$i$i13>>2] = 3;
   }
   $259 = HEAP32[$ls$idx>>2]|0;
   _luaK_goiftrue($259,$v$i$i13);
   $260 = ((($v$i$i13)) + 20|0);
   $261 = HEAP32[$260>>2]|0;
   $262 = HEAP8[$246>>0]|0;
   $263 = ($262<<24>>24)==(0);
   if (!($263)) {
    $264 = HEAP8[$243>>0]|0;
    $265 = $264&255;
    _luaK_patchclose($ls$idx$val,$261,$265);
   }
   _leaveblock($ls$idx$val);
   _luaK_patchlist($ls$idx$val,$261,$222);
   _leaveblock($ls$idx$val);
   $514 = HEAP32[$ls$idx>>2]|0;
   $515 = ((($514)) + 46|0);
   $516 = HEAP8[$515>>0]|0;
   $517 = ((($514)) + 48|0);
   HEAP8[$517>>0] = $516;
   $518 = HEAP32[$ls$idx1>>2]|0;
   $519 = ((($518)) + 38|0);
   $520 = HEAP16[$519>>1]|0;
   $521 = (($520) + -1)<<16>>16;
   HEAP16[$519>>1] = $521;
   STACKTOP = sp;return;
   break;
  }
  case 265:  {
   _luaX_next($ls);
   $266 = HEAP32[$18>>2]|0;
   $267 = ($266|0)==(288);
   if (!($267)) {
    _error_expected($ls,288);
    // unreachable;
   }
   $268 = ((($ls)) + 24|0);
   $269 = HEAP32[$268>>2]|0;
   _luaX_next($ls);
   $270 = HEAP32[$ls$idx>>2]|0;
   $271 = (_singlevaraux($270,$269,$v$i,1)|0);
   $272 = ($271|0)==(0);
   if ($272) {
    $273 = ((($ls)) + 72|0);
    $274 = HEAP32[$273>>2]|0;
    (_singlevaraux($270,$274,$v$i,1)|0);
    $ls$idx$val$i$i$i20 = HEAP32[$ls$idx>>2]|0;
    $275 = (_luaK_stringK($ls$idx$val$i$i$i20,$269)|0);
    $276 = ((($key$i$i$i)) + 16|0);
    HEAP32[$276>>2] = -1;
    $277 = ((($key$i$i$i)) + 20|0);
    HEAP32[$277>>2] = -1;
    HEAP32[$key$i$i$i>>2] = 4;
    $278 = ((($key$i$i$i)) + 8|0);
    HEAP32[$278>>2] = $275;
    _luaK_indexed($270,$v$i,$key$i$i$i);
   }
   L144: while(1) {
    $279 = HEAP32[$18>>2]|0;
    switch ($279|0) {
    case 58:  {
     label = 92;
     break L144;
     break;
    }
    case 46:  {
     break;
    }
    default: {
     $ismethod$0$i$i = 0;
     break L144;
    }
    }
    _fieldsel($ls,$v$i);
   }
   if ((label|0) == 92) {
    _fieldsel($ls,$v$i);
    $ismethod$0$i$i = 1;
   }
   _body($ls,$b$i,$ismethod$0$i$i,$1);
   $280 = HEAP32[$ls$idx>>2]|0;
   _luaK_storevar($280,$v$i,$b$i);
   $281 = HEAP32[$ls$idx>>2]|0;
   _luaK_fixline($281,$1);
   $514 = HEAP32[$ls$idx>>2]|0;
   $515 = ((($514)) + 46|0);
   $516 = HEAP8[$515>>0]|0;
   $517 = ((($514)) + 48|0);
   HEAP8[$517>>0] = $516;
   $518 = HEAP32[$ls$idx1>>2]|0;
   $519 = ((($518)) + 38|0);
   $520 = HEAP16[$519>>1]|0;
   $521 = (($520) + -1)<<16>>16;
   HEAP16[$519>>1] = $521;
   STACKTOP = sp;return;
   break;
  }
  case 269:  {
   _luaX_next($ls);
   $282 = HEAP32[$18>>2]|0;
   $283 = ($282|0)==(265);
   if ($283) {
    _luaX_next($ls);
    $284 = HEAP32[$ls$idx>>2]|0;
    $285 = HEAP32[$18>>2]|0;
    $286 = ($285|0)==(288);
    if (!($286)) {
     _error_expected($ls,288);
     // unreachable;
    }
    $287 = ((($ls)) + 24|0);
    $288 = HEAP32[$287>>2]|0;
    _luaX_next($ls);
    _new_localvar($ls,$288);
    $ls$idx$val$i = HEAP32[$ls$idx>>2]|0;
    $289 = ((($ls$idx$val$i)) + 46|0);
    $290 = HEAP8[$289>>0]|0;
    $291 = $290&255;
    $292 = (($291) + 1)|0;
    $293 = $292&255;
    HEAP8[$289>>0] = $293;
    $294 = ((($ls$idx$val$i)) + 20|0);
    $295 = HEAP32[$294>>2]|0;
    $296 = $292 & 255;
    $$idx$val$i$i = HEAP32[$ls$idx$val$i>>2]|0;
    $$idx1$i$i = ((($ls$idx$val$i)) + 12|0);
    $$idx1$val$i$i = HEAP32[$$idx1$i$i>>2]|0;
    $$idx2$i$i = ((($ls$idx$val$i)) + 40|0);
    $$idx2$val$i$i = HEAP32[$$idx2$i$i>>2]|0;
    $$idx$val$idx$i$i = ((($$idx$val$i$i)) + 24|0);
    $$idx$val$idx$val$i$i = HEAP32[$$idx$val$idx$i$i>>2]|0;
    $$idx1$val$idx$i$i = ((($$idx1$val$i$i)) + 64|0);
    $$idx1$val$idx$val$i$i = HEAP32[$$idx1$val$idx$i$i>>2]|0;
    $$idx1$val$idx$val$idx$val$i$i = HEAP32[$$idx1$val$idx$val$i$i>>2]|0;
    $297 = (($$idx2$val$i$i) + ($296))|0;
    $298 = (($297) + -1)|0;
    $299 = (($$idx1$val$idx$val$idx$val$i$i) + ($298<<1)|0);
    $300 = HEAP16[$299>>1]|0;
    $301 = $300 << 16 >> 16;
    $302 = (((($$idx$val$idx$val$i$i) + (($301*12)|0)|0)) + 4|0);
    HEAP32[$302>>2] = $295;
    $303 = HEAP32[$0>>2]|0;
    _body($ls,$b$i21,0,$303);
    $304 = ((($284)) + 20|0);
    $305 = HEAP32[$304>>2]|0;
    $306 = ((($b$i21)) + 8|0);
    $307 = HEAP32[$306>>2]|0;
    $$idx$val$i = HEAP32[$284>>2]|0;
    $$idx1$i = ((($284)) + 12|0);
    $$idx1$val$i = HEAP32[$$idx1$i>>2]|0;
    $$idx2$i = ((($284)) + 40|0);
    $$idx2$val$i = HEAP32[$$idx2$i>>2]|0;
    $$idx$val$idx$i = ((($$idx$val$i)) + 24|0);
    $$idx$val$idx$val$i = HEAP32[$$idx$val$idx$i>>2]|0;
    $$idx1$val$idx$i = ((($$idx1$val$i)) + 64|0);
    $$idx1$val$idx$val$i = HEAP32[$$idx1$val$idx$i>>2]|0;
    $$idx1$val$idx$val$idx$val$i = HEAP32[$$idx1$val$idx$val$i>>2]|0;
    $308 = (($$idx2$val$i) + ($307))|0;
    $309 = (($$idx1$val$idx$val$idx$val$i) + ($308<<1)|0);
    $310 = HEAP16[$309>>1]|0;
    $311 = $310 << 16 >> 16;
    $312 = (((($$idx$val$idx$val$i) + (($311*12)|0)|0)) + 4|0);
    HEAP32[$312>>2] = $305;
    $514 = HEAP32[$ls$idx>>2]|0;
    $515 = ((($514)) + 46|0);
    $516 = HEAP8[$515>>0]|0;
    $517 = ((($514)) + 48|0);
    HEAP8[$517>>0] = $516;
    $518 = HEAP32[$ls$idx1>>2]|0;
    $519 = ((($518)) + 38|0);
    $520 = HEAP16[$519>>1]|0;
    $521 = (($520) + -1)<<16>>16;
    HEAP16[$519>>1] = $521;
    STACKTOP = sp;return;
   }
   $313 = ($282|0)==(288);
   if (!($313)) {
    _error_expected($ls,288);
    // unreachable;
   }
   $314 = ((($ls)) + 24|0);
   $nvars$0$i94 = 0;
   L162: while(1) {
    $315 = HEAP32[$314>>2]|0;
    _luaX_next($ls);
    _new_localvar($ls,$315);
    $316 = (($nvars$0$i94) + 1)|0;
    $317 = HEAP32[$18>>2]|0;
    switch ($317|0) {
    case 61:  {
     $$lcssa161 = $316;
     label = 103;
     break L162;
     break;
    }
    case 44:  {
     break;
    }
    default: {
     $$lcssa160 = $316;
     label = 105;
     break L162;
    }
    }
    _luaX_next($ls);
    $318 = HEAP32[$18>>2]|0;
    $319 = ($318|0)==(288);
    if ($319) {
     $nvars$0$i94 = $316;
    } else {
     label = 100;
     break;
    }
   }
   L165: do {
    if ((label|0) == 100) {
     _error_expected($ls,288);
     // unreachable;
    }
    else if ((label|0) == 103) {
     _luaX_next($ls);
     (_subexpr($ls,$e$i,0)|0);
     $320 = HEAP32[$18>>2]|0;
     $321 = ($320|0)==(44);
     if ($321) {
      $n$0$i$i90 = 1;
      while(1) {
       _luaX_next($ls);
       $322 = HEAP32[$ls$idx>>2]|0;
       _luaK_exp2nextreg($322,$e$i);
       (_subexpr($ls,$e$i,0)|0);
       $323 = (($n$0$i$i90) + 1)|0;
       $324 = HEAP32[$18>>2]|0;
       $325 = ($324|0)==(44);
       if ($325) {
        $n$0$i$i90 = $323;
       } else {
        $n$0$i$i$lcssa = $323;
        break;
       }
      }
     } else {
      $n$0$i$i$lcssa = 1;
     }
     $$pre108 = HEAP32[$e$i>>2]|0;
     $ls$idx1$val$i = HEAP32[$ls$idx>>2]|0;
     $326 = (($$lcssa161) - ($n$0$i$i$lcssa))|0;
     switch ($$pre108|0) {
     case 0:  {
      $332 = $326;$522 = $$lcssa161;$ls$idx1$val$i113 = $ls$idx1$val$i;
      label = 110;
      break L165;
      break;
     }
     case 13: case 12:  {
      break;
     }
     default: {
      _luaK_exp2nextreg($ls$idx1$val$i,$e$i);
      $332 = $326;$522 = $$lcssa161;$ls$idx1$val$i113 = $ls$idx1$val$i;
      label = 110;
      break L165;
     }
     }
     $327 = (($326) + 1)|0;
     $328 = ($327|0)<(0);
     $$$i$i = $328 ? 0 : $327;
     _luaK_setreturns($ls$idx1$val$i,$e$i,$$$i$i);
     $329 = ($$$i$i|0)>(1);
     if ($329) {
      $330 = (($$$i$i) + -1)|0;
      _luaK_reserveregs($ls$idx1$val$i,$330);
      $340 = $$lcssa161;
     } else {
      $340 = $$lcssa161;
     }
    }
    else if ((label|0) == 105) {
     HEAP32[$e$i>>2] = 0;
     $ls$idx1$val$i112 = HEAP32[$ls$idx>>2]|0;
     $332 = $$lcssa160;$522 = $$lcssa160;$ls$idx1$val$i113 = $ls$idx1$val$i112;
     label = 110;
    }
   } while(0);
   if ((label|0) == 110) {
    $331 = ($332|0)>(0);
    if ($331) {
     $333 = ((($ls$idx1$val$i113)) + 48|0);
     $334 = HEAP8[$333>>0]|0;
     $335 = $334&255;
     _luaK_reserveregs($ls$idx1$val$i113,$332);
     _luaK_nil($ls$idx1$val$i113,$335,$332);
     $340 = $522;
    } else {
     $340 = $522;
    }
   }
   $ls$idx$val$i29 = HEAP32[$ls$idx>>2]|0;
   $336 = ((($ls$idx$val$i29)) + 46|0);
   $337 = HEAP8[$336>>0]|0;
   $338 = $337&255;
   $339 = (($338) + ($340))|0;
   $341 = $339&255;
   HEAP8[$336>>0] = $341;
   $342 = ($340|0)==(0);
   if (!($342)) {
    $343 = ((($ls$idx$val$i29)) + 20|0);
    $344 = HEAP32[$343>>2]|0;
    $345 = $339 & 255;
    $$idx$val$i$i31 = HEAP32[$ls$idx$val$i29>>2]|0;
    $$idx1$i$i32 = ((($ls$idx$val$i29)) + 12|0);
    $$idx1$val$i$i33 = HEAP32[$$idx1$i$i32>>2]|0;
    $$idx2$i$i34 = ((($ls$idx$val$i29)) + 40|0);
    $$idx2$val$i$i35 = HEAP32[$$idx2$i$i34>>2]|0;
    $$idx$val$idx$i$i36 = ((($$idx$val$i$i31)) + 24|0);
    $$idx$val$idx$val$i$i37 = HEAP32[$$idx$val$idx$i$i36>>2]|0;
    $$idx1$val$idx$i$i38 = ((($$idx1$val$i$i33)) + 64|0);
    $$idx1$val$idx$val$i$i39 = HEAP32[$$idx1$val$idx$i$i38>>2]|0;
    $$idx1$val$idx$val$idx$val$i$i41 = HEAP32[$$idx1$val$idx$val$i$i39>>2]|0;
    $346 = (($$idx2$val$i$i35) + ($345))|0;
    $$01$i$i42 = $340;
    while(1) {
     $347 = (($346) - ($$01$i$i42))|0;
     $348 = (($$idx1$val$idx$val$idx$val$i$i41) + ($347<<1)|0);
     $349 = HEAP16[$348>>1]|0;
     $350 = $349 << 16 >> 16;
     $351 = (((($$idx$val$idx$val$i$i37) + (($350*12)|0)|0)) + 4|0);
     HEAP32[$351>>2] = $344;
     $352 = (($$01$i$i42) + -1)|0;
     $353 = ($352|0)==(0);
     if ($353) {
      break;
     } else {
      $$01$i$i42 = $352;
     }
    }
   }
   $514 = HEAP32[$ls$idx>>2]|0;
   $515 = ((($514)) + 46|0);
   $516 = HEAP8[$515>>0]|0;
   $517 = ((($514)) + 48|0);
   HEAP8[$517>>0] = $516;
   $518 = HEAP32[$ls$idx1>>2]|0;
   $519 = ((($518)) + 38|0);
   $520 = HEAP16[$519>>1]|0;
   $521 = (($520) + -1)<<16>>16;
   HEAP16[$519>>1] = $521;
   STACKTOP = sp;return;
   break;
  }
  case 285:  {
   _luaX_next($ls);
   $354 = HEAP32[$18>>2]|0;
   $355 = ($354|0)==(288);
   if (!($355)) {
    _error_expected($ls,288);
    // unreachable;
   }
   $356 = ((($ls)) + 24|0);
   $357 = HEAP32[$356>>2]|0;
   _luaX_next($ls);
   $358 = HEAP32[$ls$idx>>2]|0;
   $359 = ((($ls)) + 64|0);
   $360 = HEAP32[$359>>2]|0;
   $361 = ((($360)) + 24|0);
   $362 = ((($358)) + 16|0);
   $363 = HEAP32[$362>>2]|0;
   $364 = ((($363)) + 4|0);
   $365 = HEAP16[$364>>1]|0;
   $366 = $365 << 16 >> 16;
   $367 = ((($360)) + 28|0);
   $368 = HEAP32[$367>>2]|0;
   $369 = ($366|0)<($368|0);
   L191: do {
    if ($369) {
     $i$02$i$i = $366;
     while(1) {
      $370 = HEAP32[$361>>2]|0;
      $371 = (($370) + ($i$02$i$i<<4)|0);
      $372 = HEAP32[$371>>2]|0;
      $373 = (_luaS_eqstr($357,$372)|0);
      $374 = ($373|0)==(0);
      if (!($374)) {
       $i$02$i$i$lcssa = $i$02$i$i;
       break;
      }
      $385 = (($i$02$i$i) + 1)|0;
      $386 = HEAP32[$367>>2]|0;
      $387 = ($385|0)<($386|0);
      if ($387) {
       $i$02$i$i = $385;
      } else {
       break L191;
      }
     }
     $375 = ((($358)) + 12|0);
     $376 = HEAP32[$375>>2]|0;
     $377 = ((($376)) + 52|0);
     $378 = HEAP32[$377>>2]|0;
     $379 = ((($357)) + 16|0);
     $380 = HEAP32[$361>>2]|0;
     $381 = (((($380) + ($i$02$i$i$lcssa<<4)|0)) + 8|0);
     $382 = HEAP32[$381>>2]|0;
     HEAP32[$vararg_buffer31>>2] = $379;
     $vararg_ptr34 = ((($vararg_buffer31)) + 4|0);
     HEAP32[$vararg_ptr34>>2] = $382;
     $383 = (_luaO_pushfstring($378,6565,$vararg_buffer31)|0);
     $384 = HEAP32[$375>>2]|0;
     _semerror($384,$383);
     // unreachable;
    }
   } while(0);
   $388 = HEAP32[$18>>2]|0;
   $389 = ($388|0)==(285);
   if (!($389)) {
    _error_expected($ls,285);
    // unreachable;
   }
   _luaX_next($ls);
   $390 = ((($358)) + 20|0);
   $391 = HEAP32[$390>>2]|0;
   $392 = HEAP32[$367>>2]|0;
   $393 = ((($360)) + 32|0);
   $394 = HEAP32[$393>>2]|0;
   $395 = ($392|0)<($394|0);
   if ($395) {
    $$pre$i$i = HEAP32[$361>>2]|0;
    $400 = $$pre$i$i;$408 = $392;
   } else {
    $396 = HEAP32[$ls$idx1>>2]|0;
    $397 = HEAP32[$361>>2]|0;
    $398 = (_luaM_growaux_($396,$397,$393,16,32767,6196)|0);
    HEAP32[$361>>2] = $398;
    $$pre1$i$i = HEAP32[$367>>2]|0;
    $400 = $398;$408 = $$pre1$i$i;
   }
   $399 = (($400) + ($392<<4)|0);
   HEAP32[$399>>2] = $357;
   $401 = (((($400) + ($392<<4)|0)) + 8|0);
   HEAP32[$401>>2] = $1;
   $402 = HEAP32[$ls$idx>>2]|0;
   $403 = ((($402)) + 46|0);
   $404 = HEAP8[$403>>0]|0;
   $405 = (((($400) + ($392<<4)|0)) + 12|0);
   HEAP8[$405>>0] = $404;
   $406 = (((($400) + ($392<<4)|0)) + 4|0);
   HEAP32[$406>>2] = $391;
   $407 = (($408) + 1)|0;
   HEAP32[$367>>2] = $407;
   L205: while(1) {
    $409 = HEAP32[$18>>2]|0;
    switch ($409|0) {
    case 286: case 262: case 261: case 260:  {
     label = 132;
     break L205;
     break;
    }
    case 285: case 59:  {
     break;
    }
    default: {
     label = 131;
     break L205;
    }
    }
    _statement($ls);
   }
   if ((label|0) == 131) {
    $$pre = HEAP32[$361>>2]|0;
    $416 = $$pre;
   }
   else if ((label|0) == 132) {
    $410 = HEAP32[$362>>2]|0;
    $411 = ((($410)) + 8|0);
    $412 = HEAP8[$411>>0]|0;
    $413 = HEAP32[$361>>2]|0;
    $414 = (((($413) + ($392<<4)|0)) + 12|0);
    HEAP8[$414>>0] = $412;
    $416 = $413;
   }
   $415 = (($416) + ($392<<4)|0);
   $417 = HEAP32[$359>>2]|0;
   $418 = HEAP32[$ls$idx>>2]|0;
   $419 = ((($418)) + 16|0);
   $420 = HEAP32[$419>>2]|0;
   $421 = ((($420)) + 6|0);
   $422 = HEAP16[$421>>1]|0;
   $423 = $422 << 16 >> 16;
   $424 = ((($417)) + 16|0);
   $425 = HEAP32[$424>>2]|0;
   $426 = ($423|0)<($425|0);
   if (!($426)) {
    $514 = HEAP32[$ls$idx>>2]|0;
    $515 = ((($514)) + 46|0);
    $516 = HEAP8[$515>>0]|0;
    $517 = ((($514)) + 48|0);
    HEAP8[$517>>0] = $516;
    $518 = HEAP32[$ls$idx1>>2]|0;
    $519 = ((($518)) + 38|0);
    $520 = HEAP16[$519>>1]|0;
    $521 = (($520) + -1)<<16>>16;
    HEAP16[$519>>1] = $521;
    STACKTOP = sp;return;
   }
   $427 = ((($417)) + 12|0);
   $i$0$ph1$i$i = $423;
   L215: while(1) {
    while(1) {
     $428 = HEAP32[$427>>2]|0;
     $429 = (($428) + ($i$0$ph1$i$i<<4)|0);
     $430 = HEAP32[$429>>2]|0;
     $431 = HEAP32[$415>>2]|0;
     $432 = (_luaS_eqstr($430,$431)|0);
     $433 = ($432|0)==(0);
     if ($433) {
      break;
     }
     _closegoto($ls,$i$0$ph1$i$i,$415);
     $434 = HEAP32[$424>>2]|0;
     $435 = ($i$0$ph1$i$i|0)<($434|0);
     if (!($435)) {
      label = 167;
      break L215;
     }
    }
    $436 = (($i$0$ph1$i$i) + 1)|0;
    $437 = HEAP32[$424>>2]|0;
    $438 = ($436|0)<($437|0);
    if ($438) {
     $i$0$ph1$i$i = $436;
    } else {
     label = 167;
     break;
    }
   }
   if ((label|0) == 167) {
    $514 = HEAP32[$ls$idx>>2]|0;
    $515 = ((($514)) + 46|0);
    $516 = HEAP8[$515>>0]|0;
    $517 = ((($514)) + 48|0);
    HEAP8[$517>>0] = $516;
    $518 = HEAP32[$ls$idx1>>2]|0;
    $519 = ((($518)) + 38|0);
    $520 = HEAP16[$519>>1]|0;
    $521 = (($520) + -1)<<16>>16;
    HEAP16[$519>>1] = $521;
    STACKTOP = sp;return;
   }
   break;
  }
  case 274:  {
   _luaX_next($ls);
   $439 = HEAP32[$ls$idx>>2]|0;
   $ls$idx$val$i50 = HEAP32[$18>>2]|0;
   L225: do {
    switch ($ls$idx$val$i50|0) {
    case 59: case 277: case 286: case 262: case 261: case 260:  {
     $first$0$i = 0;$nret$0$i = 0;
     break;
    }
    default: {
     (_subexpr($ls,$e$i48,0)|0);
     $440 = HEAP32[$18>>2]|0;
     $441 = ($440|0)==(44);
     if ($441) {
      $n$0$i$i5396 = 1;
      while(1) {
       _luaX_next($ls);
       $442 = HEAP32[$ls$idx>>2]|0;
       _luaK_exp2nextreg($442,$e$i48);
       (_subexpr($ls,$e$i48,0)|0);
       $443 = (($n$0$i$i5396) + 1)|0;
       $444 = HEAP32[$18>>2]|0;
       $445 = ($444|0)==(44);
       if ($445) {
        $n$0$i$i5396 = $443;
       } else {
        $n$0$i$i53$lcssa = $443;
        break;
       }
      }
     } else {
      $n$0$i$i53$lcssa = 1;
     }
     $446 = HEAP32[$e$i48>>2]|0;
     $447 = $446 & -2;
     $switch$i = ($447|0)==(12);
     if ($switch$i) {
      _luaK_setreturns($439,$e$i48,-1);
      $448 = HEAP32[$e$i48>>2]|0;
      $449 = ($448|0)==(12);
      $450 = ($n$0$i$i53$lcssa|0)==(1);
      $or$cond$i = $450 & $449;
      if ($or$cond$i) {
       $451 = ((($e$i48)) + 8|0);
       $452 = HEAP32[$451>>2]|0;
       $453 = HEAP32[$439>>2]|0;
       $454 = ((($453)) + 12|0);
       $455 = HEAP32[$454>>2]|0;
       $456 = (($455) + ($452<<2)|0);
       $457 = HEAP32[$456>>2]|0;
       $458 = $457 & -64;
       $459 = $458 | 30;
       HEAP32[$456>>2] = $459;
      }
      $460 = ((($439)) + 46|0);
      $461 = HEAP8[$460>>0]|0;
      $462 = $461&255;
      $first$0$i = $462;$nret$0$i = -1;
      break L225;
     } else {
      $463 = ($n$0$i$i53$lcssa|0)==(1);
      if ($463) {
       $464 = (_luaK_exp2anyreg($439,$e$i48)|0);
       $first$0$i = $464;$nret$0$i = 1;
       break L225;
      } else {
       _luaK_exp2nextreg($439,$e$i48);
       $465 = ((($439)) + 46|0);
       $466 = HEAP8[$465>>0]|0;
       $467 = $466&255;
       $first$0$i = $467;$nret$0$i = $n$0$i$i53$lcssa;
       break L225;
      }
     }
    }
    }
   } while(0);
   _luaK_ret($439,$first$0$i,$nret$0$i);
   $468 = HEAP32[$18>>2]|0;
   $469 = ($468|0)==(59);
   if ($469) {
    _luaX_next($ls);
   }
   $514 = HEAP32[$ls$idx>>2]|0;
   $515 = ((($514)) + 46|0);
   $516 = HEAP8[$515>>0]|0;
   $517 = ((($514)) + 48|0);
   HEAP8[$517>>0] = $516;
   $518 = HEAP32[$ls$idx1>>2]|0;
   $519 = ((($518)) + 38|0);
   $520 = HEAP16[$519>>1]|0;
   $521 = (($520) + -1)<<16>>16;
   HEAP16[$519>>1] = $521;
   STACKTOP = sp;return;
   break;
  }
  case 266: case 258:  {
   $470 = (_luaK_jump($ls$idx$val)|0);
   $471 = HEAP32[$0>>2]|0;
   $472 = HEAP32[$18>>2]|0;
   $473 = ($472|0)==(266);
   _luaX_next($ls);
   do {
    if ($473) {
     $474 = HEAP32[$18>>2]|0;
     $475 = ($474|0)==(288);
     if ($475) {
      $476 = ((($ls)) + 24|0);
      $477 = HEAP32[$476>>2]|0;
      _luaX_next($ls);
      $label$0$i = $477;
      break;
     } else {
      _error_expected($ls,288);
      // unreachable;
     }
    } else {
     $478 = HEAP32[$ls$idx1>>2]|0;
     $479 = (_luaS_new($478,8641)|0);
     $label$0$i = $479;
    }
   } while(0);
   $480 = ((($ls)) + 64|0);
   $481 = HEAP32[$480>>2]|0;
   $482 = ((($481)) + 12|0);
   $483 = ((($481)) + 16|0);
   $484 = HEAP32[$483>>2]|0;
   $485 = ((($481)) + 20|0);
   $486 = HEAP32[$485>>2]|0;
   $487 = ($484|0)<($486|0);
   if ($487) {
    $$pre$i = HEAP32[$482>>2]|0;
    $492 = $$pre$i;$500 = $484;
   } else {
    $488 = HEAP32[$ls$idx1>>2]|0;
    $489 = HEAP32[$482>>2]|0;
    $490 = (_luaM_growaux_($488,$489,$485,16,32767,6196)|0);
    HEAP32[$482>>2] = $490;
    $$pre1$i = HEAP32[$483>>2]|0;
    $492 = $490;$500 = $$pre1$i;
   }
   $491 = (($492) + ($484<<4)|0);
   HEAP32[$491>>2] = $label$0$i;
   $493 = (((($492) + ($484<<4)|0)) + 8|0);
   HEAP32[$493>>2] = $471;
   $494 = HEAP32[$ls$idx>>2]|0;
   $495 = ((($494)) + 46|0);
   $496 = HEAP8[$495>>0]|0;
   $497 = (((($492) + ($484<<4)|0)) + 12|0);
   HEAP8[$497>>0] = $496;
   $498 = (((($492) + ($484<<4)|0)) + 4|0);
   HEAP32[$498>>2] = $470;
   $499 = (($500) + 1)|0;
   HEAP32[$483>>2] = $499;
   (_findlabel($ls,$484)|0);
   $514 = HEAP32[$ls$idx>>2]|0;
   $515 = ((($514)) + 46|0);
   $516 = HEAP8[$515>>0]|0;
   $517 = ((($514)) + 48|0);
   HEAP8[$517>>0] = $516;
   $518 = HEAP32[$ls$idx1>>2]|0;
   $519 = ((($518)) + 38|0);
   $520 = HEAP16[$519>>1]|0;
   $521 = (($520) + -1)<<16>>16;
   HEAP16[$519>>1] = $521;
   STACKTOP = sp;return;
   break;
  }
  default: {
   $501 = ((($v$i59)) + 8|0);
   _suffixedexp($ls,$501);
   $502 = HEAP32[$18>>2]|0;
   L10: do {
    switch ($502|0) {
    case 44: case 61:  {
     HEAP32[$v$i59>>2] = 0;
     _assignment($ls,$v$i59,1);
     break;
    }
    default: {
     $503 = HEAP32[$501>>2]|0;
     $504 = ($503|0)==(12);
     if ($504) {
      $505 = ((($v$i59)) + 16|0);
      $506 = HEAP32[$505>>2]|0;
      $507 = HEAP32[$ls$idx$val>>2]|0;
      $508 = ((($507)) + 12|0);
      $509 = HEAP32[$508>>2]|0;
      $510 = (($509) + ($506<<2)|0);
      $511 = HEAP32[$510>>2]|0;
      $512 = $511 & -8372225;
      $513 = $512 | 16384;
      HEAP32[$510>>2] = $513;
      break L10;
     } else {
      _luaX_syntaxerror($ls,6603);
      // unreachable;
     }
    }
    }
   } while(0);
   $514 = HEAP32[$ls$idx>>2]|0;
   $515 = ((($514)) + 46|0);
   $516 = HEAP8[$515>>0]|0;
   $517 = ((($514)) + 48|0);
   HEAP8[$517>>0] = $516;
   $518 = HEAP32[$ls$idx1>>2]|0;
   $519 = ((($518)) + 38|0);
   $520 = HEAP16[$519>>1]|0;
   $521 = (($520) + -1)<<16>>16;
   HEAP16[$519>>1] = $521;
   STACKTOP = sp;return;
  }
  }
 } while(0);
}
function _error_expected($ls,$token) {
 $ls = $ls|0;
 $token = $token|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = ((($ls)) + 52|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (_luaX_token2str($ls,$token)|0);
 HEAP32[$vararg_buffer>>2] = $2;
 $3 = (_luaO_pushfstring($1,6343,$vararg_buffer)|0);
 _luaX_syntaxerror($ls,$3);
 // unreachable;
}
function _close_func($ls) {
 $ls = $ls|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $switch$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($ls)) + 52|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($ls)) + 48|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[$3>>2]|0;
 _luaK_ret($3,0,0);
 _leaveblock($3);
 $5 = ((($3)) + 20|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($6) + 1)|0;
 $8 = ($7>>>0)>(1073741823);
 if ($8) {
  _luaM_toobig($1);
  // unreachable;
 }
 $9 = ((($4)) + 12|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($4)) + 48|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $12 << 2;
 $14 = $6 << 2;
 $15 = (_luaM_realloc_($1,$10,$13,$14)|0);
 HEAP32[$9>>2] = $15;
 $16 = HEAP32[$5>>2]|0;
 HEAP32[$11>>2] = $16;
 $17 = (($16) + 1)|0;
 $18 = ($17>>>0)>(1073741823);
 if ($18) {
  _luaM_toobig($1);
  // unreachable;
 }
 $19 = ((($4)) + 20|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ((($4)) + 52|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = $22 << 2;
 $24 = $16 << 2;
 $25 = (_luaM_realloc_($1,$20,$23,$24)|0);
 HEAP32[$19>>2] = $25;
 $26 = HEAP32[$5>>2]|0;
 HEAP32[$21>>2] = $26;
 $27 = ((($3)) + 32|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = (($28) + 1)|0;
 $30 = ($29>>>0)>(268435455);
 if ($30) {
  _luaM_toobig($1);
  // unreachable;
 }
 $31 = ((($4)) + 8|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = ((($4)) + 44|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = $34 << 4;
 $36 = $28 << 4;
 $37 = (_luaM_realloc_($1,$32,$35,$36)|0);
 HEAP32[$31>>2] = $37;
 $38 = HEAP32[$27>>2]|0;
 HEAP32[$33>>2] = $38;
 $39 = ((($3)) + 36|0);
 $40 = HEAP32[$39>>2]|0;
 $41 = (($40) + 1)|0;
 $42 = ($41>>>0)>(1073741823);
 if ($42) {
  _luaM_toobig($1);
  // unreachable;
 }
 $43 = ((($4)) + 16|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = ((($4)) + 56|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = $46 << 2;
 $48 = $40 << 2;
 $49 = (_luaM_realloc_($1,$44,$47,$48)|0);
 HEAP32[$43>>2] = $49;
 $50 = HEAP32[$39>>2]|0;
 HEAP32[$45>>2] = $50;
 $51 = ((($3)) + 44|0);
 $52 = HEAP16[$51>>1]|0;
 $53 = $52 << 16 >> 16;
 $54 = (($53) + 1)|0;
 $55 = ($54>>>0)>(357913941);
 if ($55) {
  _luaM_toobig($1);
  // unreachable;
 }
 $56 = ((($4)) + 24|0);
 $57 = HEAP32[$56>>2]|0;
 $58 = ((($4)) + 60|0);
 $59 = HEAP32[$58>>2]|0;
 $60 = ($59*12)|0;
 $61 = ($53*12)|0;
 $62 = (_luaM_realloc_($1,$57,$60,$61)|0);
 HEAP32[$56>>2] = $62;
 $63 = HEAP16[$51>>1]|0;
 $64 = $63 << 16 >> 16;
 HEAP32[$58>>2] = $64;
 $65 = ((($3)) + 47|0);
 $66 = HEAP8[$65>>0]|0;
 $67 = $66&255;
 $68 = ((($4)) + 28|0);
 $69 = HEAP32[$68>>2]|0;
 $70 = ((($4)) + 40|0);
 $71 = HEAP32[$70>>2]|0;
 $72 = $71 << 3;
 $73 = $67 << 3;
 $74 = (_luaM_realloc_($1,$69,$72,$73)|0);
 HEAP32[$68>>2] = $74;
 $75 = HEAP8[$65>>0]|0;
 $76 = $75&255;
 HEAP32[$70>>2] = $76;
 $77 = ((($3)) + 8|0);
 $78 = HEAP32[$77>>2]|0;
 HEAP32[$2>>2] = $78;
 $79 = ((($ls)) + 16|0);
 $80 = HEAP32[$79>>2]|0;
 $81 = $80 & -2;
 $switch$i = ($81|0)==(288);
 if ($switch$i) {
  $82 = ((($ls)) + 24|0);
  $83 = HEAP32[$82>>2]|0;
  $84 = ((($83)) + 16|0);
  $85 = ((($83)) + 12|0);
  $86 = HEAP32[$85>>2]|0;
  (_luaX_newstring($ls,$84,$86)|0);
 }
 $87 = ((($1)) + 8|0);
 $88 = HEAP32[$87>>2]|0;
 $89 = ((($88)) + -16|0);
 HEAP32[$87>>2] = $89;
 $90 = ((($1)) + 12|0);
 $91 = HEAP32[$90>>2]|0;
 $92 = ((($91)) + 12|0);
 $93 = HEAP32[$92>>2]|0;
 $94 = ($93|0)>(0);
 if (!($94)) {
  return;
 }
 _luaC_step($1);
 return;
}
function _leaveblock($fs) {
 $fs = $fs|0;
 var $$i$0$i = 0, $$pre = 0, $$pre$i = 0, $$pre$i$i = 0, $$pre$i2 = 0, $$pre1$i$i = 0, $$pre2$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0;
 var $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0;
 var $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0;
 var $146 = 0, $147 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $fs$idx$val$i = 0, $fs$idx$val$idx$i = 0, $fs$idx$val$idx$val$i = 0, $fs$idx1$val$idx$val$idx$val$i = 0, $fs$idx2$i = 0;
 var $fs$idx2$val$i = 0, $i$0$ph1$i$i = 0, $i$01$i = 0, $indvars$iv = 0, $indvars$iv$next = 0, $phitmp$i = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = ((($fs)) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($fs)) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[$1>>2]|0;
 $5 = ($4|0)==(0|0);
 if (!($5)) {
  $6 = ((($1)) + 9|0);
  $7 = HEAP8[$6>>0]|0;
  $8 = ($7<<24>>24)==(0);
  if (!($8)) {
   $9 = (_luaK_jump($fs)|0);
   $10 = ((($1)) + 8|0);
   $11 = HEAP8[$10>>0]|0;
   $12 = $11&255;
   _luaK_patchclose($fs,$9,$12);
   _luaK_patchtohere($fs,$9);
  }
 }
 $13 = ((($1)) + 10|0);
 $14 = HEAP8[$13>>0]|0;
 $15 = ($14<<24>>24)==(0);
 L5: do {
  if (!($15)) {
   $16 = ((($3)) + 52|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = (_luaS_new($17,8641)|0);
   $19 = ((($3)) + 64|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = ((($20)) + 24|0);
   $22 = ((($3)) + 48|0);
   $23 = HEAP32[$22>>2]|0;
   $24 = ((($23)) + 20|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = ((($20)) + 28|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = ((($20)) + 32|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = ($27|0)<($29|0);
   if ($30) {
    $$pre$i$i = HEAP32[$21>>2]|0;
    $35 = $$pre$i$i;$38 = $23;$43 = $27;$45 = $20;
   } else {
    $31 = HEAP32[$16>>2]|0;
    $32 = HEAP32[$21>>2]|0;
    $33 = (_luaM_growaux_($31,$32,$28,16,32767,6196)|0);
    HEAP32[$21>>2] = $33;
    $$pre1$i$i = HEAP32[$26>>2]|0;
    $$pre$i = HEAP32[$22>>2]|0;
    $$pre2$i = HEAP32[$19>>2]|0;
    $35 = $33;$38 = $$pre$i;$43 = $$pre1$i$i;$45 = $$pre2$i;
   }
   $34 = (($35) + ($27<<4)|0);
   HEAP32[$34>>2] = $18;
   $36 = (((($35) + ($27<<4)|0)) + 8|0);
   HEAP32[$36>>2] = 0;
   $37 = ((($38)) + 46|0);
   $39 = HEAP8[$37>>0]|0;
   $40 = (((($35) + ($27<<4)|0)) + 12|0);
   HEAP8[$40>>0] = $39;
   $41 = (((($35) + ($27<<4)|0)) + 4|0);
   HEAP32[$41>>2] = $25;
   $42 = (($43) + 1)|0;
   HEAP32[$26>>2] = $42;
   $44 = ((($45)) + 24|0);
   $46 = HEAP32[$44>>2]|0;
   $47 = (($46) + ($27<<4)|0);
   $48 = ((($38)) + 16|0);
   $49 = HEAP32[$48>>2]|0;
   $50 = ((($49)) + 6|0);
   $51 = HEAP16[$50>>1]|0;
   $52 = $51 << 16 >> 16;
   $53 = ((($45)) + 16|0);
   $54 = HEAP32[$53>>2]|0;
   $55 = ($52|0)<($54|0);
   if ($55) {
    $56 = ((($45)) + 12|0);
    $i$0$ph1$i$i = $52;
    while(1) {
     while(1) {
      $57 = HEAP32[$56>>2]|0;
      $58 = (($57) + ($i$0$ph1$i$i<<4)|0);
      $59 = HEAP32[$58>>2]|0;
      $60 = HEAP32[$47>>2]|0;
      $61 = (_luaS_eqstr($59,$60)|0);
      $62 = ($61|0)==(0);
      if ($62) {
       break;
      }
      _closegoto($3,$i$0$ph1$i$i,$47);
      $63 = HEAP32[$53>>2]|0;
      $64 = ($i$0$ph1$i$i|0)<($63|0);
      if (!($64)) {
       break L5;
      }
     }
     $65 = (($i$0$ph1$i$i) + 1)|0;
     $66 = HEAP32[$53>>2]|0;
     $67 = ($65|0)<($66|0);
     if ($67) {
      $i$0$ph1$i$i = $65;
     } else {
      break;
     }
    }
   }
  }
 } while(0);
 $68 = HEAP32[$1>>2]|0;
 HEAP32[$0>>2] = $68;
 $69 = ((($1)) + 8|0);
 $70 = HEAP8[$69>>0]|0;
 $71 = $70&255;
 $72 = ((($fs)) + 46|0);
 $73 = HEAP8[$72>>0]|0;
 $74 = $73&255;
 $75 = HEAP32[$2>>2]|0;
 $76 = ((($75)) + 64|0);
 $77 = HEAP32[$76>>2]|0;
 $78 = ((($77)) + 4|0);
 $79 = HEAP32[$78>>2]|0;
 $80 = (($71) - ($74))|0;
 $81 = (($80) + ($79))|0;
 HEAP32[$78>>2] = $81;
 $82 = ($70&255)<($73&255);
 if ($82) {
  $83 = ((($fs)) + 20|0);
  $84 = HEAP32[$83>>2]|0;
  $fs$idx$val$i = HEAP32[$fs>>2]|0;
  $fs$idx2$i = ((($fs)) + 40|0);
  $fs$idx2$val$i = HEAP32[$fs$idx2$i>>2]|0;
  $fs$idx$val$idx$i = ((($fs$idx$val$i)) + 24|0);
  $fs$idx$val$idx$val$i = HEAP32[$fs$idx$val$idx$i>>2]|0;
  $fs$idx1$val$idx$val$idx$val$i = HEAP32[$77>>2]|0;
  $indvars$iv = $74;
  while(1) {
   $85 = $indvars$iv&255;
   $86 = (($85) + -1)<<24>>24;
   $87 = $86&255;
   $88 = (($87) + ($fs$idx2$val$i))|0;
   $89 = (($fs$idx1$val$idx$val$idx$val$i) + ($88<<1)|0);
   $90 = HEAP16[$89>>1]|0;
   $91 = $90 << 16 >> 16;
   $92 = (((($fs$idx$val$idx$val$i) + (($91*12)|0)|0)) + 8|0);
   HEAP32[$92>>2] = $84;
   $93 = ($86&255)>($70&255);
   $indvars$iv$next = (($indvars$iv) + -1)|0;
   if ($93) {
    $indvars$iv = $indvars$iv$next;
   } else {
    break;
   }
  }
  HEAP8[$72>>0] = $70;
  $95 = $70;
 } else {
  $95 = $73;
 }
 $94 = ((($fs)) + 48|0);
 HEAP8[$94>>0] = $95;
 $96 = ((($1)) + 4|0);
 $97 = HEAP16[$96>>1]|0;
 $98 = $97 << 16 >> 16;
 $99 = ((($3)) + 64|0);
 $100 = HEAP32[$99>>2]|0;
 $101 = ((($100)) + 28|0);
 HEAP32[$101>>2] = $98;
 $102 = ($68|0)==(0);
 $103 = ((($1)) + 6|0);
 $104 = HEAP16[$103>>1]|0;
 $105 = $104 << 16 >> 16;
 if ($102) {
  $128 = ((($100)) + 16|0);
  $129 = HEAP32[$128>>2]|0;
  $130 = ($105|0)<($129|0);
  if (!($130)) {
   STACKTOP = sp;return;
  }
  $131 = ((($100)) + 12|0);
  $132 = HEAP32[$131>>2]|0;
  $133 = (($132) + ($105<<4)|0);
  $134 = HEAP32[$133>>2]|0;
  $135 = ((($134)) + 4|0);
  $136 = HEAP8[$135>>0]|0;
  $137 = ($136<<24>>24)==(4);
  if (!($137)) {
   $146 = 6243;
   $141 = ((($3)) + 52|0);
   $142 = HEAP32[$141>>2]|0;
   $143 = ((($134)) + 16|0);
   $144 = (((($132) + ($105<<4)|0)) + 8|0);
   $145 = HEAP32[$144>>2]|0;
   HEAP32[$vararg_buffer>>2] = $143;
   $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
   HEAP32[$vararg_ptr1>>2] = $145;
   $147 = (_luaO_pushfstring($142,$146,$vararg_buffer)|0);
   _semerror($3,$147);
   // unreachable;
  }
  $138 = ((($134)) + 6|0);
  $139 = HEAP8[$138>>0]|0;
  $140 = ($139<<24>>24)!=(0);
  $phitmp$i = $140 ? 6209 : 6243;
  $146 = $phitmp$i;
  $141 = ((($3)) + 52|0);
  $142 = HEAP32[$141>>2]|0;
  $143 = ((($134)) + 16|0);
  $144 = (((($132) + ($105<<4)|0)) + 8|0);
  $145 = HEAP32[$144>>2]|0;
  HEAP32[$vararg_buffer>>2] = $143;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $145;
  $147 = (_luaO_pushfstring($142,$146,$vararg_buffer)|0);
  _semerror($3,$147);
  // unreachable;
 }
 $106 = ((($77)) + 16|0);
 $107 = HEAP32[$106>>2]|0;
 $108 = ($105|0)<($107|0);
 if (!($108)) {
  STACKTOP = sp;return;
 }
 $109 = ((($77)) + 12|0);
 $110 = ((($1)) + 9|0);
 $115 = $70;$i$01$i = $105;
 while(1) {
  $111 = HEAP32[$109>>2]|0;
  $112 = (((($111) + ($i$01$i<<4)|0)) + 12|0);
  $113 = HEAP8[$112>>0]|0;
  $114 = $115&255;
  $116 = ($113&255)>($115&255);
  if ($116) {
   $117 = HEAP8[$110>>0]|0;
   $118 = ($117<<24>>24)==(0);
   if ($118) {
    $121 = $115;
   } else {
    $119 = (((($111) + ($i$01$i<<4)|0)) + 4|0);
    $120 = HEAP32[$119>>2]|0;
    _luaK_patchclose($fs,$120,$114);
    $$pre$i2 = HEAP8[$69>>0]|0;
    $121 = $$pre$i2;
   }
   HEAP8[$112>>0] = $121;
  }
  $122 = HEAP32[$2>>2]|0;
  $123 = (_findlabel($122,$i$01$i)|0);
  $124 = ($123|0)==(0);
  $125 = $124&1;
  $$i$0$i = (($125) + ($i$01$i))|0;
  $126 = HEAP32[$106>>2]|0;
  $127 = ($$i$0$i|0)<($126|0);
  if (!($127)) {
   break;
  }
  $$pre = HEAP8[$69>>0]|0;
  $115 = $$pre;$i$01$i = $$i$0$i;
 }
 STACKTOP = sp;return;
}
function _closegoto($ls,$g,$label) {
 $ls = $ls|0;
 $g = $g|0;
 $label = $label|0;
 var $$idx$val = 0, $$idx$val$idx = 0, $$idx$val$idx$val = 0, $$idx1 = 0, $$idx1$val = 0, $$idx1$val$idx = 0, $$idx1$val$idx$val = 0, $$idx1$val$idx$val$idx$val = 0, $$idx2 = 0, $$idx2$val = 0, $$lcssa3 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$04 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = ((($ls)) + 48|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($ls)) + 64|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (((($5) + ($g<<4)|0)) + 12|0);
 $7 = HEAP8[$6>>0]|0;
 $8 = ((($label)) + 12|0);
 $9 = HEAP8[$8>>0]|0;
 $10 = ($7&255)<($9&255);
 if ($10) {
  $11 = $7&255;
  $$idx$val = HEAP32[$1>>2]|0;
  $$idx1 = ((($1)) + 12|0);
  $$idx1$val = HEAP32[$$idx1>>2]|0;
  $$idx2 = ((($1)) + 40|0);
  $$idx2$val = HEAP32[$$idx2>>2]|0;
  $$idx$val$idx = ((($$idx$val)) + 24|0);
  $$idx$val$idx$val = HEAP32[$$idx$val$idx>>2]|0;
  $$idx1$val$idx = ((($$idx1$val)) + 64|0);
  $$idx1$val$idx$val = HEAP32[$$idx1$val$idx>>2]|0;
  $$idx1$val$idx$val$idx$val = HEAP32[$$idx1$val$idx$val>>2]|0;
  $12 = (($$idx2$val) + ($11))|0;
  $13 = (($$idx1$val$idx$val$idx$val) + ($12<<1)|0);
  $14 = HEAP16[$13>>1]|0;
  $15 = $14 << 16 >> 16;
  $16 = (($$idx$val$idx$val) + (($15*12)|0)|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = ((($ls)) + 52|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = (($5) + ($g<<4)|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = ((($21)) + 16|0);
  $23 = (((($5) + ($g<<4)|0)) + 8|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = ((($17)) + 16|0);
  HEAP32[$vararg_buffer>>2] = $22;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $24;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = $25;
  $26 = (_luaO_pushfstring($19,6287,$vararg_buffer)|0);
  _semerror($ls,$26);
  // unreachable;
 }
 $27 = (((($5) + ($g<<4)|0)) + 4|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = ((($label)) + 4|0);
 $30 = HEAP32[$29>>2]|0;
 _luaK_patchlist($1,$28,$30);
 $31 = ((($3)) + 16|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = (($32) + -1)|0;
 $34 = ($33|0)>($g|0);
 if ($34) {
  $i$04 = $g;
 } else {
  $$lcssa3 = $33;
  HEAP32[$31>>2] = $$lcssa3;
  STACKTOP = sp;return;
 }
 while(1) {
  $35 = HEAP32[$4>>2]|0;
  $36 = (($35) + ($i$04<<4)|0);
  $37 = (($i$04) + 1)|0;
  $38 = (($35) + ($37<<4)|0);
  ;HEAP32[$36>>2]=HEAP32[$38>>2]|0;HEAP32[$36+4>>2]=HEAP32[$38+4>>2]|0;HEAP32[$36+8>>2]=HEAP32[$38+8>>2]|0;HEAP32[$36+12>>2]=HEAP32[$38+12>>2]|0;
  $39 = HEAP32[$31>>2]|0;
  $40 = (($39) + -1)|0;
  $41 = ($37|0)<($40|0);
  if ($41) {
   $i$04 = $37;
  } else {
   $$lcssa3 = $40;
   break;
  }
 }
 HEAP32[$31>>2] = $$lcssa3;
 STACKTOP = sp;return;
}
function _findlabel($ls,$g) {
 $ls = $ls|0;
 $g = $g|0;
 var $$0 = 0, $$lcssa = 0, $$lcssa23 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$04 = 0, $i$04$lcssa = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($ls)) + 48|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 16|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($ls)) + 64|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($5)) + 12|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($3)) + 4|0);
 $9 = HEAP16[$8>>1]|0;
 $10 = $9 << 16 >> 16;
 $11 = ((($5)) + 28|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($10|0)<($12|0);
 if (!($13)) {
  $$0 = 0;
  return ($$0|0);
 }
 $14 = ((($5)) + 24|0);
 $15 = (($7) + ($g<<4)|0);
 $i$04 = $10;
 while(1) {
  $16 = HEAP32[$14>>2]|0;
  $17 = (($16) + ($i$04<<4)|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = HEAP32[$15>>2]|0;
  $20 = (_luaS_eqstr($18,$19)|0);
  $21 = ($20|0)==(0);
  if (!($21)) {
   $$lcssa = $16;$$lcssa23 = $17;$i$04$lcssa = $i$04;
   break;
  }
  $38 = (($i$04) + 1)|0;
  $39 = HEAP32[$11>>2]|0;
  $40 = ($38|0)<($39|0);
  if ($40) {
   $i$04 = $38;
  } else {
   $$0 = 0;
   label = 10;
   break;
  }
 }
 if ((label|0) == 10) {
  return ($$0|0);
 }
 $22 = (((($7) + ($g<<4)|0)) + 12|0);
 $23 = HEAP8[$22>>0]|0;
 $24 = (((($$lcssa) + ($i$04$lcssa<<4)|0)) + 12|0);
 $25 = HEAP8[$24>>0]|0;
 $26 = ($23&255)>($25&255);
 do {
  if ($26) {
   $27 = ((($3)) + 9|0);
   $28 = HEAP8[$27>>0]|0;
   $29 = ($28<<24>>24)==(0);
   if ($29) {
    $30 = HEAP32[$11>>2]|0;
    $31 = HEAP16[$8>>1]|0;
    $32 = $31 << 16 >> 16;
    $33 = ($30|0)>($32|0);
    if (!($33)) {
     break;
    }
   }
   $34 = HEAP32[$0>>2]|0;
   $35 = (((($7) + ($g<<4)|0)) + 4|0);
   $36 = HEAP32[$35>>2]|0;
   $37 = $25&255;
   _luaK_patchclose($34,$36,$37);
  }
 } while(0);
 _closegoto($ls,$g,$$lcssa23);
 $$0 = 1;
 return ($$0|0);
}
function _semerror($ls,$msg) {
 $ls = $ls|0;
 $msg = $msg|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($ls)) + 16|0);
 HEAP32[$0>>2] = 0;
 _luaX_syntaxerror($ls,$msg);
 // unreachable;
}
function _test_then_block($ls,$escapelist) {
 $ls = $ls|0;
 $escapelist = $escapelist|0;
 var $$pre$i = 0, $$pre1$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $9 = 0, $bl = 0, $jf$0 = 0, $label$0$i = 0, $ls$idx$val$i = 0, $switch = 0, $v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $bl = sp + 24|0;
 $v = sp;
 $0 = ((($ls)) + 48|0);
 $1 = HEAP32[$0>>2]|0;
 _luaX_next($ls);
 (_subexpr($ls,$v,0)|0);
 $2 = ((($ls)) + 16|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(275);
 if (!($4)) {
  _error_expected($ls,275);
  // unreachable;
 }
 _luaX_next($ls);
 $5 = HEAP32[$2>>2]|0;
 L4: do {
  switch ($5|0) {
  case 258: case 266:  {
   $6 = HEAP32[$0>>2]|0;
   _luaK_goiffalse($6,$v);
   $7 = ((($bl)) + 10|0);
   HEAP8[$7>>0] = 0;
   $8 = ((($1)) + 46|0);
   $9 = HEAP8[$8>>0]|0;
   $10 = ((($bl)) + 8|0);
   HEAP8[$10>>0] = $9;
   $11 = ((($1)) + 12|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = ((($12)) + 64|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = ((($14)) + 28|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = $16&65535;
   $18 = ((($bl)) + 4|0);
   HEAP16[$18>>1] = $17;
   $19 = ((($14)) + 16|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = $20&65535;
   $22 = ((($bl)) + 6|0);
   HEAP16[$22>>1] = $21;
   $23 = ((($bl)) + 9|0);
   HEAP8[$23>>0] = 0;
   $24 = ((($1)) + 16|0);
   $25 = HEAP32[$24>>2]|0;
   HEAP32[$bl>>2] = $25;
   HEAP32[$24>>2] = $bl;
   $26 = ((($v)) + 16|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = ((($ls)) + 4|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = HEAP32[$2>>2]|0;
   $31 = ($30|0)==(266);
   _luaX_next($ls);
   do {
    if ($31) {
     $32 = HEAP32[$2>>2]|0;
     $33 = ($32|0)==(288);
     if ($33) {
      $34 = ((($ls)) + 24|0);
      $35 = HEAP32[$34>>2]|0;
      _luaX_next($ls);
      $label$0$i = $35;
      break;
     } else {
      _error_expected($ls,288);
      // unreachable;
     }
    } else {
     $36 = ((($ls)) + 52|0);
     $37 = HEAP32[$36>>2]|0;
     $38 = (_luaS_new($37,8641)|0);
     $label$0$i = $38;
    }
   } while(0);
   $39 = ((($ls)) + 64|0);
   $40 = HEAP32[$39>>2]|0;
   $41 = ((($40)) + 12|0);
   $42 = ((($40)) + 16|0);
   $43 = HEAP32[$42>>2]|0;
   $44 = ((($40)) + 20|0);
   $45 = HEAP32[$44>>2]|0;
   $46 = ($43|0)<($45|0);
   if ($46) {
    $$pre$i = HEAP32[$41>>2]|0;
    $52 = $$pre$i;$60 = $43;
   } else {
    $47 = ((($ls)) + 52|0);
    $48 = HEAP32[$47>>2]|0;
    $49 = HEAP32[$41>>2]|0;
    $50 = (_luaM_growaux_($48,$49,$44,16,32767,6196)|0);
    HEAP32[$41>>2] = $50;
    $$pre1$i = HEAP32[$42>>2]|0;
    $52 = $50;$60 = $$pre1$i;
   }
   $51 = (($52) + ($43<<4)|0);
   HEAP32[$51>>2] = $label$0$i;
   $53 = (((($52) + ($43<<4)|0)) + 8|0);
   HEAP32[$53>>2] = $29;
   $54 = HEAP32[$0>>2]|0;
   $55 = ((($54)) + 46|0);
   $56 = HEAP8[$55>>0]|0;
   $57 = (((($52) + ($43<<4)|0)) + 12|0);
   HEAP8[$57>>0] = $56;
   $58 = (((($52) + ($43<<4)|0)) + 4|0);
   HEAP32[$58>>2] = $27;
   $59 = (($60) + 1)|0;
   HEAP32[$42>>2] = $59;
   (_findlabel($ls,$43)|0);
   L18: while(1) {
    $61 = HEAP32[$2>>2]|0;
    switch ($61|0) {
    case 286: case 262: case 261: case 260:  {
     break L18;
     break;
    }
    case 285: case 59:  {
     break;
    }
    default: {
     label = 16;
     break L18;
    }
    }
    _statement($ls);
   }
   if ((label|0) == 16) {
    $62 = (_luaK_jump($1)|0);
    $jf$0 = $62;
    break L4;
   }
   _leaveblock($1);
   STACKTOP = sp;return;
   break;
  }
  default: {
   $63 = HEAP32[$0>>2]|0;
   _luaK_goiftrue($63,$v);
   $64 = ((($bl)) + 10|0);
   HEAP8[$64>>0] = 0;
   $65 = ((($1)) + 46|0);
   $66 = HEAP8[$65>>0]|0;
   $67 = ((($bl)) + 8|0);
   HEAP8[$67>>0] = $66;
   $68 = ((($1)) + 12|0);
   $69 = HEAP32[$68>>2]|0;
   $70 = ((($69)) + 64|0);
   $71 = HEAP32[$70>>2]|0;
   $72 = ((($71)) + 28|0);
   $73 = HEAP32[$72>>2]|0;
   $74 = $73&65535;
   $75 = ((($bl)) + 4|0);
   HEAP16[$75>>1] = $74;
   $76 = ((($71)) + 16|0);
   $77 = HEAP32[$76>>2]|0;
   $78 = $77&65535;
   $79 = ((($bl)) + 6|0);
   HEAP16[$79>>1] = $78;
   $80 = ((($bl)) + 9|0);
   HEAP8[$80>>0] = 0;
   $81 = ((($1)) + 16|0);
   $82 = HEAP32[$81>>2]|0;
   HEAP32[$bl>>2] = $82;
   HEAP32[$81>>2] = $bl;
   $83 = ((($v)) + 20|0);
   $84 = HEAP32[$83>>2]|0;
   $jf$0 = $84;
  }
  }
 } while(0);
 L26: while(1) {
  $ls$idx$val$i = HEAP32[$2>>2]|0;
  switch ($ls$idx$val$i|0) {
  case 277: case 286: case 262: case 261: case 260:  {
   break L26;
   break;
  }
  default: {
  }
  }
  $85 = ($ls$idx$val$i|0)==(274);
  _statement($ls);
  if ($85) {
   break;
  }
 }
 _leaveblock($1);
 $86 = HEAP32[$2>>2]|0;
 $87 = $86 & -2;
 $switch = ($87|0)==(260);
 if ($switch) {
  $88 = (_luaK_jump($1)|0);
  _luaK_concat($1,$escapelist,$88);
 }
 _luaK_patchtohere($1,$jf$0);
 STACKTOP = sp;return;
}
function _subexpr($ls,$v,$limit) {
 $ls = $ls|0;
 $v = $v|0;
 $limit = $limit|0;
 var $$0$i2$ph = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0.0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $8 = 0, $9 = 0, $ls$idx = 0, $ls$idx$val = 0, $ls$idx1 = 0, $ls$idx1$val = 0, $op$0$lcssa = 0, $op$0$ph$ph = 0, $op$04 = 0, $v2 = 0, $vararg_buffer = 0;
 var $vararg_buffer1 = 0, $vararg_ptr4 = 0, $vararg_ptr5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 32|0;
 $vararg_buffer = sp + 24|0;
 $v2 = sp;
 $ls$idx = ((($ls)) + 48|0);
 $ls$idx$val = HEAP32[$ls$idx>>2]|0;
 $ls$idx1 = ((($ls)) + 52|0);
 $ls$idx1$val = HEAP32[$ls$idx1>>2]|0;
 $0 = ((($ls$idx1$val)) + 38|0);
 $1 = HEAP16[$0>>1]|0;
 $2 = (($1) + 1)<<16>>16;
 HEAP16[$0>>1] = $2;
 $3 = ($2&65535)>(200);
 if ($3) {
  $4 = ((($ls$idx$val)) + 12|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ((($5)) + 52|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = HEAP32[$ls$idx$val>>2]|0;
  $9 = ((($8)) + 64|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($10|0)==(0);
  if ($11) {
   $13 = 6375;
   HEAP32[$vararg_buffer1>>2] = 6421;
   $vararg_ptr4 = ((($vararg_buffer1)) + 4|0);
   HEAP32[$vararg_ptr4>>2] = 200;
   $vararg_ptr5 = ((($vararg_buffer1)) + 8|0);
   HEAP32[$vararg_ptr5>>2] = $13;
   $14 = (_luaO_pushfstring($7,6389,$vararg_buffer1)|0);
   $15 = HEAP32[$4>>2]|0;
   _luaX_syntaxerror($15,$14);
   // unreachable;
  }
  HEAP32[$vararg_buffer>>2] = $10;
  $12 = (_luaO_pushfstring($7,6355,$vararg_buffer)|0);
  $13 = $12;
  HEAP32[$vararg_buffer1>>2] = 6421;
  $vararg_ptr4 = ((($vararg_buffer1)) + 4|0);
  HEAP32[$vararg_ptr4>>2] = 200;
  $vararg_ptr5 = ((($vararg_buffer1)) + 8|0);
  HEAP32[$vararg_ptr5>>2] = $13;
  $14 = (_luaO_pushfstring($7,6389,$vararg_buffer1)|0);
  $15 = HEAP32[$4>>2]|0;
  _luaX_syntaxerror($15,$14);
  // unreachable;
 }
 $16 = ((($ls)) + 16|0);
 $17 = HEAP32[$16>>2]|0;
 L8: do {
  switch ($17|0) {
  case 271:  {
   $$0$i2$ph = 1;
   label = 8;
   break;
  }
  case 45:  {
   $$0$i2$ph = 0;
   label = 8;
   break;
  }
  case 35:  {
   $$0$i2$ph = 2;
   label = 8;
   break;
  }
  case 287:  {
   $21 = ((($v)) + 16|0);
   HEAP32[$21>>2] = -1;
   $22 = ((($v)) + 20|0);
   HEAP32[$22>>2] = -1;
   HEAP32[$v>>2] = 5;
   $23 = ((($v)) + 8|0);
   HEAP32[$23>>2] = 0;
   $24 = ((($ls)) + 24|0);
   $25 = +HEAPF64[$24>>3];
   $26 = ((($v)) + 8|0);
   HEAPF64[$26>>3] = $25;
   label = 20;
   break;
  }
  case 289:  {
   $27 = ((($ls)) + 24|0);
   $28 = HEAP32[$27>>2]|0;
   $29 = (_luaK_stringK($ls$idx$val,$28)|0);
   $30 = ((($v)) + 16|0);
   HEAP32[$30>>2] = -1;
   $31 = ((($v)) + 20|0);
   HEAP32[$31>>2] = -1;
   HEAP32[$v>>2] = 4;
   $32 = ((($v)) + 8|0);
   HEAP32[$32>>2] = $29;
   label = 20;
   break;
  }
  case 270:  {
   $33 = ((($v)) + 16|0);
   HEAP32[$33>>2] = -1;
   $34 = ((($v)) + 20|0);
   HEAP32[$34>>2] = -1;
   HEAP32[$v>>2] = 1;
   $35 = ((($v)) + 8|0);
   HEAP32[$35>>2] = 0;
   label = 20;
   break;
  }
  case 276:  {
   $36 = ((($v)) + 16|0);
   HEAP32[$36>>2] = -1;
   $37 = ((($v)) + 20|0);
   HEAP32[$37>>2] = -1;
   HEAP32[$v>>2] = 2;
   $38 = ((($v)) + 8|0);
   HEAP32[$38>>2] = 0;
   label = 20;
   break;
  }
  case 263:  {
   $39 = ((($v)) + 16|0);
   HEAP32[$39>>2] = -1;
   $40 = ((($v)) + 20|0);
   HEAP32[$40>>2] = -1;
   HEAP32[$v>>2] = 3;
   $41 = ((($v)) + 8|0);
   HEAP32[$41>>2] = 0;
   label = 20;
   break;
  }
  case 280:  {
   $42 = HEAP32[$ls$idx$val>>2]|0;
   $43 = ((($42)) + 77|0);
   $44 = HEAP8[$43>>0]|0;
   $45 = ($44<<24>>24)==(0);
   if ($45) {
    _luaX_syntaxerror($ls,6741);
    // unreachable;
   } else {
    $46 = (_luaK_codeABC($ls$idx$val,38,0,1,0)|0);
    $47 = ((($v)) + 16|0);
    HEAP32[$47>>2] = -1;
    $48 = ((($v)) + 20|0);
    HEAP32[$48>>2] = -1;
    HEAP32[$v>>2] = 13;
    $49 = ((($v)) + 8|0);
    HEAP32[$49>>2] = $46;
    label = 20;
    break L8;
   }
   break;
  }
  case 123:  {
   _constructor($ls,$v);
   break;
  }
  case 265:  {
   _luaX_next($ls);
   $50 = ((($ls)) + 4|0);
   $51 = HEAP32[$50>>2]|0;
   _body($ls,$v,0,$51);
   break;
  }
  default: {
   _suffixedexp($ls,$v);
  }
  }
 } while(0);
 if ((label|0) == 8) {
  $18 = ((($ls)) + 4|0);
  $19 = HEAP32[$18>>2]|0;
  _luaX_next($ls);
  (_subexpr($ls,$v,8)|0);
  $20 = HEAP32[$ls$idx>>2]|0;
  _luaK_prefix($20,$$0$i2$ph,$v,$19);
 }
 else if ((label|0) == 20) {
  _luaX_next($ls);
 }
 $52 = HEAP32[$16>>2]|0;
 do {
  switch ($52|0) {
  case 43:  {
   $op$0$ph$ph = 0;
   break;
  }
  case 45:  {
   $op$0$ph$ph = 1;
   break;
  }
  case 42:  {
   $op$0$ph$ph = 2;
   break;
  }
  case 47:  {
   $op$0$ph$ph = 3;
   break;
  }
  case 37:  {
   $op$0$ph$ph = 4;
   break;
  }
  case 94:  {
   $op$0$ph$ph = 5;
   break;
  }
  case 279:  {
   $op$0$ph$ph = 6;
   break;
  }
  case 284:  {
   $op$0$ph$ph = 10;
   break;
  }
  case 281:  {
   $op$0$ph$ph = 7;
   break;
  }
  case 60:  {
   $op$0$ph$ph = 8;
   break;
  }
  case 283:  {
   $op$0$ph$ph = 9;
   break;
  }
  case 62:  {
   $op$0$ph$ph = 11;
   break;
  }
  case 282:  {
   $op$0$ph$ph = 12;
   break;
  }
  case 257:  {
   $op$0$ph$ph = 13;
   break;
  }
  case 272:  {
   $op$0$ph$ph = 14;
   break;
  }
  default: {
   $op$0$lcssa = 15;
   $66 = HEAP32[$ls$idx1>>2]|0;
   $67 = ((($66)) + 38|0);
   $68 = HEAP16[$67>>1]|0;
   $69 = (($68) + -1)<<16>>16;
   HEAP16[$67>>1] = $69;
   STACKTOP = sp;return ($op$0$lcssa|0);
  }
  }
 } while(0);
 $53 = ((($ls)) + 4|0);
 $op$04 = $op$0$ph$ph;
 while(1) {
  $54 = (6784 + ($op$04<<1)|0);
  $55 = HEAP8[$54>>0]|0;
  $56 = $55&255;
  $57 = ($56|0)>($limit|0);
  if (!($57)) {
   $op$0$lcssa = $op$04;
   label = 39;
   break;
  }
  $58 = HEAP32[$53>>2]|0;
  _luaX_next($ls);
  $59 = HEAP32[$ls$idx>>2]|0;
  _luaK_infix($59,$op$04,$v);
  $60 = (((6784 + ($op$04<<1)|0)) + 1|0);
  $61 = HEAP8[$60>>0]|0;
  $62 = $61&255;
  $63 = (_subexpr($ls,$v2,$62)|0);
  $64 = HEAP32[$ls$idx>>2]|0;
  _luaK_posfix($64,$op$04,$v,$v2,$58);
  $65 = ($63|0)==(15);
  if ($65) {
   $op$0$lcssa = 15;
   label = 39;
   break;
  } else {
   $op$04 = $63;
  }
 }
 if ((label|0) == 39) {
  $66 = HEAP32[$ls$idx1>>2]|0;
  $67 = ((($66)) + 38|0);
  $68 = HEAP16[$67>>1]|0;
  $69 = (($68) + -1)<<16>>16;
  HEAP16[$67>>1] = $69;
  STACKTOP = sp;return ($op$0$lcssa|0);
 }
 return (0)|0;
}
function _new_localvar($ls,$name) {
 $ls = $ls|0;
 $name = $name|0;
 var $$phi$trans$insert = 0, $$pre = 0, $$pre$i = 0, $$pre1 = 0, $$pre3 = 0, $$pre3$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $oldsize$01$i = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_ptr4 = 0, $vararg_ptr5 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = ((($ls)) + 48|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($ls)) + 64|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[$1>>2]|0;
 $5 = ((($4)) + 60|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($1)) + 44|0);
 $8 = HEAP16[$7>>1]|0;
 $9 = $8 << 16 >> 16;
 $10 = ($9|0)<($6|0);
 if ($10) {
  $$phi$trans$insert = ((($4)) + 24|0);
  $$pre = HEAP32[$$phi$trans$insert>>2]|0;
  $17 = $6;$20 = $$pre;
 } else {
  $11 = ((($ls)) + 52|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ((($4)) + 24|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = (_luaM_growaux_($12,$14,$5,12,32767,6725)|0);
  HEAP32[$13>>2] = $15;
  $$pre$i = HEAP32[$5>>2]|0;
  $17 = $$pre$i;$20 = $15;
 }
 $16 = ($6|0)<($17|0);
 if ($16) {
  $oldsize$01$i = $6;
  while(1) {
   $18 = (($oldsize$01$i) + 1)|0;
   $19 = (($20) + (($oldsize$01$i*12)|0)|0);
   HEAP32[$19>>2] = 0;
   $exitcond = ($18|0)==($17|0);
   if ($exitcond) {
    break;
   } else {
    $oldsize$01$i = $18;
   }
  }
 }
 $21 = HEAP16[$7>>1]|0;
 $22 = $21 << 16 >> 16;
 $23 = (($20) + (($22*12)|0)|0);
 HEAP32[$23>>2] = $name;
 $24 = ((($name)) + 5|0);
 $25 = HEAP8[$24>>0]|0;
 $26 = $25 & 3;
 $27 = ($26<<24>>24)==(0);
 if ($27) {
  $35 = $21;
 } else {
  $28 = ((($4)) + 5|0);
  $29 = HEAP8[$28>>0]|0;
  $30 = $29 & 4;
  $31 = ($30<<24>>24)==(0);
  if ($31) {
   $35 = $21;
  } else {
   $32 = ((($ls)) + 52|0);
   $33 = HEAP32[$32>>2]|0;
   _luaC_barrier_($33,$4,$name);
   $$pre3$i = HEAP16[$7>>1]|0;
   $35 = $$pre3$i;
  }
 }
 $34 = (($35) + 1)<<16>>16;
 HEAP16[$7>>1] = $34;
 $36 = ((($3)) + 4|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = (($37) + 1)|0;
 $39 = ((($1)) + 40|0);
 $40 = HEAP32[$39>>2]|0;
 $41 = (($38) - ($40))|0;
 $42 = ($41|0)>(200);
 if ($42) {
  $43 = ((($1)) + 12|0);
  $44 = HEAP32[$43>>2]|0;
  $45 = ((($44)) + 52|0);
  $46 = HEAP32[$45>>2]|0;
  $47 = HEAP32[$1>>2]|0;
  $48 = ((($47)) + 64|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = ($49|0)==(0);
  if ($50) {
   $52 = 6375;
   HEAP32[$vararg_buffer1>>2] = 6725;
   $vararg_ptr4 = ((($vararg_buffer1)) + 4|0);
   HEAP32[$vararg_ptr4>>2] = 200;
   $vararg_ptr5 = ((($vararg_buffer1)) + 8|0);
   HEAP32[$vararg_ptr5>>2] = $52;
   $53 = (_luaO_pushfstring($46,6389,$vararg_buffer1)|0);
   $54 = HEAP32[$43>>2]|0;
   _luaX_syntaxerror($54,$53);
   // unreachable;
  }
  HEAP32[$vararg_buffer>>2] = $49;
  $51 = (_luaO_pushfstring($46,6355,$vararg_buffer)|0);
  $52 = $51;
  HEAP32[$vararg_buffer1>>2] = 6725;
  $vararg_ptr4 = ((($vararg_buffer1)) + 4|0);
  HEAP32[$vararg_ptr4>>2] = 200;
  $vararg_ptr5 = ((($vararg_buffer1)) + 8|0);
  HEAP32[$vararg_ptr5>>2] = $52;
  $53 = (_luaO_pushfstring($46,6389,$vararg_buffer1)|0);
  $54 = HEAP32[$43>>2]|0;
  _luaX_syntaxerror($54,$53);
  // unreachable;
 }
 $55 = (($37) + 2)|0;
 $56 = ((($3)) + 8|0);
 $57 = HEAP32[$56>>2]|0;
 $58 = ($55|0)>($57|0);
 if ($58) {
  $59 = ((($ls)) + 52|0);
  $60 = HEAP32[$59>>2]|0;
  $61 = HEAP32[$3>>2]|0;
  $62 = (_luaM_growaux_($60,$61,$56,2,2147483645,6725)|0);
  HEAP32[$3>>2] = $62;
  $$pre1 = HEAP32[$36>>2]|0;
  $64 = $$pre1;$66 = $62;
  $63 = (($64) + 1)|0;
  HEAP32[$36>>2] = $63;
  $65 = (($66) + ($64<<1)|0);
  HEAP16[$65>>1] = $35;
  STACKTOP = sp;return;
 } else {
  $$pre3 = HEAP32[$3>>2]|0;
  $64 = $37;$66 = $$pre3;
  $63 = (($64) + 1)|0;
  HEAP32[$36>>2] = $63;
  $65 = (($66) + ($64<<1)|0);
  HEAP16[$65>>1] = $35;
  STACKTOP = sp;return;
 }
}
function _forbody($ls,$base,$line,$nvars,$isnum) {
 $ls = $ls|0;
 $base = $base|0;
 $line = $line|0;
 $nvars = $nvars|0;
 $isnum = $isnum|0;
 var $$01$i14 = 0, $$idx$val$i = 0, $$idx$val$i3 = 0, $$idx$val$idx$i = 0, $$idx$val$idx$i8 = 0, $$idx$val$idx$val$i = 0, $$idx$val$idx$val$i9 = 0, $$idx1$i = 0, $$idx1$i4 = 0, $$idx1$val$i = 0, $$idx1$val$i5 = 0, $$idx1$val$idx$i = 0, $$idx1$val$idx$i10 = 0, $$idx1$val$idx$val$i = 0, $$idx1$val$idx$val$i11 = 0, $$idx1$val$idx$val$idx$val$i = 0, $$idx1$val$idx$val$idx$val$i13 = 0, $$idx2$i = 0, $$idx2$i6 = 0, $$idx2$val$i = 0;
 var $$idx2$val$i7 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $bl = 0, $bl$i = 0, $endfor$0 = 0, $ls$idx$val = 0, $ls$idx$val$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $bl$i = sp + 12|0;
 $bl = sp;
 $0 = ((($ls)) + 48|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 46|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = $3&255;
 $5 = (($4) + 3)|0;
 $6 = $5&255;
 HEAP8[$2>>0] = $6;
 $7 = ((($1)) + 20|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $5 & 255;
 $$idx$val$i = HEAP32[$1>>2]|0;
 $$idx1$i = ((($1)) + 12|0);
 $$idx1$val$i = HEAP32[$$idx1$i>>2]|0;
 $$idx2$i = ((($1)) + 40|0);
 $$idx2$val$i = HEAP32[$$idx2$i>>2]|0;
 $$idx$val$idx$i = ((($$idx$val$i)) + 24|0);
 $$idx$val$idx$val$i = HEAP32[$$idx$val$idx$i>>2]|0;
 $$idx1$val$idx$i = ((($$idx1$val$i)) + 64|0);
 $$idx1$val$idx$val$i = HEAP32[$$idx1$val$idx$i>>2]|0;
 $$idx1$val$idx$val$idx$val$i = HEAP32[$$idx1$val$idx$val$i>>2]|0;
 $10 = (($$idx2$val$i) + ($9))|0;
 $11 = (($10) + -3)|0;
 $12 = (($$idx1$val$idx$val$idx$val$i) + ($11<<1)|0);
 $13 = HEAP16[$12>>1]|0;
 $14 = $13 << 16 >> 16;
 $15 = (((($$idx$val$idx$val$i) + (($14*12)|0)|0)) + 4|0);
 HEAP32[$15>>2] = $8;
 $16 = (($10) + -2)|0;
 $17 = (($$idx1$val$idx$val$idx$val$i) + ($16<<1)|0);
 $18 = HEAP16[$17>>1]|0;
 $19 = $18 << 16 >> 16;
 $20 = (((($$idx$val$idx$val$i) + (($19*12)|0)|0)) + 4|0);
 HEAP32[$20>>2] = $8;
 $21 = (($10) + -1)|0;
 $22 = (($$idx1$val$idx$val$idx$val$i) + ($21<<1)|0);
 $23 = HEAP16[$22>>1]|0;
 $24 = $23 << 16 >> 16;
 $25 = (((($$idx$val$idx$val$i) + (($24*12)|0)|0)) + 4|0);
 HEAP32[$25>>2] = $8;
 $26 = ((($ls)) + 16|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = ($27|0)==(259);
 if (!($28)) {
  _error_expected($ls,259);
  // unreachable;
 }
 _luaX_next($ls);
 $29 = ($isnum|0)!=(0);
 if ($29) {
  $30 = (_luaK_codeABx($1,33,$base,131070)|0);
  $87 = $30;
 } else {
  $31 = (_luaK_jump($1)|0);
  $87 = $31;
 }
 $32 = ((($bl)) + 10|0);
 HEAP8[$32>>0] = 0;
 $33 = HEAP8[$2>>0]|0;
 $34 = ((($bl)) + 8|0);
 HEAP8[$34>>0] = $33;
 $35 = HEAP32[$$idx1$i>>2]|0;
 $36 = ((($35)) + 64|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = ((($37)) + 28|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = $39&65535;
 $41 = ((($bl)) + 4|0);
 HEAP16[$41>>1] = $40;
 $42 = ((($37)) + 16|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = $43&65535;
 $45 = ((($bl)) + 6|0);
 HEAP16[$45>>1] = $44;
 $46 = ((($bl)) + 9|0);
 HEAP8[$46>>0] = 0;
 $47 = ((($1)) + 16|0);
 $48 = HEAP32[$47>>2]|0;
 HEAP32[$bl>>2] = $48;
 HEAP32[$47>>2] = $bl;
 $ls$idx$val = HEAP32[$0>>2]|0;
 $49 = ((($ls$idx$val)) + 46|0);
 $50 = HEAP8[$49>>0]|0;
 $51 = $50&255;
 $52 = (($51) + ($nvars))|0;
 $53 = $52&255;
 HEAP8[$49>>0] = $53;
 $54 = ($nvars|0)==(0);
 if (!($54)) {
  $55 = ((($ls$idx$val)) + 20|0);
  $56 = HEAP32[$55>>2]|0;
  $57 = $52 & 255;
  $$idx$val$i3 = HEAP32[$ls$idx$val>>2]|0;
  $$idx1$i4 = ((($ls$idx$val)) + 12|0);
  $$idx1$val$i5 = HEAP32[$$idx1$i4>>2]|0;
  $$idx2$i6 = ((($ls$idx$val)) + 40|0);
  $$idx2$val$i7 = HEAP32[$$idx2$i6>>2]|0;
  $$idx$val$idx$i8 = ((($$idx$val$i3)) + 24|0);
  $$idx$val$idx$val$i9 = HEAP32[$$idx$val$idx$i8>>2]|0;
  $$idx1$val$idx$i10 = ((($$idx1$val$i5)) + 64|0);
  $$idx1$val$idx$val$i11 = HEAP32[$$idx1$val$idx$i10>>2]|0;
  $$idx1$val$idx$val$idx$val$i13 = HEAP32[$$idx1$val$idx$val$i11>>2]|0;
  $58 = (($$idx2$val$i7) + ($57))|0;
  $$01$i14 = $nvars;
  while(1) {
   $59 = (($58) - ($$01$i14))|0;
   $60 = (($$idx1$val$idx$val$idx$val$i13) + ($59<<1)|0);
   $61 = HEAP16[$60>>1]|0;
   $62 = $61 << 16 >> 16;
   $63 = (((($$idx$val$idx$val$i9) + (($62*12)|0)|0)) + 4|0);
   HEAP32[$63>>2] = $56;
   $64 = (($$01$i14) + -1)|0;
   $65 = ($64|0)==(0);
   if ($65) {
    break;
   } else {
    $$01$i14 = $64;
   }
  }
 }
 _luaK_reserveregs($1,$nvars);
 $66 = HEAP32[$0>>2]|0;
 $67 = ((($bl$i)) + 10|0);
 HEAP8[$67>>0] = 0;
 $68 = ((($66)) + 46|0);
 $69 = HEAP8[$68>>0]|0;
 $70 = ((($bl$i)) + 8|0);
 HEAP8[$70>>0] = $69;
 $71 = ((($66)) + 12|0);
 $72 = HEAP32[$71>>2]|0;
 $73 = ((($72)) + 64|0);
 $74 = HEAP32[$73>>2]|0;
 $75 = ((($74)) + 28|0);
 $76 = HEAP32[$75>>2]|0;
 $77 = $76&65535;
 $78 = ((($bl$i)) + 4|0);
 HEAP16[$78>>1] = $77;
 $79 = ((($74)) + 16|0);
 $80 = HEAP32[$79>>2]|0;
 $81 = $80&65535;
 $82 = ((($bl$i)) + 6|0);
 HEAP16[$82>>1] = $81;
 $83 = ((($bl$i)) + 9|0);
 HEAP8[$83>>0] = 0;
 $84 = ((($66)) + 16|0);
 $85 = HEAP32[$84>>2]|0;
 HEAP32[$bl$i>>2] = $85;
 HEAP32[$84>>2] = $bl$i;
 L13: while(1) {
  $ls$idx$val$i$i = HEAP32[$26>>2]|0;
  switch ($ls$idx$val$i$i|0) {
  case 277: case 286: case 262: case 261: case 260:  {
   break L13;
   break;
  }
  default: {
  }
  }
  $86 = ($ls$idx$val$i$i|0)==(274);
  _statement($ls);
  if ($86) {
   break;
  }
 }
 _leaveblock($66);
 _leaveblock($1);
 _luaK_patchtohere($1,$87);
 if ($29) {
  $88 = (_luaK_codeABx($1,32,$base,131070)|0);
  $endfor$0 = $88;
  $91 = (($87) + 1)|0;
  _luaK_patchlist($1,$endfor$0,$91);
  _luaK_fixline($1,$line);
  STACKTOP = sp;return;
 } else {
  (_luaK_codeABC($1,34,$base,0,$nvars)|0);
  _luaK_fixline($1,$line);
  $89 = (($base) + 2)|0;
  $90 = (_luaK_codeABx($1,35,$89,131070)|0);
  $endfor$0 = $90;
  $91 = (($87) + 1)|0;
  _luaK_patchlist($1,$endfor$0,$91);
  _luaK_fixline($1,$line);
  STACKTOP = sp;return;
 }
}
function _singlevaraux($fs,$n,$var,$base) {
 $fs = $fs|0;
 $n = $n|0;
 $var = $var|0;
 $base = $base|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $bl$0$i = 0, $bl$0$i$lcssa = 0, $bl$0$in$i = 0, $fs$idx$val$i = 0, $fs$idx$val$i$lcssa = 0, $fs$idx$val$idx$i = 0, $fs$idx$val$idx$val$i = 0, $fs$idx1$i = 0, $fs$idx1$val$i = 0, $fs$idx1$val$idx$i = 0, $fs$idx1$val$idx$val$i = 0, $fs$idx1$val$idx$val$idx$val$i = 0, $fs$idx2$i = 0, $fs$idx2$val$i = 0;
 var $i$0$i = 0, $i$0$i$lcssa17 = 0, $i$0$in$i = 0, $i$01$i = 0, $i$01$i$lcssa = 0, $idx$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($fs|0)==(0|0);
 if ($0) {
  $$0 = 0;
  return ($$0|0);
 }
 $1 = ((($fs)) + 46|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = $2&255;
 $fs$idx1$i = ((($fs)) + 12|0);
 $fs$idx2$i = ((($fs)) + 40|0);
 $i$0$in$i = $3;
 while(1) {
  $i$0$i = (($i$0$in$i) + -1)|0;
  $4 = ($i$0$in$i|0)>(0);
  $fs$idx$val$i = HEAP32[$fs>>2]|0;
  if (!($4)) {
   $fs$idx$val$i$lcssa = $fs$idx$val$i;
   break;
  }
  $fs$idx1$val$i = HEAP32[$fs$idx1$i>>2]|0;
  $fs$idx2$val$i = HEAP32[$fs$idx2$i>>2]|0;
  $fs$idx$val$idx$i = ((($fs$idx$val$i)) + 24|0);
  $fs$idx$val$idx$val$i = HEAP32[$fs$idx$val$idx$i>>2]|0;
  $fs$idx1$val$idx$i = ((($fs$idx1$val$i)) + 64|0);
  $fs$idx1$val$idx$val$i = HEAP32[$fs$idx1$val$idx$i>>2]|0;
  $fs$idx1$val$idx$val$idx$val$i = HEAP32[$fs$idx1$val$idx$val$i>>2]|0;
  $5 = (($fs$idx2$val$i) + ($i$0$i))|0;
  $6 = (($fs$idx1$val$idx$val$idx$val$i) + ($5<<1)|0);
  $7 = HEAP16[$6>>1]|0;
  $8 = $7 << 16 >> 16;
  $9 = (($fs$idx$val$idx$val$i) + (($8*12)|0)|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = (_luaS_eqstr($n,$10)|0);
  $12 = ($11|0)==(0);
  if ($12) {
   $i$0$in$i = $i$0$i;
  } else {
   $i$0$i$lcssa17 = $i$0$i;
   label = 5;
   break;
  }
 }
 if ((label|0) == 5) {
  $13 = ((($var)) + 16|0);
  HEAP32[$13>>2] = -1;
  $14 = ((($var)) + 20|0);
  HEAP32[$14>>2] = -1;
  HEAP32[$var>>2] = 7;
  $15 = ((($var)) + 8|0);
  HEAP32[$15>>2] = $i$0$i$lcssa17;
  $16 = ($base|0)==(0);
  if (!($16)) {
   $$0 = 7;
   return ($$0|0);
  }
  $17 = ((($fs)) + 16|0);
  $bl$0$in$i = $17;
  while(1) {
   $bl$0$i = HEAP32[$bl$0$in$i>>2]|0;
   $18 = ((($bl$0$i)) + 8|0);
   $19 = HEAP8[$18>>0]|0;
   $20 = $19&255;
   $21 = ($20|0)>($i$0$i$lcssa17|0);
   if ($21) {
    $bl$0$in$i = $bl$0$i;
   } else {
    $bl$0$i$lcssa = $bl$0$i;
    break;
   }
  }
  $22 = ((($bl$0$i$lcssa)) + 9|0);
  HEAP8[$22>>0] = 1;
  $$0 = 7;
  return ($$0|0);
 }
 $23 = ((($fs$idx$val$i$lcssa)) + 28|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = ((($fs)) + 47|0);
 $26 = HEAP8[$25>>0]|0;
 $27 = ($26<<24>>24)==(0);
 L17: do {
  if ($27) {
   label = 13;
  } else {
   $i$01$i = 0;
   while(1) {
    $28 = (($24) + ($i$01$i<<3)|0);
    $29 = HEAP32[$28>>2]|0;
    $30 = (_luaS_eqstr($29,$n)|0);
    $31 = ($30|0)==(0);
    if (!($31)) {
     $i$01$i$lcssa = $i$01$i;
     break;
    }
    $32 = (($i$01$i) + 1)|0;
    $33 = HEAP8[$25>>0]|0;
    $34 = $33&255;
    $35 = ($32|0)<($34|0);
    if ($35) {
     $i$01$i = $32;
    } else {
     label = 13;
     break L17;
    }
   }
   $36 = ($i$01$i$lcssa|0)<(0);
   if ($36) {
    label = 13;
   } else {
    $idx$0 = $i$01$i$lcssa;
   }
  }
 } while(0);
 do {
  if ((label|0) == 13) {
   $37 = ((($fs)) + 8|0);
   $38 = HEAP32[$37>>2]|0;
   $39 = (_singlevaraux($38,$n,$var,0)|0);
   $40 = ($39|0)==(0);
   if ($40) {
    $$0 = 0;
    return ($$0|0);
   } else {
    $41 = (_newupvalue($fs,$n,$var)|0);
    $idx$0 = $41;
    break;
   }
  }
 } while(0);
 $42 = ((($var)) + 16|0);
 HEAP32[$42>>2] = -1;
 $43 = ((($var)) + 20|0);
 HEAP32[$43>>2] = -1;
 HEAP32[$var>>2] = 8;
 $44 = ((($var)) + 8|0);
 HEAP32[$44>>2] = $idx$0;
 $$0 = 8;
 return ($$0|0);
}
function _fieldsel($ls,$v) {
 $ls = $ls|0;
 $v = $v|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $key = 0, $ls$idx$val$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $key = sp;
 $0 = ((($ls)) + 48|0);
 $1 = HEAP32[$0>>2]|0;
 _luaK_exp2anyregup($1,$v);
 _luaX_next($ls);
 $2 = ((($ls)) + 16|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(288);
 if ($4) {
  $5 = ((($ls)) + 24|0);
  $6 = HEAP32[$5>>2]|0;
  _luaX_next($ls);
  $ls$idx$val$i = HEAP32[$0>>2]|0;
  $7 = (_luaK_stringK($ls$idx$val$i,$6)|0);
  $8 = ((($key)) + 16|0);
  HEAP32[$8>>2] = -1;
  $9 = ((($key)) + 20|0);
  HEAP32[$9>>2] = -1;
  HEAP32[$key>>2] = 4;
  $10 = ((($key)) + 8|0);
  HEAP32[$10>>2] = $7;
  _luaK_indexed($1,$v,$key);
  STACKTOP = sp;return;
 } else {
  _error_expected($ls,288);
  // unreachable;
 }
}
function _body($ls,$e,$ismethod,$line) {
 $ls = $ls|0;
 $e = $e|0;
 $ismethod = $ismethod|0;
 $line = $line|0;
 var $$01$i$i = 0, $$idx$val$i = 0, $$idx$val$i$i = 0, $$idx$val$idx$i = 0, $$idx$val$idx$i$i = 0, $$idx$val$idx$val$i = 0, $$idx$val$idx$val$i$i = 0, $$idx1$i = 0, $$idx1$i$i = 0, $$idx1$val$i = 0, $$idx1$val$i$i = 0, $$idx1$val$idx$i = 0, $$idx1$val$idx$i$i = 0, $$idx1$val$idx$val$i = 0, $$idx1$val$idx$val$i$i = 0, $$idx1$val$idx$val$idx$val$i = 0, $$idx1$val$idx$val$idx$val$i$i = 0, $$idx2$i = 0, $$idx2$i$i = 0, $$idx2$val$i = 0;
 var $$idx2$val$i$i = 0, $$pr$i = 0, $$pr1$i = 0, $$pre = 0, $$pre$i = 0, $$pre14 = 0, $$pre15 = 0, $$pre3$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0;
 var $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0;
 var $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0;
 var $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $bl = 0, $exitcond = 0, $ls$idx = 0, $ls$idx$val = 0, $ls$idx$val$i = 0, $ls$idx$val$i7 = 0, $ls$idx1 = 0, $ls$idx1$val = 0, $ls$idx2$val = 0, $ls$idx3$val = 0, $ls$idx3$val$idx = 0, $ls$idx3$val$idx$val = 0, $new_fs = 0, $nparams$0$i = 0, $nparams$0$i$lcssa26 = 0, $nparams$2$i = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $new_fs = sp + 24|0;
 $bl = sp + 12|0;
 $ls$idx = ((($ls)) + 48|0);
 $ls$idx$val = HEAP32[$ls$idx>>2]|0;
 $ls$idx1 = ((($ls)) + 52|0);
 $ls$idx1$val = HEAP32[$ls$idx1>>2]|0;
 $0 = HEAP32[$ls$idx$val>>2]|0;
 $1 = ((($ls$idx$val)) + 36|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 56|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($2|0)<($4|0);
 $$pre3$i = ((($0)) + 16|0);
 if (!($5)) {
  $6 = HEAP32[$$pre3$i>>2]|0;
  $7 = (_luaM_growaux_($ls$idx1$val,$6,$3,4,262143,6685)|0);
  HEAP32[$$pre3$i>>2] = $7;
  $8 = HEAP32[$3>>2]|0;
  $9 = ($4|0)<($8|0);
  if ($9) {
   $10 = (($4) + 1)|0;
   $11 = (($7) + ($4<<2)|0);
   HEAP32[$11>>2] = 0;
   $12 = ($10|0)<($8|0);
   if ($12) {
    $14 = $10;
    while(1) {
     $$pre$i = HEAP32[$$pre3$i>>2]|0;
     $13 = (($14) + 1)|0;
     $15 = (($$pre$i) + ($14<<2)|0);
     HEAP32[$15>>2] = 0;
     $exitcond = ($13|0)==($8|0);
     if ($exitcond) {
      break;
     } else {
      $14 = $13;
     }
    }
   }
  }
 }
 $16 = (_luaF_newproto($ls$idx1$val)|0);
 $17 = HEAP32[$1>>2]|0;
 $18 = (($17) + 1)|0;
 HEAP32[$1>>2] = $18;
 $19 = HEAP32[$$pre3$i>>2]|0;
 $20 = (($19) + ($17<<2)|0);
 HEAP32[$20>>2] = $16;
 $21 = ((($16)) + 5|0);
 $22 = HEAP8[$21>>0]|0;
 $23 = $22 & 3;
 $24 = ($23<<24>>24)==(0);
 if (!($24)) {
  $25 = ((($0)) + 5|0);
  $26 = HEAP8[$25>>0]|0;
  $27 = $26 & 4;
  $28 = ($27<<24>>24)==(0);
  if (!($28)) {
   _luaC_barrier_($ls$idx1$val,$0,$16);
  }
 }
 HEAP32[$new_fs>>2] = $16;
 $29 = ((($16)) + 64|0);
 HEAP32[$29>>2] = $line;
 $30 = HEAP32[$ls$idx1>>2]|0;
 $31 = HEAP32[$ls$idx>>2]|0;
 $32 = ((($new_fs)) + 8|0);
 HEAP32[$32>>2] = $31;
 $33 = ((($new_fs)) + 12|0);
 HEAP32[$33>>2] = $ls;
 HEAP32[$ls$idx>>2] = $new_fs;
 $34 = ((($new_fs)) + 20|0);
 HEAP32[$34>>2] = 0;
 $35 = ((($new_fs)) + 24|0);
 HEAP32[$35>>2] = 0;
 $36 = ((($new_fs)) + 28|0);
 HEAP32[$36>>2] = -1;
 $37 = ((($new_fs)) + 32|0);
 HEAP32[$37>>2] = 0;
 $38 = ((($new_fs)) + 36|0);
 HEAP32[$38>>2] = 0;
 $39 = ((($new_fs)) + 44|0);
 $40 = ((($ls)) + 64|0);
 ;HEAP32[$39>>2]=0|0;HEAP8[$39+4>>0]=0|0;
 $41 = HEAP32[$40>>2]|0;
 $42 = ((($41)) + 4|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = ((($new_fs)) + 40|0);
 HEAP32[$44>>2] = $43;
 $45 = ((($new_fs)) + 16|0);
 HEAP32[$45>>2] = 0;
 $46 = ((($ls)) + 68|0);
 $47 = HEAP32[$46>>2]|0;
 $48 = ((($16)) + 36|0);
 HEAP32[$48>>2] = $47;
 $49 = ((($16)) + 78|0);
 HEAP8[$49>>0] = 2;
 $50 = (_luaH_new($30)|0);
 $51 = ((($new_fs)) + 4|0);
 HEAP32[$51>>2] = $50;
 $52 = ((($30)) + 8|0);
 $53 = HEAP32[$52>>2]|0;
 HEAP32[$53>>2] = $50;
 $54 = ((($53)) + 8|0);
 HEAP32[$54>>2] = 69;
 $55 = HEAP32[$52>>2]|0;
 $56 = ((($55)) + 16|0);
 HEAP32[$52>>2] = $56;
 $57 = ((($30)) + 24|0);
 $58 = HEAP32[$57>>2]|0;
 $59 = $58;
 $60 = $56;
 $61 = (($59) - ($60))|0;
 $62 = ($61|0)<(16);
 if ($62) {
  _luaD_growstack($30,0);
 }
 $63 = ((($bl)) + 10|0);
 HEAP8[$63>>0] = 0;
 $64 = ((($new_fs)) + 46|0);
 $65 = HEAP8[$64>>0]|0;
 $66 = ((($bl)) + 8|0);
 HEAP8[$66>>0] = $65;
 $67 = HEAP32[$33>>2]|0;
 $68 = ((($67)) + 64|0);
 $69 = HEAP32[$68>>2]|0;
 $70 = ((($69)) + 28|0);
 $71 = HEAP32[$70>>2]|0;
 $72 = $71&65535;
 $73 = ((($bl)) + 4|0);
 HEAP16[$73>>1] = $72;
 $74 = ((($69)) + 16|0);
 $75 = HEAP32[$74>>2]|0;
 $76 = $75&65535;
 $77 = ((($bl)) + 6|0);
 HEAP16[$77>>1] = $76;
 $78 = ((($bl)) + 9|0);
 HEAP8[$78>>0] = 0;
 $79 = HEAP32[$45>>2]|0;
 HEAP32[$bl>>2] = $79;
 HEAP32[$45>>2] = $bl;
 $80 = ((($ls)) + 16|0);
 $81 = HEAP32[$80>>2]|0;
 $82 = ($81|0)==(40);
 if (!($82)) {
  _error_expected($ls,40);
  // unreachable;
 }
 _luaX_next($ls);
 $83 = ($ismethod|0)==(0);
 if ($83) {
  $$pre = HEAP32[$ls$idx>>2]|0;
  $$pre14 = HEAP32[$$pre>>2]|0;
  $100 = $$pre14;$128 = $$pre;
 } else {
  $84 = (_luaX_newstring($ls,6695,4)|0);
  _new_localvar($ls,$84);
  $ls$idx2$val = HEAP32[$ls$idx>>2]|0;
  $85 = ((($ls$idx2$val)) + 46|0);
  $86 = HEAP8[$85>>0]|0;
  $87 = $86&255;
  $88 = (($87) + 1)|0;
  $89 = $88&255;
  HEAP8[$85>>0] = $89;
  $90 = ((($ls$idx2$val)) + 20|0);
  $91 = HEAP32[$90>>2]|0;
  $92 = $88 & 255;
  $$idx$val$i = HEAP32[$ls$idx2$val>>2]|0;
  $$idx1$i = ((($ls$idx2$val)) + 12|0);
  $$idx1$val$i = HEAP32[$$idx1$i>>2]|0;
  $$idx2$i = ((($ls$idx2$val)) + 40|0);
  $$idx2$val$i = HEAP32[$$idx2$i>>2]|0;
  $$idx$val$idx$i = ((($$idx$val$i)) + 24|0);
  $$idx$val$idx$val$i = HEAP32[$$idx$val$idx$i>>2]|0;
  $$idx1$val$idx$i = ((($$idx1$val$i)) + 64|0);
  $$idx1$val$idx$val$i = HEAP32[$$idx1$val$idx$i>>2]|0;
  $$idx1$val$idx$val$idx$val$i = HEAP32[$$idx1$val$idx$val$i>>2]|0;
  $93 = (($$idx2$val$i) + ($92))|0;
  $94 = (($93) + -1)|0;
  $95 = (($$idx1$val$idx$val$idx$val$i) + ($94<<1)|0);
  $96 = HEAP16[$95>>1]|0;
  $97 = $96 << 16 >> 16;
  $98 = (((($$idx$val$idx$val$i) + (($97*12)|0)|0)) + 4|0);
  HEAP32[$98>>2] = $91;
  $100 = $$idx$val$i;$128 = $ls$idx2$val;
 }
 $99 = ((($100)) + 77|0);
 HEAP8[$99>>0] = 0;
 $101 = HEAP32[$80>>2]|0;
 $102 = ($101|0)==(41);
 L21: do {
  if ($102) {
   $nparams$2$i = 0;
  } else {
   $103 = ((($ls)) + 24|0);
   $104 = $101;$nparams$0$i = 0;
   L23: while(1) {
    switch ($104|0) {
    case 280:  {
     $nparams$0$i$lcssa26 = $nparams$0$i;
     label = 19;
     break L23;
     break;
    }
    case 288:  {
     break;
    }
    default: {
     label = 20;
     break L23;
    }
    }
    $105 = HEAP32[$103>>2]|0;
    _luaX_next($ls);
    _new_localvar($ls,$105);
    $106 = (($nparams$0$i) + 1)|0;
    $$pr1$i = HEAP8[$99>>0]|0;
    $107 = ($$pr1$i<<24>>24)==(0);
    if (!($107)) {
     $nparams$2$i = $106;
     break L21;
    }
    $108 = HEAP32[$80>>2]|0;
    $109 = ($108|0)==(44);
    if (!($109)) {
     $nparams$2$i = $106;
     break L21;
    }
    _luaX_next($ls);
    $$pr$i = HEAP32[$80>>2]|0;
    $104 = $$pr$i;$nparams$0$i = $106;
   }
   if ((label|0) == 19) {
    _luaX_next($ls);
    HEAP8[$99>>0] = 1;
    $nparams$2$i = $nparams$0$i$lcssa26;
    break;
   }
   else if ((label|0) == 20) {
    _luaX_syntaxerror($ls,6700);
    // unreachable;
   }
  }
 } while(0);
 $ls$idx$val$i = HEAP32[$ls$idx>>2]|0;
 $110 = ((($ls$idx$val$i)) + 46|0);
 $111 = HEAP8[$110>>0]|0;
 $112 = $111&255;
 $113 = (($112) + ($nparams$2$i))|0;
 $114 = $113&255;
 HEAP8[$110>>0] = $114;
 $115 = ($nparams$2$i|0)==(0);
 if (!($115)) {
  $116 = ((($ls$idx$val$i)) + 20|0);
  $117 = HEAP32[$116>>2]|0;
  $118 = $113 & 255;
  $$idx$val$i$i = HEAP32[$ls$idx$val$i>>2]|0;
  $$idx1$i$i = ((($ls$idx$val$i)) + 12|0);
  $$idx1$val$i$i = HEAP32[$$idx1$i$i>>2]|0;
  $$idx2$i$i = ((($ls$idx$val$i)) + 40|0);
  $$idx2$val$i$i = HEAP32[$$idx2$i$i>>2]|0;
  $$idx$val$idx$i$i = ((($$idx$val$i$i)) + 24|0);
  $$idx$val$idx$val$i$i = HEAP32[$$idx$val$idx$i$i>>2]|0;
  $$idx1$val$idx$i$i = ((($$idx1$val$i$i)) + 64|0);
  $$idx1$val$idx$val$i$i = HEAP32[$$idx1$val$idx$i$i>>2]|0;
  $$idx1$val$idx$val$idx$val$i$i = HEAP32[$$idx1$val$idx$val$i$i>>2]|0;
  $119 = (($$idx2$val$i$i) + ($118))|0;
  $$01$i$i = $nparams$2$i;
  while(1) {
   $120 = (($119) - ($$01$i$i))|0;
   $121 = (($$idx1$val$idx$val$idx$val$i$i) + ($120<<1)|0);
   $122 = HEAP16[$121>>1]|0;
   $123 = $122 << 16 >> 16;
   $124 = (((($$idx$val$idx$val$i$i) + (($123*12)|0)|0)) + 4|0);
   HEAP32[$124>>2] = $117;
   $125 = (($$01$i$i) + -1)|0;
   $126 = ($125|0)==(0);
   if ($126) {
    break;
   } else {
    $$01$i$i = $125;
   }
  }
 }
 $127 = ((($128)) + 46|0);
 $129 = HEAP8[$127>>0]|0;
 $130 = ((($100)) + 76|0);
 HEAP8[$130>>0] = $129;
 $131 = $129&255;
 _luaK_reserveregs($128,$131);
 $132 = HEAP32[$80>>2]|0;
 $133 = ($132|0)==(41);
 if (!($133)) {
  _error_expected($ls,41);
  // unreachable;
 }
 _luaX_next($ls);
 L40: while(1) {
  $ls$idx$val$i7 = HEAP32[$80>>2]|0;
  switch ($ls$idx$val$i7|0) {
  case 277: case 286: case 262: case 261: case 260:  {
   $140 = $ls$idx$val$i7;
   break L40;
   break;
  }
  default: {
  }
  }
  $134 = ($ls$idx$val$i7|0)==(274);
  _statement($ls);
  if ($134) {
   label = 31;
   break;
  }
 }
 if ((label|0) == 31) {
  $$pre15 = HEAP32[$80>>2]|0;
  $140 = $$pre15;
 }
 $135 = ((($ls)) + 4|0);
 $136 = HEAP32[$135>>2]|0;
 $137 = HEAP32[$new_fs>>2]|0;
 $138 = ((($137)) + 68|0);
 HEAP32[$138>>2] = $136;
 $139 = ($140|0)==(262);
 if ($139) {
  _luaX_next($ls);
  $ls$idx3$val = HEAP32[$ls$idx>>2]|0;
  $ls$idx3$val$idx = ((($ls$idx3$val)) + 8|0);
  $ls$idx3$val$idx$val = HEAP32[$ls$idx3$val$idx>>2]|0;
  $146 = ((($ls$idx3$val$idx$val)) + 36|0);
  $147 = HEAP32[$146>>2]|0;
  $148 = (($147) + -1)|0;
  $149 = (_luaK_codeABx($ls$idx3$val$idx$val,37,0,$148)|0);
  $150 = ((($e)) + 16|0);
  HEAP32[$150>>2] = -1;
  $151 = ((($e)) + 20|0);
  HEAP32[$151>>2] = -1;
  HEAP32[$e>>2] = 11;
  $152 = ((($e)) + 8|0);
  HEAP32[$152>>2] = $149;
  _luaK_exp2nextreg($ls$idx3$val$idx$val,$e);
  _close_func($ls);
  STACKTOP = sp;return;
 }
 $141 = ($136|0)==($line|0);
 if ($141) {
  _error_expected($ls,262);
  // unreachable;
 } else {
  $142 = HEAP32[$ls$idx1>>2]|0;
  $143 = (_luaX_token2str($ls,262)|0);
  $144 = (_luaX_token2str($ls,265)|0);
  HEAP32[$vararg_buffer>>2] = $143;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $144;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = $line;
  $145 = (_luaO_pushfstring($142,6430,$vararg_buffer)|0);
  _luaX_syntaxerror($ls,$145);
  // unreachable;
 }
}
function _suffixedexp($ls,$v) {
 $ls = $ls|0;
 $v = $v|0;
 var $$pre = 0, $$pre$phi2Z2D = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $key = 0, $key$i$i = 0, $key1 = 0, $ls$idx$val$i = 0, $ls$idx$val$i$i = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp + 72|0;
 $key$i$i = sp + 48|0;
 $key = sp + 24|0;
 $key1 = sp;
 $0 = ((($ls)) + 48|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($ls)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($ls)) + 16|0);
 $5 = HEAP32[$4>>2]|0;
 L1: do {
  switch ($5|0) {
  case 40:  {
   _luaX_next($ls);
   (_subexpr($ls,$v,0)|0);
   $6 = HEAP32[$4>>2]|0;
   $7 = ($6|0)==(41);
   if ($7) {
    _luaX_next($ls);
    $15 = HEAP32[$0>>2]|0;
    _luaK_dischargevars($15,$v);
    $$pre = ((($ls)) + 24|0);
    $$pre$phi2Z2D = $$pre;
    break L1;
   }
   $8 = HEAP32[$2>>2]|0;
   $9 = ($8|0)==($3|0);
   if ($9) {
    _error_expected($ls,41);
    // unreachable;
   } else {
    $10 = ((($ls)) + 52|0);
    $11 = HEAP32[$10>>2]|0;
    $12 = (_luaX_token2str($ls,41)|0);
    $13 = (_luaX_token2str($ls,40)|0);
    HEAP32[$vararg_buffer>>2] = $12;
    $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
    HEAP32[$vararg_ptr1>>2] = $13;
    $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
    HEAP32[$vararg_ptr2>>2] = $3;
    $14 = (_luaO_pushfstring($11,6430,$vararg_buffer)|0);
    _luaX_syntaxerror($ls,$14);
    // unreachable;
   }
   break;
  }
  case 288:  {
   $16 = ((($ls)) + 24|0);
   $17 = HEAP32[$16>>2]|0;
   _luaX_next($ls);
   $18 = HEAP32[$0>>2]|0;
   $19 = (_singlevaraux($18,$17,$v,1)|0);
   $20 = ($19|0)==(0);
   if ($20) {
    $21 = ((($ls)) + 72|0);
    $22 = HEAP32[$21>>2]|0;
    (_singlevaraux($18,$22,$v,1)|0);
    $ls$idx$val$i$i = HEAP32[$0>>2]|0;
    $23 = (_luaK_stringK($ls$idx$val$i$i,$17)|0);
    $24 = ((($key$i$i)) + 16|0);
    HEAP32[$24>>2] = -1;
    $25 = ((($key$i$i)) + 20|0);
    HEAP32[$25>>2] = -1;
    HEAP32[$key$i$i>>2] = 4;
    $26 = ((($key$i$i)) + 8|0);
    HEAP32[$26>>2] = $23;
    _luaK_indexed($18,$v,$key$i$i);
   }
   $$pre$phi2Z2D = $16;
   break;
  }
  default: {
   _luaX_syntaxerror($ls,6616);
   // unreachable;
  }
  }
 } while(0);
 $27 = ((($key1)) + 16|0);
 $28 = ((($key1)) + 20|0);
 $29 = ((($key1)) + 8|0);
 L15: while(1) {
  $30 = HEAP32[$4>>2]|0;
  switch ($30|0) {
  case 46:  {
   _fieldsel($ls,$v);
   continue L15;
   break;
  }
  case 91:  {
   _luaK_exp2anyregup($1,$v);
   _luaX_next($ls);
   (_subexpr($ls,$key,0)|0);
   $31 = HEAP32[$0>>2]|0;
   _luaK_exp2val($31,$key);
   $32 = HEAP32[$4>>2]|0;
   $33 = ($32|0)==(93);
   if (!($33)) {
    label = 15;
    break L15;
   }
   _luaX_next($ls);
   _luaK_indexed($1,$v,$key);
   continue L15;
   break;
  }
  case 58:  {
   _luaX_next($ls);
   $34 = HEAP32[$4>>2]|0;
   $35 = ($34|0)==(288);
   if (!($35)) {
    label = 18;
    break L15;
   }
   $36 = HEAP32[$$pre$phi2Z2D>>2]|0;
   _luaX_next($ls);
   $ls$idx$val$i = HEAP32[$0>>2]|0;
   $37 = (_luaK_stringK($ls$idx$val$i,$36)|0);
   HEAP32[$27>>2] = -1;
   HEAP32[$28>>2] = -1;
   HEAP32[$key1>>2] = 4;
   HEAP32[$29>>2] = $37;
   _luaK_self($1,$v,$key1);
   _funcargs($ls,$v,$3);
   continue L15;
   break;
  }
  case 123: case 289: case 40:  {
   _luaK_exp2nextreg($1,$v);
   _funcargs($ls,$v,$3);
   continue L15;
   break;
  }
  default: {
   label = 21;
   break L15;
  }
  }
 }
 if ((label|0) == 15) {
  _error_expected($ls,93);
  // unreachable;
 }
 else if ((label|0) == 18) {
  _error_expected($ls,288);
  // unreachable;
 }
 else if ((label|0) == 21) {
  STACKTOP = sp;return;
 }
}
function _assignment($ls,$lh,$nvars) {
 $ls = $ls|0;
 $lh = $lh|0;
 $nvars = $nvars|0;
 var $$$i = 0, $$02$i = 0, $$02$i$us = 0, $$off = 0, $$pre$phi4Z2D = 0, $$pre$phiZ2D = 0, $$pre5 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $conflict$01$i = 0, $conflict$01$i$us = 0, $conflict$1$i$us = 0, $conflict$2$i = 0, $conflict$2$i$lcssa = 0, $conflict$2$i$us = 0, $e = 0, $ls$idx1$val = 0, $n$0$i$lcssa = 0, $n$0$i2 = 0;
 var $nv = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_ptr4 = 0, $vararg_ptr5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 64|0;
 $vararg_buffer = sp + 56|0;
 $e = sp + 32|0;
 $nv = sp;
 $0 = ((($lh)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $$off = (($1) + -7)|0;
 $2 = ($$off>>>0)<(3);
 if (!($2)) {
  _luaX_syntaxerror($ls,6603);
  // unreachable;
 }
 $3 = ((($ls)) + 16|0);
 $4 = HEAP32[$3>>2]|0;
 L4: do {
  switch ($4|0) {
  case 44:  {
   _luaX_next($ls);
   HEAP32[$nv>>2] = $lh;
   $5 = ((($nv)) + 8|0);
   _suffixedexp($ls,$5);
   $6 = HEAP32[$5>>2]|0;
   $7 = ($6|0)==(9);
   $$pre5 = ((($ls)) + 48|0);
   if (!($7)) {
    $ls$idx1$val = HEAP32[$$pre5>>2]|0;
    $8 = ((($ls$idx1$val)) + 48|0);
    $9 = HEAP8[$8>>0]|0;
    $10 = $9&255;
    $11 = ((($nv)) + 16|0);
    $12 = $9&255;
    $13 = HEAP32[$11>>2]|0;
    $14 = ($6|0)==(7);
    if ($14) {
     $$02$i$us = $lh;$conflict$01$i$us = 0;
     while(1) {
      $15 = ((($$02$i$us)) + 8|0);
      $16 = HEAP32[$15>>2]|0;
      $17 = ($16|0)==(9);
      if ($17) {
       $18 = ((($$02$i$us)) + 16|0);
       $19 = ((($18)) + 3|0);
       $20 = HEAP8[$19>>0]|0;
       $21 = ($20<<24>>24)==(7);
       if ($21) {
        $22 = ((($18)) + 2|0);
        $23 = HEAP8[$22>>0]|0;
        $24 = $23&255;
        $25 = ($24|0)==($13|0);
        if ($25) {
         HEAP8[$19>>0] = 7;
         HEAP8[$22>>0] = $9;
         $conflict$1$i$us = 1;
        } else {
         $conflict$1$i$us = $conflict$01$i$us;
        }
       } else {
        $conflict$1$i$us = $conflict$01$i$us;
       }
       $26 = HEAP16[$18>>1]|0;
       $27 = $26 << 16 >> 16;
       $28 = ($27|0)==($13|0);
       if ($28) {
        HEAP16[$18>>1] = $12;
        $conflict$2$i$us = 1;
       } else {
        $conflict$2$i$us = $conflict$1$i$us;
       }
      } else {
       $conflict$2$i$us = $conflict$01$i$us;
      }
      $29 = HEAP32[$$02$i$us>>2]|0;
      $30 = ($29|0)==(0|0);
      if ($30) {
       $conflict$2$i$lcssa = $conflict$2$i$us;
       break;
      } else {
       $$02$i$us = $29;$conflict$01$i$us = $conflict$2$i$us;
      }
     }
    } else {
     $$02$i = $lh;$conflict$01$i = 0;
     while(1) {
      $31 = ((($$02$i)) + 8|0);
      $32 = HEAP32[$31>>2]|0;
      $33 = ($32|0)==(9);
      if ($33) {
       $34 = ((($$02$i)) + 16|0);
       $35 = ((($34)) + 3|0);
       $36 = HEAP8[$35>>0]|0;
       $37 = $36&255;
       $38 = ($37|0)==($6|0);
       if ($38) {
        $39 = ((($34)) + 2|0);
        $40 = HEAP8[$39>>0]|0;
        $41 = $40&255;
        $42 = ($41|0)==($13|0);
        if ($42) {
         HEAP8[$35>>0] = 7;
         HEAP8[$39>>0] = $9;
         $conflict$2$i = 1;
        } else {
         $conflict$2$i = $conflict$01$i;
        }
       } else {
        $conflict$2$i = $conflict$01$i;
       }
      } else {
       $conflict$2$i = $conflict$01$i;
      }
      $43 = HEAP32[$$02$i>>2]|0;
      $44 = ($43|0)==(0|0);
      if ($44) {
       $conflict$2$i$lcssa = $conflict$2$i;
       break;
      } else {
       $$02$i = $43;$conflict$01$i = $conflict$2$i;
      }
     }
    }
    $45 = ($conflict$2$i$lcssa|0)==(0);
    if (!($45)) {
     $46 = $14 ? 0 : 5;
     (_luaK_codeABC($ls$idx1$val,$46,$10,$13,0)|0);
     _luaK_reserveregs($ls$idx1$val,1);
    }
   }
   $47 = HEAP32[$$pre5>>2]|0;
   $48 = ((($ls)) + 52|0);
   $49 = HEAP32[$48>>2]|0;
   $50 = ((($49)) + 38|0);
   $51 = HEAP16[$50>>1]|0;
   $52 = $51&65535;
   $53 = (($52) + ($nvars))|0;
   $54 = ($53|0)>(200);
   if (!($54)) {
    $67 = (($nvars) + 1)|0;
    _assignment($ls,$nv,$67);
    $$pre$phi4Z2D = $e;$$pre$phiZ2D = $$pre5;
    break L4;
   }
   $55 = ((($47)) + 12|0);
   $56 = HEAP32[$55>>2]|0;
   $57 = ((($56)) + 52|0);
   $58 = HEAP32[$57>>2]|0;
   $59 = HEAP32[$47>>2]|0;
   $60 = ((($59)) + 64|0);
   $61 = HEAP32[$60>>2]|0;
   $62 = ($61|0)==(0);
   if ($62) {
    $64 = 6375;
    HEAP32[$vararg_buffer1>>2] = 6421;
    $vararg_ptr4 = ((($vararg_buffer1)) + 4|0);
    HEAP32[$vararg_ptr4>>2] = 200;
    $vararg_ptr5 = ((($vararg_buffer1)) + 8|0);
    HEAP32[$vararg_ptr5>>2] = $64;
    $65 = (_luaO_pushfstring($58,6389,$vararg_buffer1)|0);
    $66 = HEAP32[$55>>2]|0;
    _luaX_syntaxerror($66,$65);
    // unreachable;
   }
   HEAP32[$vararg_buffer>>2] = $61;
   $63 = (_luaO_pushfstring($58,6355,$vararg_buffer)|0);
   $64 = $63;
   HEAP32[$vararg_buffer1>>2] = 6421;
   $vararg_ptr4 = ((($vararg_buffer1)) + 4|0);
   HEAP32[$vararg_ptr4>>2] = 200;
   $vararg_ptr5 = ((($vararg_buffer1)) + 8|0);
   HEAP32[$vararg_ptr5>>2] = $64;
   $65 = (_luaO_pushfstring($58,6389,$vararg_buffer1)|0);
   $66 = HEAP32[$55>>2]|0;
   _luaX_syntaxerror($66,$65);
   // unreachable;
   break;
  }
  case 61:  {
   _luaX_next($ls);
   (_subexpr($ls,$e,0)|0);
   $68 = HEAP32[$3>>2]|0;
   $69 = ($68|0)==(44);
   $70 = ((($ls)) + 48|0);
   if ($69) {
    $n$0$i2 = 1;
    while(1) {
     _luaX_next($ls);
     $71 = HEAP32[$70>>2]|0;
     _luaK_exp2nextreg($71,$e);
     (_subexpr($ls,$e,0)|0);
     $72 = (($n$0$i2) + 1)|0;
     $73 = HEAP32[$3>>2]|0;
     $74 = ($73|0)==(44);
     if ($74) {
      $n$0$i2 = $72;
     } else {
      $n$0$i$lcssa = $72;
      break;
     }
    }
   } else {
    $n$0$i$lcssa = 1;
   }
   $75 = ($n$0$i$lcssa|0)==($nvars|0);
   $76 = HEAP32[$70>>2]|0;
   if ($75) {
    _luaK_setoneret($76,$e);
    $94 = HEAP32[$70>>2]|0;
    _luaK_storevar($94,$0,$e);
    STACKTOP = sp;return;
   }
   $77 = (($nvars) - ($n$0$i$lcssa))|0;
   $78 = HEAP32[$e>>2]|0;
   switch ($78|0) {
   case 13: case 12:  {
    $79 = (($77) + 1)|0;
    $80 = ($79|0)<(0);
    $$$i = $80 ? 0 : $79;
    _luaK_setreturns($76,$e,$$$i);
    $81 = ($$$i|0)>(1);
    if ($81) {
     $82 = (($$$i) + -1)|0;
     _luaK_reserveregs($76,$82);
    }
    break;
   }
   case 0:  {
    label = 33;
    break;
   }
   default: {
    _luaK_exp2nextreg($76,$e);
    label = 33;
   }
   }
   if ((label|0) == 33) {
    $83 = ($77|0)>(0);
    if ($83) {
     $84 = ((($76)) + 48|0);
     $85 = HEAP8[$84>>0]|0;
     $86 = $85&255;
     _luaK_reserveregs($76,$77);
     _luaK_nil($76,$86,$77);
    }
   }
   $87 = ($n$0$i$lcssa|0)>($nvars|0);
   if ($87) {
    $88 = HEAP32[$70>>2]|0;
    $89 = ((($88)) + 48|0);
    $90 = HEAP8[$89>>0]|0;
    $91 = $90&255;
    $92 = (($77) + ($91))|0;
    $93 = $92&255;
    HEAP8[$89>>0] = $93;
    $$pre$phi4Z2D = $e;$$pre$phiZ2D = $70;
   } else {
    $$pre$phi4Z2D = $e;$$pre$phiZ2D = $70;
   }
   break;
  }
  default: {
   _error_expected($ls,61);
   // unreachable;
  }
  }
 } while(0);
 $95 = HEAP32[$$pre$phiZ2D>>2]|0;
 $96 = ((($95)) + 48|0);
 $97 = HEAP8[$96>>0]|0;
 $98 = $97&255;
 $99 = (($98) + -1)|0;
 $100 = ((($e)) + 16|0);
 HEAP32[$100>>2] = -1;
 $101 = ((($e)) + 20|0);
 HEAP32[$101>>2] = -1;
 HEAP32[$$pre$phi4Z2D>>2] = 6;
 $102 = ((($e)) + 8|0);
 HEAP32[$102>>2] = $99;
 _luaK_storevar($95,$0,$e);
 STACKTOP = sp;return;
}
function _funcargs($ls,$f,$line) {
 $ls = $ls|0;
 $f = $f|0;
 $line = $line|0;
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $args = 0, $nparams$0 = 0;
 var $phitmp = 0, $phitmp2 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp + 24|0;
 $args = sp;
 $0 = ((($ls)) + 48|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($ls)) + 16|0);
 $3 = HEAP32[$2>>2]|0;
 switch ($3|0) {
 case 40:  {
  _luaX_next($ls);
  $4 = HEAP32[$2>>2]|0;
  $5 = ($4|0)==(41);
  if ($5) {
   HEAP32[$args>>2] = 0;
  } else {
   (_subexpr($ls,$args,0)|0);
   $6 = HEAP32[$2>>2]|0;
   $7 = ($6|0)==(44);
   if ($7) {
    while(1) {
     _luaX_next($ls);
     $8 = HEAP32[$0>>2]|0;
     _luaK_exp2nextreg($8,$args);
     (_subexpr($ls,$args,0)|0);
     $9 = HEAP32[$2>>2]|0;
     $10 = ($9|0)==(44);
     if (!($10)) {
      break;
     }
    }
   }
   _luaK_setreturns($1,$args,-1);
   $$pre = HEAP32[$2>>2]|0;
   $phitmp2 = ($$pre|0)==(41);
   if (!($phitmp2)) {
    $11 = ((($ls)) + 4|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = ($12|0)==($line|0);
    if ($13) {
     _error_expected($ls,41);
     // unreachable;
    } else {
     $14 = ((($ls)) + 52|0);
     $15 = HEAP32[$14>>2]|0;
     $16 = (_luaX_token2str($ls,41)|0);
     $17 = (_luaX_token2str($ls,40)|0);
     HEAP32[$vararg_buffer>>2] = $16;
     $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
     HEAP32[$vararg_ptr1>>2] = $17;
     $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
     HEAP32[$vararg_ptr2>>2] = $line;
     $18 = (_luaO_pushfstring($15,6430,$vararg_buffer)|0);
     _luaX_syntaxerror($ls,$18);
     // unreachable;
    }
   }
  }
  _luaX_next($ls);
  break;
 }
 case 123:  {
  _constructor($ls,$args);
  break;
 }
 case 289:  {
  $19 = ((($ls)) + 24|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = (_luaK_stringK($1,$20)|0);
  $22 = ((($args)) + 16|0);
  HEAP32[$22>>2] = -1;
  $23 = ((($args)) + 20|0);
  HEAP32[$23>>2] = -1;
  HEAP32[$args>>2] = 4;
  $24 = ((($args)) + 8|0);
  HEAP32[$24>>2] = $21;
  _luaX_next($ls);
  break;
 }
 default: {
  _luaX_syntaxerror($ls,6634);
  // unreachable;
 }
 }
 $25 = ((($f)) + 8|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = HEAP32[$args>>2]|0;
 switch ($27|0) {
 case 0:  {
  break;
 }
 case 13: case 12:  {
  $nparams$0 = 0;
  $31 = (_luaK_codeABC($1,29,$26,$nparams$0,2)|0);
  $32 = ((($f)) + 16|0);
  HEAP32[$32>>2] = -1;
  $33 = ((($f)) + 20|0);
  HEAP32[$33>>2] = -1;
  HEAP32[$f>>2] = 12;
  HEAP32[$25>>2] = $31;
  _luaK_fixline($1,$line);
  $34 = (($26) + 1)|0;
  $35 = $34&255;
  $36 = ((($1)) + 48|0);
  HEAP8[$36>>0] = $35;
  STACKTOP = sp;return;
  break;
 }
 default: {
  _luaK_exp2nextreg($1,$args);
 }
 }
 $28 = ((($1)) + 48|0);
 $29 = HEAP8[$28>>0]|0;
 $30 = $29&255;
 $phitmp = (($30) - ($26))|0;
 $nparams$0 = $phitmp;
 $31 = (_luaK_codeABC($1,29,$26,$nparams$0,2)|0);
 $32 = ((($f)) + 16|0);
 HEAP32[$32>>2] = -1;
 $33 = ((($f)) + 20|0);
 HEAP32[$33>>2] = -1;
 HEAP32[$f>>2] = 12;
 HEAP32[$25>>2] = $31;
 _luaK_fixline($1,$line);
 $34 = (($26) + 1)|0;
 $35 = $34&255;
 $36 = ((($1)) + 48|0);
 HEAP8[$36>>0] = $35;
 STACKTOP = sp;return;
}
function _constructor($ls,$t) {
 $ls = $ls|0;
 $t = $t|0;
 var $$lcssa = 0, $$lcssa12 = 0, $$pre = 0, $$pre$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $cc = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer14 = 0, $vararg_buffer6 = 0, $vararg_buffer9 = 0, $vararg_ptr12 = 0, $vararg_ptr13 = 0, $vararg_ptr17 = 0, $vararg_ptr18 = 0, $vararg_ptr4 = 0, $vararg_ptr5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer14 = sp + 88|0;
 $vararg_buffer9 = sp + 72|0;
 $vararg_buffer6 = sp + 64|0;
 $vararg_buffer1 = sp + 48|0;
 $vararg_buffer = sp + 40|0;
 $cc = sp;
 $0 = ((($ls)) + 48|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($ls)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (_luaK_codeABC($1,11,0,0,0)|0);
 $5 = ((($cc)) + 36|0);
 HEAP32[$5>>2] = 0;
 $6 = ((($cc)) + 28|0);
 HEAP32[$6>>2] = 0;
 $7 = ((($cc)) + 32|0);
 HEAP32[$7>>2] = 0;
 $8 = ((($cc)) + 24|0);
 HEAP32[$8>>2] = $t;
 $9 = ((($t)) + 16|0);
 HEAP32[$9>>2] = -1;
 $10 = ((($t)) + 20|0);
 HEAP32[$10>>2] = -1;
 HEAP32[$t>>2] = 11;
 $11 = ((($t)) + 8|0);
 HEAP32[$11>>2] = $4;
 $12 = ((($cc)) + 16|0);
 HEAP32[$12>>2] = -1;
 $13 = ((($cc)) + 20|0);
 HEAP32[$13>>2] = -1;
 HEAP32[$cc>>2] = 0;
 $14 = ((($cc)) + 8|0);
 HEAP32[$14>>2] = 0;
 $15 = HEAP32[$0>>2]|0;
 _luaK_exp2nextreg($15,$t);
 $16 = ((($ls)) + 16|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ($17|0)==(123);
 if (!($18)) {
  _error_expected($ls,123);
  // unreachable;
 }
 _luaX_next($ls);
 $19 = HEAP32[$16>>2]|0;
 $20 = ($19|0)==(125);
 L4: do {
  if (!($20)) {
   $22 = 0;
   L5: while(1) {
    $21 = ($22|0)==(0);
    if (!($21)) {
     _luaK_exp2nextreg($1,$cc);
     HEAP32[$cc>>2] = 0;
     $23 = HEAP32[$5>>2]|0;
     $24 = ($23|0)==(50);
     if ($24) {
      $25 = HEAP32[$8>>2]|0;
      $26 = ((($25)) + 8|0);
      $27 = HEAP32[$26>>2]|0;
      $28 = HEAP32[$7>>2]|0;
      _luaK_setlist($1,$27,$28,50);
      HEAP32[$5>>2] = 0;
     }
    }
    $29 = HEAP32[$16>>2]|0;
    L11: do {
     switch ($29|0) {
     case 288:  {
      $30 = (_luaX_lookahead($ls)|0);
      $31 = ($30|0)==(61);
      if ($31) {
       _recfield($ls,$cc);
       break L11;
      }
      (_subexpr($ls,$cc,0)|0);
      $32 = HEAP32[$0>>2]|0;
      $33 = HEAP32[$7>>2]|0;
      $34 = ($33|0)>(2147483645);
      if ($34) {
       $$lcssa = $32;
       label = 10;
       break L5;
      }
      $47 = (($33) + 1)|0;
      HEAP32[$7>>2] = $47;
      $48 = HEAP32[$5>>2]|0;
      $49 = (($48) + 1)|0;
      HEAP32[$5>>2] = $49;
      break;
     }
     case 91:  {
      _recfield($ls,$cc);
      break;
     }
     default: {
      (_subexpr($ls,$cc,0)|0);
      $50 = HEAP32[$0>>2]|0;
      $51 = HEAP32[$7>>2]|0;
      $52 = ($51|0)>(2147483645);
      if ($52) {
       $$lcssa12 = $50;
       label = 17;
       break L5;
      }
      $65 = (($51) + 1)|0;
      HEAP32[$7>>2] = $65;
      $66 = HEAP32[$5>>2]|0;
      $67 = (($66) + 1)|0;
      HEAP32[$5>>2] = $67;
     }
     }
    } while(0);
    $68 = HEAP32[$16>>2]|0;
    switch ($68|0) {
    case 125:  {
     break L4;
     break;
    }
    case 44:  {
     _luaX_next($ls);
     break;
    }
    case 59:  {
     _luaX_next($ls);
     break;
    }
    default: {
     label = 26;
     break L5;
    }
    }
    $69 = HEAP32[$16>>2]|0;
    $70 = ($69|0)==(125);
    if ($70) {
     break L4;
    }
    $$pre = HEAP32[$cc>>2]|0;
    $22 = $$pre;
   }
   if ((label|0) == 10) {
    $35 = ((($$lcssa)) + 12|0);
    $36 = HEAP32[$35>>2]|0;
    $37 = ((($36)) + 52|0);
    $38 = HEAP32[$37>>2]|0;
    $39 = HEAP32[$$lcssa>>2]|0;
    $40 = ((($39)) + 64|0);
    $41 = HEAP32[$40>>2]|0;
    $42 = ($41|0)==(0);
    if ($42) {
     $44 = 6375;
     HEAP32[$vararg_buffer1>>2] = 6662;
     $vararg_ptr4 = ((($vararg_buffer1)) + 4|0);
     HEAP32[$vararg_ptr4>>2] = 2147483645;
     $vararg_ptr5 = ((($vararg_buffer1)) + 8|0);
     HEAP32[$vararg_ptr5>>2] = $44;
     $45 = (_luaO_pushfstring($38,6389,$vararg_buffer1)|0);
     $46 = HEAP32[$35>>2]|0;
     _luaX_syntaxerror($46,$45);
     // unreachable;
    }
    HEAP32[$vararg_buffer>>2] = $41;
    $43 = (_luaO_pushfstring($38,6355,$vararg_buffer)|0);
    $44 = $43;
    HEAP32[$vararg_buffer1>>2] = 6662;
    $vararg_ptr4 = ((($vararg_buffer1)) + 4|0);
    HEAP32[$vararg_ptr4>>2] = 2147483645;
    $vararg_ptr5 = ((($vararg_buffer1)) + 8|0);
    HEAP32[$vararg_ptr5>>2] = $44;
    $45 = (_luaO_pushfstring($38,6389,$vararg_buffer1)|0);
    $46 = HEAP32[$35>>2]|0;
    _luaX_syntaxerror($46,$45);
    // unreachable;
   }
   else if ((label|0) == 17) {
    $53 = ((($$lcssa12)) + 12|0);
    $54 = HEAP32[$53>>2]|0;
    $55 = ((($54)) + 52|0);
    $56 = HEAP32[$55>>2]|0;
    $57 = HEAP32[$$lcssa12>>2]|0;
    $58 = ((($57)) + 64|0);
    $59 = HEAP32[$58>>2]|0;
    $60 = ($59|0)==(0);
    if ($60) {
     $62 = 6375;
     HEAP32[$vararg_buffer9>>2] = 6662;
     $vararg_ptr12 = ((($vararg_buffer9)) + 4|0);
     HEAP32[$vararg_ptr12>>2] = 2147483645;
     $vararg_ptr13 = ((($vararg_buffer9)) + 8|0);
     HEAP32[$vararg_ptr13>>2] = $62;
     $63 = (_luaO_pushfstring($56,6389,$vararg_buffer9)|0);
     $64 = HEAP32[$53>>2]|0;
     _luaX_syntaxerror($64,$63);
     // unreachable;
    }
    HEAP32[$vararg_buffer6>>2] = $59;
    $61 = (_luaO_pushfstring($56,6355,$vararg_buffer6)|0);
    $62 = $61;
    HEAP32[$vararg_buffer9>>2] = 6662;
    $vararg_ptr12 = ((($vararg_buffer9)) + 4|0);
    HEAP32[$vararg_ptr12>>2] = 2147483645;
    $vararg_ptr13 = ((($vararg_buffer9)) + 8|0);
    HEAP32[$vararg_ptr13>>2] = $62;
    $63 = (_luaO_pushfstring($56,6389,$vararg_buffer9)|0);
    $64 = HEAP32[$53>>2]|0;
    _luaX_syntaxerror($64,$63);
    // unreachable;
   }
   else if ((label|0) == 26) {
    $71 = HEAP32[$2>>2]|0;
    $72 = ($71|0)==($3|0);
    if ($72) {
     _error_expected($ls,125);
     // unreachable;
    } else {
     $73 = ((($ls)) + 52|0);
     $74 = HEAP32[$73>>2]|0;
     $75 = (_luaX_token2str($ls,125)|0);
     $76 = (_luaX_token2str($ls,123)|0);
     HEAP32[$vararg_buffer14>>2] = $75;
     $vararg_ptr17 = ((($vararg_buffer14)) + 4|0);
     HEAP32[$vararg_ptr17>>2] = $76;
     $vararg_ptr18 = ((($vararg_buffer14)) + 8|0);
     HEAP32[$vararg_ptr18>>2] = $3;
     $77 = (_luaO_pushfstring($74,6430,$vararg_buffer14)|0);
     _luaX_syntaxerror($ls,$77);
     // unreachable;
    }
   }
  }
 } while(0);
 _luaX_next($ls);
 $78 = HEAP32[$5>>2]|0;
 $79 = ($78|0)==(0);
 L42: do {
  if (!($79)) {
   $80 = HEAP32[$cc>>2]|0;
   switch ($80|0) {
   case 13: case 12:  {
    _luaK_setreturns($1,$cc,-1);
    $81 = HEAP32[$8>>2]|0;
    $82 = ((($81)) + 8|0);
    $83 = HEAP32[$82>>2]|0;
    $84 = HEAP32[$7>>2]|0;
    _luaK_setlist($1,$83,$84,-1);
    $85 = HEAP32[$7>>2]|0;
    $86 = (($85) + -1)|0;
    HEAP32[$7>>2] = $86;
    break L42;
    break;
   }
   case 0:  {
    $91 = $78;
    break;
   }
   default: {
    _luaK_exp2nextreg($1,$cc);
    $$pre$i = HEAP32[$5>>2]|0;
    $91 = $$pre$i;
   }
   }
   $87 = HEAP32[$8>>2]|0;
   $88 = ((($87)) + 8|0);
   $89 = HEAP32[$88>>2]|0;
   $90 = HEAP32[$7>>2]|0;
   _luaK_setlist($1,$89,$90,$91);
  }
 } while(0);
 $92 = HEAP32[$1>>2]|0;
 $93 = ((($92)) + 12|0);
 $94 = HEAP32[$93>>2]|0;
 $95 = (($94) + ($4<<2)|0);
 $96 = HEAP32[$95>>2]|0;
 $97 = $96 & 8388607;
 $98 = HEAP32[$7>>2]|0;
 $99 = (_luaO_int2fb($98)|0);
 $100 = $99 << 23;
 $101 = $100 | $97;
 $102 = HEAP32[$1>>2]|0;
 $103 = ((($102)) + 12|0);
 $104 = HEAP32[$103>>2]|0;
 $105 = (($104) + ($4<<2)|0);
 HEAP32[$105>>2] = $101;
 $106 = $101 & -8372225;
 $107 = HEAP32[$6>>2]|0;
 $108 = (_luaO_int2fb($107)|0);
 $109 = $108 << 14;
 $110 = $109 & 8372224;
 $111 = $110 | $106;
 $112 = HEAP32[$1>>2]|0;
 $113 = ((($112)) + 12|0);
 $114 = HEAP32[$113>>2]|0;
 $115 = (($114) + ($4<<2)|0);
 HEAP32[$115>>2] = $111;
 STACKTOP = sp;return;
}
function _recfield($ls,$cc) {
 $ls = $ls|0;
 $cc = $cc|0;
 var $$pre = 0, $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $key = 0, $ls$idx$val$i = 0, $val = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_ptr4 = 0, $vararg_ptr5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 56|0;
 $vararg_buffer = sp + 48|0;
 $key = sp + 24|0;
 $val = sp;
 $0 = ((($ls)) + 48|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 48|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = ((($ls)) + 16|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(288);
 do {
  if ($6) {
   $7 = ((($cc)) + 28|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = ($8|0)>(2147483645);
   if (!($9)) {
    $22 = ((($ls)) + 24|0);
    $23 = HEAP32[$22>>2]|0;
    _luaX_next($ls);
    $ls$idx$val$i = HEAP32[$0>>2]|0;
    $24 = (_luaK_stringK($ls$idx$val$i,$23)|0);
    $25 = ((($key)) + 16|0);
    HEAP32[$25>>2] = -1;
    $26 = ((($key)) + 20|0);
    HEAP32[$26>>2] = -1;
    HEAP32[$key>>2] = 4;
    $27 = ((($key)) + 8|0);
    HEAP32[$27>>2] = $24;
    $$pre$phiZ2D = $7;
    break;
   }
   $10 = ((($1)) + 12|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = ((($11)) + 52|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = HEAP32[$1>>2]|0;
   $15 = ((($14)) + 64|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = ($16|0)==(0);
   if ($17) {
    $19 = 6375;
    HEAP32[$vararg_buffer1>>2] = 6662;
    $vararg_ptr4 = ((($vararg_buffer1)) + 4|0);
    HEAP32[$vararg_ptr4>>2] = 2147483645;
    $vararg_ptr5 = ((($vararg_buffer1)) + 8|0);
    HEAP32[$vararg_ptr5>>2] = $19;
    $20 = (_luaO_pushfstring($13,6389,$vararg_buffer1)|0);
    $21 = HEAP32[$10>>2]|0;
    _luaX_syntaxerror($21,$20);
    // unreachable;
   }
   HEAP32[$vararg_buffer>>2] = $16;
   $18 = (_luaO_pushfstring($13,6355,$vararg_buffer)|0);
   $19 = $18;
   HEAP32[$vararg_buffer1>>2] = 6662;
   $vararg_ptr4 = ((($vararg_buffer1)) + 4|0);
   HEAP32[$vararg_ptr4>>2] = 2147483645;
   $vararg_ptr5 = ((($vararg_buffer1)) + 8|0);
   HEAP32[$vararg_ptr5>>2] = $19;
   $20 = (_luaO_pushfstring($13,6389,$vararg_buffer1)|0);
   $21 = HEAP32[$10>>2]|0;
   _luaX_syntaxerror($21,$20);
   // unreachable;
  } else {
   _luaX_next($ls);
   (_subexpr($ls,$key,0)|0);
   $28 = HEAP32[$0>>2]|0;
   _luaK_exp2val($28,$key);
   $29 = HEAP32[$4>>2]|0;
   $30 = ($29|0)==(93);
   if ($30) {
    _luaX_next($ls);
    $$pre = ((($cc)) + 28|0);
    $$pre$phiZ2D = $$pre;
    break;
   } else {
    _error_expected($ls,93);
    // unreachable;
   }
  }
 } while(0);
 $31 = HEAP32[$$pre$phiZ2D>>2]|0;
 $32 = (($31) + 1)|0;
 HEAP32[$$pre$phiZ2D>>2] = $32;
 $33 = HEAP32[$4>>2]|0;
 $34 = ($33|0)==(61);
 if ($34) {
  _luaX_next($ls);
  $35 = (_luaK_exp2RK($1,$key)|0);
  (_subexpr($ls,$val,0)|0);
  $36 = ((($cc)) + 24|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = ((($37)) + 8|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = (_luaK_exp2RK($1,$val)|0);
  (_luaK_codeABC($1,10,$39,$35,$40)|0);
  HEAP8[$2>>0] = $3;
  STACKTOP = sp;return;
 } else {
  _error_expected($ls,61);
  // unreachable;
 }
}
function _luaE_setdebt($g,$debt) {
 $g = $g|0;
 $debt = $debt|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($g)) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($g)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($1) - ($debt))|0;
 $5 = (($4) + ($3))|0;
 HEAP32[$2>>2] = $5;
 HEAP32[$0>>2] = $debt;
 return;
}
function _luaE_extendCI($L) {
 $L = $L|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_luaM_realloc_($L,0,0,40)|0);
 $1 = ((($L)) + 16|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 12|0);
 HEAP32[$3>>2] = $0;
 $4 = $2;
 $5 = ((($0)) + 8|0);
 HEAP32[$5>>2] = $4;
 $6 = ((($0)) + 12|0);
 HEAP32[$6>>2] = 0;
 return ($0|0);
}
function _luaE_freeCI($L) {
 $L = $L|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $next$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($L)) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 HEAP32[$2>>2] = 0;
 $4 = ($3|0)==(0|0);
 if ($4) {
  return;
 } else {
  $next$01 = $3;
 }
 while(1) {
  $5 = ((($next$01)) + 12|0);
  $6 = HEAP32[$5>>2]|0;
  (_luaM_realloc_($L,$next$01,40,0)|0);
  $7 = ($6|0)==(0|0);
  if ($7) {
   break;
  } else {
   $next$01 = $6;
  }
 }
 return;
}
function _lua_newthread($L) {
 $L = $L|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($L)) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)>(0);
 if ($4) {
  _luaC_step($L);
 }
 $5 = (_luaC_newobj($L,8,112,0,0)|0);
 $6 = ((($L)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 HEAP32[$7>>2] = $5;
 $8 = ((($7)) + 8|0);
 HEAP32[$8>>2] = 72;
 $9 = HEAP32[$6>>2]|0;
 $10 = ((($9)) + 16|0);
 HEAP32[$6>>2] = $10;
 $11 = HEAP32[$0>>2]|0;
 $12 = ((($5)) + 12|0);
 HEAP32[$12>>2] = $11;
 $13 = ((($5)) + 28|0);
 HEAP32[$13>>2] = 0;
 $14 = ((($5)) + 16|0);
 HEAP32[$14>>2] = 0;
 $15 = ((($5)) + 32|0);
 HEAP32[$15>>2] = 0;
 $16 = ((($5)) + 64|0);
 HEAP32[$16>>2] = 0;
 $17 = ((($5)) + 38|0);
 HEAP16[$17>>1] = 0;
 $18 = ((($5)) + 52|0);
 HEAP32[$18>>2] = 0;
 $19 = ((($5)) + 40|0);
 HEAP8[$19>>0] = 0;
 $20 = ((($5)) + 44|0);
 HEAP32[$20>>2] = 0;
 $21 = ((($5)) + 41|0);
 HEAP8[$21>>0] = 1;
 $22 = ((($5)) + 48|0);
 $23 = ((($5)) + 56|0);
 HEAP32[$23>>2] = 0;
 $24 = ((($5)) + 36|0);
 HEAP16[$24>>1] = 1;
 $25 = ((($5)) + 6|0);
 HEAP8[$25>>0] = 0;
 $26 = ((($5)) + 68|0);
 HEAP32[$26>>2] = 0;
 $27 = ((($L)) + 40|0);
 $28 = HEAP8[$27>>0]|0;
 HEAP8[$19>>0] = $28;
 $29 = ((($L)) + 44|0);
 $30 = HEAP32[$29>>2]|0;
 HEAP32[$20>>2] = $30;
 $31 = ((($L)) + 52|0);
 $32 = HEAP32[$31>>2]|0;
 HEAP32[$18>>2] = $32;
 HEAP32[$22>>2] = $30;
 $33 = (_luaM_realloc_($L,0,0,640)|0);
 HEAP32[$13>>2] = $33;
 HEAP32[$15>>2] = 40;
 $34 = ((($33)) + 8|0);
 HEAP32[$34>>2] = 0;
 $35 = ((($33)) + 24|0);
 HEAP32[$35>>2] = 0;
 $36 = ((($33)) + 40|0);
 HEAP32[$36>>2] = 0;
 $37 = ((($33)) + 56|0);
 HEAP32[$37>>2] = 0;
 $38 = ((($33)) + 72|0);
 HEAP32[$38>>2] = 0;
 $39 = ((($33)) + 88|0);
 HEAP32[$39>>2] = 0;
 $40 = ((($33)) + 104|0);
 HEAP32[$40>>2] = 0;
 $41 = ((($33)) + 120|0);
 HEAP32[$41>>2] = 0;
 $42 = ((($33)) + 136|0);
 HEAP32[$42>>2] = 0;
 $43 = ((($33)) + 152|0);
 HEAP32[$43>>2] = 0;
 $44 = ((($33)) + 168|0);
 HEAP32[$44>>2] = 0;
 $45 = ((($33)) + 184|0);
 HEAP32[$45>>2] = 0;
 $46 = ((($33)) + 200|0);
 HEAP32[$46>>2] = 0;
 $47 = ((($33)) + 216|0);
 HEAP32[$47>>2] = 0;
 $48 = ((($33)) + 232|0);
 HEAP32[$48>>2] = 0;
 $49 = ((($33)) + 248|0);
 HEAP32[$49>>2] = 0;
 $50 = ((($33)) + 264|0);
 HEAP32[$50>>2] = 0;
 $51 = ((($33)) + 280|0);
 HEAP32[$51>>2] = 0;
 $52 = ((($33)) + 296|0);
 HEAP32[$52>>2] = 0;
 $53 = ((($33)) + 312|0);
 HEAP32[$53>>2] = 0;
 $54 = ((($33)) + 328|0);
 HEAP32[$54>>2] = 0;
 $55 = ((($33)) + 344|0);
 HEAP32[$55>>2] = 0;
 $56 = ((($33)) + 360|0);
 HEAP32[$56>>2] = 0;
 $57 = ((($33)) + 376|0);
 HEAP32[$57>>2] = 0;
 $58 = ((($33)) + 392|0);
 HEAP32[$58>>2] = 0;
 $59 = ((($33)) + 408|0);
 HEAP32[$59>>2] = 0;
 $60 = ((($33)) + 424|0);
 HEAP32[$60>>2] = 0;
 $61 = ((($33)) + 440|0);
 HEAP32[$61>>2] = 0;
 $62 = ((($33)) + 456|0);
 HEAP32[$62>>2] = 0;
 $63 = ((($33)) + 472|0);
 HEAP32[$63>>2] = 0;
 $64 = ((($33)) + 488|0);
 HEAP32[$64>>2] = 0;
 $65 = ((($33)) + 504|0);
 HEAP32[$65>>2] = 0;
 $66 = ((($33)) + 520|0);
 HEAP32[$66>>2] = 0;
 $67 = ((($33)) + 536|0);
 HEAP32[$67>>2] = 0;
 $68 = ((($33)) + 552|0);
 HEAP32[$68>>2] = 0;
 $69 = ((($33)) + 568|0);
 HEAP32[$69>>2] = 0;
 $70 = ((($33)) + 584|0);
 HEAP32[$70>>2] = 0;
 $71 = ((($33)) + 600|0);
 HEAP32[$71>>2] = 0;
 $72 = ((($33)) + 616|0);
 HEAP32[$72>>2] = 0;
 $73 = ((($33)) + 632|0);
 HEAP32[$73>>2] = 0;
 $74 = ((($5)) + 8|0);
 $75 = ((($33)) + 560|0);
 $76 = ((($5)) + 24|0);
 HEAP32[$76>>2] = $75;
 $77 = ((($5)) + 72|0);
 $78 = ((($5)) + 80|0);
 HEAP32[$78>>2] = 0;
 $79 = ((($5)) + 84|0);
 HEAP32[$79>>2] = 0;
 $80 = ((($5)) + 90|0);
 HEAP8[$80>>0] = 0;
 $81 = $33;
 HEAP32[$77>>2] = $81;
 $82 = ((($33)) + 16|0);
 HEAP32[$74>>2] = $82;
 HEAP32[$34>>2] = 0;
 $83 = ((($33)) + 336|0);
 $84 = ((($5)) + 76|0);
 HEAP32[$84>>2] = $83;
 HEAP32[$14>>2] = $77;
 return ($5|0);
}
function _luaE_freethread($L,$L1) {
 $L = $L|0;
 $L1 = $L1|0;
 var $$pre$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $next$01$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($L1)) + 28|0);
 $1 = HEAP32[$0>>2]|0;
 _luaF_close($L1,$1);
 $2 = HEAP32[$0>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  (_luaM_realloc_($L,$L1,112,0)|0);
  return;
 }
 $4 = ((($L1)) + 72|0);
 $5 = ((($L1)) + 16|0);
 HEAP32[$5>>2] = $4;
 $6 = ((($L1)) + 84|0);
 $7 = HEAP32[$6>>2]|0;
 HEAP32[$6>>2] = 0;
 $8 = ($7|0)==(0|0);
 if ($8) {
  $15 = $2;
 } else {
  $next$01$i$i = $7;
  while(1) {
   $9 = ((($next$01$i$i)) + 12|0);
   $10 = HEAP32[$9>>2]|0;
   (_luaM_realloc_($L1,$next$01$i$i,40,0)|0);
   $11 = ($10|0)==(0|0);
   if ($11) {
    break;
   } else {
    $next$01$i$i = $10;
   }
  }
  $$pre$i = HEAP32[$0>>2]|0;
  $15 = $$pre$i;
 }
 $12 = ((($L1)) + 32|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = $13 << 4;
 (_luaM_realloc_($L1,$15,$14,0)|0);
 (_luaM_realloc_($L,$L1,112,0)|0);
 return;
}
function _lua_newstate($f,$ud) {
 $f = $f|0;
 $ud = $ud|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $buff$i = 0, $h$i = 0, $scevgep = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $buff$i = sp + 8|0;
 $h$i = sp;
 $0 = (FUNCTION_TABLE_iiiii[$f & 255]($ud,0,8,400)|0);
 $1 = ($0|0)==(0|0);
 if ($1) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $2 = ((($0)) + 112|0);
 HEAP32[$0>>2] = 0;
 $3 = ((($0)) + 4|0);
 HEAP8[$3>>0] = 8;
 $4 = ((($0)) + 172|0);
 HEAP8[$4>>0] = 33;
 $5 = ((($0)) + 5|0);
 HEAP8[$5>>0] = 1;
 $6 = ((($0)) + 174|0);
 HEAP8[$6>>0] = 0;
 $7 = ((($0)) + 12|0);
 HEAP32[$7>>2] = $2;
 $8 = ((($0)) + 28|0);
 HEAP32[$8>>2] = 0;
 $9 = ((($0)) + 16|0);
 HEAP32[$9>>2] = 0;
 $10 = ((($0)) + 32|0);
 HEAP32[$10>>2] = 0;
 $11 = ((($0)) + 64|0);
 HEAP32[$11>>2] = 0;
 $12 = ((($0)) + 38|0);
 HEAP16[$12>>1] = 0;
 $13 = ((($0)) + 52|0);
 HEAP32[$13>>2] = 0;
 $14 = ((($0)) + 40|0);
 HEAP8[$14>>0] = 0;
 $15 = ((($0)) + 44|0);
 HEAP32[$15>>2] = 0;
 $16 = ((($0)) + 41|0);
 HEAP8[$16>>0] = 1;
 $17 = ((($0)) + 48|0);
 HEAP32[$17>>2] = 0;
 $18 = ((($0)) + 56|0);
 HEAP32[$18>>2] = 0;
 $19 = ((($0)) + 36|0);
 HEAP16[$19>>1] = 1;
 $20 = ((($0)) + 6|0);
 HEAP8[$20>>0] = 0;
 $21 = ((($0)) + 68|0);
 HEAP32[$21>>2] = 0;
 HEAP32[$2>>2] = $f;
 $22 = ((($0)) + 116|0);
 HEAP32[$22>>2] = $ud;
 $23 = ((($0)) + 284|0);
 HEAP32[$23>>2] = $0;
 $24 = (_time((0|0))|0);
 HEAP32[$h$i>>2] = $24;
 $25 = $0;
 HEAP32[$buff$i>>2] = $25;
 $26 = $h$i;
 $27 = ((($buff$i)) + 4|0);
 HEAP32[$27>>2] = $26;
 $28 = ((($buff$i)) + 8|0);
 HEAP32[$28>>2] = (24);
 $29 = ((($buff$i)) + 12|0);
 HEAP32[$29>>2] = (162);
 $30 = (_luaS_hash($buff$i,16,$24)|0);
 $31 = ((($0)) + 168|0);
 HEAP32[$31>>2] = $30;
 $32 = ((($0)) + 224|0);
 $33 = ((($0)) + 240|0);
 HEAP32[$33>>2] = $32;
 $34 = ((($0)) + 244|0);
 HEAP32[$34>>2] = $32;
 $35 = ((($0)) + 175|0);
 HEAP8[$35>>0] = 0;
 $36 = ((($0)) + 132|0);
 $37 = ((($0)) + 160|0);
 HEAP32[$37>>2] = 0;
 $38 = ((($0)) + 256|0);
 HEAP32[$38>>2] = 0;
 $39 = ((($0)) + 264|0);
 HEAP32[$39>>2] = 0;
 $40 = ((($0)) + 280|0);
 HEAP32[$40>>2] = 0;
 ;HEAP32[$36>>2]=0|0;HEAP32[$36+4>>2]=0|0;HEAP32[$36+8>>2]=0|0;HEAP32[$36+12>>2]=0|0;
 $41 = (_lua_version(0)|0);
 $42 = ((($0)) + 288|0);
 HEAP32[$42>>2] = $41;
 $43 = ((($0)) + 173|0);
 HEAP8[$43>>0] = 5;
 $44 = ((($0)) + 180|0);
 $45 = ((($0)) + 120|0);
 dest=$44; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 HEAP32[$45>>2] = 400;
 $46 = ((($0)) + 124|0);
 HEAP32[$46>>2] = 0;
 $47 = ((($0)) + 268|0);
 HEAP32[$47>>2] = 200;
 $48 = ((($0)) + 272|0);
 HEAP32[$48>>2] = 200;
 $49 = ((($0)) + 276|0);
 HEAP32[$49>>2] = 200;
 $scevgep = ((($0)) + 364|0);
 dest=$scevgep; stop=dest+36|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $50 = (_luaD_rawrunprotected($0,163,0)|0);
 $51 = ($50|0)==(0);
 if ($51) {
  $$0 = $0;
  STACKTOP = sp;return ($$0|0);
 }
 _close_state($0);
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _lua_close($L) {
 $L = $L|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($L)) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 172|0);
 $3 = HEAP32[$2>>2]|0;
 _close_state($3);
 return;
}
function _f_luaopen($L,$ud) {
 $L = $L|0;
 $ud = $ud|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $8 = 0, $9 = 0, $mt$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $mt$i = sp;
 $0 = ((($L)) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (_luaM_realloc_($L,0,0,640)|0);
 $3 = ((($L)) + 28|0);
 HEAP32[$3>>2] = $2;
 $4 = ((($L)) + 32|0);
 HEAP32[$4>>2] = 40;
 $5 = ((($2)) + 8|0);
 HEAP32[$5>>2] = 0;
 $6 = ((($2)) + 24|0);
 HEAP32[$6>>2] = 0;
 $7 = ((($2)) + 40|0);
 HEAP32[$7>>2] = 0;
 $8 = ((($2)) + 56|0);
 HEAP32[$8>>2] = 0;
 $9 = ((($2)) + 72|0);
 HEAP32[$9>>2] = 0;
 $10 = ((($2)) + 88|0);
 HEAP32[$10>>2] = 0;
 $11 = ((($2)) + 104|0);
 HEAP32[$11>>2] = 0;
 $12 = ((($2)) + 120|0);
 HEAP32[$12>>2] = 0;
 $13 = ((($2)) + 136|0);
 HEAP32[$13>>2] = 0;
 $14 = ((($2)) + 152|0);
 HEAP32[$14>>2] = 0;
 $15 = ((($2)) + 168|0);
 HEAP32[$15>>2] = 0;
 $16 = ((($2)) + 184|0);
 HEAP32[$16>>2] = 0;
 $17 = ((($2)) + 200|0);
 HEAP32[$17>>2] = 0;
 $18 = ((($2)) + 216|0);
 HEAP32[$18>>2] = 0;
 $19 = ((($2)) + 232|0);
 HEAP32[$19>>2] = 0;
 $20 = ((($2)) + 248|0);
 HEAP32[$20>>2] = 0;
 $21 = ((($2)) + 264|0);
 HEAP32[$21>>2] = 0;
 $22 = ((($2)) + 280|0);
 HEAP32[$22>>2] = 0;
 $23 = ((($2)) + 296|0);
 HEAP32[$23>>2] = 0;
 $24 = ((($2)) + 312|0);
 HEAP32[$24>>2] = 0;
 $25 = ((($2)) + 328|0);
 HEAP32[$25>>2] = 0;
 $26 = ((($2)) + 344|0);
 HEAP32[$26>>2] = 0;
 $27 = ((($2)) + 360|0);
 HEAP32[$27>>2] = 0;
 $28 = ((($2)) + 376|0);
 HEAP32[$28>>2] = 0;
 $29 = ((($2)) + 392|0);
 HEAP32[$29>>2] = 0;
 $30 = ((($2)) + 408|0);
 HEAP32[$30>>2] = 0;
 $31 = ((($2)) + 424|0);
 HEAP32[$31>>2] = 0;
 $32 = ((($2)) + 440|0);
 HEAP32[$32>>2] = 0;
 $33 = ((($2)) + 456|0);
 HEAP32[$33>>2] = 0;
 $34 = ((($2)) + 472|0);
 HEAP32[$34>>2] = 0;
 $35 = ((($2)) + 488|0);
 HEAP32[$35>>2] = 0;
 $36 = ((($2)) + 504|0);
 HEAP32[$36>>2] = 0;
 $37 = ((($2)) + 520|0);
 HEAP32[$37>>2] = 0;
 $38 = ((($2)) + 536|0);
 HEAP32[$38>>2] = 0;
 $39 = ((($2)) + 552|0);
 HEAP32[$39>>2] = 0;
 $40 = ((($2)) + 568|0);
 HEAP32[$40>>2] = 0;
 $41 = ((($2)) + 584|0);
 HEAP32[$41>>2] = 0;
 $42 = ((($2)) + 600|0);
 HEAP32[$42>>2] = 0;
 $43 = ((($2)) + 616|0);
 HEAP32[$43>>2] = 0;
 $44 = ((($2)) + 632|0);
 HEAP32[$44>>2] = 0;
 $45 = ((($L)) + 8|0);
 $46 = ((($2)) + 560|0);
 $47 = ((($L)) + 24|0);
 HEAP32[$47>>2] = $46;
 $48 = ((($L)) + 72|0);
 $49 = ((($L)) + 80|0);
 HEAP32[$49>>2] = 0;
 $50 = ((($L)) + 84|0);
 HEAP32[$50>>2] = 0;
 $51 = ((($L)) + 90|0);
 HEAP8[$51>>0] = 0;
 $52 = $2;
 HEAP32[$48>>2] = $52;
 $53 = ((($2)) + 16|0);
 HEAP32[$45>>2] = $53;
 HEAP32[$5>>2] = 0;
 $54 = ((($2)) + 336|0);
 $55 = ((($L)) + 76|0);
 HEAP32[$55>>2] = $54;
 $56 = ((($L)) + 16|0);
 HEAP32[$56>>2] = $48;
 $57 = (_luaH_new($L)|0);
 $58 = ((($1)) + 40|0);
 HEAP32[$58>>2] = $57;
 $59 = ((($1)) + 48|0);
 HEAP32[$59>>2] = 69;
 _luaH_resize($L,$57,2,0);
 HEAP32[$mt$i>>2] = $L;
 $60 = ((($mt$i)) + 8|0);
 HEAP32[$60>>2] = 72;
 _luaH_setint($L,$57,1,$mt$i);
 $61 = (_luaH_new($L)|0);
 HEAP32[$mt$i>>2] = $61;
 HEAP32[$60>>2] = 69;
 _luaH_setint($L,$57,2,$mt$i);
 _luaS_resize($L,32);
 _luaT_init($L);
 _luaX_init($L);
 $62 = (_luaS_newlstr($L,6823,17)|0);
 $63 = ((($1)) + 180|0);
 HEAP32[$63>>2] = $62;
 $64 = ((($62)) + 5|0);
 $65 = HEAP8[$64>>0]|0;
 $66 = $65&255;
 $67 = $66 | 32;
 $68 = $67&255;
 HEAP8[$64>>0] = $68;
 $69 = ((($1)) + 63|0);
 HEAP8[$69>>0] = 1;
 STACKTOP = sp;return;
}
function _close_state($L) {
 $L = $L|0;
 var $$pre$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $next$01$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($L)) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($L)) + 28|0);
 $3 = HEAP32[$2>>2]|0;
 _luaF_close($L,$3);
 _luaC_freeallobjects($L);
 $4 = HEAP32[$0>>2]|0;
 $5 = ((($4)) + 24|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($4)) + 32|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $8 << 2;
 (_luaM_realloc_($L,$6,$9,0)|0);
 $10 = ((($1)) + 144|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ((($1)) + 152|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (_luaM_realloc_($L,$11,$13,0)|0);
 HEAP32[$10>>2] = $14;
 HEAP32[$12>>2] = 0;
 $15 = HEAP32[$2>>2]|0;
 $16 = ($15|0)==(0|0);
 if ($16) {
  $29 = HEAP32[$1>>2]|0;
  $30 = ((($1)) + 4|0);
  $31 = HEAP32[$30>>2]|0;
  (FUNCTION_TABLE_iiiii[$29 & 255]($31,$L,400,0)|0);
  return;
 }
 $17 = ((($L)) + 72|0);
 $18 = ((($L)) + 16|0);
 HEAP32[$18>>2] = $17;
 $19 = ((($L)) + 84|0);
 $20 = HEAP32[$19>>2]|0;
 HEAP32[$19>>2] = 0;
 $21 = ($20|0)==(0|0);
 if ($21) {
  $28 = $15;
 } else {
  $next$01$i$i = $20;
  while(1) {
   $22 = ((($next$01$i$i)) + 12|0);
   $23 = HEAP32[$22>>2]|0;
   (_luaM_realloc_($L,$next$01$i$i,40,0)|0);
   $24 = ($23|0)==(0|0);
   if ($24) {
    break;
   } else {
    $next$01$i$i = $23;
   }
  }
  $$pre$i = HEAP32[$2>>2]|0;
  $28 = $$pre$i;
 }
 $25 = ((($L)) + 32|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = $26 << 4;
 (_luaM_realloc_($L,$28,$27,0)|0);
 $29 = HEAP32[$1>>2]|0;
 $30 = ((($1)) + 4|0);
 $31 = HEAP32[$30>>2]|0;
 (FUNCTION_TABLE_iiiii[$29 & 255]($31,$L,400,0)|0);
 return;
}
function _luaS_eqlngstr($a,$b) {
 $a = $a|0;
 $b = $b|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($a)) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($a|0)==($b|0);
 if ($2) {
  $11 = 1;
 } else {
  $3 = ((($b)) + 12|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($1|0)==($4|0);
  if ($5) {
   $6 = ((($a)) + 16|0);
   $7 = ((($b)) + 16|0);
   $8 = (_memcmp($6,$7,$1)|0);
   $9 = ($8|0)==(0);
   $11 = $9;
  } else {
   $11 = 0;
  }
 }
 $10 = $11&1;
 return ($10|0);
}
function _luaS_eqstr($a,$b) {
 $a = $a|0;
 $b = $b|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = ((($a)) + 4|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = ((($b)) + 4|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = ($1<<24>>24)==($3<<24>>24);
 do {
  if ($4) {
   $5 = ($1<<24>>24)==(4);
   if ($5) {
    $6 = ($a|0)==($b|0);
    $18 = $6;
    break;
   }
   $7 = ((($a)) + 12|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = ($a|0)==($b|0);
   if ($9) {
    $18 = 1;
   } else {
    $10 = ((($b)) + 12|0);
    $11 = HEAP32[$10>>2]|0;
    $12 = ($8|0)==($11|0);
    if ($12) {
     $13 = ((($a)) + 16|0);
     $14 = ((($b)) + 16|0);
     $15 = (_memcmp($13,$14,$8)|0);
     $16 = ($15|0)==(0);
     $18 = $16;
    } else {
     $18 = 0;
    }
   }
  } else {
   $18 = 0;
  }
 } while(0);
 $17 = $18&1;
 return ($17|0);
}
function _luaS_hash($str,$l,$seed) {
 $str = $str|0;
 $l = $l|0;
 $seed = $seed|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $h$0$lcssa = 0, $h$02 = 0, $l1$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $seed ^ $l;
 $1 = $l >>> 5;
 $2 = (($1) + 1)|0;
 $3 = ($2>>>0)>($l>>>0);
 if ($3) {
  $h$0$lcssa = $0;
  return ($h$0$lcssa|0);
 } else {
  $h$02 = $0;$l1$01 = $l;
 }
 while(1) {
  $4 = $h$02 << 5;
  $5 = $h$02 >>> 2;
  $6 = (($4) + ($5))|0;
  $7 = (($l1$01) + -1)|0;
  $8 = (($str) + ($7)|0);
  $9 = HEAP8[$8>>0]|0;
  $10 = $9&255;
  $11 = (($6) + ($10))|0;
  $12 = $11 ^ $h$02;
  $13 = (($l1$01) - ($2))|0;
  $14 = ($13>>>0)<($2>>>0);
  if ($14) {
   $h$0$lcssa = $12;
   break;
  } else {
   $h$02 = $12;$l1$01 = $13;
  }
 }
 return ($h$0$lcssa|0);
}
function _luaS_resize($L,$newsize) {
 $L = $L|0;
 $newsize = $newsize|0;
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $exitcond9 = 0, $i$12 = 0, $p$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($L)) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 24|0);
 _luaC_runtilstate($L,-5);
 $3 = ((($1)) + 32|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)<($newsize|0);
 if ($5) {
  $9 = (($newsize) + 1)|0;
  $10 = ($9>>>0)>(1073741823);
  if ($10) {
   _luaM_toobig($L);
   // unreachable;
  }
  $11 = HEAP32[$2>>2]|0;
  $12 = $4 << 2;
  $13 = $newsize << 2;
  $14 = (_luaM_realloc_($L,$11,$12,$13)|0);
  HEAP32[$2>>2] = $14;
  $15 = HEAP32[$3>>2]|0;
  $16 = ($15|0)<($newsize|0);
  if ($16) {
   $17 = (($14) + ($15<<2)|0);
   HEAP32[$17>>2] = 0;
   $18 = (($15) + 1)|0;
   $exitcond9 = ($18|0)==($newsize|0);
   if ($exitcond9) {
    $7 = $15;
   } else {
    $20 = $18;
    while(1) {
     $$pre = HEAP32[$2>>2]|0;
     $19 = (($$pre) + ($20<<2)|0);
     HEAP32[$19>>2] = 0;
     $21 = (($20) + 1)|0;
     $exitcond = ($21|0)==($newsize|0);
     if ($exitcond) {
      $7 = $15;
      break;
     } else {
      $20 = $21;
     }
    }
   }
  } else {
   $7 = $15;
  }
 } else {
  $7 = $4;
 }
 $6 = ($7|0)>(0);
 if ($6) {
  $8 = (($newsize) + -1)|0;
  $i$12 = 0;
  while(1) {
   $22 = HEAP32[$2>>2]|0;
   $23 = (($22) + ($i$12<<2)|0);
   $24 = HEAP32[$23>>2]|0;
   HEAP32[$23>>2] = 0;
   $25 = ($24|0)==(0|0);
   if (!($25)) {
    $p$01 = $24;
    while(1) {
     $26 = HEAP32[$p$01>>2]|0;
     $27 = ((($p$01)) + 8|0);
     $28 = HEAP32[$27>>2]|0;
     $29 = $28 & $8;
     $30 = HEAP32[$2>>2]|0;
     $31 = (($30) + ($29<<2)|0);
     $32 = HEAP32[$31>>2]|0;
     HEAP32[$p$01>>2] = $32;
     HEAP32[$31>>2] = $p$01;
     $33 = ((($p$01)) + 5|0);
     $34 = HEAP8[$33>>0]|0;
     $35 = $34&255;
     $36 = $35 & 191;
     $37 = $36&255;
     HEAP8[$33>>0] = $37;
     $38 = ($26|0)==(0|0);
     if ($38) {
      break;
     } else {
      $p$01 = $26;
     }
    }
   }
   $39 = (($i$12) + 1)|0;
   $40 = ($39|0)<($7|0);
   if ($40) {
    $i$12 = $39;
   } else {
    break;
   }
  }
 }
 $41 = ($7|0)>($newsize|0);
 if (!($41)) {
  HEAP32[$3>>2] = $newsize;
  return;
 }
 $42 = (($newsize) + 1)|0;
 $43 = ($42>>>0)>(1073741823);
 if ($43) {
  _luaM_toobig($L);
  // unreachable;
 }
 $44 = HEAP32[$2>>2]|0;
 $45 = $7 << 2;
 $46 = $newsize << 2;
 $47 = (_luaM_realloc_($L,$44,$45,$46)|0);
 HEAP32[$2>>2] = $47;
 HEAP32[$3>>2] = $newsize;
 return;
}
function _luaS_newlstr($L,$str,$l) {
 $L = $L|0;
 $str = $str|0;
 $l = $l|0;
 var $$0 = 0, $$pre$i = 0, $$pre$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $9 = 0, $h$0$lcssa$i$i = 0, $h$02$i$i = 0, $l1$01$i$i = 0, $o$0$i = 0, $o$03$i = 0, $o$04$i = 0, $o$04$i$lcssa = 0, $or$cond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($l>>>0)<(41);
 if (!($0)) {
  $68 = (($l) + 1)|0;
  $69 = ($68>>>0)>(4294967277);
  if ($69) {
   _luaM_toobig($L);
   // unreachable;
  }
  $70 = ((($L)) + 12|0);
  $71 = HEAP32[$70>>2]|0;
  $72 = ((($71)) + 56|0);
  $73 = HEAP32[$72>>2]|0;
  $74 = (($l) + 17)|0;
  $75 = (_luaC_newobj($L,20,$74,0,0)|0);
  $76 = ((($75)) + 12|0);
  HEAP32[$76>>2] = $l;
  $77 = ((($75)) + 8|0);
  HEAP32[$77>>2] = $73;
  $78 = ((($75)) + 6|0);
  HEAP8[$78>>0] = 0;
  $79 = ((($75)) + 16|0);
  _memcpy(($79|0),($str|0),($l|0))|0;
  $80 = (($79) + ($l)|0);
  HEAP8[$80>>0] = 0;
  $$0 = $75;
  return ($$0|0);
 }
 $1 = ((($L)) + 12|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 56|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4 ^ $l;
 $6 = $l >>> 5;
 $7 = (($6) + 1)|0;
 $8 = ($7>>>0)>($l>>>0);
 if ($8) {
  $h$0$lcssa$i$i = $5;
 } else {
  $h$02$i$i = $5;$l1$01$i$i = $l;
  while(1) {
   $9 = $h$02$i$i << 5;
   $10 = $h$02$i$i >>> 2;
   $11 = (($9) + ($10))|0;
   $12 = (($l1$01$i$i) + -1)|0;
   $13 = (($str) + ($12)|0);
   $14 = HEAP8[$13>>0]|0;
   $15 = $14&255;
   $16 = (($11) + ($15))|0;
   $17 = $16 ^ $h$02$i$i;
   $18 = (($l1$01$i$i) - ($7))|0;
   $19 = ($18>>>0)<($7>>>0);
   if ($19) {
    $h$0$lcssa$i$i = $17;
    break;
   } else {
    $h$02$i$i = $17;$l1$01$i$i = $18;
   }
  }
 }
 $20 = ((($2)) + 32|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = (($21) + -1)|0;
 $23 = $22 & $h$0$lcssa$i$i;
 $24 = ((($2)) + 24|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = (($25) + ($23<<2)|0);
 $o$03$i = HEAP32[$26>>2]|0;
 $27 = ($o$03$i|0)==(0|0);
 L12: do {
  if (!($27)) {
   $o$04$i = $o$03$i;
   while(1) {
    $28 = ((($o$04$i)) + 8|0);
    $29 = HEAP32[$28>>2]|0;
    $30 = ($h$0$lcssa$i$i|0)==($29|0);
    if ($30) {
     $31 = ((($o$04$i)) + 12|0);
     $32 = HEAP32[$31>>2]|0;
     $33 = ($32|0)==($l|0);
     if ($33) {
      $34 = ((($o$04$i)) + 16|0);
      $35 = (_memcmp($str,$34,$l)|0);
      $36 = ($35|0)==(0);
      if ($36) {
       $o$04$i$lcssa = $o$04$i;
       break;
      }
     }
    }
    $o$0$i = HEAP32[$o$04$i>>2]|0;
    $48 = ($o$0$i|0)==(0|0);
    if ($48) {
     break L12;
    } else {
     $o$04$i = $o$0$i;
    }
   }
   $37 = ((($o$04$i$lcssa)) + 5|0);
   $38 = HEAP8[$37>>0]|0;
   $39 = $38&255;
   $40 = $39 ^ 3;
   $41 = ((($2)) + 60|0);
   $42 = HEAP8[$41>>0]|0;
   $43 = $42&255;
   $44 = $43 ^ 3;
   $45 = $44 & $40;
   $46 = ($45|0)==(0);
   if (!($46)) {
    $$0 = $o$04$i$lcssa;
    return ($$0|0);
   }
   $47 = $40&255;
   HEAP8[$37>>0] = $47;
   $$0 = $o$04$i$lcssa;
   return ($$0|0);
  }
 } while(0);
 $49 = ((($2)) + 28|0);
 $50 = HEAP32[$49>>2]|0;
 $51 = ($50>>>0)>=($21>>>0);
 $52 = ($21|0)<(1073741823);
 $or$cond$i$i = $52 & $51;
 if ($or$cond$i$i) {
  $53 = $21 << 1;
  _luaS_resize($L,$53);
  $$pre$i$i = HEAP32[$20>>2]|0;
  $$pre$i = HEAP32[$24>>2]|0;
  $55 = $$pre$i$i;$58 = $$pre$i;
 } else {
  $55 = $21;$58 = $25;
 }
 $54 = (($55) + -1)|0;
 $56 = $54 & $h$0$lcssa$i$i;
 $57 = (($58) + ($56<<2)|0);
 $59 = (($l) + 17)|0;
 $60 = (_luaC_newobj($L,4,$59,$57,0)|0);
 $61 = ((($60)) + 12|0);
 HEAP32[$61>>2] = $l;
 $62 = ((($60)) + 8|0);
 HEAP32[$62>>2] = $h$0$lcssa$i$i;
 $63 = ((($60)) + 6|0);
 HEAP8[$63>>0] = 0;
 $64 = ((($60)) + 16|0);
 _memcpy(($64|0),($str|0),($l|0))|0;
 $65 = (($64) + ($l)|0);
 HEAP8[$65>>0] = 0;
 $66 = HEAP32[$49>>2]|0;
 $67 = (($66) + 1)|0;
 HEAP32[$49>>2] = $67;
 $$0 = $60;
 return ($$0|0);
}
function _luaS_new($L,$str) {
 $L = $L|0;
 $str = $str|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strlen($str)|0);
 $1 = (_luaS_newlstr($L,$str,$0)|0);
 return ($1|0);
}
function _luaS_newudata($L,$s,$e) {
 $L = $L|0;
 $s = $s|0;
 $e = $e|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($s>>>0)>(4294967269);
 if ($0) {
  _luaM_toobig($L);
  // unreachable;
 } else {
  $1 = (($s) + 24)|0;
  $2 = (_luaC_newobj($L,7,$1,0,0)|0);
  $3 = ((($2)) + 16|0);
  HEAP32[$3>>2] = $s;
  $4 = ((($2)) + 8|0);
  HEAP32[$4>>2] = 0;
  $5 = ((($2)) + 12|0);
  HEAP32[$5>>2] = $e;
  return ($2|0);
 }
 return (0)|0;
}
function _luaH_next($L,$t,$key) {
 $L = $L|0;
 $t = $t|0;
 $key = $key|0;
 var $$0 = 0, $$lcssa = 0, $$lcssa32 = 0, $$phi$trans$insert = 0, $$pr$i = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0.0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0.0, $50 = 0.0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0.0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $i$0 = 0, $i$0$in = 0, $i$0$in$lcssa30 = 0, $i$0$in$ph = 0, $i$0$lcssa = 0, $i$0$lcssa31 = 0, $i$19 = 0;
 var $i$19$lcssa = 0, $n$0$i = 0, $n$0$i$lcssa = 0, $u$sroa$0$i$i = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp + 8|0;
 $u$sroa$0$i$i = sp;
 $0 = ((($key)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 do {
  if ($2) {
   $$phi$trans$insert = ((($t)) + 28|0);
   $$pre = HEAP32[$$phi$trans$insert>>2]|0;
   $44 = $$pre;$i$0$in$ph = -1;
  } else {
   $3 = ($1|0)==(3);
   if ($3) {
    $4 = +HEAPF64[$key>>3];
    $5 = $4 + 6755399441055744.0;
    HEAPF64[$u$sroa$0$i$i>>3] = $5;
    $6 = HEAP32[$u$sroa$0$i$i>>2]|0;
    $7 = (+($6|0));
    $8 = $7 == $4;
    if ($8) {
     $9 = ($6|0)>(0);
     if ($9) {
      $10 = ((($t)) + 28|0);
      $11 = HEAP32[$10>>2]|0;
      $12 = ($6|0)>($11|0);
      if (!($12)) {
       $13 = (($6) + -1)|0;
       $44 = $11;$i$0$in$ph = $13;
       break;
      }
     }
    } else {
     label = 5;
    }
   } else {
    label = 5;
   }
   if ((label|0) == 5) {
   }
   $14 = (_mainposition($t,$key)|0);
   $n$0$i = $14;
   while(1) {
    $15 = ((($n$0$i)) + 16|0);
    $16 = ((($n$0$i)) + 24|0);
    $17 = HEAP32[$16>>2]|0;
    $18 = HEAP32[$0>>2]|0;
    $19 = ($17|0)==($18|0);
    if ($19) {
     $20 = (_luaV_equalobj_(0,$15,$key)|0);
     $21 = ($20|0)==(0);
     if (!($21)) {
      $n$0$i$lcssa = $n$0$i;
      label = 16;
      break;
     }
     $$pr$i = HEAP32[$16>>2]|0;
     $23 = $$pr$i;
    } else {
     $23 = $17;
    }
    $22 = ($23|0)==(11);
    if ($22) {
     $24 = HEAP32[$0>>2]|0;
     $25 = $24 & 64;
     $26 = ($25|0)==(0);
     if (!($26)) {
      $27 = HEAP32[$15>>2]|0;
      $28 = HEAP32[$key>>2]|0;
      $29 = ($27|0)==($28|0);
      if ($29) {
       $n$0$i$lcssa = $n$0$i;
       label = 16;
       break;
      }
     }
    }
    $40 = ((($n$0$i)) + 28|0);
    $41 = HEAP32[$40>>2]|0;
    $42 = ($41|0)==(0|0);
    if ($42) {
     label = 19;
     break;
    } else {
     $n$0$i = $41;
    }
   }
   if ((label|0) == 16) {
    $30 = ((($t)) + 16|0);
    $31 = HEAP32[$30>>2]|0;
    $32 = $n$0$i$lcssa;
    $33 = $31;
    $34 = (($32) - ($33))|0;
    $35 = $34 >> 5;
    $36 = ((($t)) + 28|0);
    $37 = HEAP32[$36>>2]|0;
    $38 = (($35) + ($37))|0;
    $44 = $37;$i$0$in$ph = $38;
    break;
   }
   else if ((label|0) == 19) {
    _luaG_runerror($L,6841,$vararg_buffer);
    // unreachable;
   }
  }
 } while(0);
 $39 = ((($t)) + 12|0);
 $i$0$in = $i$0$in$ph;
 while(1) {
  $i$0 = (($i$0$in) + 1)|0;
  $43 = ($i$0|0)<($44|0);
  if (!($43)) {
   $i$0$lcssa = $i$0;
   break;
  }
  $45 = HEAP32[$39>>2]|0;
  $46 = (((($45) + ($i$0<<4)|0)) + 8|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = ($47|0)==(0);
  if ($48) {
   $i$0$in = $i$0;
  } else {
   $$lcssa = $45;$$lcssa32 = $46;$i$0$in$lcssa30 = $i$0$in;$i$0$lcssa31 = $i$0;
   label = 22;
   break;
  }
 }
 if ((label|0) == 22) {
  $49 = (($i$0$in$lcssa30) + 2)|0;
  $50 = (+($49|0));
  HEAPF64[$key>>3] = $50;
  HEAP32[$0>>2] = 3;
  $51 = (($$lcssa) + ($i$0$lcssa31<<4)|0);
  $52 = ((($key)) + 16|0);
  $53 = $51;
  $54 = $53;
  $55 = HEAP32[$54>>2]|0;
  $56 = (($53) + 4)|0;
  $57 = $56;
  $58 = HEAP32[$57>>2]|0;
  $59 = $52;
  $60 = $59;
  HEAP32[$60>>2] = $55;
  $61 = (($59) + 4)|0;
  $62 = $61;
  HEAP32[$62>>2] = $58;
  $63 = HEAP32[$$lcssa32>>2]|0;
  $64 = ((($key)) + 24|0);
  HEAP32[$64>>2] = $63;
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $65 = (($i$0$lcssa) - ($44))|0;
 $66 = ((($t)) + 7|0);
 $67 = HEAP8[$66>>0]|0;
 $68 = $67&255;
 $69 = 1 << $68;
 $70 = ($65|0)<($69|0);
 if (!($70)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $71 = ((($t)) + 16|0);
 $72 = HEAP32[$71>>2]|0;
 $i$19 = $65;
 while(1) {
  $73 = (((($72) + ($i$19<<5)|0)) + 8|0);
  $74 = HEAP32[$73>>2]|0;
  $75 = ($74|0)==(0);
  if (!($75)) {
   $i$19$lcssa = $i$19;
   break;
  }
  $105 = (($i$19) + 1)|0;
  $106 = ($105|0)<($69|0);
  if ($106) {
   $i$19 = $105;
  } else {
   $$0 = 0;
   label = 28;
   break;
  }
 }
 if ((label|0) == 28) {
  STACKTOP = sp;return ($$0|0);
 }
 $76 = (((($72) + ($i$19$lcssa<<5)|0)) + 16|0);
 $77 = $76;
 $78 = $77;
 $79 = HEAP32[$78>>2]|0;
 $80 = (($77) + 4)|0;
 $81 = $80;
 $82 = HEAP32[$81>>2]|0;
 $83 = $key;
 $84 = $83;
 HEAP32[$84>>2] = $79;
 $85 = (($83) + 4)|0;
 $86 = $85;
 HEAP32[$86>>2] = $82;
 $87 = (((($72) + ($i$19$lcssa<<5)|0)) + 24|0);
 $88 = HEAP32[$87>>2]|0;
 HEAP32[$0>>2] = $88;
 $89 = HEAP32[$71>>2]|0;
 $90 = (($89) + ($i$19$lcssa<<5)|0);
 $91 = ((($key)) + 16|0);
 $92 = $90;
 $93 = $92;
 $94 = HEAP32[$93>>2]|0;
 $95 = (($92) + 4)|0;
 $96 = $95;
 $97 = HEAP32[$96>>2]|0;
 $98 = $91;
 $99 = $98;
 HEAP32[$99>>2] = $94;
 $100 = (($98) + 4)|0;
 $101 = $100;
 HEAP32[$101>>2] = $97;
 $102 = (((($89) + ($i$19$lcssa<<5)|0)) + 8|0);
 $103 = HEAP32[$102>>2]|0;
 $104 = ((($key)) + 24|0);
 HEAP32[$104>>2] = $103;
 $$0 = 1;
 STACKTOP = sp;return ($$0|0);
}
function _luaH_resize($L,$t,$nasize,$nhsize) {
 $L = $L|0;
 $t = $t|0;
 $nasize = $nasize|0;
 $nhsize = $nhsize|0;
 var $$0$i = 0, $$0$i$i = 0, $$0$i3 = 0, $$pre = 0, $$pre$phi16Z2D = 0.0, $$pre$phiZ2D = 0, $$pre15 = 0.0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0;
 var $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0.0, $48 = 0.0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0.0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cell$0$i = 0, $exitcond = 0, $exitcond$i = 0, $i$01$i = 0, $i$01$i1 = 0, $i$07 = 0, $i$1$i$i$i = 0, $i$16 = 0, $i$16$in = 0, $k$i = 0, $lsize$0$i = 0, $n$0$i$i = 0, $n$0$i$i$lcssa = 0, $phitmp$i = 0;
 var $u$sroa$0$i$i$i = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp + 24|0;
 $u$sroa$0$i$i$i = sp + 16|0;
 $k$i = sp;
 $0 = ((($t)) + 28|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($t)) + 7|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = $3&255;
 $5 = ((($t)) + 16|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($1|0)<($nasize|0);
 if ($7) {
  $8 = (($nasize) + 1)|0;
  $9 = ($8>>>0)>(268435455);
  if ($9) {
   _luaM_toobig($L);
   // unreachable;
  }
  $10 = ((($t)) + 12|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = $1 << 4;
  $13 = $nasize << 4;
  $14 = (_luaM_realloc_($L,$11,$12,$13)|0);
  HEAP32[$10>>2] = $14;
  $15 = HEAP32[$0>>2]|0;
  $16 = ($15|0)<($nasize|0);
  if ($16) {
   $i$01$i1 = $15;
   while(1) {
    $17 = (((($14) + ($i$01$i1<<4)|0)) + 8|0);
    HEAP32[$17>>2] = 0;
    $18 = (($i$01$i1) + 1)|0;
    $exitcond$i = ($18|0)==($nasize|0);
    if ($exitcond$i) {
     break;
    } else {
     $i$01$i1 = $18;
    }
   }
  }
  HEAP32[$0>>2] = $nasize;
 }
 $19 = ($nhsize|0)==(0);
 if ($19) {
  HEAP32[$5>>2] = 40;
  $$0$i = 0;$33 = 40;$lsize$0$i = 0;
 } else {
  $20 = (_luaO_ceillog2($nhsize)|0);
  $21 = ($20|0)>(30);
  if ($21) {
   _luaG_runerror($L,6863,$vararg_buffer);
   // unreachable;
  }
  $22 = 1 << $20;
  $23 = (($22) + 1)|0;
  $24 = ($23>>>0)>(134217727);
  if ($24) {
   _luaM_toobig($L);
   // unreachable;
  }
  $25 = $22 << 5;
  $26 = (_luaM_realloc_($L,0,0,$25)|0);
  HEAP32[$5>>2] = $26;
  $i$01$i = 0;
  while(1) {
   $27 = (((($26) + ($i$01$i<<5)|0)) + 28|0);
   HEAP32[$27>>2] = 0;
   $28 = (((($26) + ($i$01$i<<5)|0)) + 24|0);
   HEAP32[$28>>2] = 0;
   $29 = (((($26) + ($i$01$i<<5)|0)) + 8|0);
   HEAP32[$29>>2] = 0;
   $30 = (($i$01$i) + 1)|0;
   $31 = ($30|0)<($22|0);
   if ($31) {
    $i$01$i = $30;
   } else {
    break;
   }
  }
  $phitmp$i = $20&255;
  $$0$i = $22;$33 = $26;$lsize$0$i = $phitmp$i;
 }
 HEAP8[$2>>0] = $lsize$0$i;
 $32 = (($33) + ($$0$i<<5)|0);
 $34 = ((($t)) + 20|0);
 HEAP32[$34>>2] = $32;
 $35 = ($1|0)>($nasize|0);
 do {
  if ($35) {
   HEAP32[$0>>2] = $nasize;
   $36 = ((($t)) + 12|0);
   $37 = ((($k$i)) + 8|0);
   $38 = ((($u$sroa$0$i$i$i)) + 4|0);
   $i$07 = $nasize;
   while(1) {
    $39 = HEAP32[$36>>2]|0;
    $40 = (((($39) + ($i$07<<4)|0)) + 8|0);
    $41 = HEAP32[$40>>2]|0;
    $42 = ($41|0)==(0);
    if ($42) {
     $$pre = (($i$07) + 1)|0;
     $$pre$phiZ2D = $$pre;
    } else {
     $43 = (($39) + ($i$07<<4)|0);
     $44 = (($i$07) + 1)|0;
     $45 = HEAP32[$0>>2]|0;
     $46 = ($i$07>>>0)<($45>>>0);
     L31: do {
      if ($46) {
       $$0$i$i = $43;
       label = 28;
      } else {
       $47 = (+($44|0));
       $48 = $47 + 1.0;
       HEAPF64[$u$sroa$0$i$i$i>>3] = $48;
       $49 = HEAP32[$u$sroa$0$i$i$i>>2]|0;
       $50 = HEAP32[$38>>2]|0;
       $51 = (($50) + ($49))|0;
       $52 = ($51|0)<(0);
       if ($52) {
        $53 = (0 - ($51))|0;
        $54 = ($51|0)==($53|0);
        $55 = $54 ? 0 : $53;
        $i$1$i$i$i = $55;
       } else {
        $i$1$i$i$i = $51;
       }
       $56 = HEAP8[$2>>0]|0;
       $57 = $56&255;
       $58 = 1 << $57;
       $59 = (($58) + -1)|0;
       $60 = $59 | 1;
       $61 = (($i$1$i$i$i|0) % ($60|0))&-1;
       $62 = HEAP32[$5>>2]|0;
       $63 = (($62) + ($61<<5)|0);
       $n$0$i$i = $63;
       while(1) {
        $64 = ((($n$0$i$i)) + 24|0);
        $65 = HEAP32[$64>>2]|0;
        $66 = ($65|0)==(3);
        if ($66) {
         $67 = ((($n$0$i$i)) + 16|0);
         $68 = +HEAPF64[$67>>3];
         $69 = $68 == $47;
         if ($69) {
          $n$0$i$i$lcssa = $n$0$i$i;
          break;
         }
        }
        $70 = ((($n$0$i$i)) + 28|0);
        $71 = HEAP32[$70>>2]|0;
        $72 = ($71|0)==(0|0);
        if ($72) {
         $$pre$phi16Z2D = $47;
         label = 30;
         break L31;
        } else {
         $n$0$i$i = $71;
        }
       }
       $$0$i$i = $n$0$i$i$lcssa;
       label = 28;
      }
     } while(0);
     if ((label|0) == 28) {
      label = 0;
      $73 = ($$0$i$i|0)==(24|0);
      if ($73) {
       $$pre15 = (+($44|0));
       $$pre$phi16Z2D = $$pre15;
       label = 30;
      } else {
       $cell$0$i = $$0$i$i;
      }
     }
     if ((label|0) == 30) {
      label = 0;
      HEAPF64[$k$i>>3] = $$pre$phi16Z2D;
      HEAP32[$37>>2] = 3;
      $74 = (_luaH_newkey($L,$t,$k$i)|0);
      $cell$0$i = $74;
     }
     $75 = $43;
     $76 = $75;
     $77 = HEAP32[$76>>2]|0;
     $78 = (($75) + 4)|0;
     $79 = $78;
     $80 = HEAP32[$79>>2]|0;
     $81 = $cell$0$i;
     $82 = $81;
     HEAP32[$82>>2] = $77;
     $83 = (($81) + 4)|0;
     $84 = $83;
     HEAP32[$84>>2] = $80;
     $85 = HEAP32[$40>>2]|0;
     $86 = ((($cell$0$i)) + 8|0);
     HEAP32[$86>>2] = $85;
     $$pre$phiZ2D = $44;
    }
    $exitcond = ($$pre$phiZ2D|0)==($1|0);
    if ($exitcond) {
     break;
    } else {
     $i$07 = $$pre$phiZ2D;
    }
   }
   $87 = (($nasize) + 1)|0;
   $88 = ($87>>>0)>(268435455);
   if ($88) {
    _luaM_toobig($L);
    // unreachable;
   } else {
    $89 = ((($t)) + 12|0);
    $90 = HEAP32[$89>>2]|0;
    $91 = $1 << 4;
    $92 = $nasize << 4;
    $93 = (_luaM_realloc_($L,$90,$91,$92)|0);
    HEAP32[$89>>2] = $93;
    break;
   }
  }
 } while(0);
 $94 = 1 << $4;
 $95 = ($3<<24>>24)==(31);
 if (!($95)) {
  $i$16$in = $94;
  while(1) {
   $i$16 = (($i$16$in) + -1)|0;
   $96 = (((($6) + ($i$16<<5)|0)) + 8|0);
   $97 = HEAP32[$96>>2]|0;
   $98 = ($97|0)==(0);
   if (!($98)) {
    $100 = (($6) + ($i$16<<5)|0);
    $101 = (((($6) + ($i$16<<5)|0)) + 16|0);
    $102 = (_luaH_get($t,$101)|0);
    $103 = ($102|0)==(24|0);
    if ($103) {
     $104 = (_luaH_newkey($L,$t,$101)|0);
     $$0$i3 = $104;
    } else {
     $$0$i3 = $102;
    }
    $105 = $100;
    $106 = $105;
    $107 = HEAP32[$106>>2]|0;
    $108 = (($105) + 4)|0;
    $109 = $108;
    $110 = HEAP32[$109>>2]|0;
    $111 = $$0$i3;
    $112 = $111;
    HEAP32[$112>>2] = $107;
    $113 = (($111) + 4)|0;
    $114 = $113;
    HEAP32[$114>>2] = $110;
    $115 = HEAP32[$96>>2]|0;
    $116 = ((($$0$i3)) + 8|0);
    HEAP32[$116>>2] = $115;
   }
   $99 = ($i$16$in|0)>(1);
   if ($99) {
    $i$16$in = $i$16;
   } else {
    break;
   }
  }
 }
 $117 = ($6|0)==(40|0);
 if ($117) {
  STACKTOP = sp;return;
 }
 $118 = $94 << 5;
 (_luaM_realloc_($L,$6,$118,0)|0);
 STACKTOP = sp;return;
}
function _luaH_setint($L,$t,$key,$value) {
 $L = $L|0;
 $t = $t|0;
 $key = $key|0;
 $value = $value|0;
 var $$0$i = 0, $$pre = 0.0, $$pre$phiZ2D = 0.0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0.0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0, $cell$0 = 0, $i$1$i$i = 0, $k = 0, $n$0$i = 0, $n$0$i$lcssa = 0;
 var $u$sroa$0$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $u$sroa$0$i$i = sp + 16|0;
 $k = sp;
 $0 = (($key) + -1)|0;
 $1 = ((($t)) + 28|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($0>>>0)<($2>>>0);
 L1: do {
  if ($3) {
   $4 = ((($t)) + 12|0);
   $5 = HEAP32[$4>>2]|0;
   $6 = (($5) + ($0<<4)|0);
   $$0$i = $6;
   label = 10;
  } else {
   $7 = (+($key|0));
   $8 = $7 + 1.0;
   HEAPF64[$u$sroa$0$i$i>>3] = $8;
   $9 = HEAP32[$u$sroa$0$i$i>>2]|0;
   $10 = ((($u$sroa$0$i$i)) + 4|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = (($11) + ($9))|0;
   $13 = ($12|0)<(0);
   if ($13) {
    $14 = (0 - ($12))|0;
    $15 = ($12|0)==($14|0);
    $16 = $15 ? 0 : $14;
    $i$1$i$i = $16;
   } else {
    $i$1$i$i = $12;
   }
   $17 = ((($t)) + 7|0);
   $18 = HEAP8[$17>>0]|0;
   $19 = $18&255;
   $20 = 1 << $19;
   $21 = (($20) + -1)|0;
   $22 = $21 | 1;
   $23 = (($i$1$i$i|0) % ($22|0))&-1;
   $24 = ((($t)) + 16|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = (($25) + ($23<<5)|0);
   $n$0$i = $26;
   while(1) {
    $27 = ((($n$0$i)) + 24|0);
    $28 = HEAP32[$27>>2]|0;
    $29 = ($28|0)==(3);
    if ($29) {
     $30 = ((($n$0$i)) + 16|0);
     $31 = +HEAPF64[$30>>3];
     $32 = $31 == $7;
     if ($32) {
      $n$0$i$lcssa = $n$0$i;
      break;
     }
    }
    $33 = ((($n$0$i)) + 28|0);
    $34 = HEAP32[$33>>2]|0;
    $35 = ($34|0)==(0|0);
    if ($35) {
     $$pre$phiZ2D = $7;
     label = 12;
     break L1;
    } else {
     $n$0$i = $34;
    }
   }
   $$0$i = $n$0$i$lcssa;
   label = 10;
  }
 } while(0);
 if ((label|0) == 10) {
  $36 = ($$0$i|0)==(24|0);
  if ($36) {
   $$pre = (+($key|0));
   $$pre$phiZ2D = $$pre;
   label = 12;
  } else {
   $cell$0 = $$0$i;
  }
 }
 if ((label|0) == 12) {
  HEAPF64[$k>>3] = $$pre$phiZ2D;
  $37 = ((($k)) + 8|0);
  HEAP32[$37>>2] = 3;
  $38 = (_luaH_newkey($L,$t,$k)|0);
  $cell$0 = $38;
 }
 $39 = $value;
 $40 = $39;
 $41 = HEAP32[$40>>2]|0;
 $42 = (($39) + 4)|0;
 $43 = $42;
 $44 = HEAP32[$43>>2]|0;
 $45 = $cell$0;
 $46 = $45;
 HEAP32[$46>>2] = $41;
 $47 = (($45) + 4)|0;
 $48 = $47;
 HEAP32[$48>>2] = $44;
 $49 = ((($value)) + 8|0);
 $50 = HEAP32[$49>>2]|0;
 $51 = ((($cell$0)) + 8|0);
 HEAP32[$51>>2] = $50;
 STACKTOP = sp;return;
}
function _luaH_set($L,$t,$key) {
 $L = $L|0;
 $t = $t|0;
 $key = $key|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_luaH_get($t,$key)|0);
 $1 = ($0|0)==(24|0);
 if (!($1)) {
  $$0 = $0;
  return ($$0|0);
 }
 $2 = (_luaH_newkey($L,$t,$key)|0);
 $$0 = $2;
 return ($$0|0);
}
function _luaH_resizearray($L,$t,$nasize) {
 $L = $L|0;
 $t = $t|0;
 $nasize = $nasize|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($t)) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(40|0);
 if ($2) {
  $7 = 0;
 } else {
  $3 = ((($t)) + 7|0);
  $4 = HEAP8[$3>>0]|0;
  $5 = $4&255;
  $6 = 1 << $5;
  $7 = $6;
 }
 _luaH_resize($L,$t,$nasize,$7);
 return;
}
function _luaH_new($L) {
 $L = $L|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_luaC_newobj($L,5,32,0,0)|0);
 $1 = ((($0)) + 8|0);
 HEAP32[$1>>2] = 0;
 $2 = ((($0)) + 6|0);
 HEAP8[$2>>0] = -1;
 $3 = ((($0)) + 12|0);
 HEAP32[$3>>2] = 0;
 $4 = ((($0)) + 28|0);
 HEAP32[$4>>2] = 0;
 $5 = ((($0)) + 16|0);
 HEAP32[$5>>2] = 40;
 $6 = ((($0)) + 7|0);
 HEAP8[$6>>0] = 0;
 $7 = ((($0)) + 20|0);
 HEAP32[$7>>2] = 40;
 return ($0|0);
}
function _luaH_free($L,$t) {
 $L = $L|0;
 $t = $t|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($t)) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(40|0);
 if (!($2)) {
  $3 = ((($t)) + 7|0);
  $4 = HEAP8[$3>>0]|0;
  $5 = $4&255;
  $6 = 32 << $5;
  (_luaM_realloc_($L,$1,$6,0)|0);
 }
 $7 = ((($t)) + 12|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($t)) + 28|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $10 << 4;
 (_luaM_realloc_($L,$8,$11,0)|0);
 (_luaM_realloc_($L,$t,32,0)|0);
 return;
}
function _luaH_newkey($L,$t,$key) {
 $L = $L|0;
 $t = $t|0;
 $key = $key|0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i$i = 0, $$lcssa = 0, $$lcssa37 = 0, $$lcssa38 = 0, $$lcssa40 = 0, $$lcssa41 = 0, $$na$0$i$i = 0, $$off$i$i = 0, $$off$i$i$i = 0, $$pre$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0;
 var $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0;
 var $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0.0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0.0, $54 = 0.0, $55 = 0, $56 = 0.0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0, $71 = 0.0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $85$phi = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $a$03$i$i = 0, $a$1$i$i = 0, $ause$0$lcssa$i$i = 0, $ause$0$ph$i$i = 0, $ause$0$ph$i$i$lcssa = 0, $ause$06$i$i = 0, $i$0$i$i = 0, $i$0$ph$i$i = 0, $i$01$i$i = 0, $i$07$i$i = 0, $i$1$lcssa$i$i = 0, $i$11$i$i = 0, $lc$0$$i$i = 0, $lc$0$$i$i$lcssa = 0, $lc$0$lcssa$i$i = 0, $lc$02$i$i = 0;
 var $lg$04$i$i = 0, $lim$0$ph$i$i = 0, $mp$0 = 0, $n$05$i$i = 0, $n$1$i$i = 0, $n$2$i$i = 0, $na$04$i$i = 0, $na$1$i$i = 0, $na$2$i$i = 0, $not$$i$i = 0, $nums$i = 0, $or$cond = 0, $othern$0 = 0, $totaluse$0$ph$i$i = 0, $totaluse$0$ph$i$i$lcssa = 0, $ttlg$05$i$i = 0, $twotoi$0$n$0$i$i = 0, $twotoi$02$i$i = 0, $u$sroa$0$i$i$i = 0, $u$sroa$0$i$i$i$i = 0;
 var $vararg_buffer = 0, $vararg_buffer1 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 24|0;
 $vararg_buffer = sp + 16|0;
 $u$sroa$0$i$i$i = sp + 8|0;
 $u$sroa$0$i$i$i$i = sp;
 $nums$i = sp + 28|0;
 $0 = ((($key)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 switch ($1|0) {
 case 0:  {
  _luaG_runerror($L,6878,$vararg_buffer);
  // unreachable;
  break;
 }
 case 3:  {
  label = 3;
  break;
 }
 default: {
 }
 }
 if ((label|0) == 3) {
  $2 = +HEAPF64[$key>>3];
  $3 = ($2 == $2) & (0.0 == 0.0);
  if (!($3)) {
   _luaG_runerror($L,6897,$vararg_buffer1);
   // unreachable;
  }
 }
 $4 = (_mainposition($t,$key)|0);
 $5 = ((($4)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)!=(0);
 $8 = ($4|0)==(40|0);
 $or$cond = $8 | $7;
 do {
  if ($or$cond) {
   $9 = ((($t)) + 20|0);
   $10 = ((($t)) + 16|0);
   $11 = HEAP32[$10>>2]|0;
   $$pre$i = HEAP32[$9>>2]|0;
   $13 = $$pre$i;
   while(1) {
    $12 = ($13>>>0)>($11>>>0);
    if (!($12)) {
     break;
    }
    $14 = ((($13)) + -32|0);
    HEAP32[$9>>2] = $14;
    $15 = ((($13)) + -8|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = ($16|0)==(0);
    if ($17) {
     $$lcssa40 = $13;$$lcssa41 = $14;
     label = 39;
     break;
    } else {
     $13 = $14;
    }
   }
   if ((label|0) == 39) {
    $96 = ((($4)) + 16|0);
    $97 = (_mainposition($t,$96)|0);
    $98 = ($97|0)==($4|0);
    if ($98) {
     $103 = ((($4)) + 28|0);
     $104 = HEAP32[$103>>2]|0;
     $105 = ((($$lcssa40)) + -4|0);
     HEAP32[$105>>2] = $104;
     HEAP32[$103>>2] = $$lcssa41;
     $mp$0 = $$lcssa41;
     break;
    } else {
     $othern$0 = $97;
    }
    while(1) {
     $99 = ((($othern$0)) + 28|0);
     $100 = HEAP32[$99>>2]|0;
     $101 = ($100|0)==($4|0);
     if ($101) {
      $$lcssa = $99;
      break;
     } else {
      $othern$0 = $100;
     }
    }
    HEAP32[$$lcssa>>2] = $$lcssa41;
    ;HEAP32[$$lcssa41>>2]=HEAP32[$4>>2]|0;HEAP32[$$lcssa41+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$$lcssa41+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$$lcssa41+12>>2]=HEAP32[$4+12>>2]|0;HEAP32[$$lcssa41+16>>2]=HEAP32[$4+16>>2]|0;HEAP32[$$lcssa41+20>>2]=HEAP32[$4+20>>2]|0;HEAP32[$$lcssa41+24>>2]=HEAP32[$4+24>>2]|0;HEAP32[$$lcssa41+28>>2]=HEAP32[$4+28>>2]|0;
    $102 = ((($4)) + 28|0);
    HEAP32[$102>>2] = 0;
    HEAP32[$5>>2] = 0;
    $mp$0 = $4;
    break;
   }
   dest=$nums$i; stop=dest+124|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
   $18 = ((($t)) + 28|0);
   $19 = ((($t)) + 12|0);
   $20 = HEAP32[$18>>2]|0;
   $ause$06$i$i = 0;$i$07$i$i = 1;$lg$04$i$i = 0;$ttlg$05$i$i = 1;
   while(1) {
    $21 = ($ttlg$05$i$i|0)>($20|0);
    if ($21) {
     $22 = ($i$07$i$i|0)>($20|0);
     if ($22) {
      $ause$0$lcssa$i$i = $ause$06$i$i;
      break;
     } else {
      $lim$0$ph$i$i = $20;
     }
    } else {
     $lim$0$ph$i$i = $ttlg$05$i$i;
    }
    $23 = ($i$07$i$i|0)>($lim$0$ph$i$i|0);
    if ($23) {
     $i$1$lcssa$i$i = $i$07$i$i;$lc$0$lcssa$i$i = 0;
    } else {
     $24 = HEAP32[$19>>2]|0;
     $i$11$i$i = $i$07$i$i;$lc$02$i$i = 0;
     while(1) {
      $25 = (($i$11$i$i) + -1)|0;
      $26 = (((($24) + ($25<<4)|0)) + 8|0);
      $27 = HEAP32[$26>>2]|0;
      $not$$i$i = ($27|0)!=(0);
      $28 = $not$$i$i&1;
      $lc$0$$i$i = (($28) + ($lc$02$i$i))|0;
      $29 = (($i$11$i$i) + 1)|0;
      $30 = ($i$11$i$i|0)<($lim$0$ph$i$i|0);
      if ($30) {
       $i$11$i$i = $29;$lc$02$i$i = $lc$0$$i$i;
      } else {
       $lc$0$$i$i$lcssa = $lc$0$$i$i;
       break;
      }
     }
     $31 = (($lim$0$ph$i$i) + 1)|0;
     $i$1$lcssa$i$i = $31;$lc$0$lcssa$i$i = $lc$0$$i$i$lcssa;
    }
    $32 = (($nums$i) + ($lg$04$i$i<<2)|0);
    $33 = HEAP32[$32>>2]|0;
    $34 = (($33) + ($lc$0$lcssa$i$i))|0;
    HEAP32[$32>>2] = $34;
    $35 = (($lc$0$lcssa$i$i) + ($ause$06$i$i))|0;
    $36 = (($lg$04$i$i) + 1)|0;
    $37 = $ttlg$05$i$i << 1;
    $38 = ($36|0)<(31);
    if ($38) {
     $ause$06$i$i = $35;$i$07$i$i = $i$1$lcssa$i$i;$lg$04$i$i = $36;$ttlg$05$i$i = $37;
    } else {
     $ause$0$lcssa$i$i = $35;
     break;
    }
   }
   $39 = ((($t)) + 7|0);
   $40 = HEAP8[$39>>0]|0;
   $41 = $40&255;
   $42 = 1 << $41;
   $ause$0$ph$i$i = 0;$i$0$ph$i$i = $42;$totaluse$0$ph$i$i = 0;
   L32: while(1) {
    $i$0$i$i = $i$0$ph$i$i;
    while(1) {
     $43 = (($i$0$i$i) + -1)|0;
     $44 = ($i$0$i$i|0)==(0);
     if ($44) {
      $ause$0$ph$i$i$lcssa = $ause$0$ph$i$i;$totaluse$0$ph$i$i$lcssa = $totaluse$0$ph$i$i;
      break L32;
     }
     $45 = HEAP32[$10>>2]|0;
     $46 = (((($45) + ($43<<5)|0)) + 8|0);
     $47 = HEAP32[$46>>2]|0;
     $48 = ($47|0)==(0);
     if ($48) {
      $i$0$i$i = $43;
     } else {
      $$lcssa37 = $43;$$lcssa38 = $45;
      break;
     }
    }
    $49 = (((($$lcssa38) + ($$lcssa37<<5)|0)) + 24|0);
    $50 = HEAP32[$49>>2]|0;
    $51 = ($50|0)==(3);
    if ($51) {
     $52 = (((($$lcssa38) + ($$lcssa37<<5)|0)) + 16|0);
     $53 = +HEAPF64[$52>>3];
     $54 = $53 + 6755399441055744.0;
     HEAPF64[$u$sroa$0$i$i$i$i>>3] = $54;
     $55 = HEAP32[$u$sroa$0$i$i$i$i>>2]|0;
     $56 = (+($55|0));
     $57 = $56 == $53;
     if ($57) {
      $$off$i$i$i = (($55) + -1)|0;
      $58 = ($$off$i$i$i>>>0)<(1073741824);
      if ($58) {
       $59 = (_luaO_ceillog2($55)|0);
       $60 = (($nums$i) + ($59<<2)|0);
       $61 = HEAP32[$60>>2]|0;
       $62 = (($61) + 1)|0;
       HEAP32[$60>>2] = $62;
       $$0$i$i$i = 1;
      } else {
       $$0$i$i$i = 0;
      }
     } else {
      label = 23;
     }
    } else {
     label = 23;
    }
    if ((label|0) == 23) {
     label = 0;
     $$0$i$i$i = 0;
    }
    $63 = (($$0$i$i$i) + ($ause$0$ph$i$i))|0;
    $64 = (($totaluse$0$ph$i$i) + 1)|0;
    $ause$0$ph$i$i = $63;$i$0$ph$i$i = $$lcssa37;$totaluse$0$ph$i$i = $64;
   }
   $65 = (($ause$0$ph$i$i$lcssa) + ($ause$0$lcssa$i$i))|0;
   $66 = HEAP32[$0>>2]|0;
   $67 = ($66|0)==(3);
   if ($67) {
    $68 = +HEAPF64[$key>>3];
    $69 = $68 + 6755399441055744.0;
    HEAPF64[$u$sroa$0$i$i$i>>3] = $69;
    $70 = HEAP32[$u$sroa$0$i$i$i>>2]|0;
    $71 = (+($70|0));
    $72 = $71 == $68;
    if ($72) {
     $$off$i$i = (($70) + -1)|0;
     $73 = ($$off$i$i>>>0)<(1073741824);
     if ($73) {
      $74 = (_luaO_ceillog2($70)|0);
      $75 = (($nums$i) + ($74<<2)|0);
      $76 = HEAP32[$75>>2]|0;
      $77 = (($76) + 1)|0;
      HEAP32[$75>>2] = $77;
      $$0$i$i = 1;
     } else {
      $$0$i$i = 0;
     }
    } else {
     label = 29;
    }
   } else {
    label = 29;
   }
   if ((label|0) == 29) {
    $$0$i$i = 0;
   }
   $78 = (($65) + ($$0$i$i))|0;
   $79 = ($78|0)>(0);
   L53: do {
    if ($79) {
     $85 = 0;$a$03$i$i = 0;$i$01$i$i = 0;$n$05$i$i = 0;$na$04$i$i = 0;$twotoi$02$i$i = 1;
     while(1) {
      $80 = (($nums$i) + ($i$01$i$i<<2)|0);
      $81 = HEAP32[$80>>2]|0;
      $82 = ($81|0)>(0);
      if ($82) {
       $83 = (($81) + ($a$03$i$i))|0;
       $84 = ($83|0)>($85|0);
       $$na$0$i$i = $84 ? $83 : $na$04$i$i;
       $twotoi$0$n$0$i$i = $84 ? $twotoi$02$i$i : $n$05$i$i;
       $a$1$i$i = $83;$n$1$i$i = $twotoi$0$n$0$i$i;$na$1$i$i = $$na$0$i$i;
      } else {
       $a$1$i$i = $a$03$i$i;$n$1$i$i = $n$05$i$i;$na$1$i$i = $na$04$i$i;
      }
      $86 = ($a$1$i$i|0)==($78|0);
      if ($86) {
       $n$2$i$i = $n$1$i$i;$na$2$i$i = $na$1$i$i;
       break L53;
      }
      $87 = (($i$01$i$i) + 1)|0;
      $88 = $twotoi$02$i$i << 1;
      $89 = ($twotoi$02$i$i|0)<($78|0);
      if ($89) {
       $85$phi = $twotoi$02$i$i;$a$03$i$i = $a$1$i$i;$i$01$i$i = $87;$n$05$i$i = $n$1$i$i;$na$04$i$i = $na$1$i$i;$twotoi$02$i$i = $88;$85 = $85$phi;
      } else {
       $n$2$i$i = $n$1$i$i;$na$2$i$i = $na$1$i$i;
       break;
      }
     }
    } else {
     $n$2$i$i = 0;$na$2$i$i = 0;
    }
   } while(0);
   $90 = (($ause$0$lcssa$i$i) + 1)|0;
   $91 = (($90) + ($totaluse$0$ph$i$i$lcssa))|0;
   $92 = (($91) - ($na$2$i$i))|0;
   _luaH_resize($L,$t,$n$2$i$i,$92);
   $93 = (_luaH_get($t,$key)|0);
   $94 = ($93|0)==(24|0);
   if (!($94)) {
    $$0 = $93;
    STACKTOP = sp;return ($$0|0);
   }
   $95 = (_luaH_newkey($L,$t,$key)|0);
   $$0 = $95;
   STACKTOP = sp;return ($$0|0);
  } else {
   $mp$0 = $4;
  }
 } while(0);
 $106 = ((($mp$0)) + 16|0);
 $107 = $key;
 $108 = $107;
 $109 = HEAP32[$108>>2]|0;
 $110 = (($107) + 4)|0;
 $111 = $110;
 $112 = HEAP32[$111>>2]|0;
 $113 = $106;
 $114 = $113;
 HEAP32[$114>>2] = $109;
 $115 = (($113) + 4)|0;
 $116 = $115;
 HEAP32[$116>>2] = $112;
 $117 = HEAP32[$0>>2]|0;
 $118 = ((($mp$0)) + 24|0);
 HEAP32[$118>>2] = $117;
 $119 = HEAP32[$0>>2]|0;
 $120 = $119 & 64;
 $121 = ($120|0)==(0);
 if (!($121)) {
  $122 = HEAP32[$key>>2]|0;
  $123 = ((($122)) + 5|0);
  $124 = HEAP8[$123>>0]|0;
  $125 = $124 & 3;
  $126 = ($125<<24>>24)==(0);
  if (!($126)) {
   $127 = ((($t)) + 5|0);
   $128 = HEAP8[$127>>0]|0;
   $129 = $128 & 4;
   $130 = ($129<<24>>24)==(0);
   if (!($130)) {
    _luaC_barrierback_($L,$t);
   }
  }
 }
 $$0 = $mp$0;
 STACKTOP = sp;return ($$0|0);
}
function _luaH_getint($t,$key) {
 $t = $t|0;
 $key = $key|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0.0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0, $i$1$i = 0, $n$0 = 0, $n$0$lcssa = 0;
 var $u$sroa$0$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $u$sroa$0$i = sp;
 $0 = (($key) + -1)|0;
 $1 = ((($t)) + 28|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($0>>>0)<($2>>>0);
 if ($3) {
  $4 = ((($t)) + 12|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = (($5) + ($0<<4)|0);
  $$0 = $6;
  STACKTOP = sp;return ($$0|0);
 }
 $7 = (+($key|0));
 $8 = $7 + 1.0;
 HEAPF64[$u$sroa$0$i>>3] = $8;
 $9 = HEAP32[$u$sroa$0$i>>2]|0;
 $10 = ((($u$sroa$0$i)) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($11) + ($9))|0;
 $13 = ($12|0)<(0);
 if ($13) {
  $14 = (0 - ($12))|0;
  $15 = ($12|0)==($14|0);
  $16 = $15 ? 0 : $14;
  $i$1$i = $16;
 } else {
  $i$1$i = $12;
 }
 $17 = ((($t)) + 7|0);
 $18 = HEAP8[$17>>0]|0;
 $19 = $18&255;
 $20 = 1 << $19;
 $21 = (($20) + -1)|0;
 $22 = $21 | 1;
 $23 = (($i$1$i|0) % ($22|0))&-1;
 $24 = ((($t)) + 16|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = (($25) + ($23<<5)|0);
 $n$0 = $26;
 while(1) {
  $27 = ((($n$0)) + 24|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = ($28|0)==(3);
  if ($29) {
   $30 = ((($n$0)) + 16|0);
   $31 = +HEAPF64[$30>>3];
   $32 = $31 == $7;
   if ($32) {
    $n$0$lcssa = $n$0;
    break;
   }
  }
  $33 = ((($n$0)) + 28|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = ($34|0)==(0|0);
  if ($35) {
   $$0 = 24;
   label = 10;
   break;
  } else {
   $n$0 = $34;
  }
 }
 if ((label|0) == 10) {
  STACKTOP = sp;return ($$0|0);
 }
 $$0 = $n$0$lcssa;
 STACKTOP = sp;return ($$0|0);
}
function _luaH_getstr($t,$key) {
 $t = $t|0;
 $key = $key|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $n$0 = 0, $n$0$lcssa = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($key)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($t)) + 7|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = $3&255;
 $5 = 1 << $4;
 $6 = (($5) + -1)|0;
 $7 = $6 & $1;
 $8 = ((($t)) + 16|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (($9) + ($7<<5)|0);
 $n$0 = $10;
 while(1) {
  $11 = ((($n$0)) + 24|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ($12|0)==(68);
  if ($13) {
   $14 = ((($n$0)) + 16|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = ($15|0)==($key|0);
   if ($16) {
    $n$0$lcssa = $n$0;
    break;
   }
  }
  $17 = ((($n$0)) + 28|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = ($18|0)==(0|0);
  if ($19) {
   $$0 = 24;
   label = 6;
   break;
  } else {
   $n$0 = $18;
  }
 }
 if ((label|0) == 6) {
  return ($$0|0);
 }
 $$0 = $n$0$lcssa;
 return ($$0|0);
}
function _luaH_get($t,$key) {
 $t = $t|0;
 $key = $key|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0.0;
 var $26 = 0, $27 = 0.0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0.0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0.0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $8 = 0, $9 = 0, $i$1$i$i = 0, $n$0$i = 0, $n$0$i$lcssa = 0, $n$0$i1 = 0;
 var $n$0$i1$lcssa = 0, $n1$0 = 0, $n1$0$lcssa = 0, $u$sroa$0 = 0, $u$sroa$0$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $u$sroa$0$i$i = sp + 8|0;
 $u$sroa$0 = sp;
 $0 = ((($key)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & 63;
 switch ($2|0) {
 case 4:  {
  $3 = HEAP32[$key>>2]|0;
  $4 = ((($3)) + 8|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ((($t)) + 7|0);
  $7 = HEAP8[$6>>0]|0;
  $8 = $7&255;
  $9 = 1 << $8;
  $10 = (($9) + -1)|0;
  $11 = $10 & $5;
  $12 = ((($t)) + 16|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (($13) + ($11<<5)|0);
  $n$0$i = $14;
  while(1) {
   $15 = ((($n$0$i)) + 24|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = ($16|0)==(68);
   if ($17) {
    $18 = ((($n$0$i)) + 16|0);
    $19 = HEAP32[$18>>2]|0;
    $20 = ($19|0)==($3|0);
    if ($20) {
     $n$0$i$lcssa = $n$0$i;
     break;
    }
   }
   $21 = ((($n$0$i)) + 28|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = ($22|0)==(0|0);
   if ($23) {
    $$0 = 24;
    label = 22;
    break;
   } else {
    $n$0$i = $22;
   }
  }
  if ((label|0) == 22) {
   STACKTOP = sp;return ($$0|0);
  }
  $$0 = $n$0$i$lcssa;
  STACKTOP = sp;return ($$0|0);
  break;
 }
 case 3:  {
  $24 = +HEAPF64[$key>>3];
  $25 = $24 + 6755399441055744.0;
  HEAPF64[$u$sroa$0>>3] = $25;
  $26 = HEAP32[$u$sroa$0>>2]|0;
  $27 = (+($26|0));
  $28 = $27 == $24;
  if ($28) {
   $29 = (($26) + -1)|0;
   $30 = ((($t)) + 28|0);
   $31 = HEAP32[$30>>2]|0;
   $32 = ($29>>>0)<($31>>>0);
   if ($32) {
    $33 = ((($t)) + 12|0);
    $34 = HEAP32[$33>>2]|0;
    $35 = (($34) + ($29<<4)|0);
    $$0 = $35;
    STACKTOP = sp;return ($$0|0);
   }
   $36 = $27 + 1.0;
   HEAPF64[$u$sroa$0$i$i>>3] = $36;
   $37 = HEAP32[$u$sroa$0$i$i>>2]|0;
   $38 = ((($u$sroa$0$i$i)) + 4|0);
   $39 = HEAP32[$38>>2]|0;
   $40 = (($39) + ($37))|0;
   $41 = ($40|0)<(0);
   if ($41) {
    $42 = (0 - ($40))|0;
    $43 = ($40|0)==($42|0);
    $44 = $43 ? 0 : $42;
    $i$1$i$i = $44;
   } else {
    $i$1$i$i = $40;
   }
   $45 = ((($t)) + 7|0);
   $46 = HEAP8[$45>>0]|0;
   $47 = $46&255;
   $48 = 1 << $47;
   $49 = (($48) + -1)|0;
   $50 = $49 | 1;
   $51 = (($i$1$i$i|0) % ($50|0))&-1;
   $52 = ((($t)) + 16|0);
   $53 = HEAP32[$52>>2]|0;
   $54 = (($53) + ($51<<5)|0);
   $n$0$i1 = $54;
   while(1) {
    $55 = ((($n$0$i1)) + 24|0);
    $56 = HEAP32[$55>>2]|0;
    $57 = ($56|0)==(3);
    if ($57) {
     $58 = ((($n$0$i1)) + 16|0);
     $59 = +HEAPF64[$58>>3];
     $60 = $59 == $27;
     if ($60) {
      $n$0$i1$lcssa = $n$0$i1;
      break;
     }
    }
    $61 = ((($n$0$i1)) + 28|0);
    $62 = HEAP32[$61>>2]|0;
    $63 = ($62|0)==(0|0);
    if ($63) {
     $$0 = 24;
     label = 22;
     break;
    } else {
     $n$0$i1 = $62;
    }
   }
   if ((label|0) == 22) {
    STACKTOP = sp;return ($$0|0);
   }
   $$0 = $n$0$i1$lcssa;
   STACKTOP = sp;return ($$0|0);
  }
  break;
 }
 case 0:  {
  $$0 = 24;
  STACKTOP = sp;return ($$0|0);
  break;
 }
 default: {
 }
 }
 $64 = (_mainposition($t,$key)|0);
 $n1$0 = $64;
 while(1) {
  $65 = ((($n1$0)) + 24|0);
  $66 = HEAP32[$65>>2]|0;
  $67 = HEAP32[$0>>2]|0;
  $68 = ($66|0)==($67|0);
  if ($68) {
   $69 = ((($n1$0)) + 16|0);
   $70 = (_luaV_equalobj_(0,$69,$key)|0);
   $71 = ($70|0)==(0);
   if (!($71)) {
    $n1$0$lcssa = $n1$0;
    break;
   }
  }
  $72 = ((($n1$0)) + 28|0);
  $73 = HEAP32[$72>>2]|0;
  $74 = ($73|0)==(0|0);
  if ($74) {
   $$0 = 24;
   label = 22;
   break;
  } else {
   $n1$0 = $73;
  }
 }
 if ((label|0) == 22) {
  STACKTOP = sp;return ($$0|0);
 }
 $$0 = $n1$0$lcssa;
 STACKTOP = sp;return ($$0|0);
}
function _luaH_getn($t) {
 $t = $t|0;
 var $$$1$i = 0, $$0 = 0, $$0$i$i = 0, $$0$i12$i = 0, $$0$i6$i = 0, $$01$i = 0, $$01$i$lcssa = 0, $$121$i = 0, $$j$0 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0.0, $107 = 0.0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0;
 var $126 = 0, $127 = 0.0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0.0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0.0, $71 = 0.0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0.0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $i$0$ = 0, $i$0$i = 0, $i$0$i$lcssa = 0, $i$0$i$phi = 0, $i$09 = 0, $i$1$i = 0, $i$1$i$i$i = 0, $i$1$i$i3$i = 0, $i$1$i$i9$i = 0, $i$2$$i = 0, $i$222$i = 0, $j$08 = 0, $n$0$i$i = 0, $n$0$i$i$lcssa = 0;
 var $n$0$i11$i = 0, $n$0$i11$i$lcssa = 0, $n$0$i5$i = 0, $n$0$i5$i$lcssa = 0, $u$sroa$0$i$i$i = 0, $u$sroa$0$i$i2$i = 0, $u$sroa$0$i$i8$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $u$sroa$0$i$i8$i = sp + 16|0;
 $u$sroa$0$i$i2$i = sp + 8|0;
 $u$sroa$0$i$i$i = sp;
 $0 = ((($t)) + 28|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if (!($2)) {
  $3 = (($1) + -1)|0;
  $4 = ((($t)) + 12|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = (((($5) + ($3<<4)|0)) + 8|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($7|0)==(0);
  if ($8) {
   $9 = ($1>>>0)>(1);
   if ($9) {
    $i$09 = 0;$j$08 = $1;
   } else {
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
   while(1) {
    $10 = (($i$09) + ($j$08))|0;
    $11 = $10 >>> 1;
    $12 = (($11) + -1)|0;
    $13 = (((($5) + ($12<<4)|0)) + 8|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = ($14|0)==(0);
    $$j$0 = $15 ? $11 : $j$08;
    $i$0$ = $15 ? $i$09 : $11;
    $16 = (($$j$0) - ($i$0$))|0;
    $17 = ($16>>>0)>(1);
    if ($17) {
     $i$09 = $i$0$;$j$08 = $$j$0;
    } else {
     $$0 = $i$0$;
     break;
    }
   }
   STACKTOP = sp;return ($$0|0);
  }
 }
 $18 = ((($t)) + 16|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ($19|0)==(40|0);
 if ($20) {
  $$0 = $1;
  STACKTOP = sp;return ($$0|0);
 }
 $21 = (($1) + 1)|0;
 $22 = ((($t)) + 12|0);
 $23 = ((($t)) + 7|0);
 $24 = ((($u$sroa$0$i$i$i)) + 4|0);
 $$01$i = $21;$i$0$i = $1;
 while(1) {
  $25 = (($$01$i) + -1)|0;
  $26 = ($25>>>0)<($1>>>0);
  L15: do {
   if ($26) {
    $27 = HEAP32[$22>>2]|0;
    $28 = (($27) + ($25<<4)|0);
    $$0$i$i = $28;
   } else {
    $29 = (+($$01$i|0));
    $30 = $29 + 1.0;
    HEAPF64[$u$sroa$0$i$i$i>>3] = $30;
    $31 = HEAP32[$u$sroa$0$i$i$i>>2]|0;
    $32 = HEAP32[$24>>2]|0;
    $33 = (($32) + ($31))|0;
    $34 = ($33|0)<(0);
    if ($34) {
     $35 = (0 - ($33))|0;
     $36 = ($33|0)==($35|0);
     $37 = $36 ? 0 : $35;
     $i$1$i$i$i = $37;
    } else {
     $i$1$i$i$i = $33;
    }
    $38 = HEAP8[$23>>0]|0;
    $39 = $38&255;
    $40 = 1 << $39;
    $41 = (($40) + -1)|0;
    $42 = $41 | 1;
    $43 = (($i$1$i$i$i|0) % ($42|0))&-1;
    $44 = HEAP32[$18>>2]|0;
    $45 = (($44) + ($43<<5)|0);
    $n$0$i$i = $45;
    while(1) {
     $46 = ((($n$0$i$i)) + 24|0);
     $47 = HEAP32[$46>>2]|0;
     $48 = ($47|0)==(3);
     if ($48) {
      $49 = ((($n$0$i$i)) + 16|0);
      $50 = +HEAPF64[$49>>3];
      $51 = $50 == $29;
      if ($51) {
       $n$0$i$i$lcssa = $n$0$i$i;
       break;
      }
     }
     $52 = ((($n$0$i$i)) + 28|0);
     $53 = HEAP32[$52>>2]|0;
     $54 = ($53|0)==(0|0);
     if ($54) {
      $$0$i$i = 24;
      break L15;
     } else {
      $n$0$i$i = $53;
     }
    }
    $$0$i$i = $n$0$i$i$lcssa;
   }
  } while(0);
  $55 = ((($$0$i$i)) + 8|0);
  $56 = HEAP32[$55>>2]|0;
  $57 = ($56|0)==(0);
  if ($57) {
   $$01$i$lcssa = $$01$i;$i$0$i$lcssa = $i$0$i;
   break;
  }
  $62 = $$01$i << 1;
  $63 = ($62>>>0)>(2147483645);
  if ($63) {
   label = 20;
   break;
  } else {
   $i$0$i$phi = $$01$i;$$01$i = $62;$i$0$i = $i$0$i$phi;
  }
 }
 if ((label|0) == 20) {
  $64 = HEAP32[$0>>2]|0;
  $65 = ((($u$sroa$0$i$i8$i)) + 4|0);
  $i$1$i = 1;
  while(1) {
   $66 = (($i$1$i) + -1)|0;
   $67 = ($66>>>0)<($64>>>0);
   L33: do {
    if ($67) {
     $68 = HEAP32[$22>>2]|0;
     $69 = (($68) + ($66<<4)|0);
     $$0$i12$i = $69;
    } else {
     $70 = (+($i$1$i|0));
     $71 = $70 + 1.0;
     HEAPF64[$u$sroa$0$i$i8$i>>3] = $71;
     $72 = HEAP32[$u$sroa$0$i$i8$i>>2]|0;
     $73 = HEAP32[$65>>2]|0;
     $74 = (($73) + ($72))|0;
     $75 = ($74|0)<(0);
     if ($75) {
      $76 = (0 - ($74))|0;
      $77 = ($74|0)==($76|0);
      $78 = $77 ? 0 : $76;
      $i$1$i$i9$i = $78;
     } else {
      $i$1$i$i9$i = $74;
     }
     $79 = HEAP8[$23>>0]|0;
     $80 = $79&255;
     $81 = 1 << $80;
     $82 = (($81) + -1)|0;
     $83 = $82 | 1;
     $84 = (($i$1$i$i9$i|0) % ($83|0))&-1;
     $85 = HEAP32[$18>>2]|0;
     $86 = (($85) + ($84<<5)|0);
     $n$0$i11$i = $86;
     while(1) {
      $87 = ((($n$0$i11$i)) + 24|0);
      $88 = HEAP32[$87>>2]|0;
      $89 = ($88|0)==(3);
      if ($89) {
       $90 = ((($n$0$i11$i)) + 16|0);
       $91 = +HEAPF64[$90>>3];
       $92 = $91 == $70;
       if ($92) {
        $n$0$i11$i$lcssa = $n$0$i11$i;
        break;
       }
      }
      $93 = ((($n$0$i11$i)) + 28|0);
      $94 = HEAP32[$93>>2]|0;
      $95 = ($94|0)==(0|0);
      if ($95) {
       $$0$i12$i = 24;
       break L33;
      } else {
       $n$0$i11$i = $94;
      }
     }
     $$0$i12$i = $n$0$i11$i$lcssa;
    }
   } while(0);
   $96 = ((($$0$i12$i)) + 8|0);
   $97 = HEAP32[$96>>2]|0;
   $98 = ($97|0)==(0);
   $99 = (($i$1$i) + 1)|0;
   if ($98) {
    $$0 = $66;
    break;
   } else {
    $i$1$i = $99;
   }
  }
  STACKTOP = sp;return ($$0|0);
 }
 $58 = (($$01$i$lcssa) - ($i$0$i$lcssa))|0;
 $59 = ($58>>>0)>(1);
 if (!($59)) {
  $$0 = $i$0$i$lcssa;
  STACKTOP = sp;return ($$0|0);
 }
 $60 = HEAP32[$0>>2]|0;
 $61 = ((($u$sroa$0$i$i2$i)) + 4|0);
 $$121$i = $$01$i$lcssa;$i$222$i = $i$0$i$lcssa;
 while(1) {
  $100 = (($$121$i) + ($i$222$i))|0;
  $101 = $100 >>> 1;
  $102 = (($101) + -1)|0;
  $103 = ($102>>>0)<($60>>>0);
  L53: do {
   if ($103) {
    $104 = HEAP32[$22>>2]|0;
    $105 = (($104) + ($102<<4)|0);
    $$0$i6$i = $105;
   } else {
    $106 = (+($101|0));
    $107 = $106 + 1.0;
    HEAPF64[$u$sroa$0$i$i2$i>>3] = $107;
    $108 = HEAP32[$u$sroa$0$i$i2$i>>2]|0;
    $109 = HEAP32[$61>>2]|0;
    $110 = (($109) + ($108))|0;
    $111 = ($110|0)<(0);
    if ($111) {
     $112 = (0 - ($110))|0;
     $113 = ($110|0)==($112|0);
     $114 = $113 ? 0 : $112;
     $i$1$i$i3$i = $114;
    } else {
     $i$1$i$i3$i = $110;
    }
    $115 = HEAP8[$23>>0]|0;
    $116 = $115&255;
    $117 = 1 << $116;
    $118 = (($117) + -1)|0;
    $119 = $118 | 1;
    $120 = (($i$1$i$i3$i|0) % ($119|0))&-1;
    $121 = HEAP32[$18>>2]|0;
    $122 = (($121) + ($120<<5)|0);
    $n$0$i5$i = $122;
    while(1) {
     $123 = ((($n$0$i5$i)) + 24|0);
     $124 = HEAP32[$123>>2]|0;
     $125 = ($124|0)==(3);
     if ($125) {
      $126 = ((($n$0$i5$i)) + 16|0);
      $127 = +HEAPF64[$126>>3];
      $128 = $127 == $106;
      if ($128) {
       $n$0$i5$i$lcssa = $n$0$i5$i;
       break;
      }
     }
     $129 = ((($n$0$i5$i)) + 28|0);
     $130 = HEAP32[$129>>2]|0;
     $131 = ($130|0)==(0|0);
     if ($131) {
      $$0$i6$i = 24;
      break L53;
     } else {
      $n$0$i5$i = $130;
     }
    }
    $$0$i6$i = $n$0$i5$i$lcssa;
   }
  } while(0);
  $132 = ((($$0$i6$i)) + 8|0);
  $133 = HEAP32[$132>>2]|0;
  $134 = ($133|0)==(0);
  $$$1$i = $134 ? $101 : $$121$i;
  $i$2$$i = $134 ? $i$222$i : $101;
  $135 = (($$$1$i) - ($i$2$$i))|0;
  $136 = ($135>>>0)>(1);
  if ($136) {
   $$121$i = $$$1$i;$i$222$i = $i$2$$i;
  } else {
   $$0 = $i$2$$i;
   break;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _mainposition($t,$key) {
 $t = $t|0;
 $key = $key|0;
 var $$0 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0.0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0.0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $i$1$i = 0, $u$sroa$0$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $u$sroa$0$i = sp;
 $0 = ((($key)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & 63;
 switch ($2|0) {
 case 3:  {
  $3 = +HEAPF64[$key>>3];
  $4 = $3 + 1.0;
  HEAPF64[$u$sroa$0$i>>3] = $4;
  $5 = HEAP32[$u$sroa$0$i>>2]|0;
  $6 = ((($u$sroa$0$i)) + 4|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = (($7) + ($5))|0;
  $9 = ($8|0)<(0);
  if ($9) {
   $10 = (0 - ($8))|0;
   $11 = ($8|0)==($10|0);
   $12 = $11 ? 0 : $10;
   $i$1$i = $12;
  } else {
   $i$1$i = $8;
  }
  $13 = ((($t)) + 7|0);
  $14 = HEAP8[$13>>0]|0;
  $15 = $14&255;
  $16 = 1 << $15;
  $17 = (($16) + -1)|0;
  $18 = $17 | 1;
  $19 = (($i$1$i|0) % ($18|0))&-1;
  $20 = ((($t)) + 16|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = (($21) + ($19<<5)|0);
  $$0 = $22;
  STACKTOP = sp;return ($$0|0);
  break;
 }
 case 20:  {
  $23 = HEAP32[$key>>2]|0;
  $24 = ((($23)) + 6|0);
  $25 = HEAP8[$24>>0]|0;
  $26 = ($25<<24>>24)==(0);
  if ($26) {
   $27 = ((($23)) + 16|0);
   $28 = ((($23)) + 12|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = ((($23)) + 8|0);
   $31 = HEAP32[$30>>2]|0;
   $32 = (_luaS_hash($27,$29,$31)|0);
   HEAP32[$30>>2] = $32;
   HEAP8[$24>>0] = 1;
   $$pre = HEAP32[$key>>2]|0;
   $34 = $$pre;
  } else {
   $34 = $23;
  }
  $33 = ((($34)) + 8|0);
  $35 = HEAP32[$33>>2]|0;
  $36 = ((($t)) + 7|0);
  $37 = HEAP8[$36>>0]|0;
  $38 = $37&255;
  $39 = 1 << $38;
  $40 = (($39) + -1)|0;
  $41 = $40 & $35;
  $42 = ((($t)) + 16|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = (($43) + ($41<<5)|0);
  $$0 = $44;
  STACKTOP = sp;return ($$0|0);
  break;
 }
 case 4:  {
  $45 = HEAP32[$key>>2]|0;
  $46 = ((($45)) + 8|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = ((($t)) + 7|0);
  $49 = HEAP8[$48>>0]|0;
  $50 = $49&255;
  $51 = 1 << $50;
  $52 = (($51) + -1)|0;
  $53 = $52 & $47;
  $54 = ((($t)) + 16|0);
  $55 = HEAP32[$54>>2]|0;
  $56 = (($55) + ($53<<5)|0);
  $$0 = $56;
  STACKTOP = sp;return ($$0|0);
  break;
 }
 case 1:  {
  $57 = HEAP32[$key>>2]|0;
  $58 = ((($t)) + 7|0);
  $59 = HEAP8[$58>>0]|0;
  $60 = $59&255;
  $61 = 1 << $60;
  $62 = (($61) + -1)|0;
  $63 = $62 & $57;
  $64 = ((($t)) + 16|0);
  $65 = HEAP32[$64>>2]|0;
  $66 = (($65) + ($63<<5)|0);
  $$0 = $66;
  STACKTOP = sp;return ($$0|0);
  break;
 }
 case 2:  {
  $67 = HEAP32[$key>>2]|0;
  $68 = $67;
  $69 = ((($t)) + 7|0);
  $70 = HEAP8[$69>>0]|0;
  $71 = $70&255;
  $72 = 1 << $71;
  $73 = (($72) + -1)|0;
  $74 = $73 | 1;
  $75 = (($68>>>0) % ($74>>>0))&-1;
  $76 = ((($t)) + 16|0);
  $77 = HEAP32[$76>>2]|0;
  $78 = (($77) + ($75<<5)|0);
  $$0 = $78;
  STACKTOP = sp;return ($$0|0);
  break;
 }
 case 22:  {
  $79 = HEAP32[$key>>2]|0;
  $80 = $79;
  $81 = ((($t)) + 7|0);
  $82 = HEAP8[$81>>0]|0;
  $83 = $82&255;
  $84 = 1 << $83;
  $85 = (($84) + -1)|0;
  $86 = $85 | 1;
  $87 = (($80>>>0) % ($86>>>0))&-1;
  $88 = ((($t)) + 16|0);
  $89 = HEAP32[$88>>2]|0;
  $90 = (($89) + ($87<<5)|0);
  $$0 = $90;
  STACKTOP = sp;return ($$0|0);
  break;
 }
 default: {
  $91 = HEAP32[$key>>2]|0;
  $92 = $91;
  $93 = ((($t)) + 7|0);
  $94 = HEAP8[$93>>0]|0;
  $95 = $94&255;
  $96 = 1 << $95;
  $97 = (($96) + -1)|0;
  $98 = $97 | 1;
  $99 = (($92>>>0) % ($98>>>0))&-1;
  $100 = ((($t)) + 16|0);
  $101 = HEAP32[$100>>2]|0;
  $102 = (($101) + ($99<<5)|0);
  $$0 = $102;
  STACKTOP = sp;return ($$0|0);
 }
 }
 return (0)|0;
}
function _luaT_init($L) {
 $L = $L|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $i$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($L)) + 12|0);
 $i$01 = 0;
 while(1) {
  $1 = (240 + ($i$01<<2)|0);
  $2 = HEAP32[$1>>2]|0;
  $3 = (_luaS_new($L,$2)|0);
  $4 = HEAP32[$0>>2]|0;
  $5 = (((($4)) + 184|0) + ($i$01<<2)|0);
  HEAP32[$5>>2] = $3;
  $6 = HEAP32[$0>>2]|0;
  $7 = (((($6)) + 184|0) + ($i$01<<2)|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ((($8)) + 5|0);
  $10 = HEAP8[$9>>0]|0;
  $11 = $10&255;
  $12 = $11 | 32;
  $13 = $12&255;
  HEAP8[$9>>0] = $13;
  $14 = (($i$01) + 1)|0;
  $exitcond = ($14|0)==(17);
  if ($exitcond) {
   break;
  } else {
   $i$01 = $14;
  }
 }
 return;
}
function _luaT_gettm($events,$event,$ename) {
 $events = $events|0;
 $event = $event|0;
 $ename = $ename|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_luaH_getstr($events,$ename)|0);
 $1 = ((($0)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0);
 if (!($3)) {
  $$0 = $0;
  return ($$0|0);
 }
 $4 = 1 << $event;
 $5 = ((($events)) + 6|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = $6&255;
 $8 = $7 | $4;
 $9 = $8&255;
 HEAP8[$5>>0] = $9;
 $$0 = 0;
 return ($$0|0);
}
function _luaT_gettmbyobj($L,$o,$event) {
 $L = $L|0;
 $o = $o|0;
 $event = $event|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $mt$0 = 0, $mt$0$in = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = ((($o)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & 15;
 switch ($2|0) {
 case 5:  {
  $3 = HEAP32[$o>>2]|0;
  $4 = ((($3)) + 8|0);
  $mt$0$in = $4;
  break;
 }
 case 7:  {
  $5 = HEAP32[$o>>2]|0;
  $6 = ((($5)) + 8|0);
  $mt$0$in = $6;
  break;
 }
 default: {
  $7 = ((($L)) + 12|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = (((($8)) + 252|0) + ($2<<2)|0);
  $mt$0$in = $9;
 }
 }
 $mt$0 = HEAP32[$mt$0$in>>2]|0;
 $10 = ($mt$0|0)==(0|0);
 if ($10) {
  $16 = 24;
  return ($16|0);
 }
 $11 = ((($L)) + 12|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (((($12)) + 184|0) + ($event<<2)|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (_luaH_getstr($mt$0,$14)|0);
 $16 = $15;
 return ($16|0);
}
function _luaU_undump($L,$Z,$buff,$name) {
 $L = $L|0;
 $Z = $Z|0;
 $buff = $buff|0;
 $name = $name|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $S = 0, $cl$0 = 0, $h$i = 0, $s$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $h$i = sp + 16|0;
 $s$i = sp + 34|0;
 $S = sp;
 $0 = HEAP8[$name>>0]|0;
 switch ($0<<24>>24) {
 case 61: case 64:  {
  $1 = ((($name)) + 1|0);
  $2 = ((($S)) + 12|0);
  HEAP32[$2>>2] = $1;
  break;
 }
 case 27:  {
  $3 = ((($S)) + 12|0);
  HEAP32[$3>>2] = 7049;
  break;
 }
 default: {
  $4 = ((($S)) + 12|0);
  HEAP32[$4>>2] = $name;
 }
 }
 HEAP32[$S>>2] = $L;
 $5 = ((($S)) + 4|0);
 HEAP32[$5>>2] = $Z;
 $6 = ((($S)) + 8|0);
 HEAP32[$6>>2] = $buff;
 HEAP32[$h$i>>2] = 1635077147;
 $7 = ((($h$i)) + 4|0);
 $8 = ((($h$i)) + 5|0);
 HEAP8[$7>>0] = 82;
 $9 = ((($h$i)) + 6|0);
 HEAP8[$8>>0] = 0;
 $10 = ((($h$i)) + 7|0);
 HEAP8[$9>>0] = 1;
 $11 = ((($h$i)) + 8|0);
 HEAP8[$10>>0] = 4;
 $12 = ((($h$i)) + 9|0);
 HEAP8[$11>>0] = 4;
 $13 = ((($h$i)) + 10|0);
 HEAP8[$12>>0] = 4;
 $14 = ((($h$i)) + 11|0);
 HEAP8[$13>>0] = 8;
 $15 = ((($h$i)) + 12|0);
 HEAP8[$14>>0] = 0;
 ;HEAP8[$15>>0]=HEAP8[7063>>0]|0;HEAP8[$15+1>>0]=HEAP8[7063+1>>0]|0;HEAP8[$15+2>>0]=HEAP8[7063+2>>0]|0;HEAP8[$15+3>>0]=HEAP8[7063+3>>0]|0;HEAP8[$15+4>>0]=HEAP8[7063+4>>0]|0;HEAP8[$15+5>>0]=HEAP8[7063+5>>0]|0;
 HEAP8[$s$i>>0] = 27;
 $16 = ((($s$i)) + 1|0);
 $17 = (_luaZ_read($Z,$16,17)|0);
 $18 = ($17|0)==(0);
 if (!($18)) {
  _error($S,7070);
  // unreachable;
 }
 $19 = (_memcmp($h$i,$s$i,18)|0);
 $20 = ($19|0)==(0);
 if ($20) {
  $27 = (_luaF_newLclosure($L,1)|0);
  $28 = ((($L)) + 8|0);
  $29 = HEAP32[$28>>2]|0;
  HEAP32[$29>>2] = $27;
  $30 = ((($29)) + 8|0);
  HEAP32[$30>>2] = 70;
  $31 = HEAP32[$28>>2]|0;
  $32 = ((($31)) + 16|0);
  HEAP32[$28>>2] = $32;
  $33 = ((($L)) + 24|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = $34;
  $36 = $32;
  $37 = (($35) - ($36))|0;
  $38 = ($37|0)<(16);
  if ($38) {
   _luaD_growstack($L,0);
  }
  $39 = (_luaF_newproto($L)|0);
  $40 = ((($27)) + 12|0);
  HEAP32[$40>>2] = $39;
  _LoadFunction($S,$39);
  $41 = HEAP32[$40>>2]|0;
  $42 = ((($41)) + 40|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = ($43|0)==(1);
  if ($44) {
   $cl$0 = $27;
   STACKTOP = sp;return ($cl$0|0);
  }
  $45 = (_luaF_newLclosure($L,$43)|0);
  $46 = ((($45)) + 12|0);
  HEAP32[$46>>2] = $41;
  $47 = HEAP32[$28>>2]|0;
  $48 = ((($47)) + -16|0);
  HEAP32[$48>>2] = $45;
  $49 = ((($47)) + -8|0);
  HEAP32[$49>>2] = 70;
  $cl$0 = $45;
  STACKTOP = sp;return ($cl$0|0);
 }
 $21 = (_memcmp($h$i,$s$i,4)|0);
 $22 = ($21|0)==(0);
 if (!($22)) {
  _error($S,7080);
  // unreachable;
 }
 $23 = (_memcmp($h$i,$s$i,6)|0);
 $24 = ($23|0)==(0);
 if (!($24)) {
  _error($S,7086);
  // unreachable;
 }
 $25 = (_memcmp($h$i,$s$i,12)|0);
 $26 = ($25|0)==(0);
 if ($26) {
  _error($S,7119);
  // unreachable;
 } else {
  _error($S,7106);
  // unreachable;
 }
 return (0)|0;
}
function _luaU_header($h) {
 $h = $h|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$h>>0]=1635077147&255;HEAP8[$h+1>>0]=(1635077147>>8)&255;HEAP8[$h+2>>0]=(1635077147>>16)&255;HEAP8[$h+3>>0]=1635077147>>24;
 $0 = ((($h)) + 4|0);
 $1 = ((($h)) + 5|0);
 HEAP8[$0>>0] = 82;
 $2 = ((($h)) + 6|0);
 HEAP8[$1>>0] = 0;
 $3 = ((($h)) + 7|0);
 HEAP8[$2>>0] = 1;
 $4 = ((($h)) + 8|0);
 HEAP8[$3>>0] = 4;
 $5 = ((($h)) + 9|0);
 HEAP8[$4>>0] = 4;
 $6 = ((($h)) + 10|0);
 HEAP8[$5>>0] = 4;
 $7 = ((($h)) + 11|0);
 HEAP8[$6>>0] = 8;
 $8 = ((($h)) + 12|0);
 HEAP8[$7>>0] = 0;
 ;HEAP8[$8>>0]=HEAP8[7063>>0]|0;HEAP8[$8+1>>0]=HEAP8[7063+1>>0]|0;HEAP8[$8+2>>0]=HEAP8[7063+2>>0]|0;HEAP8[$8+3>>0]=HEAP8[7063+3>>0]|0;HEAP8[$8+4>>0]=HEAP8[7063+4>>0]|0;HEAP8[$8+5>>0]=HEAP8[7063+5>>0]|0;
 return;
}
function _error($S,$why) {
 $S = $S|0;
 $why = $why|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = HEAP32[$S>>2]|0;
 $1 = ((($S)) + 12|0);
 $2 = HEAP32[$1>>2]|0;
 HEAP32[$vararg_buffer>>2] = $2;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $why;
 (_luaO_pushfstring($0,7129,$vararg_buffer)|0);
 $3 = HEAP32[$S>>2]|0;
 _luaD_throw($3,3);
 // unreachable;
}
function _LoadFunction($S,$f) {
 $S = $S|0;
 $f = $f|0;
 var $$0$i$i = 0, $$0$i$i32 = 0, $$0$i17$i = 0, $$0$i5$i = 0, $$pre = 0, $$pre48 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0;
 var $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0;
 var $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0;
 var $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0;
 var $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0;
 var $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0;
 var $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0;
 var $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0;
 var $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0.0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond = 0, $exitcond$i = 0, $exitcond$i22 = 0, $exitcond44 = 0, $exitcond4449 = 0, $exitcond45 = 0;
 var $i$0$i41 = 0, $i$029$i = 0, $i$07$i = 0, $i$1$i3950 = 0, $i$126$i = 0, $i$16$i = 0, $i$225$i = 0, $i$3$i36 = 0, $size$i$i = 0, $size$i$i24 = 0, $size$i16$i = 0, $size$i4$i = 0, $x$i = 0, $x$i$i = 0, $x$i$i13 = 0, $x$i$i18 = 0, $x$i$i27 = 0, $x$i1$i = 0, $x$i1$i17 = 0, $x$i1$i26 = 0;
 var $x$i10 = 0, $x$i10$i = 0, $x$i13$i = 0, $x$i2 = 0, $x$i3$i = 0, $x$i3$i25 = 0, $x$i5 = 0, $x$i6$i = 0, $x$i7 = 0, $x$i7$i = 0, $x$i8$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $x$i8$i = sp + 64|0;
 $size$i$i24 = sp + 60|0;
 $x$i6$i = sp;
 $x$i3$i25 = sp + 74|0;
 $x$i1$i26 = sp + 73|0;
 $x$i$i27 = sp + 56|0;
 $x$i3$i = sp + 72|0;
 $x$i1$i17 = sp + 71|0;
 $x$i$i18 = sp + 52|0;
 $x$i$i13 = sp + 48|0;
 $x$i10 = sp + 70|0;
 $x$i7 = sp + 69|0;
 $x$i5 = sp + 68|0;
 $x$i2 = sp + 44|0;
 $x$i = sp + 40|0;
 $size$i16$i = sp + 36|0;
 $x$i13$i = sp + 32|0;
 $x$i10$i = sp + 28|0;
 $x$i7$i = sp + 24|0;
 $size$i4$i = sp + 20|0;
 $x$i1$i = sp + 16|0;
 $x$i$i = sp + 12|0;
 $size$i$i = sp + 8|0;
 $0 = ((($S)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (_luaZ_read($1,$x$i,4)|0);
 $3 = ($2|0)==(0);
 if (!($3)) {
  _error($S,7070);
  // unreachable;
 }
 $4 = HEAP32[$x$i>>2]|0;
 $5 = ($4|0)<(0);
 if ($5) {
  _error($S,7119);
  // unreachable;
 }
 $6 = ((($f)) + 64|0);
 HEAP32[$6>>2] = $4;
 $7 = HEAP32[$0>>2]|0;
 $8 = (_luaZ_read($7,$x$i2,4)|0);
 $9 = ($8|0)==(0);
 if (!($9)) {
  _error($S,7070);
  // unreachable;
 }
 $10 = HEAP32[$x$i2>>2]|0;
 $11 = ($10|0)<(0);
 if ($11) {
  _error($S,7119);
  // unreachable;
 }
 $12 = ((($f)) + 68|0);
 HEAP32[$12>>2] = $10;
 $13 = HEAP32[$0>>2]|0;
 $14 = (_luaZ_read($13,$x$i5,1)|0);
 $15 = ($14|0)==(0);
 if (!($15)) {
  _error($S,7070);
  // unreachable;
 }
 $16 = HEAP8[$x$i5>>0]|0;
 $17 = ((($f)) + 76|0);
 HEAP8[$17>>0] = $16;
 $18 = HEAP32[$0>>2]|0;
 $19 = (_luaZ_read($18,$x$i7,1)|0);
 $20 = ($19|0)==(0);
 if (!($20)) {
  _error($S,7070);
  // unreachable;
 }
 $21 = HEAP8[$x$i7>>0]|0;
 $22 = ((($f)) + 77|0);
 HEAP8[$22>>0] = $21;
 $23 = HEAP32[$0>>2]|0;
 $24 = (_luaZ_read($23,$x$i10,1)|0);
 $25 = ($24|0)==(0);
 if (!($25)) {
  _error($S,7070);
  // unreachable;
 }
 $26 = HEAP8[$x$i10>>0]|0;
 $27 = ((($f)) + 78|0);
 HEAP8[$27>>0] = $26;
 $28 = HEAP32[$0>>2]|0;
 $29 = (_luaZ_read($28,$x$i$i13,4)|0);
 $30 = ($29|0)==(0);
 if (!($30)) {
  _error($S,7070);
  // unreachable;
 }
 $31 = HEAP32[$x$i$i13>>2]|0;
 $32 = ($31|0)<(0);
 if ($32) {
  _error($S,7119);
  // unreachable;
 }
 $33 = (($31) + 1)|0;
 $34 = ($33>>>0)>(1073741823);
 $35 = HEAP32[$S>>2]|0;
 if ($34) {
  _luaM_toobig($35);
  // unreachable;
 }
 $36 = $31 << 2;
 $37 = (_luaM_realloc_($35,0,0,$36)|0);
 $38 = ((($f)) + 12|0);
 HEAP32[$38>>2] = $37;
 $39 = ((($f)) + 48|0);
 HEAP32[$39>>2] = $31;
 $40 = HEAP32[$0>>2]|0;
 $41 = (_luaZ_read($40,$37,$36)|0);
 $42 = ($41|0)==(0);
 if (!($42)) {
  _error($S,7070);
  // unreachable;
 }
 $43 = HEAP32[$0>>2]|0;
 $44 = (_luaZ_read($43,$x$i$i27,4)|0);
 $45 = ($44|0)==(0);
 if (!($45)) {
  _error($S,7070);
  // unreachable;
 }
 $46 = HEAP32[$x$i$i27>>2]|0;
 $47 = ($46|0)<(0);
 if ($47) {
  _error($S,7119);
  // unreachable;
 }
 $48 = (($46) + 1)|0;
 $49 = ($48>>>0)>(268435455);
 $50 = HEAP32[$S>>2]|0;
 if ($49) {
  _luaM_toobig($50);
  // unreachable;
 }
 $51 = $46 << 4;
 $52 = (_luaM_realloc_($50,0,0,$51)|0);
 $53 = ((($f)) + 8|0);
 HEAP32[$53>>2] = $52;
 $54 = ((($f)) + 44|0);
 HEAP32[$54>>2] = $46;
 $55 = ($46|0)>(0);
 L43: do {
  if ($55) {
   $i$0$i41 = 0;
   while(1) {
    $60 = (((($52) + ($i$0$i41<<4)|0)) + 8|0);
    HEAP32[$60>>2] = 0;
    $61 = (($i$0$i41) + 1)|0;
    $exitcond45 = ($61|0)==($46|0);
    if ($exitcond45) {
     break;
    } else {
     $i$0$i41 = $61;
    }
   }
   if ($55) {
    $56 = ((($S)) + 8|0);
    $57 = HEAP32[$0>>2]|0;
    $58 = (_luaZ_read($57,$x$i1$i26,1)|0);
    $59 = ($58|0)==(0);
    if ($59) {
     $65 = $52;$71 = $52;$i$1$i3950 = 0;
    } else {
     _error($S,7070);
     // unreachable;
    }
    L50: while(1) {
     $62 = HEAP8[$x$i1$i26>>0]|0;
     $63 = $62 << 24 >> 24;
     switch ($63|0) {
     case 0:  {
      $64 = (((($65) + ($i$1$i3950<<4)|0)) + 8|0);
      HEAP32[$64>>2] = 0;
      break;
     }
     case 1:  {
      $66 = HEAP32[$0>>2]|0;
      $67 = (_luaZ_read($66,$x$i3$i25,1)|0);
      $68 = ($67|0)==(0);
      if (!($68)) {
       label = 37;
       break L50;
      }
      $69 = HEAP8[$x$i3$i25>>0]|0;
      $70 = $69 << 24 >> 24;
      HEAP32[$71>>2] = $70;
      $72 = (((($65) + ($i$1$i3950<<4)|0)) + 8|0);
      HEAP32[$72>>2] = 1;
      break;
     }
     case 3:  {
      $73 = HEAP32[$0>>2]|0;
      $74 = (_luaZ_read($73,$x$i6$i,8)|0);
      $75 = ($74|0)==(0);
      if (!($75)) {
       label = 40;
       break L50;
      }
      $76 = +HEAPF64[$x$i6$i>>3];
      HEAPF64[$71>>3] = $76;
      $77 = (((($65) + ($i$1$i3950<<4)|0)) + 8|0);
      HEAP32[$77>>2] = 3;
      break;
     }
     case 4:  {
      $78 = HEAP32[$0>>2]|0;
      $79 = (_luaZ_read($78,$size$i$i24,4)|0);
      $80 = ($79|0)==(0);
      if (!($80)) {
       label = 43;
       break L50;
      }
      $81 = HEAP32[$size$i$i24>>2]|0;
      $82 = ($81|0)==(0);
      if ($82) {
       $$0$i$i32 = 0;
      } else {
       $83 = HEAP32[$S>>2]|0;
       $84 = HEAP32[$56>>2]|0;
       $85 = (_luaZ_openspace($83,$84,$81)|0);
       $86 = HEAP32[$size$i$i24>>2]|0;
       $87 = HEAP32[$0>>2]|0;
       $88 = (_luaZ_read($87,$85,$86)|0);
       $89 = ($88|0)==(0);
       if (!($89)) {
        label = 46;
        break L50;
       }
       $90 = HEAP32[$S>>2]|0;
       $91 = HEAP32[$size$i$i24>>2]|0;
       $92 = (($91) + -1)|0;
       $93 = (_luaS_newlstr($90,$85,$92)|0);
       $$0$i$i32 = $93;
      }
      HEAP32[$71>>2] = $$0$i$i32;
      $94 = ((($$0$i$i32)) + 4|0);
      $95 = HEAP8[$94>>0]|0;
      $96 = $95&255;
      $97 = $96 | 64;
      $98 = (((($65) + ($i$1$i3950<<4)|0)) + 8|0);
      HEAP32[$98>>2] = $97;
      break;
     }
     default: {
     }
     }
     $99 = (($i$1$i3950) + 1)|0;
     $100 = ($99|0)<($46|0);
     if (!($100)) {
      break L43;
     }
     $$pre = HEAP32[$53>>2]|0;
     $101 = (($$pre) + ($99<<4)|0);
     $102 = HEAP32[$0>>2]|0;
     $103 = (_luaZ_read($102,$x$i1$i26,1)|0);
     $104 = ($103|0)==(0);
     if ($104) {
      $65 = $$pre;$71 = $101;$i$1$i3950 = $99;
     } else {
      label = 33;
      break;
     }
    }
    if ((label|0) == 33) {
     _error($S,7070);
     // unreachable;
    }
    else if ((label|0) == 37) {
     _error($S,7070);
     // unreachable;
    }
    else if ((label|0) == 40) {
     _error($S,7070);
     // unreachable;
    }
    else if ((label|0) == 43) {
     _error($S,7070);
     // unreachable;
    }
    else if ((label|0) == 46) {
     _error($S,7070);
     // unreachable;
    }
   }
  }
 } while(0);
 $105 = HEAP32[$0>>2]|0;
 $106 = (_luaZ_read($105,$x$i8$i,4)|0);
 $107 = ($106|0)==(0);
 if (!($107)) {
  _error($S,7070);
  // unreachable;
 }
 $108 = HEAP32[$x$i8$i>>2]|0;
 $109 = ($108|0)<(0);
 if ($109) {
  _error($S,7119);
  // unreachable;
 }
 $110 = (($108) + 1)|0;
 $111 = ($110>>>0)>(1073741823);
 $112 = HEAP32[$S>>2]|0;
 if ($111) {
  _luaM_toobig($112);
  // unreachable;
 }
 $113 = $108 << 2;
 $114 = (_luaM_realloc_($112,0,0,$113)|0);
 $115 = ((($f)) + 16|0);
 HEAP32[$115>>2] = $114;
 $116 = ((($f)) + 56|0);
 HEAP32[$116>>2] = $108;
 $117 = ($108|0)>(0);
 do {
  if ($117) {
   HEAP32[$114>>2] = 0;
   $exitcond4449 = ($108|0)==(1);
   if (!($exitcond4449)) {
    $119 = 1;
    while(1) {
     $$pre48 = HEAP32[$115>>2]|0;
     $118 = (($$pre48) + ($119<<2)|0);
     HEAP32[$118>>2] = 0;
     $120 = (($119) + 1)|0;
     $exitcond44 = ($120|0)==($108|0);
     if ($exitcond44) {
      break;
     } else {
      $119 = $120;
     }
    }
   }
   if ($117) {
    $i$3$i36 = 0;
   } else {
    break;
   }
   while(1) {
    $121 = HEAP32[$S>>2]|0;
    $122 = (_luaF_newproto($121)|0);
    $123 = HEAP32[$115>>2]|0;
    $124 = (($123) + ($i$3$i36<<2)|0);
    HEAP32[$124>>2] = $122;
    $125 = HEAP32[$115>>2]|0;
    $126 = (($125) + ($i$3$i36<<2)|0);
    $127 = HEAP32[$126>>2]|0;
    _LoadFunction($S,$127);
    $128 = (($i$3$i36) + 1)|0;
    $exitcond = ($128|0)==($108|0);
    if ($exitcond) {
     break;
    } else {
     $i$3$i36 = $128;
    }
   }
  }
 } while(0);
 $129 = HEAP32[$0>>2]|0;
 $130 = (_luaZ_read($129,$x$i$i18,4)|0);
 $131 = ($130|0)==(0);
 if (!($131)) {
  _error($S,7070);
  // unreachable;
 }
 $132 = HEAP32[$x$i$i18>>2]|0;
 $133 = ($132|0)<(0);
 if ($133) {
  _error($S,7119);
  // unreachable;
 }
 $134 = (($132) + 1)|0;
 $135 = ($134>>>0)>(536870911);
 $136 = HEAP32[$S>>2]|0;
 if ($135) {
  _luaM_toobig($136);
  // unreachable;
 }
 $137 = $132 << 3;
 $138 = (_luaM_realloc_($136,0,0,$137)|0);
 $139 = ((($f)) + 28|0);
 HEAP32[$139>>2] = $138;
 $140 = ((($f)) + 40|0);
 HEAP32[$140>>2] = $132;
 $141 = ($132|0)>(0);
 L100: do {
  if ($141) {
   $i$07$i = 0;
   while(1) {
    $142 = (($138) + ($i$07$i<<3)|0);
    HEAP32[$142>>2] = 0;
    $143 = (($i$07$i) + 1)|0;
    $exitcond$i22 = ($143|0)==($132|0);
    if ($exitcond$i22) {
     $i$16$i = 0;
     break;
    } else {
     $i$07$i = $143;
    }
   }
   while(1) {
    $144 = HEAP32[$0>>2]|0;
    $145 = (_luaZ_read($144,$x$i1$i17,1)|0);
    $146 = ($145|0)==(0);
    if (!($146)) {
     label = 71;
     break;
    }
    $147 = HEAP8[$x$i1$i17>>0]|0;
    $148 = HEAP32[$139>>2]|0;
    $149 = (((($148) + ($i$16$i<<3)|0)) + 4|0);
    HEAP8[$149>>0] = $147;
    $150 = HEAP32[$0>>2]|0;
    $151 = (_luaZ_read($150,$x$i3$i,1)|0);
    $152 = ($151|0)==(0);
    if (!($152)) {
     label = 73;
     break;
    }
    $153 = HEAP8[$x$i3$i>>0]|0;
    $154 = HEAP32[$139>>2]|0;
    $155 = (((($154) + ($i$16$i<<3)|0)) + 5|0);
    HEAP8[$155>>0] = $153;
    $156 = (($i$16$i) + 1)|0;
    $157 = ($156|0)<($132|0);
    if ($157) {
     $i$16$i = $156;
    } else {
     break L100;
    }
   }
   if ((label|0) == 71) {
    _error($S,7070);
    // unreachable;
   }
   else if ((label|0) == 73) {
    _error($S,7070);
    // unreachable;
   }
  }
 } while(0);
 $158 = HEAP32[$0>>2]|0;
 $159 = (_luaZ_read($158,$size$i$i,4)|0);
 $160 = ($159|0)==(0);
 if (!($160)) {
  _error($S,7070);
  // unreachable;
 }
 $161 = HEAP32[$size$i$i>>2]|0;
 $162 = ($161|0)==(0);
 do {
  if ($162) {
   $$0$i$i = 0;
  } else {
   $163 = HEAP32[$S>>2]|0;
   $164 = ((($S)) + 8|0);
   $165 = HEAP32[$164>>2]|0;
   $166 = (_luaZ_openspace($163,$165,$161)|0);
   $167 = HEAP32[$size$i$i>>2]|0;
   $168 = HEAP32[$0>>2]|0;
   $169 = (_luaZ_read($168,$166,$167)|0);
   $170 = ($169|0)==(0);
   if ($170) {
    $171 = HEAP32[$S>>2]|0;
    $172 = HEAP32[$size$i$i>>2]|0;
    $173 = (($172) + -1)|0;
    $174 = (_luaS_newlstr($171,$166,$173)|0);
    $$0$i$i = $174;
    break;
   } else {
    _error($S,7070);
    // unreachable;
   }
  }
 } while(0);
 $175 = ((($f)) + 36|0);
 HEAP32[$175>>2] = $$0$i$i;
 $176 = HEAP32[$0>>2]|0;
 $177 = (_luaZ_read($176,$x$i$i,4)|0);
 $178 = ($177|0)==(0);
 if (!($178)) {
  _error($S,7070);
  // unreachable;
 }
 $179 = HEAP32[$x$i$i>>2]|0;
 $180 = ($179|0)<(0);
 if ($180) {
  _error($S,7119);
  // unreachable;
 }
 $181 = (($179) + 1)|0;
 $182 = ($181>>>0)>(1073741823);
 $183 = HEAP32[$S>>2]|0;
 if ($182) {
  _luaM_toobig($183);
  // unreachable;
 }
 $184 = $179 << 2;
 $185 = (_luaM_realloc_($183,0,0,$184)|0);
 $186 = ((($f)) + 20|0);
 HEAP32[$186>>2] = $185;
 $187 = ((($f)) + 52|0);
 HEAP32[$187>>2] = $179;
 $188 = HEAP32[$0>>2]|0;
 $189 = (_luaZ_read($188,$185,$184)|0);
 $190 = ($189|0)==(0);
 if (!($190)) {
  _error($S,7070);
  // unreachable;
 }
 $191 = HEAP32[$0>>2]|0;
 $192 = (_luaZ_read($191,$x$i1$i,4)|0);
 $193 = ($192|0)==(0);
 if (!($193)) {
  _error($S,7070);
  // unreachable;
 }
 $194 = HEAP32[$x$i1$i>>2]|0;
 $195 = ($194|0)<(0);
 if ($195) {
  _error($S,7119);
  // unreachable;
 }
 $196 = (($194) + 1)|0;
 $197 = ($196>>>0)>(357913941);
 $198 = HEAP32[$S>>2]|0;
 if ($197) {
  _luaM_toobig($198);
  // unreachable;
 }
 $199 = ($194*12)|0;
 $200 = (_luaM_realloc_($198,0,0,$199)|0);
 $201 = ((($f)) + 24|0);
 HEAP32[$201>>2] = $200;
 $202 = ((($f)) + 60|0);
 HEAP32[$202>>2] = $194;
 $203 = ($194|0)>(0);
 L141: do {
  if ($203) {
   $i$029$i = 0;
   while(1) {
    $205 = (($200) + (($i$029$i*12)|0)|0);
    HEAP32[$205>>2] = 0;
    $206 = (($i$029$i) + 1)|0;
    $exitcond$i = ($206|0)==($194|0);
    if ($exitcond$i) {
     break;
    } else {
     $i$029$i = $206;
    }
   }
   $204 = ((($S)) + 8|0);
   $i$126$i = 0;
   while(1) {
    $207 = HEAP32[$0>>2]|0;
    $208 = (_luaZ_read($207,$size$i4$i,4)|0);
    $209 = ($208|0)==(0);
    if (!($209)) {
     label = 99;
     break;
    }
    $210 = HEAP32[$size$i4$i>>2]|0;
    $211 = ($210|0)==(0);
    if ($211) {
     $$0$i5$i = 0;
    } else {
     $212 = HEAP32[$S>>2]|0;
     $213 = HEAP32[$204>>2]|0;
     $214 = (_luaZ_openspace($212,$213,$210)|0);
     $215 = HEAP32[$size$i4$i>>2]|0;
     $216 = HEAP32[$0>>2]|0;
     $217 = (_luaZ_read($216,$214,$215)|0);
     $218 = ($217|0)==(0);
     if (!($218)) {
      label = 102;
      break;
     }
     $219 = HEAP32[$S>>2]|0;
     $220 = HEAP32[$size$i4$i>>2]|0;
     $221 = (($220) + -1)|0;
     $222 = (_luaS_newlstr($219,$214,$221)|0);
     $$0$i5$i = $222;
    }
    $223 = HEAP32[$201>>2]|0;
    $224 = (($223) + (($i$126$i*12)|0)|0);
    HEAP32[$224>>2] = $$0$i5$i;
    $225 = HEAP32[$0>>2]|0;
    $226 = (_luaZ_read($225,$x$i7$i,4)|0);
    $227 = ($226|0)==(0);
    if (!($227)) {
     label = 105;
     break;
    }
    $228 = HEAP32[$x$i7$i>>2]|0;
    $229 = ($228|0)<(0);
    if ($229) {
     label = 107;
     break;
    }
    $230 = HEAP32[$201>>2]|0;
    $231 = (((($230) + (($i$126$i*12)|0)|0)) + 4|0);
    HEAP32[$231>>2] = $228;
    $232 = HEAP32[$0>>2]|0;
    $233 = (_luaZ_read($232,$x$i10$i,4)|0);
    $234 = ($233|0)==(0);
    if (!($234)) {
     label = 109;
     break;
    }
    $235 = HEAP32[$x$i10$i>>2]|0;
    $236 = ($235|0)<(0);
    if ($236) {
     label = 111;
     break;
    }
    $237 = HEAP32[$201>>2]|0;
    $238 = (((($237) + (($i$126$i*12)|0)|0)) + 8|0);
    HEAP32[$238>>2] = $235;
    $239 = (($i$126$i) + 1)|0;
    $240 = ($239|0)<($194|0);
    if ($240) {
     $i$126$i = $239;
    } else {
     break L141;
    }
   }
   if ((label|0) == 99) {
    _error($S,7070);
    // unreachable;
   }
   else if ((label|0) == 102) {
    _error($S,7070);
    // unreachable;
   }
   else if ((label|0) == 105) {
    _error($S,7070);
    // unreachable;
   }
   else if ((label|0) == 107) {
    _error($S,7119);
    // unreachable;
   }
   else if ((label|0) == 109) {
    _error($S,7070);
    // unreachable;
   }
   else if ((label|0) == 111) {
    _error($S,7119);
    // unreachable;
   }
  }
 } while(0);
 $241 = HEAP32[$0>>2]|0;
 $242 = (_luaZ_read($241,$x$i13$i,4)|0);
 $243 = ($242|0)==(0);
 if (!($243)) {
  _error($S,7070);
  // unreachable;
 }
 $244 = HEAP32[$x$i13$i>>2]|0;
 $245 = ($244|0)<(0);
 if ($245) {
  _error($S,7119);
  // unreachable;
 }
 $246 = ($244|0)>(0);
 if (!($246)) {
  STACKTOP = sp;return;
 }
 $247 = ((($S)) + 8|0);
 $i$225$i = 0;
 while(1) {
  $248 = HEAP32[$0>>2]|0;
  $249 = (_luaZ_read($248,$size$i16$i,4)|0);
  $250 = ($249|0)==(0);
  if (!($250)) {
   label = 120;
   break;
  }
  $251 = HEAP32[$size$i16$i>>2]|0;
  $252 = ($251|0)==(0);
  if ($252) {
   $$0$i17$i = 0;
  } else {
   $253 = HEAP32[$S>>2]|0;
   $254 = HEAP32[$247>>2]|0;
   $255 = (_luaZ_openspace($253,$254,$251)|0);
   $256 = HEAP32[$size$i16$i>>2]|0;
   $257 = HEAP32[$0>>2]|0;
   $258 = (_luaZ_read($257,$255,$256)|0);
   $259 = ($258|0)==(0);
   if (!($259)) {
    label = 123;
    break;
   }
   $260 = HEAP32[$S>>2]|0;
   $261 = HEAP32[$size$i16$i>>2]|0;
   $262 = (($261) + -1)|0;
   $263 = (_luaS_newlstr($260,$255,$262)|0);
   $$0$i17$i = $263;
  }
  $264 = HEAP32[$139>>2]|0;
  $265 = (($264) + ($i$225$i<<3)|0);
  HEAP32[$265>>2] = $$0$i17$i;
  $266 = (($i$225$i) + 1)|0;
  $267 = ($266|0)<($244|0);
  if ($267) {
   $i$225$i = $266;
  } else {
   label = 126;
   break;
  }
 }
 if ((label|0) == 120) {
  _error($S,7070);
  // unreachable;
 }
 else if ((label|0) == 123) {
  _error($S,7070);
  // unreachable;
 }
 else if ((label|0) == 126) {
  STACKTOP = sp;return;
 }
}
function _luaV_tonumber($obj,$n) {
 $obj = $obj|0;
 $n = $n|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0.0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $num = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $num = sp;
 $0 = ((($obj)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(3);
 if ($2) {
  $$0 = $obj;
 } else {
  $3 = $1 & 15;
  $4 = ($3|0)==(4);
  if ($4) {
   $5 = HEAP32[$obj>>2]|0;
   $6 = ((($5)) + 16|0);
   $7 = ((($5)) + 12|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = (_luaO_str2d($6,$8,$num)|0);
   $10 = ($9|0)==(0);
   if ($10) {
    $$0 = 0;
   } else {
    $11 = +HEAPF64[$num>>3];
    HEAPF64[$n>>3] = $11;
    $12 = ((($n)) + 8|0);
    HEAP32[$12>>2] = 3;
    $$0 = $n;
   }
  } else {
   $$0 = 0;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _luaV_tostring($L,$obj) {
 $L = $L|0;
 $obj = $obj|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0.0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $s = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $s = sp + 8|0;
 $0 = ((($obj)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(3);
 if (!($2)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $3 = +HEAPF64[$obj>>3];
 HEAPF64[$vararg_buffer>>3] = $3;
 $4 = (_sprintf($s,10420,$vararg_buffer)|0);
 $5 = (_luaS_newlstr($L,$s,$4)|0);
 HEAP32[$obj>>2] = $5;
 $6 = ((($5)) + 4|0);
 $7 = HEAP8[$6>>0]|0;
 $8 = $7&255;
 $9 = $8 | 64;
 HEAP32[$0>>2] = $9;
 $$0 = 1;
 STACKTOP = sp;return ($$0|0);
}
function _luaV_gettable($L,$t,$key,$val) {
 $L = $L|0;
 $t = $t|0;
 $key = $key|0;
 $val = $val|0;
 var $$09 = 0, $$09$lcssa = 0, $$09$lcssa42 = 0, $$lcssa = 0, $$lcssa44 = 0, $$phi$trans$insert = 0, $$phi$trans$insert20 = 0, $$pre = 0, $$pre21 = 0, $$sum$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $loop$08 = 0, $tm$0 = 0, $tm$0$lcssa = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = ((($L)) + 12|0);
 $$phi$trans$insert = ((($t)) + 8|0);
 $$pre = HEAP32[$$phi$trans$insert>>2]|0;
 $$09 = $t;$4 = $$pre;$loop$08 = 0;
 while(1) {
  $3 = ($4|0)==(69);
  if ($3) {
   $5 = HEAP32[$$09>>2]|0;
   $6 = (_luaH_get($5,$key)|0);
   $7 = ((($6)) + 8|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = ($8|0)==(0);
   if (!($9)) {
    $$lcssa = $6;$$lcssa44 = $7;
    label = 9;
    break;
   }
   $10 = ((($5)) + 8|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = ($11|0)==(0|0);
   if ($12) {
    $$lcssa = $6;$$lcssa44 = $7;
    label = 9;
    break;
   }
   $13 = ((($11)) + 6|0);
   $14 = HEAP8[$13>>0]|0;
   $15 = $14 & 1;
   $16 = ($15<<24>>24)==(0);
   if (!($16)) {
    $$lcssa = $6;$$lcssa44 = $7;
    label = 9;
    break;
   }
   $17 = HEAP32[$0>>2]|0;
   $18 = ((($17)) + 184|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = (_luaT_gettm($11,0,$19)|0);
   $21 = ($20|0)==(0|0);
   if ($21) {
    $$lcssa = $6;$$lcssa44 = $7;
    label = 9;
    break;
   }
   $$phi$trans$insert20 = ((($20)) + 8|0);
   $$pre21 = HEAP32[$$phi$trans$insert20>>2]|0;
   $39 = $$pre21;$tm$0 = $20;
  } else {
   $34 = (_luaT_gettmbyobj($L,$$09,0)|0);
   $35 = ((($34)) + 8|0);
   $36 = HEAP32[$35>>2]|0;
   $37 = ($36|0)==(0);
   if ($37) {
    $$09$lcssa = $$09;
    label = 11;
    break;
   } else {
    $39 = $36;$tm$0 = $34;
   }
  }
  $38 = $39 & 15;
  $40 = ($38|0)==(6);
  $2 = (($loop$08) + 1)|0;
  if ($40) {
   $$09$lcssa42 = $$09;$tm$0$lcssa = $tm$0;
   label = 13;
   break;
  }
  $1 = ($2|0)<(100);
  if ($1) {
   $$09 = $tm$0;$4 = $39;$loop$08 = $2;
  } else {
   label = 14;
   break;
  }
 }
 if ((label|0) == 9) {
  $22 = $$lcssa;
  $23 = $22;
  $24 = HEAP32[$23>>2]|0;
  $25 = (($22) + 4)|0;
  $26 = $25;
  $27 = HEAP32[$26>>2]|0;
  $28 = $val;
  $29 = $28;
  HEAP32[$29>>2] = $24;
  $30 = (($28) + 4)|0;
  $31 = $30;
  HEAP32[$31>>2] = $27;
  $32 = HEAP32[$$lcssa44>>2]|0;
  $33 = ((($val)) + 8|0);
  HEAP32[$33>>2] = $32;
  STACKTOP = sp;return;
 }
 else if ((label|0) == 11) {
  _luaG_typeerror($L,$$09$lcssa,7154);
  // unreachable;
 }
 else if ((label|0) == 13) {
  $41 = ((($$09$lcssa42)) + 8|0);
  $42 = ((($tm$0$lcssa)) + 8|0);
  $43 = ((($L)) + 28|0);
  $44 = HEAP32[$43>>2]|0;
  $45 = $val;
  $46 = $44;
  $47 = (($45) - ($46))|0;
  $48 = ((($L)) + 8|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = ((($49)) + 16|0);
  HEAP32[$48>>2] = $50;
  $51 = $tm$0$lcssa;
  $52 = $51;
  $53 = HEAP32[$52>>2]|0;
  $54 = (($51) + 4)|0;
  $55 = $54;
  $56 = HEAP32[$55>>2]|0;
  $57 = $49;
  $58 = $57;
  HEAP32[$58>>2] = $53;
  $59 = (($57) + 4)|0;
  $60 = $59;
  HEAP32[$60>>2] = $56;
  $61 = HEAP32[$42>>2]|0;
  $62 = ((($49)) + 8|0);
  HEAP32[$62>>2] = $61;
  $63 = HEAP32[$48>>2]|0;
  $64 = ((($63)) + 16|0);
  HEAP32[$48>>2] = $64;
  $65 = $$09$lcssa42;
  $66 = $65;
  $67 = HEAP32[$66>>2]|0;
  $68 = (($65) + 4)|0;
  $69 = $68;
  $70 = HEAP32[$69>>2]|0;
  $71 = $63;
  $72 = $71;
  HEAP32[$72>>2] = $67;
  $73 = (($71) + 4)|0;
  $74 = $73;
  HEAP32[$74>>2] = $70;
  $75 = HEAP32[$41>>2]|0;
  $76 = ((($63)) + 8|0);
  HEAP32[$76>>2] = $75;
  $77 = HEAP32[$48>>2]|0;
  $78 = ((($77)) + 16|0);
  HEAP32[$48>>2] = $78;
  $79 = $key;
  $80 = $79;
  $81 = HEAP32[$80>>2]|0;
  $82 = (($79) + 4)|0;
  $83 = $82;
  $84 = HEAP32[$83>>2]|0;
  $85 = $77;
  $86 = $85;
  HEAP32[$86>>2] = $81;
  $87 = (($85) + 4)|0;
  $88 = $87;
  HEAP32[$88>>2] = $84;
  $89 = ((($key)) + 8|0);
  $90 = HEAP32[$89>>2]|0;
  $91 = ((($77)) + 8|0);
  HEAP32[$91>>2] = $90;
  $92 = HEAP32[$48>>2]|0;
  $93 = ((($92)) + -48|0);
  $94 = ((($L)) + 16|0);
  $95 = HEAP32[$94>>2]|0;
  $96 = ((($95)) + 18|0);
  $97 = HEAP8[$96>>0]|0;
  $98 = $97&255;
  $99 = $98 & 1;
  _luaD_call($L,$93,1,$99);
  $100 = HEAP32[$43>>2]|0;
  $101 = (($100) + ($47)|0);
  $102 = HEAP32[$48>>2]|0;
  $103 = ((($102)) + -16|0);
  HEAP32[$48>>2] = $103;
  $104 = $103;
  $105 = $104;
  $106 = HEAP32[$105>>2]|0;
  $107 = (($104) + 4)|0;
  $108 = $107;
  $109 = HEAP32[$108>>2]|0;
  $110 = $101;
  $111 = $110;
  HEAP32[$111>>2] = $106;
  $112 = (($110) + 4)|0;
  $113 = $112;
  HEAP32[$113>>2] = $109;
  $114 = ((($102)) + -8|0);
  $115 = HEAP32[$114>>2]|0;
  $$sum$i = (($47) + 8)|0;
  $116 = (($100) + ($$sum$i)|0);
  HEAP32[$116>>2] = $115;
  STACKTOP = sp;return;
 }
 else if ((label|0) == 14) {
  _luaG_runerror($L,7160,$vararg_buffer);
  // unreachable;
 }
}
function _luaV_settable($L,$t,$key,$val) {
 $L = $L|0;
 $t = $t|0;
 $key = $key|0;
 $val = $val|0;
 var $$013 = 0, $$013$lcssa = 0, $$013$lcssa61 = 0, $$lcssa63 = 0, $$lcssa65 = 0, $$phi$trans$insert = 0, $$phi$trans$insert28 = 0, $$pre = 0, $$pre29 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0;
 var $126 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $loop$012 = 0, $oldval$0 = 0, $tm$0 = 0, $tm$0$lcssa = 0;
 var $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = ((($L)) + 12|0);
 $$phi$trans$insert = ((($t)) + 8|0);
 $$pre = HEAP32[$$phi$trans$insert>>2]|0;
 $$013 = $t;$4 = $$pre;$loop$012 = 0;
 while(1) {
  $3 = ($4|0)==(69);
  if ($3) {
   $5 = HEAP32[$$013>>2]|0;
   $6 = (_luaH_get($5,$key)|0);
   $7 = ((($6)) + 8|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = ($8|0)==(0);
   if (!($9)) {
    $38 = $5;$oldval$0 = $6;
    break;
   }
   $10 = ((($5)) + 8|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = ($11|0)==(0|0);
   if ($12) {
    $$lcssa63 = $5;$$lcssa65 = $6;
    label = 9;
    break;
   }
   $13 = ((($11)) + 6|0);
   $14 = HEAP8[$13>>0]|0;
   $15 = $14 & 2;
   $16 = ($15<<24>>24)==(0);
   if (!($16)) {
    $$lcssa63 = $5;$$lcssa65 = $6;
    label = 9;
    break;
   }
   $17 = HEAP32[$0>>2]|0;
   $18 = ((($17)) + 188|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = (_luaT_gettm($11,1,$19)|0);
   $21 = ($20|0)==(0|0);
   if ($21) {
    $$lcssa63 = $5;$$lcssa65 = $6;
    label = 9;
    break;
   }
   $$phi$trans$insert28 = ((($20)) + 8|0);
   $$pre29 = HEAP32[$$phi$trans$insert28>>2]|0;
   $56 = $$pre29;$tm$0 = $20;
  } else {
   $51 = (_luaT_gettmbyobj($L,$$013,1)|0);
   $52 = ((($51)) + 8|0);
   $53 = HEAP32[$52>>2]|0;
   $54 = ($53|0)==(0);
   if ($54) {
    $$013$lcssa = $$013;
    label = 16;
    break;
   } else {
    $56 = $53;$tm$0 = $51;
   }
  }
  $55 = $56 & 15;
  $57 = ($55|0)==(6);
  $2 = (($loop$012) + 1)|0;
  if ($57) {
   $$013$lcssa61 = $$013;$tm$0$lcssa = $tm$0;
   label = 18;
   break;
  }
  $1 = ($2|0)<(100);
  if ($1) {
   $$013 = $tm$0;$4 = $56;$loop$012 = $2;
  } else {
   label = 19;
   break;
  }
 }
 if ((label|0) == 9) {
  $22 = ($$lcssa65|0)==(24|0);
  if ($22) {
   $23 = (_luaH_newkey($L,$$lcssa63,$key)|0);
   $38 = $$lcssa63;$oldval$0 = $23;
  } else {
   $38 = $$lcssa63;$oldval$0 = $$lcssa65;
  }
 }
 else if ((label|0) == 16) {
  _luaG_typeerror($L,$$013$lcssa,7154);
  // unreachable;
 }
 else if ((label|0) == 18) {
  $58 = ((($$013$lcssa61)) + 8|0);
  $59 = ((($tm$0$lcssa)) + 8|0);
  $60 = ((($L)) + 8|0);
  $61 = HEAP32[$60>>2]|0;
  $62 = ((($61)) + 16|0);
  HEAP32[$60>>2] = $62;
  $63 = $tm$0$lcssa;
  $64 = $63;
  $65 = HEAP32[$64>>2]|0;
  $66 = (($63) + 4)|0;
  $67 = $66;
  $68 = HEAP32[$67>>2]|0;
  $69 = $61;
  $70 = $69;
  HEAP32[$70>>2] = $65;
  $71 = (($69) + 4)|0;
  $72 = $71;
  HEAP32[$72>>2] = $68;
  $73 = HEAP32[$59>>2]|0;
  $74 = ((($61)) + 8|0);
  HEAP32[$74>>2] = $73;
  $75 = HEAP32[$60>>2]|0;
  $76 = ((($75)) + 16|0);
  HEAP32[$60>>2] = $76;
  $77 = $$013$lcssa61;
  $78 = $77;
  $79 = HEAP32[$78>>2]|0;
  $80 = (($77) + 4)|0;
  $81 = $80;
  $82 = HEAP32[$81>>2]|0;
  $83 = $75;
  $84 = $83;
  HEAP32[$84>>2] = $79;
  $85 = (($83) + 4)|0;
  $86 = $85;
  HEAP32[$86>>2] = $82;
  $87 = HEAP32[$58>>2]|0;
  $88 = ((($75)) + 8|0);
  HEAP32[$88>>2] = $87;
  $89 = HEAP32[$60>>2]|0;
  $90 = ((($89)) + 16|0);
  HEAP32[$60>>2] = $90;
  $91 = $key;
  $92 = $91;
  $93 = HEAP32[$92>>2]|0;
  $94 = (($91) + 4)|0;
  $95 = $94;
  $96 = HEAP32[$95>>2]|0;
  $97 = $89;
  $98 = $97;
  HEAP32[$98>>2] = $93;
  $99 = (($97) + 4)|0;
  $100 = $99;
  HEAP32[$100>>2] = $96;
  $101 = ((($key)) + 8|0);
  $102 = HEAP32[$101>>2]|0;
  $103 = ((($89)) + 8|0);
  HEAP32[$103>>2] = $102;
  $104 = HEAP32[$60>>2]|0;
  $105 = ((($104)) + 16|0);
  HEAP32[$60>>2] = $105;
  $106 = $val;
  $107 = $106;
  $108 = HEAP32[$107>>2]|0;
  $109 = (($106) + 4)|0;
  $110 = $109;
  $111 = HEAP32[$110>>2]|0;
  $112 = $104;
  $113 = $112;
  HEAP32[$113>>2] = $108;
  $114 = (($112) + 4)|0;
  $115 = $114;
  HEAP32[$115>>2] = $111;
  $116 = ((($val)) + 8|0);
  $117 = HEAP32[$116>>2]|0;
  $118 = ((($104)) + 8|0);
  HEAP32[$118>>2] = $117;
  $119 = HEAP32[$60>>2]|0;
  $120 = ((($119)) + -64|0);
  $121 = ((($L)) + 16|0);
  $122 = HEAP32[$121>>2]|0;
  $123 = ((($122)) + 18|0);
  $124 = HEAP8[$123>>0]|0;
  $125 = $124&255;
  $126 = $125 & 1;
  _luaD_call($L,$120,0,$126);
  STACKTOP = sp;return;
 }
 else if ((label|0) == 19) {
  _luaG_runerror($L,7177,$vararg_buffer);
  // unreachable;
 }
 $24 = $val;
 $25 = $24;
 $26 = HEAP32[$25>>2]|0;
 $27 = (($24) + 4)|0;
 $28 = $27;
 $29 = HEAP32[$28>>2]|0;
 $30 = $oldval$0;
 $31 = $30;
 HEAP32[$31>>2] = $26;
 $32 = (($30) + 4)|0;
 $33 = $32;
 HEAP32[$33>>2] = $29;
 $34 = ((($val)) + 8|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = ((($oldval$0)) + 8|0);
 HEAP32[$36>>2] = $35;
 $37 = ((($38)) + 6|0);
 HEAP8[$37>>0] = 0;
 $39 = HEAP32[$34>>2]|0;
 $40 = $39 & 64;
 $41 = ($40|0)==(0);
 if ($41) {
  STACKTOP = sp;return;
 }
 $42 = HEAP32[$val>>2]|0;
 $43 = ((($42)) + 5|0);
 $44 = HEAP8[$43>>0]|0;
 $45 = $44 & 3;
 $46 = ($45<<24>>24)==(0);
 if ($46) {
  STACKTOP = sp;return;
 }
 $47 = ((($38)) + 5|0);
 $48 = HEAP8[$47>>0]|0;
 $49 = $48 & 4;
 $50 = ($49<<24>>24)==(0);
 if ($50) {
  STACKTOP = sp;return;
 }
 _luaC_barrierback_($L,$38);
 STACKTOP = sp;return;
}
function _luaV_lessthan($L,$l,$r) {
 $L = $L|0;
 $l = $l|0;
 $r = $r|0;
 var $$0 = 0, $$0$i = 0, $$lcssa = 0, $$lobit = 0, $$phi$trans$insert$i$i = 0, $$pre$i$i = 0, $$sum$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0;
 var $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0;
 var $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0.0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0.0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $l$01$i = 0, $ll$02$i = 0, $lr$04$i = 0, $phitmp$i = 0, $r$03$i = 0;
 var $tm$01$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($l)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(3);
 if ($2) {
  $3 = ((($r)) + 8|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($4|0)==(3);
  if ($5) {
   $6 = +HEAPF64[$l>>3];
   $7 = +HEAPF64[$r>>3];
   $8 = $6 < $7;
   $9 = $8&1;
   $$0 = $9;
   return ($$0|0);
  }
 } else {
  $10 = $1 & 15;
  $11 = ($10|0)==(4);
  if ($11) {
   $12 = ((($r)) + 8|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = $13 & 15;
   $15 = ($14|0)==(4);
   if ($15) {
    $16 = HEAP32[$l>>2]|0;
    $17 = HEAP32[$r>>2]|0;
    $18 = ((($16)) + 16|0);
    $19 = ((($17)) + 16|0);
    $20 = (_strcoll($18,$19)|0);
    $21 = ($20|0)==(0);
    L8: do {
     if ($21) {
      $22 = ((($17)) + 12|0);
      $23 = HEAP32[$22>>2]|0;
      $24 = ((($16)) + 12|0);
      $25 = HEAP32[$24>>2]|0;
      $l$01$i = $18;$ll$02$i = $25;$lr$04$i = $23;$r$03$i = $19;
      while(1) {
       $26 = (_strlen($l$01$i)|0);
       $27 = ($26|0)==($lr$04$i|0);
       $28 = ($26|0)==($ll$02$i|0);
       if ($27) {
        $$lcssa = $28;
        break;
       }
       if ($28) {
        $$0$i = -1;
        break L8;
       }
       $31 = (($26) + 1)|0;
       $32 = (($l$01$i) + ($31)|0);
       $33 = (($ll$02$i) - ($31))|0;
       $34 = (($r$03$i) + ($31)|0);
       $35 = (($lr$04$i) - ($31))|0;
       $36 = (_strcoll($32,$34)|0);
       $37 = ($36|0)==(0);
       if ($37) {
        $l$01$i = $32;$ll$02$i = $33;$lr$04$i = $35;$r$03$i = $34;
       } else {
        $$0$i = $36;
        break L8;
       }
      }
      $29 = $$lcssa&1;
      $30 = $29 ^ 1;
      $$0$i = $30;
     } else {
      $$0$i = $20;
     }
    } while(0);
    $$lobit = $$0$i >>> 31;
    $$0 = $$lobit;
    return ($$0|0);
   }
  }
 }
 $38 = ((($L)) + 8|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = (_luaT_gettmbyobj($L,$l,13)|0);
 $41 = ((($40)) + 8|0);
 $42 = HEAP32[$41>>2]|0;
 $43 = ($42|0)==(0);
 if ($43) {
  $44 = (_luaT_gettmbyobj($L,$r,13)|0);
  $$phi$trans$insert$i$i = ((($44)) + 8|0);
  $$pre$i$i = HEAP32[$$phi$trans$insert$i$i>>2]|0;
  $45 = ($$pre$i$i|0)==(0);
  if ($45) {
   _luaG_ordererror($L,$l,$r);
   // unreachable;
  } else {
   $tm$01$i$i = $44;
  }
 } else {
  $tm$01$i$i = $40;
 }
 $46 = ((($L)) + 28|0);
 $47 = HEAP32[$46>>2]|0;
 $48 = $39;
 $49 = $47;
 $50 = (($48) - ($49))|0;
 $51 = HEAP32[$38>>2]|0;
 $52 = ((($51)) + 16|0);
 HEAP32[$38>>2] = $52;
 $53 = $tm$01$i$i;
 $54 = $53;
 $55 = HEAP32[$54>>2]|0;
 $56 = (($53) + 4)|0;
 $57 = $56;
 $58 = HEAP32[$57>>2]|0;
 $59 = $51;
 $60 = $59;
 HEAP32[$60>>2] = $55;
 $61 = (($59) + 4)|0;
 $62 = $61;
 HEAP32[$62>>2] = $58;
 $63 = ((($tm$01$i$i)) + 8|0);
 $64 = HEAP32[$63>>2]|0;
 $65 = ((($51)) + 8|0);
 HEAP32[$65>>2] = $64;
 $66 = HEAP32[$38>>2]|0;
 $67 = ((($66)) + 16|0);
 HEAP32[$38>>2] = $67;
 $68 = $l;
 $69 = $68;
 $70 = HEAP32[$69>>2]|0;
 $71 = (($68) + 4)|0;
 $72 = $71;
 $73 = HEAP32[$72>>2]|0;
 $74 = $66;
 $75 = $74;
 HEAP32[$75>>2] = $70;
 $76 = (($74) + 4)|0;
 $77 = $76;
 HEAP32[$77>>2] = $73;
 $78 = HEAP32[$0>>2]|0;
 $79 = ((($66)) + 8|0);
 HEAP32[$79>>2] = $78;
 $80 = HEAP32[$38>>2]|0;
 $81 = ((($80)) + 16|0);
 HEAP32[$38>>2] = $81;
 $82 = $r;
 $83 = $82;
 $84 = HEAP32[$83>>2]|0;
 $85 = (($82) + 4)|0;
 $86 = $85;
 $87 = HEAP32[$86>>2]|0;
 $88 = $80;
 $89 = $88;
 HEAP32[$89>>2] = $84;
 $90 = (($88) + 4)|0;
 $91 = $90;
 HEAP32[$91>>2] = $87;
 $92 = ((($r)) + 8|0);
 $93 = HEAP32[$92>>2]|0;
 $94 = ((($80)) + 8|0);
 HEAP32[$94>>2] = $93;
 $95 = HEAP32[$38>>2]|0;
 $96 = ((($95)) + -48|0);
 $97 = ((($L)) + 16|0);
 $98 = HEAP32[$97>>2]|0;
 $99 = ((($98)) + 18|0);
 $100 = HEAP8[$99>>0]|0;
 $101 = $100&255;
 $102 = $101 & 1;
 _luaD_call($L,$96,1,$102);
 $103 = HEAP32[$46>>2]|0;
 $104 = (($103) + ($50)|0);
 $105 = HEAP32[$38>>2]|0;
 $106 = ((($105)) + -16|0);
 HEAP32[$38>>2] = $106;
 $107 = $106;
 $108 = $107;
 $109 = HEAP32[$108>>2]|0;
 $110 = (($107) + 4)|0;
 $111 = $110;
 $112 = HEAP32[$111>>2]|0;
 $113 = $104;
 $114 = $113;
 HEAP32[$114>>2] = $109;
 $115 = (($113) + 4)|0;
 $116 = $115;
 HEAP32[$116>>2] = $112;
 $117 = ((($105)) + -8|0);
 $118 = HEAP32[$117>>2]|0;
 $$sum$i = (($50) + 8)|0;
 $119 = (($103) + ($$sum$i)|0);
 HEAP32[$119>>2] = $118;
 $120 = HEAP32[$38>>2]|0;
 $121 = ((($120)) + 8|0);
 $122 = HEAP32[$121>>2]|0;
 $123 = ($122|0)==(0);
 if ($123) {
  $127 = 0;
 } else {
  $124 = ($122|0)==(1);
  if ($124) {
   $125 = HEAP32[$120>>2]|0;
   $phitmp$i = ($125|0)!=(0);
   $127 = $phitmp$i;
  } else {
   $127 = 1;
  }
 }
 $126 = $127&1;
 $$0 = $126;
 return ($$0|0);
}
function _luaV_lessequal($L,$l,$r) {
 $L = $L|0;
 $l = $l|0;
 $r = $r|0;
 var $$0 = 0, $$0$i = 0, $$lcssa = 0, $$phi$trans$insert$i$i = 0, $$phi$trans$insert$i$i2 = 0, $$pre$i$i = 0, $$pre$i$i3 = 0, $$sum$i = 0, $$sum$i8 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0;
 var $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0;
 var $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0;
 var $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0;
 var $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0;
 var $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0;
 var $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0.0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0.0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $l$01$i = 0, $ll$02$i = 0, $lr$04$i = 0, $phitmp$i = 0, $phitmp$i5 = 0, $r$03$i = 0, $tm$01$i$i = 0, $tm$01$i$i4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($l)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(3);
 if ($2) {
  $3 = ((($r)) + 8|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($4|0)==(3);
  if ($5) {
   $6 = +HEAPF64[$l>>3];
   $7 = +HEAPF64[$r>>3];
   $8 = $6 <= $7;
   $9 = $8&1;
   $$0 = $9;
   return ($$0|0);
  }
 } else {
  $10 = $1 & 15;
  $11 = ($10|0)==(4);
  if ($11) {
   $12 = ((($r)) + 8|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = $13 & 15;
   $15 = ($14|0)==(4);
   if ($15) {
    $16 = HEAP32[$l>>2]|0;
    $17 = HEAP32[$r>>2]|0;
    $18 = ((($16)) + 16|0);
    $19 = ((($17)) + 16|0);
    $20 = (_strcoll($18,$19)|0);
    $21 = ($20|0)==(0);
    L8: do {
     if ($21) {
      $22 = ((($17)) + 12|0);
      $23 = HEAP32[$22>>2]|0;
      $24 = ((($16)) + 12|0);
      $25 = HEAP32[$24>>2]|0;
      $l$01$i = $18;$ll$02$i = $25;$lr$04$i = $23;$r$03$i = $19;
      while(1) {
       $26 = (_strlen($l$01$i)|0);
       $27 = ($26|0)==($lr$04$i|0);
       $28 = ($26|0)==($ll$02$i|0);
       if ($27) {
        $$lcssa = $28;
        break;
       }
       if ($28) {
        $$0$i = -1;
        break L8;
       }
       $31 = (($26) + 1)|0;
       $32 = (($l$01$i) + ($31)|0);
       $33 = (($ll$02$i) - ($31))|0;
       $34 = (($r$03$i) + ($31)|0);
       $35 = (($lr$04$i) - ($31))|0;
       $36 = (_strcoll($32,$34)|0);
       $37 = ($36|0)==(0);
       if ($37) {
        $l$01$i = $32;$ll$02$i = $33;$lr$04$i = $35;$r$03$i = $34;
       } else {
        $$0$i = $36;
        break L8;
       }
      }
      $29 = $$lcssa&1;
      $30 = $29 ^ 1;
      $$0$i = $30;
     } else {
      $$0$i = $20;
     }
    } while(0);
    $38 = ($$0$i|0)<(1);
    $39 = $38&1;
    $$0 = $39;
    return ($$0|0);
   }
  }
 }
 $40 = ((($L)) + 8|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = (_luaT_gettmbyobj($L,$l,14)|0);
 $43 = ((($42)) + 8|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = ($44|0)==(0);
 if ($45) {
  $46 = (_luaT_gettmbyobj($L,$r,14)|0);
  $$phi$trans$insert$i$i = ((($46)) + 8|0);
  $$pre$i$i = HEAP32[$$phi$trans$insert$i$i>>2]|0;
  $47 = ($$pre$i$i|0)==(0);
  if ($47) {
   $130 = HEAP32[$40>>2]|0;
   $131 = (_luaT_gettmbyobj($L,$r,13)|0);
   $132 = ((($131)) + 8|0);
   $133 = HEAP32[$132>>2]|0;
   $134 = ($133|0)==(0);
   if ($134) {
    $135 = (_luaT_gettmbyobj($L,$l,13)|0);
    $$phi$trans$insert$i$i2 = ((($135)) + 8|0);
    $$pre$i$i3 = HEAP32[$$phi$trans$insert$i$i2>>2]|0;
    $136 = ($$pre$i$i3|0)==(0);
    if ($136) {
     _luaG_ordererror($L,$l,$r);
     // unreachable;
    } else {
     $tm$01$i$i4 = $135;
    }
   } else {
    $tm$01$i$i4 = $131;
   }
   $137 = ((($L)) + 28|0);
   $138 = HEAP32[$137>>2]|0;
   $139 = $130;
   $140 = $138;
   $141 = (($139) - ($140))|0;
   $142 = HEAP32[$40>>2]|0;
   $143 = ((($142)) + 16|0);
   HEAP32[$40>>2] = $143;
   $144 = $tm$01$i$i4;
   $145 = $144;
   $146 = HEAP32[$145>>2]|0;
   $147 = (($144) + 4)|0;
   $148 = $147;
   $149 = HEAP32[$148>>2]|0;
   $150 = $142;
   $151 = $150;
   HEAP32[$151>>2] = $146;
   $152 = (($150) + 4)|0;
   $153 = $152;
   HEAP32[$153>>2] = $149;
   $154 = ((($tm$01$i$i4)) + 8|0);
   $155 = HEAP32[$154>>2]|0;
   $156 = ((($142)) + 8|0);
   HEAP32[$156>>2] = $155;
   $157 = HEAP32[$40>>2]|0;
   $158 = ((($157)) + 16|0);
   HEAP32[$40>>2] = $158;
   $159 = $r;
   $160 = $159;
   $161 = HEAP32[$160>>2]|0;
   $162 = (($159) + 4)|0;
   $163 = $162;
   $164 = HEAP32[$163>>2]|0;
   $165 = $157;
   $166 = $165;
   HEAP32[$166>>2] = $161;
   $167 = (($165) + 4)|0;
   $168 = $167;
   HEAP32[$168>>2] = $164;
   $169 = ((($r)) + 8|0);
   $170 = HEAP32[$169>>2]|0;
   $171 = ((($157)) + 8|0);
   HEAP32[$171>>2] = $170;
   $172 = HEAP32[$40>>2]|0;
   $173 = ((($172)) + 16|0);
   HEAP32[$40>>2] = $173;
   $174 = $l;
   $175 = $174;
   $176 = HEAP32[$175>>2]|0;
   $177 = (($174) + 4)|0;
   $178 = $177;
   $179 = HEAP32[$178>>2]|0;
   $180 = $172;
   $181 = $180;
   HEAP32[$181>>2] = $176;
   $182 = (($180) + 4)|0;
   $183 = $182;
   HEAP32[$183>>2] = $179;
   $184 = HEAP32[$0>>2]|0;
   $185 = ((($172)) + 8|0);
   HEAP32[$185>>2] = $184;
   $186 = HEAP32[$40>>2]|0;
   $187 = ((($186)) + -48|0);
   $188 = ((($L)) + 16|0);
   $189 = HEAP32[$188>>2]|0;
   $190 = ((($189)) + 18|0);
   $191 = HEAP8[$190>>0]|0;
   $192 = $191&255;
   $193 = $192 & 1;
   _luaD_call($L,$187,1,$193);
   $194 = HEAP32[$137>>2]|0;
   $195 = (($194) + ($141)|0);
   $196 = HEAP32[$40>>2]|0;
   $197 = ((($196)) + -16|0);
   HEAP32[$40>>2] = $197;
   $198 = $197;
   $199 = $198;
   $200 = HEAP32[$199>>2]|0;
   $201 = (($198) + 4)|0;
   $202 = $201;
   $203 = HEAP32[$202>>2]|0;
   $204 = $195;
   $205 = $204;
   HEAP32[$205>>2] = $200;
   $206 = (($204) + 4)|0;
   $207 = $206;
   HEAP32[$207>>2] = $203;
   $208 = ((($196)) + -8|0);
   $209 = HEAP32[$208>>2]|0;
   $$sum$i8 = (($141) + 8)|0;
   $210 = (($194) + ($$sum$i8)|0);
   HEAP32[$210>>2] = $209;
   $211 = HEAP32[$40>>2]|0;
   $212 = ((($211)) + 8|0);
   $213 = HEAP32[$212>>2]|0;
   $214 = ($213|0)==(0);
   if ($214) {
    $218 = 0;
   } else {
    $215 = ($213|0)==(1);
    if ($215) {
     $216 = HEAP32[$211>>2]|0;
     $phitmp$i5 = ($216|0)!=(0);
     $218 = $phitmp$i5;
    } else {
     $218 = 1;
    }
   }
   $217 = $218&1;
   $219 = $217 ^ 1;
   $$0 = $219;
   return ($$0|0);
  } else {
   $tm$01$i$i = $46;
  }
 } else {
  $tm$01$i$i = $42;
 }
 $48 = ((($L)) + 28|0);
 $49 = HEAP32[$48>>2]|0;
 $50 = $41;
 $51 = $49;
 $52 = (($50) - ($51))|0;
 $53 = HEAP32[$40>>2]|0;
 $54 = ((($53)) + 16|0);
 HEAP32[$40>>2] = $54;
 $55 = $tm$01$i$i;
 $56 = $55;
 $57 = HEAP32[$56>>2]|0;
 $58 = (($55) + 4)|0;
 $59 = $58;
 $60 = HEAP32[$59>>2]|0;
 $61 = $53;
 $62 = $61;
 HEAP32[$62>>2] = $57;
 $63 = (($61) + 4)|0;
 $64 = $63;
 HEAP32[$64>>2] = $60;
 $65 = ((($tm$01$i$i)) + 8|0);
 $66 = HEAP32[$65>>2]|0;
 $67 = ((($53)) + 8|0);
 HEAP32[$67>>2] = $66;
 $68 = HEAP32[$40>>2]|0;
 $69 = ((($68)) + 16|0);
 HEAP32[$40>>2] = $69;
 $70 = $l;
 $71 = $70;
 $72 = HEAP32[$71>>2]|0;
 $73 = (($70) + 4)|0;
 $74 = $73;
 $75 = HEAP32[$74>>2]|0;
 $76 = $68;
 $77 = $76;
 HEAP32[$77>>2] = $72;
 $78 = (($76) + 4)|0;
 $79 = $78;
 HEAP32[$79>>2] = $75;
 $80 = HEAP32[$0>>2]|0;
 $81 = ((($68)) + 8|0);
 HEAP32[$81>>2] = $80;
 $82 = HEAP32[$40>>2]|0;
 $83 = ((($82)) + 16|0);
 HEAP32[$40>>2] = $83;
 $84 = $r;
 $85 = $84;
 $86 = HEAP32[$85>>2]|0;
 $87 = (($84) + 4)|0;
 $88 = $87;
 $89 = HEAP32[$88>>2]|0;
 $90 = $82;
 $91 = $90;
 HEAP32[$91>>2] = $86;
 $92 = (($90) + 4)|0;
 $93 = $92;
 HEAP32[$93>>2] = $89;
 $94 = ((($r)) + 8|0);
 $95 = HEAP32[$94>>2]|0;
 $96 = ((($82)) + 8|0);
 HEAP32[$96>>2] = $95;
 $97 = HEAP32[$40>>2]|0;
 $98 = ((($97)) + -48|0);
 $99 = ((($L)) + 16|0);
 $100 = HEAP32[$99>>2]|0;
 $101 = ((($100)) + 18|0);
 $102 = HEAP8[$101>>0]|0;
 $103 = $102&255;
 $104 = $103 & 1;
 _luaD_call($L,$98,1,$104);
 $105 = HEAP32[$48>>2]|0;
 $106 = (($105) + ($52)|0);
 $107 = HEAP32[$40>>2]|0;
 $108 = ((($107)) + -16|0);
 HEAP32[$40>>2] = $108;
 $109 = $108;
 $110 = $109;
 $111 = HEAP32[$110>>2]|0;
 $112 = (($109) + 4)|0;
 $113 = $112;
 $114 = HEAP32[$113>>2]|0;
 $115 = $106;
 $116 = $115;
 HEAP32[$116>>2] = $111;
 $117 = (($115) + 4)|0;
 $118 = $117;
 HEAP32[$118>>2] = $114;
 $119 = ((($107)) + -8|0);
 $120 = HEAP32[$119>>2]|0;
 $$sum$i = (($52) + 8)|0;
 $121 = (($105) + ($$sum$i)|0);
 HEAP32[$121>>2] = $120;
 $122 = HEAP32[$40>>2]|0;
 $123 = ((($122)) + 8|0);
 $124 = HEAP32[$123>>2]|0;
 $125 = ($124|0)==(0);
 if ($125) {
  $129 = 0;
 } else {
  $126 = ($124|0)==(1);
  if ($126) {
   $127 = HEAP32[$122>>2]|0;
   $phitmp$i = ($127|0)!=(0);
   $129 = $phitmp$i;
  } else {
   $129 = 1;
  }
 }
 $128 = $129&1;
 $$0 = $128;
 return ($$0|0);
}
function _luaV_equalobj_($L,$t1,$t2) {
 $L = $L|0;
 $t1 = $t1|0;
 $t2 = $t2|0;
 var $$0 = 0, $$0$i3 = 0, $$0$i4 = 0, $$sum$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0.0, $133 = 0.0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
 var $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0;
 var $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0;
 var $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0;
 var $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0;
 var $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0;
 var $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0.0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0.0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0.0, $63 = 0.0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $phitmp = 0, $tm$0$ph = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = ((($t1)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & 63;
 L1: do {
  switch ($2|0) {
  case 3:  {
   $3 = +HEAPF64[$t1>>3];
   $4 = +HEAPF64[$t2>>3];
   $5 = $3 == $4;
   $6 = $5&1;
   $$0 = $6;
   return ($$0|0);
   break;
  }
  case 1:  {
   $7 = HEAP32[$t1>>2]|0;
   $8 = HEAP32[$t2>>2]|0;
   $9 = ($7|0)==($8|0);
   $10 = $9&1;
   $$0 = $10;
   return ($$0|0);
   break;
  }
  case 2:  {
   $11 = HEAP32[$t1>>2]|0;
   $12 = HEAP32[$t2>>2]|0;
   $13 = ($11|0)==($12|0);
   $14 = $13&1;
   $$0 = $14;
   return ($$0|0);
   break;
  }
  case 22:  {
   $15 = HEAP32[$t1>>2]|0;
   $16 = HEAP32[$t2>>2]|0;
   $17 = ($15|0)==($16|0);
   $18 = $17&1;
   $$0 = $18;
   return ($$0|0);
   break;
  }
  case 4:  {
   $19 = HEAP32[$t1>>2]|0;
   $20 = HEAP32[$t2>>2]|0;
   $21 = ($19|0)==($20|0);
   $22 = $21&1;
   $$0 = $22;
   return ($$0|0);
   break;
  }
  case 20:  {
   $23 = HEAP32[$t1>>2]|0;
   $24 = HEAP32[$t2>>2]|0;
   $25 = (_luaS_eqlngstr($23,$24)|0);
   $$0 = $25;
   return ($$0|0);
   break;
  }
  case 7:  {
   $26 = HEAP32[$t1>>2]|0;
   $27 = HEAP32[$t2>>2]|0;
   $28 = ($26|0)==($27|0);
   if ($28) {
    $$0 = 1;
    return ($$0|0);
   }
   $29 = ($L|0)==(0|0);
   if ($29) {
    $$0 = 0;
    return ($$0|0);
   }
   $30 = ((($26)) + 8|0);
   $31 = HEAP32[$30>>2]|0;
   $32 = ((($27)) + 8|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = ($31|0)==(0|0);
   if ($34) {
    $$0 = 0;
    return ($$0|0);
   }
   $35 = ((($31)) + 6|0);
   $36 = HEAP8[$35>>0]|0;
   $37 = $36 & 32;
   $38 = ($37<<24>>24)==(0);
   if (!($38)) {
    $$0 = 0;
    return ($$0|0);
   }
   $39 = ((($L)) + 12|0);
   $40 = HEAP32[$39>>2]|0;
   $41 = ((($40)) + 204|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = (_luaT_gettm($31,5,$42)|0);
   $44 = ($43|0)==(0|0);
   if ($44) {
    $$0 = 0;
    return ($$0|0);
   }
   $45 = ($31|0)==($33|0);
   if ($45) {
    $tm$0$ph = $43;
   } else {
    $46 = ($33|0)==(0|0);
    if ($46) {
     $$0 = 0;
     return ($$0|0);
    }
    $47 = ((($33)) + 6|0);
    $48 = HEAP8[$47>>0]|0;
    $49 = $48 & 32;
    $50 = ($49<<24>>24)==(0);
    if (!($50)) {
     $$0 = 0;
     return ($$0|0);
    }
    $51 = HEAP32[$39>>2]|0;
    $52 = ((($51)) + 204|0);
    $53 = HEAP32[$52>>2]|0;
    $54 = (_luaT_gettm($33,5,$53)|0);
    $55 = ($54|0)==(0|0);
    if ($55) {
     $$0 = 0;
     return ($$0|0);
    }
    $56 = ((($43)) + 8|0);
    $57 = HEAP32[$56>>2]|0;
    $58 = ((($54)) + 8|0);
    $59 = HEAP32[$58>>2]|0;
    $60 = ($57|0)==($59|0);
    if (!($60)) {
     $$0 = 0;
     return ($$0|0);
    }
    $61 = $57 & 63;
    switch ($61|0) {
    case 0:  {
     $tm$0$ph = $43;
     break L1;
     break;
    }
    case 3:  {
     $62 = +HEAPF64[$43>>3];
     $63 = +HEAPF64[$54>>3];
     $64 = $62 == $63;
     $65 = $64&1;
     $$0$i4 = $65;
     break;
    }
    case 1:  {
     $66 = HEAP32[$43>>2]|0;
     $67 = HEAP32[$54>>2]|0;
     $68 = ($66|0)==($67|0);
     $69 = $68&1;
     $$0$i4 = $69;
     break;
    }
    case 2:  {
     $70 = HEAP32[$43>>2]|0;
     $71 = HEAP32[$54>>2]|0;
     $72 = ($70|0)==($71|0);
     $73 = $72&1;
     $$0$i4 = $73;
     break;
    }
    case 22:  {
     $74 = HEAP32[$43>>2]|0;
     $75 = HEAP32[$54>>2]|0;
     $76 = ($74|0)==($75|0);
     $77 = $76&1;
     $$0$i4 = $77;
     break;
    }
    case 4:  {
     $78 = HEAP32[$43>>2]|0;
     $79 = HEAP32[$54>>2]|0;
     $80 = ($78|0)==($79|0);
     $81 = $80&1;
     $$0$i4 = $81;
     break;
    }
    case 20:  {
     $82 = HEAP32[$43>>2]|0;
     $83 = HEAP32[$54>>2]|0;
     $84 = (_luaS_eqlngstr($82,$83)|0);
     $$0$i4 = $84;
     break;
    }
    case 7:  {
     $85 = HEAP32[$43>>2]|0;
     $86 = HEAP32[$54>>2]|0;
     $87 = ($85|0)==($86|0);
     if ($87) {
      $tm$0$ph = $43;
      break L1;
     } else {
      $$0 = 0;
     }
     return ($$0|0);
     break;
    }
    case 5:  {
     $88 = HEAP32[$43>>2]|0;
     $89 = HEAP32[$54>>2]|0;
     $90 = ($88|0)==($89|0);
     if ($90) {
      $tm$0$ph = $43;
      break L1;
     } else {
      $$0 = 0;
     }
     return ($$0|0);
     break;
    }
    default: {
     $91 = HEAP32[$43>>2]|0;
     $92 = HEAP32[$54>>2]|0;
     $93 = ($91|0)==($92|0);
     $94 = $93&1;
     $$0$i4 = $94;
    }
    }
    $95 = ($$0$i4|0)==(0);
    if ($95) {
     $$0 = 0;
     return ($$0|0);
    } else {
     $tm$0$ph = $43;
    }
   }
   break;
  }
  case 5:  {
   $96 = HEAP32[$t1>>2]|0;
   $97 = HEAP32[$t2>>2]|0;
   $98 = ($96|0)==($97|0);
   if ($98) {
    $$0 = 1;
    return ($$0|0);
   }
   $99 = ($L|0)==(0|0);
   if ($99) {
    $$0 = 0;
    return ($$0|0);
   }
   $100 = ((($96)) + 8|0);
   $101 = HEAP32[$100>>2]|0;
   $102 = ((($97)) + 8|0);
   $103 = HEAP32[$102>>2]|0;
   $104 = ($101|0)==(0|0);
   if ($104) {
    $$0 = 0;
    return ($$0|0);
   }
   $105 = ((($101)) + 6|0);
   $106 = HEAP8[$105>>0]|0;
   $107 = $106 & 32;
   $108 = ($107<<24>>24)==(0);
   if (!($108)) {
    $$0 = 0;
    return ($$0|0);
   }
   $109 = ((($L)) + 12|0);
   $110 = HEAP32[$109>>2]|0;
   $111 = ((($110)) + 204|0);
   $112 = HEAP32[$111>>2]|0;
   $113 = (_luaT_gettm($101,5,$112)|0);
   $114 = ($113|0)==(0|0);
   if ($114) {
    $$0 = 0;
    return ($$0|0);
   }
   $115 = ($101|0)==($103|0);
   if ($115) {
    $tm$0$ph = $113;
   } else {
    $116 = ($103|0)==(0|0);
    if ($116) {
     $$0 = 0;
     return ($$0|0);
    }
    $117 = ((($103)) + 6|0);
    $118 = HEAP8[$117>>0]|0;
    $119 = $118 & 32;
    $120 = ($119<<24>>24)==(0);
    if (!($120)) {
     $$0 = 0;
     return ($$0|0);
    }
    $121 = HEAP32[$109>>2]|0;
    $122 = ((($121)) + 204|0);
    $123 = HEAP32[$122>>2]|0;
    $124 = (_luaT_gettm($103,5,$123)|0);
    $125 = ($124|0)==(0|0);
    if ($125) {
     $$0 = 0;
     return ($$0|0);
    }
    $126 = ((($113)) + 8|0);
    $127 = HEAP32[$126>>2]|0;
    $128 = ((($124)) + 8|0);
    $129 = HEAP32[$128>>2]|0;
    $130 = ($127|0)==($129|0);
    if (!($130)) {
     $$0 = 0;
     return ($$0|0);
    }
    $131 = $127 & 63;
    switch ($131|0) {
    case 0:  {
     $tm$0$ph = $113;
     break L1;
     break;
    }
    case 3:  {
     $132 = +HEAPF64[$113>>3];
     $133 = +HEAPF64[$124>>3];
     $134 = $132 == $133;
     $135 = $134&1;
     $$0$i3 = $135;
     break;
    }
    case 1:  {
     $136 = HEAP32[$113>>2]|0;
     $137 = HEAP32[$124>>2]|0;
     $138 = ($136|0)==($137|0);
     $139 = $138&1;
     $$0$i3 = $139;
     break;
    }
    case 2:  {
     $140 = HEAP32[$113>>2]|0;
     $141 = HEAP32[$124>>2]|0;
     $142 = ($140|0)==($141|0);
     $143 = $142&1;
     $$0$i3 = $143;
     break;
    }
    case 22:  {
     $144 = HEAP32[$113>>2]|0;
     $145 = HEAP32[$124>>2]|0;
     $146 = ($144|0)==($145|0);
     $147 = $146&1;
     $$0$i3 = $147;
     break;
    }
    case 4:  {
     $148 = HEAP32[$113>>2]|0;
     $149 = HEAP32[$124>>2]|0;
     $150 = ($148|0)==($149|0);
     $151 = $150&1;
     $$0$i3 = $151;
     break;
    }
    case 20:  {
     $152 = HEAP32[$113>>2]|0;
     $153 = HEAP32[$124>>2]|0;
     $154 = (_luaS_eqlngstr($152,$153)|0);
     $$0$i3 = $154;
     break;
    }
    case 7:  {
     $155 = HEAP32[$113>>2]|0;
     $156 = HEAP32[$124>>2]|0;
     $157 = ($155|0)==($156|0);
     if ($157) {
      $tm$0$ph = $113;
      break L1;
     } else {
      $$0 = 0;
     }
     return ($$0|0);
     break;
    }
    case 5:  {
     $158 = HEAP32[$113>>2]|0;
     $159 = HEAP32[$124>>2]|0;
     $160 = ($158|0)==($159|0);
     if ($160) {
      $tm$0$ph = $113;
      break L1;
     } else {
      $$0 = 0;
     }
     return ($$0|0);
     break;
    }
    default: {
     $161 = HEAP32[$113>>2]|0;
     $162 = HEAP32[$124>>2]|0;
     $163 = ($161|0)==($162|0);
     $164 = $163&1;
     $$0$i3 = $164;
    }
    }
    $165 = ($$0$i3|0)==(0);
    if ($165) {
     $$0 = 0;
     return ($$0|0);
    } else {
     $tm$0$ph = $113;
    }
   }
   break;
  }
  case 0:  {
   $$0 = 1;
   return ($$0|0);
   break;
  }
  default: {
   $166 = HEAP32[$t1>>2]|0;
   $167 = HEAP32[$t2>>2]|0;
   $168 = ($166|0)==($167|0);
   $169 = $168&1;
   $$0 = $169;
   return ($$0|0);
  }
  }
 } while(0);
 $170 = ((($L)) + 8|0);
 $171 = HEAP32[$170>>2]|0;
 $172 = ((($L)) + 28|0);
 $173 = HEAP32[$172>>2]|0;
 $174 = $171;
 $175 = $173;
 $176 = (($174) - ($175))|0;
 $177 = ((($171)) + 16|0);
 HEAP32[$170>>2] = $177;
 $178 = $tm$0$ph;
 $179 = $178;
 $180 = HEAP32[$179>>2]|0;
 $181 = (($178) + 4)|0;
 $182 = $181;
 $183 = HEAP32[$182>>2]|0;
 $184 = $171;
 $185 = $184;
 HEAP32[$185>>2] = $180;
 $186 = (($184) + 4)|0;
 $187 = $186;
 HEAP32[$187>>2] = $183;
 $188 = ((($tm$0$ph)) + 8|0);
 $189 = HEAP32[$188>>2]|0;
 $190 = ((($171)) + 8|0);
 HEAP32[$190>>2] = $189;
 $191 = HEAP32[$170>>2]|0;
 $192 = ((($191)) + 16|0);
 HEAP32[$170>>2] = $192;
 $193 = $t1;
 $194 = $193;
 $195 = HEAP32[$194>>2]|0;
 $196 = (($193) + 4)|0;
 $197 = $196;
 $198 = HEAP32[$197>>2]|0;
 $199 = $191;
 $200 = $199;
 HEAP32[$200>>2] = $195;
 $201 = (($199) + 4)|0;
 $202 = $201;
 HEAP32[$202>>2] = $198;
 $203 = HEAP32[$0>>2]|0;
 $204 = ((($191)) + 8|0);
 HEAP32[$204>>2] = $203;
 $205 = HEAP32[$170>>2]|0;
 $206 = ((($205)) + 16|0);
 HEAP32[$170>>2] = $206;
 $207 = $t2;
 $208 = $207;
 $209 = HEAP32[$208>>2]|0;
 $210 = (($207) + 4)|0;
 $211 = $210;
 $212 = HEAP32[$211>>2]|0;
 $213 = $205;
 $214 = $213;
 HEAP32[$214>>2] = $209;
 $215 = (($213) + 4)|0;
 $216 = $215;
 HEAP32[$216>>2] = $212;
 $217 = ((($t2)) + 8|0);
 $218 = HEAP32[$217>>2]|0;
 $219 = ((($205)) + 8|0);
 HEAP32[$219>>2] = $218;
 $220 = HEAP32[$170>>2]|0;
 $221 = ((($220)) + -48|0);
 $222 = ((($L)) + 16|0);
 $223 = HEAP32[$222>>2]|0;
 $224 = ((($223)) + 18|0);
 $225 = HEAP8[$224>>0]|0;
 $226 = $225&255;
 $227 = $226 & 1;
 _luaD_call($L,$221,1,$227);
 $228 = HEAP32[$172>>2]|0;
 $229 = (($228) + ($176)|0);
 $230 = HEAP32[$170>>2]|0;
 $231 = ((($230)) + -16|0);
 HEAP32[$170>>2] = $231;
 $232 = $231;
 $233 = $232;
 $234 = HEAP32[$233>>2]|0;
 $235 = (($232) + 4)|0;
 $236 = $235;
 $237 = HEAP32[$236>>2]|0;
 $238 = $229;
 $239 = $238;
 HEAP32[$239>>2] = $234;
 $240 = (($238) + 4)|0;
 $241 = $240;
 HEAP32[$241>>2] = $237;
 $242 = ((($230)) + -8|0);
 $243 = HEAP32[$242>>2]|0;
 $$sum$i = (($176) + 8)|0;
 $244 = (($228) + ($$sum$i)|0);
 HEAP32[$244>>2] = $243;
 $245 = HEAP32[$170>>2]|0;
 $246 = ((($245)) + 8|0);
 $247 = HEAP32[$246>>2]|0;
 $248 = ($247|0)==(0);
 if ($248) {
  $252 = 0;
 } else {
  $249 = ($247|0)==(1);
  if ($249) {
   $250 = HEAP32[$245>>2]|0;
   $phitmp = ($250|0)!=(0);
   $252 = $phitmp;
  } else {
   $252 = 1;
  }
 }
 $251 = $252&1;
 $$0 = $251;
 return ($$0|0);
}
function _luaV_concat($L,$total) {
 $L = $L|0;
 $total = $total|0;
 var $$0 = 0, $$lcssa73 = 0, $$lcssa74 = 0, $$lcssa77 = 0, $$neg = 0, $$phi$trans$insert$i = 0, $$pre = 0, $$pre$i = 0, $$pre33 = 0, $$sum = 0, $$sum$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0.0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0;
 var $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0.0, $14 = 0, $140 = 0, $141 = 0;
 var $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0;
 var $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0.0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0;
 var $179 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $i$011 = 0, $i$020 = 0, $i$020$lcssa = 0, $i$1 = 0, $n$0 = 0, $or$cond = 0, $s$i = 0, $tl$014 = 0, $tl$021 = 0;
 var $tl$021$lcssa = 0, $tl$1 = 0, $tm$01$i = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer4 = 0, $vararg_buffer7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $s$i = sp + 32|0;
 $0 = ((($L)) + 8|0);
 $1 = ((($L)) + 12|0);
 $2 = ((($L)) + 28|0);
 $3 = ((($L)) + 16|0);
 $$pre = HEAP32[$0>>2]|0;
 $$0 = $total;$5 = $$pre;
 L1: while(1) {
  $4 = ((($5)) + -32|0);
  $6 = ((($5)) + -24|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = $7 & 15;
  $9 = ($8|0)==(4);
  $10 = ($7|0)==(3);
  $or$cond = $10 | $9;
  $11 = ((($5)) + -16|0);
  L3: do {
   if ($or$cond) {
    $12 = ((($5)) + -8|0);
    $13 = HEAP32[$12>>2]|0;
    $14 = $13 & 15;
    $15 = ($14|0)==(4);
    do {
     if ($15) {
      $107 = $7;
     } else {
      $16 = ($13|0)==(3);
      if ($16) {
       $17 = +HEAPF64[$11>>3];
       HEAPF64[$vararg_buffer>>3] = $17;
       $18 = (_sprintf($s$i,10420,$vararg_buffer)|0);
       $19 = (_luaS_newlstr($L,$s$i,$18)|0);
       HEAP32[$11>>2] = $19;
       $20 = ((($19)) + 4|0);
       $21 = HEAP8[$20>>0]|0;
       $22 = $21&255;
       $23 = $22 | 64;
       HEAP32[$12>>2] = $23;
       $$pre33 = HEAP32[$6>>2]|0;
       $107 = $$pre33;
       break;
      } else {
       label = 7;
       break L3;
      }
     }
    } while(0);
    $102 = HEAP32[$11>>2]|0;
    $103 = ((($102)) + 12|0);
    $104 = HEAP32[$103>>2]|0;
    $105 = ($104|0)==(0);
    $106 = $107 & 15;
    $108 = ($106|0)==(4);
    if ($105) {
     if ($108) {
      $n$0 = 2;
      break;
     }
     $109 = ($107|0)==(3);
     if ($109) {
      $110 = +HEAPF64[$4>>3];
      HEAPF64[$vararg_buffer1>>3] = $110;
      $111 = (_sprintf($s$i,10420,$vararg_buffer1)|0);
      $112 = (_luaS_newlstr($L,$s$i,$111)|0);
      HEAP32[$4>>2] = $112;
      $113 = ((($112)) + 4|0);
      $114 = HEAP8[$113>>0]|0;
      $115 = $114&255;
      $116 = $115 | 64;
      HEAP32[$6>>2] = $116;
     }
     $n$0 = 2;
     break;
    }
    if ($108) {
     $117 = HEAP32[$4>>2]|0;
     $118 = ((($117)) + 12|0);
     $119 = HEAP32[$118>>2]|0;
     $120 = ($119|0)==(0);
     if ($120) {
      $121 = $11;
      $122 = $121;
      $123 = HEAP32[$122>>2]|0;
      $124 = (($121) + 4)|0;
      $125 = $124;
      $126 = HEAP32[$125>>2]|0;
      $127 = $4;
      $128 = $127;
      HEAP32[$128>>2] = $123;
      $129 = (($127) + 4)|0;
      $130 = $129;
      HEAP32[$130>>2] = $126;
      $131 = HEAP32[$12>>2]|0;
      HEAP32[$6>>2] = $131;
      $n$0 = 2;
      break;
     }
    }
    $132 = ($$0|0)>(1);
    L22: do {
     if ($132) {
      $i$020 = 1;$tl$021 = $104;
      while(1) {
       $$sum = $i$020 ^ -1;
       $133 = (($5) + ($$sum<<4)|0);
       $134 = (((($5) + ($$sum<<4)|0)) + 8|0);
       $135 = HEAP32[$134>>2]|0;
       $136 = $135 & 15;
       $137 = ($136|0)==(4);
       if (!($137)) {
        $138 = ($135|0)==(3);
        if (!($138)) {
         $i$020$lcssa = $i$020;$tl$021$lcssa = $tl$021;
         break;
        }
        $139 = +HEAPF64[$133>>3];
        HEAPF64[$vararg_buffer4>>3] = $139;
        $140 = (_sprintf($s$i,10420,$vararg_buffer4)|0);
        $141 = (_luaS_newlstr($L,$s$i,$140)|0);
        HEAP32[$133>>2] = $141;
        $142 = ((($141)) + 4|0);
        $143 = HEAP8[$142>>0]|0;
        $144 = $143&255;
        $145 = $144 | 64;
        HEAP32[$134>>2] = $145;
       }
       $146 = HEAP32[$133>>2]|0;
       $147 = ((($146)) + 12|0);
       $148 = HEAP32[$147>>2]|0;
       $149 = (-3 - ($tl$021))|0;
       $150 = ($148>>>0)<($149>>>0);
       if (!($150)) {
        label = 25;
        break L1;
       }
       $151 = (($148) + ($tl$021))|0;
       $152 = (($i$020) + 1)|0;
       $153 = ($152|0)<($$0|0);
       if ($153) {
        $i$020 = $152;$tl$021 = $151;
       } else {
        $i$011 = $152;$tl$014 = $151;
        break L22;
       }
      }
      $i$011 = $i$020$lcssa;$tl$014 = $tl$021$lcssa;
     } else {
      $i$011 = 1;$tl$014 = $104;
     }
    } while(0);
    $154 = HEAP32[$1>>2]|0;
    $155 = ((($154)) + 144|0);
    $156 = (_luaZ_openspace($L,$155,$tl$014)|0);
    $i$1 = $i$011;$tl$1 = 0;
    while(1) {
     $157 = (0 - ($i$1))|0;
     $158 = (($5) + ($157<<4)|0);
     $159 = HEAP32[$158>>2]|0;
     $160 = ((($159)) + 12|0);
     $161 = HEAP32[$160>>2]|0;
     $162 = (($156) + ($tl$1)|0);
     $163 = ((($159)) + 16|0);
     _memcpy(($162|0),($163|0),($161|0))|0;
     $164 = (($161) + ($tl$1))|0;
     $165 = (($i$1) + -1)|0;
     $166 = ($i$1|0)>(1);
     if ($166) {
      $i$1 = $165;$tl$1 = $164;
     } else {
      $$lcssa73 = $164;
      break;
     }
    }
    $167 = (0 - ($i$011))|0;
    $168 = (($5) + ($167<<4)|0);
    $169 = (_luaS_newlstr($L,$156,$$lcssa73)|0);
    HEAP32[$168>>2] = $169;
    $170 = ((($169)) + 4|0);
    $171 = HEAP8[$170>>0]|0;
    $172 = $171&255;
    $173 = $172 | 64;
    $174 = (((($5) + ($167<<4)|0)) + 8|0);
    HEAP32[$174>>2] = $173;
    $n$0 = $i$011;
   } else {
    label = 7;
   }
  } while(0);
  if ((label|0) == 7) {
   label = 0;
   $24 = (_luaT_gettmbyobj($L,$4,15)|0);
   $25 = ((($24)) + 8|0);
   $26 = HEAP32[$25>>2]|0;
   $27 = ($26|0)==(0);
   if ($27) {
    $28 = (_luaT_gettmbyobj($L,$11,15)|0);
    $$phi$trans$insert$i = ((($28)) + 8|0);
    $$pre$i = HEAP32[$$phi$trans$insert$i>>2]|0;
    $29 = ($$pre$i|0)==(0);
    if ($29) {
     $$lcssa74 = $4;$$lcssa77 = $11;
     label = 10;
     break;
    } else {
     $tm$01$i = $28;
    }
   } else {
    $tm$01$i = $24;
   }
   $30 = HEAP32[$2>>2]|0;
   $31 = $4;
   $32 = $30;
   $33 = (($31) - ($32))|0;
   $34 = HEAP32[$0>>2]|0;
   $35 = ((($34)) + 16|0);
   HEAP32[$0>>2] = $35;
   $36 = $tm$01$i;
   $37 = $36;
   $38 = HEAP32[$37>>2]|0;
   $39 = (($36) + 4)|0;
   $40 = $39;
   $41 = HEAP32[$40>>2]|0;
   $42 = $34;
   $43 = $42;
   HEAP32[$43>>2] = $38;
   $44 = (($42) + 4)|0;
   $45 = $44;
   HEAP32[$45>>2] = $41;
   $46 = ((($tm$01$i)) + 8|0);
   $47 = HEAP32[$46>>2]|0;
   $48 = ((($34)) + 8|0);
   HEAP32[$48>>2] = $47;
   $49 = HEAP32[$0>>2]|0;
   $50 = ((($49)) + 16|0);
   HEAP32[$0>>2] = $50;
   $51 = $4;
   $52 = $51;
   $53 = HEAP32[$52>>2]|0;
   $54 = (($51) + 4)|0;
   $55 = $54;
   $56 = HEAP32[$55>>2]|0;
   $57 = $49;
   $58 = $57;
   HEAP32[$58>>2] = $53;
   $59 = (($57) + 4)|0;
   $60 = $59;
   HEAP32[$60>>2] = $56;
   $61 = HEAP32[$6>>2]|0;
   $62 = ((($49)) + 8|0);
   HEAP32[$62>>2] = $61;
   $63 = HEAP32[$0>>2]|0;
   $64 = ((($63)) + 16|0);
   HEAP32[$0>>2] = $64;
   $65 = $11;
   $66 = $65;
   $67 = HEAP32[$66>>2]|0;
   $68 = (($65) + 4)|0;
   $69 = $68;
   $70 = HEAP32[$69>>2]|0;
   $71 = $63;
   $72 = $71;
   HEAP32[$72>>2] = $67;
   $73 = (($71) + 4)|0;
   $74 = $73;
   HEAP32[$74>>2] = $70;
   $75 = ((($5)) + -8|0);
   $76 = HEAP32[$75>>2]|0;
   $77 = ((($63)) + 8|0);
   HEAP32[$77>>2] = $76;
   $78 = HEAP32[$0>>2]|0;
   $79 = ((($78)) + -48|0);
   $80 = HEAP32[$3>>2]|0;
   $81 = ((($80)) + 18|0);
   $82 = HEAP8[$81>>0]|0;
   $83 = $82&255;
   $84 = $83 & 1;
   _luaD_call($L,$79,1,$84);
   $85 = HEAP32[$2>>2]|0;
   $86 = (($85) + ($33)|0);
   $87 = HEAP32[$0>>2]|0;
   $88 = ((($87)) + -16|0);
   HEAP32[$0>>2] = $88;
   $89 = $88;
   $90 = $89;
   $91 = HEAP32[$90>>2]|0;
   $92 = (($89) + 4)|0;
   $93 = $92;
   $94 = HEAP32[$93>>2]|0;
   $95 = $86;
   $96 = $95;
   HEAP32[$96>>2] = $91;
   $97 = (($95) + 4)|0;
   $98 = $97;
   HEAP32[$98>>2] = $94;
   $99 = ((($87)) + -8|0);
   $100 = HEAP32[$99>>2]|0;
   $$sum$i = (($33) + 8)|0;
   $101 = (($85) + ($$sum$i)|0);
   HEAP32[$101>>2] = $100;
   $n$0 = 2;
  }
  $$neg = (($$0) + 1)|0;
  $175 = (($$neg) - ($n$0))|0;
  $176 = HEAP32[$0>>2]|0;
  $177 = (1 - ($n$0))|0;
  $178 = (($176) + ($177<<4)|0);
  HEAP32[$0>>2] = $178;
  $179 = ($175|0)>(1);
  if ($179) {
   $$0 = $175;$5 = $178;
  } else {
   label = 31;
   break;
  }
 }
 if ((label|0) == 10) {
  _luaG_concaterror($L,$$lcssa74,$$lcssa77);
  // unreachable;
 }
 else if ((label|0) == 25) {
  _luaG_runerror($L,7194,$vararg_buffer7);
  // unreachable;
 }
 else if ((label|0) == 31) {
  STACKTOP = sp;return;
 }
}
function _luaV_objlen($L,$ra,$rb) {
 $L = $L|0;
 $ra = $ra|0;
 $rb = $rb|0;
 var $$sum$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0.0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $tm$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($rb)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & 15;
 L1: do {
  switch ($2|0) {
  case 5:  {
   $3 = HEAP32[$rb>>2]|0;
   $4 = ((($3)) + 8|0);
   $5 = HEAP32[$4>>2]|0;
   $6 = ($5|0)==(0|0);
   if (!($6)) {
    $7 = ((($5)) + 6|0);
    $8 = HEAP8[$7>>0]|0;
    $9 = $8 & 16;
    $10 = ($9<<24>>24)==(0);
    if ($10) {
     $11 = ((($L)) + 12|0);
     $12 = HEAP32[$11>>2]|0;
     $13 = ((($12)) + 200|0);
     $14 = HEAP32[$13>>2]|0;
     $15 = (_luaT_gettm($5,4,$14)|0);
     $16 = ($15|0)==(0|0);
     if (!($16)) {
      $tm$0 = $15;
      break L1;
     }
    }
   }
   $17 = (_luaH_getn($3)|0);
   $18 = (+($17|0));
   HEAPF64[$ra>>3] = $18;
   $19 = ((($ra)) + 8|0);
   HEAP32[$19>>2] = 3;
   return;
   break;
  }
  case 4:  {
   $20 = HEAP32[$rb>>2]|0;
   $21 = ((($20)) + 12|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = (+($22>>>0));
   HEAPF64[$ra>>3] = $23;
   $24 = ((($ra)) + 8|0);
   HEAP32[$24>>2] = 3;
   return;
   break;
  }
  default: {
   $25 = (_luaT_gettmbyobj($L,$rb,4)|0);
   $26 = ((($25)) + 8|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = ($27|0)==(0);
   if ($28) {
    _luaG_typeerror($L,$rb,7217);
    // unreachable;
   } else {
    $tm$0 = $25;
   }
  }
  }
 } while(0);
 $29 = ((($L)) + 28|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = $ra;
 $32 = $30;
 $33 = (($31) - ($32))|0;
 $34 = ((($L)) + 8|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = ((($35)) + 16|0);
 HEAP32[$34>>2] = $36;
 $37 = $tm$0;
 $38 = $37;
 $39 = HEAP32[$38>>2]|0;
 $40 = (($37) + 4)|0;
 $41 = $40;
 $42 = HEAP32[$41>>2]|0;
 $43 = $35;
 $44 = $43;
 HEAP32[$44>>2] = $39;
 $45 = (($43) + 4)|0;
 $46 = $45;
 HEAP32[$46>>2] = $42;
 $47 = ((($tm$0)) + 8|0);
 $48 = HEAP32[$47>>2]|0;
 $49 = ((($35)) + 8|0);
 HEAP32[$49>>2] = $48;
 $50 = HEAP32[$34>>2]|0;
 $51 = ((($50)) + 16|0);
 HEAP32[$34>>2] = $51;
 $52 = $rb;
 $53 = $52;
 $54 = HEAP32[$53>>2]|0;
 $55 = (($52) + 4)|0;
 $56 = $55;
 $57 = HEAP32[$56>>2]|0;
 $58 = $50;
 $59 = $58;
 HEAP32[$59>>2] = $54;
 $60 = (($58) + 4)|0;
 $61 = $60;
 HEAP32[$61>>2] = $57;
 $62 = HEAP32[$0>>2]|0;
 $63 = ((($50)) + 8|0);
 HEAP32[$63>>2] = $62;
 $64 = HEAP32[$34>>2]|0;
 $65 = ((($64)) + 16|0);
 HEAP32[$34>>2] = $65;
 $66 = $rb;
 $67 = $66;
 $68 = HEAP32[$67>>2]|0;
 $69 = (($66) + 4)|0;
 $70 = $69;
 $71 = HEAP32[$70>>2]|0;
 $72 = $64;
 $73 = $72;
 HEAP32[$73>>2] = $68;
 $74 = (($72) + 4)|0;
 $75 = $74;
 HEAP32[$75>>2] = $71;
 $76 = HEAP32[$0>>2]|0;
 $77 = ((($64)) + 8|0);
 HEAP32[$77>>2] = $76;
 $78 = HEAP32[$34>>2]|0;
 $79 = ((($78)) + -48|0);
 $80 = ((($L)) + 16|0);
 $81 = HEAP32[$80>>2]|0;
 $82 = ((($81)) + 18|0);
 $83 = HEAP8[$82>>0]|0;
 $84 = $83&255;
 $85 = $84 & 1;
 _luaD_call($L,$79,1,$85);
 $86 = HEAP32[$29>>2]|0;
 $87 = (($86) + ($33)|0);
 $88 = HEAP32[$34>>2]|0;
 $89 = ((($88)) + -16|0);
 HEAP32[$34>>2] = $89;
 $90 = $89;
 $91 = $90;
 $92 = HEAP32[$91>>2]|0;
 $93 = (($90) + 4)|0;
 $94 = $93;
 $95 = HEAP32[$94>>2]|0;
 $96 = $87;
 $97 = $96;
 HEAP32[$97>>2] = $92;
 $98 = (($96) + 4)|0;
 $99 = $98;
 HEAP32[$99>>2] = $95;
 $100 = ((($88)) + -8|0);
 $101 = HEAP32[$100>>2]|0;
 $$sum$i = (($33) + 8)|0;
 $102 = (($86) + ($$sum$i)|0);
 HEAP32[$102>>2] = $101;
 return;
}
function _luaV_arith($L,$ra,$rb,$rc,$op) {
 $L = $L|0;
 $ra = $ra|0;
 $rb = $rb|0;
 $rc = $rc|0;
 $op = $op|0;
 var $$0$i$ph = 0, $$in = 0, $$phi$trans$insert$i = 0, $$pre$i = 0, $$sum$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0.0, $12 = 0;
 var $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0, $26 = 0.0, $27 = 0.0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $num$i = 0, $num$i1 = 0, $tempb = 0, $tm$01$i = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $num$i1 = sp + 24|0;
 $num$i = sp + 16|0;
 $tempb = sp;
 $0 = ((($rb)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(3);
 do {
  if ($2) {
   $$0$i$ph = $rb;
   label = 6;
  } else {
   $3 = $1 & 15;
   $4 = ($3|0)==(4);
   if ($4) {
    $5 = HEAP32[$rb>>2]|0;
    $6 = ((($5)) + 16|0);
    $7 = ((($5)) + 12|0);
    $8 = HEAP32[$7>>2]|0;
    $9 = (_luaO_str2d($6,$8,$num$i)|0);
    $10 = ($9|0)==(0);
    if (!($10)) {
     $11 = +HEAPF64[$num$i>>3];
     HEAPF64[$tempb>>3] = $11;
     $12 = ((($tempb)) + 8|0);
     HEAP32[$12>>2] = 3;
     $$0$i$ph = $tempb;
     label = 6;
     break;
    }
   }
  }
 } while(0);
 L7: do {
  if ((label|0) == 6) {
   $13 = ((($rc)) + 8|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = ($14|0)==(3);
   do {
    if ($15) {
     $$in = $rc;
    } else {
     $16 = $14 & 15;
     $17 = ($16|0)==(4);
     if ($17) {
      $18 = HEAP32[$rc>>2]|0;
      $19 = ((($18)) + 16|0);
      $20 = ((($18)) + 12|0);
      $21 = HEAP32[$20>>2]|0;
      $22 = (_luaO_str2d($19,$21,$num$i1)|0);
      $23 = ($22|0)==(0);
      if (!($23)) {
       $$in = $num$i1;
       break;
      }
     }
     break L7;
    }
   } while(0);
   $24 = +HEAPF64[$$in>>3];
   $25 = (($op) + -6)|0;
   $26 = +HEAPF64[$$0$i$ph>>3];
   $27 = (+_luaO_arith($25,$26,$24));
   HEAPF64[$ra>>3] = $27;
   $28 = ((($ra)) + 8|0);
   HEAP32[$28>>2] = 3;
   STACKTOP = sp;return;
  }
 } while(0);
 $29 = (_luaT_gettmbyobj($L,$rb,$op)|0);
 $30 = ((($29)) + 8|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = ($31|0)==(0);
 if ($32) {
  $33 = (_luaT_gettmbyobj($L,$rc,$op)|0);
  $$phi$trans$insert$i = ((($33)) + 8|0);
  $$pre$i = HEAP32[$$phi$trans$insert$i>>2]|0;
  $34 = ($$pre$i|0)==(0);
  if ($34) {
   _luaG_aritherror($L,$rb,$rc);
   // unreachable;
  } else {
   $tm$01$i = $33;
  }
 } else {
  $tm$01$i = $29;
 }
 $35 = ((($L)) + 28|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = $ra;
 $38 = $36;
 $39 = (($37) - ($38))|0;
 $40 = ((($L)) + 8|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = ((($41)) + 16|0);
 HEAP32[$40>>2] = $42;
 $43 = $tm$01$i;
 $44 = $43;
 $45 = HEAP32[$44>>2]|0;
 $46 = (($43) + 4)|0;
 $47 = $46;
 $48 = HEAP32[$47>>2]|0;
 $49 = $41;
 $50 = $49;
 HEAP32[$50>>2] = $45;
 $51 = (($49) + 4)|0;
 $52 = $51;
 HEAP32[$52>>2] = $48;
 $53 = ((($tm$01$i)) + 8|0);
 $54 = HEAP32[$53>>2]|0;
 $55 = ((($41)) + 8|0);
 HEAP32[$55>>2] = $54;
 $56 = HEAP32[$40>>2]|0;
 $57 = ((($56)) + 16|0);
 HEAP32[$40>>2] = $57;
 $58 = $rb;
 $59 = $58;
 $60 = HEAP32[$59>>2]|0;
 $61 = (($58) + 4)|0;
 $62 = $61;
 $63 = HEAP32[$62>>2]|0;
 $64 = $56;
 $65 = $64;
 HEAP32[$65>>2] = $60;
 $66 = (($64) + 4)|0;
 $67 = $66;
 HEAP32[$67>>2] = $63;
 $68 = HEAP32[$0>>2]|0;
 $69 = ((($56)) + 8|0);
 HEAP32[$69>>2] = $68;
 $70 = HEAP32[$40>>2]|0;
 $71 = ((($70)) + 16|0);
 HEAP32[$40>>2] = $71;
 $72 = $rc;
 $73 = $72;
 $74 = HEAP32[$73>>2]|0;
 $75 = (($72) + 4)|0;
 $76 = $75;
 $77 = HEAP32[$76>>2]|0;
 $78 = $70;
 $79 = $78;
 HEAP32[$79>>2] = $74;
 $80 = (($78) + 4)|0;
 $81 = $80;
 HEAP32[$81>>2] = $77;
 $82 = ((($rc)) + 8|0);
 $83 = HEAP32[$82>>2]|0;
 $84 = ((($70)) + 8|0);
 HEAP32[$84>>2] = $83;
 $85 = HEAP32[$40>>2]|0;
 $86 = ((($85)) + -48|0);
 $87 = ((($L)) + 16|0);
 $88 = HEAP32[$87>>2]|0;
 $89 = ((($88)) + 18|0);
 $90 = HEAP8[$89>>0]|0;
 $91 = $90&255;
 $92 = $91 & 1;
 _luaD_call($L,$86,1,$92);
 $93 = HEAP32[$35>>2]|0;
 $94 = (($93) + ($39)|0);
 $95 = HEAP32[$40>>2]|0;
 $96 = ((($95)) + -16|0);
 HEAP32[$40>>2] = $96;
 $97 = $96;
 $98 = $97;
 $99 = HEAP32[$98>>2]|0;
 $100 = (($97) + 4)|0;
 $101 = $100;
 $102 = HEAP32[$101>>2]|0;
 $103 = $94;
 $104 = $103;
 HEAP32[$104>>2] = $99;
 $105 = (($103) + 4)|0;
 $106 = $105;
 HEAP32[$106>>2] = $102;
 $107 = ((($95)) + -8|0);
 $108 = HEAP32[$107>>2]|0;
 $$sum$i = (($39) + 8)|0;
 $109 = (($93) + ($$sum$i)|0);
 HEAP32[$109>>2] = $108;
 STACKTOP = sp;return;
}
function _luaV_finishOp($L) {
 $L = $L|0;
 var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $res$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($L)) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 24|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($1)) + 28|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($5)) + -4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $7 & 63;
 switch ($8|0) {
 case 12: case 7: case 6: case 21: case 19: case 18: case 17: case 16: case 15: case 14: case 13:  {
  $9 = ((($L)) + 8|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ((($10)) + -16|0);
  HEAP32[$9>>2] = $11;
  $12 = $7 >>> 6;
  $13 = $12 & 255;
  $14 = (($3) + ($13<<4)|0);
  $15 = $11;
  $16 = $15;
  $17 = HEAP32[$16>>2]|0;
  $18 = (($15) + 4)|0;
  $19 = $18;
  $20 = HEAP32[$19>>2]|0;
  $21 = $14;
  $22 = $21;
  HEAP32[$22>>2] = $17;
  $23 = (($21) + 4)|0;
  $24 = $23;
  HEAP32[$24>>2] = $20;
  $25 = ((($10)) + -8|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = (((($3) + ($13<<4)|0)) + 8|0);
  HEAP32[$27>>2] = $26;
  return;
  break;
 }
 case 24: case 25: case 26:  {
  $28 = ((($L)) + 8|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = ((($29)) + -8|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = ($31|0)==(0);
  if ($32) {
   $38 = 1;
  } else {
   $33 = ($31|0)==(1);
   if ($33) {
    $34 = ((($29)) + -16|0);
    $35 = HEAP32[$34>>2]|0;
    $36 = ($35|0)==(0);
    $38 = $36;
   } else {
    $38 = 0;
   }
  }
  $37 = $38&1;
  $39 = $37 ^ 1;
  $40 = ((($29)) + -16|0);
  HEAP32[$28>>2] = $40;
  $41 = ($8|0)==(26);
  if ($41) {
   $42 = $7 >>> 23;
   $43 = (($3) + ($42<<4)|0);
   $44 = (_luaT_gettmbyobj($L,$43,14)|0);
   $45 = ((($44)) + 8|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = ($46|0)==(0);
   $$ = $47 ? $37 : $39;
   $res$0 = $$;
  } else {
   $res$0 = $39;
  }
  $48 = $7 >>> 6;
  $49 = $48 & 255;
  $50 = ($res$0|0)==($49|0);
  if ($50) {
   return;
  }
  $51 = HEAP32[$4>>2]|0;
  $52 = ((($51)) + 4|0);
  HEAP32[$4>>2] = $52;
  return;
  break;
 }
 case 22:  {
  $53 = ((($L)) + 8|0);
  $54 = HEAP32[$53>>2]|0;
  $55 = ((($54)) + -16|0);
  $56 = $7 >>> 23;
  $57 = ((($54)) + -32|0);
  $58 = (($3) + ($56<<4)|0);
  $59 = $57;
  $60 = $58;
  $61 = (($59) - ($60))|0;
  $62 = ((($54)) + -48|0);
  $63 = $55;
  $64 = $63;
  $65 = HEAP32[$64>>2]|0;
  $66 = (($63) + 4)|0;
  $67 = $66;
  $68 = HEAP32[$67>>2]|0;
  $69 = $62;
  $70 = $69;
  HEAP32[$70>>2] = $65;
  $71 = (($69) + 4)|0;
  $72 = $71;
  HEAP32[$72>>2] = $68;
  $73 = ((($54)) + -8|0);
  $74 = HEAP32[$73>>2]|0;
  $75 = ((($54)) + -40|0);
  HEAP32[$75>>2] = $74;
  $76 = ($61|0)>(16);
  if ($76) {
   $77 = $61 >> 4;
   HEAP32[$53>>2] = $57;
   _luaV_concat($L,$77);
  }
  $78 = HEAP32[$53>>2]|0;
  $79 = ((($78)) + -16|0);
  $80 = HEAP32[$2>>2]|0;
  $81 = $7 >>> 6;
  $82 = $81 & 255;
  $83 = (($80) + ($82<<4)|0);
  $84 = $79;
  $85 = $84;
  $86 = HEAP32[$85>>2]|0;
  $87 = (($84) + 4)|0;
  $88 = $87;
  $89 = HEAP32[$88>>2]|0;
  $90 = $83;
  $91 = $90;
  HEAP32[$91>>2] = $86;
  $92 = (($90) + 4)|0;
  $93 = $92;
  HEAP32[$93>>2] = $89;
  $94 = ((($78)) + -8|0);
  $95 = HEAP32[$94>>2]|0;
  $96 = (((($80) + ($82<<4)|0)) + 8|0);
  HEAP32[$96>>2] = $95;
  $97 = ((($1)) + 4|0);
  $98 = HEAP32[$97>>2]|0;
  HEAP32[$53>>2] = $98;
  return;
  break;
 }
 case 34:  {
  $99 = ((($1)) + 4|0);
  $100 = HEAP32[$99>>2]|0;
  $101 = ((($L)) + 8|0);
  HEAP32[$101>>2] = $100;
  return;
  break;
 }
 case 29:  {
  $102 = $7 & 8372224;
  $103 = ($102|0)==(0);
  if ($103) {
   return;
  }
  $104 = ((($1)) + 4|0);
  $105 = HEAP32[$104>>2]|0;
  $106 = ((($L)) + 8|0);
  HEAP32[$106>>2] = $105;
  return;
  break;
 }
 default: {
  return;
 }
 }
}
function _luaV_execute($L) {
 $L = $L|0;
 var $$lcssa216 = 0, $$lcssa230 = 0, $$lcssa236 = 0, $$not = 0, $$not161 = 0, $$phi$trans$insert = 0, $$phi$trans$insert123 = 0, $$pre = 0, $$pre$i = 0, $$pre$phi$iZ2D = 0, $$pre$phi2$iZ2D = 0, $$pre124 = 0, $$pre125 = 0, $$pre126 = 0, $$pre127 = 0, $$pre128 = 0, $$pre129 = 0, $$pre131 = 0, $$sum = 0, $$sum10 = 0;
 var $$sum11 = 0, $$sum12 = 0, $$sum13 = 0, $$sum14 = 0, $$sum15 = 0, $$sum16 = 0, $$sum17 = 0, $$sum18 = 0, $$sum19 = 0, $$sum2 = 0, $$sum20 = 0, $$sum21 = 0, $$sum22 = 0, $$sum23 = 0, $$sum24 = 0, $$sum26 = 0, $$sum28 = 0, $$sum29 = 0, $$sum3 = 0, $$sum30 = 0;
 var $$sum31 = 0, $$sum32 = 0, $$sum33 = 0, $$sum4 = 0, $$sum5 = 0, $$sum6 = 0, $$sum7 = 0, $$sum8 = 0, $$sum9 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0;
 var $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0;
 var $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0;
 var $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0;
 var $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0;
 var $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0;
 var $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0;
 var $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0;
 var $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0;
 var $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0;
 var $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0;
 var $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0;
 var $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0;
 var $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0;
 var $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0.0, $322 = 0.0, $323 = 0.0;
 var $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0;
 var $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0.0, $348 = 0.0, $349 = 0.0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0;
 var $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0.0, $374 = 0.0, $375 = 0.0, $376 = 0, $377 = 0, $378 = 0;
 var $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0;
 var $397 = 0, $398 = 0, $399 = 0.0, $4 = 0, $40 = 0, $400 = 0.0, $401 = 0.0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0;
 var $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0.0, $426 = 0.0, $427 = 0.0, $428 = 0.0, $429 = 0.0, $43 = 0, $430 = 0.0, $431 = 0;
 var $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0;
 var $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0.0, $455 = 0.0, $456 = 0.0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0.0, $465 = 0.0, $466 = 0, $467 = 0, $468 = 0;
 var $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0;
 var $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0;
 var $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0;
 var $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0;
 var $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0;
 var $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0;
 var $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0;
 var $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0;
 var $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0;
 var $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0;
 var $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0;
 var $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0;
 var $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0;
 var $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0;
 var $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0;
 var $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0;
 var $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0;
 var $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0.0, $781 = 0.0, $782 = 0.0, $783 = 0, $784 = 0.0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0;
 var $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0.0, $809 = 0, $81 = 0;
 var $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0.0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0;
 var $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0.0, $833 = 0.0, $834 = 0.0, $835 = 0.0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0;
 var $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0;
 var $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0;
 var $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0;
 var $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0;
 var $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0;
 var $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0;
 var $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0;
 var $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0;
 var $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $aux$093 = 0, $b$0 = 0, $b85$0 = 0, $base$0 = 0, $base$1 = 0, $base$1$lcssa = 0, $base$2 = 0, $brmerge = 0, $c83$0 = 0, $ci$0 = 0, $exitcond = 0;
 var $exitcond$i = 0, $i$0 = 0, $i$01$i = 0, $i$01$i42 = 0, $j$088 = 0, $last$090 = 0, $n$0 = 0, $n$189 = 0, $num$i = 0, $num$i34 = 0, $num$i37 = 0, $or$cond = 0, $ra$0 = 0, $ra$1 = 0, $storemerge = 0, $storemerge25 = 0, $storemerge27 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer3 = sp + 40|0;
 $vararg_buffer1 = sp + 32|0;
 $vararg_buffer = sp + 24|0;
 $num$i37 = sp + 16|0;
 $num$i34 = sp + 8|0;
 $num$i = sp;
 $0 = ((($L)) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($L)) + 40|0);
 $3 = ((($L)) + 12|0);
 $4 = ((($L)) + 8|0);
 $5 = ((($L)) + 24|0);
 $6 = ((($L)) + 48|0);
 $7 = ((($L)) + 20|0);
 $8 = ((($L)) + 6|0);
 $9 = ((($L)) + 44|0);
 $ci$0 = $1;
 L1: while(1) {
  $10 = HEAP32[$ci$0>>2]|0;
  $11 = HEAP32[$10>>2]|0;
  $12 = ((($11)) + 12|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ((($13)) + 8|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = ((($ci$0)) + 24|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = ((($ci$0)) + 28|0);
  $19 = ((($ci$0)) + 4|0);
  $base$0 = $17;
  L3: while(1) {
   $20 = HEAP32[$18>>2]|0;
   $21 = ((($20)) + 4|0);
   HEAP32[$18>>2] = $21;
   $22 = HEAP32[$20>>2]|0;
   $23 = HEAP8[$2>>0]|0;
   $24 = $23 & 12;
   $25 = ($24<<24>>24)==(0);
   if ($25) {
    $base$1 = $base$0;
   } else {
    $26 = HEAP32[$6>>2]|0;
    $27 = (($26) + -1)|0;
    HEAP32[$6>>2] = $27;
    $28 = ($27|0)==(0);
    $$not = $28 ^ 1;
    $29 = $23 & 4;
    $30 = ($29<<24>>24)==(0);
    $or$cond = $30 & $$not;
    if ($or$cond) {
     $base$1 = $base$0;
    } else {
     $31 = HEAP32[$0>>2]|0;
     $32 = $23&255;
     $33 = $32 & 8;
     $34 = ($33|0)==(0);
     $$not161 = $28 ^ 1;
     $brmerge = $34 | $$not161;
     if ($brmerge) {
      $1059 = 0;
     } else {
      $35 = HEAP32[$9>>2]|0;
      HEAP32[$6>>2] = $35;
      $1059 = 1;
     }
     $36 = ((($31)) + 18|0);
     $37 = HEAP8[$36>>0]|0;
     $38 = $37&255;
     $39 = $38 & 128;
     $40 = ($39|0)==(0);
     if ($40) {
      if ($1059) {
       _luaD_hook($L,3,-1);
      }
      $43 = $32 & 4;
      $44 = ($43|0)==(0);
      do {
       if ($44) {
        $$pre$i = ((($31)) + 28|0);
        $$pre$phi$iZ2D = $$pre$i;$$pre$phi2$iZ2D = $$pre$i;
       } else {
        $45 = HEAP32[$31>>2]|0;
        $46 = HEAP32[$45>>2]|0;
        $47 = ((($46)) + 12|0);
        $48 = HEAP32[$47>>2]|0;
        $49 = ((($31)) + 28|0);
        $50 = HEAP32[$49>>2]|0;
        $51 = ((($48)) + 12|0);
        $52 = HEAP32[$51>>2]|0;
        $53 = $50;
        $54 = $52;
        $55 = (($53) - ($54))|0;
        $56 = $55 >> 2;
        $57 = (($56) + -1)|0;
        $58 = ((($48)) + 20|0);
        $59 = HEAP32[$58>>2]|0;
        $60 = ($59|0)==(0|0);
        if ($60) {
         $73 = 0;
        } else {
         $61 = (($59) + ($57<<2)|0);
         $62 = HEAP32[$61>>2]|0;
         $73 = $62;
        }
        $63 = ($57|0)==(0);
        if (!($63)) {
         $64 = HEAP32[$7>>2]|0;
         $65 = ($50>>>0)>($64>>>0);
         if ($65) {
          if ($60) {
           $74 = 0;
          } else {
           $66 = $64;
           $67 = (($66) - ($54))|0;
           $68 = $67 >> 2;
           $69 = (($68) + -1)|0;
           $70 = (($59) + ($69<<2)|0);
           $71 = HEAP32[$70>>2]|0;
           $74 = $71;
          }
          $72 = ($73|0)==($74|0);
          if ($72) {
           $$pre$phi$iZ2D = $49;$$pre$phi2$iZ2D = $49;
           break;
          }
         }
        }
        _luaD_hook($L,2,$73);
        $$pre$phi$iZ2D = $49;$$pre$phi2$iZ2D = $49;
       }
      } while(0);
      $75 = HEAP32[$$pre$phi$iZ2D>>2]|0;
      HEAP32[$7>>2] = $75;
      $76 = HEAP8[$8>>0]|0;
      $77 = ($76<<24>>24)==(1);
      if ($77) {
       label = 22;
       break L1;
      }
     } else {
      $41 = $38 & 127;
      $42 = $41&255;
      HEAP8[$36>>0] = $42;
     }
     $86 = HEAP32[$16>>2]|0;
     $base$1 = $86;
    }
   }
   $87 = $22 >>> 6;
   $88 = $87 & 255;
   $89 = (($base$1) + ($88<<4)|0);
   $90 = $22 & 63;
   do {
    switch ($90|0) {
    case 31:  {
     $$lcssa216 = $22;$$lcssa230 = $88;$$lcssa236 = $89;$base$1$lcssa = $base$1;
     label = 146;
     break L3;
     break;
    }
    case 0:  {
     $91 = $22 >>> 23;
     $92 = (($base$1) + ($91<<4)|0);
     $93 = $92;
     $94 = $93;
     $95 = HEAP32[$94>>2]|0;
     $96 = (($93) + 4)|0;
     $97 = $96;
     $98 = HEAP32[$97>>2]|0;
     $99 = $89;
     $100 = $99;
     HEAP32[$100>>2] = $95;
     $101 = (($99) + 4)|0;
     $102 = $101;
     HEAP32[$102>>2] = $98;
     $103 = (((($base$1) + ($91<<4)|0)) + 8|0);
     $104 = HEAP32[$103>>2]|0;
     $105 = (((($base$1) + ($88<<4)|0)) + 8|0);
     HEAP32[$105>>2] = $104;
     $base$0 = $base$1;
     continue L3;
     break;
    }
    case 1:  {
     $106 = $22 >>> 14;
     $107 = (($15) + ($106<<4)|0);
     $108 = $107;
     $109 = $108;
     $110 = HEAP32[$109>>2]|0;
     $111 = (($108) + 4)|0;
     $112 = $111;
     $113 = HEAP32[$112>>2]|0;
     $114 = $89;
     $115 = $114;
     HEAP32[$115>>2] = $110;
     $116 = (($114) + 4)|0;
     $117 = $116;
     HEAP32[$117>>2] = $113;
     $118 = (((($15) + ($106<<4)|0)) + 8|0);
     $119 = HEAP32[$118>>2]|0;
     $120 = (((($base$1) + ($88<<4)|0)) + 8|0);
     HEAP32[$120>>2] = $119;
     $base$0 = $base$1;
     continue L3;
     break;
    }
    case 2:  {
     $121 = HEAP32[$18>>2]|0;
     $122 = ((($121)) + 4|0);
     HEAP32[$18>>2] = $122;
     $123 = HEAP32[$121>>2]|0;
     $124 = $123 >>> 6;
     $125 = (($15) + ($124<<4)|0);
     $126 = $125;
     $127 = $126;
     $128 = HEAP32[$127>>2]|0;
     $129 = (($126) + 4)|0;
     $130 = $129;
     $131 = HEAP32[$130>>2]|0;
     $132 = $89;
     $133 = $132;
     HEAP32[$133>>2] = $128;
     $134 = (($132) + 4)|0;
     $135 = $134;
     HEAP32[$135>>2] = $131;
     $136 = (((($15) + ($124<<4)|0)) + 8|0);
     $137 = HEAP32[$136>>2]|0;
     $138 = (((($base$1) + ($88<<4)|0)) + 8|0);
     HEAP32[$138>>2] = $137;
     $base$0 = $base$1;
     continue L3;
     break;
    }
    case 3:  {
     $139 = $22 >>> 23;
     HEAP32[$89>>2] = $139;
     $140 = (((($base$1) + ($88<<4)|0)) + 8|0);
     HEAP32[$140>>2] = 1;
     $141 = $22 & 8372224;
     $142 = ($141|0)==(0);
     if ($142) {
      $base$0 = $base$1;
      continue L3;
     }
     $143 = HEAP32[$18>>2]|0;
     $144 = ((($143)) + 4|0);
     HEAP32[$18>>2] = $144;
     $base$0 = $base$1;
     continue L3;
     break;
    }
    case 4:  {
     $145 = $22 >>> 23;
     $b$0 = $145;$ra$0 = $89;
     while(1) {
      $146 = ((($ra$0)) + 16|0);
      $147 = ((($ra$0)) + 8|0);
      HEAP32[$147>>2] = 0;
      $148 = (($b$0) + -1)|0;
      $149 = ($b$0|0)==(0);
      if ($149) {
       $base$0 = $base$1;
       continue L3;
      } else {
       $b$0 = $148;$ra$0 = $146;
      }
     }
     break;
    }
    case 5:  {
     $150 = $22 >>> 23;
     $151 = (((($11)) + 16|0) + ($150<<2)|0);
     $152 = HEAP32[$151>>2]|0;
     $153 = ((($152)) + 8|0);
     $154 = HEAP32[$153>>2]|0;
     $155 = $154;
     $156 = $155;
     $157 = HEAP32[$156>>2]|0;
     $158 = (($155) + 4)|0;
     $159 = $158;
     $160 = HEAP32[$159>>2]|0;
     $161 = $89;
     $162 = $161;
     HEAP32[$162>>2] = $157;
     $163 = (($161) + 4)|0;
     $164 = $163;
     HEAP32[$164>>2] = $160;
     $165 = ((($154)) + 8|0);
     $166 = HEAP32[$165>>2]|0;
     $167 = (((($base$1) + ($88<<4)|0)) + 8|0);
     HEAP32[$167>>2] = $166;
     $base$0 = $base$1;
     continue L3;
     break;
    }
    case 6:  {
     $168 = $22 >>> 23;
     $169 = (((($11)) + 16|0) + ($168<<2)|0);
     $170 = HEAP32[$169>>2]|0;
     $171 = ((($170)) + 8|0);
     $172 = HEAP32[$171>>2]|0;
     $173 = $22 >>> 14;
     $174 = $173 & 256;
     $175 = ($174|0)==(0);
     $176 = $173 & 255;
     $177 = (($15) + ($176<<4)|0);
     $178 = $173 & 511;
     $179 = (($base$1) + ($178<<4)|0);
     $180 = $175 ? $179 : $177;
     _luaV_gettable($L,$172,$180,$89);
     $181 = HEAP32[$16>>2]|0;
     $base$0 = $181;
     continue L3;
     break;
    }
    case 7:  {
     $182 = $22 >>> 23;
     $183 = (($base$1) + ($182<<4)|0);
     $184 = $22 >>> 14;
     $185 = $184 & 256;
     $186 = ($185|0)==(0);
     $187 = $184 & 255;
     $188 = (($15) + ($187<<4)|0);
     $189 = $184 & 511;
     $190 = (($base$1) + ($189<<4)|0);
     $191 = $186 ? $190 : $188;
     _luaV_gettable($L,$183,$191,$89);
     $192 = HEAP32[$16>>2]|0;
     $base$0 = $192;
     continue L3;
     break;
    }
    case 8:  {
     $193 = (((($11)) + 16|0) + ($88<<2)|0);
     $194 = HEAP32[$193>>2]|0;
     $195 = ((($194)) + 8|0);
     $196 = HEAP32[$195>>2]|0;
     $197 = $22 >>> 23;
     $198 = $197 & 256;
     $199 = ($198|0)==(0);
     $200 = $197 & 255;
     $201 = (($15) + ($200<<4)|0);
     $202 = (($base$1) + ($197<<4)|0);
     $203 = $199 ? $202 : $201;
     $204 = $22 >>> 14;
     $205 = $204 & 256;
     $206 = ($205|0)==(0);
     $207 = $204 & 255;
     $208 = (($15) + ($207<<4)|0);
     $209 = $204 & 511;
     $210 = (($base$1) + ($209<<4)|0);
     $211 = $206 ? $210 : $208;
     _luaV_settable($L,$196,$203,$211);
     $212 = HEAP32[$16>>2]|0;
     $base$0 = $212;
     continue L3;
     break;
    }
    case 9:  {
     $213 = $22 >>> 23;
     $214 = (((($11)) + 16|0) + ($213<<2)|0);
     $215 = HEAP32[$214>>2]|0;
     $216 = ((($215)) + 8|0);
     $217 = HEAP32[$216>>2]|0;
     $218 = $89;
     $219 = $218;
     $220 = HEAP32[$219>>2]|0;
     $221 = (($218) + 4)|0;
     $222 = $221;
     $223 = HEAP32[$222>>2]|0;
     $224 = $217;
     $225 = $224;
     HEAP32[$225>>2] = $220;
     $226 = (($224) + 4)|0;
     $227 = $226;
     HEAP32[$227>>2] = $223;
     $228 = (((($base$1) + ($88<<4)|0)) + 8|0);
     $229 = HEAP32[$228>>2]|0;
     $230 = ((($217)) + 8|0);
     HEAP32[$230>>2] = $229;
     $231 = HEAP32[$228>>2]|0;
     $232 = $231 & 64;
     $233 = ($232|0)==(0);
     if ($233) {
      $base$0 = $base$1;
      continue L3;
     }
     $234 = HEAP32[$89>>2]|0;
     $235 = ((($234)) + 5|0);
     $236 = HEAP8[$235>>0]|0;
     $237 = $236 & 3;
     $238 = ($237<<24>>24)==(0);
     if ($238) {
      $base$0 = $base$1;
      continue L3;
     }
     $239 = ((($215)) + 5|0);
     $240 = HEAP8[$239>>0]|0;
     $241 = $240 & 4;
     $242 = ($241<<24>>24)==(0);
     if ($242) {
      $base$0 = $base$1;
      continue L3;
     }
     _luaC_barrier_($L,$215,$234);
     $base$0 = $base$1;
     continue L3;
     break;
    }
    case 10:  {
     $243 = $22 >>> 23;
     $244 = $243 & 256;
     $245 = ($244|0)==(0);
     $246 = $243 & 255;
     $247 = (($15) + ($246<<4)|0);
     $248 = (($base$1) + ($243<<4)|0);
     $249 = $245 ? $248 : $247;
     $250 = $22 >>> 14;
     $251 = $250 & 256;
     $252 = ($251|0)==(0);
     $253 = $250 & 255;
     $254 = (($15) + ($253<<4)|0);
     $255 = $250 & 511;
     $256 = (($base$1) + ($255<<4)|0);
     $257 = $252 ? $256 : $254;
     _luaV_settable($L,$89,$249,$257);
     $258 = HEAP32[$16>>2]|0;
     $base$0 = $258;
     continue L3;
     break;
    }
    case 11:  {
     $259 = $22 >>> 23;
     $260 = $22 >>> 14;
     $261 = $260 & 511;
     $262 = (_luaH_new($L)|0);
     HEAP32[$89>>2] = $262;
     $263 = (((($base$1) + ($88<<4)|0)) + 8|0);
     HEAP32[$263>>2] = 69;
     $264 = $261 | $259;
     $265 = ($264|0)==(0);
     if (!($265)) {
      $266 = (_luaO_fb2int($259)|0);
      $267 = (_luaO_fb2int($261)|0);
      _luaH_resize($L,$262,$266,$267);
     }
     $268 = HEAP32[$3>>2]|0;
     $269 = ((($268)) + 12|0);
     $270 = HEAP32[$269>>2]|0;
     $271 = ($270|0)>(0);
     if ($271) {
      $$sum33 = (($88) + 1)|0;
      $272 = (($base$1) + ($$sum33<<4)|0);
      HEAP32[$4>>2] = $272;
      _luaC_step($L);
      $273 = HEAP32[$19>>2]|0;
      HEAP32[$4>>2] = $273;
     }
     $274 = HEAP32[$16>>2]|0;
     $base$0 = $274;
     continue L3;
     break;
    }
    case 12:  {
     $275 = $22 >>> 23;
     $276 = (($base$1) + ($275<<4)|0);
     $$sum32 = (($88) + 1)|0;
     $277 = (($base$1) + ($$sum32<<4)|0);
     $278 = $276;
     $279 = $278;
     $280 = HEAP32[$279>>2]|0;
     $281 = (($278) + 4)|0;
     $282 = $281;
     $283 = HEAP32[$282>>2]|0;
     $284 = $277;
     $285 = $284;
     HEAP32[$285>>2] = $280;
     $286 = (($284) + 4)|0;
     $287 = $286;
     HEAP32[$287>>2] = $283;
     $288 = (((($base$1) + ($275<<4)|0)) + 8|0);
     $289 = HEAP32[$288>>2]|0;
     $290 = (((($base$1) + ($$sum32<<4)|0)) + 8|0);
     HEAP32[$290>>2] = $289;
     $291 = $22 >>> 14;
     $292 = $291 & 256;
     $293 = ($292|0)==(0);
     $294 = $291 & 255;
     $295 = (($15) + ($294<<4)|0);
     $296 = $291 & 511;
     $297 = (($base$1) + ($296<<4)|0);
     $298 = $293 ? $297 : $295;
     _luaV_gettable($L,$276,$298,$89);
     $299 = HEAP32[$16>>2]|0;
     $base$0 = $299;
     continue L3;
     break;
    }
    case 13:  {
     $300 = $22 >>> 23;
     $301 = $300 & 256;
     $302 = ($301|0)==(0);
     $303 = $300 & 255;
     $304 = (($15) + ($303<<4)|0);
     $305 = (($base$1) + ($300<<4)|0);
     $306 = $302 ? $305 : $304;
     $307 = $22 >>> 14;
     $308 = $307 & 256;
     $309 = ($308|0)==(0);
     $310 = $307 & 255;
     $311 = (($15) + ($310<<4)|0);
     $312 = $307 & 511;
     $313 = (($base$1) + ($312<<4)|0);
     $314 = $309 ? $313 : $311;
     $315 = ((($306)) + 8|0);
     $316 = HEAP32[$315>>2]|0;
     $317 = ($316|0)==(3);
     if ($317) {
      $318 = ((($314)) + 8|0);
      $319 = HEAP32[$318>>2]|0;
      $320 = ($319|0)==(3);
      if ($320) {
       $321 = +HEAPF64[$306>>3];
       $322 = +HEAPF64[$314>>3];
       $323 = $321 + $322;
       HEAPF64[$89>>3] = $323;
       $324 = (((($base$1) + ($88<<4)|0)) + 8|0);
       HEAP32[$324>>2] = 3;
       $base$0 = $base$1;
       continue L3;
      }
     }
     _luaV_arith($L,$89,$306,$314,6);
     $325 = HEAP32[$16>>2]|0;
     $base$0 = $325;
     continue L3;
     break;
    }
    case 14:  {
     $326 = $22 >>> 23;
     $327 = $326 & 256;
     $328 = ($327|0)==(0);
     $329 = $326 & 255;
     $330 = (($15) + ($329<<4)|0);
     $331 = (($base$1) + ($326<<4)|0);
     $332 = $328 ? $331 : $330;
     $333 = $22 >>> 14;
     $334 = $333 & 256;
     $335 = ($334|0)==(0);
     $336 = $333 & 255;
     $337 = (($15) + ($336<<4)|0);
     $338 = $333 & 511;
     $339 = (($base$1) + ($338<<4)|0);
     $340 = $335 ? $339 : $337;
     $341 = ((($332)) + 8|0);
     $342 = HEAP32[$341>>2]|0;
     $343 = ($342|0)==(3);
     if ($343) {
      $344 = ((($340)) + 8|0);
      $345 = HEAP32[$344>>2]|0;
      $346 = ($345|0)==(3);
      if ($346) {
       $347 = +HEAPF64[$332>>3];
       $348 = +HEAPF64[$340>>3];
       $349 = $347 - $348;
       HEAPF64[$89>>3] = $349;
       $350 = (((($base$1) + ($88<<4)|0)) + 8|0);
       HEAP32[$350>>2] = 3;
       $base$0 = $base$1;
       continue L3;
      }
     }
     _luaV_arith($L,$89,$332,$340,7);
     $351 = HEAP32[$16>>2]|0;
     $base$0 = $351;
     continue L3;
     break;
    }
    case 15:  {
     $352 = $22 >>> 23;
     $353 = $352 & 256;
     $354 = ($353|0)==(0);
     $355 = $352 & 255;
     $356 = (($15) + ($355<<4)|0);
     $357 = (($base$1) + ($352<<4)|0);
     $358 = $354 ? $357 : $356;
     $359 = $22 >>> 14;
     $360 = $359 & 256;
     $361 = ($360|0)==(0);
     $362 = $359 & 255;
     $363 = (($15) + ($362<<4)|0);
     $364 = $359 & 511;
     $365 = (($base$1) + ($364<<4)|0);
     $366 = $361 ? $365 : $363;
     $367 = ((($358)) + 8|0);
     $368 = HEAP32[$367>>2]|0;
     $369 = ($368|0)==(3);
     if ($369) {
      $370 = ((($366)) + 8|0);
      $371 = HEAP32[$370>>2]|0;
      $372 = ($371|0)==(3);
      if ($372) {
       $373 = +HEAPF64[$358>>3];
       $374 = +HEAPF64[$366>>3];
       $375 = $373 * $374;
       HEAPF64[$89>>3] = $375;
       $376 = (((($base$1) + ($88<<4)|0)) + 8|0);
       HEAP32[$376>>2] = 3;
       $base$0 = $base$1;
       continue L3;
      }
     }
     _luaV_arith($L,$89,$358,$366,8);
     $377 = HEAP32[$16>>2]|0;
     $base$0 = $377;
     continue L3;
     break;
    }
    case 16:  {
     $378 = $22 >>> 23;
     $379 = $378 & 256;
     $380 = ($379|0)==(0);
     $381 = $378 & 255;
     $382 = (($15) + ($381<<4)|0);
     $383 = (($base$1) + ($378<<4)|0);
     $384 = $380 ? $383 : $382;
     $385 = $22 >>> 14;
     $386 = $385 & 256;
     $387 = ($386|0)==(0);
     $388 = $385 & 255;
     $389 = (($15) + ($388<<4)|0);
     $390 = $385 & 511;
     $391 = (($base$1) + ($390<<4)|0);
     $392 = $387 ? $391 : $389;
     $393 = ((($384)) + 8|0);
     $394 = HEAP32[$393>>2]|0;
     $395 = ($394|0)==(3);
     if ($395) {
      $396 = ((($392)) + 8|0);
      $397 = HEAP32[$396>>2]|0;
      $398 = ($397|0)==(3);
      if ($398) {
       $399 = +HEAPF64[$384>>3];
       $400 = +HEAPF64[$392>>3];
       $401 = $399 / $400;
       HEAPF64[$89>>3] = $401;
       $402 = (((($base$1) + ($88<<4)|0)) + 8|0);
       HEAP32[$402>>2] = 3;
       $base$0 = $base$1;
       continue L3;
      }
     }
     _luaV_arith($L,$89,$384,$392,9);
     $403 = HEAP32[$16>>2]|0;
     $base$0 = $403;
     continue L3;
     break;
    }
    case 17:  {
     $404 = $22 >>> 23;
     $405 = $404 & 256;
     $406 = ($405|0)==(0);
     $407 = $404 & 255;
     $408 = (($15) + ($407<<4)|0);
     $409 = (($base$1) + ($404<<4)|0);
     $410 = $406 ? $409 : $408;
     $411 = $22 >>> 14;
     $412 = $411 & 256;
     $413 = ($412|0)==(0);
     $414 = $411 & 255;
     $415 = (($15) + ($414<<4)|0);
     $416 = $411 & 511;
     $417 = (($base$1) + ($416<<4)|0);
     $418 = $413 ? $417 : $415;
     $419 = ((($410)) + 8|0);
     $420 = HEAP32[$419>>2]|0;
     $421 = ($420|0)==(3);
     if ($421) {
      $422 = ((($418)) + 8|0);
      $423 = HEAP32[$422>>2]|0;
      $424 = ($423|0)==(3);
      if ($424) {
       $425 = +HEAPF64[$410>>3];
       $426 = +HEAPF64[$418>>3];
       $427 = $425 / $426;
       $428 = (+Math_floor((+$427)));
       $429 = $426 * $428;
       $430 = $425 - $429;
       HEAPF64[$89>>3] = $430;
       $431 = (((($base$1) + ($88<<4)|0)) + 8|0);
       HEAP32[$431>>2] = 3;
       $base$0 = $base$1;
       continue L3;
      }
     }
     _luaV_arith($L,$89,$410,$418,10);
     $432 = HEAP32[$16>>2]|0;
     $base$0 = $432;
     continue L3;
     break;
    }
    case 18:  {
     $433 = $22 >>> 23;
     $434 = $433 & 256;
     $435 = ($434|0)==(0);
     $436 = $433 & 255;
     $437 = (($15) + ($436<<4)|0);
     $438 = (($base$1) + ($433<<4)|0);
     $439 = $435 ? $438 : $437;
     $440 = $22 >>> 14;
     $441 = $440 & 256;
     $442 = ($441|0)==(0);
     $443 = $440 & 255;
     $444 = (($15) + ($443<<4)|0);
     $445 = $440 & 511;
     $446 = (($base$1) + ($445<<4)|0);
     $447 = $442 ? $446 : $444;
     $448 = ((($439)) + 8|0);
     $449 = HEAP32[$448>>2]|0;
     $450 = ($449|0)==(3);
     if ($450) {
      $451 = ((($447)) + 8|0);
      $452 = HEAP32[$451>>2]|0;
      $453 = ($452|0)==(3);
      if ($453) {
       $454 = +HEAPF64[$439>>3];
       $455 = +HEAPF64[$447>>3];
       $456 = (+Math_pow((+$454),(+$455)));
       HEAPF64[$89>>3] = $456;
       $457 = (((($base$1) + ($88<<4)|0)) + 8|0);
       HEAP32[$457>>2] = 3;
       $base$0 = $base$1;
       continue L3;
      }
     }
     _luaV_arith($L,$89,$439,$447,11);
     $458 = HEAP32[$16>>2]|0;
     $base$0 = $458;
     continue L3;
     break;
    }
    case 19:  {
     $459 = $22 >>> 23;
     $460 = (($base$1) + ($459<<4)|0);
     $461 = (((($base$1) + ($459<<4)|0)) + 8|0);
     $462 = HEAP32[$461>>2]|0;
     $463 = ($462|0)==(3);
     if ($463) {
      $464 = +HEAPF64[$460>>3];
      $465 = -$464;
      HEAPF64[$89>>3] = $465;
      $466 = (((($base$1) + ($88<<4)|0)) + 8|0);
      HEAP32[$466>>2] = 3;
      $base$0 = $base$1;
      continue L3;
     } else {
      _luaV_arith($L,$89,$460,$460,12);
      $467 = HEAP32[$16>>2]|0;
      $base$0 = $467;
      continue L3;
     }
     break;
    }
    case 20:  {
     $468 = $22 >>> 23;
     $469 = (((($base$1) + ($468<<4)|0)) + 8|0);
     $470 = HEAP32[$469>>2]|0;
     $471 = ($470|0)==(0);
     if ($471) {
      $477 = 1;
     } else {
      $472 = ($470|0)==(1);
      if ($472) {
       $473 = (($base$1) + ($468<<4)|0);
       $474 = HEAP32[$473>>2]|0;
       $475 = ($474|0)==(0);
       $477 = $475;
      } else {
       $477 = 0;
      }
     }
     $476 = $477&1;
     HEAP32[$89>>2] = $476;
     $478 = (((($base$1) + ($88<<4)|0)) + 8|0);
     HEAP32[$478>>2] = 1;
     $base$0 = $base$1;
     continue L3;
     break;
    }
    case 21:  {
     $479 = $22 >>> 23;
     $480 = (($base$1) + ($479<<4)|0);
     _luaV_objlen($L,$89,$480);
     $481 = HEAP32[$16>>2]|0;
     $base$0 = $481;
     continue L3;
     break;
    }
    case 22:  {
     $482 = $22 >>> 23;
     $483 = $22 >>> 14;
     $484 = $483 & 511;
     $$sum30 = (($484) + 1)|0;
     $485 = (($base$1) + ($$sum30<<4)|0);
     HEAP32[$4>>2] = $485;
     $486 = (1 - ($482))|0;
     $487 = (($486) + ($484))|0;
     _luaV_concat($L,$487);
     $488 = HEAP32[$16>>2]|0;
     $489 = (($488) + ($88<<4)|0);
     $490 = (($488) + ($482<<4)|0);
     $491 = $490;
     $492 = $491;
     $493 = HEAP32[$492>>2]|0;
     $494 = (($491) + 4)|0;
     $495 = $494;
     $496 = HEAP32[$495>>2]|0;
     $497 = $489;
     $498 = $497;
     HEAP32[$498>>2] = $493;
     $499 = (($497) + 4)|0;
     $500 = $499;
     HEAP32[$500>>2] = $496;
     $501 = (((($488) + ($482<<4)|0)) + 8|0);
     $502 = HEAP32[$501>>2]|0;
     $503 = (((($488) + ($88<<4)|0)) + 8|0);
     HEAP32[$503>>2] = $502;
     $504 = HEAP32[$3>>2]|0;
     $505 = ((($504)) + 12|0);
     $506 = HEAP32[$505>>2]|0;
     $507 = ($506|0)>(0);
     if ($507) {
      $508 = ($88>>>0)>=($482>>>0);
      $$sum31 = (($88) + 1)|0;
      $509 = (($488) + ($$sum31<<4)|0);
      $510 = $508 ? $509 : $490;
      HEAP32[$4>>2] = $510;
      _luaC_step($L);
      $511 = HEAP32[$19>>2]|0;
      HEAP32[$4>>2] = $511;
      $513 = $511;
     } else {
      $$pre131 = HEAP32[$19>>2]|0;
      $513 = $$pre131;
     }
     $512 = HEAP32[$16>>2]|0;
     HEAP32[$4>>2] = $513;
     $base$0 = $512;
     continue L3;
     break;
    }
    case 23:  {
     $514 = ($88|0)==(0);
     if (!($514)) {
      $515 = HEAP32[$16>>2]|0;
      $$sum29 = (($88) + -1)|0;
      $516 = (($515) + ($$sum29<<4)|0);
      _luaF_close($L,$516);
     }
     $517 = $22 >>> 14;
     $518 = (($517) + -131071)|0;
     $519 = HEAP32[$18>>2]|0;
     $520 = (($519) + ($518<<2)|0);
     HEAP32[$18>>2] = $520;
     $base$0 = $base$1;
     continue L3;
     break;
    }
    case 24:  {
     $521 = $22 >>> 23;
     $522 = $521 & 256;
     $523 = ($522|0)==(0);
     $524 = $521 & 255;
     $525 = (($15) + ($524<<4)|0);
     $526 = (($base$1) + ($521<<4)|0);
     $527 = $523 ? $526 : $525;
     $528 = $22 >>> 14;
     $529 = $528 & 256;
     $530 = ($529|0)==(0);
     $531 = $528 & 255;
     $532 = (($15) + ($531<<4)|0);
     $533 = $528 & 511;
     $534 = (($base$1) + ($533<<4)|0);
     $535 = $530 ? $534 : $532;
     $536 = ((($527)) + 8|0);
     $537 = HEAP32[$536>>2]|0;
     $538 = ((($535)) + 8|0);
     $539 = HEAP32[$538>>2]|0;
     $540 = ($537|0)==($539|0);
     if ($540) {
      $541 = (_luaV_equalobj_($L,$527,$535)|0);
      $542 = ($541|0)!=(0);
      $544 = $542;
     } else {
      $544 = 0;
     }
     $543 = $544&1;
     $545 = ($543|0)==($88|0);
     $546 = HEAP32[$18>>2]|0;
     if ($545) {
      $548 = HEAP32[$546>>2]|0;
      $549 = $548 >>> 6;
      $550 = $549 & 255;
      $551 = ($550|0)==(0);
      if ($551) {
       $557 = $546;
      } else {
       $552 = HEAP32[$16>>2]|0;
       $$sum28 = (($550) + -1)|0;
       $553 = (($552) + ($$sum28<<4)|0);
       _luaF_close($L,$553);
       $$pre129 = HEAP32[$18>>2]|0;
       $557 = $$pre129;
      }
      $554 = $548 >>> 14;
      $555 = (($554) + -131070)|0;
      $556 = (($557) + ($555<<2)|0);
      $storemerge27 = $556;
     } else {
      $547 = ((($546)) + 4|0);
      $storemerge27 = $547;
     }
     HEAP32[$18>>2] = $storemerge27;
     $558 = HEAP32[$16>>2]|0;
     $base$0 = $558;
     continue L3;
     break;
    }
    case 25:  {
     $559 = $22 >>> 23;
     $560 = $559 & 256;
     $561 = ($560|0)==(0);
     $562 = $559 & 255;
     $563 = (($15) + ($562<<4)|0);
     $564 = (($base$1) + ($559<<4)|0);
     $565 = $561 ? $564 : $563;
     $566 = $22 >>> 14;
     $567 = $566 & 256;
     $568 = ($567|0)==(0);
     $569 = $566 & 255;
     $570 = (($15) + ($569<<4)|0);
     $571 = $566 & 511;
     $572 = (($base$1) + ($571<<4)|0);
     $573 = $568 ? $572 : $570;
     $574 = (_luaV_lessthan($L,$565,$573)|0);
     $575 = ($574|0)==($88|0);
     $576 = HEAP32[$18>>2]|0;
     if ($575) {
      $578 = HEAP32[$576>>2]|0;
      $579 = $578 >>> 6;
      $580 = $579 & 255;
      $581 = ($580|0)==(0);
      if ($581) {
       $587 = $576;
      } else {
       $582 = HEAP32[$16>>2]|0;
       $$sum26 = (($580) + -1)|0;
       $583 = (($582) + ($$sum26<<4)|0);
       _luaF_close($L,$583);
       $$pre128 = HEAP32[$18>>2]|0;
       $587 = $$pre128;
      }
      $584 = $578 >>> 14;
      $585 = (($584) + -131070)|0;
      $586 = (($587) + ($585<<2)|0);
      $storemerge25 = $586;
     } else {
      $577 = ((($576)) + 4|0);
      $storemerge25 = $577;
     }
     HEAP32[$18>>2] = $storemerge25;
     $588 = HEAP32[$16>>2]|0;
     $base$0 = $588;
     continue L3;
     break;
    }
    case 26:  {
     $589 = $22 >>> 23;
     $590 = $589 & 256;
     $591 = ($590|0)==(0);
     $592 = $589 & 255;
     $593 = (($15) + ($592<<4)|0);
     $594 = (($base$1) + ($589<<4)|0);
     $595 = $591 ? $594 : $593;
     $596 = $22 >>> 14;
     $597 = $596 & 256;
     $598 = ($597|0)==(0);
     $599 = $596 & 255;
     $600 = (($15) + ($599<<4)|0);
     $601 = $596 & 511;
     $602 = (($base$1) + ($601<<4)|0);
     $603 = $598 ? $602 : $600;
     $604 = (_luaV_lessequal($L,$595,$603)|0);
     $605 = ($604|0)==($88|0);
     $606 = HEAP32[$18>>2]|0;
     if ($605) {
      $608 = HEAP32[$606>>2]|0;
      $609 = $608 >>> 6;
      $610 = $609 & 255;
      $611 = ($610|0)==(0);
      if ($611) {
       $617 = $606;
      } else {
       $612 = HEAP32[$16>>2]|0;
       $$sum24 = (($610) + -1)|0;
       $613 = (($612) + ($$sum24<<4)|0);
       _luaF_close($L,$613);
       $$pre127 = HEAP32[$18>>2]|0;
       $617 = $$pre127;
      }
      $614 = $608 >>> 14;
      $615 = (($614) + -131070)|0;
      $616 = (($617) + ($615<<2)|0);
      $storemerge = $616;
     } else {
      $607 = ((($606)) + 4|0);
      $storemerge = $607;
     }
     HEAP32[$18>>2] = $storemerge;
     $618 = HEAP32[$16>>2]|0;
     $base$0 = $618;
     continue L3;
     break;
    }
    case 27:  {
     $619 = $22 & 8372224;
     $620 = ($619|0)==(0);
     $621 = (((($base$1) + ($88<<4)|0)) + 8|0);
     $622 = HEAP32[$621>>2]|0;
     $623 = ($622|0)==(0);
     if ($620) {
      if (!($623)) {
       $627 = ($622|0)==(1);
       if ($627) {
        $628 = HEAP32[$89>>2]|0;
        $629 = ($628|0)==(0);
        if (!($629)) {
         label = 115;
        }
       } else {
        label = 115;
       }
      }
     } else {
      if ($623) {
       label = 115;
      } else {
       $624 = ($622|0)==(1);
       if ($624) {
        $625 = HEAP32[$89>>2]|0;
        $626 = ($625|0)==(0);
        if ($626) {
         label = 115;
        }
       }
      }
     }
     if ((label|0) == 115) {
      label = 0;
      $630 = HEAP32[$18>>2]|0;
      $631 = ((($630)) + 4|0);
      HEAP32[$18>>2] = $631;
      $base$0 = $base$1;
      continue L3;
     }
     $632 = HEAP32[$18>>2]|0;
     $633 = HEAP32[$632>>2]|0;
     $634 = $633 >>> 6;
     $635 = $634 & 255;
     $636 = ($635|0)==(0);
     if ($636) {
      $642 = $632;
     } else {
      $637 = HEAP32[$16>>2]|0;
      $$sum23 = (($635) + -1)|0;
      $638 = (($637) + ($$sum23<<4)|0);
      _luaF_close($L,$638);
      $$pre126 = HEAP32[$18>>2]|0;
      $642 = $$pre126;
     }
     $639 = $633 >>> 14;
     $640 = (($639) + -131070)|0;
     $641 = (($642) + ($640<<2)|0);
     HEAP32[$18>>2] = $641;
     $base$0 = $base$1;
     continue L3;
     break;
    }
    case 28:  {
     $643 = $22 >>> 23;
     $644 = (($base$1) + ($643<<4)|0);
     $645 = $22 & 8372224;
     $646 = ($645|0)==(0);
     $647 = (((($base$1) + ($643<<4)|0)) + 8|0);
     $648 = HEAP32[$647>>2]|0;
     $649 = ($648|0)==(0);
     if ($646) {
      if (!($649)) {
       $653 = ($648|0)==(1);
       if ($653) {
        $654 = HEAP32[$644>>2]|0;
        $655 = ($654|0)==(0);
        if (!($655)) {
         label = 126;
        }
       } else {
        label = 126;
       }
      }
     } else {
      if ($649) {
       label = 126;
      } else {
       $650 = ($648|0)==(1);
       if ($650) {
        $651 = HEAP32[$644>>2]|0;
        $652 = ($651|0)==(0);
        if ($652) {
         label = 126;
        }
       }
      }
     }
     if ((label|0) == 126) {
      label = 0;
      $656 = HEAP32[$18>>2]|0;
      $657 = ((($656)) + 4|0);
      HEAP32[$18>>2] = $657;
      $base$0 = $base$1;
      continue L3;
     }
     $658 = $644;
     $659 = $658;
     $660 = HEAP32[$659>>2]|0;
     $661 = (($658) + 4)|0;
     $662 = $661;
     $663 = HEAP32[$662>>2]|0;
     $664 = $89;
     $665 = $664;
     HEAP32[$665>>2] = $660;
     $666 = (($664) + 4)|0;
     $667 = $666;
     HEAP32[$667>>2] = $663;
     $668 = (((($base$1) + ($88<<4)|0)) + 8|0);
     HEAP32[$668>>2] = $648;
     $669 = HEAP32[$18>>2]|0;
     $670 = HEAP32[$669>>2]|0;
     $671 = $670 >>> 6;
     $672 = $671 & 255;
     $673 = ($672|0)==(0);
     if ($673) {
      $679 = $669;
     } else {
      $674 = HEAP32[$16>>2]|0;
      $$sum22 = (($672) + -1)|0;
      $675 = (($674) + ($$sum22<<4)|0);
      _luaF_close($L,$675);
      $$pre125 = HEAP32[$18>>2]|0;
      $679 = $$pre125;
     }
     $676 = $670 >>> 14;
     $677 = (($676) + -131070)|0;
     $678 = (($679) + ($677<<2)|0);
     HEAP32[$18>>2] = $678;
     $base$0 = $base$1;
     continue L3;
     break;
    }
    case 29:  {
     $680 = $22 >>> 23;
     $681 = $22 >>> 14;
     $682 = $681 & 511;
     $683 = (($682) + -1)|0;
     $684 = ($680|0)==(0);
     if (!($684)) {
      $$sum21 = (($88) + ($680))|0;
      $685 = (($base$1) + ($$sum21<<4)|0);
      HEAP32[$4>>2] = $685;
     }
     $686 = (_luaD_precall($L,$89,$683)|0);
     $687 = ($686|0)==(0);
     if ($687) {
      label = 136;
      break L3;
     }
     $688 = ($682|0)==(0);
     if (!($688)) {
      $689 = HEAP32[$19>>2]|0;
      HEAP32[$4>>2] = $689;
     }
     $690 = HEAP32[$16>>2]|0;
     $base$0 = $690;
     continue L3;
     break;
    }
    case 30:  {
     $697 = $22 >>> 23;
     $698 = ($697|0)==(0);
     if (!($698)) {
      $$sum20 = (($88) + ($697))|0;
      $699 = (($base$1) + ($$sum20<<4)|0);
      HEAP32[$4>>2] = $699;
     }
     $700 = (_luaD_precall($L,$89,-1)|0);
     $701 = ($700|0)==(0);
     if ($701) {
      label = 141;
      break L3;
     }
     $702 = HEAP32[$16>>2]|0;
     $base$0 = $702;
     continue L3;
     break;
    }
    case 32:  {
     $$sum15 = (($88) + 2)|0;
     $779 = (($base$1) + ($$sum15<<4)|0);
     $780 = +HEAPF64[$779>>3];
     $781 = +HEAPF64[$89>>3];
     $782 = $780 + $781;
     $$sum16 = (($88) + 1)|0;
     $783 = (($base$1) + ($$sum16<<4)|0);
     $784 = +HEAPF64[$783>>3];
     $785 = $780 > 0.0;
     if ($785) {
      $786 = !($782 <= $784);
      if ($786) {
       $base$0 = $base$1;
       continue L3;
      }
     } else {
      $787 = !($784 <= $782);
      if ($787) {
       $base$0 = $base$1;
       continue L3;
      }
     }
     $788 = $22 >>> 14;
     $789 = (($788) + -131071)|0;
     $790 = HEAP32[$18>>2]|0;
     $791 = (($790) + ($789<<2)|0);
     HEAP32[$18>>2] = $791;
     HEAPF64[$89>>3] = $782;
     $792 = (((($base$1) + ($88<<4)|0)) + 8|0);
     HEAP32[$792>>2] = 3;
     $$sum17 = (($88) + 3)|0;
     $793 = (($base$1) + ($$sum17<<4)|0);
     HEAPF64[$793>>3] = $782;
     $794 = (((($base$1) + ($$sum17<<4)|0)) + 8|0);
     HEAP32[$794>>2] = 3;
     $base$0 = $base$1;
     continue L3;
     break;
    }
    case 33:  {
     $$sum13 = (($88) + 1)|0;
     $795 = (($base$1) + ($$sum13<<4)|0);
     $$sum14 = (($88) + 2)|0;
     $796 = (($base$1) + ($$sum14<<4)|0);
     $797 = (((($base$1) + ($88<<4)|0)) + 8|0);
     $798 = HEAP32[$797>>2]|0;
     $799 = ($798|0)==(3);
     if (!($799)) {
      $800 = $798 & 15;
      $801 = ($800|0)==(4);
      if (!($801)) {
       label = 162;
       break L1;
      }
      $802 = HEAP32[$89>>2]|0;
      $803 = ((($802)) + 16|0);
      $804 = ((($802)) + 12|0);
      $805 = HEAP32[$804>>2]|0;
      $806 = (_luaO_str2d($803,$805,$num$i)|0);
      $807 = ($806|0)==(0);
      if ($807) {
       label = 162;
       break L1;
      }
      $808 = +HEAPF64[$num$i>>3];
      HEAPF64[$89>>3] = $808;
      HEAP32[$797>>2] = 3;
     }
     $809 = (((($base$1) + ($$sum13<<4)|0)) + 8|0);
     $810 = HEAP32[$809>>2]|0;
     $811 = ($810|0)==(3);
     if (!($811)) {
      $812 = $810 & 15;
      $813 = ($812|0)==(4);
      if (!($813)) {
       label = 167;
       break L1;
      }
      $814 = HEAP32[$795>>2]|0;
      $815 = ((($814)) + 16|0);
      $816 = ((($814)) + 12|0);
      $817 = HEAP32[$816>>2]|0;
      $818 = (_luaO_str2d($815,$817,$num$i34)|0);
      $819 = ($818|0)==(0);
      if ($819) {
       label = 167;
       break L1;
      }
      $820 = +HEAPF64[$num$i34>>3];
      HEAPF64[$795>>3] = $820;
      HEAP32[$809>>2] = 3;
     }
     $821 = (((($base$1) + ($$sum14<<4)|0)) + 8|0);
     $822 = HEAP32[$821>>2]|0;
     $823 = ($822|0)==(3);
     if (!($823)) {
      $824 = $822 & 15;
      $825 = ($824|0)==(4);
      if (!($825)) {
       label = 172;
       break L1;
      }
      $826 = HEAP32[$796>>2]|0;
      $827 = ((($826)) + 16|0);
      $828 = ((($826)) + 12|0);
      $829 = HEAP32[$828>>2]|0;
      $830 = (_luaO_str2d($827,$829,$num$i37)|0);
      $831 = ($830|0)==(0);
      if ($831) {
       label = 172;
       break L1;
      }
      $832 = +HEAPF64[$num$i37>>3];
      HEAPF64[$796>>3] = $832;
      HEAP32[$821>>2] = 3;
     }
     $833 = +HEAPF64[$89>>3];
     $834 = +HEAPF64[$796>>3];
     $835 = $833 - $834;
     HEAPF64[$89>>3] = $835;
     HEAP32[$797>>2] = 3;
     $836 = $22 >>> 14;
     $837 = (($836) + -131071)|0;
     $838 = HEAP32[$18>>2]|0;
     $839 = (($838) + ($837<<2)|0);
     HEAP32[$18>>2] = $839;
     $base$0 = $base$1;
     continue L3;
     break;
    }
    case 34:  {
     $$sum7 = (($88) + 3)|0;
     $840 = (($base$1) + ($$sum7<<4)|0);
     $$sum8 = (($88) + 2)|0;
     $841 = (($base$1) + ($$sum8<<4)|0);
     $$sum9 = (($88) + 5)|0;
     $842 = (($base$1) + ($$sum9<<4)|0);
     $843 = $841;
     $844 = $843;
     $845 = HEAP32[$844>>2]|0;
     $846 = (($843) + 4)|0;
     $847 = $846;
     $848 = HEAP32[$847>>2]|0;
     $849 = $842;
     $850 = $849;
     HEAP32[$850>>2] = $845;
     $851 = (($849) + 4)|0;
     $852 = $851;
     HEAP32[$852>>2] = $848;
     $853 = (((($base$1) + ($$sum8<<4)|0)) + 8|0);
     $854 = HEAP32[$853>>2]|0;
     $855 = (((($base$1) + ($$sum9<<4)|0)) + 8|0);
     HEAP32[$855>>2] = $854;
     $$sum10 = (($88) + 1)|0;
     $856 = (($base$1) + ($$sum10<<4)|0);
     $$sum11 = (($88) + 4)|0;
     $857 = (($base$1) + ($$sum11<<4)|0);
     $858 = $856;
     $859 = $858;
     $860 = HEAP32[$859>>2]|0;
     $861 = (($858) + 4)|0;
     $862 = $861;
     $863 = HEAP32[$862>>2]|0;
     $864 = $857;
     $865 = $864;
     HEAP32[$865>>2] = $860;
     $866 = (($864) + 4)|0;
     $867 = $866;
     HEAP32[$867>>2] = $863;
     $868 = (((($base$1) + ($$sum10<<4)|0)) + 8|0);
     $869 = HEAP32[$868>>2]|0;
     $870 = (((($base$1) + ($$sum11<<4)|0)) + 8|0);
     HEAP32[$870>>2] = $869;
     $871 = $89;
     $872 = $871;
     $873 = HEAP32[$872>>2]|0;
     $874 = (($871) + 4)|0;
     $875 = $874;
     $876 = HEAP32[$875>>2]|0;
     $877 = $840;
     $878 = $877;
     HEAP32[$878>>2] = $873;
     $879 = (($877) + 4)|0;
     $880 = $879;
     HEAP32[$880>>2] = $876;
     $881 = (((($base$1) + ($88<<4)|0)) + 8|0);
     $882 = HEAP32[$881>>2]|0;
     $883 = (((($base$1) + ($$sum7<<4)|0)) + 8|0);
     HEAP32[$883>>2] = $882;
     $$sum12 = (($88) + 6)|0;
     $884 = (($base$1) + ($$sum12<<4)|0);
     HEAP32[$4>>2] = $884;
     $885 = $22 >>> 14;
     $886 = $885 & 511;
     _luaD_call($L,$840,$886,1);
     $887 = HEAP32[$16>>2]|0;
     $888 = HEAP32[$19>>2]|0;
     HEAP32[$4>>2] = $888;
     $889 = HEAP32[$18>>2]|0;
     $890 = ((($889)) + 4|0);
     HEAP32[$18>>2] = $890;
     $891 = HEAP32[$889>>2]|0;
     $892 = $891 >>> 6;
     $893 = $892 & 255;
     $894 = (($887) + ($893<<4)|0);
     $base$2 = $887;$i$0 = $891;$ra$1 = $894;
     break;
    }
    case 35:  {
     $base$2 = $base$1;$i$0 = $22;$ra$1 = $89;
     break;
    }
    case 36:  {
     $914 = $22 >>> 23;
     $915 = $22 >>> 14;
     $916 = $915 & 511;
     $917 = ($914|0)==(0);
     if ($917) {
      $918 = HEAP32[$4>>2]|0;
      $919 = $918;
      $920 = $89;
      $921 = (($919) - ($920))|0;
      $922 = $921 >> 4;
      $923 = (($922) + -1)|0;
      $n$0 = $923;
     } else {
      $n$0 = $914;
     }
     $924 = ($916|0)==(0);
     if ($924) {
      $925 = HEAP32[$18>>2]|0;
      $926 = ((($925)) + 4|0);
      HEAP32[$18>>2] = $926;
      $927 = HEAP32[$925>>2]|0;
      $928 = $927 >>> 6;
      $c83$0 = $928;
     } else {
      $c83$0 = $916;
     }
     $929 = HEAP32[$89>>2]|0;
     $930 = ($c83$0*50)|0;
     $931 = (($n$0) + -50)|0;
     $932 = (($931) + ($930))|0;
     $933 = ((($929)) + 28|0);
     $934 = HEAP32[$933>>2]|0;
     $935 = ($932|0)>($934|0);
     if ($935) {
      _luaH_resizearray($L,$929,$932);
     }
     $936 = ($n$0|0)>(0);
     if ($936) {
      $937 = ((($929)) + 5|0);
      $last$090 = $932;$n$189 = $n$0;
      while(1) {
       $$sum6 = (($n$189) + ($88))|0;
       $938 = (($base$1) + ($$sum6<<4)|0);
       $939 = (($last$090) + -1)|0;
       _luaH_setint($L,$929,$last$090,$938);
       $940 = (((($base$1) + ($$sum6<<4)|0)) + 8|0);
       $941 = HEAP32[$940>>2]|0;
       $942 = $941 & 64;
       $943 = ($942|0)==(0);
       if (!($943)) {
        $944 = HEAP32[$938>>2]|0;
        $945 = ((($944)) + 5|0);
        $946 = HEAP8[$945>>0]|0;
        $947 = $946 & 3;
        $948 = ($947<<24>>24)==(0);
        if (!($948)) {
         $949 = HEAP8[$937>>0]|0;
         $950 = $949 & 4;
         $951 = ($950<<24>>24)==(0);
         if (!($951)) {
          _luaC_barrierback_($L,$929);
         }
        }
       }
       $952 = (($n$189) + -1)|0;
       $953 = ($n$189|0)>(1);
       if ($953) {
        $last$090 = $939;$n$189 = $952;
       } else {
        break;
       }
      }
     }
     $954 = HEAP32[$19>>2]|0;
     HEAP32[$4>>2] = $954;
     $base$0 = $base$1;
     continue L3;
     break;
    }
    case 37:  {
     $955 = $22 >>> 14;
     $956 = HEAP32[$12>>2]|0;
     $957 = ((($956)) + 16|0);
     $958 = HEAP32[$957>>2]|0;
     $959 = (($958) + ($955<<2)|0);
     $960 = HEAP32[$959>>2]|0;
     $961 = ((($960)) + 32|0);
     $962 = HEAP32[$961>>2]|0;
     $963 = ($962|0)==(0|0);
     $$phi$trans$insert = ((($960)) + 40|0);
     $$pre = HEAP32[$$phi$trans$insert>>2]|0;
     $$phi$trans$insert123 = ((($960)) + 28|0);
     $$pre124 = HEAP32[$$phi$trans$insert123>>2]|0;
     L219: do {
      if ($963) {
       label = 199;
      } else {
       $964 = ($$pre|0)>(0);
       if ($964) {
        $965 = ((($962)) + 16|0);
        $i$01$i = 0;
        while(1) {
         $968 = (((($$pre124) + ($i$01$i<<3)|0)) + 4|0);
         $969 = HEAP8[$968>>0]|0;
         $970 = ($969<<24>>24)==(0);
         $971 = (((($$pre124) + ($i$01$i<<3)|0)) + 5|0);
         $972 = HEAP8[$971>>0]|0;
         $973 = $972&255;
         if ($970) {
          $975 = (((($11)) + 16|0) + ($973<<2)|0);
          $976 = HEAP32[$975>>2]|0;
          $977 = ((($976)) + 8|0);
          $978 = HEAP32[$977>>2]|0;
          $984 = $978;
         } else {
          $974 = (($base$1) + ($973<<4)|0);
          $984 = $974;
         }
         $979 = (($965) + ($i$01$i<<2)|0);
         $980 = HEAP32[$979>>2]|0;
         $981 = ((($980)) + 8|0);
         $982 = HEAP32[$981>>2]|0;
         $983 = ($982|0)==($984|0);
         $967 = (($i$01$i) + 1)|0;
         if (!($983)) {
          label = 199;
          break L219;
         }
         $966 = ($967|0)<($$pre|0);
         if ($966) {
          $i$01$i = $967;
         } else {
          break;
         }
        }
       }
       HEAP32[$89>>2] = $962;
       $1007 = (((($base$1) + ($88<<4)|0)) + 8|0);
       HEAP32[$1007>>2] = 70;
      }
     } while(0);
     if ((label|0) == 199) {
      label = 0;
      $985 = (_luaF_newLclosure($L,$$pre)|0);
      $986 = ((($985)) + 12|0);
      HEAP32[$986>>2] = $960;
      HEAP32[$89>>2] = $985;
      $987 = (((($base$1) + ($88<<4)|0)) + 8|0);
      HEAP32[$987>>2] = 70;
      $988 = ($$pre|0)>(0);
      if ($988) {
       $989 = ((($985)) + 16|0);
       $i$01$i42 = 0;
       while(1) {
        $990 = (((($$pre124) + ($i$01$i42<<3)|0)) + 4|0);
        $991 = HEAP8[$990>>0]|0;
        $992 = ($991<<24>>24)==(0);
        $993 = (((($$pre124) + ($i$01$i42<<3)|0)) + 5|0);
        $994 = HEAP8[$993>>0]|0;
        $995 = $994&255;
        if ($992) {
         $999 = (((($11)) + 16|0) + ($995<<2)|0);
         $1000 = HEAP32[$999>>2]|0;
         $1001 = (($989) + ($i$01$i42<<2)|0);
         HEAP32[$1001>>2] = $1000;
        } else {
         $996 = (($base$1) + ($995<<4)|0);
         $997 = (_luaF_findupval($L,$996)|0);
         $998 = (($989) + ($i$01$i42<<2)|0);
         HEAP32[$998>>2] = $997;
        }
        $1002 = (($i$01$i42) + 1)|0;
        $exitcond$i = ($1002|0)==($$pre|0);
        if ($exitcond$i) {
         break;
        } else {
         $i$01$i42 = $1002;
        }
       }
      }
      $1003 = ((($960)) + 5|0);
      $1004 = HEAP8[$1003>>0]|0;
      $1005 = $1004 & 4;
      $1006 = ($1005<<24>>24)==(0);
      if (!($1006)) {
       _luaC_barrierproto_($L,$960,$985);
      }
      HEAP32[$961>>2] = $985;
     }
     $1008 = HEAP32[$3>>2]|0;
     $1009 = ((($1008)) + 12|0);
     $1010 = HEAP32[$1009>>2]|0;
     $1011 = ($1010|0)>(0);
     if ($1011) {
      $$sum5 = (($88) + 1)|0;
      $1012 = (($base$1) + ($$sum5<<4)|0);
      HEAP32[$4>>2] = $1012;
      _luaC_step($L);
      $1013 = HEAP32[$19>>2]|0;
      HEAP32[$4>>2] = $1013;
     }
     $1014 = HEAP32[$16>>2]|0;
     $base$0 = $1014;
     continue L3;
     break;
    }
    case 38:  {
     $1015 = $22 >>> 23;
     $1016 = (($1015) + -1)|0;
     $1017 = HEAP32[$ci$0>>2]|0;
     $1018 = $base$1;
     $1019 = $1017;
     $1020 = (($1018) - ($1019))|0;
     $1021 = $1020 >> 4;
     $1022 = HEAP32[$12>>2]|0;
     $1023 = ((($1022)) + 76|0);
     $1024 = HEAP8[$1023>>0]|0;
     $1025 = $1024&255;
     $1026 = (($1021) - ($1025))|0;
     $1027 = (($1026) + -1)|0;
     $1028 = ($1015|0)==(0);
     if ($1028) {
      $1029 = HEAP32[$5>>2]|0;
      $1030 = HEAP32[$4>>2]|0;
      $1031 = $1029;
      $1032 = $1030;
      $1033 = (($1031) - ($1032))|0;
      $1034 = $1033 >> 4;
      $1035 = ($1034|0)>($1027|0);
      if (!($1035)) {
       _luaD_growstack($L,$1027);
      }
      $1036 = HEAP32[$16>>2]|0;
      $$sum4 = (($1027) + ($88))|0;
      $1037 = (($1036) + ($$sum4<<4)|0);
      HEAP32[$4>>2] = $1037;
      $1042 = $1036;$b85$0 = $1027;
     } else {
      $1042 = $base$1;$b85$0 = $1016;
     }
     $1038 = ($b85$0|0)>(0);
     if (!($1038)) {
      $base$0 = $1042;
      continue L3;
     }
     $1039 = (1 - ($1026))|0;
     $j$088 = 0;
     while(1) {
      $1040 = ($j$088|0)<($1027|0);
      if ($1040) {
       $$sum2 = (($j$088) + ($1039))|0;
       $1041 = (($1042) + ($$sum2<<4)|0);
       $$sum3 = (($j$088) + ($88))|0;
       $1043 = (($1042) + ($$sum3<<4)|0);
       $1044 = $1041;
       $1045 = $1044;
       $1046 = HEAP32[$1045>>2]|0;
       $1047 = (($1044) + 4)|0;
       $1048 = $1047;
       $1049 = HEAP32[$1048>>2]|0;
       $1050 = $1043;
       $1051 = $1050;
       HEAP32[$1051>>2] = $1046;
       $1052 = (($1050) + 4)|0;
       $1053 = $1052;
       HEAP32[$1053>>2] = $1049;
       $1054 = (((($1042) + ($$sum2<<4)|0)) + 8|0);
       $1055 = HEAP32[$1054>>2]|0;
       $1056 = (((($1042) + ($$sum3<<4)|0)) + 8|0);
       HEAP32[$1056>>2] = $1055;
      } else {
       $$sum = (($j$088) + ($88))|0;
       $1057 = (((($1042) + ($$sum<<4)|0)) + 8|0);
       HEAP32[$1057>>2] = 0;
      }
      $1058 = (($j$088) + 1)|0;
      $exitcond = ($1058|0)==($b85$0|0);
      if ($exitcond) {
       $base$0 = $1042;
       continue L3;
      } else {
       $j$088 = $1058;
      }
     }
     break;
    }
    default: {
     $base$0 = $base$1;
     continue L3;
    }
    }
   } while(0);
   $895 = ((($ra$1)) + 24|0);
   $896 = HEAP32[$895>>2]|0;
   $897 = ($896|0)==(0);
   if ($897) {
    $base$0 = $base$2;
    continue;
   }
   $898 = ((($ra$1)) + 16|0);
   $899 = $898;
   $900 = $899;
   $901 = HEAP32[$900>>2]|0;
   $902 = (($899) + 4)|0;
   $903 = $902;
   $904 = HEAP32[$903>>2]|0;
   $905 = $ra$1;
   $906 = $905;
   HEAP32[$906>>2] = $901;
   $907 = (($905) + 4)|0;
   $908 = $907;
   HEAP32[$908>>2] = $904;
   $909 = ((($ra$1)) + 8|0);
   HEAP32[$909>>2] = $896;
   $910 = $i$0 >>> 14;
   $911 = (($910) + -131071)|0;
   $912 = HEAP32[$18>>2]|0;
   $913 = (($912) + ($911<<2)|0);
   HEAP32[$18>>2] = $913;
   $base$0 = $base$2;
  }
  if ((label|0) == 136) {
   label = 0;
   $691 = HEAP32[$0>>2]|0;
   $692 = ((($691)) + 18|0);
   $693 = HEAP8[$692>>0]|0;
   $694 = $693&255;
   $695 = $694 | 4;
   $696 = $695&255;
   HEAP8[$692>>0] = $696;
   $ci$0 = $691;
   continue;
  }
  else if ((label|0) == 141) {
   label = 0;
   $703 = HEAP32[$0>>2]|0;
   $704 = ((($703)) + 8|0);
   $705 = HEAP32[$704>>2]|0;
   $706 = HEAP32[$703>>2]|0;
   $707 = HEAP32[$705>>2]|0;
   $708 = ((($703)) + 24|0);
   $709 = HEAP32[$708>>2]|0;
   $710 = HEAP32[$706>>2]|0;
   $711 = ((($710)) + 12|0);
   $712 = HEAP32[$711>>2]|0;
   $713 = ((($712)) + 76|0);
   $714 = HEAP8[$713>>0]|0;
   $715 = $714&255;
   $716 = (($709) + ($715<<4)|0);
   $717 = HEAP32[$12>>2]|0;
   $718 = ((($717)) + 56|0);
   $719 = HEAP32[$718>>2]|0;
   $720 = ($719|0)>(0);
   if ($720) {
    $721 = ((($705)) + 24|0);
    $722 = HEAP32[$721>>2]|0;
    _luaF_close($L,$722);
   }
   $723 = ($706>>>0)<($716>>>0);
   if ($723) {
    $726 = $706;$aux$093 = 0;
    while(1) {
     $724 = (($707) + ($aux$093<<4)|0);
     $725 = $726;
     $727 = $725;
     $728 = HEAP32[$727>>2]|0;
     $729 = (($725) + 4)|0;
     $730 = $729;
     $731 = HEAP32[$730>>2]|0;
     $732 = $724;
     $733 = $732;
     HEAP32[$733>>2] = $728;
     $734 = (($732) + 4)|0;
     $735 = $734;
     HEAP32[$735>>2] = $731;
     $736 = (((($706) + ($aux$093<<4)|0)) + 8|0);
     $737 = HEAP32[$736>>2]|0;
     $738 = (((($707) + ($aux$093<<4)|0)) + 8|0);
     HEAP32[$738>>2] = $737;
     $739 = (($aux$093) + 1)|0;
     $740 = (($706) + ($739<<4)|0);
     $741 = ($740>>>0)<($716>>>0);
     if ($741) {
      $726 = $740;$aux$093 = $739;
     } else {
      break;
     }
    }
   }
   $742 = HEAP32[$708>>2]|0;
   $743 = $742;
   $744 = $706;
   $745 = (($743) - ($744))|0;
   $746 = $745 >> 4;
   $747 = (($707) + ($746<<4)|0);
   $748 = ((($705)) + 24|0);
   HEAP32[$748>>2] = $747;
   $749 = HEAP32[$4>>2]|0;
   $750 = $749;
   $751 = (($750) - ($744))|0;
   $752 = $751 >> 4;
   $753 = (($707) + ($752<<4)|0);
   HEAP32[$4>>2] = $753;
   $754 = ((($705)) + 4|0);
   HEAP32[$754>>2] = $753;
   $755 = ((($703)) + 28|0);
   $756 = HEAP32[$755>>2]|0;
   $757 = ((($705)) + 28|0);
   HEAP32[$757>>2] = $756;
   $758 = ((($705)) + 18|0);
   $759 = HEAP8[$758>>0]|0;
   $760 = $759&255;
   $761 = $760 | 64;
   $762 = $761&255;
   HEAP8[$758>>0] = $762;
   HEAP32[$0>>2] = $705;
   $ci$0 = $705;
   continue;
  }
  else if ((label|0) == 146) {
   label = 0;
   $763 = $$lcssa216 >>> 23;
   $764 = ($763|0)==(0);
   if (!($764)) {
    $$sum18 = (($763) + -1)|0;
    $$sum19 = (($$sum18) + ($$lcssa230))|0;
    $765 = (($base$1$lcssa) + ($$sum19<<4)|0);
    HEAP32[$4>>2] = $765;
   }
   $766 = HEAP32[$12>>2]|0;
   $767 = ((($766)) + 56|0);
   $768 = HEAP32[$767>>2]|0;
   $769 = ($768|0)>(0);
   if ($769) {
    _luaF_close($L,$base$1$lcssa);
   }
   $770 = (_luaD_poscall($L,$$lcssa236)|0);
   $771 = ((($ci$0)) + 18|0);
   $772 = HEAP8[$771>>0]|0;
   $773 = $772 & 4;
   $774 = ($773<<24>>24)==(0);
   if ($774) {
    label = 151;
    break;
   }
   $775 = HEAP32[$0>>2]|0;
   $776 = ($770|0)==(0);
   if ($776) {
    $ci$0 = $775;
    continue;
   }
   $777 = ((($775)) + 4|0);
   $778 = HEAP32[$777>>2]|0;
   HEAP32[$4>>2] = $778;
   $ci$0 = $775;
   continue;
  }
 }
 if ((label|0) == 22) {
  $78 = $75;
  if (!($1059)) {
   $79 = ((($78)) + -4|0);
   HEAP32[$$pre$phi2$iZ2D>>2] = $79;
   $80 = HEAP8[$36>>0]|0;
   $81 = $80&255;
   $82 = $81 | 128;
   $83 = $82&255;
   HEAP8[$36>>0] = $83;
   $84 = HEAP32[$4>>2]|0;
   $85 = ((($84)) + -16|0);
   HEAP32[$31>>2] = $85;
   _luaD_throw($L,1);
   // unreachable;
  }
  HEAP32[$6>>2] = 1;
  $79 = ((($78)) + -4|0);
  HEAP32[$$pre$phi2$iZ2D>>2] = $79;
  $80 = HEAP8[$36>>0]|0;
  $81 = $80&255;
  $82 = $81 | 128;
  $83 = $82&255;
  HEAP8[$36>>0] = $83;
  $84 = HEAP32[$4>>2]|0;
  $85 = ((($84)) + -16|0);
  HEAP32[$31>>2] = $85;
  _luaD_throw($L,1);
  // unreachable;
 }
 else if ((label|0) == 151) {
  STACKTOP = sp;return;
 }
 else if ((label|0) == 162) {
  _luaG_runerror($L,7231,$vararg_buffer);
  // unreachable;
 }
 else if ((label|0) == 167) {
  _luaG_runerror($L,7268,$vararg_buffer1);
  // unreachable;
 }
 else if ((label|0) == 172) {
  _luaG_runerror($L,7297,$vararg_buffer3);
  // unreachable;
 }
}
function _luaZ_fill($z) {
 $z = $z|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $size = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $size = sp;
 $0 = ((($z)) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($z)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($z)) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (FUNCTION_TABLE_iiii[$3 & 255]($1,$5,$size)|0);
 $7 = ($6|0)==(0|0);
 $8 = HEAP32[$size>>2]|0;
 $9 = ($8|0)==(0);
 $or$cond = $7 | $9;
 if ($or$cond) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $10 = (($8) + -1)|0;
 HEAP32[$z>>2] = $10;
 $11 = ((($z)) + 4|0);
 $12 = ((($6)) + 1|0);
 HEAP32[$11>>2] = $12;
 $13 = HEAP8[$6>>0]|0;
 $14 = $13&255;
 $$0 = $14;
 STACKTOP = sp;return ($$0|0);
}
function _luaZ_init($L,$z,$reader,$data) {
 $L = $L|0;
 $z = $z|0;
 $reader = $reader|0;
 $data = $data|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($z)) + 16|0);
 HEAP32[$0>>2] = $L;
 $1 = ((($z)) + 8|0);
 HEAP32[$1>>2] = $reader;
 $2 = ((($z)) + 12|0);
 HEAP32[$2>>2] = $data;
 HEAP32[$z>>2] = 0;
 $3 = ((($z)) + 4|0);
 HEAP32[$3>>2] = 0;
 return;
}
function _luaZ_read($z,$b,$n) {
 $z = $z|0;
 $b = $b|0;
 $n = $n|0;
 var $$$01 = 0, $$0 = 0, $$015 = 0, $$024 = 0, $$pre = 0, $$pre7 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond$i = 0, $size$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $size$i = sp;
 $0 = ($n|0)==(0);
 if ($0) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $1 = ((($z)) + 16|0);
 $2 = ((($z)) + 8|0);
 $3 = ((($z)) + 12|0);
 $4 = ((($z)) + 4|0);
 $$pre = HEAP32[$z>>2]|0;
 $$015 = $n;$$024 = $b;$6 = $$pre;
 while(1) {
  $5 = ($6|0)==(0);
  if ($5) {
   $7 = HEAP32[$1>>2]|0;
   $8 = HEAP32[$2>>2]|0;
   $9 = HEAP32[$3>>2]|0;
   $10 = (FUNCTION_TABLE_iiii[$8 & 255]($7,$9,$size$i)|0);
   $11 = ($10|0)==(0|0);
   $12 = HEAP32[$size$i>>2]|0;
   $13 = ($12|0)==(0);
   $or$cond$i = $11 | $13;
   if ($or$cond$i) {
    $$0 = $$015;
    label = 8;
    break;
   }
   HEAP32[$z>>2] = $12;
   HEAP32[$4>>2] = $10;
   $15 = $12;$16 = $10;
  } else {
   $$pre7 = HEAP32[$4>>2]|0;
   $15 = $6;$16 = $$pre7;
  }
  $14 = ($$015>>>0)>($15>>>0);
  $$$01 = $14 ? $15 : $$015;
  _memcpy(($$024|0),($16|0),($$$01|0))|0;
  $17 = HEAP32[$z>>2]|0;
  $18 = (($17) - ($$$01))|0;
  HEAP32[$z>>2] = $18;
  $19 = HEAP32[$4>>2]|0;
  $20 = (($19) + ($$$01)|0);
  HEAP32[$4>>2] = $20;
  $21 = (($$024) + ($$$01)|0);
  $22 = (($$015) - ($$$01))|0;
  $23 = ($$015|0)==($$$01|0);
  if ($23) {
   $$0 = 0;
   label = 8;
   break;
  } else {
   $$015 = $22;$$024 = $21;$6 = $18;
  }
 }
 if ((label|0) == 8) {
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function _luaZ_openspace($L,$buff,$n) {
 $L = $L|0;
 $buff = $buff|0;
 $n = $n|0;
 var $$n = 0, $$pre = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($buff)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1>>>0)<($n>>>0);
 if (!($2)) {
  $$pre = HEAP32[$buff>>2]|0;
  $8 = $$pre;
  return ($8|0);
 }
 $3 = ($n>>>0)<(32);
 $$n = $3 ? 32 : $n;
 $4 = (($$n) + 1)|0;
 $5 = ($4>>>0)>(4294967293);
 if ($5) {
  _luaM_toobig($L);
  // unreachable;
 }
 $6 = HEAP32[$buff>>2]|0;
 $7 = (_luaM_realloc_($L,$6,$1,$$n)|0);
 HEAP32[$buff>>2] = $7;
 HEAP32[$0>>2] = $$n;
 $8 = $7;
 return ($8|0);
}
function _luaL_traceback($L,$L1,$msg,$level) {
 $L = $L|0;
 $L1 = $L1|0;
 $msg = $msg|0;
 $level = $level|0;
 var $$0$be = 0, $$in = 0, $$le$1$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ar = 0, $ar$i = 0, $le$0$i = 0, $le$0$i$lcssa = 0, $le$1$lcssa$i = 0, $le$11$i = 0, $li$0$i = 0, $li$0$i$lcssa = 0, $li$0$i$phi = 0, $li$1$$i = 0;
 var $li$12$i = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer10 = 0, $vararg_buffer13 = 0, $vararg_buffer4 = 0, $vararg_buffer7 = 0, $vararg_ptr16 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer13 = sp + 40|0;
 $vararg_buffer10 = sp + 32|0;
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $ar$i = sp + 148|0;
 $ar = sp + 48|0;
 $0 = (_lua_gettop($L)|0);
 $le$0$i = 1;$li$0$i = 1;
 while(1) {
  $1 = (_lua_getstack($L1,$le$0$i,$ar$i)|0);
  $2 = ($1|0)==(0);
  $3 = $le$0$i << 1;
  if ($2) {
   $le$0$i$lcssa = $le$0$i;$li$0$i$lcssa = $li$0$i;
   break;
  } else {
   $li$0$i$phi = $le$0$i;$le$0$i = $3;$li$0$i = $li$0$i$phi;
  }
 }
 $4 = ($li$0$i$lcssa|0)<($le$0$i$lcssa|0);
 if ($4) {
  $le$11$i = $le$0$i$lcssa;$li$12$i = $li$0$i$lcssa;
  while(1) {
   $5 = (($le$11$i) + ($li$12$i))|0;
   $6 = (($5|0) / 2)&-1;
   $7 = (_lua_getstack($L1,$6,$ar$i)|0);
   $8 = ($7|0)==(0);
   $9 = (($6) + 1)|0;
   $$le$1$i = $8 ? $6 : $le$11$i;
   $li$1$$i = $8 ? $li$12$i : $9;
   $10 = ($li$1$$i|0)<($$le$1$i|0);
   if ($10) {
    $le$11$i = $$le$1$i;$li$12$i = $li$1$$i;
   } else {
    $le$1$lcssa$i = $$le$1$i;
    break;
   }
  }
 } else {
  $le$1$lcssa$i = $le$0$i$lcssa;
 }
 $11 = (($le$1$lcssa$i) + -1)|0;
 $12 = ($11|0)>(22);
 $13 = $12 ? 12 : 0;
 $14 = ($msg|0)==(0|0);
 if (!($14)) {
  HEAP32[$vararg_buffer>>2] = $msg;
  (_lua_pushfstring($L,10236,$vararg_buffer)|0);
 }
 (_lua_pushlstring($L,7325,16)|0);
 $15 = (_lua_getstack($L1,$level,$ar)|0);
 $16 = ($15|0)==(0);
 if ($16) {
  $45 = (_lua_gettop($L)|0);
  $46 = (($45) - ($0))|0;
  _lua_concat($L,$46);
  STACKTOP = sp;return;
 }
 $17 = (($le$1$lcssa$i) + -11)|0;
 $18 = ((($ar)) + 36|0);
 $19 = ((($ar)) + 20|0);
 $20 = ((($ar)) + 8|0);
 $21 = ((($ar)) + 12|0);
 $22 = ((($ar)) + 24|0);
 $23 = ((($ar)) + 35|0);
 $24 = ((($ar)) + 4|0);
 $$in = $level;
 while(1) {
  $25 = (($$in) + 1)|0;
  $26 = ($25|0)==($13|0);
  if ($26) {
   (_lua_pushlstring($L,7342,5)|0);
   $$0$be = $17;
  } else {
   (_lua_getinfo($L1,7348,$ar)|0);
   HEAP32[$vararg_buffer1>>2] = $18;
   (_lua_pushfstring($L,7353,$vararg_buffer1)|0);
   $27 = HEAP32[$19>>2]|0;
   $28 = ($27|0)>(0);
   if ($28) {
    HEAP32[$vararg_buffer4>>2] = $27;
    (_lua_pushfstring($L,7359,$vararg_buffer4)|0);
   }
   (_lua_pushlstring($L,7363,4)|0);
   $29 = HEAP32[$20>>2]|0;
   $30 = HEAP8[$29>>0]|0;
   $31 = ($30<<24>>24)==(0);
   L22: do {
    if ($31) {
     $33 = HEAP32[$21>>2]|0;
     $34 = HEAP8[$33>>0]|0;
     switch ($34<<24>>24) {
     case 109:  {
      (_lua_pushlstring($L,7382,10)|0);
      break L22;
      break;
     }
     case 67:  {
      $35 = (_pushglobalfuncname($L,$ar)|0);
      $36 = ($35|0)==(0);
      if ($36) {
       (_lua_pushlstring($L,12875,1)|0);
       break L22;
      } else {
       $37 = (_lua_tolstring($L,-1,0)|0);
       HEAP32[$vararg_buffer10>>2] = $37;
       (_lua_pushfstring($L,7368,$vararg_buffer10)|0);
       _lua_remove($L,-2);
       break L22;
      }
      break;
     }
     default: {
      $38 = HEAP32[$22>>2]|0;
      HEAP32[$vararg_buffer13>>2] = $18;
      $vararg_ptr16 = ((($vararg_buffer13)) + 4|0);
      HEAP32[$vararg_ptr16>>2] = $38;
      (_lua_pushfstring($L,7393,$vararg_buffer13)|0);
      break L22;
     }
     }
    } else {
     $32 = HEAP32[$24>>2]|0;
     HEAP32[$vararg_buffer7>>2] = $32;
     (_lua_pushfstring($L,7368,$vararg_buffer7)|0);
    }
   } while(0);
   $39 = HEAP8[$23>>0]|0;
   $40 = ($39<<24>>24)==(0);
   if (!($40)) {
    (_lua_pushlstring($L,7410,20)|0);
   }
   $41 = (_lua_gettop($L)|0);
   $42 = (($41) - ($0))|0;
   _lua_concat($L,$42);
   $$0$be = $25;
  }
  $43 = (_lua_getstack($L1,$$0$be,$ar)|0);
  $44 = ($43|0)==(0);
  if ($44) {
   break;
  } else {
   $$in = $$0$be;
  }
 }
 $45 = (_lua_gettop($L)|0);
 $46 = (($45) - ($0))|0;
 _lua_concat($L,$46);
 STACKTOP = sp;return;
}
function _luaL_argerror($L,$narg,$extramsg) {
 $L = $L|0;
 $narg = $narg|0;
 $extramsg = $extramsg|0;
 var $$0 = 0, $$01 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $ar = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer6 = 0, $vararg_ptr1 = 0, $vararg_ptr10 = 0, $vararg_ptr5 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer6 = sp + 16|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $ar = sp + 28|0;
 $0 = (_lua_getstack($L,0,$ar)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  HEAP32[$vararg_buffer>>2] = $narg;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $extramsg;
  $2 = (_luaL_error($L,7431,$vararg_buffer)|0);
  $$0 = $2;
  STACKTOP = sp;return ($$0|0);
 }
 (_lua_getinfo($L,12103,$ar)|0);
 $3 = ((($ar)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (_strcmp($4,7453)|0);
 $6 = ($5|0)==(0);
 if ($6) {
  $7 = (($narg) + -1)|0;
  $8 = ($7|0)==(0);
  if ($8) {
   $9 = ((($ar)) + 4|0);
   $10 = HEAP32[$9>>2]|0;
   HEAP32[$vararg_buffer2>>2] = $10;
   $vararg_ptr5 = ((($vararg_buffer2)) + 4|0);
   HEAP32[$vararg_ptr5>>2] = $extramsg;
   $11 = (_luaL_error($L,7460,$vararg_buffer2)|0);
   $$0 = $11;
   STACKTOP = sp;return ($$0|0);
  } else {
   $$01 = $7;
  }
 } else {
  $$01 = $narg;
 }
 $12 = ((($ar)) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13|0)==(0|0);
 if ($14) {
  $15 = (_pushglobalfuncname($L,$ar)|0);
  $16 = ($15|0)==(0);
  if ($16) {
   $18 = 12875;
  } else {
   $17 = (_lua_tolstring($L,-1,0)|0);
   $18 = $17;
  }
  HEAP32[$12>>2] = $18;
  $19 = $18;
 } else {
  $19 = $13;
 }
 HEAP32[$vararg_buffer6>>2] = $$01;
 $vararg_ptr9 = ((($vararg_buffer6)) + 4|0);
 HEAP32[$vararg_ptr9>>2] = $19;
 $vararg_ptr10 = ((($vararg_buffer6)) + 8|0);
 HEAP32[$vararg_ptr10>>2] = $extramsg;
 $20 = (_luaL_error($L,7490,$vararg_buffer6)|0);
 $$0 = $20;
 STACKTOP = sp;return ($$0|0);
}
function _luaL_error($L,$fmt,$varargs) {
 $L = $L|0;
 $fmt = $fmt|0;
 $varargs = $varargs|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $ar$i = 0, $argp = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $ar$i = sp + 24|0;
 $argp = sp + 8|0;
 HEAP32[$argp>>2] = $varargs;
 $0 = (_lua_getstack($L,1,$ar$i)|0);
 $1 = ($0|0)==(0);
 if (!($1)) {
  (_lua_getinfo($L,7520,$ar$i)|0);
  $2 = ((($ar$i)) + 20|0);
  $3 = HEAP32[$2>>2]|0;
  $4 = ($3|0)>(0);
  if ($4) {
   $5 = ((($ar$i)) + 36|0);
   HEAP32[$vararg_buffer>>2] = $5;
   $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
   HEAP32[$vararg_ptr1>>2] = $3;
   (_lua_pushfstring($L,7523,$vararg_buffer)|0);
   (_lua_pushvfstring($L,$fmt,$argp)|0);
   _lua_concat($L,2);
   (_lua_error($L)|0);
   // unreachable;
  }
 }
 (_lua_pushlstring($L,20754,0)|0);
 (_lua_pushvfstring($L,$fmt,$argp)|0);
 _lua_concat($L,2);
 (_lua_error($L)|0);
 // unreachable;
 return (0)|0;
}
function _luaL_where($L,$level) {
 $L = $L|0;
 $level = $level|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $ar = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $ar = sp + 8|0;
 $0 = (_lua_getstack($L,$level,$ar)|0);
 $1 = ($0|0)==(0);
 if (!($1)) {
  (_lua_getinfo($L,7520,$ar)|0);
  $2 = ((($ar)) + 20|0);
  $3 = HEAP32[$2>>2]|0;
  $4 = ($3|0)>(0);
  if ($4) {
   $5 = ((($ar)) + 36|0);
   HEAP32[$vararg_buffer>>2] = $5;
   $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
   HEAP32[$vararg_ptr1>>2] = $3;
   (_lua_pushfstring($L,7523,$vararg_buffer)|0);
   STACKTOP = sp;return;
  }
 }
 (_lua_pushlstring($L,20754,0)|0);
 STACKTOP = sp;return;
}
function _luaL_fileresult($L,$stat,$fname) {
 $L = $L|0;
 $stat = $stat|0;
 $fname = $fname|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = (___errno_location()|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($stat|0)==(0);
 if (!($2)) {
  _lua_pushboolean($L,1);
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 _lua_pushnil($L);
 $3 = ($fname|0)==(0|0);
 $4 = (_strerror($1)|0);
 if ($3) {
  (_lua_pushstring($L,$4)|0);
 } else {
  HEAP32[$vararg_buffer>>2] = $fname;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $4;
  (_lua_pushfstring($L,7531,$vararg_buffer)|0);
 }
 _lua_pushinteger($L,$1);
 $$0 = 3;
 STACKTOP = sp;return ($$0|0);
}
function _luaL_execresult($L,$stat) {
 $L = $L|0;
 $stat = $stat|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 switch ($stat|0) {
 case -1:  {
  $0 = (___errno_location()|0);
  $1 = HEAP32[$0>>2]|0;
  _lua_pushnil($L);
  $2 = (_strerror($1)|0);
  (_lua_pushstring($L,$2)|0);
  _lua_pushinteger($L,$1);
  return 3;
  break;
 }
 case 0:  {
  _lua_pushboolean($L,1);
  break;
 }
 default: {
  _lua_pushnil($L);
 }
 }
 (_lua_pushstring($L,10941)|0);
 _lua_pushinteger($L,$stat);
 return 3;
}
function _luaL_newmetatable($L,$tname) {
 $L = $L|0;
 $tname = $tname|0;
 var $$0 = 0, $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _lua_getfield($L,-1001000,$tname);
 $0 = (_lua_type($L,-1)|0);
 $1 = ($0|0)==(0);
 if (!($1)) {
  $$0 = 0;
  return ($$0|0);
 }
 _lua_settop($L,-2);
 _lua_createtable($L,0,0);
 _lua_pushvalue($L,-1);
 _lua_setfield($L,-1001000,$tname);
 $$0 = 1;
 return ($$0|0);
}
function _luaL_setmetatable($L,$tname) {
 $L = $L|0;
 $tname = $tname|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _lua_getfield($L,-1001000,$tname);
 (_lua_setmetatable($L,-2)|0);
 return;
}
function _luaL_testudata($L,$ud,$tname) {
 $L = $L|0;
 $ud = $ud|0;
 $tname = $tname|0;
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_lua_touserdata($L,$ud)|0);
 $1 = ($0|0)==(0|0);
 if ($1) {
  $$0 = 0;
  return ($$0|0);
 }
 $2 = (_lua_getmetatable($L,$ud)|0);
 $3 = ($2|0)==(0);
 if ($3) {
  $$0 = 0;
  return ($$0|0);
 }
 _lua_getfield($L,-1001000,$tname);
 $4 = (_lua_rawequal($L,-1,-2)|0);
 $5 = ($4|0)==(0);
 $$ = $5 ? 0 : $0;
 _lua_settop($L,-3);
 $$0 = $$;
 return ($$0|0);
}
function _luaL_checkudata($L,$ud,$tname) {
 $L = $L|0;
 $ud = $ud|0;
 $tname = $tname|0;
 var $$0$i1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = (_lua_touserdata($L,$ud)|0);
 $1 = ($0|0)==(0|0);
 if (!($1)) {
  $2 = (_lua_getmetatable($L,$ud)|0);
  $3 = ($2|0)==(0);
  if (!($3)) {
   _lua_getfield($L,-1001000,$tname);
   $4 = (_lua_rawequal($L,-1,-2)|0);
   $5 = ($4|0)==(0);
   _lua_settop($L,-3);
   if (!($5)) {
    $$0$i1 = $0;
    STACKTOP = sp;return ($$0$i1|0);
   }
  }
 }
 $6 = (_lua_type($L,$ud)|0);
 $7 = (_lua_typename($L,$6)|0);
 HEAP32[$vararg_buffer>>2] = $tname;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $7;
 $8 = (_lua_pushfstring($L,7538,$vararg_buffer)|0);
 (_luaL_argerror($L,$ud,$8)|0);
 $$0$i1 = 0;
 STACKTOP = sp;return ($$0$i1|0);
}
function _luaL_checkoption($L,$narg,$def,$lst) {
 $L = $L|0;
 $narg = $narg|0;
 $def = $def|0;
 $lst = $lst|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $i$02 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = ($def|0)==(0|0);
 if ($0) {
  $2 = (_lua_tolstring($L,$narg,0)|0);
  $3 = ($2|0)==(0|0);
  if ($3) {
   $4 = (_lua_typename($L,4)|0);
   $5 = (_lua_type($L,$narg)|0);
   $6 = (_lua_typename($L,$5)|0);
   HEAP32[$vararg_buffer>>2] = $4;
   $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
   HEAP32[$vararg_ptr1>>2] = $6;
   $7 = (_lua_pushfstring($L,7538,$vararg_buffer)|0);
   (_luaL_argerror($L,$narg,$7)|0);
   $11 = 0;
  } else {
   $11 = $2;
  }
 } else {
  $1 = (_luaL_optlstring($L,$narg,$def,0)|0);
  $11 = $1;
 }
 $8 = HEAP32[$lst>>2]|0;
 $9 = ($8|0)==(0|0);
 L6: do {
  if (!($9)) {
   $10 = $8;$i$02 = 0;
   while(1) {
    $12 = (_strcmp($10,$11)|0);
    $13 = ($12|0)==(0);
    if ($13) {
     $$0 = $i$02;
     break;
    }
    $14 = (($i$02) + 1)|0;
    $15 = (($lst) + ($14<<2)|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = ($16|0)==(0|0);
    if ($17) {
     break L6;
    } else {
     $10 = $16;$i$02 = $14;
    }
   }
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 HEAP32[$vararg_buffer2>>2] = $11;
 $18 = (_lua_pushfstring($L,7558,$vararg_buffer2)|0);
 $19 = (_luaL_argerror($L,$narg,$18)|0);
 $$0 = $19;
 STACKTOP = sp;return ($$0|0);
}
function _luaL_optlstring($L,$narg,$def,$len) {
 $L = $L|0;
 $narg = $narg|0;
 $def = $def|0;
 $len = $len|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = (_lua_type($L,$narg)|0);
 $1 = ($0|0)<(1);
 if (!($1)) {
  $6 = (_lua_tolstring($L,$narg,$len)|0);
  $7 = ($6|0)==(0|0);
  if (!($7)) {
   $$0 = $6;
   STACKTOP = sp;return ($$0|0);
  }
  $8 = (_lua_typename($L,4)|0);
  $9 = (_lua_type($L,$narg)|0);
  $10 = (_lua_typename($L,$9)|0);
  HEAP32[$vararg_buffer>>2] = $8;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $10;
  $11 = (_lua_pushfstring($L,7538,$vararg_buffer)|0);
  (_luaL_argerror($L,$narg,$11)|0);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $2 = ($len|0)==(0|0);
 if ($2) {
  $$0 = $def;
  STACKTOP = sp;return ($$0|0);
 }
 $3 = ($def|0)==(0|0);
 if ($3) {
  $5 = 0;
 } else {
  $4 = (_strlen($def)|0);
  $5 = $4;
 }
 HEAP32[$len>>2] = $5;
 $$0 = $def;
 STACKTOP = sp;return ($$0|0);
}
function _luaL_checklstring($L,$narg,$len) {
 $L = $L|0;
 $narg = $narg|0;
 $len = $len|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = (_lua_tolstring($L,$narg,$len)|0);
 $1 = ($0|0)==(0|0);
 if (!($1)) {
  STACKTOP = sp;return ($0|0);
 }
 $2 = (_lua_typename($L,4)|0);
 $3 = (_lua_type($L,$narg)|0);
 $4 = (_lua_typename($L,$3)|0);
 HEAP32[$vararg_buffer>>2] = $2;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $4;
 $5 = (_lua_pushfstring($L,7538,$vararg_buffer)|0);
 (_luaL_argerror($L,$narg,$5)|0);
 STACKTOP = sp;return ($0|0);
}
function _luaL_checkstack($L,$space,$msg) {
 $L = $L|0;
 $space = $space|0;
 $msg = $msg|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = (($space) + 20)|0;
 $1 = (_lua_checkstack($L,$0)|0);
 $2 = ($1|0)==(0);
 if (!($2)) {
  STACKTOP = sp;return;
 }
 $3 = ($msg|0)==(0|0);
 if ($3) {
  (_luaL_error($L,8978,$vararg_buffer1)|0);
  STACKTOP = sp;return;
 } else {
  HEAP32[$vararg_buffer>>2] = $msg;
  (_luaL_error($L,7578,$vararg_buffer)|0);
  STACKTOP = sp;return;
 }
}
function _luaL_checktype($L,$narg,$t) {
 $L = $L|0;
 $narg = $narg|0;
 $t = $t|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = (_lua_type($L,$narg)|0);
 $1 = ($0|0)==($t|0);
 if ($1) {
  STACKTOP = sp;return;
 }
 $2 = (_lua_typename($L,$t)|0);
 $3 = (_lua_type($L,$narg)|0);
 $4 = (_lua_typename($L,$3)|0);
 HEAP32[$vararg_buffer>>2] = $2;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $4;
 $5 = (_lua_pushfstring($L,7538,$vararg_buffer)|0);
 (_luaL_argerror($L,$narg,$5)|0);
 STACKTOP = sp;return;
}
function _luaL_checkany($L,$narg) {
 $L = $L|0;
 $narg = $narg|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_lua_type($L,$narg)|0);
 $1 = ($0|0)==(-1);
 if (!($1)) {
  return;
 }
 (_luaL_argerror($L,$narg,8963)|0);
 return;
}
function _luaL_checknumber($L,$narg) {
 $L = $L|0;
 $narg = $narg|0;
 var $0 = 0.0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $isnum = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $isnum = sp + 8|0;
 $0 = (+_lua_tonumberx($L,$narg,$isnum));
 $1 = HEAP32[$isnum>>2]|0;
 $2 = ($1|0)==(0);
 if (!($2)) {
  STACKTOP = sp;return (+$0);
 }
 $3 = (_lua_typename($L,3)|0);
 $4 = (_lua_type($L,$narg)|0);
 $5 = (_lua_typename($L,$4)|0);
 HEAP32[$vararg_buffer>>2] = $3;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $5;
 $6 = (_lua_pushfstring($L,7538,$vararg_buffer)|0);
 (_luaL_argerror($L,$narg,$6)|0);
 STACKTOP = sp;return (+$0);
}
function _luaL_optnumber($L,$narg,$def) {
 $L = $L|0;
 $narg = $narg|0;
 $def = +$def;
 var $0 = 0, $1 = 0, $2 = 0.0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0.0, $isnum$i = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $isnum$i = sp + 8|0;
 $0 = (_lua_type($L,$narg)|0);
 $1 = ($0|0)<(1);
 if ($1) {
  $9 = $def;
  STACKTOP = sp;return (+$9);
 }
 $2 = (+_lua_tonumberx($L,$narg,$isnum$i));
 $3 = HEAP32[$isnum$i>>2]|0;
 $4 = ($3|0)==(0);
 if ($4) {
  $5 = (_lua_typename($L,3)|0);
  $6 = (_lua_type($L,$narg)|0);
  $7 = (_lua_typename($L,$6)|0);
  HEAP32[$vararg_buffer>>2] = $5;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $7;
  $8 = (_lua_pushfstring($L,7538,$vararg_buffer)|0);
  (_luaL_argerror($L,$narg,$8)|0);
 }
 $9 = $2;
 STACKTOP = sp;return (+$9);
}
function _luaL_checkinteger($L,$narg) {
 $L = $L|0;
 $narg = $narg|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $isnum = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $isnum = sp + 8|0;
 $0 = (_lua_tointegerx($L,$narg,$isnum)|0);
 $1 = HEAP32[$isnum>>2]|0;
 $2 = ($1|0)==(0);
 if (!($2)) {
  STACKTOP = sp;return ($0|0);
 }
 $3 = (_lua_typename($L,3)|0);
 $4 = (_lua_type($L,$narg)|0);
 $5 = (_lua_typename($L,$4)|0);
 HEAP32[$vararg_buffer>>2] = $3;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $5;
 $6 = (_lua_pushfstring($L,7538,$vararg_buffer)|0);
 (_luaL_argerror($L,$narg,$6)|0);
 STACKTOP = sp;return ($0|0);
}
function _luaL_checkunsigned($L,$narg) {
 $L = $L|0;
 $narg = $narg|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $isnum = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $isnum = sp + 8|0;
 $0 = (_lua_tounsignedx($L,$narg,$isnum)|0);
 $1 = HEAP32[$isnum>>2]|0;
 $2 = ($1|0)==(0);
 if (!($2)) {
  STACKTOP = sp;return ($0|0);
 }
 $3 = (_lua_typename($L,3)|0);
 $4 = (_lua_type($L,$narg)|0);
 $5 = (_lua_typename($L,$4)|0);
 HEAP32[$vararg_buffer>>2] = $3;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $5;
 $6 = (_lua_pushfstring($L,7538,$vararg_buffer)|0);
 (_luaL_argerror($L,$narg,$6)|0);
 STACKTOP = sp;return ($0|0);
}
function _luaL_optinteger($L,$narg,$def) {
 $L = $L|0;
 $narg = $narg|0;
 $def = $def|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $isnum$i = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $isnum$i = sp + 8|0;
 $0 = (_lua_type($L,$narg)|0);
 $1 = ($0|0)<(1);
 if ($1) {
  $9 = $def;
  STACKTOP = sp;return ($9|0);
 }
 $2 = (_lua_tointegerx($L,$narg,$isnum$i)|0);
 $3 = HEAP32[$isnum$i>>2]|0;
 $4 = ($3|0)==(0);
 if ($4) {
  $5 = (_lua_typename($L,3)|0);
  $6 = (_lua_type($L,$narg)|0);
  $7 = (_lua_typename($L,$6)|0);
  HEAP32[$vararg_buffer>>2] = $5;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $7;
  $8 = (_lua_pushfstring($L,7538,$vararg_buffer)|0);
  (_luaL_argerror($L,$narg,$8)|0);
 }
 $9 = $2;
 STACKTOP = sp;return ($9|0);
}
function _luaL_prepbuffsize($B,$sz) {
 $B = $B|0;
 $sz = $sz|0;
 var $$ = 0, $$pre = 0, $$pre2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = ((($B)) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($B)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($B)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($3) - ($5))|0;
 $7 = ($6>>>0)<($sz>>>0);
 if (!($7)) {
  $$pre2 = HEAP32[$B>>2]|0;
  $22 = $$pre2;$23 = $5;
  $21 = (($22) + ($23)|0);
  STACKTOP = sp;return ($21|0);
 }
 $8 = $3 << 1;
 $9 = (($8) - ($5))|0;
 $10 = ($9>>>0)<($sz>>>0);
 $11 = (($5) + ($sz))|0;
 $$ = $10 ? $11 : $8;
 $12 = ($$>>>0)<($5>>>0);
 $13 = (($$) - ($5))|0;
 $14 = ($13>>>0)<($sz>>>0);
 $or$cond = $12 | $14;
 if ($or$cond) {
  (_luaL_error($1,7598,$vararg_buffer)|0);
 }
 $15 = (_lua_newuserdata($1,$$)|0);
 $16 = HEAP32[$B>>2]|0;
 $17 = HEAP32[$4>>2]|0;
 _memcpy(($15|0),($16|0),($17|0))|0;
 $18 = HEAP32[$B>>2]|0;
 $19 = ((($B)) + 16|0);
 $20 = ($18|0)==($19|0);
 if (!($20)) {
  _lua_remove($1,-2);
 }
 HEAP32[$B>>2] = $15;
 HEAP32[$2>>2] = $$;
 $$pre = HEAP32[$4>>2]|0;
 $22 = $15;$23 = $$pre;
 $21 = (($22) + ($23)|0);
 STACKTOP = sp;return ($21|0);
}
function _luaL_addlstring($B,$s,$l) {
 $B = $B|0;
 $s = $s|0;
 $l = $l|0;
 var $$$i = 0, $$pre$i = 0, $$pre2$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond$i = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = ((($B)) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($B)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($B)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($3) - ($5))|0;
 $7 = ($6>>>0)<($l>>>0);
 if (!($7)) {
  $$pre2$i = HEAP32[$B>>2]|0;
  $22 = $$pre2$i;$23 = $5;
  $21 = (($22) + ($23)|0);
  _memcpy(($21|0),($s|0),($l|0))|0;
  $24 = HEAP32[$4>>2]|0;
  $25 = (($24) + ($l))|0;
  HEAP32[$4>>2] = $25;
  STACKTOP = sp;return;
 }
 $8 = $3 << 1;
 $9 = (($8) - ($5))|0;
 $10 = ($9>>>0)<($l>>>0);
 $11 = (($5) + ($l))|0;
 $$$i = $10 ? $11 : $8;
 $12 = ($$$i>>>0)<($5>>>0);
 $13 = (($$$i) - ($5))|0;
 $14 = ($13>>>0)<($l>>>0);
 $or$cond$i = $12 | $14;
 if ($or$cond$i) {
  (_luaL_error($1,7598,$vararg_buffer)|0);
 }
 $15 = (_lua_newuserdata($1,$$$i)|0);
 $16 = HEAP32[$B>>2]|0;
 $17 = HEAP32[$4>>2]|0;
 _memcpy(($15|0),($16|0),($17|0))|0;
 $18 = HEAP32[$B>>2]|0;
 $19 = ((($B)) + 16|0);
 $20 = ($18|0)==($19|0);
 if (!($20)) {
  _lua_remove($1,-2);
 }
 HEAP32[$B>>2] = $15;
 HEAP32[$2>>2] = $$$i;
 $$pre$i = HEAP32[$4>>2]|0;
 $22 = $15;$23 = $$pre$i;
 $21 = (($22) + ($23)|0);
 _memcpy(($21|0),($s|0),($l|0))|0;
 $24 = HEAP32[$4>>2]|0;
 $25 = (($24) + ($l))|0;
 HEAP32[$4>>2] = $25;
 STACKTOP = sp;return;
}
function _luaL_addstring($B,$s) {
 $B = $B|0;
 $s = $s|0;
 var $$$i$i = 0, $$pre$i$i = 0, $$pre2$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond$i$i = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = (_strlen($s)|0);
 $1 = ((($B)) + 12|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($B)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($B)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($4) - ($6))|0;
 $8 = ($7>>>0)<($0>>>0);
 if (!($8)) {
  $$pre2$i$i = HEAP32[$B>>2]|0;
  $23 = $$pre2$i$i;$24 = $6;
  $22 = (($23) + ($24)|0);
  _memcpy(($22|0),($s|0),($0|0))|0;
  $25 = HEAP32[$5>>2]|0;
  $26 = (($25) + ($0))|0;
  HEAP32[$5>>2] = $26;
  STACKTOP = sp;return;
 }
 $9 = $4 << 1;
 $10 = (($9) - ($6))|0;
 $11 = ($10>>>0)<($0>>>0);
 $12 = (($6) + ($0))|0;
 $$$i$i = $11 ? $12 : $9;
 $13 = ($$$i$i>>>0)<($6>>>0);
 $14 = (($$$i$i) - ($6))|0;
 $15 = ($14>>>0)<($0>>>0);
 $or$cond$i$i = $13 | $15;
 if ($or$cond$i$i) {
  (_luaL_error($2,7598,$vararg_buffer)|0);
 }
 $16 = (_lua_newuserdata($2,$$$i$i)|0);
 $17 = HEAP32[$B>>2]|0;
 $18 = HEAP32[$5>>2]|0;
 _memcpy(($16|0),($17|0),($18|0))|0;
 $19 = HEAP32[$B>>2]|0;
 $20 = ((($B)) + 16|0);
 $21 = ($19|0)==($20|0);
 if (!($21)) {
  _lua_remove($2,-2);
 }
 HEAP32[$B>>2] = $16;
 HEAP32[$3>>2] = $$$i$i;
 $$pre$i$i = HEAP32[$5>>2]|0;
 $23 = $16;$24 = $$pre$i$i;
 $22 = (($23) + ($24)|0);
 _memcpy(($22|0),($s|0),($0|0))|0;
 $25 = HEAP32[$5>>2]|0;
 $26 = (($25) + ($0))|0;
 HEAP32[$5>>2] = $26;
 STACKTOP = sp;return;
}
function _luaL_pushresult($B) {
 $B = $B|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($B)) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$B>>2]|0;
 $3 = ((($B)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 (_lua_pushlstring($1,$2,$4)|0);
 $5 = HEAP32[$B>>2]|0;
 $6 = ((($B)) + 16|0);
 $7 = ($5|0)==($6|0);
 if ($7) {
  return;
 }
 _lua_remove($1,-2);
 return;
}
function _luaL_pushresultsize($B,$sz) {
 $B = $B|0;
 $sz = $sz|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($B)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + ($sz))|0;
 HEAP32[$0>>2] = $2;
 $3 = ((($B)) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = HEAP32[$B>>2]|0;
 (_lua_pushlstring($4,$5,$2)|0);
 $6 = HEAP32[$B>>2]|0;
 $7 = ((($B)) + 16|0);
 $8 = ($6|0)==($7|0);
 if ($8) {
  return;
 }
 _lua_remove($4,-2);
 return;
}
function _luaL_addvalue($B) {
 $B = $B|0;
 var $$$i$i = 0, $$pre$i$i = 0, $$pre2$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $l = 0, $or$cond$i$i = 0, $vararg_buffer = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $l = sp + 4|0;
 $0 = ((($B)) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (_lua_tolstring($1,-1,$l)|0);
 $3 = HEAP32[$B>>2]|0;
 $4 = ((($B)) + 16|0);
 $5 = ($3|0)==($4|0);
 if (!($5)) {
  _lua_insert($1,-2);
 }
 $6 = HEAP32[$l>>2]|0;
 $7 = HEAP32[$0>>2]|0;
 $8 = ((($B)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($B)) + 8|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($9) - ($11))|0;
 $13 = ($12>>>0)<($6>>>0);
 if ($13) {
  $14 = $9 << 1;
  $15 = (($14) - ($11))|0;
  $16 = ($15>>>0)<($6>>>0);
  $17 = (($11) + ($6))|0;
  $$$i$i = $16 ? $17 : $14;
  $18 = ($$$i$i>>>0)<($11>>>0);
  $19 = (($$$i$i) - ($11))|0;
  $20 = ($19>>>0)<($6>>>0);
  $or$cond$i$i = $18 | $20;
  if ($or$cond$i$i) {
   (_luaL_error($7,7598,$vararg_buffer)|0);
  }
  $21 = (_lua_newuserdata($7,$$$i$i)|0);
  $22 = HEAP32[$B>>2]|0;
  $23 = HEAP32[$10>>2]|0;
  _memcpy(($21|0),($22|0),($23|0))|0;
  $24 = HEAP32[$B>>2]|0;
  $25 = ($24|0)==($4|0);
  if (!($25)) {
   _lua_remove($7,-2);
  }
  HEAP32[$B>>2] = $21;
  HEAP32[$8>>2] = $$$i$i;
  $$pre$i$i = HEAP32[$10>>2]|0;
  $27 = $21;$28 = $$pre$i$i;
 } else {
  $$pre2$i$i = HEAP32[$B>>2]|0;
  $27 = $$pre2$i$i;$28 = $11;
 }
 $26 = (($27) + ($28)|0);
 _memcpy(($26|0),($2|0),($6|0))|0;
 $29 = HEAP32[$10>>2]|0;
 $30 = (($29) + ($6))|0;
 HEAP32[$10>>2] = $30;
 $31 = HEAP32[$B>>2]|0;
 $32 = ($31|0)!=($4|0);
 $33 = $32 ? -2 : -1;
 _lua_remove($1,$33);
 STACKTOP = sp;return;
}
function _luaL_buffinit($L,$B) {
 $L = $L|0;
 $B = $B|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($B)) + 12|0);
 HEAP32[$0>>2] = $L;
 $1 = ((($B)) + 16|0);
 HEAP32[$B>>2] = $1;
 $2 = ((($B)) + 8|0);
 HEAP32[$2>>2] = 0;
 $3 = ((($B)) + 4|0);
 HEAP32[$3>>2] = 1024;
 return;
}
function _luaL_buffinitsize($L,$B,$sz) {
 $L = $L|0;
 $B = $B|0;
 $sz = $sz|0;
 var $$$i = 0, $$pre$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($B)) + 12|0);
 HEAP32[$0>>2] = $L;
 $1 = ((($B)) + 16|0);
 HEAP32[$B>>2] = $1;
 $2 = ((($B)) + 8|0);
 HEAP32[$2>>2] = 0;
 $3 = ((($B)) + 4|0);
 HEAP32[$3>>2] = 1024;
 $4 = ($sz>>>0)>(1024);
 if (!($4)) {
  $12 = $1;$13 = 0;
  $11 = (($12) + ($13)|0);
  return ($11|0);
 }
 $5 = ($sz>>>0)>(2048);
 $$$i = $5 ? $sz : 2048;
 $6 = (_lua_newuserdata($L,$$$i)|0);
 $7 = HEAP32[$B>>2]|0;
 $8 = HEAP32[$2>>2]|0;
 _memcpy(($6|0),($7|0),($8|0))|0;
 $9 = HEAP32[$B>>2]|0;
 $10 = ($9|0)==($1|0);
 if (!($10)) {
  _lua_remove($L,-2);
 }
 HEAP32[$B>>2] = $6;
 HEAP32[$3>>2] = $$$i;
 $$pre$i = HEAP32[$2>>2]|0;
 $12 = $6;$13 = $$pre$i;
 $11 = (($12) + ($13)|0);
 return ($11|0);
}
function _luaL_loadfilex($L,$filename,$mode) {
 $L = $L|0;
 $filename = $filename|0;
 $mode = $mode|0;
 var $$0 = 0, $$pr = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c = 0, $lf = 0, $or$cond = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer11 = 0, $vararg_buffer6 = 0, $vararg_ptr10 = 0, $vararg_ptr14 = 0, $vararg_ptr15 = 0, $vararg_ptr4 = 0;
 var $vararg_ptr5 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1088|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer11 = sp + 40|0;
 $vararg_buffer6 = sp + 24|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $lf = sp + 56|0;
 $c = sp + 52|0;
 $0 = (_lua_gettop($L)|0);
 $1 = (($0) + 1)|0;
 $2 = ($filename|0)==(0|0);
 if ($2) {
  (_lua_pushlstring($L,7615,6)|0);
  $3 = HEAP32[536]|0;
  $4 = ((($lf)) + 4|0);
  HEAP32[$4>>2] = $3;
 } else {
  HEAP32[$vararg_buffer>>2] = $filename;
  (_lua_pushfstring($L,7622,$vararg_buffer)|0);
  $5 = (_fopen($filename,12877)|0);
  $6 = ((($lf)) + 4|0);
  HEAP32[$6>>2] = $5;
  $7 = ($5|0)==(0|0);
  if ($7) {
   $8 = (___errno_location()|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = (_strerror($9)|0);
   $11 = (_lua_tolstring($L,$1,0)|0);
   $12 = ((($11)) + 1|0);
   HEAP32[$vararg_buffer1>>2] = 10584;
   $vararg_ptr4 = ((($vararg_buffer1)) + 4|0);
   HEAP32[$vararg_ptr4>>2] = $12;
   $vararg_ptr5 = ((($vararg_buffer1)) + 8|0);
   HEAP32[$vararg_ptr5>>2] = $10;
   (_lua_pushfstring($L,7626,$vararg_buffer1)|0);
   _lua_remove($L,$1);
   $$0 = 7;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $13 = (_skipcomment($lf,$c)|0);
 $14 = ($13|0)==(0);
 if (!($14)) {
  $15 = HEAP32[$lf>>2]|0;
  $16 = (($15) + 1)|0;
  HEAP32[$lf>>2] = $16;
  $17 = (((($lf)) + 8|0) + ($15)|0);
  HEAP8[$17>>0] = 10;
 }
 $18 = HEAP32[$c>>2]|0;
 $19 = ($18|0)==(27);
 $20 = ($filename|0)!=(0|0);
 $or$cond = $20 & $19;
 do {
  if ($or$cond) {
   $21 = ((($lf)) + 4|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = (_freopen($filename,7643,$22)|0);
   HEAP32[$21>>2] = $23;
   $24 = ($23|0)==(0|0);
   if (!($24)) {
    (_skipcomment($lf,$c)|0);
    $$pr = HEAP32[$c>>2]|0;
    $31 = $$pr;
    break;
   }
   $25 = (___errno_location()|0);
   $26 = HEAP32[$25>>2]|0;
   $27 = (_strerror($26)|0);
   $28 = (_lua_tolstring($L,$1,0)|0);
   $29 = ((($28)) + 1|0);
   HEAP32[$vararg_buffer6>>2] = 7646;
   $vararg_ptr9 = ((($vararg_buffer6)) + 4|0);
   HEAP32[$vararg_ptr9>>2] = $29;
   $vararg_ptr10 = ((($vararg_buffer6)) + 8|0);
   HEAP32[$vararg_ptr10>>2] = $27;
   (_lua_pushfstring($L,7626,$vararg_buffer6)|0);
   _lua_remove($L,$1);
   $$0 = 7;
   STACKTOP = sp;return ($$0|0);
  } else {
   $31 = $18;
  }
 } while(0);
 $30 = ($31|0)==(-1);
 if (!($30)) {
  $32 = $31&255;
  $33 = HEAP32[$lf>>2]|0;
  $34 = (($33) + 1)|0;
  HEAP32[$lf>>2] = $34;
  $35 = (((($lf)) + 8|0) + ($33)|0);
  HEAP8[$35>>0] = $32;
 }
 $36 = (_lua_tolstring($L,-1,0)|0);
 $37 = (_lua_load($L,164,$lf,$36,$mode)|0);
 $38 = ((($lf)) + 4|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = (_ferror($39)|0);
 if ($20) {
  (_fclose($39)|0);
 }
 $41 = ($40|0)==(0);
 if ($41) {
  _lua_remove($L,$1);
  $$0 = $37;
  STACKTOP = sp;return ($$0|0);
 } else {
  _lua_settop($L,$1);
  $42 = (___errno_location()|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = (_strerror($43)|0);
  $45 = (_lua_tolstring($L,$1,0)|0);
  $46 = ((($45)) + 1|0);
  HEAP32[$vararg_buffer11>>2] = 10332;
  $vararg_ptr14 = ((($vararg_buffer11)) + 4|0);
  HEAP32[$vararg_ptr14>>2] = $46;
  $vararg_ptr15 = ((($vararg_buffer11)) + 8|0);
  HEAP32[$vararg_ptr15>>2] = $44;
  (_lua_pushfstring($L,7626,$vararg_buffer11)|0);
  _lua_remove($L,$1);
  $$0 = 7;
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function _luaL_loadbufferx($L,$buff,$size,$name,$mode) {
 $L = $L|0;
 $buff = $buff|0;
 $size = $size|0;
 $name = $name|0;
 $mode = $mode|0;
 var $0 = 0, $1 = 0, $ls = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ls = sp;
 HEAP32[$ls>>2] = $buff;
 $0 = ((($ls)) + 4|0);
 HEAP32[$0>>2] = $size;
 $1 = (_lua_load($L,165,$ls,$name,$mode)|0);
 STACKTOP = sp;return ($1|0);
}
function _luaL_getmetafield($L,$obj,$event) {
 $L = $L|0;
 $obj = $obj|0;
 $event = $event|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_lua_getmetatable($L,$obj)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $$0 = 0;
  return ($$0|0);
 }
 (_lua_pushstring($L,$event)|0);
 _lua_rawget($L,-2);
 $2 = (_lua_type($L,-1)|0);
 $3 = ($2|0)==(0);
 if ($3) {
  _lua_settop($L,-3);
  $$0 = 0;
  return ($$0|0);
 } else {
  _lua_remove($L,-2);
  $$0 = 1;
  return ($$0|0);
 }
 return (0)|0;
}
function _luaL_callmeta($L,$obj,$event) {
 $L = $L|0;
 $obj = $obj|0;
 $event = $event|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_lua_absindex($L,$obj)|0);
 $1 = (_lua_getmetatable($L,$0)|0);
 $2 = ($1|0)==(0);
 if ($2) {
  $$0 = 0;
  return ($$0|0);
 }
 (_lua_pushstring($L,$event)|0);
 _lua_rawget($L,-2);
 $3 = (_lua_type($L,-1)|0);
 $4 = ($3|0)==(0);
 if ($4) {
  _lua_settop($L,-3);
  $$0 = 0;
  return ($$0|0);
 } else {
  _lua_remove($L,-2);
  _lua_pushvalue($L,$0);
  _lua_callk($L,1,1,0,0);
  $$0 = 1;
  return ($$0|0);
 }
 return (0)|0;
}
function _luaL_len($L,$idx) {
 $L = $L|0;
 $idx = $idx|0;
 var $0 = 0, $1 = 0, $2 = 0, $isnum = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $isnum = sp + 4|0;
 _lua_len($L,$idx);
 $0 = (_lua_tointegerx($L,-1,$isnum)|0);
 $1 = HEAP32[$isnum>>2]|0;
 $2 = ($1|0)==(0);
 if ($2) {
  (_luaL_error($L,7653,$vararg_buffer)|0);
 }
 _lua_settop($L,-2);
 STACKTOP = sp;return ($0|0);
}
function _luaL_tolstring($L,$idx,$len) {
 $L = $L|0;
 $idx = $idx|0;
 $len = $len|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = (_luaL_callmeta($L,$idx,10356)|0);
 $1 = ($0|0)==(0);
 L1: do {
  if ($1) {
   $2 = (_lua_type($L,$idx)|0);
   switch ($2|0) {
   case 4: case 3:  {
    _lua_pushvalue($L,$idx);
    break L1;
    break;
   }
   case 1:  {
    $3 = (_lua_toboolean($L,$idx)|0);
    $4 = ($3|0)!=(0);
    $5 = $4 ? 8721 : 8662;
    (_lua_pushstring($L,$5)|0);
    break L1;
    break;
   }
   case 0:  {
    (_lua_pushlstring($L,8698,3)|0);
    break L1;
    break;
   }
   default: {
    $6 = (_lua_type($L,$idx)|0);
    $7 = (_lua_typename($L,$6)|0);
    $8 = (_lua_topointer($L,$idx)|0);
    HEAP32[$vararg_buffer>>2] = $7;
    $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
    HEAP32[$vararg_ptr1>>2] = $8;
    (_lua_pushfstring($L,7683,$vararg_buffer)|0);
    break L1;
   }
   }
  }
 } while(0);
 $9 = (_lua_tolstring($L,-1,$len)|0);
 STACKTOP = sp;return ($9|0);
}
function _luaL_pushmodule($L,$modname,$sizehint) {
 $L = $L|0;
 $modname = $modname|0;
 $sizehint = $sizehint|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 (_luaL_findtable($L,-1001000,12508,1)|0);
 _lua_getfield($L,-1,$modname);
 $0 = (_lua_type($L,-1)|0);
 $1 = ($0|0)==(5);
 if ($1) {
  _lua_remove($L,-2);
  STACKTOP = sp;return;
 }
 _lua_settop($L,-2);
 _lua_rawgeti($L,-1001000,2);
 $2 = (_luaL_findtable($L,0,$modname,$sizehint)|0);
 $3 = ($2|0)==(0|0);
 if (!($3)) {
  HEAP32[$vararg_buffer>>2] = $modname;
  (_luaL_error($L,7690,$vararg_buffer)|0);
 }
 _lua_pushvalue($L,-1);
 _lua_setfield($L,-3,$modname);
 _lua_remove($L,-2);
 STACKTOP = sp;return;
}
function _luaL_checkversion_($L,$ver) {
 $L = $L|0;
 $ver = +$ver;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0.0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer4 = 0, $vararg_ptr3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer4 = sp + 24|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = (_lua_version($L)|0);
 $1 = (_lua_version(0)|0);
 $2 = ($0|0)==($1|0);
 if ($2) {
  $3 = +HEAPF64[$0>>3];
  $4 = $3 != $ver;
  if ($4) {
   HEAPF64[$vararg_buffer1>>3] = $ver;
   $vararg_ptr3 = ((($vararg_buffer1)) + 8|0);
   HEAPF64[$vararg_ptr3>>3] = $3;
   (_luaL_error($L,7746,$vararg_buffer1)|0);
  }
 } else {
  (_luaL_error($L,7720,$vararg_buffer)|0);
 }
 _lua_pushnumber($L,-4660.0);
 $5 = (_lua_tointegerx($L,-1,0)|0);
 $6 = ($5|0)==(-4660);
 if ($6) {
  $7 = (_lua_tounsignedx($L,-1,0)|0);
  $8 = ($7|0)==(-4660);
  if ($8) {
   _lua_settop($L,-2);
   STACKTOP = sp;return;
  }
 }
 (_luaL_error($L,7800,$vararg_buffer4)|0);
 _lua_settop($L,-2);
 STACKTOP = sp;return;
}
function _luaL_setfuncs($L,$l,$nup) {
 $L = $L|0;
 $l = $l|0;
 $nup = $nup|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $i$01$us = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 _luaL_checkversion_($L,502.0);
 $0 = (($nup) + 20)|0;
 $1 = (_lua_checkstack($L,$0)|0);
 $2 = ($1|0)==(0);
 if ($2) {
  HEAP32[$vararg_buffer>>2] = 7868;
  (_luaL_error($L,7578,$vararg_buffer)|0);
 }
 $3 = HEAP32[$l>>2]|0;
 $4 = ($3|0)==(0|0);
 if ($4) {
  $25 = $nup ^ -1;
  _lua_settop($L,$25);
  STACKTOP = sp;return;
 }
 $5 = ($nup|0)>(0);
 $6 = (-2 - ($nup))|0;
 $7 = (0 - ($nup))|0;
 if ($5) {
  $12 = $l;$9 = $l;
 } else {
  $18 = $l;$21 = $l;
  while(1) {
   $17 = ((($18)) + 4|0);
   $19 = HEAP32[$17>>2]|0;
   _lua_pushcclosure($L,$19,$nup);
   $20 = HEAP32[$21>>2]|0;
   _lua_setfield($L,$6,$20);
   $22 = ((($18)) + 8|0);
   $23 = HEAP32[$22>>2]|0;
   $24 = ($23|0)==(0|0);
   if ($24) {
    break;
   } else {
    $18 = $22;$21 = $22;
   }
  }
  $25 = $nup ^ -1;
  _lua_settop($L,$25);
  STACKTOP = sp;return;
 }
 while(1) {
  $i$01$us = 0;
  while(1) {
   _lua_pushvalue($L,$7);
   $16 = (($i$01$us) + 1)|0;
   $exitcond = ($16|0)==($nup|0);
   if ($exitcond) {
    break;
   } else {
    $i$01$us = $16;
   }
  }
  $8 = ((($9)) + 4|0);
  $10 = HEAP32[$8>>2]|0;
  _lua_pushcclosure($L,$10,$nup);
  $11 = HEAP32[$12>>2]|0;
  _lua_setfield($L,$6,$11);
  $13 = ((($9)) + 8|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ($14|0)==(0|0);
  if ($15) {
   break;
  } else {
   $12 = $13;$9 = $13;
  }
 }
 $25 = $nup ^ -1;
 _lua_settop($L,$25);
 STACKTOP = sp;return;
}
function _luaL_getsubtable($L,$idx,$fname) {
 $L = $L|0;
 $idx = $idx|0;
 $fname = $fname|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _lua_getfield($L,$idx,$fname);
 $0 = (_lua_type($L,-1)|0);
 $1 = ($0|0)==(5);
 if ($1) {
  $$0 = 1;
  return ($$0|0);
 }
 _lua_settop($L,-2);
 $2 = (_lua_absindex($L,$idx)|0);
 _lua_createtable($L,0,0);
 _lua_pushvalue($L,-1);
 _lua_setfield($L,$2,$fname);
 $$0 = 0;
 return ($$0|0);
}
function _luaL_requiref($L,$modname,$openf,$glb) {
 $L = $L|0;
 $modname = $modname|0;
 $openf = $openf|0;
 $glb = $glb|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _lua_pushcclosure($L,$openf,0);
 (_lua_pushstring($L,$modname)|0);
 _lua_callk($L,1,1,0,0);
 (_luaL_getsubtable($L,-1001000,12508)|0);
 _lua_pushvalue($L,-2);
 _lua_setfield($L,-2,$modname);
 _lua_settop($L,-2);
 $0 = ($glb|0)==(0);
 if ($0) {
  return;
 }
 _lua_pushvalue($L,-1);
 _lua_setglobal($L,$modname);
 return;
}
function _luaL_gsub($L,$s,$p,$r) {
 $L = $L|0;
 $s = $s|0;
 $p = $p|0;
 $r = $r|0;
 var $$$i$i = 0, $$$i$i$i = 0, $$$i$i$i4 = 0, $$0$lcssa = 0, $$08 = 0, $$pre$i$i = 0, $$pre$i$i$i = 0, $$pre$i$i$i6 = 0, $$pre10 = 0, $$pre11 = 0, $$pre2$i$i = 0, $$pre2$i$i$i = 0, $$pre2$i$i$i2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $9 = 0, $b = 0;
 var $or$cond$i$i = 0, $or$cond$i$i$i = 0, $or$cond$i$i$i5 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1072|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $b = sp + 24|0;
 $0 = (_strlen($p)|0);
 $1 = ((($b)) + 12|0);
 HEAP32[$1>>2] = $L;
 $2 = ((($b)) + 16|0);
 HEAP32[$b>>2] = $2;
 $3 = ((($b)) + 8|0);
 HEAP32[$3>>2] = 0;
 $4 = ((($b)) + 4|0);
 HEAP32[$4>>2] = 1024;
 $5 = (_strstr($s,$p)|0);
 $6 = ($5|0)==(0|0);
 if ($6) {
  $$0$lcssa = $s;$60 = 1024;$61 = 0;$70 = $L;
 } else {
  $$08 = $s;$12 = 1024;$13 = 0;$22 = $L;$8 = $5;
  while(1) {
   $7 = $8;
   $9 = $$08;
   $10 = (($7) - ($9))|0;
   $11 = (($12) - ($13))|0;
   $14 = ($11>>>0)<($10>>>0);
   if ($14) {
    $15 = $12 << 1;
    $16 = (($15) - ($13))|0;
    $17 = ($16>>>0)<($10>>>0);
    $18 = (($13) + ($10))|0;
    $$$i$i = $17 ? $18 : $15;
    $19 = ($$$i$i>>>0)<($13>>>0);
    $20 = (($$$i$i) - ($13))|0;
    $21 = ($20>>>0)<($10>>>0);
    $or$cond$i$i = $19 | $21;
    if ($or$cond$i$i) {
     (_luaL_error($22,7598,$vararg_buffer)|0);
    }
    $23 = (_lua_newuserdata($22,$$$i$i)|0);
    $24 = HEAP32[$b>>2]|0;
    $25 = HEAP32[$3>>2]|0;
    _memcpy(($23|0),($24|0),($25|0))|0;
    $26 = HEAP32[$b>>2]|0;
    $27 = ($26|0)==($2|0);
    if (!($27)) {
     _lua_remove($22,-2);
    }
    HEAP32[$b>>2] = $23;
    HEAP32[$4>>2] = $$$i$i;
    $$pre$i$i = HEAP32[$3>>2]|0;
    $29 = $23;$30 = $$pre$i$i;
   } else {
    $$pre2$i$i = HEAP32[$b>>2]|0;
    $29 = $$pre2$i$i;$30 = $13;
   }
   $28 = (($29) + ($30)|0);
   _memcpy(($28|0),($$08|0),($10|0))|0;
   $31 = HEAP32[$3>>2]|0;
   $32 = (($31) + ($10))|0;
   HEAP32[$3>>2] = $32;
   $33 = (_strlen($r)|0);
   $34 = HEAP32[$1>>2]|0;
   $35 = HEAP32[$4>>2]|0;
   $36 = (($35) - ($32))|0;
   $37 = ($36>>>0)<($33>>>0);
   if ($37) {
    $38 = $35 << 1;
    $39 = (($38) - ($32))|0;
    $40 = ($39>>>0)<($33>>>0);
    $41 = (($32) + ($33))|0;
    $$$i$i$i = $40 ? $41 : $38;
    $42 = ($$$i$i$i>>>0)<($32>>>0);
    $43 = (($$$i$i$i) - ($32))|0;
    $44 = ($43>>>0)<($33>>>0);
    $or$cond$i$i$i = $42 | $44;
    if ($or$cond$i$i$i) {
     (_luaL_error($34,7598,$vararg_buffer1)|0);
    }
    $45 = (_lua_newuserdata($34,$$$i$i$i)|0);
    $46 = HEAP32[$b>>2]|0;
    $47 = HEAP32[$3>>2]|0;
    _memcpy(($45|0),($46|0),($47|0))|0;
    $48 = HEAP32[$b>>2]|0;
    $49 = ($48|0)==($2|0);
    if (!($49)) {
     _lua_remove($34,-2);
    }
    HEAP32[$b>>2] = $45;
    HEAP32[$4>>2] = $$$i$i$i;
    $$pre$i$i$i = HEAP32[$3>>2]|0;
    $51 = $45;$52 = $$pre$i$i$i;
   } else {
    $$pre2$i$i$i = HEAP32[$b>>2]|0;
    $51 = $$pre2$i$i$i;$52 = $32;
   }
   $50 = (($51) + ($52)|0);
   _memcpy(($50|0),($r|0),($33|0))|0;
   $53 = HEAP32[$3>>2]|0;
   $54 = (($53) + ($33))|0;
   HEAP32[$3>>2] = $54;
   $55 = (($8) + ($0)|0);
   $56 = (_strstr($55,$p)|0);
   $57 = ($56|0)==(0|0);
   $$pre10 = HEAP32[$1>>2]|0;
   $$pre11 = HEAP32[$4>>2]|0;
   if ($57) {
    $$0$lcssa = $55;$60 = $$pre11;$61 = $54;$70 = $$pre10;
    break;
   } else {
    $$08 = $55;$12 = $$pre11;$13 = $54;$22 = $$pre10;$8 = $56;
   }
  }
 }
 $58 = (_strlen($$0$lcssa)|0);
 $59 = (($60) - ($61))|0;
 $62 = ($59>>>0)<($58>>>0);
 if ($62) {
  $63 = $60 << 1;
  $64 = (($63) - ($61))|0;
  $65 = ($64>>>0)<($58>>>0);
  $66 = (($61) + ($58))|0;
  $$$i$i$i4 = $65 ? $66 : $63;
  $67 = ($$$i$i$i4>>>0)<($61>>>0);
  $68 = (($$$i$i$i4) - ($61))|0;
  $69 = ($68>>>0)<($58>>>0);
  $or$cond$i$i$i5 = $67 | $69;
  if ($or$cond$i$i$i5) {
   (_luaL_error($70,7598,$vararg_buffer3)|0);
  }
  $71 = (_lua_newuserdata($70,$$$i$i$i4)|0);
  $72 = HEAP32[$b>>2]|0;
  $73 = HEAP32[$3>>2]|0;
  _memcpy(($71|0),($72|0),($73|0))|0;
  $74 = HEAP32[$b>>2]|0;
  $75 = ($74|0)==($2|0);
  if (!($75)) {
   _lua_remove($70,-2);
  }
  HEAP32[$b>>2] = $71;
  HEAP32[$4>>2] = $$$i$i$i4;
  $$pre$i$i$i6 = HEAP32[$3>>2]|0;
  $77 = $71;$78 = $$pre$i$i$i6;
 } else {
  $$pre2$i$i$i2 = HEAP32[$b>>2]|0;
  $77 = $$pre2$i$i$i2;$78 = $61;
 }
 $76 = (($77) + ($78)|0);
 _memcpy(($76|0),($$0$lcssa|0),($58|0))|0;
 $79 = HEAP32[$3>>2]|0;
 $80 = (($79) + ($58))|0;
 HEAP32[$3>>2] = $80;
 $81 = HEAP32[$1>>2]|0;
 $82 = HEAP32[$b>>2]|0;
 (_lua_pushlstring($81,$82,$80)|0);
 $83 = HEAP32[$b>>2]|0;
 $84 = ($83|0)==($2|0);
 if ($84) {
  $85 = (_lua_tolstring($L,-1,0)|0);
  STACKTOP = sp;return ($85|0);
 }
 _lua_remove($81,-2);
 $85 = (_lua_tolstring($L,-1,0)|0);
 STACKTOP = sp;return ($85|0);
}
function _luaL_newstate() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_lua_newstate(166,0)|0);
 $1 = ($0|0)==(0|0);
 if ($1) {
  return ($0|0);
 }
 (_lua_atpanic($0,167)|0);
 return ($0|0);
}
function _pushglobalfuncname($L,$ar) {
 $L = $L|0;
 $ar = $ar|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_lua_gettop($L)|0);
 (_lua_getinfo($L,12634,$ar)|0);
 _lua_rawgeti($L,-1001000,2);
 $1 = (($0) + 1)|0;
 $2 = (_findfield($L,$1,2)|0);
 $3 = ($2|0)==(0);
 if ($3) {
  _lua_settop($L,$0);
  $$0 = 0;
  return ($$0|0);
 } else {
  _lua_copy($L,-1,$1);
  _lua_settop($L,-3);
  $$0 = 1;
  return ($$0|0);
 }
 return (0)|0;
}
function _skipcomment($lf,$cp) {
 $lf = $lf|0;
 $cp = $cp|0;
 var $$0 = 0, $$0$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$lf>>2] = 0;
 $0 = ((($lf)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (_getc($1)|0);
 L1: do {
  switch ($2|0) {
  case -1:  {
   label = 5;
   break;
  }
  case 239:  {
   $3 = HEAP32[$lf>>2]|0;
   $4 = (($3) + 1)|0;
   HEAP32[$lf>>2] = $4;
   $5 = (((($lf)) + 8|0) + ($3)|0);
   HEAP8[$5>>0] = -17;
   $6 = HEAP32[$0>>2]|0;
   $7 = (_getc($6)|0);
   switch ($7|0) {
   case -1:  {
    label = 5;
    break L1;
    break;
   }
   case 187:  {
    break;
   }
   default: {
    $$0$i = $7;
    break L1;
   }
   }
   $8 = HEAP32[$lf>>2]|0;
   $9 = (($8) + 1)|0;
   HEAP32[$lf>>2] = $9;
   $10 = (((($lf)) + 8|0) + ($8)|0);
   HEAP8[$10>>0] = -69;
   $11 = HEAP32[$0>>2]|0;
   $12 = (_getc($11)|0);
   switch ($12|0) {
   case -1:  {
    label = 5;
    break L1;
    break;
   }
   case 191:  {
    break;
   }
   default: {
    $$0$i = $12;
    break L1;
   }
   }
   $13 = HEAP32[$lf>>2]|0;
   $14 = (((($lf)) + 8|0) + ($13)|0);
   HEAP8[$14>>0] = -65;
   HEAP32[$lf>>2] = 0;
   $15 = HEAP32[$0>>2]|0;
   $16 = (_getc($15)|0);
   $$0$i = $16;
   break;
  }
  default: {
   $$0$i = $2;
  }
  }
 } while(0);
 if ((label|0) == 5) {
  HEAP32[$cp>>2] = -1;
  $$0 = 0;
  return ($$0|0);
 }
 HEAP32[$cp>>2] = $$0$i;
 $17 = ($$0$i|0)==(35);
 if (!($17)) {
  $$0 = 0;
  return ($$0|0);
 }
 L11: while(1) {
  $18 = HEAP32[$0>>2]|0;
  $19 = (_getc($18)|0);
  switch ($19|0) {
  case 10: case -1:  {
   break L11;
   break;
  }
  default: {
  }
  }
 }
 $20 = HEAP32[$0>>2]|0;
 $21 = (_getc($20)|0);
 HEAP32[$cp>>2] = $21;
 $$0 = 1;
 return ($$0|0);
}
function _getF($L,$ud,$size) {
 $L = $L|0;
 $ud = $ud|0;
 $size = $size|0;
 var $$0 = 0, $$pre = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$ud>>2]|0;
 $1 = ($0|0)>(0);
 if ($1) {
  HEAP32[$size>>2] = $0;
  HEAP32[$ud>>2] = 0;
  $$pre = ((($ud)) + 8|0);
  $$0 = $$pre;
  return ($$0|0);
 }
 $2 = ((($ud)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (_feof($3)|0);
 $5 = ($4|0)==(0);
 if (!($5)) {
  $$0 = 0;
  return ($$0|0);
 }
 $6 = ((($ud)) + 8|0);
 $7 = HEAP32[$2>>2]|0;
 $8 = (_fread($6,1,1024,$7)|0);
 HEAP32[$size>>2] = $8;
 $$0 = $6;
 return ($$0|0);
}
function _getS($L,$ud,$size) {
 $L = $L|0;
 $ud = $ud|0;
 $size = $size|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($ud)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if ($2) {
  $$0 = 0;
  return ($$0|0);
 }
 HEAP32[$size>>2] = $1;
 HEAP32[$0>>2] = 0;
 $3 = HEAP32[$ud>>2]|0;
 $$0 = $3;
 return ($$0|0);
}
function _luaL_findtable($L,$idx,$fname,$szhint) {
 $L = $L|0;
 $idx = $idx|0;
 $fname = $fname|0;
 $szhint = $szhint|0;
 var $$0 = 0, $$01 = 0, $$01$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $e$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($idx|0)==(0);
 if ($0) {
  $$01 = $fname;
 } else {
  _lua_pushvalue($L,$idx);
  $$01 = $fname;
 }
 while(1) {
  $1 = (_strchr($$01,46)|0);
  $2 = ($1|0)==(0|0);
  if ($2) {
   $3 = (_strlen($$01)|0);
   $4 = (($$01) + ($3)|0);
   $e$0 = $4;
  } else {
   $e$0 = $1;
  }
  $5 = $e$0;
  $6 = $$01;
  $7 = (($5) - ($6))|0;
  (_lua_pushlstring($L,$$01,$7)|0);
  _lua_rawget($L,-2);
  $8 = (_lua_type($L,-1)|0);
  $9 = ($8|0)==(0);
  if ($9) {
   _lua_settop($L,-2);
   $10 = HEAP8[$e$0>>0]|0;
   $11 = ($10<<24>>24)==(46);
   $12 = $11 ? 1 : $szhint;
   _lua_createtable($L,0,$12);
   (_lua_pushlstring($L,$$01,$7)|0);
   _lua_pushvalue($L,-2);
   _lua_settable($L,-4);
  } else {
   $13 = (_lua_type($L,-1)|0);
   $14 = ($13|0)==(5);
   if (!($14)) {
    $$01$lcssa = $$01;
    break;
   }
  }
  _lua_remove($L,-2);
  $15 = ((($e$0)) + 1|0);
  $16 = HEAP8[$e$0>>0]|0;
  $17 = ($16<<24>>24)==(46);
  if ($17) {
   $$01 = $15;
  } else {
   $$0 = 0;
   label = 10;
   break;
  }
 }
 if ((label|0) == 10) {
  return ($$0|0);
 }
 _lua_settop($L,-3);
 $$0 = $$01$lcssa;
 return ($$0|0);
}
function _l_alloc($ud,$ptr,$osize,$nsize) {
 $ud = $ud|0;
 $ptr = $ptr|0;
 $osize = $osize|0;
 $nsize = $nsize|0;
 var $$0 = 0, $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($nsize|0)==(0);
 if ($0) {
  _free($ptr);
  $$0 = 0;
  return ($$0|0);
 } else {
  $1 = (_realloc($ptr,$nsize)|0);
  $$0 = $1;
  return ($$0|0);
 }
 return (0)|0;
}
function _panic($L) {
 $L = $L|0;
 var $0 = 0, $1 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = HEAP32[2140>>2]|0;
 $1 = (_lua_tolstring($L,-1,0)|0);
 HEAP32[$vararg_buffer>>2] = $1;
 (_fprintf($0,7886,$vararg_buffer)|0);
 (_fflush($0)|0);
 STACKTOP = sp;return 0;
}
function _findfield($L,$objidx,$level) {
 $L = $L|0;
 $objidx = $objidx|0;
 $level = $level|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($level|0)==(0);
 if ($0) {
  $$0 = 0;
  return ($$0|0);
 }
 $1 = (_lua_type($L,-1)|0);
 $2 = ($1|0)==(5);
 if (!($2)) {
  $$0 = 0;
  return ($$0|0);
 }
 _lua_pushnil($L);
 $3 = (_lua_next($L,-2)|0);
 $4 = ($3|0)==(0);
 if ($4) {
  $$0 = 0;
  return ($$0|0);
 }
 $5 = (($level) + -1)|0;
 while(1) {
  $6 = (_lua_type($L,-2)|0);
  $7 = ($6|0)==(4);
  if ($7) {
   $8 = (_lua_rawequal($L,$objidx,-1)|0);
   $9 = ($8|0)==(0);
   if (!($9)) {
    label = 7;
    break;
   }
   $10 = (_findfield($L,$objidx,$5)|0);
   $11 = ($10|0)==(0);
   if (!($11)) {
    label = 9;
    break;
   }
  }
  _lua_settop($L,-2);
  $12 = (_lua_next($L,-2)|0);
  $13 = ($12|0)==(0);
  if ($13) {
   $$0 = 0;
   label = 11;
   break;
  }
 }
 if ((label|0) == 7) {
  _lua_settop($L,-2);
  $$0 = 1;
  return ($$0|0);
 }
 else if ((label|0) == 9) {
  _lua_remove($L,-2);
  (_lua_pushlstring($L,20752,1)|0);
  _lua_insert($L,-2);
  _lua_concat($L,3);
  $$0 = 1;
  return ($$0|0);
 }
 else if ((label|0) == 11) {
  return ($$0|0);
 }
 return (0)|0;
}
function _luaL_openlibs($L) {
 $L = $L|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _luaL_requiref($L,8791,168,1);
 _lua_settop($L,-2);
 _luaL_requiref($L,7936,169,1);
 _lua_settop($L,-2);
 _luaL_requiref($L,7944,170,1);
 _lua_settop($L,-2);
 _luaL_requiref($L,7954,171,1);
 _lua_settop($L,-2);
 _luaL_requiref($L,7960,172,1);
 _lua_settop($L,-2);
 _luaL_requiref($L,7963,173,1);
 _lua_settop($L,-2);
 _luaL_requiref($L,7966,174,1);
 _lua_settop($L,-2);
 _luaL_requiref($L,7973,175,1);
 _lua_settop($L,-2);
 _luaL_requiref($L,7979,176,1);
 _lua_settop($L,-2);
 _luaL_requiref($L,9683,177,1);
 _lua_settop($L,-2);
 (_luaL_getsubtable($L,-1001000,12523)|0);
 _lua_settop($L,-2);
 return;
}
function _luaK_nil($fs,$from,$n) {
 $fs = $fs|0;
 $from = $from|0;
 $n = $n|0;
 var $$from = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $l$0 = 0;
 var $or$cond = 0, $or$cond2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($n) + ($from))|0;
 $1 = (($0) + -1)|0;
 $2 = ((($fs)) + 20|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($fs)) + 24|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($3|0)>($5|0);
 do {
  if ($6) {
   $7 = (($3) + -1)|0;
   $8 = HEAP32[$fs>>2]|0;
   $9 = ((($8)) + 12|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = (($10) + ($7<<2)|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = $12 & 63;
   $14 = ($13|0)==(4);
   if ($14) {
    $15 = $12 >>> 6;
    $16 = $15 & 255;
    $17 = $12 >>> 23;
    $18 = (($16) + ($17))|0;
    $19 = ($16|0)>($from|0);
    $20 = (($18) + 1)|0;
    $21 = ($20|0)<($from|0);
    $or$cond = $19 | $21;
    if ($or$cond) {
     $22 = ($16|0)<($from|0);
     $23 = ($16|0)>($0|0);
     $or$cond2 = $22 | $23;
     if ($or$cond2) {
      break;
     }
    }
    $24 = ($16|0)<($from|0);
    $$from = $24 ? $16 : $from;
    $25 = ($18|0)>($1|0);
    $l$0 = $25 ? $18 : $1;
    $26 = $12 & 8372287;
    $27 = $$from << 6;
    $28 = $27 & 16320;
    $29 = (($l$0) - ($$from))|0;
    $30 = $29 << 23;
    $31 = $30 | $28;
    $32 = $31 | $26;
    HEAP32[$11>>2] = $32;
    return;
   }
  }
 } while(0);
 $33 = $from << 6;
 $34 = $n << 23;
 $35 = (($34) + -8388608)|0;
 $36 = $33 | $35;
 $37 = $36 | 4;
 (_luaK_code($fs,$37)|0);
 return;
}
function _luaK_codeABC($fs,$o,$a,$b,$c) {
 $fs = $fs|0;
 $o = $o|0;
 $a = $a|0;
 $b = $b|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $a << 6;
 $1 = $0 | $o;
 $2 = $b << 23;
 $3 = $1 | $2;
 $4 = $c << 14;
 $5 = $3 | $4;
 $6 = (_luaK_code($fs,$5)|0);
 return ($6|0);
}
function _luaK_jump($fs) {
 $fs = $fs|0;
 var $$0$i$i = 0, $$lcssa = 0, $$lcssa6 = 0, $$neg$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $fs$idx$val$i = 0, $fs$idx$val$idx$i = 0, $fs$idx$val$idx$val$i = 0, $ispos$i$i = 0, $list$0$i = 0, $list$0$i$lcssa = 0, $neg$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($fs)) + 28|0);
 $1 = HEAP32[$0>>2]|0;
 HEAP32[$0>>2] = -1;
 $2 = (_luaK_code($fs,2147450903)|0);
 $3 = ($1|0)==(-1);
 if ($3) {
  $22 = $2;
  return ($22|0);
 }
 $4 = ($2|0)==(-1);
 if ($4) {
  $22 = $1;
  return ($22|0);
 }
 $fs$idx$val$i = HEAP32[$fs>>2]|0;
 $fs$idx$val$idx$i = ((($fs$idx$val$i)) + 12|0);
 $fs$idx$val$idx$val$i = HEAP32[$fs$idx$val$idx$i>>2]|0;
 $list$0$i = $2;
 while(1) {
  $5 = (($fs$idx$val$idx$val$i) + ($list$0$i<<2)|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = $6 >>> 14;
  $8 = (($7) + -131071)|0;
  $9 = ($8|0)==(-1);
  $10 = (($list$0$i) + 1)|0;
  $11 = (($10) + ($8))|0;
  $$0$i$i = $9 ? -1 : $11;
  $12 = ($$0$i$i|0)==(-1);
  if ($12) {
   $$lcssa = $5;$$lcssa6 = $6;$list$0$i$lcssa = $list$0$i;
   break;
  } else {
   $list$0$i = $$0$i$i;
  }
 }
 $$neg$i$i = $list$0$i$lcssa ^ -1;
 $13 = (($1) + ($$neg$i$i))|0;
 $ispos$i$i = ($13|0)>(-1);
 $neg$i$i = (0 - ($13))|0;
 $14 = $ispos$i$i ? $13 : $neg$i$i;
 $15 = ($14|0)>(131071);
 if ($15) {
  $16 = ((($fs)) + 12|0);
  $17 = HEAP32[$16>>2]|0;
  _luaX_syntaxerror($17,7984);
  // unreachable;
 }
 $18 = $$lcssa6 & 16383;
 $19 = $13 << 14;
 $20 = (($19) + 2147467264)|0;
 $21 = $20 | $18;
 HEAP32[$$lcssa>>2] = $21;
 $22 = $2;
 return ($22|0);
}
function _luaK_codeABx($fs,$o,$a,$bc) {
 $fs = $fs|0;
 $o = $o|0;
 $a = $a|0;
 $bc = $bc|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $a << 6;
 $1 = $0 | $o;
 $2 = $bc << 14;
 $3 = $1 | $2;
 $4 = (_luaK_code($fs,$3)|0);
 return ($4|0);
}
function _luaK_concat($fs,$l1,$l2) {
 $fs = $fs|0;
 $l1 = $l1|0;
 $l2 = $l2|0;
 var $$0$i = 0, $$lcssa = 0, $$lcssa4 = 0, $$neg$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $fs$idx$val = 0, $fs$idx$val$idx = 0, $fs$idx$val$idx$val = 0, $ispos$i = 0, $list$0 = 0, $list$0$lcssa = 0, $neg$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($l2|0)==(-1);
 if ($0) {
  return;
 }
 $1 = HEAP32[$l1>>2]|0;
 $2 = ($1|0)==(-1);
 if ($2) {
  HEAP32[$l1>>2] = $l2;
  return;
 }
 $fs$idx$val = HEAP32[$fs>>2]|0;
 $fs$idx$val$idx = ((($fs$idx$val)) + 12|0);
 $fs$idx$val$idx$val = HEAP32[$fs$idx$val$idx>>2]|0;
 $list$0 = $1;
 while(1) {
  $3 = (($fs$idx$val$idx$val) + ($list$0<<2)|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = $4 >>> 14;
  $6 = (($5) + -131071)|0;
  $7 = ($6|0)==(-1);
  $8 = (($list$0) + 1)|0;
  $9 = (($8) + ($6))|0;
  $$0$i = $7 ? -1 : $9;
  $10 = ($$0$i|0)==(-1);
  if ($10) {
   $$lcssa = $3;$$lcssa4 = $4;$list$0$lcssa = $list$0;
   break;
  } else {
   $list$0 = $$0$i;
  }
 }
 $$neg$i = $list$0$lcssa ^ -1;
 $11 = (($$neg$i) + ($l2))|0;
 $ispos$i = ($11|0)>(-1);
 $neg$i = (0 - ($11))|0;
 $12 = $ispos$i ? $11 : $neg$i;
 $13 = ($12|0)>(131071);
 if ($13) {
  $14 = ((($fs)) + 12|0);
  $15 = HEAP32[$14>>2]|0;
  _luaX_syntaxerror($15,7984);
  // unreachable;
 }
 $16 = $$lcssa4 & 16383;
 $17 = $11 << 14;
 $18 = (($17) + 2147467264)|0;
 $19 = $16 | $18;
 HEAP32[$$lcssa>>2] = $19;
 return;
}
function _luaK_ret($fs,$first,$nret) {
 $fs = $fs|0;
 $first = $first|0;
 $nret = $nret|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $first << 6;
 $1 = $nret << 23;
 $2 = (($1) + 8388608)|0;
 $3 = $0 | $2;
 $4 = $3 | 31;
 (_luaK_code($fs,$4)|0);
 return;
}
function _luaK_getlabel($fs) {
 $fs = $fs|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($fs)) + 20|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($fs)) + 24|0);
 HEAP32[$2>>2] = $1;
 return ($1|0);
}
function _luaK_patchlist($fs,$list,$target) {
 $fs = $fs|0;
 $list = $list|0;
 $target = $target|0;
 var $$0$i$i = 0, $$0$i$i$i = 0, $$0$i$i1 = 0, $$02$i = 0, $$lcssa = 0, $$lcssa10 = 0, $$neg$i = 0, $$neg$i$i = 0, $$neg$i$i$i = 0, $$sum$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, $fs$idx$val$i$i = 0, $fs$idx$val$i$pre = 0;
 var $fs$idx$val$idx$i$i = 0, $fs$idx$val$idx$i$phi$trans$insert = 0, $fs$idx$val$idx$val$i$i = 0, $fs$idx$val$idx$val$i$pre = 0, $ispos$i = 0, $ispos$i$i = 0, $ispos$i$i$i = 0, $list$0$i$i = 0, $list$0$i$i$lcssa = 0, $neg$i = 0, $neg$i$i = 0, $neg$i$i$i = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($fs)) + 20|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==($target|0);
 if ($2) {
  $3 = ((($fs)) + 24|0);
  HEAP32[$3>>2] = $target;
  $4 = ((($fs)) + 28|0);
  $5 = ($list|0)==(-1);
  if ($5) {
   return;
  }
  $6 = HEAP32[$4>>2]|0;
  $7 = ($6|0)==(-1);
  if ($7) {
   HEAP32[$4>>2] = $list;
   return;
  }
  $fs$idx$val$i$i = HEAP32[$fs>>2]|0;
  $fs$idx$val$idx$i$i = ((($fs$idx$val$i$i)) + 12|0);
  $fs$idx$val$idx$val$i$i = HEAP32[$fs$idx$val$idx$i$i>>2]|0;
  $list$0$i$i = $6;
  while(1) {
   $8 = (($fs$idx$val$idx$val$i$i) + ($list$0$i$i<<2)|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = $9 >>> 14;
   $11 = (($10) + -131071)|0;
   $12 = ($11|0)==(-1);
   $13 = (($list$0$i$i) + 1)|0;
   $14 = (($13) + ($11))|0;
   $$0$i$i$i = $12 ? -1 : $14;
   $15 = ($$0$i$i$i|0)==(-1);
   if ($15) {
    $$lcssa = $8;$$lcssa10 = $9;$list$0$i$i$lcssa = $list$0$i$i;
    break;
   } else {
    $list$0$i$i = $$0$i$i$i;
   }
  }
  $$neg$i$i$i = $list$0$i$i$lcssa ^ -1;
  $16 = (($$neg$i$i$i) + ($list))|0;
  $ispos$i$i$i = ($16|0)>(-1);
  $neg$i$i$i = (0 - ($16))|0;
  $17 = $ispos$i$i$i ? $16 : $neg$i$i$i;
  $18 = ($17|0)>(131071);
  if ($18) {
   $19 = ((($fs)) + 12|0);
   $20 = HEAP32[$19>>2]|0;
   _luaX_syntaxerror($20,7984);
   // unreachable;
  }
  $21 = $$lcssa10 & 16383;
  $22 = $16 << 14;
  $23 = (($22) + 2147467264)|0;
  $24 = $23 | $21;
  HEAP32[$$lcssa>>2] = $24;
  return;
 }
 $25 = ($list|0)==(-1);
 if ($25) {
  return;
 }
 $fs$idx$val$i$pre = HEAP32[$fs>>2]|0;
 $fs$idx$val$idx$i$phi$trans$insert = ((($fs$idx$val$i$pre)) + 12|0);
 $fs$idx$val$idx$val$i$pre = HEAP32[$fs$idx$val$idx$i$phi$trans$insert>>2]|0;
 $$02$i = $list;
 while(1) {
  $26 = (($fs$idx$val$idx$val$i$pre) + ($$02$i<<2)|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = $27 >>> 14;
  $29 = (($28) + -131071)|0;
  $30 = ($29|0)==(-1);
  $31 = (($$02$i) + 1)|0;
  $32 = (($31) + ($29))|0;
  $$0$i$i = $30 ? -1 : $32;
  $33 = ($$02$i|0)>(0);
  if ($33) {
   $$sum$i$i = (($$02$i) + -1)|0;
   $34 = (($fs$idx$val$idx$val$i$pre) + ($$sum$i$i<<2)|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = $35 & 63;
   $37 = (6156 + ($36)|0);
   $38 = HEAP8[$37>>0]|0;
   $39 = ($38<<24>>24)<(0);
   if ($39) {
    $$0$i$i1 = $34;$41 = $35;
   } else {
    label = 14;
   }
  } else {
   label = 14;
  }
  if ((label|0) == 14) {
   label = 0;
   $$0$i$i1 = $26;$41 = $27;
  }
  $40 = $41 & 63;
  $42 = ($40|0)==(28);
  if ($42) {
   $43 = $41 >>> 23;
   $44 = $43 << 6;
   $45 = $41 & 8372224;
   $46 = $45 | $44;
   $47 = $46 | 27;
   HEAP32[$$0$i$i1>>2] = $47;
   $$neg$i = $$02$i ^ -1;
   $48 = (($$neg$i) + ($target))|0;
   $ispos$i = ($48|0)>(-1);
   $neg$i = (0 - ($48))|0;
   $49 = $ispos$i ? $48 : $neg$i;
   $50 = ($49|0)>(131071);
   if ($50) {
    label = 17;
    break;
   }
   $53 = HEAP32[$26>>2]|0;
   $54 = $53 & 16383;
   $55 = $48 << 14;
   $56 = (($55) + 2147467264)|0;
   $57 = $54 | $56;
   $storemerge = $57;
  } else {
   $$neg$i$i = $$02$i ^ -1;
   $58 = (($$neg$i$i) + ($target))|0;
   $ispos$i$i = ($58|0)>(-1);
   $neg$i$i = (0 - ($58))|0;
   $59 = $ispos$i$i ? $58 : $neg$i$i;
   $60 = ($59|0)>(131071);
   if ($60) {
    label = 20;
    break;
   }
   $63 = $27 & 16383;
   $64 = $58 << 14;
   $65 = (($64) + 2147467264)|0;
   $66 = $63 | $65;
   $storemerge = $66;
  }
  HEAP32[$26>>2] = $storemerge;
  $67 = ($$0$i$i|0)==(-1);
  if ($67) {
   label = 23;
   break;
  } else {
   $$02$i = $$0$i$i;
  }
 }
 if ((label|0) == 17) {
  $51 = ((($fs)) + 12|0);
  $52 = HEAP32[$51>>2]|0;
  _luaX_syntaxerror($52,7984);
  // unreachable;
 }
 else if ((label|0) == 20) {
  $61 = ((($fs)) + 12|0);
  $62 = HEAP32[$61>>2]|0;
  _luaX_syntaxerror($62,7984);
  // unreachable;
 }
 else if ((label|0) == 23) {
  return;
 }
}
function _luaK_patchtohere($fs,$list) {
 $fs = $fs|0;
 $list = $list|0;
 var $$0$i$i = 0, $$lcssa = 0, $$lcssa6 = 0, $$neg$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $fs$idx$val$i = 0, $fs$idx$val$idx$i = 0, $fs$idx$val$idx$val$i = 0, $ispos$i$i = 0, $list$0$i = 0, $list$0$i$lcssa = 0, $neg$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($fs)) + 20|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($fs)) + 24|0);
 HEAP32[$2>>2] = $1;
 $3 = ((($fs)) + 28|0);
 $4 = ($list|0)==(-1);
 if ($4) {
  return;
 }
 $5 = HEAP32[$3>>2]|0;
 $6 = ($5|0)==(-1);
 if ($6) {
  HEAP32[$3>>2] = $list;
  return;
 }
 $fs$idx$val$i = HEAP32[$fs>>2]|0;
 $fs$idx$val$idx$i = ((($fs$idx$val$i)) + 12|0);
 $fs$idx$val$idx$val$i = HEAP32[$fs$idx$val$idx$i>>2]|0;
 $list$0$i = $5;
 while(1) {
  $7 = (($fs$idx$val$idx$val$i) + ($list$0$i<<2)|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = $8 >>> 14;
  $10 = (($9) + -131071)|0;
  $11 = ($10|0)==(-1);
  $12 = (($list$0$i) + 1)|0;
  $13 = (($12) + ($10))|0;
  $$0$i$i = $11 ? -1 : $13;
  $14 = ($$0$i$i|0)==(-1);
  if ($14) {
   $$lcssa = $7;$$lcssa6 = $8;$list$0$i$lcssa = $list$0$i;
   break;
  } else {
   $list$0$i = $$0$i$i;
  }
 }
 $$neg$i$i = $list$0$i$lcssa ^ -1;
 $15 = (($$neg$i$i) + ($list))|0;
 $ispos$i$i = ($15|0)>(-1);
 $neg$i$i = (0 - ($15))|0;
 $16 = $ispos$i$i ? $15 : $neg$i$i;
 $17 = ($16|0)>(131071);
 if ($17) {
  $18 = ((($fs)) + 12|0);
  $19 = HEAP32[$18>>2]|0;
  _luaX_syntaxerror($19,7984);
  // unreachable;
 }
 $20 = $$lcssa6 & 16383;
 $21 = $15 << 14;
 $22 = (($21) + 2147467264)|0;
 $23 = $22 | $20;
 HEAP32[$$lcssa>>2] = $23;
 return;
}
function _luaK_patchclose($fs,$list,$level) {
 $fs = $fs|0;
 $list = $list|0;
 $level = $level|0;
 var $$ = 0, $$01 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $fs$idx$val = 0, $fs$idx$val$idx = 0, $fs$idx$val$idx$val = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = ($list|0)==(-1);
 if ($0) {
  return;
 }
 $fs$idx$val = HEAP32[$fs>>2]|0;
 $fs$idx$val$idx = ((($fs$idx$val)) + 12|0);
 $fs$idx$val$idx$val = HEAP32[$fs$idx$val$idx>>2]|0;
 $1 = $level << 6;
 $2 = (($1) + 64)|0;
 $3 = $2 & 16320;
 $$01 = $list;
 while(1) {
  $4 = (($fs$idx$val$idx$val) + ($$01<<2)|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = $5 >>> 14;
  $7 = (($6) + -131071)|0;
  $8 = ($7|0)==(-1);
  $9 = (($$01) + 1)|0;
  $10 = (($9) + ($7))|0;
  $11 = $5 & -16321;
  $12 = $11 | $3;
  HEAP32[$4>>2] = $12;
  $$ = $8 ? -1 : $10;
  $13 = ($$|0)==(-1);
  if ($13) {
   break;
  } else {
   $$01 = $$;
  }
 }
 return;
}
function _luaK_codek($fs,$reg,$k) {
 $fs = $fs|0;
 $reg = $reg|0;
 $k = $k|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($k|0)<(262144);
 $1 = $reg << 6;
 if ($0) {
  $2 = $k << 14;
  $3 = $1 | $2;
  $4 = $3 | 1;
  $5 = (_luaK_code($fs,$4)|0);
  $$0 = $5;
  return ($$0|0);
 } else {
  $6 = $1 | 2;
  $7 = (_luaK_code($fs,$6)|0);
  $8 = $k << 6;
  $9 = $8 | 39;
  (_luaK_code($fs,$9)|0);
  $$0 = $7;
  return ($$0|0);
 }
 return (0)|0;
}
function _luaK_checkstack($fs,$n) {
 $fs = $fs|0;
 $n = $n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($fs)) + 48|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1&255;
 $3 = (($2) + ($n))|0;
 $4 = HEAP32[$fs>>2]|0;
 $5 = ((($4)) + 78|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = $6&255;
 $8 = ($3|0)>($7|0);
 if (!($8)) {
  return;
 }
 $9 = ($3|0)>(249);
 if ($9) {
  $10 = ((($fs)) + 12|0);
  $11 = HEAP32[$10>>2]|0;
  _luaX_syntaxerror($11,8011);
  // unreachable;
 }
 $12 = $3&255;
 HEAP8[$5>>0] = $12;
 return;
}
function _luaK_reserveregs($fs,$n) {
 $fs = $fs|0;
 $n = $n|0;
 var $$pre = 0, $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($fs)) + 48|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1&255;
 $3 = (($2) + ($n))|0;
 $4 = HEAP32[$fs>>2]|0;
 $5 = ((($4)) + 78|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = $6&255;
 $8 = ($3|0)>($7|0);
 if (!($8)) {
  $$pre = $3&255;
  $$pre$phiZ2D = $$pre;
  HEAP8[$0>>0] = $$pre$phiZ2D;
  return;
 }
 $9 = ($3|0)>(249);
 if ($9) {
  $10 = ((($fs)) + 12|0);
  $11 = HEAP32[$10>>2]|0;
  _luaX_syntaxerror($11,8011);
  // unreachable;
 }
 $12 = $3&255;
 HEAP8[$5>>0] = $12;
 $$pre$phiZ2D = $12;
 HEAP8[$0>>0] = $$pre$phiZ2D;
 return;
}
function _luaK_stringK($fs,$s) {
 $fs = $fs|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $o = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $o = sp;
 HEAP32[$o>>2] = $s;
 $0 = ((($s)) + 4|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1&255;
 $3 = $2 | 64;
 $4 = ((($o)) + 8|0);
 HEAP32[$4>>2] = $3;
 $5 = (_addk($fs,$o,$o)|0);
 STACKTOP = sp;return ($5|0);
}
function _luaK_numberK($fs,$r) {
 $fs = $fs|0;
 $r = +$r;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $n$0 = 0, $o = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 16|0;
 $o = sp;
 HEAPF64[$0>>3] = $r;
 $1 = ((($fs)) + 12|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 52|0);
 $4 = HEAP32[$3>>2]|0;
 HEAPF64[$o>>3] = $r;
 $5 = ((($o)) + 8|0);
 HEAP32[$5>>2] = 3;
 $6 = ($r != $r) | (0.0 != 0.0) |($r == 0.0);
 if ($6) {
  $7 = ((($4)) + 8|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ((($8)) + 16|0);
  HEAP32[$7>>2] = $9;
  $10 = (_luaS_newlstr($4,$0,8)|0);
  HEAP32[$8>>2] = $10;
  $11 = ((($10)) + 4|0);
  $12 = HEAP8[$11>>0]|0;
  $13 = $12&255;
  $14 = $13 | 64;
  $15 = ((($8)) + 8|0);
  HEAP32[$15>>2] = $14;
  $16 = HEAP32[$7>>2]|0;
  $17 = ((($16)) + -16|0);
  $18 = (_addk($fs,$17,$o)|0);
  $19 = HEAP32[$7>>2]|0;
  $20 = ((($19)) + -16|0);
  HEAP32[$7>>2] = $20;
  $n$0 = $18;
  STACKTOP = sp;return ($n$0|0);
 } else {
  $21 = (_addk($fs,$o,$o)|0);
  $n$0 = $21;
  STACKTOP = sp;return ($n$0|0);
 }
 return (0)|0;
}
function _luaK_setreturns($fs,$e,$nresults) {
 $fs = $fs|0;
 $e = $e|0;
 $nresults = $nresults|0;
 var $$pre$i = 0, $$pre$phi$iZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$e>>2]|0;
 switch ($0|0) {
 case 12:  {
  $1 = ((($e)) + 8|0);
  $2 = HEAP32[$1>>2]|0;
  $3 = HEAP32[$fs>>2]|0;
  $4 = ((($3)) + 12|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = (($5) + ($2<<2)|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = $7 & -8372225;
  $9 = $nresults << 14;
  $10 = (($9) + 16384)|0;
  $11 = $10 & 8372224;
  $12 = $8 | $11;
  HEAP32[$6>>2] = $12;
  return;
  break;
 }
 case 13:  {
  $13 = ((($e)) + 8|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = HEAP32[$fs>>2]|0;
  $16 = ((($15)) + 12|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = (($17) + ($14<<2)|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = $19 & 8388607;
  $21 = $nresults << 23;
  $22 = (($21) + 8388608)|0;
  $23 = $20 | $22;
  HEAP32[$18>>2] = $23;
  $24 = HEAP32[$13>>2]|0;
  $25 = (($17) + ($24<<2)|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = $26 & -16321;
  $28 = ((($fs)) + 48|0);
  $29 = HEAP8[$28>>0]|0;
  $30 = $29&255;
  $31 = $30 << 6;
  $32 = $31 | $27;
  HEAP32[$25>>2] = $32;
  $33 = (($30) + 1)|0;
  $34 = ((($15)) + 78|0);
  $35 = HEAP8[$34>>0]|0;
  $36 = $35&255;
  $37 = ($33>>>0)>($36>>>0);
  do {
   if ($37) {
    $38 = ($33>>>0)>(249);
    if ($38) {
     $39 = ((($fs)) + 12|0);
     $40 = HEAP32[$39>>2]|0;
     _luaX_syntaxerror($40,8011);
     // unreachable;
    } else {
     $41 = $33&255;
     HEAP8[$34>>0] = $41;
     $$pre$phi$iZ2D = $41;
     break;
    }
   } else {
    $$pre$i = $33&255;
    $$pre$phi$iZ2D = $$pre$i;
   }
  } while(0);
  HEAP8[$28>>0] = $$pre$phi$iZ2D;
  return;
  break;
 }
 default: {
  return;
 }
 }
}
function _luaK_setoneret($fs,$e) {
 $fs = $fs|0;
 $e = $e|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$e>>2]|0;
 switch ($0|0) {
 case 12:  {
  HEAP32[$e>>2] = 6;
  $1 = ((($e)) + 8|0);
  $2 = HEAP32[$1>>2]|0;
  $3 = HEAP32[$fs>>2]|0;
  $4 = ((($3)) + 12|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = (($5) + ($2<<2)|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = $7 >>> 6;
  $9 = $8 & 255;
  HEAP32[$1>>2] = $9;
  return;
  break;
 }
 case 13:  {
  $10 = ((($e)) + 8|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = HEAP32[$fs>>2]|0;
  $13 = ((($12)) + 12|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = (($14) + ($11<<2)|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = $16 & 8388607;
  $18 = $17 | 16777216;
  HEAP32[$15>>2] = $18;
  HEAP32[$e>>2] = 11;
  return;
  break;
 }
 default: {
  return;
 }
 }
}
function _luaK_dischargevars($fs,$e) {
 $fs = $fs|0;
 $e = $e|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $op$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$e>>2]|0;
 switch ($0|0) {
 case 7:  {
  HEAP32[$e>>2] = 6;
  return;
  break;
 }
 case 8:  {
  $1 = ((($e)) + 8|0);
  $2 = HEAP32[$1>>2]|0;
  $3 = $2 << 23;
  $4 = $3 | 5;
  $5 = (_luaK_code($fs,$4)|0);
  HEAP32[$1>>2] = $5;
  HEAP32[$e>>2] = 11;
  return;
  break;
 }
 case 9:  {
  $6 = ((($e)) + 8|0);
  $7 = HEAP16[$6>>1]|0;
  $8 = $7 << 16 >> 16;
  $9 = $8 & 256;
  $10 = ($9|0)==(0);
  if ($10) {
   $11 = ((($fs)) + 46|0);
   $12 = HEAP8[$11>>0]|0;
   $13 = $12&255;
   $14 = ($13|0)>($8|0);
   if (!($14)) {
    $15 = ((($fs)) + 48|0);
    $16 = HEAP8[$15>>0]|0;
    $17 = (($16) + -1)<<24>>24;
    HEAP8[$15>>0] = $17;
   }
  }
  $18 = ((($6)) + 3|0);
  $19 = HEAP8[$18>>0]|0;
  $20 = ($19<<24>>24)==(7);
  $21 = ((($6)) + 2|0);
  $22 = HEAP8[$21>>0]|0;
  if ($20) {
   $23 = ((($fs)) + 46|0);
   $24 = HEAP8[$23>>0]|0;
   $25 = ($24&255)>($22&255);
   if ($25) {
    $op$0 = 7;
   } else {
    $26 = ((($fs)) + 48|0);
    $27 = HEAP8[$26>>0]|0;
    $28 = (($27) + -1)<<24>>24;
    HEAP8[$26>>0] = $28;
    $op$0 = 7;
   }
  } else {
   $op$0 = 6;
  }
  $29 = $22&255;
  $30 = $29 << 23;
  $31 = $30 | $op$0;
  $32 = $8 << 14;
  $33 = $31 | $32;
  $34 = (_luaK_code($fs,$33)|0);
  HEAP32[$6>>2] = $34;
  HEAP32[$e>>2] = 11;
  return;
  break;
 }
 case 12:  {
  HEAP32[$e>>2] = 6;
  $35 = ((($e)) + 8|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = HEAP32[$fs>>2]|0;
  $38 = ((($37)) + 12|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = (($39) + ($36<<2)|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = $41 >>> 6;
  $43 = $42 & 255;
  HEAP32[$35>>2] = $43;
  return;
  break;
 }
 case 13:  {
  $44 = ((($e)) + 8|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = HEAP32[$fs>>2]|0;
  $47 = ((($46)) + 12|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = (($48) + ($45<<2)|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = $50 & 8388607;
  $52 = $51 | 16777216;
  HEAP32[$49>>2] = $52;
  HEAP32[$e>>2] = 11;
  return;
  break;
 }
 default: {
  return;
 }
 }
}
function _luaK_exp2nextreg($fs,$e) {
 $fs = $fs|0;
 $e = $e|0;
 var $$pre$i = 0, $$pre$phi$iZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _luaK_dischargevars($fs,$e);
 $0 = HEAP32[$e>>2]|0;
 $1 = ($0|0)==(6);
 if ($1) {
  $2 = ((($e)) + 8|0);
  $3 = HEAP32[$2>>2]|0;
  $4 = $3 & 256;
  $5 = ($4|0)==(0);
  if ($5) {
   $6 = ((($fs)) + 46|0);
   $7 = HEAP8[$6>>0]|0;
   $8 = $7&255;
   $9 = ($8|0)>($3|0);
   if (!($9)) {
    $10 = ((($fs)) + 48|0);
    $11 = HEAP8[$10>>0]|0;
    $12 = (($11) + -1)<<24>>24;
    HEAP8[$10>>0] = $12;
   }
  }
 }
 $13 = ((($fs)) + 48|0);
 $14 = HEAP8[$13>>0]|0;
 $15 = $14&255;
 $16 = (($15) + 1)|0;
 $17 = HEAP32[$fs>>2]|0;
 $18 = ((($17)) + 78|0);
 $19 = HEAP8[$18>>0]|0;
 $20 = $19&255;
 $21 = ($16>>>0)>($20>>>0);
 if (!($21)) {
  $$pre$i = $16&255;
  $$pre$phi$iZ2D = $$pre$i;
  HEAP8[$13>>0] = $$pre$phi$iZ2D;
  $26 = $$pre$phi$iZ2D&255;
  $27 = (($26) + -1)|0;
  _exp2reg($fs,$e,$27);
  return;
 }
 $22 = ($16>>>0)>(249);
 if ($22) {
  $23 = ((($fs)) + 12|0);
  $24 = HEAP32[$23>>2]|0;
  _luaX_syntaxerror($24,8011);
  // unreachable;
 }
 $25 = $16&255;
 HEAP8[$18>>0] = $25;
 $$pre$phi$iZ2D = $25;
 HEAP8[$13>>0] = $$pre$phi$iZ2D;
 $26 = $$pre$phi$iZ2D&255;
 $27 = (($26) + -1)|0;
 _exp2reg($fs,$e,$27);
 return;
}
function _luaK_exp2anyreg($fs,$e) {
 $fs = $fs|0;
 $e = $e|0;
 var $$0 = 0, $$pre$i$i = 0, $$pre$phi$i$iZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _luaK_dischargevars($fs,$e);
 $0 = HEAP32[$e>>2]|0;
 $1 = ($0|0)==(6);
 if ($1) {
  $2 = ((($e)) + 16|0);
  $3 = HEAP32[$2>>2]|0;
  $4 = ((($e)) + 20|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ($3|0)==($5|0);
  $7 = ((($e)) + 8|0);
  $8 = HEAP32[$7>>2]|0;
  if ($6) {
   $$0 = $8;
   return ($$0|0);
  }
  $9 = ((($fs)) + 46|0);
  $10 = HEAP8[$9>>0]|0;
  $11 = $10&255;
  $12 = ($8|0)<($11|0);
  if (!($12)) {
   _exp2reg($fs,$e,$8);
   $13 = HEAP32[$7>>2]|0;
   $$0 = $13;
   return ($$0|0);
  }
 }
 _luaK_dischargevars($fs,$e);
 $14 = HEAP32[$e>>2]|0;
 $15 = ($14|0)==(6);
 if ($15) {
  $16 = ((($e)) + 8|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = $17 & 256;
  $19 = ($18|0)==(0);
  if ($19) {
   $20 = ((($fs)) + 46|0);
   $21 = HEAP8[$20>>0]|0;
   $22 = $21&255;
   $23 = ($22|0)>($17|0);
   if (!($23)) {
    $24 = ((($fs)) + 48|0);
    $25 = HEAP8[$24>>0]|0;
    $26 = (($25) + -1)<<24>>24;
    HEAP8[$24>>0] = $26;
   }
  }
 }
 $27 = ((($fs)) + 48|0);
 $28 = HEAP8[$27>>0]|0;
 $29 = $28&255;
 $30 = (($29) + 1)|0;
 $31 = HEAP32[$fs>>2]|0;
 $32 = ((($31)) + 78|0);
 $33 = HEAP8[$32>>0]|0;
 $34 = $33&255;
 $35 = ($30>>>0)>($34>>>0);
 do {
  if ($35) {
   $36 = ($30>>>0)>(249);
   if ($36) {
    $37 = ((($fs)) + 12|0);
    $38 = HEAP32[$37>>2]|0;
    _luaX_syntaxerror($38,8011);
    // unreachable;
   } else {
    $39 = $30&255;
    HEAP8[$32>>0] = $39;
    $$pre$phi$i$iZ2D = $39;
    break;
   }
  } else {
   $$pre$i$i = $30&255;
   $$pre$phi$i$iZ2D = $$pre$i$i;
  }
 } while(0);
 HEAP8[$27>>0] = $$pre$phi$i$iZ2D;
 $40 = $$pre$phi$i$iZ2D&255;
 $41 = (($40) + -1)|0;
 _exp2reg($fs,$e,$41);
 $42 = ((($e)) + 8|0);
 $43 = HEAP32[$42>>2]|0;
 $$0 = $43;
 return ($$0|0);
}
function _luaK_exp2anyregup($fs,$e) {
 $fs = $fs|0;
 $e = $e|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$e>>2]|0;
 $1 = ($0|0)==(8);
 if ($1) {
  $2 = ((($e)) + 16|0);
  $3 = HEAP32[$2>>2]|0;
  $4 = ((($e)) + 20|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ($3|0)==($5|0);
  if ($6) {
   return;
  }
 }
 (_luaK_exp2anyreg($fs,$e)|0);
 return;
}
function _luaK_exp2val($fs,$e) {
 $fs = $fs|0;
 $e = $e|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($e)) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($e)) + 20|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($1|0)==($3|0);
 if ($4) {
  _luaK_dischargevars($fs,$e);
  return;
 } else {
  (_luaK_exp2anyreg($fs,$e)|0);
  return;
 }
}
function _luaK_exp2RK($fs,$e) {
 $fs = $fs|0;
 $e = $e|0;
 var $$0 = 0, $$phi$trans$insert = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0.0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $k$i = 0, $n$0$i = 0, $o$i = 0, $o$i1 = 0, $v$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 64|0;
 $o$i1 = sp + 48|0;
 $o$i = sp + 32|0;
 $k$i = sp + 16|0;
 $v$i = sp;
 $1 = ((($e)) + 16|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($e)) + 20|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($2|0)==($4|0);
 if ($5) {
  _luaK_dischargevars($fs,$e);
 } else {
  (_luaK_exp2anyreg($fs,$e)|0);
 }
 $6 = HEAP32[$e>>2]|0;
 switch ($6|0) {
 case 1: case 3: case 2:  {
  $7 = ((($fs)) + 32|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($8|0)<(256);
  if ($9) {
   $10 = ($6|0)==(1);
   if ($10) {
    $11 = ((($v$i)) + 8|0);
    HEAP32[$11>>2] = 0;
    $12 = ((($fs)) + 4|0);
    $13 = HEAP32[$12>>2]|0;
    HEAP32[$k$i>>2] = $13;
    $14 = ((($k$i)) + 8|0);
    HEAP32[$14>>2] = 69;
    $15 = (_addk($fs,$k$i,$v$i)|0);
    $21 = $15;
   } else {
    $16 = ($6|0)==(2);
    $17 = $16&1;
    HEAP32[$o$i>>2] = $17;
    $18 = ((($o$i)) + 8|0);
    HEAP32[$18>>2] = 1;
    $19 = (_addk($fs,$o$i,$o$i)|0);
    $21 = $19;
   }
   $20 = ((($e)) + 8|0);
   HEAP32[$20>>2] = $21;
   HEAP32[$e>>2] = 4;
   $22 = $21 | 256;
   $$0 = $22;
   STACKTOP = sp;return ($$0|0);
  }
  break;
 }
 case 5:  {
  $23 = ((($e)) + 8|0);
  $24 = +HEAPF64[$23>>3];
  HEAPF64[$0>>3] = $24;
  $25 = ((($fs)) + 12|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = ((($26)) + 52|0);
  $28 = HEAP32[$27>>2]|0;
  HEAPF64[$o$i1>>3] = $24;
  $29 = ((($o$i1)) + 8|0);
  HEAP32[$29>>2] = 3;
  $30 = ($24 != $24) | (0.0 != 0.0) |($24 == 0.0);
  if ($30) {
   $31 = ((($28)) + 8|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = ((($32)) + 16|0);
   HEAP32[$31>>2] = $33;
   $34 = (_luaS_newlstr($28,$0,8)|0);
   HEAP32[$32>>2] = $34;
   $35 = ((($34)) + 4|0);
   $36 = HEAP8[$35>>0]|0;
   $37 = $36&255;
   $38 = $37 | 64;
   $39 = ((($32)) + 8|0);
   HEAP32[$39>>2] = $38;
   $40 = HEAP32[$31>>2]|0;
   $41 = ((($40)) + -16|0);
   $42 = (_addk($fs,$41,$o$i1)|0);
   $43 = HEAP32[$31>>2]|0;
   $44 = ((($43)) + -16|0);
   HEAP32[$31>>2] = $44;
   $n$0$i = $42;
  } else {
   $45 = (_addk($fs,$o$i1,$o$i1)|0);
   $n$0$i = $45;
  }
  HEAP32[$23>>2] = $n$0$i;
  HEAP32[$e>>2] = 4;
  $47 = $n$0$i;
  label = 15;
  break;
 }
 case 4:  {
  $$phi$trans$insert = ((($e)) + 8|0);
  $$pre = HEAP32[$$phi$trans$insert>>2]|0;
  $47 = $$pre;
  label = 15;
  break;
 }
 default: {
 }
 }
 if ((label|0) == 15) {
  $46 = ($47|0)<(256);
  if ($46) {
   $48 = $47 | 256;
   $$0 = $48;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $49 = (_luaK_exp2anyreg($fs,$e)|0);
 $$0 = $49;
 STACKTOP = sp;return ($$0|0);
}
function _luaK_storevar($fs,$var,$ex) {
 $fs = $fs|0;
 $var = $var|0;
 $ex = $ex|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$var>>2]|0;
 switch ($0|0) {
 case 7:  {
  $1 = HEAP32[$ex>>2]|0;
  $2 = ($1|0)==(6);
  if ($2) {
   $3 = ((($ex)) + 8|0);
   $4 = HEAP32[$3>>2]|0;
   $5 = $4 & 256;
   $6 = ($5|0)==(0);
   if ($6) {
    $7 = ((($fs)) + 46|0);
    $8 = HEAP8[$7>>0]|0;
    $9 = $8&255;
    $10 = ($9|0)>($4|0);
    if (!($10)) {
     $11 = ((($fs)) + 48|0);
     $12 = HEAP8[$11>>0]|0;
     $13 = (($12) + -1)<<24>>24;
     HEAP8[$11>>0] = $13;
    }
   }
  }
  $14 = ((($var)) + 8|0);
  $15 = HEAP32[$14>>2]|0;
  _exp2reg($fs,$ex,$15);
  return;
  break;
 }
 case 8:  {
  $16 = (_luaK_exp2anyreg($fs,$ex)|0);
  $17 = ((($var)) + 8|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = $16 << 6;
  $20 = $18 << 23;
  $21 = $19 | $20;
  $22 = $21 | 9;
  (_luaK_code($fs,$22)|0);
  break;
 }
 case 9:  {
  $23 = ((($var)) + 8|0);
  $24 = ((($23)) + 3|0);
  $25 = HEAP8[$24>>0]|0;
  $26 = ($25<<24>>24)==(7);
  $27 = $26 ? 10 : 8;
  $28 = (_luaK_exp2RK($fs,$ex)|0);
  $29 = ((($23)) + 2|0);
  $30 = HEAP8[$29>>0]|0;
  $31 = $30&255;
  $32 = HEAP16[$23>>1]|0;
  $33 = $32&65535;
  $34 = $31 << 6;
  $35 = $33 << 23;
  $36 = $28 << 14;
  $37 = $36 | $27;
  $38 = $37 | $34;
  $39 = $38 | $35;
  (_luaK_code($fs,$39)|0);
  break;
 }
 default: {
 }
 }
 $40 = HEAP32[$ex>>2]|0;
 $41 = ($40|0)==(6);
 if (!($41)) {
  return;
 }
 $42 = ((($ex)) + 8|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = $43 & 256;
 $45 = ($44|0)==(0);
 if (!($45)) {
  return;
 }
 $46 = ((($fs)) + 46|0);
 $47 = HEAP8[$46>>0]|0;
 $48 = $47&255;
 $49 = ($48|0)>($43|0);
 if ($49) {
  return;
 }
 $50 = ((($fs)) + 48|0);
 $51 = HEAP8[$50>>0]|0;
 $52 = (($51) + -1)<<24>>24;
 HEAP8[$50>>0] = $52;
 return;
}
function _luaK_self($fs,$e,$key) {
 $fs = $fs|0;
 $e = $e|0;
 $key = $key|0;
 var $$pre$i = 0, $$pre$phi$iZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 (_luaK_exp2anyreg($fs,$e)|0);
 $0 = ((($e)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$e>>2]|0;
 $3 = ($2|0)==(6);
 $4 = $1 & 256;
 $5 = ($4|0)==(0);
 $or$cond = $3 & $5;
 if ($or$cond) {
  $6 = ((($fs)) + 46|0);
  $7 = HEAP8[$6>>0]|0;
  $8 = $7&255;
  $9 = ($8|0)>($1|0);
  if (!($9)) {
   $10 = ((($fs)) + 48|0);
   $11 = HEAP8[$10>>0]|0;
   $12 = (($11) + -1)<<24>>24;
   HEAP8[$10>>0] = $12;
  }
 }
 $13 = ((($fs)) + 48|0);
 $14 = HEAP8[$13>>0]|0;
 $15 = $14&255;
 HEAP32[$0>>2] = $15;
 HEAP32[$e>>2] = 6;
 $16 = (($15) + 2)|0;
 $17 = HEAP32[$fs>>2]|0;
 $18 = ((($17)) + 78|0);
 $19 = HEAP8[$18>>0]|0;
 $20 = $19&255;
 $21 = ($16>>>0)>($20>>>0);
 do {
  if ($21) {
   $22 = ($16>>>0)>(249);
   if ($22) {
    $23 = ((($fs)) + 12|0);
    $24 = HEAP32[$23>>2]|0;
    _luaX_syntaxerror($24,8011);
    // unreachable;
   } else {
    $25 = $16&255;
    HEAP8[$18>>0] = $25;
    $$pre$phi$iZ2D = $25;
    break;
   }
  } else {
   $$pre$i = $16&255;
   $$pre$phi$iZ2D = $$pre$i;
  }
 } while(0);
 HEAP8[$13>>0] = $$pre$phi$iZ2D;
 $26 = (_luaK_exp2RK($fs,$key)|0);
 $27 = $15 << 6;
 $28 = $1 << 23;
 $29 = $26 << 14;
 $30 = $28 | $27;
 $31 = $30 | $29;
 $32 = $31 | 12;
 (_luaK_code($fs,$32)|0);
 $33 = HEAP32[$key>>2]|0;
 $34 = ($33|0)==(6);
 if (!($34)) {
  return;
 }
 $35 = ((($key)) + 8|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = $36 & 256;
 $38 = ($37|0)==(0);
 if (!($38)) {
  return;
 }
 $39 = ((($fs)) + 46|0);
 $40 = HEAP8[$39>>0]|0;
 $41 = $40&255;
 $42 = ($41|0)>($36|0);
 if ($42) {
  return;
 }
 $43 = HEAP8[$13>>0]|0;
 $44 = (($43) + -1)<<24>>24;
 HEAP8[$13>>0] = $44;
 return;
}
function _luaK_goiftrue($fs,$e) {
 $fs = $fs|0;
 $e = $e|0;
 var $$0$i$i = 0, $$0$i$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i8 = 0, $$0$i$i1 = 0, $$lcssa = 0, $$lcssa52 = 0, $$lcssa53 = 0, $$lcssa54 = 0, $$lcssa55 = 0, $$lcssa56 = 0, $$lcssa57 = 0, $$lcssa58 = 0, $$neg$i$i = 0, $$neg$i$i$i = 0, $$neg$i$i$i$i = 0, $$neg$i$i$i$i9 = 0, $$pr = 0, $$pre = 0, $$pre$i = 0;
 var $$pre$i$i = 0, $$pre$phi$i$iZ2D = 0, $$sum$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
 var $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $fs$idx$val = 0, $fs$idx$val$i = 0, $fs$idx$val$i$i = 0;
 var $fs$idx$val$i$i$i = 0, $fs$idx$val$i$i$i3 = 0, $fs$idx$val$idx = 0, $fs$idx$val$idx$i = 0, $fs$idx$val$idx$i$i = 0, $fs$idx$val$idx$i$i$i = 0, $fs$idx$val$idx$i$i$i4 = 0, $fs$idx$val$idx$val = 0, $fs$idx$val$idx$val$i = 0, $fs$idx$val$idx$val$i$i = 0, $fs$idx$val$idx$val$i$i$i = 0, $fs$idx$val$idx$val$i$i$i5 = 0, $ispos$i$i = 0, $ispos$i$i$i = 0, $ispos$i$i$i$i = 0, $ispos$i$i$i$i10 = 0, $list$0$i = 0, $list$0$i$i = 0, $list$0$i$i$i = 0, $list$0$i$i$i$lcssa = 0;
 var $list$0$i$i$i7 = 0, $list$0$i$i$i7$lcssa = 0, $list$0$i$i$lcssa = 0, $list$0$i$lcssa = 0, $neg$i$i = 0, $neg$i$i$i = 0, $neg$i$i$i$i = 0, $neg$i$i$i$i11 = 0, $pc$0 = 0, $pc$014 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _luaK_dischargevars($fs,$e);
 $0 = HEAP32[$e>>2]|0;
 L1: do {
  switch ($0|0) {
  case 10:  {
   $fs$idx$val = HEAP32[$fs>>2]|0;
   $fs$idx$val$idx = ((($fs$idx$val)) + 12|0);
   $fs$idx$val$idx$val = HEAP32[$fs$idx$val$idx>>2]|0;
   $1 = ((($e)) + 8|0);
   $2 = HEAP32[$1>>2]|0;
   $3 = (($fs$idx$val$idx$val) + ($2<<2)|0);
   $4 = ($2|0)>(0);
   if ($4) {
    $$sum$i$i = (($2) + -1)|0;
    $5 = (($fs$idx$val$idx$val) + ($$sum$i$i<<2)|0);
    $6 = HEAP32[$5>>2]|0;
    $7 = $6 & 63;
    $8 = (6156 + ($7)|0);
    $9 = HEAP8[$8>>0]|0;
    $10 = ($9<<24>>24)<(0);
    if ($10) {
     $$0$i$i = $5;$12 = $6;
    } else {
     label = 4;
    }
   } else {
    label = 4;
   }
   if ((label|0) == 4) {
    $$pre$i = HEAP32[$3>>2]|0;
    $$0$i$i = $3;$12 = $$pre$i;
   }
   $11 = $12 & -16321;
   $13 = $12 & 16320;
   $14 = ($13|0)==(0);
   $15 = $14&1;
   $16 = $15 << 6;
   $17 = $16 | $11;
   HEAP32[$$0$i$i>>2] = $17;
   $18 = HEAP32[$1>>2]|0;
   $pc$0 = $18;
   label = 32;
   break;
  }
  case 2: case 5: case 4:  {
   break;
  }
  default: {
   $19 = ((($e)) + 8|0);
   switch ($0|0) {
   case 11:  {
    $20 = HEAP32[$19>>2]|0;
    $21 = HEAP32[$fs>>2]|0;
    $22 = ((($21)) + 12|0);
    $23 = HEAP32[$22>>2]|0;
    $24 = (($23) + ($20<<2)|0);
    $25 = HEAP32[$24>>2]|0;
    $26 = $25 & 63;
    $27 = ($26|0)==(20);
    if ($27) {
     $28 = ((($fs)) + 20|0);
     $29 = HEAP32[$28>>2]|0;
     $30 = (($29) + -1)|0;
     HEAP32[$28>>2] = $30;
     $31 = $25 >>> 23;
     $32 = $31 << 6;
     $33 = $32 | 16411;
     (_luaK_code($fs,$33)|0);
     $34 = ((($fs)) + 28|0);
     $35 = HEAP32[$34>>2]|0;
     HEAP32[$34>>2] = -1;
     $36 = (_luaK_code($fs,2147450903)|0);
     $37 = ($35|0)==(-1);
     if ($37) {
      $pc$0 = $36;
      label = 32;
      break L1;
     }
     $38 = ($36|0)==(-1);
     if ($38) {
      $pc$014 = $35;
      label = 33;
      break L1;
     }
     $fs$idx$val$i$i$i3 = HEAP32[$fs>>2]|0;
     $fs$idx$val$idx$i$i$i4 = ((($fs$idx$val$i$i$i3)) + 12|0);
     $fs$idx$val$idx$val$i$i$i5 = HEAP32[$fs$idx$val$idx$i$i$i4>>2]|0;
     $list$0$i$i$i7 = $36;
     while(1) {
      $39 = (($fs$idx$val$idx$val$i$i$i5) + ($list$0$i$i$i7<<2)|0);
      $40 = HEAP32[$39>>2]|0;
      $41 = $40 >>> 14;
      $42 = (($41) + -131071)|0;
      $43 = ($42|0)==(-1);
      $44 = (($list$0$i$i$i7) + 1)|0;
      $45 = (($44) + ($42))|0;
      $$0$i$i$i$i8 = $43 ? -1 : $45;
      $46 = ($$0$i$i$i$i8|0)==(-1);
      if ($46) {
       $$lcssa57 = $39;$$lcssa58 = $40;$list$0$i$i$i7$lcssa = $list$0$i$i$i7;
       break;
      } else {
       $list$0$i$i$i7 = $$0$i$i$i$i8;
      }
     }
     $$neg$i$i$i$i9 = $list$0$i$i$i7$lcssa ^ -1;
     $47 = (($35) + ($$neg$i$i$i$i9))|0;
     $ispos$i$i$i$i10 = ($47|0)>(-1);
     $neg$i$i$i$i11 = (0 - ($47))|0;
     $48 = $ispos$i$i$i$i10 ? $47 : $neg$i$i$i$i11;
     $49 = ($48|0)>(131071);
     if ($49) {
      $50 = ((($fs)) + 12|0);
      $51 = HEAP32[$50>>2]|0;
      _luaX_syntaxerror($51,7984);
      // unreachable;
     } else {
      $52 = $$lcssa58 & 16383;
      $53 = $47 << 14;
      $54 = (($53) + 2147467264)|0;
      $55 = $54 | $52;
      HEAP32[$$lcssa57>>2] = $55;
      $pc$0 = $36;
      label = 32;
      break L1;
     }
    } else {
     label = 15;
    }
    break;
   }
   case 6:  {
    label = 22;
    break;
   }
   default: {
    label = 15;
   }
   }
   if ((label|0) == 15) {
    $56 = ((($fs)) + 48|0);
    $57 = HEAP8[$56>>0]|0;
    $58 = $57&255;
    $59 = (($58) + 1)|0;
    $60 = HEAP32[$fs>>2]|0;
    $61 = ((($60)) + 78|0);
    $62 = HEAP8[$61>>0]|0;
    $63 = $62&255;
    $64 = ($59>>>0)>($63>>>0);
    do {
     if ($64) {
      $65 = ($59>>>0)>(249);
      if ($65) {
       $66 = ((($fs)) + 12|0);
       $67 = HEAP32[$66>>2]|0;
       _luaX_syntaxerror($67,8011);
       // unreachable;
      } else {
       $68 = $59&255;
       HEAP8[$61>>0] = $68;
       $$pre$phi$i$iZ2D = $68;
       break;
      }
     } else {
      $$pre$i$i = $59&255;
      $$pre$phi$i$iZ2D = $$pre$i$i;
     }
    } while(0);
    HEAP8[$56>>0] = $$pre$phi$i$iZ2D;
    $69 = $$pre$phi$i$iZ2D&255;
    $70 = (($69) + -1)|0;
    _discharge2reg($fs,$e,$70);
    $$pr = HEAP32[$e>>2]|0;
    $71 = ($$pr|0)==(6);
    if ($71) {
     label = 22;
    } else {
     $$pre = HEAP32[$19>>2]|0;
     $83 = $$pre;
    }
   }
   if ((label|0) == 22) {
    $72 = HEAP32[$19>>2]|0;
    $73 = $72 & 256;
    $74 = ($73|0)==(0);
    if ($74) {
     $75 = ((($fs)) + 46|0);
     $76 = HEAP8[$75>>0]|0;
     $77 = $76&255;
     $78 = ($77|0)>($72|0);
     if ($78) {
      $83 = $72;
     } else {
      $79 = ((($fs)) + 48|0);
      $80 = HEAP8[$79>>0]|0;
      $81 = (($80) + -1)<<24>>24;
      HEAP8[$79>>0] = $81;
      $83 = $72;
     }
    } else {
     $83 = $72;
    }
   }
   $82 = $83 << 23;
   $84 = $82 | 16348;
   (_luaK_code($fs,$84)|0);
   $85 = ((($fs)) + 28|0);
   $86 = HEAP32[$85>>2]|0;
   HEAP32[$85>>2] = -1;
   $87 = (_luaK_code($fs,2147450903)|0);
   $88 = ($86|0)==(-1);
   if ($88) {
    $pc$0 = $87;
    label = 32;
   } else {
    $89 = ($87|0)==(-1);
    if ($89) {
     $pc$014 = $86;
     label = 33;
    } else {
     $fs$idx$val$i$i$i = HEAP32[$fs>>2]|0;
     $fs$idx$val$idx$i$i$i = ((($fs$idx$val$i$i$i)) + 12|0);
     $fs$idx$val$idx$val$i$i$i = HEAP32[$fs$idx$val$idx$i$i$i>>2]|0;
     $list$0$i$i$i = $87;
     while(1) {
      $90 = (($fs$idx$val$idx$val$i$i$i) + ($list$0$i$i$i<<2)|0);
      $91 = HEAP32[$90>>2]|0;
      $92 = $91 >>> 14;
      $93 = (($92) + -131071)|0;
      $94 = ($93|0)==(-1);
      $95 = (($list$0$i$i$i) + 1)|0;
      $96 = (($95) + ($93))|0;
      $$0$i$i$i$i = $94 ? -1 : $96;
      $97 = ($$0$i$i$i$i|0)==(-1);
      if ($97) {
       $$lcssa55 = $90;$$lcssa56 = $91;$list$0$i$i$i$lcssa = $list$0$i$i$i;
       break;
      } else {
       $list$0$i$i$i = $$0$i$i$i$i;
      }
     }
     $$neg$i$i$i$i = $list$0$i$i$i$lcssa ^ -1;
     $98 = (($86) + ($$neg$i$i$i$i))|0;
     $ispos$i$i$i$i = ($98|0)>(-1);
     $neg$i$i$i$i = (0 - ($98))|0;
     $99 = $ispos$i$i$i$i ? $98 : $neg$i$i$i$i;
     $100 = ($99|0)>(131071);
     if ($100) {
      $101 = ((($fs)) + 12|0);
      $102 = HEAP32[$101>>2]|0;
      _luaX_syntaxerror($102,7984);
      // unreachable;
     } else {
      $103 = $$lcssa56 & 16383;
      $104 = $98 << 14;
      $105 = (($104) + 2147467264)|0;
      $106 = $105 | $103;
      HEAP32[$$lcssa55>>2] = $106;
      $pc$0 = $87;
      label = 32;
      break L1;
     }
    }
   }
  }
  }
 } while(0);
 if ((label|0) == 32) {
  $107 = ($pc$0|0)==(-1);
  if (!($107)) {
   $pc$014 = $pc$0;
   label = 33;
  }
 }
 do {
  if ((label|0) == 33) {
   $108 = ((($e)) + 20|0);
   $109 = HEAP32[$108>>2]|0;
   $110 = ($109|0)==(-1);
   if ($110) {
    HEAP32[$108>>2] = $pc$014;
    break;
   }
   $fs$idx$val$i = HEAP32[$fs>>2]|0;
   $fs$idx$val$idx$i = ((($fs$idx$val$i)) + 12|0);
   $fs$idx$val$idx$val$i = HEAP32[$fs$idx$val$idx$i>>2]|0;
   $list$0$i = $109;
   while(1) {
    $111 = (($fs$idx$val$idx$val$i) + ($list$0$i<<2)|0);
    $112 = HEAP32[$111>>2]|0;
    $113 = $112 >>> 14;
    $114 = (($113) + -131071)|0;
    $115 = ($114|0)==(-1);
    $116 = (($list$0$i) + 1)|0;
    $117 = (($116) + ($114))|0;
    $$0$i$i1 = $115 ? -1 : $117;
    $118 = ($$0$i$i1|0)==(-1);
    if ($118) {
     $$lcssa53 = $111;$$lcssa54 = $112;$list$0$i$lcssa = $list$0$i;
     break;
    } else {
     $list$0$i = $$0$i$i1;
    }
   }
   $$neg$i$i = $list$0$i$lcssa ^ -1;
   $119 = (($pc$014) + ($$neg$i$i))|0;
   $ispos$i$i = ($119|0)>(-1);
   $neg$i$i = (0 - ($119))|0;
   $120 = $ispos$i$i ? $119 : $neg$i$i;
   $121 = ($120|0)>(131071);
   if ($121) {
    $122 = ((($fs)) + 12|0);
    $123 = HEAP32[$122>>2]|0;
    _luaX_syntaxerror($123,7984);
    // unreachable;
   } else {
    $124 = $$lcssa54 & 16383;
    $125 = $119 << 14;
    $126 = (($125) + 2147467264)|0;
    $127 = $126 | $124;
    HEAP32[$$lcssa53>>2] = $127;
    break;
   }
  }
 } while(0);
 $128 = ((($e)) + 16|0);
 $129 = HEAP32[$128>>2]|0;
 $130 = ((($fs)) + 20|0);
 $131 = HEAP32[$130>>2]|0;
 $132 = ((($fs)) + 24|0);
 HEAP32[$132>>2] = $131;
 $133 = ((($fs)) + 28|0);
 $134 = ($129|0)==(-1);
 if ($134) {
  HEAP32[$128>>2] = -1;
  return;
 }
 $135 = HEAP32[$133>>2]|0;
 $136 = ($135|0)==(-1);
 if ($136) {
  HEAP32[$133>>2] = $129;
  HEAP32[$128>>2] = -1;
  return;
 }
 $fs$idx$val$i$i = HEAP32[$fs>>2]|0;
 $fs$idx$val$idx$i$i = ((($fs$idx$val$i$i)) + 12|0);
 $fs$idx$val$idx$val$i$i = HEAP32[$fs$idx$val$idx$i$i>>2]|0;
 $list$0$i$i = $135;
 while(1) {
  $137 = (($fs$idx$val$idx$val$i$i) + ($list$0$i$i<<2)|0);
  $138 = HEAP32[$137>>2]|0;
  $139 = $138 >>> 14;
  $140 = (($139) + -131071)|0;
  $141 = ($140|0)==(-1);
  $142 = (($list$0$i$i) + 1)|0;
  $143 = (($142) + ($140))|0;
  $$0$i$i$i = $141 ? -1 : $143;
  $144 = ($$0$i$i$i|0)==(-1);
  if ($144) {
   $$lcssa = $137;$$lcssa52 = $138;$list$0$i$i$lcssa = $list$0$i$i;
   break;
  } else {
   $list$0$i$i = $$0$i$i$i;
  }
 }
 $$neg$i$i$i = $list$0$i$i$lcssa ^ -1;
 $145 = (($129) + ($$neg$i$i$i))|0;
 $ispos$i$i$i = ($145|0)>(-1);
 $neg$i$i$i = (0 - ($145))|0;
 $146 = $ispos$i$i$i ? $145 : $neg$i$i$i;
 $147 = ($146|0)>(131071);
 if ($147) {
  $148 = ((($fs)) + 12|0);
  $149 = HEAP32[$148>>2]|0;
  _luaX_syntaxerror($149,7984);
  // unreachable;
 }
 $150 = $$lcssa52 & 16383;
 $151 = $145 << 14;
 $152 = (($151) + 2147467264)|0;
 $153 = $152 | $150;
 HEAP32[$$lcssa>>2] = $153;
 HEAP32[$128>>2] = -1;
 return;
}
function _luaK_goiffalse($fs,$e) {
 $fs = $fs|0;
 $e = $e|0;
 var $$0$i$i = 0, $$0$i$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i7 = 0, $$lcssa = 0, $$lcssa51 = 0, $$lcssa52 = 0, $$lcssa53 = 0, $$lcssa54 = 0, $$lcssa55 = 0, $$lcssa56 = 0, $$lcssa57 = 0, $$neg$i$i = 0, $$neg$i$i$i = 0, $$neg$i$i$i$i = 0, $$neg$i$i$i$i8 = 0, $$pr = 0, $$pre = 0, $$pre$i$i = 0, $$pre$phi$i$iZ2D = 0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $fs$idx$val$i = 0, $fs$idx$val$i$i = 0;
 var $fs$idx$val$i$i$i = 0, $fs$idx$val$i$i$i2 = 0, $fs$idx$val$idx$i = 0, $fs$idx$val$idx$i$i = 0, $fs$idx$val$idx$i$i$i = 0, $fs$idx$val$idx$i$i$i3 = 0, $fs$idx$val$idx$val$i = 0, $fs$idx$val$idx$val$i$i = 0, $fs$idx$val$idx$val$i$i$i = 0, $fs$idx$val$idx$val$i$i$i4 = 0, $ispos$i$i = 0, $ispos$i$i$i = 0, $ispos$i$i$i$i = 0, $ispos$i$i$i$i9 = 0, $list$0$i = 0, $list$0$i$i = 0, $list$0$i$i$i = 0, $list$0$i$i$i$lcssa = 0, $list$0$i$i$i6 = 0, $list$0$i$i$i6$lcssa = 0;
 var $list$0$i$i$lcssa = 0, $list$0$i$lcssa = 0, $neg$i$i = 0, $neg$i$i$i = 0, $neg$i$i$i$i = 0, $neg$i$i$i$i10 = 0, $pc$0 = 0, $pc$013 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _luaK_dischargevars($fs,$e);
 $0 = HEAP32[$e>>2]|0;
 L1: do {
  switch ($0|0) {
  case 10:  {
   $1 = ((($e)) + 8|0);
   $2 = HEAP32[$1>>2]|0;
   $pc$0 = $2;
   label = 29;
   break;
  }
  case 3: case 1:  {
   break;
  }
  default: {
   $3 = ((($e)) + 8|0);
   switch ($0|0) {
   case 11:  {
    $4 = HEAP32[$3>>2]|0;
    $5 = HEAP32[$fs>>2]|0;
    $6 = ((($5)) + 12|0);
    $7 = HEAP32[$6>>2]|0;
    $8 = (($7) + ($4<<2)|0);
    $9 = HEAP32[$8>>2]|0;
    $10 = $9 & 63;
    $11 = ($10|0)==(20);
    if ($11) {
     $12 = ((($fs)) + 20|0);
     $13 = HEAP32[$12>>2]|0;
     $14 = (($13) + -1)|0;
     HEAP32[$12>>2] = $14;
     $15 = $9 >>> 23;
     $16 = $15 << 6;
     $17 = $16 | 27;
     (_luaK_code($fs,$17)|0);
     $18 = ((($fs)) + 28|0);
     $19 = HEAP32[$18>>2]|0;
     HEAP32[$18>>2] = -1;
     $20 = (_luaK_code($fs,2147450903)|0);
     $21 = ($19|0)==(-1);
     if ($21) {
      $pc$0 = $20;
      label = 29;
      break L1;
     }
     $22 = ($20|0)==(-1);
     if ($22) {
      $pc$013 = $19;
      label = 30;
      break L1;
     }
     $fs$idx$val$i$i$i2 = HEAP32[$fs>>2]|0;
     $fs$idx$val$idx$i$i$i3 = ((($fs$idx$val$i$i$i2)) + 12|0);
     $fs$idx$val$idx$val$i$i$i4 = HEAP32[$fs$idx$val$idx$i$i$i3>>2]|0;
     $list$0$i$i$i6 = $20;
     while(1) {
      $23 = (($fs$idx$val$idx$val$i$i$i4) + ($list$0$i$i$i6<<2)|0);
      $24 = HEAP32[$23>>2]|0;
      $25 = $24 >>> 14;
      $26 = (($25) + -131071)|0;
      $27 = ($26|0)==(-1);
      $28 = (($list$0$i$i$i6) + 1)|0;
      $29 = (($28) + ($26))|0;
      $$0$i$i$i$i7 = $27 ? -1 : $29;
      $30 = ($$0$i$i$i$i7|0)==(-1);
      if ($30) {
       $$lcssa56 = $23;$$lcssa57 = $24;$list$0$i$i$i6$lcssa = $list$0$i$i$i6;
       break;
      } else {
       $list$0$i$i$i6 = $$0$i$i$i$i7;
      }
     }
     $$neg$i$i$i$i8 = $list$0$i$i$i6$lcssa ^ -1;
     $31 = (($19) + ($$neg$i$i$i$i8))|0;
     $ispos$i$i$i$i9 = ($31|0)>(-1);
     $neg$i$i$i$i10 = (0 - ($31))|0;
     $32 = $ispos$i$i$i$i9 ? $31 : $neg$i$i$i$i10;
     $33 = ($32|0)>(131071);
     if ($33) {
      $34 = ((($fs)) + 12|0);
      $35 = HEAP32[$34>>2]|0;
      _luaX_syntaxerror($35,7984);
      // unreachable;
     } else {
      $36 = $$lcssa57 & 16383;
      $37 = $31 << 14;
      $38 = (($37) + 2147467264)|0;
      $39 = $38 | $36;
      HEAP32[$$lcssa56>>2] = $39;
      $pc$0 = $20;
      label = 29;
      break L1;
     }
    } else {
     label = 12;
    }
    break;
   }
   case 6:  {
    label = 19;
    break;
   }
   default: {
    label = 12;
   }
   }
   if ((label|0) == 12) {
    $40 = ((($fs)) + 48|0);
    $41 = HEAP8[$40>>0]|0;
    $42 = $41&255;
    $43 = (($42) + 1)|0;
    $44 = HEAP32[$fs>>2]|0;
    $45 = ((($44)) + 78|0);
    $46 = HEAP8[$45>>0]|0;
    $47 = $46&255;
    $48 = ($43>>>0)>($47>>>0);
    do {
     if ($48) {
      $49 = ($43>>>0)>(249);
      if ($49) {
       $50 = ((($fs)) + 12|0);
       $51 = HEAP32[$50>>2]|0;
       _luaX_syntaxerror($51,8011);
       // unreachable;
      } else {
       $52 = $43&255;
       HEAP8[$45>>0] = $52;
       $$pre$phi$i$iZ2D = $52;
       break;
      }
     } else {
      $$pre$i$i = $43&255;
      $$pre$phi$i$iZ2D = $$pre$i$i;
     }
    } while(0);
    HEAP8[$40>>0] = $$pre$phi$i$iZ2D;
    $53 = $$pre$phi$i$iZ2D&255;
    $54 = (($53) + -1)|0;
    _discharge2reg($fs,$e,$54);
    $$pr = HEAP32[$e>>2]|0;
    $55 = ($$pr|0)==(6);
    if ($55) {
     label = 19;
    } else {
     $$pre = HEAP32[$3>>2]|0;
     $67 = $$pre;
    }
   }
   if ((label|0) == 19) {
    $56 = HEAP32[$3>>2]|0;
    $57 = $56 & 256;
    $58 = ($57|0)==(0);
    if ($58) {
     $59 = ((($fs)) + 46|0);
     $60 = HEAP8[$59>>0]|0;
     $61 = $60&255;
     $62 = ($61|0)>($56|0);
     if ($62) {
      $67 = $56;
     } else {
      $63 = ((($fs)) + 48|0);
      $64 = HEAP8[$63>>0]|0;
      $65 = (($64) + -1)<<24>>24;
      HEAP8[$63>>0] = $65;
      $67 = $56;
     }
    } else {
     $67 = $56;
    }
   }
   $66 = $67 << 23;
   $68 = $66 | 32732;
   (_luaK_code($fs,$68)|0);
   $69 = ((($fs)) + 28|0);
   $70 = HEAP32[$69>>2]|0;
   HEAP32[$69>>2] = -1;
   $71 = (_luaK_code($fs,2147450903)|0);
   $72 = ($70|0)==(-1);
   if ($72) {
    $pc$0 = $71;
    label = 29;
   } else {
    $73 = ($71|0)==(-1);
    if ($73) {
     $pc$013 = $70;
     label = 30;
    } else {
     $fs$idx$val$i$i$i = HEAP32[$fs>>2]|0;
     $fs$idx$val$idx$i$i$i = ((($fs$idx$val$i$i$i)) + 12|0);
     $fs$idx$val$idx$val$i$i$i = HEAP32[$fs$idx$val$idx$i$i$i>>2]|0;
     $list$0$i$i$i = $71;
     while(1) {
      $74 = (($fs$idx$val$idx$val$i$i$i) + ($list$0$i$i$i<<2)|0);
      $75 = HEAP32[$74>>2]|0;
      $76 = $75 >>> 14;
      $77 = (($76) + -131071)|0;
      $78 = ($77|0)==(-1);
      $79 = (($list$0$i$i$i) + 1)|0;
      $80 = (($79) + ($77))|0;
      $$0$i$i$i$i = $78 ? -1 : $80;
      $81 = ($$0$i$i$i$i|0)==(-1);
      if ($81) {
       $$lcssa54 = $74;$$lcssa55 = $75;$list$0$i$i$i$lcssa = $list$0$i$i$i;
       break;
      } else {
       $list$0$i$i$i = $$0$i$i$i$i;
      }
     }
     $$neg$i$i$i$i = $list$0$i$i$i$lcssa ^ -1;
     $82 = (($70) + ($$neg$i$i$i$i))|0;
     $ispos$i$i$i$i = ($82|0)>(-1);
     $neg$i$i$i$i = (0 - ($82))|0;
     $83 = $ispos$i$i$i$i ? $82 : $neg$i$i$i$i;
     $84 = ($83|0)>(131071);
     if ($84) {
      $85 = ((($fs)) + 12|0);
      $86 = HEAP32[$85>>2]|0;
      _luaX_syntaxerror($86,7984);
      // unreachable;
     } else {
      $87 = $$lcssa55 & 16383;
      $88 = $82 << 14;
      $89 = (($88) + 2147467264)|0;
      $90 = $89 | $87;
      HEAP32[$$lcssa54>>2] = $90;
      $pc$0 = $71;
      label = 29;
      break L1;
     }
    }
   }
  }
  }
 } while(0);
 if ((label|0) == 29) {
  $91 = ($pc$0|0)==(-1);
  if (!($91)) {
   $pc$013 = $pc$0;
   label = 30;
  }
 }
 do {
  if ((label|0) == 30) {
   $92 = ((($e)) + 16|0);
   $93 = HEAP32[$92>>2]|0;
   $94 = ($93|0)==(-1);
   if ($94) {
    HEAP32[$92>>2] = $pc$013;
    break;
   }
   $fs$idx$val$i = HEAP32[$fs>>2]|0;
   $fs$idx$val$idx$i = ((($fs$idx$val$i)) + 12|0);
   $fs$idx$val$idx$val$i = HEAP32[$fs$idx$val$idx$i>>2]|0;
   $list$0$i = $93;
   while(1) {
    $95 = (($fs$idx$val$idx$val$i) + ($list$0$i<<2)|0);
    $96 = HEAP32[$95>>2]|0;
    $97 = $96 >>> 14;
    $98 = (($97) + -131071)|0;
    $99 = ($98|0)==(-1);
    $100 = (($list$0$i) + 1)|0;
    $101 = (($100) + ($98))|0;
    $$0$i$i = $99 ? -1 : $101;
    $102 = ($$0$i$i|0)==(-1);
    if ($102) {
     $$lcssa52 = $95;$$lcssa53 = $96;$list$0$i$lcssa = $list$0$i;
     break;
    } else {
     $list$0$i = $$0$i$i;
    }
   }
   $$neg$i$i = $list$0$i$lcssa ^ -1;
   $103 = (($pc$013) + ($$neg$i$i))|0;
   $ispos$i$i = ($103|0)>(-1);
   $neg$i$i = (0 - ($103))|0;
   $104 = $ispos$i$i ? $103 : $neg$i$i;
   $105 = ($104|0)>(131071);
   if ($105) {
    $106 = ((($fs)) + 12|0);
    $107 = HEAP32[$106>>2]|0;
    _luaX_syntaxerror($107,7984);
    // unreachable;
   } else {
    $108 = $$lcssa53 & 16383;
    $109 = $103 << 14;
    $110 = (($109) + 2147467264)|0;
    $111 = $110 | $108;
    HEAP32[$$lcssa52>>2] = $111;
    break;
   }
  }
 } while(0);
 $112 = ((($e)) + 20|0);
 $113 = HEAP32[$112>>2]|0;
 $114 = ((($fs)) + 20|0);
 $115 = HEAP32[$114>>2]|0;
 $116 = ((($fs)) + 24|0);
 HEAP32[$116>>2] = $115;
 $117 = ((($fs)) + 28|0);
 $118 = ($113|0)==(-1);
 if ($118) {
  HEAP32[$112>>2] = -1;
  return;
 }
 $119 = HEAP32[$117>>2]|0;
 $120 = ($119|0)==(-1);
 if ($120) {
  HEAP32[$117>>2] = $113;
  HEAP32[$112>>2] = -1;
  return;
 }
 $fs$idx$val$i$i = HEAP32[$fs>>2]|0;
 $fs$idx$val$idx$i$i = ((($fs$idx$val$i$i)) + 12|0);
 $fs$idx$val$idx$val$i$i = HEAP32[$fs$idx$val$idx$i$i>>2]|0;
 $list$0$i$i = $119;
 while(1) {
  $121 = (($fs$idx$val$idx$val$i$i) + ($list$0$i$i<<2)|0);
  $122 = HEAP32[$121>>2]|0;
  $123 = $122 >>> 14;
  $124 = (($123) + -131071)|0;
  $125 = ($124|0)==(-1);
  $126 = (($list$0$i$i) + 1)|0;
  $127 = (($126) + ($124))|0;
  $$0$i$i$i = $125 ? -1 : $127;
  $128 = ($$0$i$i$i|0)==(-1);
  if ($128) {
   $$lcssa = $121;$$lcssa51 = $122;$list$0$i$i$lcssa = $list$0$i$i;
   break;
  } else {
   $list$0$i$i = $$0$i$i$i;
  }
 }
 $$neg$i$i$i = $list$0$i$i$lcssa ^ -1;
 $129 = (($113) + ($$neg$i$i$i))|0;
 $ispos$i$i$i = ($129|0)>(-1);
 $neg$i$i$i = (0 - ($129))|0;
 $130 = $ispos$i$i$i ? $129 : $neg$i$i$i;
 $131 = ($130|0)>(131071);
 if ($131) {
  $132 = ((($fs)) + 12|0);
  $133 = HEAP32[$132>>2]|0;
  _luaX_syntaxerror($133,7984);
  // unreachable;
 }
 $134 = $$lcssa51 & 16383;
 $135 = $129 << 14;
 $136 = (($135) + 2147467264)|0;
 $137 = $136 | $134;
 HEAP32[$$lcssa>>2] = $137;
 HEAP32[$112>>2] = -1;
 return;
}
function _luaK_indexed($fs,$t,$k) {
 $fs = $fs|0;
 $t = $t|0;
 $k = $k|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($t)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1&255;
 $3 = ((($0)) + 2|0);
 HEAP8[$3>>0] = $2;
 $4 = (_luaK_exp2RK($fs,$k)|0);
 $5 = $4&65535;
 HEAP16[$0>>1] = $5;
 $6 = HEAP32[$t>>2]|0;
 $7 = ($6|0)==(8);
 $8 = $7 ? 8 : 7;
 $9 = ((($0)) + 3|0);
 HEAP8[$9>>0] = $8;
 HEAP32[$t>>2] = 9;
 return;
}
function _luaK_prefix($fs,$op,$e,$line) {
 $fs = $fs|0;
 $op = $op|0;
 $e = $e|0;
 $line = $line|0;
 var $$$i$i = 0, $$$i11$i = 0, $$0$i$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i9$i = 0, $$03$i$i = 0, $$03$i6$i = 0, $$phi$trans$insert$i = 0, $$pr$i = 0, $$pre$i = 0, $$pre$i$i = 0, $$pre$i$i$i = 0, $$pre$i$i14$i = 0, $$pre$i$i8$i = 0, $$pre$phi$i$i$iZ2D = 0, $$pre$phi17$iZ2D = 0, $$pre16$i = 0, $$sum$i$i$i = 0, $$sum$i$i$i$i = 0, $$sum$i$i$i7$i = 0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $12 = 0.0;
 var $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $e2 = 0, $fs$idx$val$i = 0, $fs$idx$val$idx$i = 0, $fs$idx$val$idx$val$i = 0, $fs$idx1$val$idx$phi$trans$insert$i$i = 0;
 var $fs$idx1$val$idx$phi$trans$insert$i3$i = 0, $fs$idx1$val$idx$val$pre$i$i = 0, $fs$idx1$val$idx$val$pre$i4$i = 0, $fs$idx1$val$pre$i$i = 0, $fs$idx1$val$pre$i2$i = 0, $phitmp$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $e2 = sp;
 $0 = ((($e2)) + 20|0);
 HEAP32[$0>>2] = -1;
 $1 = ((($e2)) + 16|0);
 HEAP32[$1>>2] = -1;
 HEAP32[$e2>>2] = 5;
 $2 = ((($e2)) + 8|0);
 HEAPF64[$2>>3] = 0.0;
 switch ($op|0) {
 case 0:  {
  $3 = HEAP32[$e>>2]|0;
  $4 = ($3|0)==(5);
  if ($4) {
   $5 = ((($e)) + 16|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = ($6|0)==(-1);
   if ($7) {
    $8 = ((($e)) + 20|0);
    $9 = HEAP32[$8>>2]|0;
    $10 = ($9|0)==(-1);
    if ($10) {
     $11 = ((($e)) + 8|0);
     $12 = +HEAPF64[$11>>3];
     $13 = -$12;
     HEAPF64[$11>>3] = $13;
     STACKTOP = sp;return;
    }
   }
  }
  (_luaK_exp2anyreg($fs,$e)|0);
  _codearith($fs,19,$e,$e2,$line);
  STACKTOP = sp;return;
  break;
 }
 case 1:  {
  _luaK_dischargevars($fs,$e);
  $14 = HEAP32[$e>>2]|0;
  switch ($14|0) {
  case 3: case 1:  {
   HEAP32[$e>>2] = 2;
   break;
  }
  case 2: case 5: case 4:  {
   HEAP32[$e>>2] = 3;
   break;
  }
  case 10:  {
   $fs$idx$val$i = HEAP32[$fs>>2]|0;
   $fs$idx$val$idx$i = ((($fs$idx$val$i)) + 12|0);
   $fs$idx$val$idx$val$i = HEAP32[$fs$idx$val$idx$i>>2]|0;
   $15 = ((($e)) + 8|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = (($fs$idx$val$idx$val$i) + ($16<<2)|0);
   $18 = ($16|0)>(0);
   if ($18) {
    $$sum$i$i$i = (($16) + -1)|0;
    $19 = (($fs$idx$val$idx$val$i) + ($$sum$i$i$i<<2)|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = $20 & 63;
    $22 = (6156 + ($21)|0);
    $23 = HEAP8[$22>>0]|0;
    $24 = ($23<<24>>24)<(0);
    if ($24) {
     $$0$i$i$i = $19;$26 = $20;
    } else {
     label = 12;
    }
   } else {
    label = 12;
   }
   if ((label|0) == 12) {
    $$pre$i$i = HEAP32[$17>>2]|0;
    $$0$i$i$i = $17;$26 = $$pre$i$i;
   }
   $25 = $26 & -16321;
   $27 = $26 & 16320;
   $28 = ($27|0)==(0);
   $29 = $28&1;
   $30 = $29 << 6;
   $31 = $30 | $25;
   HEAP32[$$0$i$i$i>>2] = $31;
   break;
  }
  case 6:  {
   label = 21;
   break;
  }
  case 11:  {
   $32 = ((($fs)) + 48|0);
   $33 = HEAP8[$32>>0]|0;
   $34 = $33&255;
   $35 = (($34) + 1)|0;
   $36 = HEAP32[$fs>>2]|0;
   $37 = ((($36)) + 78|0);
   $38 = HEAP8[$37>>0]|0;
   $39 = $38&255;
   $40 = ($35>>>0)>($39>>>0);
   do {
    if ($40) {
     $41 = ($35>>>0)>(249);
     if ($41) {
      $42 = ((($fs)) + 12|0);
      $43 = HEAP32[$42>>2]|0;
      _luaX_syntaxerror($43,8011);
      // unreachable;
     } else {
      $44 = $35&255;
      HEAP8[$37>>0] = $44;
      $$pre$phi$i$i$iZ2D = $44;
      break;
     }
    } else {
     $$pre$i$i14$i = $35&255;
     $$pre$phi$i$i$iZ2D = $$pre$i$i14$i;
    }
   } while(0);
   HEAP8[$32>>0] = $$pre$phi$i$i$iZ2D;
   $45 = $$pre$phi$i$i$iZ2D&255;
   $46 = (($45) + -1)|0;
   _discharge2reg($fs,$e,$46);
   $$pre$i = HEAP32[$e>>2]|0;
   $phitmp$i = ($$pre$i|0)==(6);
   if ($phitmp$i) {
    label = 21;
   } else {
    $$phi$trans$insert$i = ((($e)) + 8|0);
    $$pre16$i = HEAP32[$$phi$trans$insert$i>>2]|0;
    $$pre$phi17$iZ2D = $$phi$trans$insert$i;$59 = $$pre16$i;
    label = 24;
   }
   break;
  }
  default: {
  }
  }
  if ((label|0) == 21) {
   $47 = ((($e)) + 8|0);
   $48 = HEAP32[$47>>2]|0;
   $49 = $48 & 256;
   $50 = ($49|0)==(0);
   if ($50) {
    $51 = ((($fs)) + 46|0);
    $52 = HEAP8[$51>>0]|0;
    $53 = $52&255;
    $54 = ($53|0)>($48|0);
    if ($54) {
     $$pre$phi17$iZ2D = $47;$59 = $48;
     label = 24;
    } else {
     $55 = ((($fs)) + 48|0);
     $56 = HEAP8[$55>>0]|0;
     $57 = (($56) + -1)<<24>>24;
     HEAP8[$55>>0] = $57;
     $$pre$phi17$iZ2D = $47;$59 = $48;
     label = 24;
    }
   } else {
    $$pre$phi17$iZ2D = $47;$59 = $48;
    label = 24;
   }
  }
  if ((label|0) == 24) {
   $58 = $59 << 23;
   $60 = $58 | 20;
   $61 = (_luaK_code($fs,$60)|0);
   HEAP32[$$pre$phi17$iZ2D>>2] = $61;
   HEAP32[$e>>2] = 11;
  }
  $62 = ((($e)) + 20|0);
  $63 = HEAP32[$62>>2]|0;
  $64 = ((($e)) + 16|0);
  $65 = HEAP32[$64>>2]|0;
  HEAP32[$62>>2] = $65;
  HEAP32[$64>>2] = $63;
  $66 = ($65|0)==(-1);
  if ($66) {
   $91 = $63;
  } else {
   $fs$idx1$val$pre$i2$i = HEAP32[$fs>>2]|0;
   $fs$idx1$val$idx$phi$trans$insert$i3$i = ((($fs$idx1$val$pre$i2$i)) + 12|0);
   $fs$idx1$val$idx$val$pre$i4$i = HEAP32[$fs$idx1$val$idx$phi$trans$insert$i3$i>>2]|0;
   $$03$i6$i = $65;
   while(1) {
    $67 = (($fs$idx1$val$idx$val$pre$i4$i) + ($$03$i6$i<<2)|0);
    $68 = ($$03$i6$i|0)>(0);
    if ($68) {
     $$sum$i$i$i7$i = (($$03$i6$i) + -1)|0;
     $69 = (($fs$idx1$val$idx$val$pre$i4$i) + ($$sum$i$i$i7$i<<2)|0);
     $70 = HEAP32[$69>>2]|0;
     $71 = $70 & 63;
     $72 = (6156 + ($71)|0);
     $73 = HEAP8[$72>>0]|0;
     $74 = ($73<<24>>24)<(0);
     if ($74) {
      $$0$i$i$i9$i = $69;$76 = $70;
     } else {
      label = 29;
     }
    } else {
     label = 29;
    }
    if ((label|0) == 29) {
     label = 0;
     $$pre$i$i8$i = HEAP32[$67>>2]|0;
     $$0$i$i$i9$i = $67;$76 = $$pre$i$i8$i;
    }
    $75 = $76 & 63;
    $77 = ($75|0)==(28);
    if ($77) {
     $78 = $76 >>> 23;
     $79 = $78 << 6;
     $80 = $76 & 8372224;
     $81 = $80 | $79;
     $82 = $81 | 27;
     HEAP32[$$0$i$i$i9$i>>2] = $82;
    }
    $83 = HEAP32[$67>>2]|0;
    $84 = $83 >>> 14;
    $85 = (($84) + -131071)|0;
    $86 = ($85|0)==(-1);
    $87 = (($$03$i6$i) + 1)|0;
    $88 = (($87) + ($85))|0;
    $$$i11$i = $86 ? -1 : $88;
    $89 = ($$$i11$i|0)==(-1);
    if ($89) {
     break;
    } else {
     $$03$i6$i = $$$i11$i;
    }
   }
   $$pr$i = HEAP32[$64>>2]|0;
   $91 = $$pr$i;
  }
  $90 = ($91|0)==(-1);
  if ($90) {
   STACKTOP = sp;return;
  }
  $fs$idx1$val$pre$i$i = HEAP32[$fs>>2]|0;
  $fs$idx1$val$idx$phi$trans$insert$i$i = ((($fs$idx1$val$pre$i$i)) + 12|0);
  $fs$idx1$val$idx$val$pre$i$i = HEAP32[$fs$idx1$val$idx$phi$trans$insert$i$i>>2]|0;
  $$03$i$i = $91;
  while(1) {
   $92 = (($fs$idx1$val$idx$val$pre$i$i) + ($$03$i$i<<2)|0);
   $93 = ($$03$i$i|0)>(0);
   if ($93) {
    $$sum$i$i$i$i = (($$03$i$i) + -1)|0;
    $94 = (($fs$idx1$val$idx$val$pre$i$i) + ($$sum$i$i$i$i<<2)|0);
    $95 = HEAP32[$94>>2]|0;
    $96 = $95 & 63;
    $97 = (6156 + ($96)|0);
    $98 = HEAP8[$97>>0]|0;
    $99 = ($98<<24>>24)<(0);
    if ($99) {
     $$0$i$i$i$i = $94;$101 = $95;
    } else {
     label = 38;
    }
   } else {
    label = 38;
   }
   if ((label|0) == 38) {
    label = 0;
    $$pre$i$i$i = HEAP32[$92>>2]|0;
    $$0$i$i$i$i = $92;$101 = $$pre$i$i$i;
   }
   $100 = $101 & 63;
   $102 = ($100|0)==(28);
   if ($102) {
    $103 = $101 >>> 23;
    $104 = $103 << 6;
    $105 = $101 & 8372224;
    $106 = $105 | $104;
    $107 = $106 | 27;
    HEAP32[$$0$i$i$i$i>>2] = $107;
   }
   $108 = HEAP32[$92>>2]|0;
   $109 = $108 >>> 14;
   $110 = (($109) + -131071)|0;
   $111 = ($110|0)==(-1);
   $112 = (($$03$i$i) + 1)|0;
   $113 = (($112) + ($110))|0;
   $$$i$i = $111 ? -1 : $113;
   $114 = ($$$i$i|0)==(-1);
   if ($114) {
    break;
   } else {
    $$03$i$i = $$$i$i;
   }
  }
  STACKTOP = sp;return;
  break;
 }
 case 2:  {
  (_luaK_exp2anyreg($fs,$e)|0);
  _codearith($fs,21,$e,$e2,$line);
  STACKTOP = sp;return;
  break;
 }
 default: {
  STACKTOP = sp;return;
 }
 }
}
function _luaK_infix($fs,$op,$v) {
 $fs = $fs|0;
 $op = $op|0;
 $v = $v|0;
 var $$pre$i$i = 0, $$pre$phi$i$iZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 switch ($op|0) {
 case 13:  {
  _luaK_goiftrue($fs,$v);
  return;
  break;
 }
 case 14:  {
  _luaK_goiffalse($fs,$v);
  return;
  break;
 }
 case 6:  {
  _luaK_dischargevars($fs,$v);
  $0 = HEAP32[$v>>2]|0;
  $1 = ($0|0)==(6);
  if ($1) {
   $2 = ((($v)) + 8|0);
   $3 = HEAP32[$2>>2]|0;
   $4 = $3 & 256;
   $5 = ($4|0)==(0);
   if ($5) {
    $6 = ((($fs)) + 46|0);
    $7 = HEAP8[$6>>0]|0;
    $8 = $7&255;
    $9 = ($8|0)>($3|0);
    if (!($9)) {
     $10 = ((($fs)) + 48|0);
     $11 = HEAP8[$10>>0]|0;
     $12 = (($11) + -1)<<24>>24;
     HEAP8[$10>>0] = $12;
    }
   }
  }
  $13 = ((($fs)) + 48|0);
  $14 = HEAP8[$13>>0]|0;
  $15 = $14&255;
  $16 = (($15) + 1)|0;
  $17 = HEAP32[$fs>>2]|0;
  $18 = ((($17)) + 78|0);
  $19 = HEAP8[$18>>0]|0;
  $20 = $19&255;
  $21 = ($16>>>0)>($20>>>0);
  do {
   if ($21) {
    $22 = ($16>>>0)>(249);
    if ($22) {
     $23 = ((($fs)) + 12|0);
     $24 = HEAP32[$23>>2]|0;
     _luaX_syntaxerror($24,8011);
     // unreachable;
    } else {
     $25 = $16&255;
     HEAP8[$18>>0] = $25;
     $$pre$phi$i$iZ2D = $25;
     break;
    }
   } else {
    $$pre$i$i = $16&255;
    $$pre$phi$i$iZ2D = $$pre$i$i;
   }
  } while(0);
  HEAP8[$13>>0] = $$pre$phi$i$iZ2D;
  $26 = $$pre$phi$i$iZ2D&255;
  $27 = (($26) + -1)|0;
  _exp2reg($fs,$v,$27);
  return;
  break;
 }
 case 5: case 4: case 3: case 2: case 1: case 0:  {
  $28 = HEAP32[$v>>2]|0;
  $29 = ($28|0)==(5);
  if ($29) {
   $30 = ((($v)) + 16|0);
   $31 = HEAP32[$30>>2]|0;
   $32 = ($31|0)==(-1);
   if ($32) {
    $33 = ((($v)) + 20|0);
    $34 = HEAP32[$33>>2]|0;
    $35 = ($34|0)==(-1);
    if ($35) {
     return;
    }
   }
  }
  (_luaK_exp2RK($fs,$v)|0);
  return;
  break;
 }
 default: {
  (_luaK_exp2RK($fs,$v)|0);
  return;
 }
 }
}
function _luaK_posfix($fs,$op,$e1,$e2,$line) {
 $fs = $fs|0;
 $op = $op|0;
 $e1 = $e1|0;
 $e2 = $e2|0;
 $line = $line|0;
 var $$0$i$i = 0, $$0$i$i7 = 0, $$lcssa = 0, $$lcssa31 = 0, $$lcssa32 = 0, $$lcssa33 = 0, $$neg$i$i = 0, $$neg$i$i8 = 0, $$pre$i$i = 0, $$pre$phi$i$iZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $fs$idx$val$i = 0, $fs$idx$val$i2 = 0, $fs$idx$val$idx$i = 0, $fs$idx$val$idx$i3 = 0, $fs$idx$val$idx$val$i = 0, $fs$idx$val$idx$val$i4 = 0, $ispos$i$i = 0, $ispos$i$i9 = 0, $list$0$i = 0, $list$0$i$lcssa = 0, $list$0$i6 = 0, $list$0$i6$lcssa = 0, $neg$i$i = 0, $neg$i$i10 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 switch ($op|0) {
 case 13:  {
  _luaK_dischargevars($fs,$e2);
  $0 = ((($e2)) + 20|0);
  $1 = ((($e1)) + 20|0);
  $2 = HEAP32[$1>>2]|0;
  $3 = ($2|0)==(-1);
  do {
   if (!($3)) {
    $4 = HEAP32[$0>>2]|0;
    $5 = ($4|0)==(-1);
    if ($5) {
     HEAP32[$0>>2] = $2;
     break;
    }
    $fs$idx$val$i = HEAP32[$fs>>2]|0;
    $fs$idx$val$idx$i = ((($fs$idx$val$i)) + 12|0);
    $fs$idx$val$idx$val$i = HEAP32[$fs$idx$val$idx$i>>2]|0;
    $list$0$i = $4;
    while(1) {
     $6 = (($fs$idx$val$idx$val$i) + ($list$0$i<<2)|0);
     $7 = HEAP32[$6>>2]|0;
     $8 = $7 >>> 14;
     $9 = (($8) + -131071)|0;
     $10 = ($9|0)==(-1);
     $11 = (($list$0$i) + 1)|0;
     $12 = (($11) + ($9))|0;
     $$0$i$i = $10 ? -1 : $12;
     $13 = ($$0$i$i|0)==(-1);
     if ($13) {
      $$lcssa = $6;$$lcssa31 = $7;$list$0$i$lcssa = $list$0$i;
      break;
     } else {
      $list$0$i = $$0$i$i;
     }
    }
    $$neg$i$i = $list$0$i$lcssa ^ -1;
    $14 = (($2) + ($$neg$i$i))|0;
    $ispos$i$i = ($14|0)>(-1);
    $neg$i$i = (0 - ($14))|0;
    $15 = $ispos$i$i ? $14 : $neg$i$i;
    $16 = ($15|0)>(131071);
    if ($16) {
     $17 = ((($fs)) + 12|0);
     $18 = HEAP32[$17>>2]|0;
     _luaX_syntaxerror($18,7984);
     // unreachable;
    } else {
     $19 = $$lcssa31 & 16383;
     $20 = $14 << 14;
     $21 = (($20) + 2147467264)|0;
     $22 = $21 | $19;
     HEAP32[$$lcssa>>2] = $22;
     break;
    }
   }
  } while(0);
  ;HEAP32[$e1>>2]=HEAP32[$e2>>2]|0;HEAP32[$e1+4>>2]=HEAP32[$e2+4>>2]|0;HEAP32[$e1+8>>2]=HEAP32[$e2+8>>2]|0;HEAP32[$e1+12>>2]=HEAP32[$e2+12>>2]|0;HEAP32[$e1+16>>2]=HEAP32[$e2+16>>2]|0;HEAP32[$e1+20>>2]=HEAP32[$e2+20>>2]|0;
  return;
  break;
 }
 case 14:  {
  _luaK_dischargevars($fs,$e2);
  $23 = ((($e2)) + 16|0);
  $24 = ((($e1)) + 16|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = ($25|0)==(-1);
  do {
   if (!($26)) {
    $27 = HEAP32[$23>>2]|0;
    $28 = ($27|0)==(-1);
    if ($28) {
     HEAP32[$23>>2] = $25;
     break;
    }
    $fs$idx$val$i2 = HEAP32[$fs>>2]|0;
    $fs$idx$val$idx$i3 = ((($fs$idx$val$i2)) + 12|0);
    $fs$idx$val$idx$val$i4 = HEAP32[$fs$idx$val$idx$i3>>2]|0;
    $list$0$i6 = $27;
    while(1) {
     $29 = (($fs$idx$val$idx$val$i4) + ($list$0$i6<<2)|0);
     $30 = HEAP32[$29>>2]|0;
     $31 = $30 >>> 14;
     $32 = (($31) + -131071)|0;
     $33 = ($32|0)==(-1);
     $34 = (($list$0$i6) + 1)|0;
     $35 = (($34) + ($32))|0;
     $$0$i$i7 = $33 ? -1 : $35;
     $36 = ($$0$i$i7|0)==(-1);
     if ($36) {
      $$lcssa32 = $29;$$lcssa33 = $30;$list$0$i6$lcssa = $list$0$i6;
      break;
     } else {
      $list$0$i6 = $$0$i$i7;
     }
    }
    $$neg$i$i8 = $list$0$i6$lcssa ^ -1;
    $37 = (($25) + ($$neg$i$i8))|0;
    $ispos$i$i9 = ($37|0)>(-1);
    $neg$i$i10 = (0 - ($37))|0;
    $38 = $ispos$i$i9 ? $37 : $neg$i$i10;
    $39 = ($38|0)>(131071);
    if ($39) {
     $40 = ((($fs)) + 12|0);
     $41 = HEAP32[$40>>2]|0;
     _luaX_syntaxerror($41,7984);
     // unreachable;
    } else {
     $42 = $$lcssa33 & 16383;
     $43 = $37 << 14;
     $44 = (($43) + 2147467264)|0;
     $45 = $44 | $42;
     HEAP32[$$lcssa32>>2] = $45;
     break;
    }
   }
  } while(0);
  ;HEAP32[$e1>>2]=HEAP32[$e2>>2]|0;HEAP32[$e1+4>>2]=HEAP32[$e2+4>>2]|0;HEAP32[$e1+8>>2]=HEAP32[$e2+8>>2]|0;HEAP32[$e1+12>>2]=HEAP32[$e2+12>>2]|0;HEAP32[$e1+16>>2]=HEAP32[$e2+16>>2]|0;HEAP32[$e1+20>>2]=HEAP32[$e2+20>>2]|0;
  return;
  break;
 }
 case 6:  {
  $46 = ((($e2)) + 16|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = ((($e2)) + 20|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = ($47|0)==($49|0);
  if ($50) {
   _luaK_dischargevars($fs,$e2);
  } else {
   (_luaK_exp2anyreg($fs,$e2)|0);
  }
  $51 = HEAP32[$e2>>2]|0;
  $52 = ($51|0)==(11);
  if ($52) {
   $53 = ((($e2)) + 8|0);
   $54 = HEAP32[$53>>2]|0;
   $55 = HEAP32[$fs>>2]|0;
   $56 = ((($55)) + 12|0);
   $57 = HEAP32[$56>>2]|0;
   $58 = (($57) + ($54<<2)|0);
   $59 = HEAP32[$58>>2]|0;
   $60 = $59 & 63;
   $61 = ($60|0)==(22);
   if ($61) {
    $62 = HEAP32[$e1>>2]|0;
    $63 = ($62|0)==(6);
    $64 = ((($e1)) + 8|0);
    $65 = HEAP32[$64>>2]|0;
    $66 = $65 & 256;
    $67 = ($66|0)==(0);
    $or$cond = $63 & $67;
    if ($or$cond) {
     $68 = ((($fs)) + 46|0);
     $69 = HEAP8[$68>>0]|0;
     $70 = $69&255;
     $71 = ($70|0)>($65|0);
     if (!($71)) {
      $72 = ((($fs)) + 48|0);
      $73 = HEAP8[$72>>0]|0;
      $74 = (($73) + -1)<<24>>24;
      HEAP8[$72>>0] = $74;
     }
    }
    $75 = $59 & 8388607;
    $76 = $65 << 23;
    $77 = $76 | $75;
    HEAP32[$58>>2] = $77;
    HEAP32[$e1>>2] = 11;
    $78 = HEAP32[$53>>2]|0;
    HEAP32[$64>>2] = $78;
    return;
   }
  }
  _luaK_dischargevars($fs,$e2);
  $79 = HEAP32[$e2>>2]|0;
  $80 = ($79|0)==(6);
  if ($80) {
   $81 = ((($e2)) + 8|0);
   $82 = HEAP32[$81>>2]|0;
   $83 = $82 & 256;
   $84 = ($83|0)==(0);
   if ($84) {
    $85 = ((($fs)) + 46|0);
    $86 = HEAP8[$85>>0]|0;
    $87 = $86&255;
    $88 = ($87|0)>($82|0);
    if (!($88)) {
     $89 = ((($fs)) + 48|0);
     $90 = HEAP8[$89>>0]|0;
     $91 = (($90) + -1)<<24>>24;
     HEAP8[$89>>0] = $91;
    }
   }
  }
  $92 = ((($fs)) + 48|0);
  $93 = HEAP8[$92>>0]|0;
  $94 = $93&255;
  $95 = (($94) + 1)|0;
  $96 = HEAP32[$fs>>2]|0;
  $97 = ((($96)) + 78|0);
  $98 = HEAP8[$97>>0]|0;
  $99 = $98&255;
  $100 = ($95>>>0)>($99>>>0);
  do {
   if ($100) {
    $101 = ($95>>>0)>(249);
    if ($101) {
     $102 = ((($fs)) + 12|0);
     $103 = HEAP32[$102>>2]|0;
     _luaX_syntaxerror($103,8011);
     // unreachable;
    } else {
     $104 = $95&255;
     HEAP8[$97>>0] = $104;
     $$pre$phi$i$iZ2D = $104;
     break;
    }
   } else {
    $$pre$i$i = $95&255;
    $$pre$phi$i$iZ2D = $$pre$i$i;
   }
  } while(0);
  HEAP8[$92>>0] = $$pre$phi$i$iZ2D;
  $105 = $$pre$phi$i$iZ2D&255;
  $106 = (($105) + -1)|0;
  _exp2reg($fs,$e2,$106);
  _codearith($fs,22,$e1,$e2,$line);
  return;
  break;
 }
 case 5: case 4: case 3: case 2: case 1: case 0:  {
  $107 = (($op) + 13)|0;
  _codearith($fs,$107,$e1,$e2,$line);
  return;
  break;
 }
 case 9: case 8: case 7:  {
  $108 = (($op) + 17)|0;
  _codecomp($fs,$108,1,$e1,$e2);
  return;
  break;
 }
 case 12: case 11: case 10:  {
  $109 = (($op) + 14)|0;
  _codecomp($fs,$109,0,$e1,$e2);
  return;
  break;
 }
 default: {
  return;
 }
 }
}
function _luaK_fixline($fs,$line) {
 $fs = $fs|0;
 $line = $line|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($fs)) + 20|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + -1)|0;
 $3 = HEAP32[$fs>>2]|0;
 $4 = ((($3)) + 20|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + ($2<<2)|0);
 HEAP32[$6>>2] = $line;
 return;
}
function _luaK_setlist($fs,$base,$nelems,$tostore) {
 $fs = $fs|0;
 $base = $base|0;
 $nelems = $nelems|0;
 $tostore = $tostore|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($nelems) + -1)|0;
 $1 = (($0|0) / 50)&-1;
 $2 = (($1) + 1)|0;
 $3 = ($tostore|0)==(-1);
 $4 = $3 ? 0 : $tostore;
 $5 = ($2|0)<(512);
 if ($5) {
  $6 = $base << 6;
  $7 = $4 << 23;
  $8 = $2 << 14;
  $9 = $6 | $7;
  $10 = $9 | $8;
  $11 = $10 | 36;
  (_luaK_code($fs,$11)|0);
  $21 = (($base) + 1)|0;
  $22 = $21&255;
  $23 = ((($fs)) + 48|0);
  HEAP8[$23>>0] = $22;
  return;
 }
 $12 = ($2|0)<(67108864);
 if (!($12)) {
  $19 = ((($fs)) + 12|0);
  $20 = HEAP32[$19>>2]|0;
  _luaX_syntaxerror($20,8046);
  // unreachable;
 }
 $13 = $base << 6;
 $14 = $4 << 23;
 $15 = $13 | $14;
 $16 = $15 | 36;
 (_luaK_code($fs,$16)|0);
 $17 = $2 << 6;
 $18 = $17 | 39;
 (_luaK_code($fs,$18)|0);
 $21 = (($base) + 1)|0;
 $22 = $21&255;
 $23 = ((($fs)) + 48|0);
 HEAP8[$23>>0] = $22;
 return;
}
function _luaK_code($fs,$i) {
 $fs = $fs|0;
 $i = $i|0;
 var $$0$i$i$i = 0, $$0$i$i1$i = 0, $$02$i$i = 0, $$neg$i$i = 0, $$neg$i$i$i = 0, $$phi$trans$insert = 0, $$pre = 0, $$pre$phi7Z2D = 0, $$pre1 = 0, $$pre2 = 0, $$pre3 = 0, $$pre4 = 0, $$pre6 = 0, $$sum$i$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0;
 var $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $9 = 0, $fs$idx$val$idx$i$phi$trans$insert$i = 0, $fs$idx$val$idx$val$i$pre$i = 0, $ispos$i$i = 0, $ispos$i$i$i = 0, $neg$i$i = 0, $neg$i$i$i = 0;
 var $storemerge$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$fs>>2]|0;
 $1 = ((($fs)) + 28|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($fs)) + 20|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($2|0)==(-1);
 do {
  if ($5) {
   $51 = $4;
  } else {
   $fs$idx$val$idx$i$phi$trans$insert$i = ((($0)) + 12|0);
   $fs$idx$val$idx$val$i$pre$i = HEAP32[$fs$idx$val$idx$i$phi$trans$insert$i>>2]|0;
   $$02$i$i = $2;
   while(1) {
    $6 = (($fs$idx$val$idx$val$i$pre$i) + ($$02$i$i<<2)|0);
    $7 = HEAP32[$6>>2]|0;
    $8 = $7 >>> 14;
    $9 = (($8) + -131071)|0;
    $10 = ($9|0)==(-1);
    $11 = (($$02$i$i) + 1)|0;
    $12 = (($11) + ($9))|0;
    $$0$i$i$i = $10 ? -1 : $12;
    $13 = ($$02$i$i|0)>(0);
    if ($13) {
     $$sum$i$i$i = (($$02$i$i) + -1)|0;
     $14 = (($fs$idx$val$idx$val$i$pre$i) + ($$sum$i$i$i<<2)|0);
     $15 = HEAP32[$14>>2]|0;
     $16 = $15 & 63;
     $17 = (6156 + ($16)|0);
     $18 = HEAP8[$17>>0]|0;
     $19 = ($18<<24>>24)<(0);
     if ($19) {
      $$0$i$i1$i = $14;$21 = $15;
     } else {
      label = 5;
     }
    } else {
     label = 5;
    }
    if ((label|0) == 5) {
     label = 0;
     $$0$i$i1$i = $6;$21 = $7;
    }
    $20 = $21 & 63;
    $22 = ($20|0)==(28);
    if ($22) {
     $23 = $21 >>> 23;
     $24 = $23 << 6;
     $25 = $21 & 8372224;
     $26 = $25 | $24;
     $27 = $26 | 27;
     HEAP32[$$0$i$i1$i>>2] = $27;
     $$neg$i$i = $$02$i$i ^ -1;
     $28 = (($4) + ($$neg$i$i))|0;
     $ispos$i$i = ($28|0)>(-1);
     $neg$i$i = (0 - ($28))|0;
     $29 = $ispos$i$i ? $28 : $neg$i$i;
     $30 = ($29|0)>(131071);
     if ($30) {
      label = 8;
      break;
     }
     $33 = HEAP32[$6>>2]|0;
     $34 = $33 & 16383;
     $35 = $28 << 14;
     $36 = (($35) + 2147467264)|0;
     $37 = $34 | $36;
     $storemerge$i = $37;
    } else {
     $$neg$i$i$i = $$02$i$i ^ -1;
     $38 = (($4) + ($$neg$i$i$i))|0;
     $ispos$i$i$i = ($38|0)>(-1);
     $neg$i$i$i = (0 - ($38))|0;
     $39 = $ispos$i$i$i ? $38 : $neg$i$i$i;
     $40 = ($39|0)>(131071);
     if ($40) {
      label = 11;
      break;
     }
     $43 = $7 & 16383;
     $44 = $38 << 14;
     $45 = (($44) + 2147467264)|0;
     $46 = $45 | $43;
     $storemerge$i = $46;
    }
    HEAP32[$6>>2] = $storemerge$i;
    $47 = ($$0$i$i$i|0)==(-1);
    if ($47) {
     label = 14;
     break;
    } else {
     $$02$i$i = $$0$i$i$i;
    }
   }
   if ((label|0) == 8) {
    $31 = ((($fs)) + 12|0);
    $32 = HEAP32[$31>>2]|0;
    _luaX_syntaxerror($32,7984);
    // unreachable;
   }
   else if ((label|0) == 11) {
    $41 = ((($fs)) + 12|0);
    $42 = HEAP32[$41>>2]|0;
    _luaX_syntaxerror($42,7984);
    // unreachable;
   }
   else if ((label|0) == 14) {
    $$pre = HEAP32[$3>>2]|0;
    $51 = $$pre;
    break;
   }
  }
 } while(0);
 HEAP32[$1>>2] = -1;
 $48 = ((($0)) + 48|0);
 $49 = HEAP32[$48>>2]|0;
 $50 = ($51|0)<($49|0);
 if ($50) {
  $$phi$trans$insert = ((($0)) + 12|0);
  $$pre2 = HEAP32[$$phi$trans$insert>>2]|0;
  $60 = $$pre2;$61 = $51;
 } else {
  $52 = ((($fs)) + 12|0);
  $53 = HEAP32[$52>>2]|0;
  $54 = ((($53)) + 52|0);
  $55 = HEAP32[$54>>2]|0;
  $56 = ((($0)) + 12|0);
  $57 = HEAP32[$56>>2]|0;
  $58 = (_luaM_growaux_($55,$57,$48,4,2147483645,8077)|0);
  HEAP32[$56>>2] = $58;
  $$pre1 = HEAP32[$3>>2]|0;
  $60 = $58;$61 = $$pre1;
 }
 $59 = (($60) + ($61<<2)|0);
 HEAP32[$59>>2] = $i;
 $62 = HEAP32[$3>>2]|0;
 $63 = ((($0)) + 52|0);
 $64 = HEAP32[$63>>2]|0;
 $65 = ($62|0)<($64|0);
 $$pre4 = ((($fs)) + 12|0);
 if ($65) {
  $$pre6 = ((($0)) + 20|0);
  $$pre$phi7Z2D = $$pre6;$77 = $62;
  $72 = HEAP32[$$pre4>>2]|0;
  $73 = ((($72)) + 8|0);
  $74 = HEAP32[$73>>2]|0;
  $75 = HEAP32[$$pre$phi7Z2D>>2]|0;
  $76 = (($75) + ($77<<2)|0);
  HEAP32[$76>>2] = $74;
  $78 = HEAP32[$3>>2]|0;
  $79 = (($78) + 1)|0;
  HEAP32[$3>>2] = $79;
  return ($78|0);
 } else {
  $66 = HEAP32[$$pre4>>2]|0;
  $67 = ((($66)) + 52|0);
  $68 = HEAP32[$67>>2]|0;
  $69 = ((($0)) + 20|0);
  $70 = HEAP32[$69>>2]|0;
  $71 = (_luaM_growaux_($68,$70,$63,4,2147483645,8077)|0);
  HEAP32[$69>>2] = $71;
  $$pre3 = HEAP32[$3>>2]|0;
  $$pre$phi7Z2D = $69;$77 = $$pre3;
  $72 = HEAP32[$$pre4>>2]|0;
  $73 = ((($72)) + 8|0);
  $74 = HEAP32[$73>>2]|0;
  $75 = HEAP32[$$pre$phi7Z2D>>2]|0;
  $76 = (($75) + ($77<<2)|0);
  HEAP32[$76>>2] = $74;
  $78 = HEAP32[$3>>2]|0;
  $79 = (($78) + 1)|0;
  HEAP32[$3>>2] = $79;
  return ($78|0);
 }
 return (0)|0;
}
function _addk($fs,$key,$v) {
 $fs = $fs|0;
 $key = $key|0;
 $v = $v|0;
 var $$0 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0.0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, $oldsize$01 = 0, $u$sroa$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $u$sroa$0 = sp;
 $0 = ((($fs)) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 52|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($fs)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (_luaH_set($3,$5,$key)|0);
 $7 = HEAP32[$fs>>2]|0;
 $8 = ((($6)) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==(3);
 if ($10) {
  $11 = +HEAPF64[$6>>3];
  $12 = $11 + 6755399441055744.0;
  HEAPF64[$u$sroa$0>>3] = $12;
  $13 = HEAP32[$u$sroa$0>>2]|0;
  $14 = ((($7)) + 8|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = (((($15) + ($13<<4)|0)) + 8|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = ((($v)) + 8|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = ($17|0)==($19|0);
  if ($20) {
   $21 = (($15) + ($13<<4)|0);
   $22 = (_luaV_equalobj_(0,$21,$v)|0);
   $23 = ($22|0)==(0);
   if (!($23)) {
    $$0 = $13;
    STACKTOP = sp;return ($$0|0);
   }
  }
 }
 $24 = ((($7)) + 44|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = ((($fs)) + 32|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = (+($27|0));
 HEAPF64[$6>>3] = $28;
 HEAP32[$8>>2] = 3;
 $29 = ($27|0)<($25|0);
 if ($29) {
  $34 = $25;
 } else {
  $30 = ((($7)) + 8|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = (_luaM_growaux_($3,$31,$24,16,67108863,8067)|0);
  HEAP32[$30>>2] = $32;
  $$pre = HEAP32[$24>>2]|0;
  $34 = $$pre;
 }
 $33 = ($25|0)<($34|0);
 $35 = ((($7)) + 8|0);
 $36 = HEAP32[$35>>2]|0;
 if ($33) {
  $oldsize$01 = $25;
  while(1) {
   $37 = (($oldsize$01) + 1)|0;
   $38 = (((($36) + ($oldsize$01<<4)|0)) + 8|0);
   HEAP32[$38>>2] = 0;
   $39 = ($37|0)<($34|0);
   if ($39) {
    $oldsize$01 = $37;
   } else {
    break;
   }
  }
 }
 $40 = (($36) + ($27<<4)|0);
 $41 = $v;
 $42 = $41;
 $43 = HEAP32[$42>>2]|0;
 $44 = (($41) + 4)|0;
 $45 = $44;
 $46 = HEAP32[$45>>2]|0;
 $47 = $40;
 $48 = $47;
 HEAP32[$48>>2] = $43;
 $49 = (($47) + 4)|0;
 $50 = $49;
 HEAP32[$50>>2] = $46;
 $51 = ((($v)) + 8|0);
 $52 = HEAP32[$51>>2]|0;
 $53 = (((($36) + ($27<<4)|0)) + 8|0);
 HEAP32[$53>>2] = $52;
 $54 = HEAP32[$26>>2]|0;
 $55 = (($54) + 1)|0;
 HEAP32[$26>>2] = $55;
 $56 = HEAP32[$51>>2]|0;
 $57 = $56 & 64;
 $58 = ($57|0)==(0);
 if ($58) {
  $$0 = $27;
  STACKTOP = sp;return ($$0|0);
 }
 $59 = HEAP32[$v>>2]|0;
 $60 = ((($59)) + 5|0);
 $61 = HEAP8[$60>>0]|0;
 $62 = $61 & 3;
 $63 = ($62<<24>>24)==(0);
 if ($63) {
  $$0 = $27;
  STACKTOP = sp;return ($$0|0);
 }
 $64 = ((($7)) + 5|0);
 $65 = HEAP8[$64>>0]|0;
 $66 = $65 & 4;
 $67 = ($66<<24>>24)==(0);
 if ($67) {
  $$0 = $27;
  STACKTOP = sp;return ($$0|0);
 }
 _luaC_barrier_($3,$7,$59);
 $$0 = $27;
 STACKTOP = sp;return ($$0|0);
}
function _exp2reg($fs,$e,$reg) {
 $fs = $fs|0;
 $e = $e|0;
 $reg = $reg|0;
 var $$$i = 0, $$$i20 = 0, $$0$i$i = 0, $$0$i$i$i = 0, $$0$i$i$i35 = 0, $$0$i$i26 = 0, $$0$i$i26$us = 0, $$0$i$i46 = 0, $$0$i$i59 = 0, $$0$i$i6 = 0, $$0$i$i6$us = 0, $$014$i = 0, $$014$i16 = 0, $$02$i = 0, $$02$i$us = 0, $$02$i42 = 0, $$lcssa = 0, $$lcssa119 = 0, $$lcssa120 = 0, $$lcssa121 = 0;
 var $$lcssa122 = 0, $$lcssa123 = 0, $$neg$i = 0, $$neg$i$i = 0, $$neg$i$i$i = 0, $$neg$i$i$i36 = 0, $$neg$i$i47 = 0, $$neg$i$i7 = 0, $$neg$i$i7$us = 0, $$neg$i$us = 0, $$neg$i53 = 0, $$pre$i = 0, $$pre$i18 = 0, $$pre88 = 0, $$sum$i$i = 0, $$sum$i$i17 = 0, $$sum$i$i24 = 0, $$sum$i$i24$us = 0, $$sum$i$i57 = 0, $0 = 0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0;
 var $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0;
 var $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0;
 var $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0;
 var $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $fs$idx$val$i = 0;
 var $fs$idx$val$i$i = 0, $fs$idx$val$i$i30 = 0, $fs$idx$val$i3$us$pre = 0, $fs$idx$val$i43$pre = 0, $fs$idx$val$idx$i = 0, $fs$idx$val$idx$i$i = 0, $fs$idx$val$idx$i$i31 = 0, $fs$idx$val$idx$i4$us$phi$trans$insert = 0, $fs$idx$val$idx$i44$phi$trans$insert = 0, $fs$idx$val$idx$val$i = 0, $fs$idx$val$idx$val$i$i = 0, $fs$idx$val$idx$val$i$i32 = 0, $fs$idx$val$idx$val$i45$pre = 0, $fs$idx$val$idx$val$i5$us$pre = 0, $fs$idx2$val$i = 0, $fs$idx2$val$i12 = 0, $fs$idx2$val$idx$i = 0, $fs$idx2$val$idx$i13 = 0, $fs$idx2$val$idx$val$i = 0, $fs$idx2$val$idx$val$i14 = 0;
 var $ispos$i = 0, $ispos$i$i = 0, $ispos$i$i$i = 0, $ispos$i$i$i37 = 0, $ispos$i$i48 = 0, $ispos$i$i8 = 0, $ispos$i$i8$us = 0, $ispos$i$us = 0, $ispos$i54 = 0, $list$0$i = 0, $list$0$i$i = 0, $list$0$i$i$lcssa = 0, $list$0$i$i34 = 0, $list$0$i$i34$lcssa = 0, $list$0$i$lcssa = 0, $neg$i = 0, $neg$i$i = 0, $neg$i$i$i = 0, $neg$i$i$i38 = 0, $neg$i$i49 = 0;
 var $neg$i$i9 = 0, $neg$i$i9$us = 0, $neg$i$us = 0, $neg$i55 = 0, $or$cond$i61 = 0, $p_f$0 = 0, $p_t$0 = 0, $storemerge = 0, $storemerge$i = 0, $storemerge$i62 = 0, $storemerge90 = 0, $storemerge91 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _discharge2reg($fs,$e,$reg);
 $0 = HEAP32[$e>>2]|0;
 $1 = ($0|0)==(10);
 $2 = ((($e)) + 16|0);
 do {
  if ($1) {
   $3 = ((($e)) + 8|0);
   $4 = HEAP32[$3>>2]|0;
   $5 = ($4|0)==(-1);
   if (!($5)) {
    $6 = HEAP32[$2>>2]|0;
    $7 = ($6|0)==(-1);
    if ($7) {
     HEAP32[$2>>2] = $4;
     break;
    }
    $fs$idx$val$i = HEAP32[$fs>>2]|0;
    $fs$idx$val$idx$i = ((($fs$idx$val$i)) + 12|0);
    $fs$idx$val$idx$val$i = HEAP32[$fs$idx$val$idx$i>>2]|0;
    $list$0$i = $6;
    while(1) {
     $8 = (($fs$idx$val$idx$val$i) + ($list$0$i<<2)|0);
     $9 = HEAP32[$8>>2]|0;
     $10 = $9 >>> 14;
     $11 = (($10) + -131071)|0;
     $12 = ($11|0)==(-1);
     $13 = (($list$0$i) + 1)|0;
     $14 = (($13) + ($11))|0;
     $$0$i$i = $12 ? -1 : $14;
     $15 = ($$0$i$i|0)==(-1);
     if ($15) {
      $$lcssa122 = $8;$$lcssa123 = $9;$list$0$i$lcssa = $list$0$i;
      break;
     } else {
      $list$0$i = $$0$i$i;
     }
    }
    $$neg$i$i = $list$0$i$lcssa ^ -1;
    $16 = (($4) + ($$neg$i$i))|0;
    $ispos$i$i = ($16|0)>(-1);
    $neg$i$i = (0 - ($16))|0;
    $17 = $ispos$i$i ? $16 : $neg$i$i;
    $18 = ($17|0)>(131071);
    if ($18) {
     $19 = ((($fs)) + 12|0);
     $20 = HEAP32[$19>>2]|0;
     _luaX_syntaxerror($20,7984);
     // unreachable;
    } else {
     $21 = $$lcssa123 & 16383;
     $22 = $16 << 14;
     $23 = (($22) + 2147467264)|0;
     $24 = $23 | $21;
     HEAP32[$$lcssa122>>2] = $24;
     break;
    }
   }
  }
 } while(0);
 $25 = HEAP32[$2>>2]|0;
 $26 = ((($e)) + 20|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = ($25|0)==($27|0);
 if ($28) {
  HEAP32[$2>>2] = -1;
  HEAP32[$26>>2] = -1;
  $259 = ((($e)) + 8|0);
  HEAP32[$259>>2] = $reg;
  HEAP32[$e>>2] = 6;
  return;
 }
 $29 = ($25|0)==(-1);
 L17: do {
  if ($29) {
   label = 18;
  } else {
   $fs$idx2$val$i = HEAP32[$fs>>2]|0;
   $fs$idx2$val$idx$i = ((($fs$idx2$val$i)) + 12|0);
   $fs$idx2$val$idx$val$i = HEAP32[$fs$idx2$val$idx$i>>2]|0;
   $$014$i = $25;
   while(1) {
    $30 = (($fs$idx2$val$idx$val$i) + ($$014$i<<2)|0);
    $31 = ($$014$i|0)>(0);
    if ($31) {
     $$sum$i$i = (($$014$i) + -1)|0;
     $32 = (($fs$idx2$val$idx$val$i) + ($$sum$i$i<<2)|0);
     $33 = HEAP32[$32>>2]|0;
     $34 = $33 & 63;
     $35 = (6156 + ($34)|0);
     $36 = HEAP8[$35>>0]|0;
     $37 = ($36<<24>>24)<(0);
     if ($37) {
      $39 = $33;
     } else {
      label = 15;
     }
    } else {
     label = 15;
    }
    if ((label|0) == 15) {
     label = 0;
     $$pre$i = HEAP32[$30>>2]|0;
     $39 = $$pre$i;
    }
    $38 = $39 & 63;
    $40 = ($38|0)==(28);
    if (!($40)) {
     label = 25;
     break L17;
    }
    $41 = HEAP32[$30>>2]|0;
    $42 = $41 >>> 14;
    $43 = (($42) + -131071)|0;
    $44 = ($43|0)==(-1);
    $45 = (($$014$i) + 1)|0;
    $46 = (($45) + ($43))|0;
    $$$i = $44 ? -1 : $46;
    $47 = ($$$i|0)==(-1);
    if ($47) {
     label = 18;
     break;
    } else {
     $$014$i = $$$i;
    }
   }
  }
 } while(0);
 L27: do {
  if ((label|0) == 18) {
   $48 = ($27|0)==(-1);
   if ($48) {
    $p_f$0 = -1;$p_t$0 = -1;
   } else {
    $fs$idx2$val$i12 = HEAP32[$fs>>2]|0;
    $fs$idx2$val$idx$i13 = ((($fs$idx2$val$i12)) + 12|0);
    $fs$idx2$val$idx$val$i14 = HEAP32[$fs$idx2$val$idx$i13>>2]|0;
    $$014$i16 = $27;
    while(1) {
     $49 = (($fs$idx2$val$idx$val$i14) + ($$014$i16<<2)|0);
     $50 = ($$014$i16|0)>(0);
     if ($50) {
      $$sum$i$i17 = (($$014$i16) + -1)|0;
      $51 = (($fs$idx2$val$idx$val$i14) + ($$sum$i$i17<<2)|0);
      $52 = HEAP32[$51>>2]|0;
      $53 = $52 & 63;
      $54 = (6156 + ($53)|0);
      $55 = HEAP8[$54>>0]|0;
      $56 = ($55<<24>>24)<(0);
      if ($56) {
       $58 = $52;
      } else {
       label = 22;
      }
     } else {
      label = 22;
     }
     if ((label|0) == 22) {
      label = 0;
      $$pre$i18 = HEAP32[$49>>2]|0;
      $58 = $$pre$i18;
     }
     $57 = $58 & 63;
     $59 = ($57|0)==(28);
     if (!($59)) {
      label = 25;
      break L27;
     }
     $60 = HEAP32[$49>>2]|0;
     $61 = $60 >>> 14;
     $62 = (($61) + -131071)|0;
     $63 = ($62|0)==(-1);
     $64 = (($$014$i16) + 1)|0;
     $65 = (($64) + ($62))|0;
     $$$i20 = $63 ? -1 : $65;
     $66 = ($$$i20|0)==(-1);
     if ($66) {
      $p_f$0 = -1;$p_t$0 = -1;
      break;
     } else {
      $$014$i16 = $$$i20;
     }
    }
   }
  }
 } while(0);
 do {
  if ((label|0) == 25) {
   $$pre88 = ((($fs)) + 28|0);
   do {
    if ($1) {
     $99 = -1;
    } else {
     $67 = HEAP32[$$pre88>>2]|0;
     HEAP32[$$pre88>>2] = -1;
     $68 = (_luaK_code($fs,2147450903)|0);
     $69 = ($67|0)==(-1);
     if ($69) {
      $99 = $68;
     } else {
      $70 = ($68|0)==(-1);
      if ($70) {
       $99 = $67;
      } else {
       $fs$idx$val$i$i = HEAP32[$fs>>2]|0;
       $fs$idx$val$idx$i$i = ((($fs$idx$val$i$i)) + 12|0);
       $fs$idx$val$idx$val$i$i = HEAP32[$fs$idx$val$idx$i$i>>2]|0;
       $list$0$i$i = $68;
       while(1) {
        $71 = (($fs$idx$val$idx$val$i$i) + ($list$0$i$i<<2)|0);
        $72 = HEAP32[$71>>2]|0;
        $73 = $72 >>> 14;
        $74 = (($73) + -131071)|0;
        $75 = ($74|0)==(-1);
        $76 = (($list$0$i$i) + 1)|0;
        $77 = (($76) + ($74))|0;
        $$0$i$i$i = $75 ? -1 : $77;
        $78 = ($$0$i$i$i|0)==(-1);
        if ($78) {
         $$lcssa120 = $71;$$lcssa121 = $72;$list$0$i$i$lcssa = $list$0$i$i;
         break;
        } else {
         $list$0$i$i = $$0$i$i$i;
        }
       }
       $$neg$i$i$i = $list$0$i$i$lcssa ^ -1;
       $79 = (($67) + ($$neg$i$i$i))|0;
       $ispos$i$i$i = ($79|0)>(-1);
       $neg$i$i$i = (0 - ($79))|0;
       $80 = $ispos$i$i$i ? $79 : $neg$i$i$i;
       $81 = ($80|0)>(131071);
       if ($81) {
        $82 = ((($fs)) + 12|0);
        $83 = HEAP32[$82>>2]|0;
        _luaX_syntaxerror($83,7984);
        // unreachable;
       } else {
        $84 = $$lcssa121 & 16383;
        $85 = $79 << 14;
        $86 = (($85) + 2147467264)|0;
        $87 = $86 | $84;
        HEAP32[$$lcssa120>>2] = $87;
        $99 = $68;
        break;
       }
      }
     }
    }
   } while(0);
   $88 = ((($fs)) + 20|0);
   $89 = HEAP32[$88>>2]|0;
   $90 = ((($fs)) + 24|0);
   HEAP32[$90>>2] = $89;
   $91 = $reg << 6;
   $92 = $91 | 16387;
   $93 = (_luaK_code($fs,$92)|0);
   $94 = HEAP32[$88>>2]|0;
   HEAP32[$90>>2] = $94;
   $95 = $91 | 8388611;
   $96 = (_luaK_code($fs,$95)|0);
   $97 = HEAP32[$88>>2]|0;
   HEAP32[$90>>2] = $97;
   $98 = ($99|0)==(-1);
   if ($98) {
    $p_f$0 = $93;$p_t$0 = $96;
   } else {
    $100 = HEAP32[$$pre88>>2]|0;
    $101 = ($100|0)==(-1);
    if ($101) {
     HEAP32[$$pre88>>2] = $99;
     $p_f$0 = $93;$p_t$0 = $96;
     break;
    }
    $fs$idx$val$i$i30 = HEAP32[$fs>>2]|0;
    $fs$idx$val$idx$i$i31 = ((($fs$idx$val$i$i30)) + 12|0);
    $fs$idx$val$idx$val$i$i32 = HEAP32[$fs$idx$val$idx$i$i31>>2]|0;
    $list$0$i$i34 = $100;
    while(1) {
     $102 = (($fs$idx$val$idx$val$i$i32) + ($list$0$i$i34<<2)|0);
     $103 = HEAP32[$102>>2]|0;
     $104 = $103 >>> 14;
     $105 = (($104) + -131071)|0;
     $106 = ($105|0)==(-1);
     $107 = (($list$0$i$i34) + 1)|0;
     $108 = (($107) + ($105))|0;
     $$0$i$i$i35 = $106 ? -1 : $108;
     $109 = ($$0$i$i$i35|0)==(-1);
     if ($109) {
      $$lcssa = $102;$$lcssa119 = $103;$list$0$i$i34$lcssa = $list$0$i$i34;
      break;
     } else {
      $list$0$i$i34 = $$0$i$i$i35;
     }
    }
    $$neg$i$i$i36 = $list$0$i$i34$lcssa ^ -1;
    $110 = (($99) + ($$neg$i$i$i36))|0;
    $ispos$i$i$i37 = ($110|0)>(-1);
    $neg$i$i$i38 = (0 - ($110))|0;
    $111 = $ispos$i$i$i37 ? $110 : $neg$i$i$i38;
    $112 = ($111|0)>(131071);
    if ($112) {
     $113 = ((($fs)) + 12|0);
     $114 = HEAP32[$113>>2]|0;
     _luaX_syntaxerror($114,7984);
     // unreachable;
    } else {
     $115 = $$lcssa119 & 16383;
     $116 = $110 << 14;
     $117 = (($116) + 2147467264)|0;
     $118 = $117 | $115;
     HEAP32[$$lcssa>>2] = $118;
     $p_f$0 = $93;$p_t$0 = $96;
     break;
    }
   }
  }
 } while(0);
 $119 = ((($fs)) + 20|0);
 $120 = HEAP32[$119>>2]|0;
 $121 = ((($fs)) + 24|0);
 HEAP32[$121>>2] = $120;
 $122 = HEAP32[$26>>2]|0;
 $123 = ($122|0)==(-1);
 L62: do {
  if (!($123)) {
   $124 = ($reg|0)==(255);
   $125 = $reg << 6;
   $126 = $125 & 16320;
   $fs$idx$val$i43$pre = HEAP32[$fs>>2]|0;
   $fs$idx$val$idx$i44$phi$trans$insert = ((($fs$idx$val$i43$pre)) + 12|0);
   $fs$idx$val$idx$val$i45$pre = HEAP32[$fs$idx$val$idx$i44$phi$trans$insert>>2]|0;
   $$02$i42 = $122;
   while(1) {
    $127 = (($fs$idx$val$idx$val$i45$pre) + ($$02$i42<<2)|0);
    $128 = HEAP32[$127>>2]|0;
    $129 = $128 >>> 14;
    $130 = (($129) + -131071)|0;
    $131 = ($130|0)==(-1);
    $132 = (($$02$i42) + 1)|0;
    $133 = (($132) + ($130))|0;
    $$0$i$i46 = $131 ? -1 : $133;
    $134 = ($$02$i42|0)>(0);
    if ($134) {
     $$sum$i$i57 = (($$02$i42) + -1)|0;
     $135 = (($fs$idx$val$idx$val$i45$pre) + ($$sum$i$i57<<2)|0);
     $136 = HEAP32[$135>>2]|0;
     $137 = $136 & 63;
     $138 = (6156 + ($137)|0);
     $139 = HEAP8[$138>>0]|0;
     $140 = ($139<<24>>24)<(0);
     if ($140) {
      $$0$i$i59 = $135;$142 = $136;
     } else {
      label = 45;
     }
    } else {
     label = 45;
    }
    if ((label|0) == 45) {
     label = 0;
     $$0$i$i59 = $127;$142 = $128;
    }
    $141 = $142 & 63;
    $143 = ($141|0)==(28);
    if ($143) {
     $144 = $142 >>> 23;
     $145 = ($144|0)==($reg|0);
     $or$cond$i61 = $124 | $145;
     if ($or$cond$i61) {
      $148 = $144 << 6;
      $149 = $142 & 8372224;
      $150 = $149 | $148;
      $151 = $150 | 27;
      $storemerge$i62 = $151;
     } else {
      $146 = $142 & -16321;
      $147 = $146 | $126;
      $storemerge$i62 = $147;
     }
     HEAP32[$$0$i$i59>>2] = $storemerge$i62;
     $$neg$i53 = $$02$i42 ^ -1;
     $152 = (($120) + ($$neg$i53))|0;
     $ispos$i54 = ($152|0)>(-1);
     $neg$i55 = (0 - ($152))|0;
     $153 = $ispos$i54 ? $152 : $neg$i55;
     $154 = ($153|0)>(131071);
     if ($154) {
      label = 51;
      break;
     }
     $157 = HEAP32[$127>>2]|0;
     $158 = $157 & 16383;
     $159 = $152 << 14;
     $160 = (($159) + 2147467264)|0;
     $161 = $158 | $160;
     $storemerge = $161;
    } else {
     $$neg$i$i47 = $$02$i42 ^ -1;
     $162 = (($p_f$0) + ($$neg$i$i47))|0;
     $ispos$i$i48 = ($162|0)>(-1);
     $neg$i$i49 = (0 - ($162))|0;
     $163 = $ispos$i$i48 ? $162 : $neg$i$i49;
     $164 = ($163|0)>(131071);
     if ($164) {
      label = 54;
      break;
     }
     $167 = $128 & 16383;
     $168 = $162 << 14;
     $169 = (($168) + 2147467264)|0;
     $170 = $167 | $169;
     $storemerge = $170;
    }
    HEAP32[$127>>2] = $storemerge;
    $171 = ($$0$i$i46|0)==(-1);
    if ($171) {
     break L62;
    } else {
     $$02$i42 = $$0$i$i46;
    }
   }
   if ((label|0) == 51) {
    $155 = ((($fs)) + 12|0);
    $156 = HEAP32[$155>>2]|0;
    _luaX_syntaxerror($156,7984);
    // unreachable;
   }
   else if ((label|0) == 54) {
    $165 = ((($fs)) + 12|0);
    $166 = HEAP32[$165>>2]|0;
    _luaX_syntaxerror($166,7984);
    // unreachable;
   }
  }
 } while(0);
 $172 = HEAP32[$2>>2]|0;
 $173 = ($172|0)==(-1);
 if ($173) {
  HEAP32[$2>>2] = -1;
  HEAP32[$26>>2] = -1;
  $259 = ((($e)) + 8|0);
  HEAP32[$259>>2] = $reg;
  HEAP32[$e>>2] = 6;
  return;
 }
 $174 = ($reg|0)==(255);
 $175 = $reg << 6;
 $176 = $175 & 16320;
 $fs$idx$val$i3$us$pre = HEAP32[$fs>>2]|0;
 $fs$idx$val$idx$i4$us$phi$trans$insert = ((($fs$idx$val$i3$us$pre)) + 12|0);
 $fs$idx$val$idx$val$i5$us$pre = HEAP32[$fs$idx$val$idx$i4$us$phi$trans$insert>>2]|0;
 if ($174) {
  $$02$i$us = $172;
  while(1) {
   $177 = (($fs$idx$val$idx$val$i5$us$pre) + ($$02$i$us<<2)|0);
   $178 = HEAP32[$177>>2]|0;
   $179 = $178 >>> 14;
   $180 = (($179) + -131071)|0;
   $181 = ($180|0)==(-1);
   $182 = (($$02$i$us) + 1)|0;
   $183 = (($182) + ($180))|0;
   $$0$i$i6$us = $181 ? -1 : $183;
   $184 = ($$02$i$us|0)>(0);
   if ($184) {
    $$sum$i$i24$us = (($$02$i$us) + -1)|0;
    $185 = (($fs$idx$val$idx$val$i5$us$pre) + ($$sum$i$i24$us<<2)|0);
    $186 = HEAP32[$185>>2]|0;
    $187 = $186 & 63;
    $188 = (6156 + ($187)|0);
    $189 = HEAP8[$188>>0]|0;
    $190 = ($189<<24>>24)<(0);
    if ($190) {
     $$0$i$i26$us = $185;$192 = $186;
    } else {
     label = 61;
    }
   } else {
    label = 61;
   }
   if ((label|0) == 61) {
    label = 0;
    $$0$i$i26$us = $177;$192 = $178;
   }
   $191 = $192 & 63;
   $193 = ($191|0)==(28);
   if ($193) {
    $201 = $192 >>> 23;
    $202 = $201 << 6;
    $203 = $192 & 8372224;
    $204 = $203 | $202;
    $205 = $204 | 27;
    HEAP32[$$0$i$i26$us>>2] = $205;
    $$neg$i$us = $$02$i$us ^ -1;
    $206 = (($120) + ($$neg$i$us))|0;
    $ispos$i$us = ($206|0)>(-1);
    $neg$i$us = (0 - ($206))|0;
    $207 = $ispos$i$us ? $206 : $neg$i$us;
    $208 = ($207|0)>(131071);
    if ($208) {
     label = 76;
     break;
    }
    $209 = HEAP32[$177>>2]|0;
    $210 = $209 & 16383;
    $211 = $206 << 14;
    $212 = (($211) + 2147467264)|0;
    $213 = $210 | $212;
    $storemerge91 = $213;
   } else {
    $$neg$i$i7$us = $$02$i$us ^ -1;
    $194 = (($p_t$0) + ($$neg$i$i7$us))|0;
    $ispos$i$i8$us = ($194|0)>(-1);
    $neg$i$i9$us = (0 - ($194))|0;
    $195 = $ispos$i$i8$us ? $194 : $neg$i$i9$us;
    $196 = ($195|0)>(131071);
    if ($196) {
     label = 79;
     break;
    }
    $197 = $178 & 16383;
    $198 = $194 << 14;
    $199 = (($198) + 2147467264)|0;
    $200 = $197 | $199;
    $storemerge91 = $200;
   }
   HEAP32[$177>>2] = $storemerge91;
   $214 = ($$0$i$i6$us|0)==(-1);
   if ($214) {
    label = 82;
    break;
   } else {
    $$02$i$us = $$0$i$i6$us;
   }
  }
  if ((label|0) == 76) {
   $242 = ((($fs)) + 12|0);
   $243 = HEAP32[$242>>2]|0;
   _luaX_syntaxerror($243,7984);
   // unreachable;
  }
  else if ((label|0) == 79) {
   $252 = ((($fs)) + 12|0);
   $253 = HEAP32[$252>>2]|0;
   _luaX_syntaxerror($253,7984);
   // unreachable;
  }
  else if ((label|0) == 82) {
   HEAP32[$2>>2] = -1;
   HEAP32[$26>>2] = -1;
   $259 = ((($e)) + 8|0);
   HEAP32[$259>>2] = $reg;
   HEAP32[$e>>2] = 6;
   return;
  }
 } else {
  $$02$i = $172;
 }
 while(1) {
  $215 = (($fs$idx$val$idx$val$i5$us$pre) + ($$02$i<<2)|0);
  $216 = HEAP32[$215>>2]|0;
  $217 = $216 >>> 14;
  $218 = (($217) + -131071)|0;
  $219 = ($218|0)==(-1);
  $220 = (($$02$i) + 1)|0;
  $221 = (($220) + ($218))|0;
  $$0$i$i6 = $219 ? -1 : $221;
  $222 = ($$02$i|0)>(0);
  if ($222) {
   $$sum$i$i24 = (($$02$i) + -1)|0;
   $223 = (($fs$idx$val$idx$val$i5$us$pre) + ($$sum$i$i24<<2)|0);
   $224 = HEAP32[$223>>2]|0;
   $225 = $224 & 63;
   $226 = (6156 + ($225)|0);
   $227 = HEAP8[$226>>0]|0;
   $228 = ($227<<24>>24)<(0);
   if ($228) {
    $$0$i$i26 = $223;$230 = $224;
   } else {
    label = 70;
   }
  } else {
   label = 70;
  }
  if ((label|0) == 70) {
   label = 0;
   $$0$i$i26 = $215;$230 = $216;
  }
  $229 = $230 & 63;
  $231 = ($229|0)==(28);
  if ($231) {
   $232 = $230 >>> 23;
   $233 = ($232|0)==($reg|0);
   if ($233) {
    $236 = $230 & 8372224;
    $237 = $236 | $175;
    $238 = $237 | 27;
    $storemerge$i = $238;
   } else {
    $234 = $230 & -16321;
    $235 = $234 | $176;
    $storemerge$i = $235;
   }
   HEAP32[$$0$i$i26>>2] = $storemerge$i;
   $$neg$i = $$02$i ^ -1;
   $239 = (($120) + ($$neg$i))|0;
   $ispos$i = ($239|0)>(-1);
   $neg$i = (0 - ($239))|0;
   $240 = $ispos$i ? $239 : $neg$i;
   $241 = ($240|0)>(131071);
   if ($241) {
    label = 76;
    break;
   }
   $244 = HEAP32[$215>>2]|0;
   $245 = $244 & 16383;
   $246 = $239 << 14;
   $247 = (($246) + 2147467264)|0;
   $248 = $245 | $247;
   $storemerge90 = $248;
  } else {
   $$neg$i$i7 = $$02$i ^ -1;
   $249 = (($p_t$0) + ($$neg$i$i7))|0;
   $ispos$i$i8 = ($249|0)>(-1);
   $neg$i$i9 = (0 - ($249))|0;
   $250 = $ispos$i$i8 ? $249 : $neg$i$i9;
   $251 = ($250|0)>(131071);
   if ($251) {
    label = 79;
    break;
   }
   $254 = $216 & 16383;
   $255 = $249 << 14;
   $256 = (($255) + 2147467264)|0;
   $257 = $254 | $256;
   $storemerge90 = $257;
  }
  HEAP32[$215>>2] = $storemerge90;
  $258 = ($$0$i$i6|0)==(-1);
  if ($258) {
   label = 82;
   break;
  } else {
   $$02$i = $$0$i$i6;
  }
 }
 if ((label|0) == 76) {
  $242 = ((($fs)) + 12|0);
  $243 = HEAP32[$242>>2]|0;
  _luaX_syntaxerror($243,7984);
  // unreachable;
 }
 else if ((label|0) == 79) {
  $252 = ((($fs)) + 12|0);
  $253 = HEAP32[$252>>2]|0;
  _luaX_syntaxerror($253,7984);
  // unreachable;
 }
 else if ((label|0) == 82) {
  HEAP32[$2>>2] = -1;
  HEAP32[$26>>2] = -1;
  $259 = ((($e)) + 8|0);
  HEAP32[$259>>2] = $reg;
  HEAP32[$e>>2] = 6;
  return;
 }
}
function _discharge2reg($fs,$e,$reg) {
 $fs = $fs|0;
 $e = $e|0;
 $reg = $reg|0;
 var $$from$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0.0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $l$0$i = 0, $n$0$i = 0, $o$i = 0, $or$cond$i = 0, $or$cond2$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 16|0;
 $o$i = sp;
 _luaK_dischargevars($fs,$e);
 $1 = HEAP32[$e>>2]|0;
 L1: do {
  switch ($1|0) {
  case 1:  {
   $2 = (($reg) + 1)|0;
   $3 = ((($fs)) + 20|0);
   $4 = HEAP32[$3>>2]|0;
   $5 = ((($fs)) + 24|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = ($4|0)>($6|0);
   do {
    if ($7) {
     $8 = (($4) + -1)|0;
     $9 = HEAP32[$fs>>2]|0;
     $10 = ((($9)) + 12|0);
     $11 = HEAP32[$10>>2]|0;
     $12 = (($11) + ($8<<2)|0);
     $13 = HEAP32[$12>>2]|0;
     $14 = $13 & 63;
     $15 = ($14|0)==(4);
     if ($15) {
      $16 = $13 >>> 6;
      $17 = $16 & 255;
      $18 = $13 >>> 23;
      $19 = (($17) + ($18))|0;
      $20 = ($17|0)>($reg|0);
      $21 = (($19) + 1)|0;
      $22 = ($21|0)<($reg|0);
      $or$cond$i = $20 | $22;
      if ($or$cond$i) {
       $23 = ($17|0)<($reg|0);
       $24 = ($17|0)>($2|0);
       $or$cond2$i = $23 | $24;
       if ($or$cond2$i) {
        break;
       }
      }
      $25 = ($17|0)<($reg|0);
      $$from$i = $25 ? $17 : $reg;
      $26 = ($19|0)>($reg|0);
      $l$0$i = $26 ? $19 : $reg;
      $27 = $13 & 8372287;
      $28 = $$from$i << 6;
      $29 = $28 & 16320;
      $30 = (($l$0$i) - ($$from$i))|0;
      $31 = $30 << 23;
      $32 = $29 | $27;
      $33 = $32 | $31;
      HEAP32[$12>>2] = $33;
      break L1;
     }
    }
   } while(0);
   $34 = $reg << 6;
   $35 = $34 | 4;
   (_luaK_code($fs,$35)|0);
   break;
  }
  case 2: case 3:  {
   $36 = ($1|0)==(2);
   $37 = $36&1;
   $38 = $reg << 6;
   $39 = $37 << 23;
   $40 = $38 | $39;
   $41 = $40 | 3;
   (_luaK_code($fs,$41)|0);
   break;
  }
  case 4:  {
   $42 = ((($e)) + 8|0);
   $43 = HEAP32[$42>>2]|0;
   $44 = ($43|0)<(262144);
   $45 = $reg << 6;
   if ($44) {
    $46 = $43 << 14;
    $47 = $45 | $46;
    $48 = $47 | 1;
    (_luaK_code($fs,$48)|0);
    break L1;
   } else {
    $49 = $45 | 2;
    (_luaK_code($fs,$49)|0);
    $50 = $43 << 6;
    $51 = $50 | 39;
    (_luaK_code($fs,$51)|0);
    break L1;
   }
   break;
  }
  case 5:  {
   $52 = ((($e)) + 8|0);
   $53 = +HEAPF64[$52>>3];
   HEAPF64[$0>>3] = $53;
   $54 = ((($fs)) + 12|0);
   $55 = HEAP32[$54>>2]|0;
   $56 = ((($55)) + 52|0);
   $57 = HEAP32[$56>>2]|0;
   HEAPF64[$o$i>>3] = $53;
   $58 = ((($o$i)) + 8|0);
   HEAP32[$58>>2] = 3;
   $59 = ($53 != $53) | (0.0 != 0.0) |($53 == 0.0);
   if ($59) {
    $60 = ((($57)) + 8|0);
    $61 = HEAP32[$60>>2]|0;
    $62 = ((($61)) + 16|0);
    HEAP32[$60>>2] = $62;
    $63 = (_luaS_newlstr($57,$0,8)|0);
    HEAP32[$61>>2] = $63;
    $64 = ((($63)) + 4|0);
    $65 = HEAP8[$64>>0]|0;
    $66 = $65&255;
    $67 = $66 | 64;
    $68 = ((($61)) + 8|0);
    HEAP32[$68>>2] = $67;
    $69 = HEAP32[$60>>2]|0;
    $70 = ((($69)) + -16|0);
    $71 = (_addk($fs,$70,$o$i)|0);
    $72 = HEAP32[$60>>2]|0;
    $73 = ((($72)) + -16|0);
    HEAP32[$60>>2] = $73;
    $n$0$i = $71;
   } else {
    $74 = (_addk($fs,$o$i,$o$i)|0);
    $n$0$i = $74;
   }
   $75 = ($n$0$i|0)<(262144);
   $76 = $reg << 6;
   if ($75) {
    $77 = $n$0$i << 14;
    $78 = $76 | $77;
    $79 = $78 | 1;
    (_luaK_code($fs,$79)|0);
    break L1;
   } else {
    $80 = $76 | 2;
    (_luaK_code($fs,$80)|0);
    $81 = $n$0$i << 6;
    $82 = $81 | 39;
    (_luaK_code($fs,$82)|0);
    break L1;
   }
   break;
  }
  case 11:  {
   $83 = ((($e)) + 8|0);
   $84 = HEAP32[$83>>2]|0;
   $85 = HEAP32[$fs>>2]|0;
   $86 = ((($85)) + 12|0);
   $87 = HEAP32[$86>>2]|0;
   $88 = (($87) + ($84<<2)|0);
   $89 = HEAP32[$88>>2]|0;
   $90 = $89 & -16321;
   $91 = $reg << 6;
   $92 = $91 & 16320;
   $93 = $90 | $92;
   HEAP32[$88>>2] = $93;
   break;
  }
  case 6:  {
   $94 = ((($e)) + 8|0);
   $95 = HEAP32[$94>>2]|0;
   $96 = ($95|0)==($reg|0);
   if (!($96)) {
    $97 = $reg << 6;
    $98 = $95 << 23;
    $99 = $98 | $97;
    (_luaK_code($fs,$99)|0);
   }
   break;
  }
  default: {
   STACKTOP = sp;return;
  }
  }
 } while(0);
 $100 = ((($e)) + 8|0);
 HEAP32[$100>>2] = $reg;
 HEAP32[$e>>2] = 6;
 STACKTOP = sp;return;
}
function _codearith($fs,$op,$e1,$e2,$line) {
 $fs = $fs|0;
 $op = $op|0;
 $e1 = $e1|0;
 $e2 = $e2|0;
 $line = $line|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $or$cond$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$e1>>2]|0;
 $1 = ($0|0)==(5);
 if ($1) {
  $2 = ((($e1)) + 16|0);
  $3 = HEAP32[$2>>2]|0;
  $4 = ($3|0)==(-1);
  if ($4) {
   $5 = ((($e1)) + 20|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = ($6|0)==(-1);
   if ($7) {
    $8 = HEAP32[$e2>>2]|0;
    $9 = ($8|0)==(5);
    if ($9) {
     $10 = ((($e2)) + 16|0);
     $11 = HEAP32[$10>>2]|0;
     $12 = ($11|0)==(-1);
     if ($12) {
      $13 = ((($e2)) + 20|0);
      $14 = HEAP32[$13>>2]|0;
      $15 = ($14|0)==(-1);
      if ($15) {
       $16 = $op & -2;
       $17 = ($16|0)==(16);
       $18 = ((($e2)) + 8|0);
       $19 = +HEAPF64[$18>>3];
       $20 = $19 == 0.0;
       $or$cond$i = $17 & $20;
       if (!($or$cond$i)) {
        $21 = (($op) + -13)|0;
        $22 = ((($e1)) + 8|0);
        $23 = +HEAPF64[$22>>3];
        $24 = (+_luaO_arith($21,$23,$19));
        HEAPF64[$22>>3] = $24;
        return;
       }
      }
     }
    }
   }
  }
 }
 switch ($op|0) {
 case 19: case 21:  {
  $28 = 0;
  break;
 }
 default: {
  $25 = (_luaK_exp2RK($fs,$e2)|0);
  $28 = $25;
 }
 }
 $26 = (_luaK_exp2RK($fs,$e1)|0);
 $27 = ($26|0)>($28|0);
 if ($27) {
  $29 = HEAP32[$e1>>2]|0;
  $30 = ($29|0)==(6);
  if ($30) {
   $31 = ((($e1)) + 8|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = $32 & 256;
   $34 = ($33|0)==(0);
   if ($34) {
    $35 = ((($fs)) + 46|0);
    $36 = HEAP8[$35>>0]|0;
    $37 = $36&255;
    $38 = ($37|0)>($32|0);
    if (!($38)) {
     $39 = ((($fs)) + 48|0);
     $40 = HEAP8[$39>>0]|0;
     $41 = (($40) + -1)<<24>>24;
     HEAP8[$39>>0] = $41;
    }
   }
  }
  $42 = HEAP32[$e2>>2]|0;
  $43 = ($42|0)==(6);
  if ($43) {
   $44 = ((($e2)) + 8|0);
   $45 = HEAP32[$44>>2]|0;
   $46 = $45 & 256;
   $47 = ($46|0)==(0);
   if ($47) {
    $48 = ((($fs)) + 46|0);
    $49 = HEAP8[$48>>0]|0;
    $50 = $49&255;
    $51 = ($50|0)>($45|0);
    if (!($51)) {
     $52 = ((($fs)) + 48|0);
     $53 = HEAP8[$52>>0]|0;
     $54 = (($53) + -1)<<24>>24;
     HEAP8[$52>>0] = $54;
    }
   }
  }
 } else {
  $55 = HEAP32[$e2>>2]|0;
  $56 = ($55|0)==(6);
  if ($56) {
   $57 = ((($e2)) + 8|0);
   $58 = HEAP32[$57>>2]|0;
   $59 = $58 & 256;
   $60 = ($59|0)==(0);
   if ($60) {
    $61 = ((($fs)) + 46|0);
    $62 = HEAP8[$61>>0]|0;
    $63 = $62&255;
    $64 = ($63|0)>($58|0);
    if (!($64)) {
     $65 = ((($fs)) + 48|0);
     $66 = HEAP8[$65>>0]|0;
     $67 = (($66) + -1)<<24>>24;
     HEAP8[$65>>0] = $67;
    }
   }
  }
  $68 = HEAP32[$e1>>2]|0;
  $69 = ($68|0)==(6);
  if ($69) {
   $70 = ((($e1)) + 8|0);
   $71 = HEAP32[$70>>2]|0;
   $72 = $71 & 256;
   $73 = ($72|0)==(0);
   if ($73) {
    $74 = ((($fs)) + 46|0);
    $75 = HEAP8[$74>>0]|0;
    $76 = $75&255;
    $77 = ($76|0)>($71|0);
    if (!($77)) {
     $78 = ((($fs)) + 48|0);
     $79 = HEAP8[$78>>0]|0;
     $80 = (($79) + -1)<<24>>24;
     HEAP8[$78>>0] = $80;
    }
   }
  }
 }
 $81 = $26 << 23;
 $82 = $28 << 14;
 $83 = $82 | $op;
 $84 = $83 | $81;
 $85 = (_luaK_code($fs,$84)|0);
 $86 = ((($e1)) + 8|0);
 HEAP32[$86>>2] = $85;
 HEAP32[$e1>>2] = 11;
 $87 = ((($fs)) + 20|0);
 $88 = HEAP32[$87>>2]|0;
 $89 = (($88) + -1)|0;
 $90 = HEAP32[$fs>>2]|0;
 $91 = ((($90)) + 20|0);
 $92 = HEAP32[$91>>2]|0;
 $93 = (($92) + ($89<<2)|0);
 HEAP32[$93>>2] = $line;
 return;
}
function _codecomp($fs,$op,$cond,$e1,$e2) {
 $fs = $fs|0;
 $op = $op|0;
 $cond = $cond|0;
 $e1 = $e1|0;
 $e2 = $e2|0;
 var $$ = 0, $$0$i$i$i$i = 0, $$2 = 0, $$lcssa = 0, $$lcssa9 = 0, $$neg$i$i$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cond$op = 0, $fs$idx$val$i$i$i = 0, $fs$idx$val$idx$i$i$i = 0, $fs$idx$val$idx$val$i$i$i = 0, $ispos$i$i$i$i = 0, $list$0$i$i$i = 0, $list$0$i$i$i$lcssa = 0, $neg$i$i$i$i = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_luaK_exp2RK($fs,$e1)|0);
 $1 = (_luaK_exp2RK($fs,$e2)|0);
 $2 = HEAP32[$e2>>2]|0;
 $3 = ($2|0)==(6);
 if ($3) {
  $4 = ((($e2)) + 8|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = $5 & 256;
  $7 = ($6|0)==(0);
  if ($7) {
   $8 = ((($fs)) + 46|0);
   $9 = HEAP8[$8>>0]|0;
   $10 = $9&255;
   $11 = ($10|0)>($5|0);
   if (!($11)) {
    $12 = ((($fs)) + 48|0);
    $13 = HEAP8[$12>>0]|0;
    $14 = (($13) + -1)<<24>>24;
    HEAP8[$12>>0] = $14;
   }
  }
 }
 $15 = HEAP32[$e1>>2]|0;
 $16 = ($15|0)==(6);
 if ($16) {
  $17 = ((($e1)) + 8|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = $18 & 256;
  $20 = ($19|0)==(0);
  if ($20) {
   $21 = ((($fs)) + 46|0);
   $22 = HEAP8[$21>>0]|0;
   $23 = $22&255;
   $24 = ($23|0)>($18|0);
   if (!($24)) {
    $25 = ((($fs)) + 48|0);
    $26 = HEAP8[$25>>0]|0;
    $27 = (($26) + -1)<<24>>24;
    HEAP8[$25>>0] = $27;
   }
  }
 }
 $28 = ($cond|0)==(0);
 $29 = ($op|0)!=(24);
 $or$cond = $29 & $28;
 $$ = $or$cond ? $1 : $0;
 $$2 = $or$cond ? $0 : $1;
 $cond$op = $cond << 6;
 $30 = $or$cond ? 64 : $cond$op;
 $31 = $30 | $op;
 $32 = $$ << 23;
 $33 = $31 | $32;
 $34 = $$2 << 14;
 $35 = $33 | $34;
 (_luaK_code($fs,$35)|0);
 $36 = ((($fs)) + 28|0);
 $37 = HEAP32[$36>>2]|0;
 HEAP32[$36>>2] = -1;
 $38 = (_luaK_code($fs,2147450903)|0);
 $39 = ($37|0)==(-1);
 if ($39) {
  $59 = $38;
  $58 = ((($e1)) + 8|0);
  HEAP32[$58>>2] = $59;
  HEAP32[$e1>>2] = 10;
  return;
 }
 $40 = ($38|0)==(-1);
 if ($40) {
  $59 = $37;
  $58 = ((($e1)) + 8|0);
  HEAP32[$58>>2] = $59;
  HEAP32[$e1>>2] = 10;
  return;
 }
 $fs$idx$val$i$i$i = HEAP32[$fs>>2]|0;
 $fs$idx$val$idx$i$i$i = ((($fs$idx$val$i$i$i)) + 12|0);
 $fs$idx$val$idx$val$i$i$i = HEAP32[$fs$idx$val$idx$i$i$i>>2]|0;
 $list$0$i$i$i = $38;
 while(1) {
  $41 = (($fs$idx$val$idx$val$i$i$i) + ($list$0$i$i$i<<2)|0);
  $42 = HEAP32[$41>>2]|0;
  $43 = $42 >>> 14;
  $44 = (($43) + -131071)|0;
  $45 = ($44|0)==(-1);
  $46 = (($list$0$i$i$i) + 1)|0;
  $47 = (($46) + ($44))|0;
  $$0$i$i$i$i = $45 ? -1 : $47;
  $48 = ($$0$i$i$i$i|0)==(-1);
  if ($48) {
   $$lcssa = $41;$$lcssa9 = $42;$list$0$i$i$i$lcssa = $list$0$i$i$i;
   break;
  } else {
   $list$0$i$i$i = $$0$i$i$i$i;
  }
 }
 $$neg$i$i$i$i = $list$0$i$i$i$lcssa ^ -1;
 $49 = (($37) + ($$neg$i$i$i$i))|0;
 $ispos$i$i$i$i = ($49|0)>(-1);
 $neg$i$i$i$i = (0 - ($49))|0;
 $50 = $ispos$i$i$i$i ? $49 : $neg$i$i$i$i;
 $51 = ($50|0)>(131071);
 if ($51) {
  $52 = ((($fs)) + 12|0);
  $53 = HEAP32[$52>>2]|0;
  _luaX_syntaxerror($53,7984);
  // unreachable;
 }
 $54 = $$lcssa9 & 16383;
 $55 = $49 << 14;
 $56 = (($55) + 2147467264)|0;
 $57 = $56 | $54;
 HEAP32[$$lcssa>>2] = $57;
 $59 = $38;
 $58 = ((($e1)) + 8|0);
 HEAP32[$58>>2] = $59;
 HEAP32[$e1>>2] = 10;
 return;
}
function _luaX_init($L) {
 $L = $L|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $i$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $i$01 = 0;
 while(1) {
  $0 = (308 + ($i$01<<2)|0);
  $1 = HEAP32[$0>>2]|0;
  $2 = (_luaS_new($L,$1)|0);
  $3 = ((($2)) + 5|0);
  $4 = HEAP8[$3>>0]|0;
  $5 = $4&255;
  $6 = $5 | 32;
  $7 = $6&255;
  HEAP8[$3>>0] = $7;
  $8 = (($i$01) + 1)|0;
  $9 = $8&255;
  $10 = ((($2)) + 6|0);
  HEAP8[$10>>0] = $9;
  $exitcond = ($8|0)==(22);
  if ($exitcond) {
   break;
  } else {
   $i$01 = $8;
  }
 }
 return;
}
function _luaX_token2str($ls,$token) {
 $ls = $ls|0;
 $token = $token|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0;
 var $vararg_buffer4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = ($token|0)<(257);
 if (!($0)) {
  $10 = (($token) + -257)|0;
  $11 = (308 + ($10<<2)|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ($token|0)<(286);
  if (!($13)) {
   $$0 = $12;
   STACKTOP = sp;return ($$0|0);
  }
  $14 = ((($ls)) + 52|0);
  $15 = HEAP32[$14>>2]|0;
  HEAP32[$vararg_buffer4>>2] = $12;
  $16 = (_luaO_pushfstring($15,8356,$vararg_buffer4)|0);
  $$0 = $16;
  STACKTOP = sp;return ($$0|0);
 }
 $1 = (($token) + 1)|0;
 $2 = (8085 + ($1)|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = $3 & 4;
 $5 = ($4<<24>>24)==(0);
 $6 = ((($ls)) + 52|0);
 $7 = HEAP32[$6>>2]|0;
 if ($5) {
  HEAP32[$vararg_buffer1>>2] = $token;
  $9 = (_luaO_pushfstring($7,8347,$vararg_buffer1)|0);
  $$0 = $9;
  STACKTOP = sp;return ($$0|0);
 } else {
  HEAP32[$vararg_buffer>>2] = $token;
  $8 = (_luaO_pushfstring($7,8342,$vararg_buffer)|0);
  $$0 = $8;
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function _luaX_syntaxerror($ls,$msg) {
 $ls = $ls|0;
 $msg = $msg|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($ls)) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 _lexerror($ls,$msg,$1);
 // unreachable;
}
function _luaX_newstring($ls,$str,$l) {
 $ls = $ls|0;
 $str = $str|0;
 $l = $l|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($ls)) + 52|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (_luaS_newlstr($1,$str,$l)|0);
 $3 = ((($1)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 16|0);
 HEAP32[$3>>2] = $5;
 HEAP32[$4>>2] = $2;
 $6 = ((($2)) + 4|0);
 $7 = HEAP8[$6>>0]|0;
 $8 = $7&255;
 $9 = $8 | 64;
 $10 = ((($4)) + 8|0);
 HEAP32[$10>>2] = $9;
 $11 = ((($ls)) + 48|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ((($12)) + 4|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = HEAP32[$3>>2]|0;
 $16 = ((($15)) + -16|0);
 $17 = (_luaH_set($1,$14,$16)|0);
 $18 = ((($17)) + 8|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ($19|0)==(0);
 if ($20) {
  HEAP32[$17>>2] = 1;
  HEAP32[$18>>2] = 1;
  $21 = ((($1)) + 12|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = ((($22)) + 12|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = ($24|0)>(0);
  if ($25) {
   _luaC_step($1);
  }
 }
 $26 = HEAP32[$3>>2]|0;
 $27 = ((($26)) + -16|0);
 HEAP32[$3>>2] = $27;
 return ($2|0);
}
function _luaX_setinput($L,$ls,$z,$source,$firstchar) {
 $L = $L|0;
 $ls = $ls|0;
 $z = $z|0;
 $source = $source|0;
 $firstchar = $firstchar|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($ls)) + 76|0);
 HEAP8[$0>>0] = 46;
 $1 = ((($ls)) + 52|0);
 HEAP32[$1>>2] = $L;
 HEAP32[$ls>>2] = $firstchar;
 $2 = ((($ls)) + 32|0);
 HEAP32[$2>>2] = 286;
 $3 = ((($ls)) + 56|0);
 HEAP32[$3>>2] = $z;
 $4 = ((($ls)) + 48|0);
 HEAP32[$4>>2] = 0;
 $5 = ((($ls)) + 4|0);
 HEAP32[$5>>2] = 1;
 $6 = ((($ls)) + 8|0);
 HEAP32[$6>>2] = 1;
 $7 = ((($ls)) + 68|0);
 HEAP32[$7>>2] = $source;
 $8 = (_luaS_new($L,8361)|0);
 $9 = ((($ls)) + 72|0);
 HEAP32[$9>>2] = $8;
 $10 = ((($8)) + 5|0);
 $11 = HEAP8[$10>>0]|0;
 $12 = $11&255;
 $13 = $12 | 32;
 $14 = $13&255;
 HEAP8[$10>>0] = $14;
 $15 = HEAP32[$1>>2]|0;
 $16 = ((($ls)) + 60|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = HEAP32[$17>>2]|0;
 $19 = ((($17)) + 8|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = (_luaM_realloc_($15,$18,$20,32)|0);
 $22 = HEAP32[$16>>2]|0;
 HEAP32[$22>>2] = $21;
 $23 = ((($22)) + 8|0);
 HEAP32[$23>>2] = 32;
 return;
}
function _luaX_next($ls) {
 $ls = $ls|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($ls)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($ls)) + 8|0);
 HEAP32[$2>>2] = $1;
 $3 = ((($ls)) + 32|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(286);
 if ($5) {
  $7 = ((($ls)) + 24|0);
  $8 = (_llex($ls,$7)|0);
  $9 = ((($ls)) + 16|0);
  HEAP32[$9>>2] = $8;
  return;
 } else {
  $6 = ((($ls)) + 16|0);
  ;HEAP32[$6>>2]=HEAP32[$3>>2]|0;HEAP32[$6+4>>2]=HEAP32[$3+4>>2]|0;HEAP32[$6+8>>2]=HEAP32[$3+8>>2]|0;HEAP32[$6+12>>2]=HEAP32[$3+12>>2]|0;
  HEAP32[$3>>2] = 286;
  return;
 }
}
function _luaX_lookahead($ls) {
 $ls = $ls|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($ls)) + 40|0);
 $1 = (_llex($ls,$0)|0);
 $2 = ((($ls)) + 32|0);
 HEAP32[$2>>2] = $1;
 return ($1|0);
}
function _lexerror($ls,$msg,$token) {
 $ls = $ls|0;
 $msg = $msg|0;
 $token = $token|0;
 var $$0$i = 0, $$off$i = 0, $$pre = 0, $$pre1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $buff = 0, $switch$i = 0, $vararg_buffer = 0, $vararg_buffer12 = 0, $vararg_buffer15 = 0, $vararg_buffer3 = 0, $vararg_buffer6 = 0, $vararg_buffer9 = 0, $vararg_ptr1 = 0, $vararg_ptr18 = 0, $vararg_ptr2 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer15 = sp + 48|0;
 $vararg_buffer12 = sp + 40|0;
 $vararg_buffer9 = sp + 32|0;
 $vararg_buffer6 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $buff = sp + 56|0;
 $0 = ((($ls)) + 68|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 16|0);
 _luaO_chunkid($buff,$2,60);
 $3 = ((($ls)) + 52|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($ls)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 HEAP32[$vararg_buffer>>2] = $buff;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $6;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $msg;
 $7 = (_luaO_pushfstring($4,8616,$vararg_buffer)|0);
 $8 = ($token|0)==(0);
 if ($8) {
  $44 = HEAP32[$3>>2]|0;
  _luaD_throw($44,3);
  // unreachable;
 }
 $9 = HEAP32[$3>>2]|0;
 $$off$i = (($token) + -287)|0;
 $switch$i = ($$off$i>>>0)<(3);
 do {
  if ($switch$i) {
   $10 = ((($ls)) + 60|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = ((($11)) + 4|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = (($13) + 1)|0;
   $15 = ((($11)) + 8|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = ($14>>>0)>($16>>>0);
   do {
    if ($17) {
     $18 = ($16>>>0)>(2147483645);
     if ($18) {
      _lexerror($ls,8421,0);
      // unreachable;
     }
     $19 = $16 << 1;
     $20 = ($19|0)==(-2);
     if ($20) {
      _luaM_toobig($9);
      // unreachable;
     } else {
      $21 = HEAP32[$11>>2]|0;
      $22 = (_luaM_realloc_($9,$21,$16,$19)|0);
      HEAP32[$11>>2] = $22;
      HEAP32[$15>>2] = $19;
      $$pre = HEAP32[$12>>2]|0;
      $24 = $$pre;$26 = $22;
      break;
     }
    } else {
     $$pre1 = HEAP32[$11>>2]|0;
     $24 = $13;$26 = $$pre1;
    }
   } while(0);
   $23 = (($24) + 1)|0;
   HEAP32[$12>>2] = $23;
   $25 = (($26) + ($24)|0);
   HEAP8[$25>>0] = 0;
   $27 = HEAP32[$3>>2]|0;
   $28 = HEAP32[$10>>2]|0;
   $29 = HEAP32[$28>>2]|0;
   HEAP32[$vararg_buffer3>>2] = $29;
   $30 = (_luaO_pushfstring($27,8356,$vararg_buffer3)|0);
   $$0$i = $30;
  } else {
   $31 = ($token|0)<(257);
   if (!($31)) {
    $39 = (($token) + -257)|0;
    $40 = (308 + ($39<<2)|0);
    $41 = HEAP32[$40>>2]|0;
    $42 = ($token|0)<(286);
    if (!($42)) {
     $$0$i = $41;
     break;
    }
    HEAP32[$vararg_buffer12>>2] = $41;
    $43 = (_luaO_pushfstring($9,8356,$vararg_buffer12)|0);
    $$0$i = $43;
    break;
   }
   $32 = (($token) + 1)|0;
   $33 = (8085 + ($32)|0);
   $34 = HEAP8[$33>>0]|0;
   $35 = $34 & 4;
   $36 = ($35<<24>>24)==(0);
   if ($36) {
    HEAP32[$vararg_buffer9>>2] = $token;
    $38 = (_luaO_pushfstring($9,8347,$vararg_buffer9)|0);
    $$0$i = $38;
    break;
   } else {
    HEAP32[$vararg_buffer6>>2] = $token;
    $37 = (_luaO_pushfstring($9,8342,$vararg_buffer6)|0);
    $$0$i = $37;
    break;
   }
  }
 } while(0);
 HEAP32[$vararg_buffer15>>2] = $7;
 $vararg_ptr18 = ((($vararg_buffer15)) + 4|0);
 HEAP32[$vararg_ptr18>>2] = $$0$i;
 (_luaO_pushfstring($9,8626,$vararg_buffer15)|0);
 $44 = HEAP32[$3>>2]|0;
 _luaD_throw($44,3);
 // unreachable;
}
function _llex($ls,$seminfo) {
 $ls = $ls|0;
 $seminfo = $seminfo|0;
 var $$0 = 0, $$be$i = 0, $$be20$i = 0, $$in$i$i = 0, $$in$i$i$i = 0, $$in$i4$i$i = 0, $$lcssa = 0, $$lcssa225 = 0, $$lcssa226 = 0, $$lcssa227 = 0, $$lcssa228 = 0, $$lcssa247 = 0, $$lcssa248 = 0, $$lcssa249 = 0, $$lcssa257 = 0, $$ph$i = 0, $$phi$trans$insert78$i = 0, $$phi$trans$insert9$i$i = 0, $$pr = 0, $$pr$pre$i = 0;
 var $$pr113 = 0, $$pr18$i = 0, $$pr28 = 0, $$pre$i = 0, $$pre$i$i = 0, $$pre$i$i8 = 0, $$pre$i10 = 0, $$pre$i11$i = 0, $$pre$i14$i = 0, $$pre$i15 = 0, $$pre$i16$i = 0, $$pre$i17$i = 0, $$pre$i20 = 0, $$pre$i22$i = 0, $$pre$i25 = 0, $$pre$i27$i = 0, $$pre$i32$i = 0, $$pre$i6$i = 0, $$pre$i9$i = 0, $$pre1$i = 0;
 var $$pre1$i$i = 0, $$pre1$i$i6 = 0, $$pre1$i12$i = 0, $$pre1$i13 = 0, $$pre1$i14$i = 0, $$pre1$i18 = 0, $$pre1$i20$i = 0, $$pre1$i23 = 0, $$pre1$i25$i = 0, $$pre1$i30$i = 0, $$pre1$i4$i = 0, $$pre1$i7$i = 0, $$pre1$i9$i = 0, $$pre10$i$i = 0, $$pre77$i = 0, $$pre79$i = 0, $$pre8$i$i = 0, $0 = 0, $1 = 0, $10 = 0;
 var $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0;
 var $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0;
 var $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0;
 var $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0;
 var $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0;
 var $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
 var $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0;
 var $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0;
 var $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0;
 var $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0;
 var $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0;
 var $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0;
 var $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0;
 var $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0;
 var $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0;
 var $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0;
 var $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0;
 var $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0;
 var $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0;
 var $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0;
 var $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0;
 var $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0;
 var $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0;
 var $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0;
 var $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0;
 var $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0;
 var $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0;
 var $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0;
 var $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0;
 var $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0;
 var $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0;
 var $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0;
 var $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0;
 var $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0;
 var $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0;
 var $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0;
 var $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0;
 var $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0;
 var $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0;
 var $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0;
 var $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0;
 var $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0;
 var $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $c$0$i = 0;
 var $c$1$i = 0, $c$i$i = 0, $expo$0$ph$i = 0, $i$0$lcssa$i$i = 0, $i$0$lcssa$i$i$lcssa = 0, $i$03$lcssa$i$i = 0, $ls$idx$val$i = 0, $ls$idx$val$i$i = 0, $ls$idx$val$idx$val$i = 0, $ls$idx$val$idx$val$i$i = 0, $ls$idx$val$idx1$i = 0, $ls$idx$val$idx1$val$i = 0, $ls$idx$val$idx3$i$i = 0, $ls$idx$val$idx3$val$i$i = 0, $ls$idx1$val$i$i = 0, $ls$idx1$val$idx$val$i$i = 0, $ls$idx1$val$idx2$i$i = 0, $ls$idx1$val$idx2$val$i$i = 0, $memchr = 0, $memchr$i = 0;
 var $memchr29 = 0, $memchr34$i = 0, $memchr35$i = 0, $or$cond$i = 0, $phitmp$i = 0, $phitmp$i$i = 0, $r$0$lcssa$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $c$i$i = sp;
 $0 = ((($ls)) + 60|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 4|0);
 HEAP32[$2>>2] = 0;
 $3 = ((($ls)) + 56|0);
 $4 = ((($ls)) + 4|0);
 L1: while(1) {
  $$pr113 = HEAP32[$ls>>2]|0;
  $5 = $$pr113;
  L3: while(1) {
   switch ($5|0) {
   case 91:  {
    label = 35;
    break L1;
    break;
   }
   case 61:  {
    label = 39;
    break L1;
    break;
   }
   case 60:  {
    label = 47;
    break L1;
    break;
   }
   case 62:  {
    label = 55;
    break L1;
    break;
   }
   case 126:  {
    label = 63;
    break L1;
    break;
   }
   case 58:  {
    label = 71;
    break L1;
    break;
   }
   case 39: case 34:  {
    $$lcssa257 = $5;
    label = 79;
    break L1;
    break;
   }
   case 46:  {
    label = 202;
    break L1;
    break;
   }
   case 57: case 56: case 55: case 54: case 53: case 52: case 51: case 50: case 49: case 48:  {
    $660 = $5;
    break L1;
    break;
   }
   case -1:  {
    $$0 = 286;
    label = 347;
    break L1;
    break;
   }
   case 13: case 10:  {
    $$lcssa249 = $5;
    label = 4;
    break L3;
    break;
   }
   case 45:  {
    break L3;
    break;
   }
   case 11: case 9: case 12: case 32:  {
    break;
   }
   default: {
    $$lcssa248 = $5;
    label = 324;
    break L1;
   }
   }
   $32 = HEAP32[$3>>2]|0;
   $33 = HEAP32[$32>>2]|0;
   $34 = (($33) + -1)|0;
   HEAP32[$32>>2] = $34;
   $35 = ($33|0)==(0);
   if ($35) {
    $41 = (_luaZ_fill($32)|0);
    $42 = $41;
   } else {
    $36 = ((($32)) + 4|0);
    $37 = HEAP32[$36>>2]|0;
    $38 = ((($37)) + 1|0);
    HEAP32[$36>>2] = $38;
    $39 = HEAP8[$37>>0]|0;
    $40 = $39&255;
    $42 = $40;
   }
   HEAP32[$ls>>2] = $42;
   $5 = $42;
  }
  if ((label|0) == 4) {
   label = 0;
   $6 = HEAP32[$3>>2]|0;
   $7 = HEAP32[$6>>2]|0;
   $8 = (($7) + -1)|0;
   HEAP32[$6>>2] = $8;
   $9 = ($7|0)==(0);
   if ($9) {
    $15 = (_luaZ_fill($6)|0);
    $16 = $15;
   } else {
    $10 = ((($6)) + 4|0);
    $11 = HEAP32[$10>>2]|0;
    $12 = ((($11)) + 1|0);
    HEAP32[$10>>2] = $12;
    $13 = HEAP8[$11>>0]|0;
    $14 = $13&255;
    $16 = $14;
   }
   HEAP32[$ls>>2] = $16;
   switch ($16|0) {
   case 13: case 10:  {
    $17 = ($16|0)==($$lcssa249|0);
    if (!($17)) {
     $18 = HEAP32[$3>>2]|0;
     $19 = HEAP32[$18>>2]|0;
     $20 = (($19) + -1)|0;
     HEAP32[$18>>2] = $20;
     $21 = ($19|0)==(0);
     if ($21) {
      $27 = (_luaZ_fill($18)|0);
      $28 = $27;
     } else {
      $22 = ((($18)) + 4|0);
      $23 = HEAP32[$22>>2]|0;
      $24 = ((($23)) + 1|0);
      HEAP32[$22>>2] = $24;
      $25 = HEAP8[$23>>0]|0;
      $26 = $25&255;
      $28 = $26;
     }
     HEAP32[$ls>>2] = $28;
    }
    break;
   }
   default: {
   }
   }
   $29 = HEAP32[$4>>2]|0;
   $30 = (($29) + 1)|0;
   HEAP32[$4>>2] = $30;
   $31 = ($29|0)>(2147483643);
   if ($31) {
    label = 14;
    break;
   } else {
    continue;
   }
  }
  $43 = HEAP32[$3>>2]|0;
  $44 = HEAP32[$43>>2]|0;
  $45 = (($44) + -1)|0;
  HEAP32[$43>>2] = $45;
  $46 = ($44|0)==(0);
  if ($46) {
   $52 = (_luaZ_fill($43)|0);
   $53 = $52;
  } else {
   $47 = ((($43)) + 4|0);
   $48 = HEAP32[$47>>2]|0;
   $49 = ((($48)) + 1|0);
   HEAP32[$47>>2] = $49;
   $50 = HEAP8[$48>>0]|0;
   $51 = $50&255;
   $53 = $51;
  }
  HEAP32[$ls>>2] = $53;
  $54 = ($53|0)==(45);
  if (!($54)) {
   $$0 = 45;
   label = 347;
   break;
  }
  $55 = HEAP32[$3>>2]|0;
  $56 = HEAP32[$55>>2]|0;
  $57 = (($56) + -1)|0;
  HEAP32[$55>>2] = $57;
  $58 = ($56|0)==(0);
  if ($58) {
   $64 = (_luaZ_fill($55)|0);
   $65 = $64;
  } else {
   $59 = ((($55)) + 4|0);
   $60 = HEAP32[$59>>2]|0;
   $61 = ((($60)) + 1|0);
   HEAP32[$59>>2] = $61;
   $62 = HEAP8[$60>>0]|0;
   $63 = $62&255;
   $65 = $63;
  }
  HEAP32[$ls>>2] = $65;
  $66 = ($65|0)==(91);
  do {
   if ($66) {
    $67 = (_skip_sep($ls)|0);
    $68 = HEAP32[$0>>2]|0;
    $69 = ((($68)) + 4|0);
    HEAP32[$69>>2] = 0;
    $70 = ($67|0)>(-1);
    if ($70) {
     _read_long_string($ls,0,$67);
     $71 = HEAP32[$0>>2]|0;
     $72 = ((($71)) + 4|0);
     HEAP32[$72>>2] = 0;
     continue L1;
    } else {
     $$pr = HEAP32[$ls>>2]|0;
     $73 = $$pr;
     break;
    }
   } else {
    $73 = $65;
   }
  } while(0);
  while(1) {
   switch ($73|0) {
   case -1: case 13: case 10:  {
    continue L1;
    break;
   }
   default: {
   }
   }
   $74 = HEAP32[$3>>2]|0;
   $75 = HEAP32[$74>>2]|0;
   $76 = (($75) + -1)|0;
   HEAP32[$74>>2] = $76;
   $77 = ($75|0)==(0);
   if ($77) {
    $83 = (_luaZ_fill($74)|0);
    $84 = $83;
   } else {
    $78 = ((($74)) + 4|0);
    $79 = HEAP32[$78>>2]|0;
    $80 = ((($79)) + 1|0);
    HEAP32[$78>>2] = $80;
    $81 = HEAP8[$79>>0]|0;
    $82 = $81&255;
    $84 = $82;
   }
   HEAP32[$ls>>2] = $84;
   $73 = $84;
  }
 }
 switch (label|0) {
  case 14: {
   _luaX_syntaxerror($ls,8366);
   // unreachable;
   break;
  }
  case 35: {
   $85 = (_skip_sep($ls)|0);
   $86 = ($85|0)>(-1);
   if ($86) {
    _read_long_string($ls,$seminfo,$85);
    $$0 = 289;
    STACKTOP = sp;return ($$0|0);
   }
   $87 = ($85|0)==(-1);
   if ($87) {
    $$0 = 91;
    STACKTOP = sp;return ($$0|0);
   } else {
    _lexerror($ls,8391,289);
    // unreachable;
   }
   break;
  }
  case 39: {
   $88 = HEAP32[$3>>2]|0;
   $89 = HEAP32[$88>>2]|0;
   $90 = (($89) + -1)|0;
   HEAP32[$88>>2] = $90;
   $91 = ($89|0)==(0);
   if ($91) {
    $97 = (_luaZ_fill($88)|0);
    $98 = $97;
   } else {
    $92 = ((($88)) + 4|0);
    $93 = HEAP32[$92>>2]|0;
    $94 = ((($93)) + 1|0);
    HEAP32[$92>>2] = $94;
    $95 = HEAP8[$93>>0]|0;
    $96 = $95&255;
    $98 = $96;
   }
   HEAP32[$ls>>2] = $98;
   $99 = ($98|0)==(61);
   if (!($99)) {
    $$0 = 61;
    STACKTOP = sp;return ($$0|0);
   }
   $100 = HEAP32[$3>>2]|0;
   $101 = HEAP32[$100>>2]|0;
   $102 = (($101) + -1)|0;
   HEAP32[$100>>2] = $102;
   $103 = ($101|0)==(0);
   if ($103) {
    $109 = (_luaZ_fill($100)|0);
    $110 = $109;
   } else {
    $104 = ((($100)) + 4|0);
    $105 = HEAP32[$104>>2]|0;
    $106 = ((($105)) + 1|0);
    HEAP32[$104>>2] = $106;
    $107 = HEAP8[$105>>0]|0;
    $108 = $107&255;
    $110 = $108;
   }
   HEAP32[$ls>>2] = $110;
   $$0 = 281;
   STACKTOP = sp;return ($$0|0);
   break;
  }
  case 47: {
   $111 = HEAP32[$3>>2]|0;
   $112 = HEAP32[$111>>2]|0;
   $113 = (($112) + -1)|0;
   HEAP32[$111>>2] = $113;
   $114 = ($112|0)==(0);
   if ($114) {
    $120 = (_luaZ_fill($111)|0);
    $121 = $120;
   } else {
    $115 = ((($111)) + 4|0);
    $116 = HEAP32[$115>>2]|0;
    $117 = ((($116)) + 1|0);
    HEAP32[$115>>2] = $117;
    $118 = HEAP8[$116>>0]|0;
    $119 = $118&255;
    $121 = $119;
   }
   HEAP32[$ls>>2] = $121;
   $122 = ($121|0)==(61);
   if (!($122)) {
    $$0 = 60;
    STACKTOP = sp;return ($$0|0);
   }
   $123 = HEAP32[$3>>2]|0;
   $124 = HEAP32[$123>>2]|0;
   $125 = (($124) + -1)|0;
   HEAP32[$123>>2] = $125;
   $126 = ($124|0)==(0);
   if ($126) {
    $132 = (_luaZ_fill($123)|0);
    $133 = $132;
   } else {
    $127 = ((($123)) + 4|0);
    $128 = HEAP32[$127>>2]|0;
    $129 = ((($128)) + 1|0);
    HEAP32[$127>>2] = $129;
    $130 = HEAP8[$128>>0]|0;
    $131 = $130&255;
    $133 = $131;
   }
   HEAP32[$ls>>2] = $133;
   $$0 = 283;
   STACKTOP = sp;return ($$0|0);
   break;
  }
  case 55: {
   $134 = HEAP32[$3>>2]|0;
   $135 = HEAP32[$134>>2]|0;
   $136 = (($135) + -1)|0;
   HEAP32[$134>>2] = $136;
   $137 = ($135|0)==(0);
   if ($137) {
    $143 = (_luaZ_fill($134)|0);
    $144 = $143;
   } else {
    $138 = ((($134)) + 4|0);
    $139 = HEAP32[$138>>2]|0;
    $140 = ((($139)) + 1|0);
    HEAP32[$138>>2] = $140;
    $141 = HEAP8[$139>>0]|0;
    $142 = $141&255;
    $144 = $142;
   }
   HEAP32[$ls>>2] = $144;
   $145 = ($144|0)==(61);
   if (!($145)) {
    $$0 = 62;
    STACKTOP = sp;return ($$0|0);
   }
   $146 = HEAP32[$3>>2]|0;
   $147 = HEAP32[$146>>2]|0;
   $148 = (($147) + -1)|0;
   HEAP32[$146>>2] = $148;
   $149 = ($147|0)==(0);
   if ($149) {
    $155 = (_luaZ_fill($146)|0);
    $156 = $155;
   } else {
    $150 = ((($146)) + 4|0);
    $151 = HEAP32[$150>>2]|0;
    $152 = ((($151)) + 1|0);
    HEAP32[$150>>2] = $152;
    $153 = HEAP8[$151>>0]|0;
    $154 = $153&255;
    $156 = $154;
   }
   HEAP32[$ls>>2] = $156;
   $$0 = 282;
   STACKTOP = sp;return ($$0|0);
   break;
  }
  case 63: {
   $157 = HEAP32[$3>>2]|0;
   $158 = HEAP32[$157>>2]|0;
   $159 = (($158) + -1)|0;
   HEAP32[$157>>2] = $159;
   $160 = ($158|0)==(0);
   if ($160) {
    $166 = (_luaZ_fill($157)|0);
    $167 = $166;
   } else {
    $161 = ((($157)) + 4|0);
    $162 = HEAP32[$161>>2]|0;
    $163 = ((($162)) + 1|0);
    HEAP32[$161>>2] = $163;
    $164 = HEAP8[$162>>0]|0;
    $165 = $164&255;
    $167 = $165;
   }
   HEAP32[$ls>>2] = $167;
   $168 = ($167|0)==(61);
   if (!($168)) {
    $$0 = 126;
    STACKTOP = sp;return ($$0|0);
   }
   $169 = HEAP32[$3>>2]|0;
   $170 = HEAP32[$169>>2]|0;
   $171 = (($170) + -1)|0;
   HEAP32[$169>>2] = $171;
   $172 = ($170|0)==(0);
   if ($172) {
    $178 = (_luaZ_fill($169)|0);
    $179 = $178;
   } else {
    $173 = ((($169)) + 4|0);
    $174 = HEAP32[$173>>2]|0;
    $175 = ((($174)) + 1|0);
    HEAP32[$173>>2] = $175;
    $176 = HEAP8[$174>>0]|0;
    $177 = $176&255;
    $179 = $177;
   }
   HEAP32[$ls>>2] = $179;
   $$0 = 284;
   STACKTOP = sp;return ($$0|0);
   break;
  }
  case 71: {
   $180 = HEAP32[$3>>2]|0;
   $181 = HEAP32[$180>>2]|0;
   $182 = (($181) + -1)|0;
   HEAP32[$180>>2] = $182;
   $183 = ($181|0)==(0);
   if ($183) {
    $189 = (_luaZ_fill($180)|0);
    $190 = $189;
   } else {
    $184 = ((($180)) + 4|0);
    $185 = HEAP32[$184>>2]|0;
    $186 = ((($185)) + 1|0);
    HEAP32[$184>>2] = $186;
    $187 = HEAP8[$185>>0]|0;
    $188 = $187&255;
    $190 = $188;
   }
   HEAP32[$ls>>2] = $190;
   $191 = ($190|0)==(58);
   if (!($191)) {
    $$0 = 58;
    STACKTOP = sp;return ($$0|0);
   }
   $192 = HEAP32[$3>>2]|0;
   $193 = HEAP32[$192>>2]|0;
   $194 = (($193) + -1)|0;
   HEAP32[$192>>2] = $194;
   $195 = ($193|0)==(0);
   if ($195) {
    $201 = (_luaZ_fill($192)|0);
    $202 = $201;
   } else {
    $196 = ((($192)) + 4|0);
    $197 = HEAP32[$196>>2]|0;
    $198 = ((($197)) + 1|0);
    HEAP32[$196>>2] = $198;
    $199 = HEAP8[$197>>0]|0;
    $200 = $199&255;
    $202 = $200;
   }
   HEAP32[$ls>>2] = $202;
   $$0 = 285;
   STACKTOP = sp;return ($$0|0);
   break;
  }
  case 79: {
   $203 = HEAP32[$0>>2]|0;
   $204 = ((($203)) + 4|0);
   $205 = HEAP32[$204>>2]|0;
   $206 = (($205) + 1)|0;
   $207 = ((($203)) + 8|0);
   $208 = HEAP32[$207>>2]|0;
   $209 = ($206>>>0)>($208>>>0);
   do {
    if ($209) {
     $210 = ($208>>>0)>(2147483645);
     if ($210) {
      _lexerror($ls,8421,0);
      // unreachable;
     }
     $211 = $208 << 1;
     $212 = ($211|0)==(-2);
     $213 = ((($ls)) + 52|0);
     $214 = HEAP32[$213>>2]|0;
     if ($212) {
      _luaM_toobig($214);
      // unreachable;
     } else {
      $215 = HEAP32[$203>>2]|0;
      $216 = (_luaM_realloc_($214,$215,$208,$211)|0);
      HEAP32[$203>>2] = $216;
      HEAP32[$207>>2] = $211;
      $$pre$i$i = HEAP32[$204>>2]|0;
      $219 = $$pre$i$i;$221 = $216;
      break;
     }
    } else {
     $$pre1$i$i = HEAP32[$203>>2]|0;
     $219 = $205;$221 = $$pre1$i$i;
    }
   } while(0);
   $217 = $$lcssa257&255;
   $218 = (($219) + 1)|0;
   HEAP32[$204>>2] = $218;
   $220 = (($221) + ($219)|0);
   HEAP8[$220>>0] = $217;
   $222 = HEAP32[$3>>2]|0;
   $223 = HEAP32[$222>>2]|0;
   $224 = (($223) + -1)|0;
   HEAP32[$222>>2] = $224;
   $225 = ($223|0)==(0);
   if ($225) {
    $231 = (_luaZ_fill($222)|0);
    $232 = $231;
   } else {
    $226 = ((($222)) + 4|0);
    $227 = HEAP32[$226>>2]|0;
    $228 = ((($227)) + 1|0);
    HEAP32[$226>>2] = $228;
    $229 = HEAP8[$227>>0]|0;
    $230 = $229&255;
    $232 = $230;
   }
   HEAP32[$ls>>2] = $232;
   $233 = ($232|0)==($$lcssa257|0);
   L172: do {
    if (!($233)) {
     $234 = ((($ls)) + 52|0);
     $235 = ((($c$i$i)) + 4|0);
     $236 = ((($c$i$i)) + 8|0);
     $237 = $232;
     L174: while(1) {
      L176: do {
       switch ($237|0) {
       case -1:  {
        label = 92;
        break L174;
        break;
       }
       case 13: case 10:  {
        label = 93;
        break L174;
        break;
       }
       case 92:  {
        $238 = HEAP32[$3>>2]|0;
        $239 = HEAP32[$238>>2]|0;
        $240 = (($239) + -1)|0;
        HEAP32[$238>>2] = $240;
        $241 = ($239|0)==(0);
        if ($241) {
         $247 = (_luaZ_fill($238)|0);
         $248 = $247;
        } else {
         $242 = ((($238)) + 4|0);
         $243 = HEAP32[$242>>2]|0;
         $244 = ((($243)) + 1|0);
         HEAP32[$242>>2] = $244;
         $245 = HEAP8[$243>>0]|0;
         $246 = $245&255;
         $248 = $246;
        }
        HEAP32[$ls>>2] = $248;
        do {
         switch ($248|0) {
         case -1:  {
          $$be20$i = -1;
          break L176;
          break;
         }
         case 97:  {
          $c$0$i = 7;
          label = 165;
          break;
         }
         case 98:  {
          $c$0$i = 8;
          label = 165;
          break;
         }
         case 102:  {
          $c$0$i = 12;
          label = 165;
          break;
         }
         case 110:  {
          $c$0$i = 10;
          label = 165;
          break;
         }
         case 114:  {
          $c$0$i = 13;
          label = 165;
          break;
         }
         case 116:  {
          $c$0$i = 9;
          label = 165;
          break;
         }
         case 118:  {
          $c$0$i = 11;
          label = 165;
          break;
         }
         case 120:  {
          HEAP32[$c$i$i>>2] = 120;
          $250 = HEAP32[$3>>2]|0;
          $251 = HEAP32[$250>>2]|0;
          $252 = (($251) + -1)|0;
          HEAP32[$250>>2] = $252;
          $253 = ($251|0)==(0);
          if ($253) {
           $259 = (_luaZ_fill($250)|0);
           $260 = $259;
          } else {
           $254 = ((($250)) + 4|0);
           $255 = HEAP32[$254>>2]|0;
           $256 = ((($255)) + 1|0);
           HEAP32[$254>>2] = $256;
           $257 = HEAP8[$255>>0]|0;
           $258 = $257&255;
           $260 = $258;
          }
          HEAP32[$ls>>2] = $260;
          HEAP32[$235>>2] = $260;
          $261 = (($260) + 1)|0;
          $262 = (8085 + ($261)|0);
          $263 = HEAP8[$262>>0]|0;
          $264 = $263 & 16;
          $265 = ($264<<24>>24)==(0);
          if ($265) {
           $i$03$lcssa$i$i = 2;
           label = 109;
           break L174;
          }
          $266 = (_luaO_hexavalue($260)|0);
          $267 = HEAP32[$3>>2]|0;
          $268 = HEAP32[$267>>2]|0;
          $269 = (($268) + -1)|0;
          HEAP32[$267>>2] = $269;
          $270 = ($268|0)==(0);
          if ($270) {
           $276 = (_luaZ_fill($267)|0);
           $277 = $276;
          } else {
           $271 = ((($267)) + 4|0);
           $272 = HEAP32[$271>>2]|0;
           $273 = ((($272)) + 1|0);
           HEAP32[$271>>2] = $273;
           $274 = HEAP8[$272>>0]|0;
           $275 = $274&255;
           $277 = $275;
          }
          HEAP32[$ls>>2] = $277;
          HEAP32[$236>>2] = $277;
          $278 = (($277) + 1)|0;
          $279 = (8085 + ($278)|0);
          $280 = HEAP8[$279>>0]|0;
          $281 = $280 & 16;
          $282 = ($281<<24>>24)==(0);
          if ($282) {
           $i$03$lcssa$i$i = 3;
           label = 109;
           break L174;
          }
          $283 = $266 << 4;
          $284 = (_luaO_hexavalue($277)|0);
          $285 = (($284) + ($283))|0;
          $c$0$i = $285;
          label = 165;
          break;
         }
         case 13: case 10:  {
          $286 = HEAP32[$3>>2]|0;
          $287 = HEAP32[$286>>2]|0;
          $288 = (($287) + -1)|0;
          HEAP32[$286>>2] = $288;
          $289 = ($287|0)==(0);
          if ($289) {
           $295 = (_luaZ_fill($286)|0);
           $296 = $295;
          } else {
           $290 = ((($286)) + 4|0);
           $291 = HEAP32[$290>>2]|0;
           $292 = ((($291)) + 1|0);
           HEAP32[$290>>2] = $292;
           $293 = HEAP8[$291>>0]|0;
           $294 = $293&255;
           $296 = $294;
          }
          HEAP32[$ls>>2] = $296;
          switch ($296|0) {
          case 13: case 10:  {
           $297 = ($296|0)==($248|0);
           if (!($297)) {
            $298 = HEAP32[$3>>2]|0;
            $299 = HEAP32[$298>>2]|0;
            $300 = (($299) + -1)|0;
            HEAP32[$298>>2] = $300;
            $301 = ($299|0)==(0);
            if ($301) {
             $307 = (_luaZ_fill($298)|0);
             $308 = $307;
            } else {
             $302 = ((($298)) + 4|0);
             $303 = HEAP32[$302>>2]|0;
             $304 = ((($303)) + 1|0);
             HEAP32[$302>>2] = $304;
             $305 = HEAP8[$303>>0]|0;
             $306 = $305&255;
             $308 = $306;
            }
            HEAP32[$ls>>2] = $308;
           }
           break;
          }
          default: {
          }
          }
          $309 = HEAP32[$4>>2]|0;
          $310 = (($309) + 1)|0;
          HEAP32[$4>>2] = $310;
          $311 = ($309|0)>(2147483643);
          if ($311) {
           label = 125;
           break L174;
          } else {
           $c$1$i = 10;
          }
          break;
         }
         case 39: case 34: case 92:  {
          $c$0$i = $248;
          label = 165;
          break;
         }
         case 122:  {
          $312 = HEAP32[$3>>2]|0;
          $313 = HEAP32[$312>>2]|0;
          $314 = (($313) + -1)|0;
          HEAP32[$312>>2] = $314;
          $315 = ($313|0)==(0);
          if ($315) {
           $321 = (_luaZ_fill($312)|0);
           $322 = $321;
          } else {
           $316 = ((($312)) + 4|0);
           $317 = HEAP32[$316>>2]|0;
           $318 = ((($317)) + 1|0);
           HEAP32[$316>>2] = $318;
           $319 = HEAP8[$317>>0]|0;
           $320 = $319&255;
           $322 = $320;
          }
          HEAP32[$ls>>2] = $322;
          $323 = (($322) + 1)|0;
          $324 = (8085 + ($323)|0);
          $325 = HEAP8[$324>>0]|0;
          $326 = $325 & 8;
          $327 = ($326<<24>>24)==(0);
          if ($327) {
           $$be20$i = $322;
           break L176;
          } else {
           $328 = $322;
          }
          while(1) {
           switch ($328|0) {
           case 13: case 10:  {
            $329 = HEAP32[$3>>2]|0;
            $330 = HEAP32[$329>>2]|0;
            $331 = (($330) + -1)|0;
            HEAP32[$329>>2] = $331;
            $332 = ($330|0)==(0);
            if ($332) {
             $338 = (_luaZ_fill($329)|0);
             $339 = $338;
            } else {
             $333 = ((($329)) + 4|0);
             $334 = HEAP32[$333>>2]|0;
             $335 = ((($334)) + 1|0);
             HEAP32[$333>>2] = $335;
             $336 = HEAP8[$334>>0]|0;
             $337 = $336&255;
             $339 = $337;
            }
            HEAP32[$ls>>2] = $339;
            switch ($339|0) {
            case 13: case 10:  {
             $340 = ($339|0)==($328|0);
             if ($340) {
              $$pr18$i = $328;
             } else {
              $341 = HEAP32[$3>>2]|0;
              $342 = HEAP32[$341>>2]|0;
              $343 = (($342) + -1)|0;
              HEAP32[$341>>2] = $343;
              $344 = ($342|0)==(0);
              if ($344) {
               $350 = (_luaZ_fill($341)|0);
               $351 = $350;
              } else {
               $345 = ((($341)) + 4|0);
               $346 = HEAP32[$345>>2]|0;
               $347 = ((($346)) + 1|0);
               HEAP32[$345>>2] = $347;
               $348 = HEAP8[$346>>0]|0;
               $349 = $348&255;
               $351 = $349;
              }
              HEAP32[$ls>>2] = $351;
              $$pr18$i = $351;
             }
             break;
            }
            default: {
             $$pr18$i = $339;
            }
            }
            $352 = HEAP32[$4>>2]|0;
            $353 = (($352) + 1)|0;
            HEAP32[$4>>2] = $353;
            $354 = ($352|0)>(2147483643);
            if ($354) {
             label = 142;
             break L174;
            } else {
             $$be$i = $$pr18$i;
            }
            break;
           }
           default: {
            $355 = HEAP32[$3>>2]|0;
            $356 = HEAP32[$355>>2]|0;
            $357 = (($356) + -1)|0;
            HEAP32[$355>>2] = $357;
            $358 = ($356|0)==(0);
            if ($358) {
             $364 = (_luaZ_fill($355)|0);
             $365 = $364;
            } else {
             $359 = ((($355)) + 4|0);
             $360 = HEAP32[$359>>2]|0;
             $361 = ((($360)) + 1|0);
             HEAP32[$359>>2] = $361;
             $362 = HEAP8[$360>>0]|0;
             $363 = $362&255;
             $365 = $363;
            }
            HEAP32[$ls>>2] = $365;
            $$be$i = $365;
           }
           }
           $366 = (($$be$i) + 1)|0;
           $367 = (8085 + ($366)|0);
           $368 = HEAP8[$367>>0]|0;
           $369 = $368 & 8;
           $370 = ($369<<24>>24)==(0);
           if ($370) {
            $$be20$i = $$be$i;
            break L176;
           } else {
            $328 = $$be$i;
           }
          }
          break;
         }
         default: {
          $371 = (($248) + 1)|0;
          $372 = (8085 + ($371)|0);
          $373 = HEAP8[$372>>0]|0;
          $374 = $373 & 2;
          $375 = ($374<<24>>24)==(0);
          if ($375) {
           label = 149;
           break L174;
          }
          HEAP32[$c$i$i>>2] = $248;
          $376 = (($248) + -48)|0;
          $377 = HEAP32[$3>>2]|0;
          $378 = HEAP32[$377>>2]|0;
          $379 = (($378) + -1)|0;
          HEAP32[$377>>2] = $379;
          $380 = ($378|0)==(0);
          if ($380) {
           $386 = (_luaZ_fill($377)|0);
           $387 = $386;
          } else {
           $381 = ((($377)) + 4|0);
           $382 = HEAP32[$381>>2]|0;
           $383 = ((($382)) + 1|0);
           HEAP32[$381>>2] = $383;
           $384 = HEAP8[$382>>0]|0;
           $385 = $384&255;
           $387 = $385;
          }
          HEAP32[$ls>>2] = $387;
          $388 = (($387) + 1)|0;
          $389 = (8085 + ($388)|0);
          $390 = HEAP8[$389>>0]|0;
          $391 = $390 & 2;
          $392 = ($391<<24>>24)==(0);
          if ($392) {
           $i$0$lcssa$i$i = 1;$r$0$lcssa$i$i = $376;
          } else {
           HEAP32[$235>>2] = $387;
           $394 = ($376*10)|0;
           $395 = (($394) + -48)|0;
           $396 = (($395) + ($387))|0;
           $397 = HEAP32[$3>>2]|0;
           $398 = HEAP32[$397>>2]|0;
           $399 = (($398) + -1)|0;
           HEAP32[$397>>2] = $399;
           $400 = ($398|0)==(0);
           if ($400) {
            $406 = (_luaZ_fill($397)|0);
            $407 = $406;
           } else {
            $401 = ((($397)) + 4|0);
            $402 = HEAP32[$401>>2]|0;
            $403 = ((($402)) + 1|0);
            HEAP32[$401>>2] = $403;
            $404 = HEAP8[$402>>0]|0;
            $405 = $404&255;
            $407 = $405;
           }
           HEAP32[$ls>>2] = $407;
           $408 = (($407) + 1)|0;
           $409 = (8085 + ($408)|0);
           $410 = HEAP8[$409>>0]|0;
           $411 = $410 & 2;
           $412 = ($411<<24>>24)==(0);
           if ($412) {
            $i$0$lcssa$i$i = 2;$r$0$lcssa$i$i = $396;
           } else {
            HEAP32[$236>>2] = $407;
            $413 = ($396*10)|0;
            $414 = (($413) + -48)|0;
            $415 = (($414) + ($407))|0;
            $416 = HEAP32[$3>>2]|0;
            $417 = HEAP32[$416>>2]|0;
            $418 = (($417) + -1)|0;
            HEAP32[$416>>2] = $418;
            $419 = ($417|0)==(0);
            if ($419) {
             $425 = (_luaZ_fill($416)|0);
             $426 = $425;
            } else {
             $420 = ((($416)) + 4|0);
             $421 = HEAP32[$420>>2]|0;
             $422 = ((($421)) + 1|0);
             HEAP32[$420>>2] = $422;
             $423 = HEAP8[$421>>0]|0;
             $424 = $423&255;
             $426 = $424;
            }
            HEAP32[$ls>>2] = $426;
            $i$0$lcssa$i$i = 3;$r$0$lcssa$i$i = $415;
           }
          }
          $393 = ($r$0$lcssa$i$i|0)>(255);
          if ($393) {
           $i$0$lcssa$i$i$lcssa = $i$0$lcssa$i$i;
           label = 155;
           break L174;
          }
          $c$1$i = $r$0$lcssa$i$i;
         }
         }
        } while(0);
        if ((label|0) == 165) {
         label = 0;
         $427 = HEAP32[$3>>2]|0;
         $428 = HEAP32[$427>>2]|0;
         $429 = (($428) + -1)|0;
         HEAP32[$427>>2] = $429;
         $430 = ($428|0)==(0);
         if ($430) {
          $436 = (_luaZ_fill($427)|0);
          $437 = $436;
         } else {
          $431 = ((($427)) + 4|0);
          $432 = HEAP32[$431>>2]|0;
          $433 = ((($432)) + 1|0);
          HEAP32[$431>>2] = $433;
          $434 = HEAP8[$432>>0]|0;
          $435 = $434&255;
          $437 = $435;
         }
         HEAP32[$ls>>2] = $437;
         $c$1$i = $c$0$i;
        }
        $438 = HEAP32[$0>>2]|0;
        $439 = ((($438)) + 4|0);
        $440 = HEAP32[$439>>2]|0;
        $441 = (($440) + 1)|0;
        $442 = ((($438)) + 8|0);
        $443 = HEAP32[$442>>2]|0;
        $444 = ($441>>>0)>($443>>>0);
        if ($444) {
         $445 = ($443>>>0)>(2147483645);
         if ($445) {
          label = 172;
          break L174;
         }
         $446 = $443 << 1;
         $447 = ($446|0)==(-2);
         $448 = HEAP32[$234>>2]|0;
         if ($447) {
          $$lcssa225 = $448;
          label = 174;
          break L174;
         }
         $449 = HEAP32[$438>>2]|0;
         $450 = (_luaM_realloc_($448,$449,$443,$446)|0);
         HEAP32[$438>>2] = $450;
         HEAP32[$442>>2] = $446;
         $$pre$i6$i = HEAP32[$439>>2]|0;
         $453 = $$pre$i6$i;$455 = $450;
        } else {
         $$pre1$i4$i = HEAP32[$438>>2]|0;
         $453 = $440;$455 = $$pre1$i4$i;
        }
        $451 = $c$1$i&255;
        $452 = (($453) + 1)|0;
        HEAP32[$439>>2] = $452;
        $454 = (($455) + ($453)|0);
        HEAP8[$454>>0] = $451;
        $$pr$pre$i = HEAP32[$ls>>2]|0;
        $$be20$i = $$pr$pre$i;
        break;
       }
       default: {
        $456 = HEAP32[$0>>2]|0;
        $457 = ((($456)) + 4|0);
        $458 = HEAP32[$457>>2]|0;
        $459 = (($458) + 1)|0;
        $460 = ((($456)) + 8|0);
        $461 = HEAP32[$460>>2]|0;
        $462 = ($459>>>0)>($461>>>0);
        if ($462) {
         $463 = ($461>>>0)>(2147483645);
         if ($463) {
          label = 180;
          break L174;
         }
         $464 = $461 << 1;
         $465 = ($464|0)==(-2);
         $466 = HEAP32[$234>>2]|0;
         if ($465) {
          $$lcssa226 = $466;
          label = 182;
          break L174;
         }
         $467 = HEAP32[$456>>2]|0;
         $468 = (_luaM_realloc_($466,$467,$461,$464)|0);
         HEAP32[$456>>2] = $468;
         HEAP32[$460>>2] = $464;
         $$pre$i11$i = HEAP32[$457>>2]|0;
         $471 = $$pre$i11$i;$473 = $468;
        } else {
         $$pre1$i9$i = HEAP32[$456>>2]|0;
         $471 = $458;$473 = $$pre1$i9$i;
        }
        $469 = $237&255;
        $470 = (($471) + 1)|0;
        HEAP32[$457>>2] = $470;
        $472 = (($473) + ($471)|0);
        HEAP8[$472>>0] = $469;
        $474 = HEAP32[$3>>2]|0;
        $475 = HEAP32[$474>>2]|0;
        $476 = (($475) + -1)|0;
        HEAP32[$474>>2] = $476;
        $477 = ($475|0)==(0);
        if ($477) {
         $483 = (_luaZ_fill($474)|0);
         $484 = $483;
        } else {
         $478 = ((($474)) + 4|0);
         $479 = HEAP32[$478>>2]|0;
         $480 = ((($479)) + 1|0);
         HEAP32[$478>>2] = $480;
         $481 = HEAP8[$479>>0]|0;
         $482 = $481&255;
         $484 = $482;
        }
        HEAP32[$ls>>2] = $484;
        $$be20$i = $484;
       }
       }
      } while(0);
      $249 = ($$be20$i|0)==($$lcssa257|0);
      if ($249) {
       break L172;
      } else {
       $237 = $$be20$i;
      }
     }
     switch (label|0) {
      case 92: {
       _lexerror($ls,8446,286);
       // unreachable;
       break;
      }
      case 93: {
       _lexerror($ls,8446,289);
       // unreachable;
       break;
      }
      case 109: {
       _escerror($ls,$c$i$i,$i$03$lcssa$i$i,8464);
       // unreachable;
       break;
      }
      case 125: {
       _luaX_syntaxerror($ls,8366);
       // unreachable;
       break;
      }
      case 142: {
       _luaX_syntaxerror($ls,8366);
       // unreachable;
       break;
      }
      case 149: {
       _escerror($ls,$ls,1,8491);
       // unreachable;
       break;
      }
      case 155: {
       _escerror($ls,$c$i$i,$i$0$lcssa$i$i$lcssa,8515);
       // unreachable;
       break;
      }
      case 172: {
       _lexerror($ls,8421,0);
       // unreachable;
       break;
      }
      case 174: {
       _luaM_toobig($$lcssa225);
       // unreachable;
       break;
      }
      case 180: {
       _lexerror($ls,8421,0);
       // unreachable;
       break;
      }
      case 182: {
       _luaM_toobig($$lcssa226);
       // unreachable;
       break;
      }
     }
    }
   } while(0);
   $485 = HEAP32[$0>>2]|0;
   $486 = ((($485)) + 4|0);
   $487 = HEAP32[$486>>2]|0;
   $488 = (($487) + 1)|0;
   $489 = ((($485)) + 8|0);
   $490 = HEAP32[$489>>2]|0;
   $491 = ($488>>>0)>($490>>>0);
   do {
    if ($491) {
     $492 = ($490>>>0)>(2147483645);
     if ($492) {
      _lexerror($ls,8421,0);
      // unreachable;
     }
     $493 = $490 << 1;
     $494 = ($493|0)==(-2);
     $495 = ((($ls)) + 52|0);
     $496 = HEAP32[$495>>2]|0;
     if ($494) {
      _luaM_toobig($496);
      // unreachable;
     } else {
      $497 = HEAP32[$485>>2]|0;
      $498 = (_luaM_realloc_($496,$497,$490,$493)|0);
      HEAP32[$485>>2] = $498;
      HEAP32[$489>>2] = $493;
      $$pre$i16$i = HEAP32[$486>>2]|0;
      $500 = $$pre$i16$i;$502 = $498;
      break;
     }
    } else {
     $$pre1$i14$i = HEAP32[$485>>2]|0;
     $500 = $487;$502 = $$pre1$i14$i;
    }
   } while(0);
   $499 = (($500) + 1)|0;
   HEAP32[$486>>2] = $499;
   $501 = (($502) + ($500)|0);
   HEAP8[$501>>0] = $217;
   $503 = HEAP32[$3>>2]|0;
   $504 = HEAP32[$503>>2]|0;
   $505 = (($504) + -1)|0;
   HEAP32[$503>>2] = $505;
   $506 = ($504|0)==(0);
   if ($506) {
    $512 = (_luaZ_fill($503)|0);
    $513 = $512;
   } else {
    $507 = ((($503)) + 4|0);
    $508 = HEAP32[$507>>2]|0;
    $509 = ((($508)) + 1|0);
    HEAP32[$507>>2] = $509;
    $510 = HEAP8[$508>>0]|0;
    $511 = $510&255;
    $513 = $511;
   }
   HEAP32[$ls>>2] = $513;
   $514 = HEAP32[$0>>2]|0;
   $515 = HEAP32[$514>>2]|0;
   $516 = ((($515)) + 1|0);
   $517 = ((($514)) + 4|0);
   $518 = HEAP32[$517>>2]|0;
   $519 = (($518) + -2)|0;
   $520 = ((($ls)) + 52|0);
   $521 = HEAP32[$520>>2]|0;
   $522 = (_luaS_newlstr($521,$516,$519)|0);
   $523 = ((($521)) + 8|0);
   $524 = HEAP32[$523>>2]|0;
   $525 = ((($524)) + 16|0);
   HEAP32[$523>>2] = $525;
   HEAP32[$524>>2] = $522;
   $526 = ((($522)) + 4|0);
   $527 = HEAP8[$526>>0]|0;
   $528 = $527&255;
   $529 = $528 | 64;
   $530 = ((($524)) + 8|0);
   HEAP32[$530>>2] = $529;
   $531 = ((($ls)) + 48|0);
   $532 = HEAP32[$531>>2]|0;
   $533 = ((($532)) + 4|0);
   $534 = HEAP32[$533>>2]|0;
   $535 = HEAP32[$523>>2]|0;
   $536 = ((($535)) + -16|0);
   $537 = (_luaH_set($521,$534,$536)|0);
   $538 = ((($537)) + 8|0);
   $539 = HEAP32[$538>>2]|0;
   $540 = ($539|0)==(0);
   if ($540) {
    HEAP32[$537>>2] = 1;
    HEAP32[$538>>2] = 1;
    $541 = ((($521)) + 12|0);
    $542 = HEAP32[$541>>2]|0;
    $543 = ((($542)) + 12|0);
    $544 = HEAP32[$543>>2]|0;
    $545 = ($544|0)>(0);
    if ($545) {
     _luaC_step($521);
    }
   }
   $546 = HEAP32[$523>>2]|0;
   $547 = ((($546)) + -16|0);
   HEAP32[$523>>2] = $547;
   HEAP32[$seminfo>>2] = $522;
   $$0 = 289;
   STACKTOP = sp;return ($$0|0);
   break;
  }
  case 202: {
   $548 = HEAP32[$0>>2]|0;
   $549 = ((($548)) + 4|0);
   $550 = HEAP32[$549>>2]|0;
   $551 = (($550) + 1)|0;
   $552 = ((($548)) + 8|0);
   $553 = HEAP32[$552>>2]|0;
   $554 = ($551>>>0)>($553>>>0);
   do {
    if ($554) {
     $555 = ($553>>>0)>(2147483645);
     if ($555) {
      _lexerror($ls,8421,0);
      // unreachable;
     }
     $556 = $553 << 1;
     $557 = ($556|0)==(-2);
     $558 = ((($ls)) + 52|0);
     $559 = HEAP32[$558>>2]|0;
     if ($557) {
      _luaM_toobig($559);
      // unreachable;
     } else {
      $560 = HEAP32[$548>>2]|0;
      $561 = (_luaM_realloc_($559,$560,$553,$556)|0);
      HEAP32[$548>>2] = $561;
      HEAP32[$552>>2] = $556;
      $$pre$i = HEAP32[$549>>2]|0;
      $563 = $$pre$i;$565 = $561;
      break;
     }
    } else {
     $$pre1$i = HEAP32[$548>>2]|0;
     $563 = $550;$565 = $$pre1$i;
    }
   } while(0);
   $562 = (($563) + 1)|0;
   HEAP32[$549>>2] = $562;
   $564 = (($565) + ($563)|0);
   HEAP8[$564>>0] = 46;
   $566 = HEAP32[$3>>2]|0;
   $567 = HEAP32[$566>>2]|0;
   $568 = (($567) + -1)|0;
   HEAP32[$566>>2] = $568;
   $569 = ($567|0)==(0);
   if ($569) {
    $575 = (_luaZ_fill($566)|0);
    $$pr28 = $575;
   } else {
    $570 = ((($566)) + 4|0);
    $571 = HEAP32[$570>>2]|0;
    $572 = ((($571)) + 1|0);
    HEAP32[$570>>2] = $572;
    $573 = HEAP8[$571>>0]|0;
    $574 = $573&255;
    $$pr28 = $574;
   }
   HEAP32[$ls>>2] = $$pr28;
   $576 = ($$pr28|0)==(0);
   if (!($576)) {
    $memchr = (_memchr(20752,$$pr28,2)|0);
    $577 = ($memchr|0)==(0|0);
    if (!($577)) {
     $578 = HEAP32[$0>>2]|0;
     $579 = ((($578)) + 4|0);
     $580 = HEAP32[$579>>2]|0;
     $581 = (($580) + 1)|0;
     $582 = ((($578)) + 8|0);
     $583 = HEAP32[$582>>2]|0;
     $584 = ($581>>>0)>($583>>>0);
     do {
      if ($584) {
       $585 = ($583>>>0)>(2147483645);
       if ($585) {
        _lexerror($ls,8421,0);
        // unreachable;
       }
       $586 = $583 << 1;
       $587 = ($586|0)==(-2);
       $588 = ((($ls)) + 52|0);
       $589 = HEAP32[$588>>2]|0;
       if ($587) {
        _luaM_toobig($589);
        // unreachable;
       } else {
        $590 = HEAP32[$578>>2]|0;
        $591 = (_luaM_realloc_($589,$590,$583,$586)|0);
        HEAP32[$578>>2] = $591;
        HEAP32[$582>>2] = $586;
        $$pre$i20 = HEAP32[$579>>2]|0;
        $594 = $$pre$i20;$596 = $591;
        break;
       }
      } else {
       $$pre1$i18 = HEAP32[$578>>2]|0;
       $594 = $580;$596 = $$pre1$i18;
      }
     } while(0);
     $592 = $$pr28&255;
     $593 = (($594) + 1)|0;
     HEAP32[$579>>2] = $593;
     $595 = (($596) + ($594)|0);
     HEAP8[$595>>0] = $592;
     $597 = HEAP32[$3>>2]|0;
     $598 = HEAP32[$597>>2]|0;
     $599 = (($598) + -1)|0;
     HEAP32[$597>>2] = $599;
     $600 = ($598|0)==(0);
     if ($600) {
      $606 = (_luaZ_fill($597)|0);
      $607 = $606;
     } else {
      $601 = ((($597)) + 4|0);
      $602 = HEAP32[$601>>2]|0;
      $603 = ((($602)) + 1|0);
      HEAP32[$601>>2] = $603;
      $604 = HEAP8[$602>>0]|0;
      $605 = $604&255;
      $607 = $605;
     }
     HEAP32[$ls>>2] = $607;
     $608 = ($607|0)==(0);
     if ($608) {
      $$0 = 279;
      STACKTOP = sp;return ($$0|0);
     }
     $memchr29 = (_memchr(20752,$607,2)|0);
     $609 = ($memchr29|0)==(0|0);
     if ($609) {
      $$0 = 279;
      STACKTOP = sp;return ($$0|0);
     }
     $610 = HEAP32[$0>>2]|0;
     $611 = ((($610)) + 4|0);
     $612 = HEAP32[$611>>2]|0;
     $613 = (($612) + 1)|0;
     $614 = ((($610)) + 8|0);
     $615 = HEAP32[$614>>2]|0;
     $616 = ($613>>>0)>($615>>>0);
     do {
      if ($616) {
       $617 = ($615>>>0)>(2147483645);
       if ($617) {
        _lexerror($ls,8421,0);
        // unreachable;
       }
       $618 = $615 << 1;
       $619 = ($618|0)==(-2);
       $620 = ((($ls)) + 52|0);
       $621 = HEAP32[$620>>2]|0;
       if ($619) {
        _luaM_toobig($621);
        // unreachable;
       } else {
        $622 = HEAP32[$610>>2]|0;
        $623 = (_luaM_realloc_($621,$622,$615,$618)|0);
        HEAP32[$610>>2] = $623;
        HEAP32[$614>>2] = $618;
        $$pre$i25 = HEAP32[$611>>2]|0;
        $626 = $$pre$i25;$628 = $623;
        break;
       }
      } else {
       $$pre1$i23 = HEAP32[$610>>2]|0;
       $626 = $612;$628 = $$pre1$i23;
      }
     } while(0);
     $624 = $607&255;
     $625 = (($626) + 1)|0;
     HEAP32[$611>>2] = $625;
     $627 = (($628) + ($626)|0);
     HEAP8[$627>>0] = $624;
     $629 = HEAP32[$3>>2]|0;
     $630 = HEAP32[$629>>2]|0;
     $631 = (($630) + -1)|0;
     HEAP32[$629>>2] = $631;
     $632 = ($630|0)==(0);
     if ($632) {
      $638 = (_luaZ_fill($629)|0);
      $639 = $638;
     } else {
      $633 = ((($629)) + 4|0);
      $634 = HEAP32[$633>>2]|0;
      $635 = ((($634)) + 1|0);
      HEAP32[$633>>2] = $635;
      $636 = HEAP8[$634>>0]|0;
      $637 = $636&255;
      $639 = $637;
     }
     HEAP32[$ls>>2] = $639;
     $$0 = 280;
     STACKTOP = sp;return ($$0|0);
    }
   }
   $640 = (($$pr28) + 1)|0;
   $641 = (8085 + ($640)|0);
   $642 = HEAP8[$641>>0]|0;
   $643 = $642 & 2;
   $644 = ($643<<24>>24)==(0);
   if ($644) {
    $$0 = 46;
    STACKTOP = sp;return ($$0|0);
   } else {
    $660 = $$pr28;
   }
   break;
  }
  case 324: {
   $852 = (($$lcssa248) + 1)|0;
   $853 = (8085 + ($852)|0);
   $854 = HEAP8[$853>>0]|0;
   $855 = $854 & 1;
   $856 = ($855<<24>>24)==(0);
   if ($856) {
    $931 = HEAP32[$3>>2]|0;
    $932 = HEAP32[$931>>2]|0;
    $933 = (($932) + -1)|0;
    HEAP32[$931>>2] = $933;
    $934 = ($932|0)==(0);
    if ($934) {
     $940 = (_luaZ_fill($931)|0);
     $941 = $940;
    } else {
     $935 = ((($931)) + 4|0);
     $936 = HEAP32[$935>>2]|0;
     $937 = ((($936)) + 1|0);
     HEAP32[$935>>2] = $937;
     $938 = HEAP8[$936>>0]|0;
     $939 = $938&255;
     $941 = $939;
    }
    HEAP32[$ls>>2] = $941;
    $$0 = $$lcssa248;
    STACKTOP = sp;return ($$0|0);
   }
   $857 = ((($ls)) + 52|0);
   $872 = $$lcssa248;
   while(1) {
    $858 = HEAP32[$0>>2]|0;
    $859 = ((($858)) + 4|0);
    $860 = HEAP32[$859>>2]|0;
    $861 = (($860) + 1)|0;
    $862 = ((($858)) + 8|0);
    $863 = HEAP32[$862>>2]|0;
    $864 = ($861>>>0)>($863>>>0);
    if ($864) {
     $865 = ($863>>>0)>(2147483645);
     if ($865) {
      label = 329;
      break;
     }
     $866 = $863 << 1;
     $867 = ($866|0)==(-2);
     $868 = HEAP32[$857>>2]|0;
     if ($867) {
      $$lcssa = $868;
      label = 331;
      break;
     }
     $869 = HEAP32[$858>>2]|0;
     $870 = (_luaM_realloc_($868,$869,$863,$866)|0);
     HEAP32[$858>>2] = $870;
     HEAP32[$862>>2] = $866;
     $$pre$i15 = HEAP32[$859>>2]|0;
     $874 = $$pre$i15;$876 = $870;
    } else {
     $$pre1$i13 = HEAP32[$858>>2]|0;
     $874 = $860;$876 = $$pre1$i13;
    }
    $871 = $872&255;
    $873 = (($874) + 1)|0;
    HEAP32[$859>>2] = $873;
    $875 = (($876) + ($874)|0);
    HEAP8[$875>>0] = $871;
    $877 = HEAP32[$3>>2]|0;
    $878 = HEAP32[$877>>2]|0;
    $879 = (($878) + -1)|0;
    HEAP32[$877>>2] = $879;
    $880 = ($878|0)==(0);
    if ($880) {
     $886 = (_luaZ_fill($877)|0);
     $887 = $886;
    } else {
     $881 = ((($877)) + 4|0);
     $882 = HEAP32[$881>>2]|0;
     $883 = ((($882)) + 1|0);
     HEAP32[$881>>2] = $883;
     $884 = HEAP8[$882>>0]|0;
     $885 = $884&255;
     $887 = $885;
    }
    HEAP32[$ls>>2] = $887;
    $888 = (($887) + 1)|0;
    $889 = (8085 + ($888)|0);
    $890 = HEAP8[$889>>0]|0;
    $891 = $890 & 3;
    $892 = ($891<<24>>24)==(0);
    if ($892) {
     label = 337;
     break;
    } else {
     $872 = $887;
    }
   }
   if ((label|0) == 329) {
    _lexerror($ls,8421,0);
    // unreachable;
   }
   else if ((label|0) == 331) {
    _luaM_toobig($$lcssa);
    // unreachable;
   }
   else if ((label|0) == 337) {
    $893 = HEAP32[$0>>2]|0;
    $894 = HEAP32[$893>>2]|0;
    $895 = ((($893)) + 4|0);
    $896 = HEAP32[$895>>2]|0;
    $897 = HEAP32[$857>>2]|0;
    $898 = (_luaS_newlstr($897,$894,$896)|0);
    $899 = ((($897)) + 8|0);
    $900 = HEAP32[$899>>2]|0;
    $901 = ((($900)) + 16|0);
    HEAP32[$899>>2] = $901;
    HEAP32[$900>>2] = $898;
    $902 = ((($898)) + 4|0);
    $903 = HEAP8[$902>>0]|0;
    $904 = $903&255;
    $905 = $904 | 64;
    $906 = ((($900)) + 8|0);
    HEAP32[$906>>2] = $905;
    $907 = ((($ls)) + 48|0);
    $908 = HEAP32[$907>>2]|0;
    $909 = ((($908)) + 4|0);
    $910 = HEAP32[$909>>2]|0;
    $911 = HEAP32[$899>>2]|0;
    $912 = ((($911)) + -16|0);
    $913 = (_luaH_set($897,$910,$912)|0);
    $914 = ((($913)) + 8|0);
    $915 = HEAP32[$914>>2]|0;
    $916 = ($915|0)==(0);
    if ($916) {
     HEAP32[$913>>2] = 1;
     HEAP32[$914>>2] = 1;
     $917 = ((($897)) + 12|0);
     $918 = HEAP32[$917>>2]|0;
     $919 = ((($918)) + 12|0);
     $920 = HEAP32[$919>>2]|0;
     $921 = ($920|0)>(0);
     if ($921) {
      _luaC_step($897);
     }
    }
    $922 = HEAP32[$899>>2]|0;
    $923 = ((($922)) + -16|0);
    HEAP32[$899>>2] = $923;
    HEAP32[$seminfo>>2] = $898;
    $924 = HEAP8[$902>>0]|0;
    $925 = ($924<<24>>24)==(4);
    if (!($925)) {
     $$0 = 288;
     STACKTOP = sp;return ($$0|0);
    }
    $926 = ((($898)) + 6|0);
    $927 = HEAP8[$926>>0]|0;
    $928 = ($927<<24>>24)==(0);
    if ($928) {
     $$0 = 288;
     STACKTOP = sp;return ($$0|0);
    }
    $929 = $927&255;
    $930 = $929 | 256;
    $$0 = $930;
    STACKTOP = sp;return ($$0|0);
   }
   break;
  }
  case 347: {
   STACKTOP = sp;return ($$0|0);
   break;
  }
 }
 $645 = HEAP32[$0>>2]|0;
 $646 = ((($645)) + 4|0);
 $647 = HEAP32[$646>>2]|0;
 $648 = (($647) + 1)|0;
 $649 = ((($645)) + 8|0);
 $650 = HEAP32[$649>>2]|0;
 $651 = ($648>>>0)>($650>>>0);
 do {
  if ($651) {
   $652 = ($650>>>0)>(2147483645);
   if ($652) {
    _lexerror($ls,8421,0);
    // unreachable;
   }
   $653 = $650 << 1;
   $654 = ($653|0)==(-2);
   $655 = ((($ls)) + 52|0);
   $656 = HEAP32[$655>>2]|0;
   if ($654) {
    _luaM_toobig($656);
    // unreachable;
   } else {
    $657 = HEAP32[$645>>2]|0;
    $658 = (_luaM_realloc_($656,$657,$650,$653)|0);
    HEAP32[$645>>2] = $658;
    HEAP32[$649>>2] = $653;
    $$pre$i$i8 = HEAP32[$646>>2]|0;
    $662 = $$pre$i$i8;$664 = $658;
    break;
   }
  } else {
   $$pre1$i$i6 = HEAP32[$645>>2]|0;
   $662 = $647;$664 = $$pre1$i$i6;
  }
 } while(0);
 $659 = $660&255;
 $661 = (($662) + 1)|0;
 HEAP32[$646>>2] = $661;
 $663 = (($664) + ($662)|0);
 HEAP8[$663>>0] = $659;
 $665 = HEAP32[$3>>2]|0;
 $666 = HEAP32[$665>>2]|0;
 $667 = (($666) + -1)|0;
 HEAP32[$665>>2] = $667;
 $668 = ($666|0)==(0);
 if ($668) {
  $674 = (_luaZ_fill($665)|0);
  $675 = $674;
 } else {
  $669 = ((($665)) + 4|0);
  $670 = HEAP32[$669>>2]|0;
  $671 = ((($670)) + 1|0);
  HEAP32[$669>>2] = $671;
  $672 = HEAP8[$670>>0]|0;
  $673 = $672&255;
  $675 = $673;
 }
 HEAP32[$ls>>2] = $675;
 $676 = ($660|0)==(48);
 if ($676) {
  $677 = ($675|0)==(0);
  if ($677) {
   $$ph$i = 0;$expo$0$ph$i = 8543;
  } else {
   $memchr35$i = (_memchr(8540,$675,3)|0);
   $678 = ($memchr35$i|0)==(0|0);
   if ($678) {
    $$ph$i = $675;$expo$0$ph$i = 8543;
   } else {
    $679 = HEAP32[$0>>2]|0;
    $680 = ((($679)) + 4|0);
    $681 = HEAP32[$680>>2]|0;
    $682 = (($681) + 1)|0;
    $683 = ((($679)) + 8|0);
    $684 = HEAP32[$683>>2]|0;
    $685 = ($682>>>0)>($684>>>0);
    do {
     if ($685) {
      $686 = ($684>>>0)>(2147483645);
      if ($686) {
       _lexerror($ls,8421,0);
       // unreachable;
      }
      $687 = $684 << 1;
      $688 = ($687|0)==(-2);
      $689 = ((($ls)) + 52|0);
      $690 = HEAP32[$689>>2]|0;
      if ($688) {
       _luaM_toobig($690);
       // unreachable;
      } else {
       $691 = HEAP32[$679>>2]|0;
       $692 = (_luaM_realloc_($690,$691,$684,$687)|0);
       HEAP32[$679>>2] = $692;
       HEAP32[$683>>2] = $687;
       $$pre$i22$i = HEAP32[$680>>2]|0;
       $695 = $$pre$i22$i;$697 = $692;
       break;
      }
     } else {
      $$pre1$i20$i = HEAP32[$679>>2]|0;
      $695 = $681;$697 = $$pre1$i20$i;
     }
    } while(0);
    $693 = $675&255;
    $694 = (($695) + 1)|0;
    HEAP32[$680>>2] = $694;
    $696 = (($697) + ($695)|0);
    HEAP8[$696>>0] = $693;
    $698 = HEAP32[$3>>2]|0;
    $699 = HEAP32[$698>>2]|0;
    $700 = (($699) + -1)|0;
    HEAP32[$698>>2] = $700;
    $701 = ($699|0)==(0);
    if ($701) {
     $707 = (_luaZ_fill($698)|0);
     $708 = $707;
    } else {
     $702 = ((($698)) + 4|0);
     $703 = HEAP32[$702>>2]|0;
     $704 = ((($703)) + 1|0);
     HEAP32[$702>>2] = $704;
     $705 = HEAP8[$703>>0]|0;
     $706 = $705&255;
     $708 = $706;
    }
    HEAP32[$ls>>2] = $708;
    $$ph$i = $708;$expo$0$ph$i = 8546;
   }
  }
 } else {
  $$ph$i = $675;$expo$0$ph$i = 8543;
 }
 $709 = ((($ls)) + 52|0);
 $711 = $$ph$i;
 while(1) {
  $710 = ($711|0)==(0);
  if ($710) {
   $774 = 0;
  } else {
   $memchr$i = (_memchr($expo$0$ph$i,$711,3)|0);
   $712 = ($memchr$i|0)==(0|0);
   if ($712) {
    $774 = $711;
   } else {
    $713 = HEAP32[$0>>2]|0;
    $714 = ((($713)) + 4|0);
    $715 = HEAP32[$714>>2]|0;
    $716 = (($715) + 1)|0;
    $717 = ((($713)) + 8|0);
    $718 = HEAP32[$717>>2]|0;
    $719 = ($716>>>0)>($718>>>0);
    if ($719) {
     $720 = ($718>>>0)>(2147483645);
     if ($720) {
      label = 268;
      break;
     }
     $721 = $718 << 1;
     $722 = ($721|0)==(-2);
     $723 = HEAP32[$709>>2]|0;
     if ($722) {
      $$lcssa227 = $723;
      label = 270;
      break;
     }
     $724 = HEAP32[$713>>2]|0;
     $725 = (_luaM_realloc_($723,$724,$718,$721)|0);
     HEAP32[$713>>2] = $725;
     HEAP32[$717>>2] = $721;
     $$pre$i27$i = HEAP32[$714>>2]|0;
     $728 = $$pre$i27$i;$730 = $725;
    } else {
     $$pre1$i25$i = HEAP32[$713>>2]|0;
     $728 = $715;$730 = $$pre1$i25$i;
    }
    $726 = $711&255;
    $727 = (($728) + 1)|0;
    HEAP32[$714>>2] = $727;
    $729 = (($730) + ($728)|0);
    HEAP8[$729>>0] = $726;
    $731 = HEAP32[$3>>2]|0;
    $732 = HEAP32[$731>>2]|0;
    $733 = (($732) + -1)|0;
    HEAP32[$731>>2] = $733;
    $734 = ($732|0)==(0);
    if ($734) {
     $740 = (_luaZ_fill($731)|0);
     $741 = $740;
    } else {
     $735 = ((($731)) + 4|0);
     $736 = HEAP32[$735>>2]|0;
     $737 = ((($736)) + 1|0);
     HEAP32[$735>>2] = $737;
     $738 = HEAP8[$736>>0]|0;
     $739 = $738&255;
     $741 = $739;
    }
    HEAP32[$ls>>2] = $741;
    $742 = ($741|0)==(0);
    if ($742) {
     $774 = 0;
    } else {
     $memchr34$i = (_memchr(8549,$741,3)|0);
     $743 = ($memchr34$i|0)==(0|0);
     if ($743) {
      $774 = $741;
     } else {
      $744 = HEAP32[$0>>2]|0;
      $745 = ((($744)) + 4|0);
      $746 = HEAP32[$745>>2]|0;
      $747 = (($746) + 1)|0;
      $748 = ((($744)) + 8|0);
      $749 = HEAP32[$748>>2]|0;
      $750 = ($747>>>0)>($749>>>0);
      if ($750) {
       $751 = ($749>>>0)>(2147483645);
       if ($751) {
        label = 280;
        break;
       }
       $752 = $749 << 1;
       $753 = ($752|0)==(-2);
       $754 = HEAP32[$709>>2]|0;
       if ($753) {
        $$lcssa228 = $754;
        label = 282;
        break;
       }
       $755 = HEAP32[$744>>2]|0;
       $756 = (_luaM_realloc_($754,$755,$749,$752)|0);
       HEAP32[$744>>2] = $756;
       HEAP32[$748>>2] = $752;
       $$pre$i32$i = HEAP32[$745>>2]|0;
       $759 = $$pre$i32$i;$761 = $756;
      } else {
       $$pre1$i30$i = HEAP32[$744>>2]|0;
       $759 = $746;$761 = $$pre1$i30$i;
      }
      $757 = $741&255;
      $758 = (($759) + 1)|0;
      HEAP32[$745>>2] = $758;
      $760 = (($761) + ($759)|0);
      HEAP8[$760>>0] = $757;
      $762 = HEAP32[$3>>2]|0;
      $763 = HEAP32[$762>>2]|0;
      $764 = (($763) + -1)|0;
      HEAP32[$762>>2] = $764;
      $765 = ($763|0)==(0);
      if ($765) {
       $771 = (_luaZ_fill($762)|0);
       $772 = $771;
      } else {
       $766 = ((($762)) + 4|0);
       $767 = HEAP32[$766>>2]|0;
       $768 = ((($767)) + 1|0);
       HEAP32[$766>>2] = $768;
       $769 = HEAP8[$767>>0]|0;
       $770 = $769&255;
       $772 = $770;
      }
      HEAP32[$ls>>2] = $772;
      $774 = $772;
     }
    }
   }
  }
  $773 = (($774) + 1)|0;
  $775 = (8085 + ($773)|0);
  $776 = HEAP8[$775>>0]|0;
  $777 = $776 & 16;
  $778 = ($777<<24>>24)!=(0);
  $779 = ($774|0)==(46);
  $or$cond$i = $779 | $778;
  $780 = HEAP32[$0>>2]|0;
  $781 = ((($780)) + 4|0);
  $782 = HEAP32[$781>>2]|0;
  $783 = (($782) + 1)|0;
  $784 = ((($780)) + 8|0);
  $785 = HEAP32[$784>>2]|0;
  $786 = ($783>>>0)>($785>>>0);
  if (!($or$cond$i)) {
   label = 300;
   break;
  }
  if ($786) {
   $787 = ($785>>>0)>(2147483645);
   if ($787) {
    label = 292;
    break;
   }
   $788 = $785 << 1;
   $789 = ($788|0)==(-2);
   $790 = HEAP32[$709>>2]|0;
   if ($789) {
    $$lcssa247 = $790;
    label = 294;
    break;
   }
   $791 = HEAP32[$780>>2]|0;
   $792 = (_luaM_realloc_($790,$791,$785,$788)|0);
   HEAP32[$780>>2] = $792;
   HEAP32[$784>>2] = $788;
   $$pre$i9$i = HEAP32[$781>>2]|0;
   $795 = $$pre$i9$i;$797 = $792;
  } else {
   $$pre1$i7$i = HEAP32[$780>>2]|0;
   $795 = $782;$797 = $$pre1$i7$i;
  }
  $793 = $774&255;
  $794 = (($795) + 1)|0;
  HEAP32[$781>>2] = $794;
  $796 = (($797) + ($795)|0);
  HEAP8[$796>>0] = $793;
  $798 = HEAP32[$3>>2]|0;
  $799 = HEAP32[$798>>2]|0;
  $800 = (($799) + -1)|0;
  HEAP32[$798>>2] = $800;
  $801 = ($799|0)==(0);
  if ($801) {
   $807 = (_luaZ_fill($798)|0);
   $808 = $807;
  } else {
   $802 = ((($798)) + 4|0);
   $803 = HEAP32[$802>>2]|0;
   $804 = ((($803)) + 1|0);
   HEAP32[$802>>2] = $804;
   $805 = HEAP8[$803>>0]|0;
   $806 = $805&255;
   $808 = $806;
  }
  HEAP32[$ls>>2] = $808;
  $711 = $808;
 }
 if ((label|0) == 268) {
  _lexerror($ls,8421,0);
  // unreachable;
 }
 else if ((label|0) == 270) {
  _luaM_toobig($$lcssa227);
  // unreachable;
 }
 else if ((label|0) == 280) {
  _lexerror($ls,8421,0);
  // unreachable;
 }
 else if ((label|0) == 282) {
  _luaM_toobig($$lcssa228);
  // unreachable;
 }
 else if ((label|0) == 292) {
  _lexerror($ls,8421,0);
  // unreachable;
 }
 else if ((label|0) == 294) {
  _luaM_toobig($$lcssa247);
  // unreachable;
 }
 else if ((label|0) == 300) {
  do {
   if ($786) {
    $809 = ($785>>>0)>(2147483645);
    if ($809) {
     _lexerror($ls,8421,0);
     // unreachable;
    }
    $810 = $785 << 1;
    $811 = ($810|0)==(-2);
    $812 = HEAP32[$709>>2]|0;
    if ($811) {
     _luaM_toobig($812);
     // unreachable;
    } else {
     $813 = HEAP32[$780>>2]|0;
     $814 = (_luaM_realloc_($812,$813,$785,$810)|0);
     HEAP32[$780>>2] = $814;
     HEAP32[$784>>2] = $810;
     $$pre$i14$i = HEAP32[$781>>2]|0;
     $816 = $$pre$i14$i;$818 = $814;
     break;
    }
   } else {
    $$pre1$i12$i = HEAP32[$780>>2]|0;
    $816 = $782;$818 = $$pre1$i12$i;
   }
  } while(0);
  $815 = (($816) + 1)|0;
  HEAP32[$781>>2] = $815;
  $817 = (($818) + ($816)|0);
  HEAP8[$817>>0] = 0;
  $819 = ((($ls)) + 76|0);
  $820 = HEAP8[$819>>0]|0;
  $ls$idx$val$i = HEAP32[$0>>2]|0;
  $ls$idx$val$idx$val$i = HEAP32[$ls$idx$val$i>>2]|0;
  $ls$idx$val$idx1$i = ((($ls$idx$val$i)) + 4|0);
  $ls$idx$val$idx1$val$i = HEAP32[$ls$idx$val$idx1$i>>2]|0;
  $821 = ($ls$idx$val$idx1$val$i|0)==(0);
  if ($821) {
   $827 = $ls$idx$val$idx$val$i;$828 = -1;
  } else {
   $$in$i$i = $ls$idx$val$idx1$val$i;
   while(1) {
    $822 = (($$in$i$i) + -1)|0;
    $823 = (($ls$idx$val$idx$val$i) + ($822)|0);
    $824 = HEAP8[$823>>0]|0;
    $825 = ($824<<24>>24)==(46);
    if ($825) {
     HEAP8[$823>>0] = $820;
    }
    $826 = ($822|0)==(0);
    if ($826) {
     break;
    } else {
     $$in$i$i = $822;
    }
   }
   $$pre$i10 = HEAP32[$0>>2]|0;
   $$pre77$i = HEAP32[$$pre$i10>>2]|0;
   $$phi$trans$insert78$i = ((($$pre$i10)) + 4|0);
   $$pre79$i = HEAP32[$$phi$trans$insert78$i>>2]|0;
   $phitmp$i = (($$pre79$i) + -1)|0;
   $827 = $$pre77$i;$828 = $phitmp$i;
  }
  $829 = (_luaO_str2d($827,$828,$seminfo)|0);
  $830 = ($829|0)==(0);
  if (!($830)) {
   $$0 = 287;
   STACKTOP = sp;return ($$0|0);
  }
  $831 = HEAP8[$819>>0]|0;
  $832 = (_localeconv()|0);
  $833 = HEAP32[$832>>2]|0;
  $834 = HEAP8[$833>>0]|0;
  HEAP8[$819>>0] = $834;
  $ls$idx1$val$i$i = HEAP32[$0>>2]|0;
  $ls$idx1$val$idx$val$i$i = HEAP32[$ls$idx1$val$i$i>>2]|0;
  $ls$idx1$val$idx2$i$i = ((($ls$idx1$val$i$i)) + 4|0);
  $ls$idx1$val$idx2$val$i$i = HEAP32[$ls$idx1$val$idx2$i$i>>2]|0;
  $835 = ($ls$idx1$val$idx2$val$i$i|0)==(0);
  if ($835) {
   $841 = $ls$idx1$val$idx$val$i$i;$842 = -1;
  } else {
   $$in$i$i$i = $ls$idx1$val$idx2$val$i$i;
   while(1) {
    $836 = (($$in$i$i$i) + -1)|0;
    $837 = (($ls$idx1$val$idx$val$i$i) + ($836)|0);
    $838 = HEAP8[$837>>0]|0;
    $839 = ($838<<24>>24)==($831<<24>>24);
    if ($839) {
     HEAP8[$837>>0] = $834;
    }
    $840 = ($836|0)==(0);
    if ($840) {
     break;
    } else {
     $$in$i$i$i = $836;
    }
   }
   $$pre$i17$i = HEAP32[$0>>2]|0;
   $$pre8$i$i = HEAP32[$$pre$i17$i>>2]|0;
   $$phi$trans$insert9$i$i = ((($$pre$i17$i)) + 4|0);
   $$pre10$i$i = HEAP32[$$phi$trans$insert9$i$i>>2]|0;
   $phitmp$i$i = (($$pre10$i$i) + -1)|0;
   $841 = $$pre8$i$i;$842 = $phitmp$i$i;
  }
  $843 = (_luaO_str2d($841,$842,$seminfo)|0);
  $844 = ($843|0)==(0);
  if (!($844)) {
   $$0 = 287;
   STACKTOP = sp;return ($$0|0);
  }
  $845 = HEAP8[$819>>0]|0;
  $ls$idx$val$i$i = HEAP32[$0>>2]|0;
  $ls$idx$val$idx$val$i$i = HEAP32[$ls$idx$val$i$i>>2]|0;
  $ls$idx$val$idx3$i$i = ((($ls$idx$val$i$i)) + 4|0);
  $ls$idx$val$idx3$val$i$i = HEAP32[$ls$idx$val$idx3$i$i>>2]|0;
  $846 = ($ls$idx$val$idx3$val$i$i|0)==(0);
  if ($846) {
   _lexerror($ls,8552,287);
   // unreachable;
  } else {
   $$in$i4$i$i = $ls$idx$val$idx3$val$i$i;
  }
  while(1) {
   $847 = (($$in$i4$i$i) + -1)|0;
   $848 = (($ls$idx$val$idx$val$i$i) + ($847)|0);
   $849 = HEAP8[$848>>0]|0;
   $850 = ($849<<24>>24)==($845<<24>>24);
   if ($850) {
    HEAP8[$848>>0] = 46;
   }
   $851 = ($847|0)==(0);
   if ($851) {
    break;
   } else {
    $$in$i4$i$i = $847;
   }
  }
  _lexerror($ls,8552,287);
  // unreachable;
 }
 return (0)|0;
}
function _skip_sep($ls) {
 $ls = $ls|0;
 var $$lcssa = 0, $$lcssa25 = 0, $$pre$i = 0, $$pre$i4 = 0, $$pre1$i = 0, $$pre1$i2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $7 = 0, $8 = 0, $9 = 0, $count$0$lcssa = 0, $count$011 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$ls>>2]|0;
 $1 = ((($ls)) + 60|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) + 1)|0;
 $6 = ((($2)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($5>>>0)>($7>>>0);
 do {
  if ($8) {
   $9 = ($7>>>0)>(2147483645);
   if ($9) {
    _lexerror($ls,8421,0);
    // unreachable;
   }
   $10 = $7 << 1;
   $11 = ($10|0)==(-2);
   $12 = ((($ls)) + 52|0);
   $13 = HEAP32[$12>>2]|0;
   if ($11) {
    _luaM_toobig($13);
    // unreachable;
   } else {
    $14 = HEAP32[$2>>2]|0;
    $15 = (_luaM_realloc_($13,$14,$7,$10)|0);
    HEAP32[$2>>2] = $15;
    HEAP32[$6>>2] = $10;
    $$pre$i = HEAP32[$3>>2]|0;
    $18 = $$pre$i;$20 = $15;
    break;
   }
  } else {
   $$pre1$i = HEAP32[$2>>2]|0;
   $18 = $4;$20 = $$pre1$i;
  }
 } while(0);
 $16 = $0&255;
 $17 = (($18) + 1)|0;
 HEAP32[$3>>2] = $17;
 $19 = (($20) + ($18)|0);
 HEAP8[$19>>0] = $16;
 $21 = ((($ls)) + 56|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = HEAP32[$22>>2]|0;
 $24 = (($23) + -1)|0;
 HEAP32[$22>>2] = $24;
 $25 = ($23|0)==(0);
 if ($25) {
  $31 = (_luaZ_fill($22)|0);
  $32 = $31;
 } else {
  $26 = ((($22)) + 4|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = ((($27)) + 1|0);
  HEAP32[$26>>2] = $28;
  $29 = HEAP8[$27>>0]|0;
  $30 = $29&255;
  $32 = $30;
 }
 HEAP32[$ls>>2] = $32;
 $33 = ($32|0)==(61);
 if (!($33)) {
  $$lcssa = $32;$count$0$lcssa = 0;
  $not$ = ($$lcssa|0)!=($0|0);
  $65 = $not$ << 31 >> 31;
  $66 = $65 ^ $count$0$lcssa;
  return ($66|0);
 }
 $34 = ((($ls)) + 52|0);
 $count$011 = 0;
 while(1) {
  $35 = HEAP32[$1>>2]|0;
  $36 = ((($35)) + 4|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = (($37) + 1)|0;
  $39 = ((($35)) + 8|0);
  $40 = HEAP32[$39>>2]|0;
  $41 = ($38>>>0)>($40>>>0);
  if ($41) {
   $42 = ($40>>>0)>(2147483645);
   if ($42) {
    label = 16;
    break;
   }
   $43 = $40 << 1;
   $44 = ($43|0)==(-2);
   $45 = HEAP32[$34>>2]|0;
   if ($44) {
    $$lcssa25 = $45;
    label = 18;
    break;
   }
   $46 = HEAP32[$35>>2]|0;
   $47 = (_luaM_realloc_($45,$46,$40,$43)|0);
   HEAP32[$35>>2] = $47;
   HEAP32[$39>>2] = $43;
   $$pre$i4 = HEAP32[$36>>2]|0;
   $49 = $$pre$i4;$51 = $47;
  } else {
   $$pre1$i2 = HEAP32[$35>>2]|0;
   $49 = $37;$51 = $$pre1$i2;
  }
  $48 = (($49) + 1)|0;
  HEAP32[$36>>2] = $48;
  $50 = (($51) + ($49)|0);
  HEAP8[$50>>0] = 61;
  $52 = HEAP32[$21>>2]|0;
  $53 = HEAP32[$52>>2]|0;
  $54 = (($53) + -1)|0;
  HEAP32[$52>>2] = $54;
  $55 = ($53|0)==(0);
  if ($55) {
   $61 = (_luaZ_fill($52)|0);
   $62 = $61;
  } else {
   $56 = ((($52)) + 4|0);
   $57 = HEAP32[$56>>2]|0;
   $58 = ((($57)) + 1|0);
   HEAP32[$56>>2] = $58;
   $59 = HEAP8[$57>>0]|0;
   $60 = $59&255;
   $62 = $60;
  }
  HEAP32[$ls>>2] = $62;
  $63 = (($count$011) + 1)|0;
  $64 = ($62|0)==(61);
  if ($64) {
   $count$011 = $63;
  } else {
   $$lcssa = $62;$count$0$lcssa = $63;
   label = 24;
   break;
  }
 }
 if ((label|0) == 16) {
  _lexerror($ls,8421,0);
  // unreachable;
 }
 else if ((label|0) == 18) {
  _luaM_toobig($$lcssa25);
  // unreachable;
 }
 else if ((label|0) == 24) {
  $not$ = ($$lcssa|0)!=($0|0);
  $65 = $not$ << 31 >> 31;
  $66 = $65 ^ $count$0$lcssa;
  return ($66|0);
 }
 return (0)|0;
}
function _read_long_string($ls,$seminfo,$sep) {
 $ls = $ls|0;
 $seminfo = $seminfo|0;
 $sep = $sep|0;
 var $$lcssa = 0, $$lcssa57 = 0, $$lcssa58 = 0, $$ph = 0, $$ph$ph = 0, $$pr23 = 0, $$pr24 = 0, $$pre$i = 0, $$pre$i15 = 0, $$pre$i4 = 0, $$pre$i9 = 0, $$pre1$i = 0, $$pre1$i13 = 0, $$pre1$i2 = 0, $$pre1$i7 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0;
 var $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0;
 var $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0;
 var $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0;
 var $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0;
 var $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0;
 var $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0;
 var $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$ls>>2]|0;
 $1 = ((($ls)) + 60|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) + 1)|0;
 $6 = ((($2)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($5>>>0)>($7>>>0);
 do {
  if ($8) {
   $9 = ($7>>>0)>(2147483645);
   if ($9) {
    _lexerror($ls,8421,0);
    // unreachable;
   }
   $10 = $7 << 1;
   $11 = ($10|0)==(-2);
   $12 = ((($ls)) + 52|0);
   $13 = HEAP32[$12>>2]|0;
   if ($11) {
    _luaM_toobig($13);
    // unreachable;
   } else {
    $14 = HEAP32[$2>>2]|0;
    $15 = (_luaM_realloc_($13,$14,$7,$10)|0);
    HEAP32[$2>>2] = $15;
    HEAP32[$6>>2] = $10;
    $$pre$i = HEAP32[$3>>2]|0;
    $18 = $$pre$i;$20 = $15;
    break;
   }
  } else {
   $$pre1$i = HEAP32[$2>>2]|0;
   $18 = $4;$20 = $$pre1$i;
  }
 } while(0);
 $16 = $0&255;
 $17 = (($18) + 1)|0;
 HEAP32[$3>>2] = $17;
 $19 = (($20) + ($18)|0);
 HEAP8[$19>>0] = $16;
 $21 = ((($ls)) + 56|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = HEAP32[$22>>2]|0;
 $24 = (($23) + -1)|0;
 HEAP32[$22>>2] = $24;
 $25 = ($23|0)==(0);
 if ($25) {
  $31 = (_luaZ_fill($22)|0);
  $32 = $31;
 } else {
  $26 = ((($22)) + 4|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = ((($27)) + 1|0);
  HEAP32[$26>>2] = $28;
  $29 = HEAP8[$27>>0]|0;
  $30 = $29&255;
  $32 = $30;
 }
 HEAP32[$ls>>2] = $32;
 switch ($32|0) {
 case 13: case 10:  {
  $33 = HEAP32[$21>>2]|0;
  $34 = HEAP32[$33>>2]|0;
  $35 = (($34) + -1)|0;
  HEAP32[$33>>2] = $35;
  $36 = ($34|0)==(0);
  if ($36) {
   $42 = (_luaZ_fill($33)|0);
   $43 = $42;
  } else {
   $37 = ((($33)) + 4|0);
   $38 = HEAP32[$37>>2]|0;
   $39 = ((($38)) + 1|0);
   HEAP32[$37>>2] = $39;
   $40 = HEAP8[$38>>0]|0;
   $41 = $40&255;
   $43 = $41;
  }
  HEAP32[$ls>>2] = $43;
  switch ($43|0) {
  case 13: case 10:  {
   $44 = ($43|0)==($32|0);
   if ($44) {
    $$pr23 = $32;
   } else {
    $45 = HEAP32[$21>>2]|0;
    $46 = HEAP32[$45>>2]|0;
    $47 = (($46) + -1)|0;
    HEAP32[$45>>2] = $47;
    $48 = ($46|0)==(0);
    if ($48) {
     $54 = (_luaZ_fill($45)|0);
     $55 = $54;
    } else {
     $49 = ((($45)) + 4|0);
     $50 = HEAP32[$49>>2]|0;
     $51 = ((($50)) + 1|0);
     HEAP32[$49>>2] = $51;
     $52 = HEAP8[$50>>0]|0;
     $53 = $52&255;
     $55 = $53;
    }
    HEAP32[$ls>>2] = $55;
    $$pr23 = $55;
   }
   break;
  }
  default: {
   $$pr23 = $43;
  }
  }
  $56 = ((($ls)) + 4|0);
  $57 = HEAP32[$56>>2]|0;
  $58 = (($57) + 1)|0;
  HEAP32[$56>>2] = $58;
  $59 = ($57|0)>(2147483643);
  if ($59) {
   _luaX_syntaxerror($ls,8366);
   // unreachable;
  } else {
   $$ph$ph = $$pr23;
  }
  break;
 }
 default: {
  $$ph$ph = $32;
 }
 }
 $60 = ($seminfo|0)==(0|0);
 $61 = ((($ls)) + 52|0);
 $62 = ((($ls)) + 4|0);
 $$ph = $$ph$ph;
 L31: while(1) {
  L33: do {
   if ($60) {
    $63 = $$ph;
    while(1) {
     switch ($63|0) {
     case -1:  {
      label = 31;
      break L31;
      break;
     }
     case 93:  {
      label = 32;
      break L33;
      break;
     }
     case 13: case 10:  {
      break L33;
      break;
     }
     default: {
     }
     }
     $64 = HEAP32[$21>>2]|0;
     $65 = HEAP32[$64>>2]|0;
     $66 = (($65) + -1)|0;
     HEAP32[$64>>2] = $66;
     $67 = ($65|0)==(0);
     if ($67) {
      $73 = (_luaZ_fill($64)|0);
      $74 = $73;
     } else {
      $68 = ((($64)) + 4|0);
      $69 = HEAP32[$68>>2]|0;
      $70 = ((($69)) + 1|0);
      HEAP32[$68>>2] = $70;
      $71 = HEAP8[$69>>0]|0;
      $72 = $71&255;
      $74 = $72;
     }
     HEAP32[$ls>>2] = $74;
     $63 = $74;
    }
   } else {
    $75 = $$ph;
    while(1) {
     switch ($75|0) {
     case -1:  {
      label = 31;
      break L31;
      break;
     }
     case 93:  {
      label = 32;
      break L33;
      break;
     }
     case 13: case 10:  {
      break L33;
      break;
     }
     default: {
     }
     }
     $156 = HEAP32[$1>>2]|0;
     $157 = ((($156)) + 4|0);
     $158 = HEAP32[$157>>2]|0;
     $159 = (($158) + 1)|0;
     $160 = ((($156)) + 8|0);
     $161 = HEAP32[$160>>2]|0;
     $162 = ($159>>>0)>($161>>>0);
     if ($162) {
      $163 = ($161>>>0)>(2147483645);
      if ($163) {
       label = 67;
       break L31;
      }
      $164 = $161 << 1;
      $165 = ($164|0)==(-2);
      $166 = HEAP32[$61>>2]|0;
      if ($165) {
       $$lcssa = $166;
       label = 69;
       break L31;
      }
      $167 = HEAP32[$156>>2]|0;
      $168 = (_luaM_realloc_($166,$167,$161,$164)|0);
      HEAP32[$156>>2] = $168;
      HEAP32[$160>>2] = $164;
      $$pre$i15 = HEAP32[$157>>2]|0;
      $171 = $$pre$i15;$173 = $168;
     } else {
      $$pre1$i13 = HEAP32[$156>>2]|0;
      $171 = $158;$173 = $$pre1$i13;
     }
     $169 = $75&255;
     $170 = (($171) + 1)|0;
     HEAP32[$157>>2] = $170;
     $172 = (($173) + ($171)|0);
     HEAP8[$172>>0] = $169;
     $174 = HEAP32[$21>>2]|0;
     $175 = HEAP32[$174>>2]|0;
     $176 = (($175) + -1)|0;
     HEAP32[$174>>2] = $176;
     $177 = ($175|0)==(0);
     if ($177) {
      $183 = (_luaZ_fill($174)|0);
      $184 = $183;
     } else {
      $178 = ((($174)) + 4|0);
      $179 = HEAP32[$178>>2]|0;
      $180 = ((($179)) + 1|0);
      HEAP32[$178>>2] = $180;
      $181 = HEAP8[$179>>0]|0;
      $182 = $181&255;
      $184 = $182;
     }
     HEAP32[$ls>>2] = $184;
     $75 = $184;
    }
   }
  } while(0);
  if ((label|0) == 32) {
   label = 0;
   $78 = (_skip_sep($ls)|0);
   $79 = ($78|0)==($sep|0);
   $80 = HEAP32[$ls>>2]|0;
   if ($79) {
    $$lcssa58 = $80;
    label = 33;
    break;
   } else {
    $$ph = $80;
    continue;
   }
  }
  $110 = HEAP32[$1>>2]|0;
  $111 = ((($110)) + 4|0);
  $112 = HEAP32[$111>>2]|0;
  $113 = (($112) + 1)|0;
  $114 = ((($110)) + 8|0);
  $115 = HEAP32[$114>>2]|0;
  $116 = ($113>>>0)>($115>>>0);
  if ($116) {
   $117 = ($115>>>0)>(2147483645);
   if ($117) {
    label = 47;
    break;
   }
   $118 = $115 << 1;
   $119 = ($118|0)==(-2);
   $120 = HEAP32[$61>>2]|0;
   if ($119) {
    $$lcssa57 = $120;
    label = 49;
    break;
   }
   $121 = HEAP32[$110>>2]|0;
   $122 = (_luaM_realloc_($120,$121,$115,$118)|0);
   HEAP32[$110>>2] = $122;
   HEAP32[$114>>2] = $118;
   $$pre$i9 = HEAP32[$111>>2]|0;
   $124 = $$pre$i9;$126 = $122;
  } else {
   $$pre1$i7 = HEAP32[$110>>2]|0;
   $124 = $112;$126 = $$pre1$i7;
  }
  $123 = (($124) + 1)|0;
  HEAP32[$111>>2] = $123;
  $125 = (($126) + ($124)|0);
  HEAP8[$125>>0] = 10;
  $127 = HEAP32[$ls>>2]|0;
  $128 = HEAP32[$21>>2]|0;
  $129 = HEAP32[$128>>2]|0;
  $130 = (($129) + -1)|0;
  HEAP32[$128>>2] = $130;
  $131 = ($129|0)==(0);
  if ($131) {
   $137 = (_luaZ_fill($128)|0);
   $138 = $137;
  } else {
   $132 = ((($128)) + 4|0);
   $133 = HEAP32[$132>>2]|0;
   $134 = ((($133)) + 1|0);
   HEAP32[$132>>2] = $134;
   $135 = HEAP8[$133>>0]|0;
   $136 = $135&255;
   $138 = $136;
  }
  HEAP32[$ls>>2] = $138;
  switch ($138|0) {
  case 13: case 10:  {
   $139 = ($138|0)==($127|0);
   if ($139) {
    $$pr24 = $127;
   } else {
    $140 = HEAP32[$21>>2]|0;
    $141 = HEAP32[$140>>2]|0;
    $142 = (($141) + -1)|0;
    HEAP32[$140>>2] = $142;
    $143 = ($141|0)==(0);
    if ($143) {
     $149 = (_luaZ_fill($140)|0);
     $150 = $149;
    } else {
     $144 = ((($140)) + 4|0);
     $145 = HEAP32[$144>>2]|0;
     $146 = ((($145)) + 1|0);
     HEAP32[$144>>2] = $146;
     $147 = HEAP8[$145>>0]|0;
     $148 = $147&255;
     $150 = $148;
    }
    HEAP32[$ls>>2] = $150;
    $$pr24 = $150;
   }
   break;
  }
  default: {
   $$pr24 = $138;
  }
  }
  $151 = HEAP32[$62>>2]|0;
  $152 = (($151) + 1)|0;
  HEAP32[$62>>2] = $152;
  $153 = ($151|0)>(2147483643);
  if ($153) {
   label = 61;
   break;
  }
  if (!($60)) {
   $$ph = $$pr24;
   continue;
  }
  $154 = HEAP32[$1>>2]|0;
  $155 = ((($154)) + 4|0);
  HEAP32[$155>>2] = 0;
  $$ph = $$pr24;
 }
 if ((label|0) == 31) {
  $76 = ($seminfo|0)!=(0|0);
  $77 = $76 ? 8569 : 8592;
  _lexerror($ls,$77,286);
  // unreachable;
 }
 else if ((label|0) == 33) {
  $81 = HEAP32[$1>>2]|0;
  $82 = ((($81)) + 4|0);
  $83 = HEAP32[$82>>2]|0;
  $84 = (($83) + 1)|0;
  $85 = ((($81)) + 8|0);
  $86 = HEAP32[$85>>2]|0;
  $87 = ($84>>>0)>($86>>>0);
  do {
   if ($87) {
    $88 = ($86>>>0)>(2147483645);
    if ($88) {
     _lexerror($ls,8421,0);
     // unreachable;
    }
    $89 = $86 << 1;
    $90 = ($89|0)==(-2);
    $91 = HEAP32[$61>>2]|0;
    if ($90) {
     _luaM_toobig($91);
     // unreachable;
    } else {
     $92 = HEAP32[$81>>2]|0;
     $93 = (_luaM_realloc_($91,$92,$86,$89)|0);
     HEAP32[$81>>2] = $93;
     HEAP32[$85>>2] = $89;
     $$pre$i4 = HEAP32[$82>>2]|0;
     $96 = $$pre$i4;$98 = $93;
     break;
    }
   } else {
    $$pre1$i2 = HEAP32[$81>>2]|0;
    $96 = $83;$98 = $$pre1$i2;
   }
  } while(0);
  $94 = $$lcssa58&255;
  $95 = (($96) + 1)|0;
  HEAP32[$82>>2] = $95;
  $97 = (($98) + ($96)|0);
  HEAP8[$97>>0] = $94;
  $99 = HEAP32[$21>>2]|0;
  $100 = HEAP32[$99>>2]|0;
  $101 = (($100) + -1)|0;
  HEAP32[$99>>2] = $101;
  $102 = ($100|0)==(0);
  if ($102) {
   $108 = (_luaZ_fill($99)|0);
   $109 = $108;
  } else {
   $103 = ((($99)) + 4|0);
   $104 = HEAP32[$103>>2]|0;
   $105 = ((($104)) + 1|0);
   HEAP32[$103>>2] = $105;
   $106 = HEAP8[$104>>0]|0;
   $107 = $106&255;
   $109 = $107;
  }
  HEAP32[$ls>>2] = $109;
  if ($60) {
   return;
  }
  $185 = HEAP32[$1>>2]|0;
  $186 = HEAP32[$185>>2]|0;
  $187 = (($sep) + 2)|0;
  $188 = (($186) + ($187)|0);
  $189 = ((($185)) + 4|0);
  $190 = HEAP32[$189>>2]|0;
  $191 = $187 << 1;
  $192 = (($190) - ($191))|0;
  $193 = HEAP32[$61>>2]|0;
  $194 = (_luaS_newlstr($193,$188,$192)|0);
  $195 = ((($193)) + 8|0);
  $196 = HEAP32[$195>>2]|0;
  $197 = ((($196)) + 16|0);
  HEAP32[$195>>2] = $197;
  HEAP32[$196>>2] = $194;
  $198 = ((($194)) + 4|0);
  $199 = HEAP8[$198>>0]|0;
  $200 = $199&255;
  $201 = $200 | 64;
  $202 = ((($196)) + 8|0);
  HEAP32[$202>>2] = $201;
  $203 = ((($ls)) + 48|0);
  $204 = HEAP32[$203>>2]|0;
  $205 = ((($204)) + 4|0);
  $206 = HEAP32[$205>>2]|0;
  $207 = HEAP32[$195>>2]|0;
  $208 = ((($207)) + -16|0);
  $209 = (_luaH_set($193,$206,$208)|0);
  $210 = ((($209)) + 8|0);
  $211 = HEAP32[$210>>2]|0;
  $212 = ($211|0)==(0);
  if ($212) {
   HEAP32[$209>>2] = 1;
   HEAP32[$210>>2] = 1;
   $213 = ((($193)) + 12|0);
   $214 = HEAP32[$213>>2]|0;
   $215 = ((($214)) + 12|0);
   $216 = HEAP32[$215>>2]|0;
   $217 = ($216|0)>(0);
   if ($217) {
    _luaC_step($193);
   }
  }
  $218 = HEAP32[$195>>2]|0;
  $219 = ((($218)) + -16|0);
  HEAP32[$195>>2] = $219;
  HEAP32[$seminfo>>2] = $194;
  return;
 }
 else if ((label|0) == 47) {
  _lexerror($ls,8421,0);
  // unreachable;
 }
 else if ((label|0) == 49) {
  _luaM_toobig($$lcssa57);
  // unreachable;
 }
 else if ((label|0) == 61) {
  _luaX_syntaxerror($ls,8366);
  // unreachable;
 }
 else if ((label|0) == 67) {
  _lexerror($ls,8421,0);
  // unreachable;
 }
 else if ((label|0) == 69) {
  _luaM_toobig($$lcssa);
  // unreachable;
 }
}
function _escerror($ls,$c,$n,$msg) {
 $ls = $ls|0;
 $c = $c|0;
 $n = $n|0;
 $msg = $msg|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $i$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($ls)) + 60|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 4|0);
 HEAP32[$2>>2] = 0;
 _save($ls,92);
 $3 = ($n|0)>(0);
 L1: do {
  if ($3) {
   $i$01 = 0;
   while(1) {
    $4 = (($c) + ($i$01<<2)|0);
    $5 = HEAP32[$4>>2]|0;
    $6 = ($5|0)==(-1);
    if ($6) {
     break L1;
    }
    _save($ls,$5);
    $7 = (($i$01) + 1)|0;
    $8 = ($7|0)<($n|0);
    if ($8) {
     $i$01 = $7;
    } else {
     break;
    }
   }
  }
 } while(0);
 _lexerror($ls,$msg,289);
 // unreachable;
}
function _save($ls,$c) {
 $ls = $ls|0;
 $c = $c|0;
 var $$pre = 0, $$pre1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($ls)) + 60|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + 1)|0;
 $5 = ((($1)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($4>>>0)>($6>>>0);
 if (!($7)) {
  $$pre1 = HEAP32[$1>>2]|0;
  $17 = $3;$19 = $$pre1;
  $15 = $c&255;
  $16 = (($17) + 1)|0;
  HEAP32[$2>>2] = $16;
  $18 = (($19) + ($17)|0);
  HEAP8[$18>>0] = $15;
  return;
 }
 $8 = ($6>>>0)>(2147483645);
 if ($8) {
  _lexerror($ls,8421,0);
  // unreachable;
 }
 $9 = $6 << 1;
 $10 = ($9|0)==(-2);
 $11 = ((($ls)) + 52|0);
 $12 = HEAP32[$11>>2]|0;
 if ($10) {
  _luaM_toobig($12);
  // unreachable;
 }
 $13 = HEAP32[$1>>2]|0;
 $14 = (_luaM_realloc_($12,$13,$6,$9)|0);
 HEAP32[$1>>2] = $14;
 HEAP32[$5>>2] = $9;
 $$pre = HEAP32[$2>>2]|0;
 $17 = $$pre;$19 = $14;
 $15 = $c&255;
 $16 = (($17) + 1)|0;
 HEAP32[$2>>2] = $16;
 $18 = (($19) + ($17)|0);
 HEAP8[$18>>0] = $15;
 return;
}
function _luaopen_base($L) {
 $L = $L|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _lua_rawgeti($L,-1001000,2);
 _lua_rawgeti($L,-1001000,2);
 _lua_setfield($L,-2,8791);
 _luaL_setfuncs($L,440,0);
 (_lua_pushlstring($L,8794,7)|0);
 _lua_setfield($L,-2,8802);
 return 1;
}
function _luaB_assert($L) {
 $L = $L|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = (_lua_toboolean($L,1)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $2 = (_luaL_optlstring($L,2,9337,0)|0);
  HEAP32[$vararg_buffer>>2] = $2;
  $3 = (_luaL_error($L,10575,$vararg_buffer)|0);
  $$0 = $3;
  STACKTOP = sp;return ($$0|0);
 } else {
  $4 = (_lua_gettop($L)|0);
  $$0 = $4;
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function _luaB_collectgarbage($L) {
 $L = $L|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_luaL_checkoption($L,1,9244,632)|0);
 $1 = (680 + ($0<<2)|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (_luaL_optinteger($L,2,0)|0);
 $4 = (_lua_gc($L,$2,$3)|0);
 switch ($2|0) {
 case 3:  {
  $5 = (_lua_gc($L,4,0)|0);
  $6 = (+($4|0));
  $7 = (+($5|0));
  $8 = $7 * 9.765625E-4;
  $9 = $6 + $8;
  _lua_pushnumber($L,$9);
  _lua_pushinteger($L,$5);
  $$0 = 2;
  return ($$0|0);
  break;
 }
 case 9: case 5:  {
  _lua_pushboolean($L,$4);
  $$0 = 1;
  return ($$0|0);
  break;
 }
 default: {
  _lua_pushinteger($L,$4);
  $$0 = 1;
  return ($$0|0);
 }
 }
 return (0)|0;
}
function _luaB_dofile($L) {
 $L = $L|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_luaL_optlstring($L,1,0,0)|0);
 _lua_settop($L,1);
 $1 = (_luaL_loadfilex($L,$0,0)|0);
 $2 = ($1|0)==(0);
 if ($2) {
  _lua_callk($L,0,-1,0,178);
  $3 = (_lua_gettop($L)|0);
  $4 = (($3) + -1)|0;
  return ($4|0);
 } else {
  (_lua_error($L)|0);
  // unreachable;
 }
 return (0)|0;
}
function _luaB_error($L) {
 $L = $L|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_luaL_optinteger($L,2,1)|0);
 _lua_settop($L,1);
 $1 = (_lua_isstring($L,1)|0);
 $2 = ($1|0)!=(0);
 $3 = ($0|0)>(0);
 $or$cond = $3 & $2;
 if (!($or$cond)) {
  (_lua_error($L)|0);
  // unreachable;
 }
 _luaL_where($L,$0);
 _lua_pushvalue($L,1);
 _lua_concat($L,2);
 (_lua_error($L)|0);
 // unreachable;
 return (0)|0;
}
function _luaB_getmetatable($L) {
 $L = $L|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _luaL_checkany($L,1);
 $0 = (_lua_getmetatable($L,1)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  _lua_pushnil($L);
  return 1;
 } else {
  (_luaL_getmetafield($L,1,9018)|0);
  return 1;
 }
 return (0)|0;
}
function _luaB_ipairs($L) {
 $L = $L|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _pairsmeta($L,9235,1,179);
 return 3;
}
function _luaB_loadfile($L) {
 $L = $L|0;
 var $$0$i = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_luaL_optlstring($L,1,0,0)|0);
 $1 = (_luaL_optlstring($L,2,0,0)|0);
 $2 = (_lua_type($L,3)|0);
 $3 = ($2|0)!=(-1);
 $4 = $3 ? 3 : 0;
 $5 = (_luaL_loadfilex($L,$0,$1)|0);
 $6 = ($5|0)==(0);
 if (!($6)) {
  _lua_pushnil($L);
  _lua_insert($L,-2);
  $$0$i = 2;
  return ($$0$i|0);
 }
 if (!($3)) {
  $$0$i = 1;
  return ($$0$i|0);
 }
 _lua_pushvalue($L,$4);
 $7 = (_lua_setupvalue($L,-2,1)|0);
 $8 = ($7|0)==(0|0);
 if (!($8)) {
  $$0$i = 1;
  return ($$0$i|0);
 }
 _lua_settop($L,-2);
 $$0$i = 1;
 return ($$0$i|0);
}
function _luaB_load($L) {
 $L = $L|0;
 var $$0$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $l = 0, $status$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $l = sp;
 $0 = (_lua_tolstring($L,1,$l)|0);
 $1 = (_luaL_optlstring($L,3,9161,0)|0);
 $2 = (_lua_type($L,4)|0);
 $3 = ($2|0)!=(-1);
 $4 = $3 ? 4 : 0;
 $5 = ($0|0)==(0|0);
 if ($5) {
  $9 = (_luaL_optlstring($L,2,9164,0)|0);
  _luaL_checktype($L,1,6);
  _lua_settop($L,5);
  $10 = (_lua_load($L,180,0,$9,$1)|0);
  $status$0 = $10;
 } else {
  $6 = (_luaL_optlstring($L,2,$0,0)|0);
  $7 = HEAP32[$l>>2]|0;
  $8 = (_luaL_loadbufferx($L,$0,$7,$6,$1)|0);
  $status$0 = $8;
 }
 $11 = ($status$0|0)==(0);
 if (!($11)) {
  _lua_pushnil($L);
  _lua_insert($L,-2);
  $$0$i = 2;
  STACKTOP = sp;return ($$0$i|0);
 }
 if (!($3)) {
  $$0$i = 1;
  STACKTOP = sp;return ($$0$i|0);
 }
 _lua_pushvalue($L,$4);
 $12 = (_lua_setupvalue($L,-2,1)|0);
 $13 = ($12|0)==(0|0);
 if (!($13)) {
  $$0$i = 1;
  STACKTOP = sp;return ($$0$i|0);
 }
 _lua_settop($L,-2);
 $$0$i = 1;
 STACKTOP = sp;return ($$0$i|0);
}
function _luaB_next($L) {
 $L = $L|0;
 var $$0 = 0, $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _luaL_checktype($L,1,5);
 _lua_settop($L,2);
 $0 = (_lua_next($L,1)|0);
 $1 = ($0|0)==(0);
 if (!($1)) {
  $$0 = 2;
  return ($$0|0);
 }
 _lua_pushnil($L);
 $$0 = 1;
 return ($$0|0);
}
function _luaB_pairs($L) {
 $L = $L|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _pairsmeta($L,9153,0,9);
 return 3;
}
function _luaB_pcall($L) {
 $L = $L|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _luaL_checkany($L,1);
 _lua_pushnil($L);
 _lua_insert($L,1);
 $0 = (_lua_gettop($L)|0);
 $1 = (($0) + -2)|0;
 $2 = (_lua_pcallk($L,$1,-1,0,0,181)|0);
 $3 = ($2|0)==(0);
 $4 = $3&1;
 $5 = (_finishpcall($L,$4)|0);
 return ($5|0);
}
function _luaB_print($L) {
 $L = $L|0;
 var $$0 = 0, $$pre = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $i$04 = 0, $l = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $l = sp + 4|0;
 $0 = (_lua_gettop($L)|0);
 _lua_getglobal($L,8947);
 $1 = ($0|0)<(1);
 $$pre = HEAP32[2148>>2]|0;
 L1: do {
  if (!($1)) {
   $i$04 = 1;
   while(1) {
    _lua_pushvalue($L,-1);
    _lua_pushvalue($L,$i$04);
    _lua_callk($L,1,1,0,0);
    $2 = (_lua_tolstring($L,-1,$l)|0);
    $3 = ($2|0)==(0|0);
    if ($3) {
     break;
    }
    $5 = ($i$04|0)>(1);
    if ($5) {
     (_fputc(9,$$pre)|0);
    }
    $6 = HEAP32[$l>>2]|0;
    (_fwrite($2,1,$6,$$pre)|0);
    _lua_settop($L,-2);
    $7 = (($i$04) + 1)|0;
    $8 = ($i$04|0)<($0|0);
    if ($8) {
     $i$04 = $7;
    } else {
     break L1;
    }
   }
   $4 = (_luaL_error($L,9110,$vararg_buffer)|0);
   $$0 = $4;
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 (_fputc(10,$$pre)|0);
 (_fflush($$pre)|0);
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _luaB_rawequal($L) {
 $L = $L|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _luaL_checkany($L,1);
 _luaL_checkany($L,2);
 $0 = (_lua_rawequal($L,1,2)|0);
 _lua_pushboolean($L,$0);
 return 1;
}
function _luaB_rawlen($L) {
 $L = $L|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_lua_type($L,1)|0);
 $1 = $0 & -2;
 $2 = ($1|0)==(4);
 if (!($2)) {
  (_luaL_argerror($L,1,9085)|0);
 }
 $3 = (_lua_rawlen($L,1)|0);
 _lua_pushinteger($L,$3);
 return 1;
}
function _luaB_rawget($L) {
 $L = $L|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _luaL_checktype($L,1,5);
 _luaL_checkany($L,2);
 _lua_settop($L,2);
 _lua_rawget($L,1);
 return 1;
}
function _luaB_rawset($L) {
 $L = $L|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _luaL_checktype($L,1,5);
 _luaL_checkany($L,2);
 _luaL_checkany($L,3);
 _lua_settop($L,3);
 _lua_rawset($L,1);
 return 1;
}
function _luaB_select($L) {
 $L = $L|0;
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_lua_gettop($L)|0);
 $1 = (_lua_type($L,1)|0);
 $2 = ($1|0)==(4);
 if ($2) {
  $3 = (_lua_tolstring($L,1,0)|0);
  $4 = HEAP8[$3>>0]|0;
  $5 = ($4<<24>>24)==(35);
  if ($5) {
   $6 = (($0) + -1)|0;
   _lua_pushinteger($L,$6);
   $$0 = 1;
   return ($$0|0);
  }
 }
 $7 = (_luaL_checkinteger($L,1)|0);
 $8 = ($7|0)<(0);
 $9 = (($7) + ($0))|0;
 $10 = ($7|0)>($0|0);
 $$ = $10 ? $0 : $7;
 $i$0 = $8 ? $9 : $$;
 $11 = ($i$0|0)>(0);
 if (!($11)) {
  (_luaL_argerror($L,1,9066)|0);
 }
 $12 = (($0) - ($i$0))|0;
 $$0 = $12;
 return ($$0|0);
}
function _luaB_setmetatable($L) {
 $L = $L|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = (_lua_type($L,2)|0);
 _luaL_checktype($L,1,5);
 switch ($0|0) {
 case 0: case 5:  {
  break;
 }
 default: {
  (_luaL_argerror($L,2,9849)|0);
 }
 }
 $1 = (_luaL_getmetafield($L,1,9018)|0);
 $2 = ($1|0)==(0);
 if ($2) {
  _lua_settop($L,2);
  (_lua_setmetatable($L,1)|0);
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 } else {
  $3 = (_luaL_error($L,9030,$vararg_buffer)|0);
  $$0 = $3;
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function _luaB_tonumber($L) {
 $L = $L|0;
 var $$off = 0, $$sum = 0, $$sum2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0.0, $2 = 0.0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0.0, $41 = 0.0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $isdigit = 0, $isdigittmp = 0, $isnum = 0, $l = 0, $n1$0 = 0.0, $n1$1 = 0.0, $neg$0 = 0, $s$0 = 0, $s$1 = 0, $s$2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $isnum = sp + 4|0;
 $l = sp;
 $0 = (_lua_type($L,2)|0);
 $1 = ($0|0)<(1);
 do {
  if ($1) {
   $2 = (+_lua_tonumberx($L,1,$isnum));
   $3 = HEAP32[$isnum>>2]|0;
   $4 = ($3|0)==(0);
   if ($4) {
    _luaL_checkany($L,1);
    break;
   }
   _lua_pushnumber($L,$2);
   STACKTOP = sp;return 1;
  } else {
   $5 = (_luaL_checklstring($L,1,$l)|0);
   $6 = HEAP32[$l>>2]|0;
   $7 = (($5) + ($6)|0);
   $8 = (_luaL_checkinteger($L,2)|0);
   $$off = (($8) + -2)|0;
   $9 = ($$off>>>0)<(35);
   if (!($9)) {
    (_luaL_argerror($L,2,8993)|0);
   }
   $10 = (_strspn($5,9011)|0);
   $11 = (($5) + ($10)|0);
   $12 = HEAP8[$11>>0]|0;
   switch ($12<<24>>24) {
   case 45:  {
    $$sum2 = (($10) + 1)|0;
    $13 = (($5) + ($$sum2)|0);
    $neg$0 = 1;$s$0 = $13;
    break;
   }
   case 43:  {
    $$sum = (($10) + 1)|0;
    $14 = (($5) + ($$sum)|0);
    $neg$0 = 0;$s$0 = $14;
    break;
   }
   default: {
    $neg$0 = 0;$s$0 = $11;
   }
   }
   $15 = HEAP8[$s$0>>0]|0;
   $16 = $15&255;
   $17 = (_isalnum($16)|0);
   $18 = ($17|0)==(0);
   if (!($18)) {
    $19 = (+($8|0));
    $n1$0 = 0.0;$s$1 = $s$0;
    while(1) {
     $20 = HEAP8[$s$1>>0]|0;
     $21 = $20&255;
     $isdigittmp = (($21) + -48)|0;
     $isdigit = ($isdigittmp>>>0)<(10);
     if ($isdigit) {
      $22 = $20 << 24 >> 24;
      $23 = (($22) + -48)|0;
      $27 = $23;
     } else {
      $24 = (_toupper($21)|0);
      $25 = (($24) + -55)|0;
      $27 = $25;
     }
     $26 = ($27|0)<($8|0);
     if (!($26)) {
      $n1$1 = $n1$0;$s$2 = $s$1;
      break;
     }
     $28 = $19 * $n1$0;
     $29 = (+($27|0));
     $30 = $28 + $29;
     $31 = ((($s$1)) + 1|0);
     $32 = HEAP8[$31>>0]|0;
     $33 = $32&255;
     $34 = (_isalnum($33)|0);
     $35 = ($34|0)==(0);
     if ($35) {
      $n1$1 = $30;$s$2 = $31;
      break;
     } else {
      $n1$0 = $30;$s$1 = $31;
     }
    }
    $36 = (_strspn($s$2,9011)|0);
    $37 = (($s$2) + ($36)|0);
    $38 = ($37|0)==($7|0);
    if ($38) {
     $39 = ($neg$0|0)!=(0);
     $40 = -$n1$1;
     $41 = $39 ? $40 : $n1$1;
     _lua_pushnumber($L,$41);
     STACKTOP = sp;return 1;
    }
   }
  }
 } while(0);
 _lua_pushnil($L);
 STACKTOP = sp;return 1;
}
function _luaB_tostring($L) {
 $L = $L|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _luaL_checkany($L,1);
 (_luaL_tolstring($L,1,0)|0);
 return 1;
}
function _luaB_type($L) {
 $L = $L|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _luaL_checkany($L,1);
 $0 = (_lua_type($L,1)|0);
 $1 = (_lua_typename($L,$0)|0);
 (_lua_pushstring($L,$1)|0);
 return 1;
}
function _luaB_xpcall($L) {
 $L = $L|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_lua_gettop($L)|0);
 $1 = ($0|0)>(1);
 if (!($1)) {
  (_luaL_argerror($L,2,8963)|0);
 }
 _lua_pushvalue($L,1);
 _lua_copy($L,2,1);
 _lua_replace($L,2);
 $2 = (($0) + -2)|0;
 $3 = (_lua_pcallk($L,$2,-1,1,0,181)|0);
 $4 = ($3|0)==(0);
 $5 = $4&1;
 $6 = (_finishpcall($L,$5)|0);
 return ($6|0);
}
function _pcallcont($L) {
 $L = $L|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_lua_getctx($L,0)|0);
 $1 = ($0|0)==(1);
 $2 = $1&1;
 $3 = (_finishpcall($L,$2)|0);
 return ($3|0);
}
function _finishpcall($L,$status) {
 $L = $L|0;
 $status = $status|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_lua_checkstack($L,1)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  _lua_settop($L,0);
  _lua_pushboolean($L,0);
  (_lua_pushstring($L,8978)|0);
  $$0 = 2;
  return ($$0|0);
 } else {
  _lua_pushboolean($L,$status);
  _lua_replace($L,1);
  $2 = (_lua_gettop($L)|0);
  $$0 = $2;
  return ($$0|0);
 }
 return (0)|0;
}
function _pairsmeta($L,$method,$iszero,$iter) {
 $L = $L|0;
 $method = $method|0;
 $iszero = $iszero|0;
 $iter = $iter|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_luaL_getmetafield($L,1,$method)|0);
 $1 = ($0|0)==(0);
 if (!($1)) {
  _lua_pushvalue($L,1);
  _lua_callk($L,1,3,0,0);
  return;
 }
 _luaL_checktype($L,1,5);
 _lua_pushcclosure($L,$iter,0);
 _lua_pushvalue($L,1);
 $2 = ($iszero|0)==(0);
 if ($2) {
  _lua_pushnil($L);
  return;
 } else {
  _lua_pushinteger($L,0);
  return;
 }
}
function _generic_reader($L,$ud,$size) {
 $L = $L|0;
 $ud = $ud|0;
 $size = $size|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 _luaL_checkstack($L,2,9172);
 _lua_pushvalue($L,1);
 _lua_callk($L,0,1,0,0);
 $0 = (_lua_type($L,-1)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  _lua_settop($L,-2);
  HEAP32[$size>>2] = 0;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $2 = (_lua_isstring($L,-1)|0);
 $3 = ($2|0)==(0);
 if ($3) {
  (_luaL_error($L,9198,$vararg_buffer)|0);
 }
 _lua_replace($L,5);
 $4 = (_lua_tolstring($L,5,$size)|0);
 $$0 = $4;
 STACKTOP = sp;return ($$0|0);
}
function _ipairsaux($L) {
 $L = $L|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_luaL_checkinteger($L,2)|0);
 _luaL_checktype($L,1,5);
 $1 = (($0) + 1)|0;
 _lua_pushinteger($L,$1);
 _lua_rawgeti($L,1,$1);
 $2 = (_lua_type($L,-1)|0);
 $3 = ($2|0)==(0);
 $4 = $3 ? 1 : 2;
 return ($4|0);
}
function _dofilecont($L) {
 $L = $L|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_lua_gettop($L)|0);
 $1 = (($0) + -1)|0;
 return ($1|0);
}
function _luaopen_bit32($L) {
 $L = $L|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _lua_createtable($L,0,12);
 _luaL_setfuncs($L,724,0);
 return 1;
}
function _b_arshift($L) {
 $L = $L|0;
 var $$ = 0, $$0$i = 0, $$1$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $r$0 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_luaL_checkunsigned($L,1)|0);
 $1 = (_luaL_checkinteger($L,2)|0);
 $2 = ($1|0)>(-1);
 $3 = ($0|0)<(0);
 $or$cond = $3 & $2;
 if ($or$cond) {
  $10 = ($1|0)>(31);
  if ($10) {
   $r$0 = -1;
  } else {
   $11 = $0 >>> $1;
   $12 = -1 >>> $1;
   $13 = $12 ^ -1;
   $14 = $11 | $13;
   $r$0 = $14;
  }
  _lua_pushunsigned($L,$r$0);
  return 1;
 }
 $4 = ($1|0)>(0);
 if ($4) {
  $5 = ($1|0)>(31);
  $6 = $0 >>> $1;
  $$ = $5 ? 0 : $6;
  $$1$i = $$;
 } else {
  $7 = (0 - ($1))|0;
  $8 = ($1|0)<(-31);
  $9 = $0 << $7;
  $$0$i = $8 ? 0 : $9;
  $$1$i = $$0$i;
 }
 _lua_pushunsigned($L,$$1$i);
 return 1;
}
function _b_and($L) {
 $L = $L|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $exitcond$i = 0, $i$01$i = 0, $r$0$lcssa$i = 0, $r$02$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_lua_gettop($L)|0);
 $1 = ($0|0)<(1);
 if ($1) {
  $r$0$lcssa$i = -1;
 } else {
  $i$01$i = 1;$r$02$i = -1;
  while(1) {
   $2 = (_luaL_checkunsigned($L,$i$01$i)|0);
   $3 = $2 & $r$02$i;
   $4 = (($i$01$i) + 1)|0;
   $exitcond$i = ($i$01$i|0)==($0|0);
   if ($exitcond$i) {
    $r$0$lcssa$i = $3;
    break;
   } else {
    $i$01$i = $4;$r$02$i = $3;
   }
  }
 }
 _lua_pushunsigned($L,$r$0$lcssa$i);
 return 1;
}
function _b_not($L) {
 $L = $L|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_luaL_checkunsigned($L,1)|0);
 $1 = $0 ^ -1;
 _lua_pushunsigned($L,$1);
 return 1;
}
function _b_or($L) {
 $L = $L|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $exitcond = 0, $i$01 = 0, $r$0$lcssa = 0, $r$02 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_lua_gettop($L)|0);
 $1 = ($0|0)<(1);
 if ($1) {
  $r$0$lcssa = 0;
 } else {
  $i$01 = 1;$r$02 = 0;
  while(1) {
   $2 = (_luaL_checkunsigned($L,$i$01)|0);
   $3 = $2 | $r$02;
   $4 = (($i$01) + 1)|0;
   $exitcond = ($i$01|0)==($0|0);
   if ($exitcond) {
    $r$0$lcssa = $3;
    break;
   } else {
    $i$01 = $4;$r$02 = $3;
   }
  }
 }
 _lua_pushunsigned($L,$r$0$lcssa);
 return 1;
}
function _b_xor($L) {
 $L = $L|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $exitcond = 0, $i$01 = 0, $r$0$lcssa = 0, $r$02 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_lua_gettop($L)|0);
 $1 = ($0|0)<(1);
 if ($1) {
  $r$0$lcssa = 0;
 } else {
  $i$01 = 1;$r$02 = 0;
  while(1) {
   $2 = (_luaL_checkunsigned($L,$i$01)|0);
   $3 = $2 ^ $r$02;
   $4 = (($i$01) + 1)|0;
   $exitcond = ($i$01|0)==($0|0);
   if ($exitcond) {
    $r$0$lcssa = $3;
    break;
   } else {
    $i$01 = $4;$r$02 = $3;
   }
  }
 }
 _lua_pushunsigned($L,$r$0$lcssa);
 return 1;
}
function _b_test($L) {
 $L = $L|0;
 var $$lcssa = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $exitcond$i = 0, $i$01$i = 0, $phitmp = 0, $r$0$lcssa$i = 0, $r$02$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_lua_gettop($L)|0);
 $1 = ($0|0)<(1);
 if ($1) {
  $r$0$lcssa$i = 1;
 } else {
  $i$01$i = 1;$r$02$i = -1;
  while(1) {
   $2 = (_luaL_checkunsigned($L,$i$01$i)|0);
   $3 = $2 & $r$02$i;
   $4 = (($i$01$i) + 1)|0;
   $exitcond$i = ($i$01$i|0)==($0|0);
   if ($exitcond$i) {
    $$lcssa = $3;
    break;
   } else {
    $i$01$i = $4;$r$02$i = $3;
   }
  }
  $phitmp = ($$lcssa|0)!=(0);
  $r$0$lcssa$i = $phitmp;
 }
 $5 = $r$0$lcssa$i&1;
 _lua_pushboolean($L,$5);
 return 1;
}
function _b_extract($L) {
 $L = $L|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = (_luaL_checkunsigned($L,1)|0);
 $1 = (_luaL_checkinteger($L,2)|0);
 $2 = (_luaL_optinteger($L,3,1)|0);
 $3 = ($1|0)>(-1);
 if (!($3)) {
  (_luaL_argerror($L,2,9434)|0);
 }
 $4 = ($2|0)>(0);
 if (!($4)) {
  (_luaL_argerror($L,3,9459)|0);
 }
 $5 = (($2) + ($1))|0;
 $6 = ($5|0)>(32);
 if ($6) {
  (_luaL_error($L,9482,$vararg_buffer)|0);
 }
 $7 = $0 >>> $1;
 $8 = (($2) + -1)|0;
 $9 = -2 << $8;
 $10 = $9 ^ -1;
 $11 = $7 & $10;
 _lua_pushunsigned($L,$11);
 STACKTOP = sp;return 1;
}
function _b_lrot($L) {
 $L = $L|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_luaL_checkinteger($L,2)|0);
 $1 = (_luaL_checkunsigned($L,1)|0);
 $2 = $0 & 31;
 $3 = $1 << $2;
 $4 = (32 - ($2))|0;
 $5 = $1 >>> $4;
 $6 = $5 | $3;
 _lua_pushunsigned($L,$6);
 return 1;
}
function _b_lshift($L) {
 $L = $L|0;
 var $$0$i = 0, $$1$i = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_luaL_checkunsigned($L,1)|0);
 $1 = (_luaL_checkinteger($L,2)|0);
 $2 = ($1|0)<(0);
 if ($2) {
  $3 = ($1|0)<(-31);
  if ($3) {
   $$1$i = 0;
  } else {
   $4 = (0 - ($1))|0;
   $5 = $0 >>> $4;
   $$1$i = $5;
  }
 } else {
  $6 = ($1|0)>(31);
  $7 = $0 << $1;
  $$0$i = $6 ? 0 : $7;
  $$1$i = $$0$i;
 }
 _lua_pushunsigned($L,$$1$i);
 return 1;
}
function _b_replace($L) {
 $L = $L|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = (_luaL_checkunsigned($L,1)|0);
 $1 = (_luaL_checkunsigned($L,2)|0);
 $2 = (_luaL_checkinteger($L,3)|0);
 $3 = (_luaL_optinteger($L,4,1)|0);
 $4 = ($2|0)>(-1);
 if (!($4)) {
  (_luaL_argerror($L,3,9434)|0);
 }
 $5 = ($3|0)>(0);
 if (!($5)) {
  (_luaL_argerror($L,4,9459)|0);
 }
 $6 = (($3) + ($2))|0;
 $7 = ($6|0)>(32);
 if ($7) {
  (_luaL_error($L,9482,$vararg_buffer)|0);
 }
 $8 = (($3) + -1)|0;
 $9 = -2 << $8;
 $10 = $9 ^ -1;
 $11 = $1 & $10;
 $12 = $10 << $2;
 $13 = $12 ^ -1;
 $14 = $0 & $13;
 $15 = $11 << $2;
 $16 = $14 | $15;
 _lua_pushunsigned($L,$16);
 STACKTOP = sp;return 1;
}
function _b_rrot($L) {
 $L = $L|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_luaL_checkinteger($L,2)|0);
 $1 = (0 - ($0))|0;
 $2 = (_luaL_checkunsigned($L,1)|0);
 $3 = $1 & 31;
 $4 = $2 << $3;
 $5 = (32 - ($3))|0;
 $6 = $2 >>> $5;
 $7 = $6 | $4;
 _lua_pushunsigned($L,$7);
 return 1;
}
function _b_rshift($L) {
 $L = $L|0;
 var $$ = 0, $$0$i = 0, $$1$i = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_luaL_checkunsigned($L,1)|0);
 $1 = (_luaL_checkinteger($L,2)|0);
 $2 = ($1|0)>(0);
 if ($2) {
  $3 = ($1|0)>(31);
  $4 = $0 >>> $1;
  $$ = $3 ? 0 : $4;
  $$1$i = $$;
  _lua_pushunsigned($L,$$1$i);
  return 1;
 } else {
  $5 = (0 - ($1))|0;
  $6 = ($1|0)<(-31);
  $7 = $0 << $5;
  $$0$i = $6 ? 0 : $7;
  $$1$i = $$0$i;
  _lua_pushunsigned($L,$$1$i);
  return 1;
 }
 return (0)|0;
}
function _luaopen_coroutine($L) {
 $L = $L|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _lua_createtable($L,0,6);
 _luaL_setfuncs($L,828,0);
 return 1;
}
function _luaB_cocreate($L) {
 $L = $L|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _luaL_checktype($L,1,6);
 $0 = (_lua_newthread($L)|0);
 _lua_pushvalue($L,1);
 _lua_xmove($L,$0,1);
 return 1;
}
function _luaB_coresume($L) {
 $L = $L|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_lua_tothread($L,1)|0);
 $1 = ($0|0)==(0|0);
 if ($1) {
  (_luaL_argerror($L,1,9642)|0);
 }
 $2 = (_lua_gettop($L)|0);
 $3 = (($2) + -1)|0;
 $4 = (_auxresume($L,$0,$3)|0);
 $5 = ($4|0)<(0);
 if ($5) {
  _lua_pushboolean($L,0);
  _lua_insert($L,-2);
  $$0 = 2;
  return ($$0|0);
 } else {
  _lua_pushboolean($L,1);
  $6 = (($4) + 1)|0;
  $7 = $4 ^ -1;
  _lua_insert($L,$7);
  $$0 = $6;
  return ($$0|0);
 }
 return (0)|0;
}
function _luaB_corunning($L) {
 $L = $L|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_lua_pushthread($L)|0);
 _lua_pushboolean($L,$0);
 return 2;
}
function _luaB_costatus($L) {
 $L = $L|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $ar = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ar = sp;
 $0 = (_lua_tothread($L,1)|0);
 $1 = ($0|0)==(0|0);
 if ($1) {
  (_luaL_argerror($L,1,9642)|0);
 }
 $2 = ($0|0)==($L|0);
 if ($2) {
  (_lua_pushlstring($L,9531,7)|0);
  STACKTOP = sp;return 1;
 }
 $3 = (_lua_status($0)|0);
 switch ($3|0) {
 case 1:  {
  (_lua_pushlstring($L,9661,9)|0);
  STACKTOP = sp;return 1;
  break;
 }
 case 0:  {
  $4 = (_lua_getstack($0,0,$ar)|0);
  $5 = ($4|0)>(0);
  do {
   if ($5) {
    (_lua_pushlstring($L,9671,6)|0);
   } else {
    $6 = (_lua_gettop($0)|0);
    $7 = ($6|0)==(0);
    if ($7) {
     (_lua_pushlstring($L,9678,4)|0);
     break;
    } else {
     (_lua_pushlstring($L,9661,9)|0);
     break;
    }
   }
  } while(0);
  STACKTOP = sp;return 1;
  break;
 }
 default: {
  (_lua_pushlstring($L,9678,4)|0);
  STACKTOP = sp;return 1;
 }
 }
 return (0)|0;
}
function _luaB_cowrap($L) {
 $L = $L|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _luaL_checktype($L,1,6);
 $0 = (_lua_newthread($L)|0);
 _lua_pushvalue($L,1);
 _lua_xmove($L,$0,1);
 _lua_pushcclosure($L,182,1);
 return 1;
}
function _luaB_yield($L) {
 $L = $L|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_lua_gettop($L)|0);
 $1 = (_lua_yieldk($L,$0,0,0)|0);
 return ($1|0);
}
function _luaB_auxwrap($L) {
 $L = $L|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_lua_tothread($L,-1001001)|0);
 $1 = (_lua_gettop($L)|0);
 $2 = (_auxresume($L,$0,$1)|0);
 $3 = ($2|0)<(0);
 if (!($3)) {
  return ($2|0);
 }
 $4 = (_lua_isstring($L,-1)|0);
 $5 = ($4|0)==(0);
 if ($5) {
  (_lua_error($L)|0);
  // unreachable;
 }
 _luaL_where($L,1);
 _lua_insert($L,-2);
 _lua_concat($L,2);
 (_lua_error($L)|0);
 // unreachable;
 return (0)|0;
}
function _auxresume($L,$co,$narg) {
 $L = $L|0;
 $co = $co|0;
 $narg = $narg|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_lua_checkstack($co,$narg)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  (_lua_pushlstring($L,9557,28)|0);
  $$0 = -1;
  return ($$0|0);
 }
 $2 = (_lua_status($co)|0);
 $3 = ($2|0)==(0);
 if ($3) {
  $4 = (_lua_gettop($co)|0);
  $5 = ($4|0)==(0);
  if ($5) {
   (_lua_pushlstring($L,9586,28)|0);
   $$0 = -1;
   return ($$0|0);
  }
 }
 _lua_xmove($L,$co,$narg);
 $6 = (_lua_resume($co,$L,$narg)|0);
 $7 = ($6>>>0)<(2);
 if (!($7)) {
  _lua_xmove($co,$L,1);
  $$0 = -1;
  return ($$0|0);
 }
 $8 = (_lua_gettop($co)|0);
 $9 = (($8) + 1)|0;
 $10 = (_lua_checkstack($L,$9)|0);
 $11 = ($10|0)==(0);
 if ($11) {
  $12 = $8 ^ -1;
  _lua_settop($co,$12);
  (_lua_pushlstring($L,9615,26)|0);
  $$0 = -1;
  return ($$0|0);
 } else {
  _lua_xmove($co,$L,$8);
  $$0 = $8;
  return ($$0|0);
 }
 return (0)|0;
}
function _luaopen_debug($L) {
 $L = $L|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _lua_createtable($L,0,16);
 _luaL_setfuncs($L,884,0);
 return 1;
}
function _db_debug($L) {
 $L = $L|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $buffer = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $buffer = sp + 4|0;
 $0 = HEAP32[2140>>2]|0;
 (_fwrite(10201,11,1,$0)|0);
 (_fflush($0)|0);
 $1 = HEAP32[2144>>2]|0;
 $2 = (_fgets($buffer,250,$1)|0);
 $3 = ($2|0)==(0|0);
 if ($3) {
  STACKTOP = sp;return 0;
 }
 while(1) {
  $4 = (_strcmp($buffer,10213)|0);
  $5 = ($4|0)==(0);
  if ($5) {
   label = 7;
   break;
  }
  $6 = (_strlen($buffer)|0);
  $7 = (_luaL_loadbufferx($L,$buffer,$6,10219,0)|0);
  $8 = ($7|0)==(0);
  if ($8) {
   $9 = (_lua_pcallk($L,0,0,0,0,0)|0);
   $10 = ($9|0)==(0);
   if (!($10)) {
    label = 5;
   }
  } else {
   label = 5;
  }
  if ((label|0) == 5) {
   label = 0;
   $11 = (_lua_tolstring($L,-1,0)|0);
   HEAP32[$vararg_buffer>>2] = $11;
   (_fprintf($0,10236,$vararg_buffer)|0);
   (_fflush($0)|0);
  }
  _lua_settop($L,0);
  (_fwrite(10201,11,1,$0)|0);
  (_fflush($0)|0);
  $12 = (_fgets($buffer,250,$1)|0);
  $13 = ($12|0)==(0|0);
  if ($13) {
   label = 7;
   break;
  }
 }
 if ((label|0) == 7) {
  STACKTOP = sp;return 0;
 }
 return (0)|0;
}
function _db_getuservalue($L) {
 $L = $L|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_lua_type($L,1)|0);
 $1 = ($0|0)==(7);
 if ($1) {
  _lua_getuservalue($L,1);
  return 1;
 } else {
  _lua_pushnil($L);
  return 1;
 }
 return (0)|0;
}
function _db_gethook($L) {
 $L = $L|0;
 var $$0$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $buff = 0, $i$0$i = 0, $i$1$i = 0, $i$2$i = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $buff = sp;
 $0 = (_lua_type($L,1)|0);
 $1 = ($0|0)==(8);
 if ($1) {
  $2 = (_lua_tothread($L,1)|0);
  $$0$i = $2;
 } else {
  $$0$i = $L;
 }
 $3 = (_lua_gethookmask($$0$i)|0);
 $4 = (_lua_gethook($$0$i)|0);
 $5 = ($4|0)!=(0|0);
 $6 = ($4|0)!=(183|0);
 $or$cond = $5 & $6;
 if ($or$cond) {
  (_lua_pushlstring($L,10187,13)|0);
 } else {
  (_luaL_getsubtable($L,-1001000,9890)|0);
  (_lua_pushthread($$0$i)|0);
  _lua_xmove($$0$i,$L,1);
  _lua_rawget($L,-2);
  _lua_remove($L,-2);
 }
 $7 = $3 & 1;
 $8 = ($7|0)==(0);
 if ($8) {
  $i$0$i = 0;
 } else {
  HEAP8[$buff>>0] = 99;
  $i$0$i = 1;
 }
 $9 = $3 & 2;
 $10 = ($9|0)==(0);
 if ($10) {
  $i$1$i = $i$0$i;
 } else {
  $11 = (($i$0$i) + 1)|0;
  $12 = (($buff) + ($i$0$i)|0);
  HEAP8[$12>>0] = 114;
  $i$1$i = $11;
 }
 $13 = $3 & 4;
 $14 = ($13|0)==(0);
 if ($14) {
  $i$2$i = $i$1$i;
 } else {
  $15 = (($i$1$i) + 1)|0;
  $16 = (($buff) + ($i$1$i)|0);
  HEAP8[$16>>0] = 108;
  $i$2$i = $15;
 }
 $17 = (($buff) + ($i$2$i)|0);
 HEAP8[$17>>0] = 0;
 (_lua_pushstring($L,$buff)|0);
 $18 = (_lua_gethookcount($$0$i)|0);
 _lua_pushinteger($L,$18);
 STACKTOP = sp;return 3;
}
function _db_getinfo($L) {
 $L = $L|0;
 var $$0 = 0, $$0$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $7 = 0, $8 = 0, $9 = 0, $ar = 0, $options$0 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $ar = sp + 4|0;
 $0 = (_lua_type($L,1)|0);
 $1 = ($0|0)==(8);
 if ($1) {
  $2 = (_lua_tothread($L,1)|0);
  $$0$i = $2;$4 = 1;
 } else {
  $$0$i = $L;$4 = 0;
 }
 $3 = $4 | 2;
 $5 = (_luaL_optlstring($L,$3,10023,0)|0);
 $6 = (($4) + 1)|0;
 $7 = (_lua_isnumber($L,$6)|0);
 $8 = ($7|0)==(0);
 do {
  if ($8) {
   $12 = (_lua_type($L,$6)|0);
   $13 = ($12|0)==(6);
   if ($13) {
    HEAP32[$vararg_buffer>>2] = $5;
    (_lua_pushfstring($L,10030,$vararg_buffer)|0);
    $14 = (_lua_tolstring($L,-1,0)|0);
    _lua_pushvalue($L,$6);
    _lua_xmove($L,$$0$i,1);
    $options$0 = $14;
    break;
   }
   $15 = (_luaL_argerror($L,$6,10034)|0);
   $$0 = $15;
   STACKTOP = sp;return ($$0|0);
  } else {
   $9 = (_lua_tointegerx($L,$6,0)|0);
   $10 = (_lua_getstack($$0$i,$9,$ar)|0);
   $11 = ($10|0)==(0);
   if ($11) {
    _lua_pushnil($L);
    $$0 = 1;
    STACKTOP = sp;return ($$0|0);
   } else {
    $options$0 = $5;
   }
  }
 } while(0);
 $16 = (_lua_getinfo($$0$i,$options$0,$ar)|0);
 $17 = ($16|0)==(0);
 if ($17) {
  $18 = (_luaL_argerror($L,$3,10501)|0);
  $$0 = $18;
  STACKTOP = sp;return ($$0|0);
 }
 _lua_createtable($L,0,2);
 $19 = (_strchr($options$0,83)|0);
 $20 = ($19|0)==(0|0);
 if (!($20)) {
  $21 = ((($ar)) + 16|0);
  $22 = HEAP32[$21>>2]|0;
  (_lua_pushstring($L,$22)|0);
  _lua_setfield($L,-2,10061);
  $23 = ((($ar)) + 36|0);
  (_lua_pushstring($L,$23)|0);
  _lua_setfield($L,-2,10068);
  $24 = ((($ar)) + 24|0);
  $25 = HEAP32[$24>>2]|0;
  _lua_pushinteger($L,$25);
  _lua_setfield($L,-2,10078);
  $26 = ((($ar)) + 28|0);
  $27 = HEAP32[$26>>2]|0;
  _lua_pushinteger($L,$27);
  _lua_setfield($L,-2,10090);
  $28 = ((($ar)) + 12|0);
  $29 = HEAP32[$28>>2]|0;
  (_lua_pushstring($L,$29)|0);
  _lua_setfield($L,-2,10106);
 }
 $30 = (_strchr($options$0,108)|0);
 $31 = ($30|0)==(0|0);
 if (!($31)) {
  $32 = ((($ar)) + 20|0);
  $33 = HEAP32[$32>>2]|0;
  _lua_pushinteger($L,$33);
  _lua_setfield($L,-2,10111);
 }
 $34 = (_strchr($options$0,117)|0);
 $35 = ($34|0)==(0|0);
 if (!($35)) {
  $36 = ((($ar)) + 32|0);
  $37 = HEAP8[$36>>0]|0;
  $38 = $37&255;
  _lua_pushinteger($L,$38);
  _lua_setfield($L,-2,10123);
  $39 = ((($ar)) + 33|0);
  $40 = HEAP8[$39>>0]|0;
  $41 = $40&255;
  _lua_pushinteger($L,$41);
  _lua_setfield($L,-2,10128);
  $42 = ((($ar)) + 34|0);
  $43 = HEAP8[$42>>0]|0;
  $44 = $43 << 24 >> 24;
  _lua_pushboolean($L,$44);
  _lua_setfield($L,-2,10136);
 }
 $45 = (_strchr($options$0,110)|0);
 $46 = ($45|0)==(0|0);
 if (!($46)) {
  $47 = ((($ar)) + 4|0);
  $48 = HEAP32[$47>>2]|0;
  (_lua_pushstring($L,$48)|0);
  _lua_setfield($L,-2,10145);
  $49 = ((($ar)) + 8|0);
  $50 = HEAP32[$49>>2]|0;
  (_lua_pushstring($L,$50)|0);
  _lua_setfield($L,-2,10150);
 }
 $51 = (_strchr($options$0,116)|0);
 $52 = ($51|0)==(0|0);
 if (!($52)) {
  $53 = ((($ar)) + 35|0);
  $54 = HEAP8[$53>>0]|0;
  $55 = $54 << 24 >> 24;
  _lua_pushboolean($L,$55);
  _lua_setfield($L,-2,10159);
 }
 $56 = (_strchr($options$0,76)|0);
 $57 = ($56|0)==(0|0);
 if (!($57)) {
  $58 = ($$0$i|0)==($L|0);
  if ($58) {
   _lua_pushvalue($L,-2);
   _lua_remove($L,-3);
  } else {
   _lua_xmove($$0$i,$L,1);
  }
  _lua_setfield($L,-2,10170);
 }
 $59 = (_strchr($options$0,102)|0);
 $60 = ($59|0)==(0|0);
 if ($60) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $61 = ($$0$i|0)==($L|0);
 if ($61) {
  _lua_pushvalue($L,-2);
  _lua_remove($L,-3);
 } else {
  _lua_xmove($$0$i,$L,1);
 }
 _lua_setfield($L,-2,10182);
 $$0 = 1;
 STACKTOP = sp;return ($$0|0);
}
function _db_getlocal($L) {
 $L = $L|0;
 var $$0 = 0, $$0$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ar = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ar = sp;
 $0 = (_lua_type($L,1)|0);
 $1 = ($0|0)==(8);
 if ($1) {
  $2 = (_lua_tothread($L,1)|0);
  $$0$i = $2;$4 = 1;
 } else {
  $$0$i = $L;$4 = 0;
 }
 $3 = $4 | 2;
 $5 = (_luaL_checkinteger($L,$3)|0);
 $6 = (($4) + 1)|0;
 $7 = (_lua_type($L,$6)|0);
 $8 = ($7|0)==(6);
 if ($8) {
  _lua_pushvalue($L,$6);
  $9 = (_lua_getlocal($L,0,$5)|0);
  (_lua_pushstring($L,$9)|0);
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $10 = (_luaL_checkinteger($L,$6)|0);
 $11 = (_lua_getstack($$0$i,$10,$ar)|0);
 $12 = ($11|0)==(0);
 if ($12) {
  $13 = (_luaL_argerror($L,$6,9871)|0);
  $$0 = $13;
  STACKTOP = sp;return ($$0|0);
 }
 $14 = (_lua_getlocal($$0$i,$ar,$5)|0);
 $15 = ($14|0)==(0|0);
 if ($15) {
  _lua_pushnil($L);
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 } else {
  _lua_xmove($$0$i,$L,1);
  (_lua_pushstring($L,$14)|0);
  _lua_pushvalue($L,-2);
  $$0 = 2;
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function _db_getregistry($L) {
 $L = $L|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _lua_pushvalue($L,-1001000);
 return 1;
}
function _db_getmetatable($L) {
 $L = $L|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _luaL_checkany($L,1);
 $0 = (_lua_getmetatable($L,1)|0);
 $1 = ($0|0)==(0);
 if (!($1)) {
  return 1;
 }
 _lua_pushnil($L);
 return 1;
}
function _db_getupvalue($L) {
 $L = $L|0;
 var $$0$i = 0, $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_luaL_checkinteger($L,2)|0);
 _luaL_checktype($L,1,6);
 $1 = (_lua_getupvalue($L,1,$0)|0);
 $2 = ($1|0)==(0|0);
 if ($2) {
  $$0$i = 0;
  return ($$0$i|0);
 }
 (_lua_pushstring($L,$1)|0);
 _lua_insert($L,-2);
 $$0$i = 2;
 return ($$0$i|0);
}
function _db_upvaluejoin($L) {
 $L = $L|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ar$i = 0, $ar$i1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ar$i1 = sp + 100|0;
 $ar$i = sp;
 $0 = (_luaL_checkinteger($L,2)|0);
 _luaL_checktype($L,1,6);
 _lua_pushvalue($L,1);
 (_lua_getinfo($L,9976,$ar$i)|0);
 $1 = ($0|0)>(0);
 if ($1) {
  $2 = ((($ar$i)) + 32|0);
  $3 = HEAP8[$2>>0]|0;
  $4 = $3&255;
  $5 = ($0|0)>($4|0);
  if ($5) {
   label = 3;
  }
 } else {
  label = 3;
 }
 if ((label|0) == 3) {
  (_luaL_argerror($L,2,9979)|0);
 }
 $6 = (_luaL_checkinteger($L,4)|0);
 _luaL_checktype($L,3,6);
 _lua_pushvalue($L,3);
 (_lua_getinfo($L,9976,$ar$i1)|0);
 $7 = ($6|0)>(0);
 if ($7) {
  $8 = ((($ar$i1)) + 32|0);
  $9 = HEAP8[$8>>0]|0;
  $10 = $9&255;
  $11 = ($6|0)>($10|0);
  if ($11) {
   label = 6;
  }
 } else {
  label = 6;
 }
 if ((label|0) == 6) {
  (_luaL_argerror($L,4,9979)|0);
 }
 $12 = (_lua_iscfunction($L,1)|0);
 $13 = ($12|0)==(0);
 if (!($13)) {
  (_luaL_argerror($L,1,10001)|0);
 }
 $14 = (_lua_iscfunction($L,3)|0);
 $15 = ($14|0)==(0);
 if ($15) {
  _lua_upvaluejoin($L,1,$0,3,$6);
  STACKTOP = sp;return 0;
 }
 (_luaL_argerror($L,3,10001)|0);
 _lua_upvaluejoin($L,1,$0,3,$6);
 STACKTOP = sp;return 0;
}
function _db_upvalueid($L) {
 $L = $L|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $ar$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ar$i = sp;
 $0 = (_luaL_checkinteger($L,2)|0);
 _luaL_checktype($L,1,6);
 _lua_pushvalue($L,1);
 (_lua_getinfo($L,9976,$ar$i)|0);
 $1 = ($0|0)>(0);
 if ($1) {
  $2 = ((($ar$i)) + 32|0);
  $3 = HEAP8[$2>>0]|0;
  $4 = $3&255;
  $5 = ($0|0)>($4|0);
  if ($5) {
   label = 3;
  }
 } else {
  label = 3;
 }
 if ((label|0) == 3) {
  (_luaL_argerror($L,2,9979)|0);
 }
 $6 = (_lua_upvalueid($L,1,$0)|0);
 _lua_pushlightuserdata($L,$6);
 STACKTOP = sp;return 1;
}
function _db_setuservalue($L) {
 $L = $L|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_lua_type($L,1)|0);
 $1 = ($0|0)==(2);
 if ($1) {
  (_luaL_argerror($L,1,9933)|0);
 }
 _luaL_checktype($L,1,7);
 $2 = (_lua_type($L,2)|0);
 $3 = ($2|0)<(1);
 if (!($3)) {
  _luaL_checktype($L,2,5);
 }
 _lua_settop($L,2);
 _lua_setuservalue($L,1);
 return 1;
}
function _db_sethook($L) {
 $L = $L|0;
 var $$$i = 0, $$0$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $count$0 = 0, $func$0 = 0, $mask$0 = 0, $mask$1$$i = 0, $mask$1$i = 0, $mask$3$i = 0, $not$$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_lua_type($L,1)|0);
 $1 = ($0|0)==(8);
 if ($1) {
  $2 = (_lua_tothread($L,1)|0);
  $$0$i = $2;$4 = 1;
 } else {
  $$0$i = $L;$4 = 0;
 }
 $3 = (($4) + 1)|0;
 $5 = (_lua_type($L,$3)|0);
 $6 = ($5|0)<(1);
 if ($6) {
  _lua_settop($L,$3);
  $count$0 = 0;$func$0 = 0;$mask$0 = 0;
 } else {
  $7 = $4 | 2;
  $8 = (_luaL_checklstring($L,$7,0)|0);
  _luaL_checktype($L,$3,6);
  $9 = (($4) + 3)|0;
  $10 = (_luaL_optinteger($L,$9,0)|0);
  $11 = (_strchr($8,99)|0);
  $not$$i = ($11|0)!=(0|0);
  $$$i = $not$$i&1;
  $12 = (_strchr($8,114)|0);
  $13 = ($12|0)==(0|0);
  $14 = $$$i | 2;
  $mask$1$i = $13 ? $$$i : $14;
  $15 = (_strchr($8,108)|0);
  $16 = ($15|0)==(0|0);
  $17 = $mask$1$i | 4;
  $mask$1$$i = $16 ? $mask$1$i : $17;
  $18 = ($10|0)>(0);
  $19 = $mask$1$$i | 8;
  $mask$3$i = $18 ? $19 : $mask$1$$i;
  $count$0 = $10;$func$0 = 183;$mask$0 = $mask$3$i;
 }
 $20 = (_luaL_getsubtable($L,-1001000,9890)|0);
 $21 = ($20|0)==(0);
 if (!($21)) {
  (_lua_pushthread($$0$i)|0);
  _lua_xmove($$0$i,$L,1);
  _lua_pushvalue($L,$3);
  _lua_rawset($L,-3);
  (_lua_sethook($$0$i,$func$0,$mask$0,$count$0)|0);
  return 0;
 }
 (_lua_pushstring($L,9896)|0);
 _lua_setfield($L,-2,9898);
 _lua_pushvalue($L,-1);
 (_lua_setmetatable($L,-2)|0);
 (_lua_pushthread($$0$i)|0);
 _lua_xmove($$0$i,$L,1);
 _lua_pushvalue($L,$3);
 _lua_rawset($L,-3);
 (_lua_sethook($$0$i,$func$0,$mask$0,$count$0)|0);
 return 0;
}
function _db_setlocal($L) {
 $L = $L|0;
 var $$0 = 0, $$0$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ar = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ar = sp;
 $0 = (_lua_type($L,1)|0);
 $1 = ($0|0)==(8);
 if ($1) {
  $2 = (_lua_tothread($L,1)|0);
  $$0$i = $2;$4 = 1;
 } else {
  $$0$i = $L;$4 = 0;
 }
 $3 = (($4) + 1)|0;
 $5 = (_luaL_checkinteger($L,$3)|0);
 $6 = (_lua_getstack($$0$i,$5,$ar)|0);
 $7 = ($6|0)==(0);
 if ($7) {
  $8 = (_luaL_argerror($L,$3,9871)|0);
  $$0 = $8;
  STACKTOP = sp;return ($$0|0);
 } else {
  $9 = (($4) + 3)|0;
  _luaL_checkany($L,$9);
  _lua_settop($L,$9);
  _lua_xmove($L,$$0$i,1);
  $10 = $4 | 2;
  $11 = (_luaL_checkinteger($L,$10)|0);
  $12 = (_lua_setlocal($$0$i,$ar,$11)|0);
  (_lua_pushstring($L,$12)|0);
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function _db_setmetatable($L) {
 $L = $L|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_lua_type($L,2)|0);
 switch ($0|0) {
 case 0: case 5:  {
  break;
 }
 default: {
  (_luaL_argerror($L,2,9849)|0);
 }
 }
 _lua_settop($L,2);
 (_lua_setmetatable($L,1)|0);
 return 1;
}
function _db_setupvalue($L) {
 $L = $L|0;
 var $$0$i = 0, $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _luaL_checkany($L,3);
 $0 = (_luaL_checkinteger($L,2)|0);
 _luaL_checktype($L,1,6);
 $1 = (_lua_setupvalue($L,1,$0)|0);
 $2 = ($1|0)==(0|0);
 if ($2) {
  $$0$i = 0;
  return ($$0$i|0);
 }
 (_lua_pushstring($L,$1)|0);
 _lua_insert($L,-1);
 $$0$i = 1;
 return ($$0$i|0);
}
function _db_traceback($L) {
 $L = $L|0;
 var $$0$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_lua_type($L,1)|0);
 $1 = ($0|0)==(8);
 if ($1) {
  $2 = (_lua_tothread($L,1)|0);
  $$0$i = $2;$4 = 1;
 } else {
  $$0$i = $L;$4 = 0;
 }
 $3 = (($4) + 1)|0;
 $5 = (_lua_tolstring($L,$3,0)|0);
 $6 = ($5|0)==(0|0);
 if ($6) {
  $7 = (_lua_type($L,$3)|0);
  $8 = ($7|0)<(1);
  if (!($8)) {
   _lua_pushvalue($L,$3);
   return 1;
  }
 }
 $9 = $4 | 2;
 $10 = ($$0$i|0)==($L|0);
 $11 = $10&1;
 $12 = (_luaL_optinteger($L,$9,$11)|0);
 _luaL_traceback($L,$$0$i,$5,$12);
 return 1;
}
function _hookf($L,$ar) {
 $L = $L|0;
 $ar = $ar|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 (_luaL_getsubtable($L,-1001000,9890)|0);
 (_lua_pushthread($L)|0);
 _lua_rawget($L,-2);
 $0 = (_lua_type($L,-1)|0);
 $1 = ($0|0)==(6);
 if (!($1)) {
  return;
 }
 $2 = HEAP32[$ar>>2]|0;
 $3 = (1020 + ($2<<2)|0);
 $4 = HEAP32[$3>>2]|0;
 (_lua_pushstring($L,$4)|0);
 $5 = ((($ar)) + 20|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)>(-1);
 if ($7) {
  _lua_pushinteger($L,$6);
 } else {
  _lua_pushnil($L);
 }
 _lua_callk($L,2,0,0,0);
 return;
}
function _luaopen_io($L) {
 $L = $L|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _lua_createtable($L,0,11);
 _luaL_setfuncs($L,1040,0);
 (_luaL_newmetatable($L,10240)|0);
 _lua_pushvalue($L,-1);
 _lua_setfield($L,-2,12953);
 _luaL_setfuncs($L,1136,0);
 _lua_settop($L,-2);
 $0 = HEAP32[536]|0;
 $1 = (_lua_newuserdata($L,8)|0);
 $2 = ((($1)) + 4|0);
 HEAP32[$2>>2] = 0;
 _luaL_setmetatable($L,10240);
 HEAP32[$1>>2] = $0;
 HEAP32[$2>>2] = 184;
 _lua_pushvalue($L,-1);
 _lua_setfield($L,-1001000,10246);
 _lua_setfield($L,-2,10256);
 $3 = HEAP32[537]|0;
 $4 = (_lua_newuserdata($L,8)|0);
 $5 = ((($4)) + 4|0);
 HEAP32[$5>>2] = 0;
 _luaL_setmetatable($L,10240);
 HEAP32[$4>>2] = $3;
 HEAP32[$5>>2] = 184;
 _lua_pushvalue($L,-1);
 _lua_setfield($L,-1001000,10262);
 _lua_setfield($L,-2,10273);
 $6 = HEAP32[535]|0;
 $7 = (_lua_newuserdata($L,8)|0);
 $8 = ((($7)) + 4|0);
 HEAP32[$8>>2] = 0;
 _luaL_setmetatable($L,10240);
 HEAP32[$7>>2] = $6;
 HEAP32[$8>>2] = 184;
 _lua_setfield($L,-2,10280);
 return 1;
}
function _io_noclose($L) {
 $L = $L|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_luaL_checkudata($L,1,10240)|0);
 $1 = ((($0)) + 4|0);
 HEAP32[$1>>2] = 184;
 _lua_pushnil($L);
 (_lua_pushlstring($L,10287,26)|0);
 return 2;
}
function _io_close($L) {
 $L = $L|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = (_lua_type($L,1)|0);
 $1 = ($0|0)==(-1);
 if ($1) {
  _lua_getfield($L,-1001000,10262);
 }
 $2 = (_luaL_checkudata($L,1,10240)|0);
 $3 = ((($2)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if ($5) {
  (_luaL_error($L,10391,$vararg_buffer)|0);
 }
 $6 = (_luaL_checkudata($L,1,10240)|0);
 $7 = ((($6)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 HEAP32[$7>>2] = 0;
 $9 = (FUNCTION_TABLE_ii[$8 & 511]($L)|0);
 STACKTOP = sp;return ($9|0);
}
function _f_flush($L) {
 $L = $L|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = (_luaL_checkudata($L,1,10240)|0);
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  (_luaL_error($L,10391,$vararg_buffer)|0);
 }
 $4 = HEAP32[$0>>2]|0;
 $5 = (_fflush($4)|0);
 $6 = ($5|0)==(0);
 $7 = $6&1;
 $8 = (_luaL_fileresult($L,$7,0)|0);
 STACKTOP = sp;return ($8|0);
}
function _f_lines($L) {
 $L = $L|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = (_luaL_checkudata($L,1,10240)|0);
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  (_luaL_error($L,10391,$vararg_buffer)|0);
 }
 _aux_lines($L,0);
 STACKTOP = sp;return 1;
}
function _f_read($L) {
 $L = $L|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = (_luaL_checkudata($L,1,10240)|0);
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  (_luaL_error($L,10391,$vararg_buffer)|0);
 }
 $4 = HEAP32[$0>>2]|0;
 $5 = (_g_read($L,$4,2)|0);
 STACKTOP = sp;return ($5|0);
}
function _f_seek($L) {
 $L = $L|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0.0, $9 = 0, $vararg_buffer = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = (_luaL_checkudata($L,1,10240)|0);
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  (_luaL_error($L,10391,$vararg_buffer)|0);
 }
 $4 = HEAP32[$0>>2]|0;
 $5 = (_luaL_checkoption($L,2,10439,1244)|0);
 $6 = (+_luaL_optnumber($L,3,0.0));
 $7 = (~~(($6)));
 $8 = (+($7|0));
 $9 = $8 == $6;
 if (!($9)) {
  (_luaL_argerror($L,3,10443)|0);
 }
 $10 = (1260 + ($5<<2)|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (_fseek($4,$7,$11)|0);
 $13 = ($12|0)==(0);
 if ($13) {
  $15 = (_ftell($4)|0);
  $16 = (+($15|0));
  _lua_pushnumber($L,$16);
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 } else {
  $14 = (_luaL_fileresult($L,0,0)|0);
  $$0 = $14;
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function _f_setvbuf($L) {
 $L = $L|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = (_luaL_checkudata($L,1,10240)|0);
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  (_luaL_error($L,10391,$vararg_buffer)|0);
 }
 $4 = HEAP32[$0>>2]|0;
 $5 = (_luaL_checkoption($L,2,0,1216)|0);
 $6 = (_luaL_optinteger($L,3,1024)|0);
 $7 = (1232 + ($5<<2)|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (_setvbuf($4,0,$8,$6)|0);
 $10 = ($9|0)==(0);
 $11 = $10&1;
 $12 = (_luaL_fileresult($L,$11,0)|0);
 STACKTOP = sp;return ($12|0);
}
function _f_write($L) {
 $L = $L|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = (_luaL_checkudata($L,1,10240)|0);
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  (_luaL_error($L,10391,$vararg_buffer)|0);
 }
 $4 = HEAP32[$0>>2]|0;
 _lua_pushvalue($L,1);
 $5 = (_g_write($L,$4,2)|0);
 STACKTOP = sp;return ($5|0);
}
function _f_gc($L) {
 $L = $L|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_luaL_checkudata($L,1,10240)|0);
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  return 0;
 }
 $4 = HEAP32[$0>>2]|0;
 $5 = ($4|0)==(0|0);
 if ($5) {
  return 0;
 }
 $6 = (_luaL_checkudata($L,1,10240)|0);
 $7 = ((($6)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 HEAP32[$7>>2] = 0;
 (FUNCTION_TABLE_ii[$8 & 511]($L)|0);
 return 0;
}
function _f_tostring($L) {
 $L = $L|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = (_luaL_checkudata($L,1,10240)|0);
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  (_lua_pushlstring($L,10367,13)|0);
  STACKTOP = sp;return 1;
 } else {
  $4 = HEAP32[$0>>2]|0;
  HEAP32[$vararg_buffer>>2] = $4;
  (_lua_pushfstring($L,10381,$vararg_buffer)|0);
  STACKTOP = sp;return 1;
 }
 return (0)|0;
}
function _g_write($L,$f,$arg) {
 $L = $L|0;
 $f = $f|0;
 $arg = $arg|0;
 var $$0 = 0, $$012 = 0, $$in = 0, $$sink = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0.0, $8 = 0, $9 = 0, $l = 0, $status$03 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $l = sp + 8|0;
 $0 = (_lua_gettop($L)|0);
 $1 = ($0|0)==($arg|0);
 if ($1) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $2 = (($0) - ($arg))|0;
 $$012 = $arg;$$in = $2;$status$03 = 1;
 while(1) {
  $3 = (($$in) + -1)|0;
  $4 = (_lua_type($L,$$012)|0);
  $5 = ($4|0)==(3);
  if ($5) {
   $6 = ($status$03|0)==(0);
   if ($6) {
    $$sink = 0;
   } else {
    $7 = (+_lua_tonumberx($L,$$012,0));
    HEAPF64[$vararg_buffer>>3] = $7;
    $8 = (_fprintf($f,10420,$vararg_buffer)|0);
    $9 = ($8|0)>(0);
    $$sink = $9;
   }
  } else {
   $10 = (_luaL_checklstring($L,$$012,$l)|0);
   $11 = ($status$03|0)==(0);
   if ($11) {
    $$sink = 0;
   } else {
    $12 = HEAP32[$l>>2]|0;
    $13 = (_fwrite($10,1,$12,$f)|0);
    $14 = HEAP32[$l>>2]|0;
    $15 = ($13|0)==($14|0);
    $$sink = $15;
   }
  }
  $16 = $$sink&1;
  $17 = (($$012) + 1)|0;
  $18 = ($3|0)==(0);
  if ($18) {
   break;
  } else {
   $$012 = $17;$$in = $3;$status$03 = $16;
  }
 }
 if ($$sink) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $19 = (_luaL_fileresult($L,0,0)|0);
 $$0 = $19;
 STACKTOP = sp;return ($$0|0);
}
function _g_read($L,$f,$first) {
 $L = $L|0;
 $f = $f|0;
 $first = $first|0;
 var $$0 = 0, $$0$i = 0, $$rlen$0$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0.0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $b$i = 0, $b$i1 = 0, $d$i = 0, $n$04 = 0, $n$04$lcssa = 0, $n$1 = 0, $rlen$01$i = 0, $success$1 = 0, $success$2 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 2096|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp + 8|0;
 $b$i1 = sp + 1056|0;
 $d$i = sp;
 $b$i = sp + 16|0;
 $0 = (_lua_gettop($L)|0);
 _clearerr($f);
 $1 = ($0|0)==(1);
 L1: do {
  if ($1) {
   $2 = (_read_line($L,$f,1)|0);
   $3 = (($first) + 1)|0;
   $n$1 = $3;$success$2 = $2;
  } else {
   $4 = (($0) + 19)|0;
   _luaL_checkstack($L,$4,10482);
   $5 = (($0) + -2)|0;
   $6 = ((($b$i)) + 8|0);
   $7 = ((($b$i1)) + 8|0);
   $48 = $5;$n$04 = $first;
   L4: while(1) {
    $8 = (_lua_type($L,$n$04)|0);
    $9 = ($8|0)==(3);
    L6: do {
     if ($9) {
      $10 = (_lua_tointegerx($L,$n$04,0)|0);
      $11 = ($10|0)==(0);
      if ($11) {
       $12 = (_getc($f)|0);
       (_ungetc($12,$f)|0);
       (_lua_pushlstring($L,0,0)|0);
       $13 = ($12|0)!=(-1);
       $14 = $13&1;
       $success$1 = $14;
       break;
      } else {
       _luaL_buffinit($L,$b$i);
       $15 = (_luaL_prepbuffsize($b$i,$10)|0);
       $16 = (_fread($15,1,$10,$f)|0);
       $17 = HEAP32[$6>>2]|0;
       $18 = (($17) + ($16))|0;
       HEAP32[$6>>2] = $18;
       _luaL_pushresult($b$i);
       $19 = ($16|0)!=(0);
       $20 = $19&1;
       $success$1 = $20;
       break;
      }
     } else {
      $21 = (_lua_tolstring($L,$n$04,0)|0);
      $22 = ($21|0)==(0|0);
      if ($22) {
       label = 10;
      } else {
       $23 = HEAP8[$21>>0]|0;
       $24 = ($23<<24>>24)==(42);
       if (!($24)) {
        label = 10;
       }
      }
      if ((label|0) == 10) {
       label = 0;
       (_luaL_argerror($L,$n$04,10501)|0);
      }
      $25 = ((($21)) + 1|0);
      $26 = HEAP8[$25>>0]|0;
      $27 = $26 << 24 >> 24;
      switch ($27|0) {
      case 110:  {
       HEAP32[$vararg_buffer>>2] = $d$i;
       $28 = (_fscanf($f,10516,$vararg_buffer)|0);
       $29 = ($28|0)==(1);
       if ($29) {
        $30 = +HEAPF64[$d$i>>3];
        _lua_pushnumber($L,$30);
        $$0$i = 1;
       } else {
        _lua_pushnil($L);
        $$0$i = 0;
       }
       $success$1 = $$0$i;
       break L6;
       break;
      }
      case 108:  {
       $31 = (_read_line($L,$f,1)|0);
       $success$1 = $31;
       break L6;
       break;
      }
      case 76:  {
       $32 = (_read_line($L,$f,0)|0);
       $success$1 = $32;
       break L6;
       break;
      }
      case 97:  {
       _luaL_buffinit($L,$b$i1);
       $33 = (_luaL_prepbuffsize($b$i1,1024)|0);
       $34 = (_fread($33,1,1024,$f)|0);
       $35 = HEAP32[$7>>2]|0;
       $36 = (($35) + ($34))|0;
       HEAP32[$7>>2] = $36;
       $37 = ($34>>>0)<(1024);
       if (!($37)) {
        $rlen$01$i = 1024;
        while(1) {
         $38 = ($rlen$01$i>>>0)<(1073741824);
         $39 = $38&1;
         $$rlen$0$i = $rlen$01$i << $39;
         $40 = (_luaL_prepbuffsize($b$i1,$$rlen$0$i)|0);
         $41 = (_fread($40,1,$$rlen$0$i,$f)|0);
         $42 = HEAP32[$7>>2]|0;
         $43 = (($42) + ($41))|0;
         HEAP32[$7>>2] = $43;
         $44 = ($41>>>0)<($$rlen$0$i>>>0);
         if ($44) {
          break;
         } else {
          $rlen$01$i = $$rlen$0$i;
         }
        }
       }
       _luaL_pushresult($b$i1);
       $success$1 = 1;
       break L6;
       break;
      }
      default: {
       $n$04$lcssa = $n$04;
       break L4;
      }
      }
     }
    } while(0);
    $46 = (($n$04) + 1)|0;
    $47 = (($48) + -1)|0;
    $49 = ($48|0)!=(0);
    $50 = ($success$1|0)!=(0);
    $51 = $50 & $49;
    if ($51) {
     $48 = $47;$n$04 = $46;
    } else {
     $n$1 = $46;$success$2 = $success$1;
     break L1;
    }
   }
   $45 = (_luaL_argerror($L,$n$04$lcssa,10520)|0);
   $$0 = $45;
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 $52 = (_ferror($f)|0);
 $53 = ($52|0)==(0);
 if (!($53)) {
  $54 = (_luaL_fileresult($L,0,0)|0);
  $$0 = $54;
  STACKTOP = sp;return ($$0|0);
 }
 $55 = ($success$2|0)==(0);
 if ($55) {
  _lua_settop($L,-2);
  _lua_pushnil($L);
 }
 $56 = (($n$1) - ($first))|0;
 $$0 = $56;
 STACKTOP = sp;return ($$0|0);
}
function _read_line($L,$f,$chop) {
 $L = $L|0;
 $f = $f|0;
 $chop = $chop|0;
 var $$0 = 0, $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $b = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1040|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $b = sp;
 _luaL_buffinit($L,$b);
 $0 = (_luaL_prepbuffsize($b,1024)|0);
 $1 = (_fgets($0,1024,$f)|0);
 $2 = ($1|0)==(0|0);
 L1: do {
  if (!($2)) {
   $3 = ((($b)) + 8|0);
   $7 = $0;
   while(1) {
    $8 = (_strlen($7)|0);
    $9 = ($8|0)==(0);
    if (!($9)) {
     $10 = (($8) + -1)|0;
     $11 = (($7) + ($10)|0);
     $12 = HEAP8[$11>>0]|0;
     $13 = ($12<<24>>24)==(10);
     if ($13) {
      $$lcssa = $8;
      break;
     }
    }
    $14 = HEAP32[$3>>2]|0;
    $15 = (($14) + ($8))|0;
    HEAP32[$3>>2] = $15;
    $16 = (_luaL_prepbuffsize($b,1024)|0);
    $17 = (_fgets($16,1024,$f)|0);
    $18 = ($17|0)==(0|0);
    if ($18) {
     break L1;
    } else {
     $7 = $16;
    }
   }
   $19 = (($$lcssa) - ($chop))|0;
   $20 = HEAP32[$3>>2]|0;
   $21 = (($19) + ($20))|0;
   HEAP32[$3>>2] = $21;
   _luaL_pushresult($b);
   $$0 = 1;
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 _luaL_pushresult($b);
 $4 = (_lua_rawlen($L,-1)|0);
 $5 = ($4|0)!=(0);
 $6 = $5&1;
 $$0 = $6;
 STACKTOP = sp;return ($$0|0);
}
function _aux_lines($L,$toclose) {
 $L = $L|0;
 $toclose = $toclose|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $exitcond = 0, $i$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_lua_gettop($L)|0);
 $1 = (($0) + -1)|0;
 $2 = ($0|0)<(19);
 if (!($2)) {
  (_luaL_argerror($L,17,10535)|0);
 }
 _lua_pushvalue($L,1);
 _lua_pushinteger($L,$1);
 _lua_pushboolean($L,$toclose);
 $3 = ($0|0)<(2);
 if ($3) {
  $5 = (($0) + 2)|0;
  _lua_pushcclosure($L,185,$5);
  return;
 } else {
  $i$01 = 1;
 }
 while(1) {
  $4 = (($i$01) + 1)|0;
  _lua_pushvalue($L,$4);
  $exitcond = ($4|0)==($0|0);
  if ($exitcond) {
   break;
  } else {
   $i$01 = $4;
  }
 }
 $5 = (($0) + 2)|0;
 _lua_pushcclosure($L,185,$5);
 return;
}
function _io_readline($L) {
 $L = $L|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $i$01 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = (_lua_touserdata($L,-1001001)|0);
 $1 = (_lua_tointegerx($L,-1001002,0)|0);
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0|0);
 if ($4) {
  $5 = (_luaL_error($L,10552,$vararg_buffer)|0);
  $$0 = $5;
  STACKTOP = sp;return ($$0|0);
 }
 _lua_settop($L,1);
 $6 = ($1|0)<(1);
 if (!($6)) {
  $i$01 = 1;
  while(1) {
   $7 = (-1001003 - ($i$01))|0;
   _lua_pushvalue($L,$7);
   $8 = (($i$01) + 1)|0;
   $exitcond = ($i$01|0)==($1|0);
   if ($exitcond) {
    break;
   } else {
    $i$01 = $8;
   }
  }
 }
 $9 = HEAP32[$0>>2]|0;
 $10 = (_g_read($L,$9,2)|0);
 $11 = (0 - ($10))|0;
 $12 = (_lua_type($L,$11)|0);
 $13 = ($12|0)==(0);
 if (!($13)) {
  $$0 = $10;
  STACKTOP = sp;return ($$0|0);
 }
 $14 = ($10|0)>(1);
 if ($14) {
  $15 = (1 - ($10))|0;
  $16 = (_lua_tolstring($L,$15,0)|0);
  HEAP32[$vararg_buffer1>>2] = $16;
  $17 = (_luaL_error($L,10575,$vararg_buffer1)|0);
  $$0 = $17;
  STACKTOP = sp;return ($$0|0);
 }
 $18 = (_lua_toboolean($L,-1001003)|0);
 $19 = ($18|0)==(0);
 if ($19) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 _lua_settop($L,0);
 _lua_pushvalue($L,-1001001);
 $20 = (_luaL_checkudata($L,1,10240)|0);
 $21 = ((($20)) + 4|0);
 $22 = HEAP32[$21>>2]|0;
 HEAP32[$21>>2] = 0;
 (FUNCTION_TABLE_ii[$22 & 511]($L)|0);
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _io_flush($L) {
 $L = $L|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 _lua_getfield($L,-1001000,10262);
 $0 = (_lua_touserdata($L,-1)|0);
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  HEAP32[$vararg_buffer>>2] = (10266);
  (_luaL_error($L,10615,$vararg_buffer)|0);
 }
 $4 = HEAP32[$0>>2]|0;
 $5 = (_fflush($4)|0);
 $6 = ($5|0)==(0);
 $7 = $6&1;
 $8 = (_luaL_fileresult($L,$7,0)|0);
 STACKTOP = sp;return ($8|0);
}
function _io_input($L) {
 $L = $L|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _g_iofile($L,10246,12877);
 return 1;
}
function _io_lines($L) {
 $L = $L|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $toclose$0 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_ptr3 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = (_lua_type($L,1)|0);
 $1 = ($0|0)==(-1);
 if ($1) {
  _lua_pushnil($L);
 }
 $2 = (_lua_type($L,1)|0);
 $3 = ($2|0)==(0);
 if ($3) {
  _lua_getfield($L,-1001000,10246);
  _lua_replace($L,1);
  $4 = (_luaL_checkudata($L,1,10240)|0);
  $5 = ((($4)) + 4|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ($6|0)==(0|0);
  if (!($7)) {
   $toclose$0 = 0;
   _aux_lines($L,$toclose$0);
   STACKTOP = sp;return 1;
  }
  (_luaL_error($L,10391,$vararg_buffer)|0);
  $toclose$0 = 0;
  _aux_lines($L,$toclose$0);
  STACKTOP = sp;return 1;
 } else {
  $8 = (_luaL_checklstring($L,1,0)|0);
  $9 = (_lua_newuserdata($L,8)|0);
  $10 = ((($9)) + 4|0);
  HEAP32[$10>>2] = 0;
  _luaL_setmetatable($L,10240);
  HEAP32[$9>>2] = 0;
  HEAP32[$10>>2] = 186;
  $11 = (_fopen($8,12877)|0);
  HEAP32[$9>>2] = $11;
  $12 = ($11|0)==(0|0);
  if ($12) {
   $13 = (___errno_location()|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = (_strerror($14)|0);
   HEAP32[$vararg_buffer1>>2] = $8;
   $vararg_ptr3 = ((($vararg_buffer1)) + 4|0);
   HEAP32[$vararg_ptr3>>2] = $15;
   (_luaL_error($L,10683,$vararg_buffer1)|0);
  }
  _lua_replace($L,1);
  $toclose$0 = 1;
  _aux_lines($L,$toclose$0);
  STACKTOP = sp;return 1;
 }
 return (0)|0;
}
function _io_open($L) {
 $L = $L|0;
 var $$ = 0, $$1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $md$1 = 0, $memchr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_luaL_checklstring($L,1,0)|0);
 $1 = (_luaL_optlstring($L,2,12877,0)|0);
 $2 = (_lua_newuserdata($L,8)|0);
 $3 = ((($2)) + 4|0);
 HEAP32[$3>>2] = 0;
 _luaL_setmetatable($L,10240);
 HEAP32[$2>>2] = 0;
 HEAP32[$3>>2] = 186;
 $4 = HEAP8[$1>>0]|0;
 $5 = ($4<<24>>24)==(0);
 if ($5) {
  label = 4;
 } else {
  $6 = $4 << 24 >> 24;
  $7 = ((($1)) + 1|0);
  $memchr = (_memchr(18104,$6,4)|0);
  $8 = ($memchr|0)==(0|0);
  if ($8) {
   label = 4;
  } else {
   $9 = HEAP8[$7>>0]|0;
   $10 = ($9<<24>>24)==(43);
   $11 = ((($1)) + 2|0);
   $$ = $10 ? 3 : 2;
   $$1 = $10 ? $11 : $7;
   $12 = HEAP8[$$1>>0]|0;
   $13 = ($12<<24>>24)==(98);
   $14 = (($1) + ($$)|0);
   $md$1 = $13 ? $14 : $$1;
   $15 = HEAP8[$md$1>>0]|0;
   $16 = ($15<<24>>24)==(0);
   if (!($16)) {
    label = 4;
   }
  }
 }
 if ((label|0) == 4) {
  (_luaL_argerror($L,2,10710)|0);
 }
 $17 = (_fopen($0,$1)|0);
 HEAP32[$2>>2] = $17;
 $18 = ($17|0)==(0|0);
 if (!($18)) {
  $20 = 1;
  return ($20|0);
 }
 $19 = (_luaL_fileresult($L,0,$0)|0);
 $20 = $19;
 return ($20|0);
}
function _io_output($L) {
 $L = $L|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _g_iofile($L,10262,10681);
 return 1;
}
function _io_popen($L) {
 $L = $L|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = (_luaL_checklstring($L,1,0)|0);
 (_luaL_optlstring($L,2,12877,0)|0);
 $1 = (_lua_newuserdata($L,8)|0);
 $2 = ((($1)) + 4|0);
 HEAP32[$2>>2] = 0;
 _luaL_setmetatable($L,10240);
 (_luaL_error($L,10659,$vararg_buffer)|0);
 HEAP32[$1>>2] = 0;
 HEAP32[$2>>2] = 187;
 $3 = (_luaL_fileresult($L,0,$0)|0);
 STACKTOP = sp;return ($3|0);
}
function _io_read($L) {
 $L = $L|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 _lua_getfield($L,-1001000,10246);
 $0 = (_lua_touserdata($L,-1)|0);
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  HEAP32[$vararg_buffer>>2] = (10250);
  (_luaL_error($L,10615,$vararg_buffer)|0);
 }
 $4 = HEAP32[$0>>2]|0;
 $5 = (_g_read($L,$4,1)|0);
 STACKTOP = sp;return ($5|0);
}
function _io_tmpfile($L) {
 $L = $L|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_lua_newuserdata($L,8)|0);
 $1 = ((($0)) + 4|0);
 HEAP32[$1>>2] = 0;
 _luaL_setmetatable($L,10240);
 HEAP32[$0>>2] = 0;
 HEAP32[$1>>2] = 186;
 $2 = (_tmpfile()|0);
 HEAP32[$0>>2] = $2;
 $3 = ($2|0)==(0|0);
 if (!($3)) {
  $5 = 1;
  return ($5|0);
 }
 $4 = (_luaL_fileresult($L,0,0)|0);
 $5 = $4;
 return ($5|0);
}
function _io_type($L) {
 $L = $L|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _luaL_checkany($L,1);
 $0 = (_luaL_testudata($L,1,10240)|0);
 $1 = ($0|0)==(0|0);
 if ($1) {
  _lua_pushnil($L);
  return 1;
 }
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0|0);
 if ($4) {
  (_lua_pushlstring($L,10642,11)|0);
  return 1;
 } else {
  (_lua_pushlstring($L,10654,4)|0);
  return 1;
 }
 return (0)|0;
}
function _io_write($L) {
 $L = $L|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 _lua_getfield($L,-1001000,10262);
 $0 = (_lua_touserdata($L,-1)|0);
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  HEAP32[$vararg_buffer>>2] = (10266);
  (_luaL_error($L,10615,$vararg_buffer)|0);
 }
 $4 = HEAP32[$0>>2]|0;
 $5 = (_g_write($L,$4,1)|0);
 STACKTOP = sp;return ($5|0);
}
function _io_fclose($L) {
 $L = $L|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_luaL_checkudata($L,1,10240)|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (_fclose($1)|0);
 $3 = ($2|0)==(0);
 $4 = $3&1;
 $5 = (_luaL_fileresult($L,$4,0)|0);
 return ($5|0);
}
function _io_pclose($L) {
 $L = $L|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 (_luaL_checkudata($L,1,10240)|0);
 $0 = (_luaL_execresult($L,-1)|0);
 return ($0|0);
}
function _g_iofile($L,$f,$mode) {
 $L = $L|0;
 $f = $f|0;
 $mode = $mode|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = (_lua_type($L,1)|0);
 $1 = ($0|0)<(1);
 if ($1) {
  _lua_getfield($L,-1001000,$f);
  STACKTOP = sp;return;
 }
 $2 = (_lua_tolstring($L,1,0)|0);
 $3 = ($2|0)==(0|0);
 if ($3) {
  $11 = (_luaL_checkudata($L,1,10240)|0);
  $12 = ((($11)) + 4|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($13|0)==(0|0);
  if ($14) {
   (_luaL_error($L,10391,$vararg_buffer2)|0);
  }
  _lua_pushvalue($L,1);
 } else {
  $4 = (_lua_newuserdata($L,8)|0);
  $5 = ((($4)) + 4|0);
  HEAP32[$5>>2] = 0;
  _luaL_setmetatable($L,10240);
  HEAP32[$4>>2] = 0;
  HEAP32[$5>>2] = 186;
  $6 = (_fopen($2,$mode)|0);
  HEAP32[$4>>2] = $6;
  $7 = ($6|0)==(0|0);
  if ($7) {
   $8 = (___errno_location()|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = (_strerror($9)|0);
   HEAP32[$vararg_buffer>>2] = $2;
   $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
   HEAP32[$vararg_ptr1>>2] = $10;
   (_luaL_error($L,10683,$vararg_buffer)|0);
  }
 }
 _lua_setfield($L,-1001000,$f);
 _lua_getfield($L,-1001000,$f);
 STACKTOP = sp;return;
}
function _luaopen_math($L) {
 $L = $L|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _lua_createtable($L,0,28);
 _luaL_setfuncs($L,1272,0);
 _lua_pushnumber($L,3.1415926535897931);
 _lua_setfield($L,-2,10723);
 _lua_pushnumber($L,inf);
 _lua_setfield($L,-2,10726);
 return 1;
}
function _math_abs($L) {
 $L = $L|0;
 var $0 = 0.0, $1 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_luaL_checknumber($L,1));
 $1 = (+Math_abs((+$0)));
 _lua_pushnumber($L,$1);
 return 1;
}
function _math_acos($L) {
 $L = $L|0;
 var $0 = 0.0, $1 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_luaL_checknumber($L,1));
 $1 = (+Math_acos((+$0)));
 _lua_pushnumber($L,$1);
 return 1;
}
function _math_asin($L) {
 $L = $L|0;
 var $0 = 0.0, $1 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_luaL_checknumber($L,1));
 $1 = (+Math_asin((+$0)));
 _lua_pushnumber($L,$1);
 return 1;
}
function _math_atan2($L) {
 $L = $L|0;
 var $0 = 0.0, $1 = 0.0, $2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_luaL_checknumber($L,1));
 $1 = (+_luaL_checknumber($L,2));
 $2 = (+Math_atan2((+$0),(+$1)));
 _lua_pushnumber($L,$2);
 return 1;
}
function _math_atan($L) {
 $L = $L|0;
 var $0 = 0.0, $1 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_luaL_checknumber($L,1));
 $1 = (+Math_atan((+$0)));
 _lua_pushnumber($L,$1);
 return 1;
}
function _math_ceil($L) {
 $L = $L|0;
 var $0 = 0.0, $1 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_luaL_checknumber($L,1));
 $1 = (+Math_ceil((+$0)));
 _lua_pushnumber($L,$1);
 return 1;
}
function _math_cosh($L) {
 $L = $L|0;
 var $0 = 0.0, $1 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_luaL_checknumber($L,1));
 $1 = (+_cosh($0));
 _lua_pushnumber($L,$1);
 return 1;
}
function _math_cos($L) {
 $L = $L|0;
 var $0 = 0.0, $1 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_luaL_checknumber($L,1));
 $1 = (+Math_cos((+$0)));
 _lua_pushnumber($L,$1);
 return 1;
}
function _math_deg($L) {
 $L = $L|0;
 var $0 = 0.0, $1 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_luaL_checknumber($L,1));
 $1 = $0 / 0.017453292519943295;
 _lua_pushnumber($L,$1);
 return 1;
}
function _math_exp($L) {
 $L = $L|0;
 var $0 = 0.0, $1 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_luaL_checknumber($L,1));
 $1 = (+Math_exp((+$0)));
 _lua_pushnumber($L,$1);
 return 1;
}
function _math_floor($L) {
 $L = $L|0;
 var $0 = 0.0, $1 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_luaL_checknumber($L,1));
 $1 = (+Math_floor((+$0)));
 _lua_pushnumber($L,$1);
 return 1;
}
function _math_fmod($L) {
 $L = $L|0;
 var $0 = 0.0, $1 = 0.0, $2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_luaL_checknumber($L,1));
 $1 = (+_luaL_checknumber($L,2));
 $2 = (+_fmod($0,$1));
 _lua_pushnumber($L,$2);
 return 1;
}
function _math_frexp($L) {
 $L = $L|0;
 var $0 = 0.0, $1 = 0.0, $2 = 0, $e = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $e = sp;
 $0 = (+_luaL_checknumber($L,1));
 $1 = (+_frexp($0,$e));
 _lua_pushnumber($L,$1);
 $2 = HEAP32[$e>>2]|0;
 _lua_pushinteger($L,$2);
 STACKTOP = sp;return 2;
}
function _math_ldexp($L) {
 $L = $L|0;
 var $0 = 0.0, $1 = 0, $2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_luaL_checknumber($L,1));
 $1 = (_luaL_checkinteger($L,2)|0);
 $2 = (+_ldexp($0,$1));
 _lua_pushnumber($L,$2);
 return 1;
}
function _math_log10($L) {
 $L = $L|0;
 var $0 = 0.0, $1 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_luaL_checknumber($L,1));
 $1 = (+_log10($0));
 _lua_pushnumber($L,$1);
 return 1;
}
function _math_log($L) {
 $L = $L|0;
 var $0 = 0.0, $1 = 0, $2 = 0, $3 = 0.0, $4 = 0.0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $res$0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_luaL_checknumber($L,1));
 $1 = (_lua_type($L,2)|0);
 $2 = ($1|0)<(1);
 do {
  if ($2) {
   $3 = (+Math_log((+$0)));
   $res$0 = $3;
  } else {
   $4 = (+_luaL_checknumber($L,2));
   $5 = $4 == 10.0;
   if ($5) {
    $6 = (+_log10($0));
    $res$0 = $6;
    break;
   } else {
    $7 = (+Math_log((+$0)));
    $8 = (+Math_log((+$4)));
    $9 = $7 / $8;
    $res$0 = $9;
    break;
   }
  }
 } while(0);
 _lua_pushnumber($L,$res$0);
 return 1;
}
function _math_max($L) {
 $L = $L|0;
 var $0 = 0, $1 = 0.0, $2 = 0, $3 = 0.0, $4 = 0, $5 = 0, $dmax$0$lcssa = 0.0, $dmax$02 = 0.0, $dmax$1 = 0.0, $exitcond = 0, $i$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_lua_gettop($L)|0);
 $1 = (+_luaL_checknumber($L,1));
 $2 = ($0|0)<(2);
 if ($2) {
  $dmax$0$lcssa = $1;
  _lua_pushnumber($L,$dmax$0$lcssa);
  return 1;
 } else {
  $dmax$02 = $1;$i$01 = 2;
 }
 while(1) {
  $3 = (+_luaL_checknumber($L,$i$01));
  $4 = $3 > $dmax$02;
  $dmax$1 = $4 ? $3 : $dmax$02;
  $5 = (($i$01) + 1)|0;
  $exitcond = ($i$01|0)==($0|0);
  if ($exitcond) {
   $dmax$0$lcssa = $dmax$1;
   break;
  } else {
   $dmax$02 = $dmax$1;$i$01 = $5;
  }
 }
 _lua_pushnumber($L,$dmax$0$lcssa);
 return 1;
}
function _math_min($L) {
 $L = $L|0;
 var $0 = 0, $1 = 0.0, $2 = 0, $3 = 0.0, $4 = 0, $5 = 0, $dmin$0$lcssa = 0.0, $dmin$02 = 0.0, $dmin$1 = 0.0, $exitcond = 0, $i$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_lua_gettop($L)|0);
 $1 = (+_luaL_checknumber($L,1));
 $2 = ($0|0)<(2);
 if ($2) {
  $dmin$0$lcssa = $1;
  _lua_pushnumber($L,$dmin$0$lcssa);
  return 1;
 } else {
  $dmin$02 = $1;$i$01 = 2;
 }
 while(1) {
  $3 = (+_luaL_checknumber($L,$i$01));
  $4 = $3 < $dmin$02;
  $dmin$1 = $4 ? $3 : $dmin$02;
  $5 = (($i$01) + 1)|0;
  $exitcond = ($i$01|0)==($0|0);
  if ($exitcond) {
   $dmin$0$lcssa = $dmin$1;
   break;
  } else {
   $dmin$02 = $dmin$1;$i$01 = $5;
  }
 }
 _lua_pushnumber($L,$dmin$0$lcssa);
 return 1;
}
function _math_modf($L) {
 $L = $L|0;
 var $0 = 0.0, $1 = 0.0, $2 = 0.0, $ip = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ip = sp;
 $0 = (+_luaL_checknumber($L,1));
 $1 = (+_modf($0,$ip));
 $2 = +HEAPF64[$ip>>3];
 _lua_pushnumber($L,$2);
 _lua_pushnumber($L,$1);
 STACKTOP = sp;return 2;
}
function _math_pow($L) {
 $L = $L|0;
 var $0 = 0.0, $1 = 0.0, $2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_luaL_checknumber($L,1));
 $1 = (+_luaL_checknumber($L,2));
 $2 = (+Math_pow((+$0),(+$1)));
 _lua_pushnumber($L,$2);
 return 1;
}
function _math_rad($L) {
 $L = $L|0;
 var $0 = 0.0, $1 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_luaL_checknumber($L,1));
 $1 = $0 * 0.017453292519943295;
 _lua_pushnumber($L,$1);
 return 1;
}
function _math_random($L) {
 $L = $L|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0, $2 = 0.0, $3 = 0.0, $4 = 0, $5 = 0.0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0.0;
 var $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = (_rand()|0);
 $1 = (($0|0) % 2147483647)&-1;
 $2 = (+($1|0));
 $3 = $2 / 2147483647.0;
 $4 = (_lua_gettop($L)|0);
 switch ($4|0) {
 case 0:  {
  _lua_pushnumber($L,$3);
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
  break;
 }
 case 1:  {
  $5 = (+_luaL_checknumber($L,1));
  $6 = !($5 >= 1.0);
  if ($6) {
   (_luaL_argerror($L,1,10869)|0);
  }
  $7 = $3 * $5;
  $8 = (+Math_floor((+$7)));
  $9 = $8 + 1.0;
  _lua_pushnumber($L,$9);
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
  break;
 }
 case 2:  {
  $10 = (+_luaL_checknumber($L,1));
  $11 = (+_luaL_checknumber($L,2));
  $12 = !($10 <= $11);
  if ($12) {
   (_luaL_argerror($L,2,10869)|0);
  }
  $13 = $11 - $10;
  $14 = $13 + 1.0;
  $15 = $3 * $14;
  $16 = (+Math_floor((+$15)));
  $17 = $10 + $16;
  _lua_pushnumber($L,$17);
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
  break;
 }
 default: {
  $18 = (_luaL_error($L,10887,$vararg_buffer)|0);
  $$0 = $18;
  STACKTOP = sp;return ($$0|0);
 }
 }
 return (0)|0;
}
function _math_randomseed($L) {
 $L = $L|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_luaL_checkunsigned($L,1)|0);
 _srand($0);
 (_rand()|0);
 return 0;
}
function _math_sinh($L) {
 $L = $L|0;
 var $0 = 0.0, $1 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_luaL_checknumber($L,1));
 $1 = (+_sinh($0));
 _lua_pushnumber($L,$1);
 return 1;
}
function _math_sin($L) {
 $L = $L|0;
 var $0 = 0.0, $1 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_luaL_checknumber($L,1));
 $1 = (+Math_sin((+$0)));
 _lua_pushnumber($L,$1);
 return 1;
}
function _math_sqrt($L) {
 $L = $L|0;
 var $0 = 0.0, $1 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_luaL_checknumber($L,1));
 $1 = (+Math_sqrt((+$0)));
 _lua_pushnumber($L,$1);
 return 1;
}
function _math_tanh($L) {
 $L = $L|0;
 var $0 = 0.0, $1 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_luaL_checknumber($L,1));
 $1 = (+_tanh($0));
 _lua_pushnumber($L,$1);
 return 1;
}
function _math_tan($L) {
 $L = $L|0;
 var $0 = 0.0, $1 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_luaL_checknumber($L,1));
 $1 = (+Math_tan((+$0)));
 _lua_pushnumber($L,$1);
 return 1;
}
function _luaopen_os($L) {
 $L = $L|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _lua_createtable($L,0,11);
 _luaL_setfuncs($L,1504,0);
 return 1;
}
function _os_clock($L) {
 $L = $L|0;
 var $0 = 0, $1 = 0.0, $2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_clock()|0);
 $1 = (+($0|0));
 $2 = $1 / 1.0E+6;
 _lua_pushnumber($L,$2);
 return 1;
}
function _os_date($L) {
 $L = $L|0;
 var $$0$i = 0, $$pre = 0, $$pre1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0.0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $b = 0, $buff = 0, $cc = 0, $memchr$i = 0, $s$0 = 0, $s$1 = 0, $stm$0 = 0, $t = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1264|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $t = sp + 1048|0;
 $cc = sp + 1256|0;
 $b = sp + 8|0;
 $buff = sp + 1056|0;
 $0 = (_luaL_optlstring($L,1,11122,0)|0);
 $1 = (_lua_type($L,2)|0);
 $2 = ($1|0)<(1);
 if ($2) {
  $3 = (_time((0|0))|0);
  $6 = $3;
 } else {
  $4 = (+_luaL_checknumber($L,2));
  $5 = (~~(($4)));
  $6 = $5;
 }
 HEAP32[$t>>2] = $6;
 $7 = HEAP8[$0>>0]|0;
 $8 = ($7<<24>>24)==(33);
 if ($8) {
  $9 = (_gmtime(($t|0))|0);
  $10 = ((($0)) + 1|0);
  $s$0 = $10;$stm$0 = $9;
 } else {
  $11 = (_localtime(($t|0))|0);
  $s$0 = $0;$stm$0 = $11;
 }
 $12 = ($stm$0|0)==(0|0);
 if ($12) {
  _lua_pushnil($L);
  STACKTOP = sp;return 1;
 }
 $13 = (_strcmp($s$0,11125)|0);
 $14 = ($13|0)==(0);
 if ($14) {
  _lua_createtable($L,0,9);
  $15 = HEAP32[$stm$0>>2]|0;
  _lua_pushinteger($L,$15);
  _lua_setfield($L,-2,11020);
  $16 = ((($stm$0)) + 4|0);
  $17 = HEAP32[$16>>2]|0;
  _lua_pushinteger($L,$17);
  _lua_setfield($L,-2,11024);
  $18 = ((($stm$0)) + 8|0);
  $19 = HEAP32[$18>>2]|0;
  _lua_pushinteger($L,$19);
  _lua_setfield($L,-2,11028);
  $20 = ((($stm$0)) + 12|0);
  $21 = HEAP32[$20>>2]|0;
  _lua_pushinteger($L,$21);
  _lua_setfield($L,-2,11033);
  $22 = ((($stm$0)) + 16|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = (($23) + 1)|0;
  _lua_pushinteger($L,$24);
  _lua_setfield($L,-2,11070);
  $25 = ((($stm$0)) + 20|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = (($26) + 1900)|0;
  _lua_pushinteger($L,$27);
  _lua_setfield($L,-2,11076);
  $28 = ((($stm$0)) + 24|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = (($29) + 1)|0;
  _lua_pushinteger($L,$30);
  _lua_setfield($L,-2,11128);
  $31 = ((($stm$0)) + 28|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = (($32) + 1)|0;
  _lua_pushinteger($L,$33);
  _lua_setfield($L,-2,11133);
  $34 = ((($stm$0)) + 32|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = ($35|0)<(0);
  if ($36) {
   STACKTOP = sp;return 1;
  }
  _lua_pushboolean($L,$35);
  _lua_setfield($L,-2,11081);
  STACKTOP = sp;return 1;
 }
 HEAP8[$cc>>0] = 37;
 _luaL_buffinit($L,$b);
 $37 = ((($b)) + 8|0);
 $38 = ((($b)) + 4|0);
 $39 = ((($cc)) + 1|0);
 $40 = ((($cc)) + 2|0);
 $s$1 = $s$0;
 L20: while(1) {
  $41 = HEAP8[$s$1>>0]|0;
  switch ($41<<24>>24) {
  case 0:  {
   break L20;
   break;
  }
  case 37:  {
   break;
  }
  default: {
   $42 = HEAP32[$37>>2]|0;
   $43 = HEAP32[$38>>2]|0;
   $44 = ($42>>>0)<($43>>>0);
   if ($44) {
    $47 = $42;$50 = $41;
   } else {
    (_luaL_prepbuffsize($b,1)|0);
    $$pre = HEAP8[$s$1>>0]|0;
    $$pre1 = HEAP32[$37>>2]|0;
    $47 = $$pre1;$50 = $$pre;
   }
   $45 = ((($s$1)) + 1|0);
   $46 = (($47) + 1)|0;
   HEAP32[$37>>2] = $46;
   $48 = HEAP32[$b>>2]|0;
   $49 = (($48) + ($47)|0);
   HEAP8[$49>>0] = $50;
   $s$1 = $45;
   continue L20;
  }
  }
  $51 = ((($s$1)) + 1|0);
  $52 = ((($s$1)) + 2|0);
  $53 = HEAP8[$51>>0]|0;
  $54 = ($53<<24>>24)==(0);
  if ($54) {
   label = 20;
  } else {
   $55 = $53 << 24 >> 24;
   $memchr$i = (_memchr(11138,$55,23)|0);
   $56 = ($memchr$i|0)==(0|0);
   if ($56) {
    label = 20;
   } else {
    HEAP8[$39>>0] = $53;
    HEAP8[$40>>0] = 0;
    $$0$i = $52;
   }
  }
  if ((label|0) == 20) {
   label = 0;
   HEAP32[$vararg_buffer>>2] = $51;
   $57 = (_lua_pushfstring($L,11161,$vararg_buffer)|0);
   (_luaL_argerror($L,1,$57)|0);
   $$0$i = $51;
  }
  $58 = (_strftime(($buff|0),200,($cc|0),($stm$0|0))|0);
  _luaL_addlstring($b,$buff,$58);
  $s$1 = $$0$i;
 }
 _luaL_pushresult($b);
 STACKTOP = sp;return 1;
}
function _os_difftime($L) {
 $L = $L|0;
 var $0 = 0.0, $1 = 0, $2 = 0.0, $3 = 0, $4 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_luaL_checknumber($L,1));
 $1 = (~~(($0)));
 $2 = (+_luaL_optnumber($L,2,0.0));
 $3 = (~~(($2)));
 $4 = (+_difftime(($1|0),($3|0)));
 _lua_pushnumber($L,$4);
 return 1;
}
function _os_execute($L) {
 $L = $L|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_luaL_optlstring($L,1,0,0)|0);
 $1 = (_system(($0|0))|0);
 $2 = ($0|0)==(0|0);
 if ($2) {
  _lua_pushboolean($L,$1);
  $$0 = 1;
  return ($$0|0);
 } else {
  $3 = (_luaL_execresult($L,$1)|0);
  $$0 = $3;
  return ($$0|0);
 }
 return (0)|0;
}
function _os_exit($L) {
 $L = $L|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $not$ = 0, $status$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_lua_type($L,1)|0);
 $1 = ($0|0)==(1);
 if ($1) {
  $2 = (_lua_toboolean($L,1)|0);
  $not$ = ($2|0)==(0);
  $3 = $not$&1;
  $status$0 = $3;
 } else {
  $4 = (_luaL_optinteger($L,1,0)|0);
  $status$0 = $4;
 }
 $5 = (_lua_toboolean($L,2)|0);
 $6 = ($5|0)==(0);
 if (!($6)) {
  _lua_close($L);
 }
 $7 = ($L|0)==(0|0);
 if ($7) {
  return 0;
 } else {
  _exit(($status$0|0));
  // unreachable;
 }
 return (0)|0;
}
function _os_getenv($L) {
 $L = $L|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_luaL_checklstring($L,1,0)|0);
 $1 = (_getenv(($0|0))|0);
 (_lua_pushstring($L,$1)|0);
 return 1;
}
function _os_remove($L) {
 $L = $L|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_luaL_checklstring($L,1,0)|0);
 $1 = (_remove($0)|0);
 $2 = ($1|0)==(0);
 $3 = $2&1;
 $4 = (_luaL_fileresult($L,$3,$0)|0);
 return ($4|0);
}
function _os_rename($L) {
 $L = $L|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_luaL_checklstring($L,1,0)|0);
 $1 = (_luaL_checklstring($L,2,0)|0);
 $2 = (_rename($0,$1)|0);
 $3 = ($2|0)==(0);
 $4 = $3&1;
 $5 = (_luaL_fileresult($L,$4,0)|0);
 return ($5|0);
}
function _os_setlocale($L) {
 $L = $L|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_luaL_optlstring($L,1,0,0)|0);
 $1 = (_luaL_checkoption($L,2,11087,1600)|0);
 $2 = (1628 + ($1<<2)|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (_setlocale($3,$0)|0);
 (_lua_pushstring($L,$4)|0);
 return 1;
}
function _os_time($L) {
 $L = $L|0;
 var $$ = 0, $$0$i = 0, $$0$i12 = 0, $$0$i16 = 0, $$18 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0.0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $isnum$i = 0, $isnum$i1 = 0, $isnum$i10 = 0, $isnum$i14 = 0, $isnum$i4 = 0, $isnum$i7 = 0, $res$0$i2 = 0, $t$0 = 0, $ts = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $isnum$i14 = sp + 84|0;
 $isnum$i10 = sp + 80|0;
 $isnum$i7 = sp + 76|0;
 $isnum$i4 = sp + 72|0;
 $isnum$i1 = sp + 68|0;
 $isnum$i = sp + 64|0;
 $ts = sp + 20|0;
 $0 = (_lua_type($L,1)|0);
 $1 = ($0|0)<(1);
 if ($1) {
  $2 = (_time((0|0))|0);
  $t$0 = $2;
 } else {
  _luaL_checktype($L,1,5);
  _lua_settop($L,1);
  _lua_getfield($L,-1,11020);
  $3 = (_lua_tointegerx($L,-1,$isnum$i)|0);
  $4 = HEAP32[$isnum$i>>2]|0;
  $5 = ($4|0)==(0);
  $$ = $5 ? 0 : $3;
  _lua_settop($L,-2);
  HEAP32[$ts>>2] = $$;
  _lua_getfield($L,-1,11024);
  $6 = (_lua_tointegerx($L,-1,$isnum$i1)|0);
  $7 = HEAP32[$isnum$i1>>2]|0;
  $8 = ($7|0)==(0);
  $res$0$i2 = $8 ? 0 : $6;
  _lua_settop($L,-2);
  $9 = ((($ts)) + 4|0);
  HEAP32[$9>>2] = $res$0$i2;
  _lua_getfield($L,-1,11028);
  $10 = (_lua_tointegerx($L,-1,$isnum$i4)|0);
  $11 = HEAP32[$isnum$i4>>2]|0;
  $12 = ($11|0)==(0);
  $$18 = $12 ? 12 : $10;
  _lua_settop($L,-2);
  $13 = ((($ts)) + 8|0);
  HEAP32[$13>>2] = $$18;
  _lua_getfield($L,-1,11033);
  $14 = (_lua_tointegerx($L,-1,$isnum$i7)|0);
  $15 = HEAP32[$isnum$i7>>2]|0;
  $16 = ($15|0)==(0);
  if ($16) {
   HEAP32[$vararg_buffer>>2] = 11033;
   $17 = (_luaL_error($L,11037,$vararg_buffer)|0);
   $$0$i = $17;
  } else {
   _lua_settop($L,-2);
   $$0$i = $14;
  }
  $18 = ((($ts)) + 12|0);
  HEAP32[$18>>2] = $$0$i;
  _lua_getfield($L,-1,11070);
  $19 = (_lua_tointegerx($L,-1,$isnum$i10)|0);
  $20 = HEAP32[$isnum$i10>>2]|0;
  $21 = ($20|0)==(0);
  if ($21) {
   HEAP32[$vararg_buffer1>>2] = 11070;
   $22 = (_luaL_error($L,11037,$vararg_buffer1)|0);
   $$0$i12 = $22;
  } else {
   _lua_settop($L,-2);
   $$0$i12 = $19;
  }
  $23 = (($$0$i12) + -1)|0;
  $24 = ((($ts)) + 16|0);
  HEAP32[$24>>2] = $23;
  _lua_getfield($L,-1,11076);
  $25 = (_lua_tointegerx($L,-1,$isnum$i14)|0);
  $26 = HEAP32[$isnum$i14>>2]|0;
  $27 = ($26|0)==(0);
  if ($27) {
   HEAP32[$vararg_buffer4>>2] = 11076;
   $28 = (_luaL_error($L,11037,$vararg_buffer4)|0);
   $$0$i16 = $28;
  } else {
   _lua_settop($L,-2);
   $$0$i16 = $25;
  }
  $29 = (($$0$i16) + -1900)|0;
  $30 = ((($ts)) + 20|0);
  HEAP32[$30>>2] = $29;
  _lua_getfield($L,-1,11081);
  $31 = (_lua_type($L,-1)|0);
  $32 = ($31|0)==(0);
  if ($32) {
   $35 = -1;
  } else {
   $33 = (_lua_toboolean($L,-1)|0);
   $35 = $33;
  }
  _lua_settop($L,-2);
  $34 = ((($ts)) + 32|0);
  HEAP32[$34>>2] = $35;
  $36 = (_mktime(($ts|0))|0);
  $t$0 = $36;
 }
 $37 = ($t$0|0)==(-1);
 if ($37) {
  _lua_pushnil($L);
  STACKTOP = sp;return 1;
 } else {
  $38 = (+($t$0|0));
  _lua_pushnumber($L,$38);
  STACKTOP = sp;return 1;
 }
 return (0)|0;
}
function _os_tmpname($L) {
 $L = $L|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $buff = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $buff = sp + 4|0;
 $0 = (_tmpnam($buff)|0);
 $1 = ($0|0)==(0|0);
 if ($1) {
  $2 = (_luaL_error($L,10983,$vararg_buffer)|0);
  $$0 = $2;
  STACKTOP = sp;return ($$0|0);
 } else {
  (_lua_pushstring($L,$buff)|0);
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function _luaopen_string($L) {
 $L = $L|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _lua_createtable($L,0,14);
 _luaL_setfuncs($L,1652,0);
 _lua_createtable($L,0,1);
 (_lua_pushlstring($L,20754,0)|0);
 _lua_pushvalue($L,-2);
 (_lua_setmetatable($L,-2)|0);
 _lua_settop($L,-2);
 _lua_pushvalue($L,-2);
 _lua_setfield($L,-2,12953);
 _lua_settop($L,-2);
 return 1;
}
function _str_byte($L) {
 $L = $L|0;
 var $$ = 0, $$0 = 0, $$0$i = 0, $$0$i1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $i$03 = 0;
 var $l = 0, $pose$0 = 0, $umax4 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $l = sp + 4|0;
 $0 = (_luaL_checklstring($L,1,$l)|0);
 $1 = (_luaL_optinteger($L,2,1)|0);
 $2 = HEAP32[$l>>2]|0;
 $3 = ($1|0)>(-1);
 if ($3) {
  $$0$i = $1;
 } else {
  $4 = (0 - ($1))|0;
  $5 = ($2>>>0)<($4>>>0);
  if ($5) {
   $$0$i = 0;
  } else {
   $6 = (($1) + 1)|0;
   $7 = (($6) + ($2))|0;
   $$0$i = $7;
  }
 }
 $8 = (_luaL_optinteger($L,3,$$0$i)|0);
 $9 = HEAP32[$l>>2]|0;
 $10 = ($8|0)>(-1);
 if ($10) {
  $$0$i1 = $8;
 } else {
  $11 = (0 - ($8))|0;
  $12 = ($9>>>0)<($11>>>0);
  if ($12) {
   $$0$i1 = 0;
  } else {
   $13 = (($8) + 1)|0;
   $14 = (($13) + ($9))|0;
   $$0$i1 = $14;
  }
 }
 $15 = ($$0$i|0)==(0);
 $$ = $15 ? 1 : $$0$i;
 $16 = ($$0$i1>>>0)>($9>>>0);
 $pose$0 = $16 ? $9 : $$0$i1;
 $17 = ($pose$0>>>0)<($$>>>0);
 if ($17) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $18 = (($pose$0) - ($$))|0;
 $19 = (($18) + 1)|0;
 $20 = ($pose$0|0)==(-1);
 if ($20) {
  $21 = (_luaL_error($L,11953,$vararg_buffer)|0);
  $$0 = $21;
  STACKTOP = sp;return ($$0|0);
 }
 _luaL_checkstack($L,$19,11953);
 $22 = ($19|0)>(0);
 if (!($22)) {
  $$0 = $19;
  STACKTOP = sp;return ($$0|0);
 }
 $23 = (($$) + -1)|0;
 $24 = ($9>>>0)>($$0$i1>>>0);
 $25 = $24 ? $$0$i1 : $9;
 $26 = (($25) + 1)|0;
 $27 = ($$0$i>>>0)>(1);
 $umax4 = $27 ? $$0$i : 1;
 $28 = (($26) - ($umax4))|0;
 $i$03 = 0;
 while(1) {
  $29 = (($23) + ($i$03))|0;
  $30 = (($0) + ($29)|0);
  $31 = HEAP8[$30>>0]|0;
  $32 = $31&255;
  _lua_pushinteger($L,$32);
  $33 = (($i$03) + 1)|0;
  $exitcond = ($33|0)==($28|0);
  if ($exitcond) {
   $$0 = $19;
   break;
  } else {
   $i$03 = $33;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _str_char($L) {
 $L = $L|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $b = 0, $exitcond = 0, $i$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1040|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $b = sp;
 $0 = (_lua_gettop($L)|0);
 $1 = (_luaL_buffinitsize($L,$b,$0)|0);
 $2 = ($0|0)<(1);
 if ($2) {
  _luaL_pushresultsize($b,$0);
  STACKTOP = sp;return 1;
 } else {
  $i$01 = 1;
 }
 while(1) {
  $3 = (_luaL_checkinteger($L,$i$01)|0);
  $4 = $3&255;
  $5 = $3 & 255;
  $6 = ($5|0)==($3|0);
  if (!($6)) {
   (_luaL_argerror($L,$i$01,11934)|0);
  }
  $7 = (($i$01) + -1)|0;
  $8 = (($1) + ($7)|0);
  HEAP8[$8>>0] = $4;
  $9 = (($i$01) + 1)|0;
  $exitcond = ($i$01|0)==($0|0);
  if ($exitcond) {
   break;
  } else {
   $i$01 = $9;
  }
 }
 _luaL_pushresultsize($b,$0);
 STACKTOP = sp;return 1;
}
function _str_dump($L) {
 $L = $L|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $b = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1056|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $b = sp + 8|0;
 _luaL_checktype($L,1,6);
 _lua_settop($L,1);
 _luaL_buffinit($L,$b);
 $0 = (_lua_dump($L,188,$b)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  _luaL_pushresult($b);
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 } else {
  $2 = (_luaL_error($L,11904,$vararg_buffer)|0);
  $$0 = $2;
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function _str_find($L) {
 $L = $L|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_str_find_aux($L,1)|0);
 return ($0|0);
}
function _str_format($L) {
 $L = $L|0;
 var $$$i = 0, $$0 = 0, $$lcssa = 0, $$lcssa28 = 0, $$p$0$i = 0, $$p$2$i = 0, $$pre = 0, $$pre$i = 0, $$pre$i6 = 0, $$pre13$i = 0, $$pre16 = 0, $$pre17 = 0, $$pre18 = 0, $$pre3$i = 0, $$pre4$i = 0, $$pre6$i = 0, $$pre7$i = 0, $$pre8$i = 0, $$sum$i = 0, $0 = 0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0.0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0.0, $74 = 0, $75 = 0.0, $76 = 0.0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0.0, $88 = 0, $89 = 0.0, $9 = 0, $90 = 0.0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $arg$0$ph13 = 0, $b = 0, $buff$i = 0, $form = 0, $isdigit$i = 0, $isdigit$i9 = 0, $isdigit2$i = 0, $isdigit4$i = 0, $isdigit6$i = 0, $isdigit8$i = 0, $isdigittmp$i = 0;
 var $isdigittmp$i8 = 0, $isdigittmp1$i = 0, $isdigittmp3$i = 0, $isdigittmp5$i = 0, $isdigittmp7$i = 0, $l = 0, $l$i = 0, $memchr$i = 0, $nb$0 = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $p$0$lcssa$i = 0, $p$09$i = 0, $p$2$i = 0, $p$4$i = 0, $s$01$i = 0, $sfl = 0, $strfrmt$0$be = 0, $strfrmt$0$ph12 = 0;
 var $strfrmt$011 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer11 = 0, $vararg_buffer14 = 0, $vararg_buffer17 = 0, $vararg_buffer20 = 0, $vararg_buffer23 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, $vararg_buffer8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1168|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer23 = sp + 72|0;
 $vararg_buffer20 = sp + 64|0;
 $vararg_buffer17 = sp + 56|0;
 $vararg_buffer14 = sp + 48|0;
 $vararg_buffer11 = sp + 40|0;
 $vararg_buffer8 = sp + 32|0;
 $vararg_buffer5 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $l$i = sp + 1124|0;
 $buff$i = sp + 1146|0;
 $sfl = sp + 1120|0;
 $b = sp + 80|0;
 $form = sp + 1128|0;
 $l = sp + 76|0;
 $0 = (_lua_gettop($L)|0);
 $1 = (_luaL_checklstring($L,1,$sfl)|0);
 $2 = HEAP32[$sfl>>2]|0;
 $3 = (($1) + ($2)|0);
 _luaL_buffinit($L,$b);
 $4 = ($2|0)>(0);
 L1: do {
  if ($4) {
   $5 = ((($b)) + 8|0);
   $6 = ((($b)) + 4|0);
   $7 = ((($form)) + 1|0);
   $arg$0$ph13 = 1;$strfrmt$0$ph12 = $1;
   L3: while(1) {
    $strfrmt$011 = $strfrmt$0$ph12;
    while(1) {
     $8 = HEAP8[$strfrmt$011>>0]|0;
     $9 = ($8<<24>>24)==(37);
     if ($9) {
      $19 = ((($strfrmt$011)) + 1|0);
      $20 = HEAP8[$19>>0]|0;
      $21 = ($20<<24>>24)==(37);
      if (!($21)) {
       $$lcssa = $19;
       break;
      }
      $22 = HEAP32[$5>>2]|0;
      $23 = HEAP32[$6>>2]|0;
      $24 = ($22>>>0)<($23>>>0);
      if ($24) {
       $27 = $22;$30 = 37;
      } else {
       (_luaL_prepbuffsize($b,1)|0);
       $$pre17 = HEAP8[$19>>0]|0;
       $$pre18 = HEAP32[$5>>2]|0;
       $27 = $$pre18;$30 = $$pre17;
      }
      $25 = ((($strfrmt$011)) + 2|0);
      $26 = (($27) + 1)|0;
      HEAP32[$5>>2] = $26;
      $28 = HEAP32[$b>>2]|0;
      $29 = (($28) + ($27)|0);
      HEAP8[$29>>0] = $30;
      $strfrmt$0$be = $25;
     } else {
      $10 = HEAP32[$5>>2]|0;
      $11 = HEAP32[$6>>2]|0;
      $12 = ($10>>>0)<($11>>>0);
      if ($12) {
       $15 = $10;$18 = $8;
      } else {
       (_luaL_prepbuffsize($b,1)|0);
       $$pre = HEAP8[$strfrmt$011>>0]|0;
       $$pre16 = HEAP32[$5>>2]|0;
       $15 = $$pre16;$18 = $$pre;
      }
      $13 = ((($strfrmt$011)) + 1|0);
      $14 = (($15) + 1)|0;
      HEAP32[$5>>2] = $14;
      $16 = HEAP32[$b>>2]|0;
      $17 = (($16) + ($15)|0);
      HEAP8[$17>>0] = $18;
      $strfrmt$0$be = $13;
     }
     $31 = ($strfrmt$0$be>>>0)<($3>>>0);
     if ($31) {
      $strfrmt$011 = $strfrmt$0$be;
     } else {
      break L1;
     }
    }
    $32 = (_luaL_prepbuffsize($b,512)|0);
    $33 = (($arg$0$ph13) + 1)|0;
    $34 = ($arg$0$ph13|0)<($0|0);
    if (!($34)) {
     (_luaL_argerror($L,$33,11697)|0);
    }
    $35 = HEAP8[$$lcssa>>0]|0;
    $36 = ($35<<24>>24)==(0);
    L22: do {
     if ($36) {
      $169 = 0;$p$0$lcssa$i = $$lcssa;
     } else {
      $38 = $35;$p$09$i = $$lcssa;
      while(1) {
       $37 = $38 << 24 >> 24;
       $memchr$i = (_memchr(11706,$37,6)|0);
       $39 = ($memchr$i|0)==(0|0);
       if ($39) {
        $169 = $38;$p$0$lcssa$i = $p$09$i;
        break L22;
       }
       $40 = ((($p$09$i)) + 1|0);
       $41 = HEAP8[$40>>0]|0;
       $42 = ($41<<24>>24)==(0);
       if ($42) {
        $169 = 0;$p$0$lcssa$i = $40;
        break;
       } else {
        $38 = $41;$p$09$i = $40;
       }
      }
     }
    } while(0);
    $43 = $p$0$lcssa$i;
    $44 = $$lcssa;
    $45 = (($43) - ($44))|0;
    $46 = ($45>>>0)>(5);
    if ($46) {
     (_luaL_error($L,11712,$vararg_buffer)|0);
     $$pre$i = HEAP8[$p$0$lcssa$i>>0]|0;
     $48 = $$pre$i;
    } else {
     $48 = $169;
    }
    $47 = $48&255;
    $isdigittmp$i = (($47) + -48)|0;
    $isdigit$i = ($isdigittmp$i>>>0)<(10);
    $49 = ((($p$0$lcssa$i)) + 1|0);
    $$p$0$i = $isdigit$i ? $49 : $p$0$lcssa$i;
    $50 = HEAP8[$$p$0$i>>0]|0;
    $51 = $50&255;
    $isdigittmp1$i = (($51) + -48)|0;
    $isdigit2$i = ($isdigittmp1$i>>>0)<(10);
    $52 = ((($$p$0$i)) + 1|0);
    $p$2$i = $isdigit2$i ? $52 : $$p$0$i;
    $53 = HEAP8[$p$2$i>>0]|0;
    $54 = ($53<<24>>24)==(46);
    if ($54) {
     $55 = ((($p$2$i)) + 1|0);
     $56 = HEAP8[$55>>0]|0;
     $57 = $56&255;
     $isdigittmp5$i = (($57) + -48)|0;
     $isdigit6$i = ($isdigittmp5$i>>>0)<(10);
     $58 = ((($p$2$i)) + 2|0);
     $$$i = $isdigit6$i ? $58 : $55;
     $59 = HEAP8[$$$i>>0]|0;
     $60 = $59&255;
     $isdigittmp7$i = (($60) + -48)|0;
     $isdigit8$i = ($isdigittmp7$i>>>0)<(10);
     if ($isdigit8$i) {
      $$p$2$i = $isdigit6$i ? $55 : $p$2$i;
      $61 = ((($$p$2$i)) + 2|0);
      $$pre13$i = HEAP8[$61>>0]|0;
      $63 = $$pre13$i;$p$4$i = $61;
     } else {
      $63 = $59;$p$4$i = $$$i;
     }
    } else {
     $63 = $53;$p$4$i = $p$2$i;
    }
    $62 = $63&255;
    $isdigittmp3$i = (($62) + -48)|0;
    $isdigit4$i = ($isdigittmp3$i>>>0)<(10);
    if ($isdigit4$i) {
     (_luaL_error($L,11744,$vararg_buffer1)|0);
    }
    HEAP8[$form>>0] = 37;
    $64 = $p$4$i;
    $65 = (($64) - ($44))|0;
    $66 = (($65) + 1)|0;
    _memcpy(($7|0),($$lcssa|0),($66|0))|0;
    $$sum$i = (($65) + 2)|0;
    $67 = (($form) + ($$sum$i)|0);
    HEAP8[$67>>0] = 0;
    $68 = ((($p$4$i)) + 1|0);
    $69 = HEAP8[$p$4$i>>0]|0;
    $70 = $69 << 24 >> 24;
    L37: do {
     switch ($70|0) {
     case 99:  {
      $71 = (_luaL_checkinteger($L,$33)|0);
      HEAP32[$vararg_buffer3>>2] = $71;
      $72 = (_sprintf($32,$form,$vararg_buffer3)|0);
      $nb$0 = $72;
      break;
     }
     case 105: case 100:  {
      $73 = (+_luaL_checknumber($L,$33));
      $74 = (~~(($73)));
      $75 = (+($74|0));
      $76 = $73 - $75;
      $77 = $76 > -1.0;
      $78 = $76 < 1.0;
      $or$cond = $77 & $78;
      if (!($or$cond)) {
       (_luaL_argerror($L,$33,11789)|0);
      }
      $79 = (_strlen($form)|0);
      $80 = (($79) + -1)|0;
      $81 = (($form) + ($80)|0);
      $82 = HEAP8[$81>>0]|0;
      HEAP8[$81>>0]=108&255;HEAP8[$81+1>>0]=108>>8;
      $83 = (($79) + 1)|0;
      $84 = (($form) + ($79)|0);
      HEAP8[$84>>0] = $82;
      $85 = (($form) + ($83)|0);
      HEAP8[$85>>0] = 0;
      HEAP32[$vararg_buffer5>>2] = $74;
      $86 = (_sprintf($32,$form,$vararg_buffer5)|0);
      $nb$0 = $86;
      break;
     }
     case 88: case 120: case 117: case 111:  {
      $87 = (+_luaL_checknumber($L,$33));
      $88 = (~~(($87))>>>0);
      $89 = (+($88>>>0));
      $90 = $87 - $89;
      $91 = $90 > -1.0;
      $92 = $90 < 1.0;
      $or$cond3 = $91 & $92;
      if (!($or$cond3)) {
       (_luaL_argerror($L,$33,11818)|0);
      }
      $93 = (_strlen($form)|0);
      $94 = (($93) + -1)|0;
      $95 = (($form) + ($94)|0);
      $96 = HEAP8[$95>>0]|0;
      HEAP8[$95>>0]=108&255;HEAP8[$95+1>>0]=108>>8;
      $97 = (($93) + 1)|0;
      $98 = (($form) + ($93)|0);
      HEAP8[$98>>0] = $96;
      $99 = (($form) + ($97)|0);
      HEAP8[$99>>0] = 0;
      HEAP32[$vararg_buffer8>>2] = $88;
      $100 = (_sprintf($32,$form,$vararg_buffer8)|0);
      $nb$0 = $100;
      break;
     }
     case 71: case 103: case 102: case 69: case 101:  {
      $101 = (_strlen($form)|0);
      $102 = (($form) + ($101)|0);
      HEAP8[$102>>0] = 0;
      $103 = (+_luaL_checknumber($L,$33));
      HEAPF64[$vararg_buffer11>>3] = $103;
      $104 = (_sprintf($32,$form,$vararg_buffer11)|0);
      $nb$0 = $104;
      break;
     }
     case 113:  {
      $105 = (_luaL_checklstring($L,$33,$l$i)|0);
      $106 = HEAP32[$5>>2]|0;
      $107 = HEAP32[$6>>2]|0;
      $108 = ($106>>>0)<($107>>>0);
      if ($108) {
       $110 = $106;
      } else {
       (_luaL_prepbuffsize($b,1)|0);
       $$pre$i6 = HEAP32[$5>>2]|0;
       $110 = $$pre$i6;
      }
      $109 = (($110) + 1)|0;
      HEAP32[$5>>2] = $109;
      $111 = HEAP32[$b>>2]|0;
      $112 = (($111) + ($110)|0);
      HEAP8[$112>>0] = 34;
      $113 = HEAP32[$l$i>>2]|0;
      $114 = (($113) + -1)|0;
      HEAP32[$l$i>>2] = $114;
      $115 = ($113|0)==(0);
      L52: do {
       if (!($115)) {
        $s$01$i = $105;
        while(1) {
         $116 = HEAP8[$s$01$i>>0]|0;
         L55: do {
          switch ($116<<24>>24) {
          case 10: case 92: case 34:  {
           $117 = HEAP32[$5>>2]|0;
           $118 = HEAP32[$6>>2]|0;
           $119 = ($117>>>0)<($118>>>0);
           if ($119) {
            $121 = $117;
           } else {
            (_luaL_prepbuffsize($b,1)|0);
            $$pre3$i = HEAP32[$5>>2]|0;
            $121 = $$pre3$i;
           }
           $120 = (($121) + 1)|0;
           HEAP32[$5>>2] = $120;
           $122 = HEAP32[$b>>2]|0;
           $123 = (($122) + ($121)|0);
           HEAP8[$123>>0] = 92;
           $124 = HEAP32[$5>>2]|0;
           $125 = HEAP32[$6>>2]|0;
           $126 = ($124>>>0)<($125>>>0);
           if ($126) {
            $129 = $124;
           } else {
            (_luaL_prepbuffsize($b,1)|0);
            $$pre4$i = HEAP32[$5>>2]|0;
            $129 = $$pre4$i;
           }
           $127 = HEAP8[$s$01$i>>0]|0;
           $128 = (($129) + 1)|0;
           HEAP32[$5>>2] = $128;
           $130 = HEAP32[$b>>2]|0;
           $131 = (($130) + ($129)|0);
           HEAP8[$131>>0] = $127;
           break;
          }
          case 0:  {
           $139 = 0;
           label = 45;
           break;
          }
          default: {
           $132 = $116&255;
           $133 = (_iscntrl($132)|0);
           $134 = ($133|0)==(0);
           if (!($134)) {
            $$pre6$i = HEAP8[$s$01$i>>0]|0;
            $139 = $$pre6$i;
            label = 45;
            break L55;
           }
           $140 = HEAP32[$5>>2]|0;
           $141 = HEAP32[$6>>2]|0;
           $142 = ($140>>>0)<($141>>>0);
           if ($142) {
            $145 = $140;
           } else {
            (_luaL_prepbuffsize($b,1)|0);
            $$pre7$i = HEAP32[$5>>2]|0;
            $145 = $$pre7$i;
           }
           $143 = HEAP8[$s$01$i>>0]|0;
           $144 = (($145) + 1)|0;
           HEAP32[$5>>2] = $144;
           $146 = HEAP32[$b>>2]|0;
           $147 = (($146) + ($145)|0);
           HEAP8[$147>>0] = $143;
          }
          }
         } while(0);
         if ((label|0) == 45) {
          label = 0;
          $135 = ((($s$01$i)) + 1|0);
          $136 = HEAP8[$135>>0]|0;
          $137 = $136&255;
          $isdigittmp$i8 = (($137) + -48)|0;
          $isdigit$i9 = ($isdigittmp$i8>>>0)<(10);
          $138 = $139&255;
          if ($isdigit$i9) {
           HEAP32[$vararg_buffer17>>2] = $138;
           (_sprintf($buff$i,11864,$vararg_buffer17)|0);
          } else {
           HEAP32[$vararg_buffer14>>2] = $138;
           (_sprintf($buff$i,11860,$vararg_buffer14)|0);
          }
          _luaL_addstring($b,$buff$i);
         }
         $148 = ((($s$01$i)) + 1|0);
         $149 = HEAP32[$l$i>>2]|0;
         $150 = (($149) + -1)|0;
         HEAP32[$l$i>>2] = $150;
         $151 = ($149|0)==(0);
         if ($151) {
          break L52;
         } else {
          $s$01$i = $148;
         }
        }
       }
      } while(0);
      $152 = HEAP32[$5>>2]|0;
      $153 = HEAP32[$6>>2]|0;
      $154 = ($152>>>0)<($153>>>0);
      if ($154) {
       $156 = $152;
      } else {
       (_luaL_prepbuffsize($b,1)|0);
       $$pre8$i = HEAP32[$5>>2]|0;
       $156 = $$pre8$i;
      }
      $155 = (($156) + 1)|0;
      HEAP32[$5>>2] = $155;
      $157 = HEAP32[$b>>2]|0;
      $158 = (($157) + ($156)|0);
      HEAP8[$158>>0] = 34;
      $nb$0 = 0;
      break;
     }
     case 115:  {
      $159 = (_luaL_tolstring($L,$33,$l)|0);
      $160 = (_strchr($form,46)|0);
      $161 = ($160|0)==(0|0);
      $162 = HEAP32[$l>>2]|0;
      $163 = ($162>>>0)>(99);
      $or$cond5 = $161 & $163;
      if ($or$cond5) {
       _luaL_addvalue($b);
       $nb$0 = 0;
       break L37;
      } else {
       HEAP32[$vararg_buffer20>>2] = $159;
       $164 = (_sprintf($32,$form,$vararg_buffer20)|0);
       _lua_settop($L,-2);
       $nb$0 = $164;
       break L37;
      }
      break;
     }
     default: {
      $$lcssa28 = $70;
      break L3;
     }
     }
    } while(0);
    $166 = HEAP32[$5>>2]|0;
    $167 = (($166) + ($nb$0))|0;
    HEAP32[$5>>2] = $167;
    $168 = ($68>>>0)<($3>>>0);
    if ($168) {
     $arg$0$ph13 = $33;$strfrmt$0$ph12 = $68;
    } else {
     break L1;
    }
   }
   HEAP32[$vararg_buffer23>>2] = $$lcssa28;
   $165 = (_luaL_error($L,11870,$vararg_buffer23)|0);
   $$0 = $165;
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 _luaL_pushresult($b);
 $$0 = 1;
 STACKTOP = sp;return ($$0|0);
}
function _gmatch($L) {
 $L = $L|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 (_luaL_checklstring($L,1,0)|0);
 (_luaL_checklstring($L,2,0)|0);
 _lua_settop($L,2);
 _lua_pushinteger($L,0);
 _lua_pushcclosure($L,189,3);
 return 1;
}
function _str_gsub($L) {
 $L = $L|0;
 var $$$i$i = 0, $$off = 0, $$pre = 0, $$pre$i$i = 0, $$pre2$i$i = 0, $$pre3$i$i = 0, $$pre9 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0;
 var $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $b = 0, $exitcond$i$i = 0, $i$01$i$i = 0, $i$02$i$i = 0, $i$1$i$i = 0, $isdigit$i$i = 0, $isdigittmp$i$i = 0, $l$i$i = 0, $lp = 0, $ms = 0, $n$0 = 0, $n$17 = 0, $n$18 = 0, $n$2 = 0, $or$cond$i$i = 0, $p$0 = 0, $src$0 = 0;
 var $src$1 = 0, $src$2 = 0, $srcl = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1360|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $l$i$i = sp + 1352|0;
 $srcl = sp + 1348|0;
 $lp = sp + 1344|0;
 $ms = sp + 1064|0;
 $b = sp + 24|0;
 $0 = (_luaL_checklstring($L,1,$srcl)|0);
 $1 = (_luaL_checklstring($L,2,$lp)|0);
 $2 = (_lua_type($L,3)|0);
 $3 = HEAP32[$srcl>>2]|0;
 $4 = (($3) + 1)|0;
 $5 = (_luaL_optinteger($L,4,$4)|0);
 $6 = HEAP8[$1>>0]|0;
 $7 = ($6<<24>>24)==(94);
 $$off = (($2) + -3)|0;
 $8 = ($$off>>>0)<(4);
 if (!($8)) {
  (_luaL_argerror($L,3,11591)|0);
 }
 _luaL_buffinit($L,$b);
 if ($7) {
  $9 = ((($1)) + 1|0);
  $10 = HEAP32[$lp>>2]|0;
  $11 = (($10) + -1)|0;
  HEAP32[$lp>>2] = $11;
  $18 = $11;$p$0 = $9;
 } else {
  $$pre = HEAP32[$lp>>2]|0;
  $18 = $$pre;$p$0 = $1;
 }
 $12 = ((($ms)) + 16|0);
 HEAP32[$12>>2] = $L;
 HEAP32[$ms>>2] = 200;
 $13 = ((($ms)) + 4|0);
 HEAP32[$13>>2] = $0;
 $14 = HEAP32[$srcl>>2]|0;
 $15 = (($0) + ($14)|0);
 $16 = ((($ms)) + 8|0);
 HEAP32[$16>>2] = $15;
 $17 = (($p$0) + ($18)|0);
 $19 = ((($ms)) + 12|0);
 HEAP32[$19>>2] = $17;
 $20 = ((($ms)) + 20|0);
 $21 = ((($b)) + 8|0);
 $22 = ((($b)) + 4|0);
 $23 = ((($ms)) + 28|0);
 $24 = ((($ms)) + 24|0);
 $n$0 = 0;$src$0 = $0;
 while(1) {
  $25 = ($n$0>>>0)<($5>>>0);
  if (!($25)) {
   $n$2 = $n$0;$src$2 = $src$0;
   label = 49;
   break;
  }
  HEAP32[$20>>2] = 0;
  $26 = (_match($ms,$src$0,$p$0)|0);
  $27 = ($26|0)==(0|0);
  if ($27) {
   $n$17 = $n$0;
   label = 44;
  } else {
   $28 = (($n$0) + 1)|0;
   $29 = HEAP32[$12>>2]|0;
   switch ($2|0) {
   case 6:  {
    _lua_pushvalue($29,3);
    $30 = HEAP32[$20>>2]|0;
    $31 = ($30|0)==(0);
    $32 = ($src$0|0)!=(0|0);
    $or$cond$i$i = $32 & $31;
    $$$i$i = $or$cond$i$i ? 1 : $30;
    $33 = HEAP32[$12>>2]|0;
    _luaL_checkstack($33,$$$i$i,11312);
    $34 = ($$$i$i|0)>(0);
    if ($34) {
     $i$02$i$i = 0;
     while(1) {
      _push_onecapture($ms,$i$02$i$i,$src$0,$26);
      $35 = (($i$02$i$i) + 1)|0;
      $exitcond$i$i = ($35|0)==($$$i$i|0);
      if ($exitcond$i$i) {
       break;
      } else {
       $i$02$i$i = $35;
      }
     }
    }
    _lua_callk($29,$$$i$i,1,0,0);
    label = 38;
    break;
   }
   case 5:  {
    $36 = HEAP32[$20>>2]|0;
    $37 = ($36|0)>(0);
    do {
     if ($37) {
      $41 = HEAP32[$23>>2]|0;
      $42 = ($41|0)==(-1);
      if ($42) {
       (_luaL_error($29,11352,$vararg_buffer)|0);
       $43 = HEAP32[$12>>2]|0;
       $44 = HEAP32[$24>>2]|0;
       $52 = $43;$53 = $44;
      } else {
       $45 = ($41|0)==(-2);
       $46 = HEAP32[$24>>2]|0;
       if ($45) {
        $47 = HEAP32[$13>>2]|0;
        $48 = $46;
        $49 = $47;
        $50 = (($48) + 1)|0;
        $51 = (($50) - ($49))|0;
        _lua_pushinteger($29,$51);
        break;
       } else {
        $52 = $29;$53 = $46;
       }
      }
      (_lua_pushlstring($52,$53,$41)|0);
     } else {
      $38 = $26;
      $39 = $src$0;
      $40 = (($38) - ($39))|0;
      (_lua_pushlstring($29,$src$0,$40)|0);
     }
    } while(0);
    _lua_gettable($29,3);
    label = 38;
    break;
   }
   default: {
    $54 = (_lua_tolstring($29,3,$l$i$i)|0);
    $55 = HEAP32[$l$i$i>>2]|0;
    $56 = ($55|0)==(0);
    if (!($56)) {
     $57 = $26;
     $58 = $src$0;
     $59 = (($57) - ($58))|0;
     $i$01$i$i = 0;
     while(1) {
      $60 = (($54) + ($i$01$i$i)|0);
      $61 = HEAP8[$60>>0]|0;
      $62 = ($61<<24>>24)==(37);
      do {
       if ($62) {
        $71 = (($i$01$i$i) + 1)|0;
        $72 = (($54) + ($71)|0);
        $73 = HEAP8[$72>>0]|0;
        $74 = $73&255;
        $isdigittmp$i$i = (($74) + -48)|0;
        $isdigit$i$i = ($isdigittmp$i$i>>>0)<(10);
        $75 = $73 << 24 >> 24;
        if ($isdigit$i$i) {
         $86 = ($73<<24>>24)==(48);
         if ($86) {
          _luaL_addlstring($b,$src$0,$59);
          $i$1$i$i = $71;
          break;
         } else {
          $87 = (($75) + -49)|0;
          _push_onecapture($ms,$87,$src$0,$26);
          _luaL_addvalue($b);
          $i$1$i$i = $71;
          break;
         }
        }
        $76 = ($73<<24>>24)==(37);
        if (!($76)) {
         $77 = HEAP32[$12>>2]|0;
         HEAP32[$vararg_buffer1>>2] = 37;
         (_luaL_error($77,11622,$vararg_buffer1)|0);
        }
        $78 = HEAP32[$21>>2]|0;
        $79 = HEAP32[$22>>2]|0;
        $80 = ($78>>>0)<($79>>>0);
        if ($80) {
         $83 = $78;
        } else {
         (_luaL_prepbuffsize($b,1)|0);
         $$pre3$i$i = HEAP32[$21>>2]|0;
         $83 = $$pre3$i$i;
        }
        $81 = HEAP8[$72>>0]|0;
        $82 = (($83) + 1)|0;
        HEAP32[$21>>2] = $82;
        $84 = HEAP32[$b>>2]|0;
        $85 = (($84) + ($83)|0);
        HEAP8[$85>>0] = $81;
        $i$1$i$i = $71;
       } else {
        $63 = HEAP32[$21>>2]|0;
        $64 = HEAP32[$22>>2]|0;
        $65 = ($63>>>0)<($64>>>0);
        if ($65) {
         $67 = $63;$70 = $61;
        } else {
         (_luaL_prepbuffsize($b,1)|0);
         $$pre$i$i = HEAP8[$60>>0]|0;
         $$pre2$i$i = HEAP32[$21>>2]|0;
         $67 = $$pre2$i$i;$70 = $$pre$i$i;
        }
        $66 = (($67) + 1)|0;
        HEAP32[$21>>2] = $66;
        $68 = HEAP32[$b>>2]|0;
        $69 = (($68) + ($67)|0);
        HEAP8[$69>>0] = $70;
        $i$1$i$i = $i$01$i$i;
       }
      } while(0);
      $88 = (($i$1$i$i) + 1)|0;
      $89 = HEAP32[$l$i$i>>2]|0;
      $90 = ($88>>>0)<($89>>>0);
      if ($90) {
       $i$01$i$i = $88;
      } else {
       break;
      }
     }
    }
   }
   }
   if ((label|0) == 38) {
    label = 0;
    $91 = (_lua_toboolean($29,-1)|0);
    $92 = ($91|0)==(0);
    if ($92) {
     _lua_settop($29,-2);
     $93 = $26;
     $94 = $src$0;
     $95 = (($93) - ($94))|0;
     (_lua_pushlstring($29,$src$0,$95)|0);
    } else {
     $96 = (_lua_isstring($29,-1)|0);
     $97 = ($96|0)==(0);
     if ($97) {
      $98 = (_lua_type($29,-1)|0);
      $99 = (_lua_typename($29,$98)|0);
      HEAP32[$vararg_buffer3>>2] = $99;
      (_luaL_error($29,11664,$vararg_buffer3)|0);
     }
    }
    _luaL_addvalue($b);
   }
   $100 = ($26>>>0)>($src$0>>>0);
   if ($100) {
    $n$18 = $28;$src$1 = $26;
   } else {
    $n$17 = $28;
    label = 44;
   }
  }
  if ((label|0) == 44) {
   label = 0;
   $101 = HEAP32[$16>>2]|0;
   $102 = ($src$0>>>0)<($101>>>0);
   if (!($102)) {
    $n$2 = $n$17;$src$2 = $src$0;
    label = 49;
    break;
   }
   $103 = HEAP32[$21>>2]|0;
   $104 = HEAP32[$22>>2]|0;
   $105 = ($103>>>0)<($104>>>0);
   if ($105) {
    $109 = $103;
   } else {
    (_luaL_prepbuffsize($b,1)|0);
    $$pre9 = HEAP32[$21>>2]|0;
    $109 = $$pre9;
   }
   $106 = ((($src$0)) + 1|0);
   $107 = HEAP8[$src$0>>0]|0;
   $108 = (($109) + 1)|0;
   HEAP32[$21>>2] = $108;
   $110 = HEAP32[$b>>2]|0;
   $111 = (($110) + ($109)|0);
   HEAP8[$111>>0] = $107;
   $n$18 = $n$17;$src$1 = $106;
  }
  if ($7) {
   $n$2 = $n$18;$src$2 = $src$1;
   label = 49;
   break;
  } else {
   $n$0 = $n$18;$src$0 = $src$1;
  }
 }
 if ((label|0) == 49) {
  $112 = HEAP32[$16>>2]|0;
  $113 = $112;
  $114 = $src$2;
  $115 = (($113) - ($114))|0;
  _luaL_addlstring($b,$src$2,$115);
  _luaL_pushresult($b);
  _lua_pushinteger($L,$n$2);
  STACKTOP = sp;return 2;
 }
 return (0)|0;
}
function _str_len($L) {
 $L = $L|0;
 var $0 = 0, $l = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $l = sp;
 (_luaL_checklstring($L,1,$l)|0);
 $0 = HEAP32[$l>>2]|0;
 _lua_pushinteger($L,$0);
 STACKTOP = sp;return 1;
}
function _str_lower($L) {
 $L = $L|0;
 var $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $b = 0, $i$01 = 0, $l = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1056|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $l = sp + 1040|0;
 $b = sp;
 $0 = (_luaL_checklstring($L,1,$l)|0);
 $1 = HEAP32[$l>>2]|0;
 $2 = (_luaL_buffinitsize($L,$b,$1)|0);
 $3 = HEAP32[$l>>2]|0;
 $4 = ($3|0)==(0);
 if ($4) {
  $$lcssa = 0;
  _luaL_pushresultsize($b,$$lcssa);
  STACKTOP = sp;return 1;
 } else {
  $i$01 = 0;
 }
 while(1) {
  $5 = (($0) + ($i$01)|0);
  $6 = HEAP8[$5>>0]|0;
  $7 = $6&255;
  $8 = (_tolower($7)|0);
  $9 = $8&255;
  $10 = (($2) + ($i$01)|0);
  HEAP8[$10>>0] = $9;
  $11 = (($i$01) + 1)|0;
  $12 = HEAP32[$l>>2]|0;
  $13 = ($11>>>0)<($12>>>0);
  if ($13) {
   $i$01 = $11;
  } else {
   $$lcssa = $12;
   break;
  }
 }
 _luaL_pushresultsize($b,$$lcssa);
 STACKTOP = sp;return 1;
}
function _str_match($L) {
 $L = $L|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_str_find_aux($L,0)|0);
 return ($0|0);
}
function _str_rep($L) {
 $L = $L|0;
 var $$0 = 0, $$in = 0, $$pre = 0, $$sum = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $b = 0, $l = 0, $lsep = 0, $p$0$be = 0, $p$01 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1056|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $l = sp + 1052|0;
 $lsep = sp + 1048|0;
 $b = sp + 8|0;
 $0 = (_luaL_checklstring($L,1,$l)|0);
 $1 = (_luaL_checkinteger($L,2)|0);
 $2 = (_luaL_optlstring($L,3,20754,$lsep)|0);
 $3 = ($1|0)<(1);
 if ($3) {
  (_lua_pushlstring($L,20754,0)|0);
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $4 = HEAP32[$l>>2]|0;
 $5 = HEAP32[$lsep>>2]|0;
 $6 = (($5) + ($4))|0;
 $7 = ($6>>>0)<($4>>>0);
 if (!($7)) {
  $8 = (2147483647 / ($1>>>0))&-1;
  $9 = ($6>>>0)<($8>>>0);
  if ($9) {
   $11 = Math_imul($4, $1)|0;
   $12 = (($1) + -1)|0;
   $13 = Math_imul($5, $12)|0;
   $14 = (($13) + ($11))|0;
   $15 = (_luaL_buffinitsize($L,$b,$14)|0);
   $16 = ($1|0)>(1);
   $17 = HEAP32[$l>>2]|0;
   _memcpy(($15|0),($0|0),($17|0))|0;
   if ($16) {
    $$in = $1;$p$01 = $15;
    while(1) {
     $18 = (($$in) + -1)|0;
     $19 = HEAP32[$l>>2]|0;
     $20 = (($p$01) + ($19)|0);
     $21 = HEAP32[$lsep>>2]|0;
     $22 = ($21|0)==(0);
     if ($22) {
      $26 = $19;$p$0$be = $20;
     } else {
      _memcpy(($20|0),($2|0),($21|0))|0;
      $23 = HEAP32[$lsep>>2]|0;
      $$sum = (($23) + ($19))|0;
      $24 = (($p$01) + ($$sum)|0);
      $$pre = HEAP32[$l>>2]|0;
      $26 = $$pre;$p$0$be = $24;
     }
     $25 = ($18|0)>(1);
     _memcpy(($p$0$be|0),($0|0),($26|0))|0;
     if ($25) {
      $$in = $18;$p$01 = $p$0$be;
     } else {
      break;
     }
    }
   }
   _luaL_pushresultsize($b,$14);
   $$0 = 1;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $10 = (_luaL_error($L,11274,$vararg_buffer)|0);
 $$0 = $10;
 STACKTOP = sp;return ($$0|0);
}
function _str_reverse($L) {
 $L = $L|0;
 var $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $b = 0, $i$01 = 0, $l = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1056|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $l = sp + 1040|0;
 $b = sp;
 $0 = (_luaL_checklstring($L,1,$l)|0);
 $1 = HEAP32[$l>>2]|0;
 $2 = (_luaL_buffinitsize($L,$b,$1)|0);
 $3 = HEAP32[$l>>2]|0;
 $4 = ($3|0)==(0);
 if ($4) {
  $$lcssa = 0;
  _luaL_pushresultsize($b,$$lcssa);
  STACKTOP = sp;return 1;
 } else {
  $7 = $3;$i$01 = 0;
 }
 while(1) {
  $5 = $i$01 ^ -1;
  $6 = (($7) + ($5))|0;
  $8 = (($0) + ($6)|0);
  $9 = HEAP8[$8>>0]|0;
  $10 = (($2) + ($i$01)|0);
  HEAP8[$10>>0] = $9;
  $11 = (($i$01) + 1)|0;
  $12 = HEAP32[$l>>2]|0;
  $13 = ($12>>>0)>($11>>>0);
  if ($13) {
   $7 = $12;$i$01 = $11;
  } else {
   $$lcssa = $12;
   break;
  }
 }
 _luaL_pushresultsize($b,$$lcssa);
 STACKTOP = sp;return 1;
}
function _str_sub($L) {
 $L = $L|0;
 var $$ = 0, $$0$i = 0, $$0$i1 = 0, $$sum = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $end$0 = 0, $l = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $l = sp;
 $0 = (_luaL_checklstring($L,1,$l)|0);
 $1 = (_luaL_checkinteger($L,2)|0);
 $2 = HEAP32[$l>>2]|0;
 $3 = ($1|0)>(-1);
 if ($3) {
  $$0$i = $1;
 } else {
  $4 = (0 - ($1))|0;
  $5 = ($2>>>0)<($4>>>0);
  if ($5) {
   $$0$i = 0;
  } else {
   $6 = (($1) + 1)|0;
   $7 = (($6) + ($2))|0;
   $$0$i = $7;
  }
 }
 $8 = (_luaL_optinteger($L,3,-1)|0);
 $9 = HEAP32[$l>>2]|0;
 $10 = ($8|0)>(-1);
 if ($10) {
  $$0$i1 = $8;
 } else {
  $11 = (0 - ($8))|0;
  $12 = ($9>>>0)<($11>>>0);
  if ($12) {
   $$0$i1 = 0;
  } else {
   $13 = (($8) + 1)|0;
   $14 = (($13) + ($9))|0;
   $$0$i1 = $14;
  }
 }
 $15 = ($$0$i|0)==(0);
 $$ = $15 ? 1 : $$0$i;
 $16 = ($$0$i1>>>0)>($9>>>0);
 $end$0 = $16 ? $9 : $$0$i1;
 $17 = ($end$0>>>0)<($$>>>0);
 if ($17) {
  (_lua_pushlstring($L,20754,0)|0);
  STACKTOP = sp;return 1;
 } else {
  $$sum = (($$) + -1)|0;
  $18 = (($0) + ($$sum)|0);
  $19 = (1 - ($$))|0;
  $20 = (($19) + ($end$0))|0;
  (_lua_pushlstring($L,$18,$20)|0);
  STACKTOP = sp;return 1;
 }
 return (0)|0;
}
function _str_upper($L) {
 $L = $L|0;
 var $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $b = 0, $i$01 = 0, $l = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1056|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $l = sp + 1040|0;
 $b = sp;
 $0 = (_luaL_checklstring($L,1,$l)|0);
 $1 = HEAP32[$l>>2]|0;
 $2 = (_luaL_buffinitsize($L,$b,$1)|0);
 $3 = HEAP32[$l>>2]|0;
 $4 = ($3|0)==(0);
 if ($4) {
  $$lcssa = 0;
  _luaL_pushresultsize($b,$$lcssa);
  STACKTOP = sp;return 1;
 } else {
  $i$01 = 0;
 }
 while(1) {
  $5 = (($0) + ($i$01)|0);
  $6 = HEAP8[$5>>0]|0;
  $7 = $6&255;
  $8 = (_toupper($7)|0);
  $9 = $8&255;
  $10 = (($2) + ($i$01)|0);
  HEAP8[$10>>0] = $9;
  $11 = (($i$01) + 1)|0;
  $12 = HEAP32[$l>>2]|0;
  $13 = ($11>>>0)<($12>>>0);
  if ($13) {
   $i$01 = $11;
  } else {
   $$lcssa = $12;
   break;
  }
 }
 _luaL_pushresultsize($b,$$lcssa);
 STACKTOP = sp;return 1;
}
function _str_find_aux($L,$find) {
 $L = $L|0;
 $find = $find|0;
 var $$$i = 0, $$0$i = 0, $$0$i512 = 0, $$01$ph = 0, $$014$i = 0, $$023$i = 0, $$1 = 0, $$lcssa16 = 0, $$pre = 0, $$sum = 0, $$sum2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $exitcond$i = 0, $exitcond$i7 = 0, $i$02$i = 0, $i$02$i6 = 0, $init$0 = 0, $lp = 0, $ls = 0, $ms = 0, $or$cond$i = 0, $p$0 = 0, $s1$0$lcssa = 0, $s1$034 = 0, $upto$0$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 288|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ls = sp + 284|0;
 $lp = sp + 280|0;
 $ms = sp;
 $0 = (_luaL_checklstring($L,1,$ls)|0);
 $1 = (_luaL_checklstring($L,2,$lp)|0);
 $2 = (_luaL_optinteger($L,3,1)|0);
 $3 = HEAP32[$ls>>2]|0;
 $4 = ($2|0)>(-1);
 if ($4) {
  $$0$i = $2;
  label = 4;
 } else {
  $5 = (0 - ($2))|0;
  $6 = ($3>>>0)<($5>>>0);
  if ($6) {
   $init$0 = 1;
  } else {
   $7 = (($2) + 1)|0;
   $8 = (($7) + ($3))|0;
   $$0$i = $8;
   label = 4;
  }
 }
 if ((label|0) == 4) {
  $9 = ($$0$i|0)==(0);
  if ($9) {
   $init$0 = 1;
  } else {
   $10 = (($3) + 1)|0;
   $11 = ($$0$i>>>0)>($10>>>0);
   if ($11) {
    _lua_pushnil($L);
    $$1 = 1;
    STACKTOP = sp;return ($$1|0);
   } else {
    $init$0 = $$0$i;
   }
  }
 }
 $12 = ($find|0)!=(0);
 L10: do {
  if ($12) {
   $13 = (_lua_toboolean($L,4)|0);
   $14 = ($13|0)==(0);
   $15 = HEAP32[$lp>>2]|0;
   if ($14) {
    $upto$0$i = 0;
    while(1) {
     $16 = (($1) + ($upto$0$i)|0);
     $17 = (_strpbrk($16,11301)|0);
     $18 = ($17|0)==(0|0);
     if (!($18)) {
      label = 20;
      break L10;
     }
     $19 = (_strlen($16)|0);
     $20 = (($upto$0$i) + 1)|0;
     $21 = (($20) + ($19))|0;
     $22 = ($21>>>0)>($15>>>0);
     if ($22) {
      break;
     } else {
      $upto$0$i = $21;
     }
    }
   }
   $$sum2 = (($init$0) + -1)|0;
   $23 = (($0) + ($$sum2)|0);
   $24 = HEAP32[$ls>>2]|0;
   $25 = (($24) - ($init$0))|0;
   $26 = (($25) + 1)|0;
   $27 = ($15|0)==(0);
   L17: do {
    if ($27) {
     $45 = ($23|0)==(0|0);
     if ($45) {
      break L10;
     } else {
      $$0$i512 = $23;
     }
    } else {
     $28 = ($15>>>0)>($26>>>0);
     if ($28) {
      break L10;
     }
     $29 = (($15) + -1)|0;
     $30 = ($26|0)==($29|0);
     if ($30) {
      break L10;
     }
     $31 = (($26) - ($29))|0;
     $32 = HEAP8[$1>>0]|0;
     $33 = $32 << 24 >> 24;
     $34 = ((($1)) + 1|0);
     $$014$i = $31;$$023$i = $23;
     while(1) {
      $35 = (_memchr($$023$i,$33,$$014$i)|0);
      $36 = ($35|0)==(0|0);
      if ($36) {
       break L10;
      }
      $37 = ((($35)) + 1|0);
      $38 = (_memcmp($37,$34,$29)|0);
      $39 = ($38|0)==(0);
      if ($39) {
       $$0$i512 = $35;
       break L17;
      }
      $40 = $37;
      $41 = $$023$i;
      $42 = (($41) + ($$014$i))|0;
      $43 = (($42) - ($40))|0;
      $44 = ($42|0)==($40|0);
      if ($44) {
       break L10;
      } else {
       $$014$i = $43;$$023$i = $37;
      }
     }
    }
   } while(0);
   $46 = $$0$i512;
   $47 = $0;
   $48 = (($46) - ($47))|0;
   $49 = (($48) + 1)|0;
   _lua_pushinteger($L,$49);
   $50 = HEAP32[$lp>>2]|0;
   $51 = (($48) + ($50))|0;
   _lua_pushinteger($L,$51);
   $$1 = 2;
   STACKTOP = sp;return ($$1|0);
  } else {
   label = 20;
  }
 } while(0);
 do {
  if ((label|0) == 20) {
   $$sum = (($init$0) + -1)|0;
   $52 = (($0) + ($$sum)|0);
   $53 = HEAP8[$1>>0]|0;
   $54 = ($53<<24>>24)==(94);
   if ($54) {
    $55 = ((($1)) + 1|0);
    $56 = HEAP32[$lp>>2]|0;
    $57 = (($56) + -1)|0;
    HEAP32[$lp>>2] = $57;
    $64 = $57;$p$0 = $55;
   } else {
    $$pre = HEAP32[$lp>>2]|0;
    $64 = $$pre;$p$0 = $1;
   }
   $58 = ((($ms)) + 16|0);
   HEAP32[$58>>2] = $L;
   HEAP32[$ms>>2] = 200;
   $59 = ((($ms)) + 4|0);
   HEAP32[$59>>2] = $0;
   $60 = HEAP32[$ls>>2]|0;
   $61 = (($0) + ($60)|0);
   $62 = ((($ms)) + 8|0);
   HEAP32[$62>>2] = $61;
   $63 = (($p$0) + ($64)|0);
   $65 = ((($ms)) + 12|0);
   HEAP32[$65>>2] = $63;
   $66 = ((($ms)) + 20|0);
   HEAP32[$66>>2] = 0;
   $67 = (_match($ms,$52,$p$0)|0);
   $68 = ($67|0)==(0|0);
   L34: do {
    if ($54) {
     if ($68) {
      label = 35;
     } else {
      $$lcssa16 = $67;$s1$0$lcssa = $52;
     }
    } else {
     if ($68) {
      $s1$034 = $52;
      while(1) {
       $86 = HEAP32[$62>>2]|0;
       $87 = ($s1$034>>>0)<($86>>>0);
       if (!($87)) {
        label = 35;
        break L34;
       }
       $88 = ((($s1$034)) + 1|0);
       HEAP32[$66>>2] = 0;
       $89 = (_match($ms,$88,$p$0)|0);
       $90 = ($89|0)==(0|0);
       if ($90) {
        $s1$034 = $88;
       } else {
        $$lcssa16 = $89;$s1$0$lcssa = $88;
        break;
       }
      }
     } else {
      $$lcssa16 = $67;$s1$0$lcssa = $52;
     }
    }
   } while(0);
   if ((label|0) == 35) {
    break;
   }
   if ($12) {
    $69 = $s1$0$lcssa;
    $70 = $0;
    $71 = (1 - ($70))|0;
    $72 = (($71) + ($69))|0;
    _lua_pushinteger($L,$72);
    $73 = $$lcssa16;
    $74 = (($73) - ($70))|0;
    _lua_pushinteger($L,$74);
    $75 = HEAP32[$66>>2]|0;
    $76 = HEAP32[$58>>2]|0;
    _luaL_checkstack($76,$75,11312);
    $77 = ($75|0)>(0);
    if ($77) {
     $i$02$i6 = 0;
     while(1) {
      _push_onecapture($ms,$i$02$i6,0,0);
      $78 = (($i$02$i6) + 1)|0;
      $exitcond$i7 = ($78|0)==($75|0);
      if ($exitcond$i7) {
       break;
      } else {
       $i$02$i6 = $78;
      }
     }
    }
    $79 = (($75) + 2)|0;
    $$01$ph = $79;
   } else {
    $80 = HEAP32[$66>>2]|0;
    $81 = ($80|0)==(0);
    $82 = ($s1$0$lcssa|0)!=(0|0);
    $or$cond$i = $82 & $81;
    $$$i = $or$cond$i ? 1 : $80;
    $83 = HEAP32[$58>>2]|0;
    _luaL_checkstack($83,$$$i,11312);
    $84 = ($$$i|0)>(0);
    if ($84) {
     $i$02$i = 0;
     while(1) {
      _push_onecapture($ms,$i$02$i,$s1$0$lcssa,$$lcssa16);
      $85 = (($i$02$i) + 1)|0;
      $exitcond$i = ($85|0)==($$$i|0);
      if ($exitcond$i) {
       $$01$ph = $$$i;
       break;
      } else {
       $i$02$i = $85;
      }
     }
    } else {
     $$01$ph = $$$i;
    }
   }
   $$1 = $$01$ph;
   STACKTOP = sp;return ($$1|0);
  }
 } while(0);
 _lua_pushnil($L);
 $$1 = 1;
 STACKTOP = sp;return ($$1|0);
}
function _match($ms,$s,$p) {
 $ms = $ms|0;
 $s = $s|0;
 $p = $p|0;
 var $$$i = 0, $$$i14 = 0, $$$i34 = 0, $$$i4 = 0, $$$i42 = 0, $$$i50 = 0, $$$i7 = 0, $$0$i = 0, $$0$i$i = 0, $$0$i$i23 = 0, $$0$i$i25 = 0, $$0$i$i30 = 0, $$0$i12 = 0, $$0$i15 = 0, $$0$i2 = 0, $$0$i5 = 0, $$0$ph$be = 0, $$0$ph136 = 0, $$0$ph136$lcssa = 0, $$0$ph136$lcssa402 = 0;
 var $$0$ph136$lcssa406 = 0, $$0$ph136$lcssa409 = 0, $$01$be = 0, $$01$be$i = 0, $$01$be$i10 = 0, $$01$be$i37 = 0, $$01$be$i45 = 0, $$01$be$i53 = 0, $$01$i = 0, $$01$i$lcssa397 = 0, $$01$i$lcssa399 = 0, $$01$i18 = 0, $$01$i27119 = 0, $$01$i400 = 0, $$01$ph$be = 0, $$01$ph135 = 0, $$01125 = 0, $$01125$lcssa = 0, $$01125$lcssa382 = 0, $$01125$lcssa383 = 0;
 var $$01125$lcssa384 = 0, $$01125$lcssa388 = 0, $$01125$lcssa390 = 0, $$01125391 = 0, $$012$i = 0, $$012$i35 = 0, $$012$i43 = 0, $$012$i51 = 0, $$012$i8 = 0, $$013$i = 0, $$013$i$lcssa = 0, $$013$i$phi = 0, $$1 = 0, $$1$i = 0, $$1$i$lcssa = 0, $$1$i17 = 0, $$1$i17$lcssa = 0, $$2 = 0, $$2$i = 0, $$2$i16 = 0;
 var $$cont$0$i = 0, $$lcssa374 = 0, $$lcssa392 = 0, $$lcssa415 = 0, $$p$i = 0, $$p$i33 = 0, $$p$i41 = 0, $$p$i49 = 0, $$p$i6 = 0, $$phi$trans$insert$i = 0, $$pre = 0, $$pre$i = 0, $$pre$phi207$lcssa393Z2D = 0, $$pre$phi207$lcssa395Z2D = 0, $$pre$phi207396Z2D = 0, $$pre$phi207Z2D = 0, $$pre202 = 0, $$pre206 = 0, $0 = 0, $1 = 0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0;
 var $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0;
 var $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0;
 var $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0;
 var $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0;
 var $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0;
 var $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0;
 var $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0;
 var $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cond = 0, $cont$0$be$i = 0, $cont$04$i = 0, $i$0$i$lcssa = 0, $i$0$i$lcssa210 = 0, $i$0$i112 = 0, $i$1$i109 = 0, $level$0$i$i = 0, $level$0$in$i$i = 0, $ms$idx = 0, $ms$idx$val = 0, $ms$idx$val$i = 0, $ms$idx$val$i$pre = 0, $ms$idx$val$i111 = 0;
 var $ms$idx$val$i203 = 0, $ms$idx$val$i29 = 0, $or$cond = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer11 = 0, $vararg_buffer13 = 0, $vararg_buffer15 = 0, $vararg_buffer17 = 0, $vararg_buffer19 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, $vararg_buffer7 = 0, $vararg_buffer9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer19 = sp + 80|0;
 $vararg_buffer17 = sp + 72|0;
 $vararg_buffer15 = sp + 64|0;
 $vararg_buffer13 = sp + 56|0;
 $vararg_buffer11 = sp + 48|0;
 $vararg_buffer9 = sp + 40|0;
 $vararg_buffer7 = sp + 32|0;
 $vararg_buffer5 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = HEAP32[$ms>>2]|0;
 $1 = (($0) + -1)|0;
 HEAP32[$ms>>2] = $1;
 $2 = ($0|0)==(0);
 if ($2) {
  $3 = ((($ms)) + 16|0);
  $4 = HEAP32[$3>>2]|0;
  (_luaL_error($4,11371,$vararg_buffer)|0);
 }
 $5 = ((($ms)) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==($p|0);
 L4: do {
  if ($7) {
   $$2 = $s;
  } else {
   $ms$idx = ((($ms)) + 8|0);
   $8 = ((($ms)) + 16|0);
   $9 = ((($ms)) + 4|0);
   $10 = ((($ms)) + 20|0);
   $$0$ph136 = $s;$$01$ph135 = $p;$347 = $6;
   L6: while(1) {
    $11 = ((($$0$ph136)) + 1|0);
    $12 = ((($$0$ph136)) + -1|0);
    $$01125 = $$01$ph135;$57 = $347;
    L8: while(1) {
     $13 = HEAP8[$$01125>>0]|0;
     $14 = $13 << 24 >> 24;
     L10: do {
      switch ($14|0) {
      case 40:  {
       $$0$ph136$lcssa = $$0$ph136;$$01125$lcssa = $$01125;
       label = 7;
       break L6;
       break;
      }
      case 41:  {
       $$0$ph136$lcssa402 = $$0$ph136;$$01125$lcssa382 = $$01125;
       label = 16;
       break L6;
       break;
      }
      case 36:  {
       $55 = ((($$01125)) + 1|0);
       $56 = ($55|0)==($57|0);
       if ($56) {
        $$0$ph136$lcssa406 = $$0$ph136;
        label = 23;
        break L6;
       } else {
        $$01$i = $55;$$pre$phi207Z2D = $55;
        label = 89;
       }
       break;
      }
      case 37:  {
       $61 = ((($$01125)) + 1|0);
       $62 = HEAP8[$61>>0]|0;
       $63 = $62 << 24 >> 24;
       switch ($63|0) {
       case 98:  {
        $$01125$lcssa383 = $$01125;$$lcssa374 = $57;
        label = 25;
        break L8;
        break;
       }
       case 57: case 56: case 55: case 54: case 53: case 52: case 51: case 50: case 49: case 48:  {
        $$01125$lcssa384 = $$01125;$$lcssa392 = $62;
        label = 70;
        break L8;
        break;
       }
       case 102:  {
        break;
       }
       default: {
        $194 = ($61|0)==($57|0);
        if ($194) {
         $195 = HEAP32[$8>>2]|0;
         (_luaL_error($195,11497,$vararg_buffer17)|0);
        }
        $196 = ((($$01125)) + 2|0);
        $$01$i = $196;$$pre$phi207Z2D = $61;
        label = 89;
        break L10;
       }
       }
       $86 = ((($$01125)) + 2|0);
       $87 = HEAP8[$86>>0]|0;
       $88 = ($87<<24>>24)==(91);
       if ($88) {
        $92 = 91;
       } else {
        $89 = HEAP32[$8>>2]|0;
        (_luaL_error($89,11462,$vararg_buffer9)|0);
        $$pre = HEAP8[$86>>0]|0;
        $92 = $$pre;
       }
       $90 = ((($$01125)) + 3|0);
       $91 = $92 << 24 >> 24;
       switch ($91|0) {
       case 37:  {
        $93 = HEAP32[$5>>2]|0;
        $94 = ($90|0)==($93|0);
        if ($94) {
         $95 = HEAP32[$8>>2]|0;
         (_luaL_error($95,11497,$vararg_buffer11)|0);
        }
        $96 = ((($$01125)) + 4|0);
        $$01$i18 = $96;
        break;
       }
       case 91:  {
        $97 = HEAP8[$90>>0]|0;
        $98 = ($97<<24>>24)==(94);
        $99 = ((($$01125)) + 4|0);
        $$$i14 = $98 ? $99 : $90;
        $$0$i15 = $$$i14;
        while(1) {
         $100 = HEAP32[$5>>2]|0;
         $101 = ($$0$i15|0)==($100|0);
         if ($101) {
          $102 = HEAP32[$8>>2]|0;
          (_luaL_error($102,11532,$vararg_buffer13)|0);
         }
         $103 = ((($$0$i15)) + 1|0);
         $104 = HEAP8[$$0$i15>>0]|0;
         $105 = ($104<<24>>24)==(37);
         if ($105) {
          $106 = HEAP32[$5>>2]|0;
          $107 = ($103>>>0)<($106>>>0);
          $108 = ((($$0$i15)) + 2|0);
          $$2$i16 = $107 ? $108 : $103;
          $$1$i17 = $$2$i16;
         } else {
          $$1$i17 = $103;
         }
         $109 = HEAP8[$$1$i17>>0]|0;
         $110 = ($109<<24>>24)==(93);
         if ($110) {
          $$1$i17$lcssa = $$1$i17;
          break;
         } else {
          $$0$i15 = $$1$i17;
         }
        }
        $111 = ((($$1$i17$lcssa)) + 1|0);
        $$01$i18 = $111;
        break;
       }
       default: {
        $$01$i18 = $90;
       }
       }
       $112 = HEAP32[$9>>2]|0;
       $113 = ($$0$ph136|0)==($112|0);
       if ($113) {
        $117 = 0;
       } else {
        $114 = HEAP8[$12>>0]|0;
        $115 = $114 << 24 >> 24;
        $117 = $115;
       }
       $116 = $117 & 255;
       $118 = ((($$01$i18)) + -1|0);
       $119 = HEAP8[$90>>0]|0;
       $120 = ($119<<24>>24)==(94);
       $$p$i6 = $120 ? $90 : $86;
       $121 = $120&1;
       $$$i7 = $121 ^ 1;
       $122 = ((($$p$i6)) + 1|0);
       $123 = ($122>>>0)<($118>>>0);
       L53: do {
        if ($123) {
         $124 = $117&255;
         $$012$i8 = $$p$i6;$126 = $122;
         while(1) {
          $125 = HEAP8[$126>>0]|0;
          $127 = ($125<<24>>24)==(37);
          $128 = ((($$012$i8)) + 2|0);
          $129 = HEAP8[$128>>0]|0;
          do {
           if ($127) {
            $130 = $129&255;
            $131 = (_match_class($116,$130)|0);
            $132 = ($131|0)==(0);
            if ($132) {
             $$01$be$i10 = $128;
            } else {
             $$0$i12 = $$$i7;
             break L53;
            }
           } else {
            $133 = ($129<<24>>24)==(45);
            if ($133) {
             $134 = ((($$012$i8)) + 3|0);
             $135 = ($134>>>0)<($118>>>0);
             if ($135) {
              $136 = $125&255;
              $137 = ($136>>>0)>($116>>>0);
              if ($137) {
               $$01$be$i10 = $134;
               break;
              }
              $138 = HEAP8[$134>>0]|0;
              $139 = $138&255;
              $140 = ($139>>>0)<($116>>>0);
              if ($140) {
               $$01$be$i10 = $134;
               break;
              } else {
               $$0$i12 = $$$i7;
               break L53;
              }
             }
            }
            $141 = ($125<<24>>24)==($124<<24>>24);
            if ($141) {
             $$0$i12 = $$$i7;
             break L53;
            } else {
             $$01$be$i10 = $126;
            }
           }
          } while(0);
          $142 = ((($$01$be$i10)) + 1|0);
          $143 = ($142>>>0)<($118>>>0);
          if ($143) {
           $$012$i8 = $$01$be$i10;$126 = $142;
          } else {
           $$0$i12 = $121;
           break;
          }
         }
        } else {
         $$0$i12 = $121;
        }
       } while(0);
       $144 = ($$0$i12|0)==(0);
       if (!($144)) {
        $$2 = 0;
        break L4;
       }
       $145 = HEAP8[$$0$ph136>>0]|0;
       $146 = $145&255;
       $147 = HEAP8[$90>>0]|0;
       $148 = ($147<<24>>24)==(94);
       $$p$i = $148 ? $90 : $86;
       $149 = $148&1;
       $$$i4 = $149 ^ 1;
       $150 = ((($$p$i)) + 1|0);
       $151 = ($150>>>0)<($118>>>0);
       L68: do {
        if ($151) {
         $$012$i = $$p$i;$153 = $150;
         while(1) {
          $152 = HEAP8[$153>>0]|0;
          $154 = ($152<<24>>24)==(37);
          $155 = ((($$012$i)) + 2|0);
          $156 = HEAP8[$155>>0]|0;
          do {
           if ($154) {
            $157 = $156&255;
            $158 = (_match_class($146,$157)|0);
            $159 = ($158|0)==(0);
            if ($159) {
             $$01$be$i = $155;
            } else {
             $$0$i5 = $$$i4;
             break L68;
            }
           } else {
            $160 = ($156<<24>>24)==(45);
            if ($160) {
             $161 = ((($$012$i)) + 3|0);
             $162 = ($161>>>0)<($118>>>0);
             if ($162) {
              $163 = ($152&255)>($145&255);
              if ($163) {
               $$01$be$i = $161;
               break;
              }
              $164 = HEAP8[$161>>0]|0;
              $165 = ($164&255)<($145&255);
              if ($165) {
               $$01$be$i = $161;
               break;
              } else {
               $$0$i5 = $$$i4;
               break L68;
              }
             }
            }
            $166 = ($152<<24>>24)==($145<<24>>24);
            if ($166) {
             $$0$i5 = $$$i4;
             break L68;
            } else {
             $$01$be$i = $153;
            }
           }
          } while(0);
          $167 = ((($$01$be$i)) + 1|0);
          $168 = ($167>>>0)<($118>>>0);
          if ($168) {
           $$012$i = $$01$be$i;$153 = $167;
          } else {
           $$0$i5 = $149;
           break;
          }
         }
        } else {
         $$0$i5 = $149;
        }
       } while(0);
       $169 = ($$0$i5|0)==(0);
       if ($169) {
        $$2 = 0;
        break L4;
       } else {
        $$01$be = $$01$i18;
       }
       break;
      }
      default: {
       $$pre206 = ((($$01125)) + 1|0);
       $cond = ($13<<24>>24)==(91);
       if ($cond) {
        $197 = HEAP8[$$pre206>>0]|0;
        $198 = ($197<<24>>24)==(94);
        $199 = ((($$01125)) + 2|0);
        $$$i = $198 ? $199 : $$pre206;
        $$0$i2 = $$$i;$201 = $57;
        while(1) {
         $200 = ($$0$i2|0)==($201|0);
         if ($200) {
          $202 = HEAP32[$8>>2]|0;
          (_luaL_error($202,11532,$vararg_buffer19)|0);
         }
         $203 = ((($$0$i2)) + 1|0);
         $204 = HEAP8[$$0$i2>>0]|0;
         $205 = ($204<<24>>24)==(37);
         if ($205) {
          $206 = HEAP32[$5>>2]|0;
          $207 = ($203>>>0)<($206>>>0);
          $208 = ((($$0$i2)) + 2|0);
          $$2$i = $207 ? $208 : $203;
          $$1$i = $$2$i;
         } else {
          $$1$i = $203;
         }
         $209 = HEAP8[$$1$i>>0]|0;
         $210 = ($209<<24>>24)==(93);
         if ($210) {
          $$1$i$lcssa = $$1$i;
          break;
         }
         $$pre202 = HEAP32[$5>>2]|0;
         $$0$i2 = $$1$i;$201 = $$pre202;
        }
        $211 = ((($$1$i$lcssa)) + 1|0);
        $$01$i = $211;$$pre$phi207Z2D = $$pre206;
        label = 89;
       } else {
        $$01$i = $$pre206;$$pre$phi207Z2D = $$pre206;
        label = 89;
       }
      }
      }
     } while(0);
     L81: do {
      if ((label|0) == 89) {
       label = 0;
       $ms$idx$val = HEAP32[$ms$idx>>2]|0;
       $212 = ($ms$idx$val>>>0)>($$0$ph136>>>0);
       do {
        if ($212) {
         $214 = HEAP8[$$0$ph136>>0]|0;
         $215 = $214&255;
         $216 = HEAP8[$$01125>>0]|0;
         $217 = $216 << 24 >> 24;
         L85: do {
          switch ($217|0) {
          case 46:  {
           $218 = HEAP8[$$01$i>>0]|0;
           $254 = $218;
           break;
          }
          case 37:  {
           $219 = HEAP8[$$pre$phi207Z2D>>0]|0;
           $220 = $219&255;
           $221 = (_match_class($215,$220)|0);
           $$0$i = $221;
           label = 104;
           break;
          }
          case 91:  {
           $222 = ((($$01$i)) + -1|0);
           $223 = HEAP8[$$pre$phi207Z2D>>0]|0;
           $224 = ($223<<24>>24)==(94);
           $$p$i33 = $224 ? $$pre$phi207Z2D : $$01125;
           $225 = $224&1;
           $$$i34 = $225 ^ 1;
           $226 = ((($$p$i33)) + 1|0);
           $227 = ($226>>>0)<($222>>>0);
           if ($227) {
            $$012$i35 = $$p$i33;$229 = $226;
            while(1) {
             $228 = HEAP8[$229>>0]|0;
             $230 = ($228<<24>>24)==(37);
             $231 = ((($$012$i35)) + 2|0);
             $232 = HEAP8[$231>>0]|0;
             do {
              if ($230) {
               $233 = $232&255;
               $234 = (_match_class($215,$233)|0);
               $235 = ($234|0)==(0);
               if ($235) {
                $$01$be$i37 = $231;
               } else {
                $$0$i = $$$i34;
                label = 104;
                break L85;
               }
              } else {
               $236 = ($232<<24>>24)==(45);
               if ($236) {
                $237 = ((($$012$i35)) + 3|0);
                $238 = ($237>>>0)<($222>>>0);
                if ($238) {
                 $239 = ($228&255)>($214&255);
                 if ($239) {
                  $$01$be$i37 = $237;
                  break;
                 }
                 $240 = HEAP8[$237>>0]|0;
                 $241 = ($240&255)<($214&255);
                 if ($241) {
                  $$01$be$i37 = $237;
                  break;
                 } else {
                  $$0$i = $$$i34;
                  label = 104;
                  break L85;
                 }
                }
               }
               $242 = ($228<<24>>24)==($214<<24>>24);
               if ($242) {
                $$0$i = $$$i34;
                label = 104;
                break L85;
               } else {
                $$01$be$i37 = $229;
               }
              }
             } while(0);
             $243 = ((($$01$be$i37)) + 1|0);
             $244 = ($243>>>0)<($222>>>0);
             if ($244) {
              $$012$i35 = $$01$be$i37;$229 = $243;
             } else {
              $$0$i = $225;
              label = 104;
              break;
             }
            }
           } else {
            $$0$i = $225;
            label = 104;
           }
           break;
          }
          default: {
           $245 = ($216<<24>>24)==($214<<24>>24);
           $246 = $245&1;
           $$0$i = $246;
           label = 104;
          }
          }
         } while(0);
         if ((label|0) == 104) {
          label = 0;
          $247 = ($$0$i|0)==(0);
          $248 = HEAP8[$$01$i>>0]|0;
          if ($247) {
           $249 = $248;
           break;
          } else {
           $254 = $248;
          }
         }
         $253 = $254 << 24 >> 24;
         switch ($253|0) {
         case 43:  {
          $$01$i$lcssa397 = $$01$i;$$01125$lcssa388 = $$01125;$$lcssa415 = $11;$$pre$phi207$lcssa393Z2D = $$pre$phi207Z2D;
          label = 112;
          break L6;
          break;
         }
         case 42:  {
          $$01$i400 = $$01$i;$$01125391 = $$01125;$$1 = $$0$ph136;$$pre$phi207396Z2D = $$pre$phi207Z2D;
          break L6;
          break;
         }
         case 45:  {
          $$0$ph136$lcssa409 = $$0$ph136;$$01$i$lcssa399 = $$01$i;$$01125$lcssa390 = $$01125;$$pre$phi207$lcssa395Z2D = $$pre$phi207Z2D;
          label = 109;
          break L6;
          break;
         }
         case 63:  {
          break;
         }
         default: {
          $$0$ph$be = $11;$$01$ph$be = $$01$i;
          break L8;
         }
         }
         $259 = ((($$01$i)) + 1|0);
         $260 = (_match($ms,$11,$259)|0);
         $261 = ($260|0)==(0|0);
         if ($261) {
          $$01$be = $259;
          break L81;
         } else {
          $$2 = $260;
          break L4;
         }
        } else {
         $213 = HEAP8[$$01$i>>0]|0;
         $249 = $213;
        }
       } while(0);
       switch ($249<<24>>24) {
       case 45: case 63: case 42:  {
        break;
       }
       default: {
        $$2 = 0;
        break L4;
       }
       }
       $250 = ((($$01$i)) + 1|0);
       $$01$be = $250;
      }
     } while(0);
     $251 = HEAP32[$5>>2]|0;
     $252 = ($$01$be|0)==($251|0);
     if ($252) {
      $$2 = $$0$ph136;
      break L4;
     } else {
      $$01125 = $$01$be;$57 = $251;
     }
    }
    if ((label|0) == 25) {
     label = 0;
     $64 = ((($$01125$lcssa383)) + 2|0);
     $65 = ((($$lcssa374)) + -1|0);
     $66 = ($65>>>0)>($64>>>0);
     if (!($66)) {
      $67 = HEAP32[$8>>2]|0;
      (_luaL_error($67,11415,$vararg_buffer7)|0);
     }
     $68 = HEAP8[$$0$ph136>>0]|0;
     $69 = HEAP8[$64>>0]|0;
     $70 = ($68<<24>>24)==($69<<24>>24);
     if (!($70)) {
      $$2 = 0;
      break L4;
     }
     $71 = ((($$01125$lcssa383)) + 3|0);
     $72 = HEAP8[$71>>0]|0;
     $73 = HEAP32[$ms$idx>>2]|0;
     $74 = ($11>>>0)<($73>>>0);
     if ($74) {
      $$013$i = $$0$ph136;$76 = $11;$cont$04$i = 1;
     } else {
      $$2 = 0;
      break L4;
     }
     while(1) {
      $75 = HEAP8[$76>>0]|0;
      $77 = ($75<<24>>24)==($72<<24>>24);
      if ($77) {
       $78 = (($cont$04$i) + -1)|0;
       $79 = ($78|0)==(0);
       if ($79) {
        $$013$i$lcssa = $$013$i;
        break;
       } else {
        $cont$0$be$i = $78;
       }
      } else {
       $82 = ($75<<24>>24)==($68<<24>>24);
       $83 = $82&1;
       $$cont$0$i = (($83) + ($cont$04$i))|0;
       $cont$0$be$i = $$cont$0$i;
      }
      $80 = ((($76)) + 1|0);
      $81 = ($80>>>0)<($73>>>0);
      if ($81) {
       $$013$i$phi = $76;$76 = $80;$cont$04$i = $cont$0$be$i;$$013$i = $$013$i$phi;
      } else {
       $$2 = 0;
       break L4;
      }
     }
     $84 = ((($$013$i$lcssa)) + 2|0);
     $85 = ((($$01125$lcssa383)) + 4|0);
     $$0$ph$be = $84;$$01$ph$be = $85;
    }
    else if ((label|0) == 70) {
     label = 0;
     $170 = $$lcssa392&255;
     $171 = (($170) + -49)|0;
     $172 = ($$lcssa392&255)<(49);
     if ($172) {
      label = 73;
     } else {
      $173 = HEAP32[$10>>2]|0;
      $174 = ($171|0)<($173|0);
      if ($174) {
       $175 = (((((($ms)) + 24|0) + ($171<<3)|0)) + 4|0);
       $176 = HEAP32[$175>>2]|0;
       $177 = ($176|0)==(-1);
       if ($177) {
        label = 73;
       } else {
        $$0$i$i = $171;$186 = $176;
       }
      } else {
       label = 73;
      }
     }
     if ((label|0) == 73) {
      label = 0;
      $178 = HEAP32[$8>>2]|0;
      $179 = (($170) + -48)|0;
      HEAP32[$vararg_buffer15>>2] = $179;
      $180 = (_luaL_error($178,11564,$vararg_buffer15)|0);
      $$phi$trans$insert$i = (((((($ms)) + 24|0) + ($180<<3)|0)) + 4|0);
      $$pre$i = HEAP32[$$phi$trans$insert$i>>2]|0;
      $$0$i$i = $180;$186 = $$pre$i;
     }
     $181 = HEAP32[$ms$idx>>2]|0;
     $182 = $181;
     $183 = $$0$ph136;
     $184 = (($182) - ($183))|0;
     $185 = ($184>>>0)<($186>>>0);
     if ($185) {
      $$2 = 0;
      break L4;
     }
     $187 = (((($ms)) + 24|0) + ($$0$i$i<<3)|0);
     $188 = HEAP32[$187>>2]|0;
     $189 = (_memcmp($188,$$0$ph136,$186)|0);
     $190 = ($189|0)!=(0);
     $191 = (($$0$ph136) + ($186)|0);
     $192 = ($191|0)==(0|0);
     $or$cond = $192 | $190;
     if ($or$cond) {
      $$2 = 0;
      break L4;
     }
     $193 = ((($$01125$lcssa384)) + 2|0);
     $$0$ph$be = $191;$$01$ph$be = $193;
    }
    $343 = HEAP32[$5>>2]|0;
    $344 = ($$01$ph$be|0)==($343|0);
    if ($344) {
     $$2 = $$0$ph$be;
     break L4;
    } else {
     $$0$ph136 = $$0$ph$be;$$01$ph135 = $$01$ph$be;$347 = $343;
    }
   }
   if ((label|0) == 7) {
    $15 = ((($$01125$lcssa)) + 1|0);
    $16 = HEAP8[$15>>0]|0;
    $17 = ($16<<24>>24)==(41);
    if ($17) {
     $18 = ((($$01125$lcssa)) + 2|0);
     $19 = HEAP32[$10>>2]|0;
     $20 = ($19|0)>(31);
     if ($20) {
      $21 = HEAP32[$8>>2]|0;
      (_luaL_error($21,11312,$vararg_buffer1)|0);
     }
     $22 = (((($ms)) + 24|0) + ($19<<3)|0);
     HEAP32[$22>>2] = $$0$ph136$lcssa;
     $23 = (((((($ms)) + 24|0) + ($19<<3)|0)) + 4|0);
     HEAP32[$23>>2] = -2;
     $24 = (($19) + 1)|0;
     HEAP32[$10>>2] = $24;
     $25 = (_match($ms,$$0$ph136$lcssa,$18)|0);
     $26 = ($25|0)==(0|0);
     if (!($26)) {
      $$2 = $25;
      break;
     }
     $27 = HEAP32[$10>>2]|0;
     $28 = (($27) + -1)|0;
     HEAP32[$10>>2] = $28;
     $$2 = 0;
     break;
    } else {
     $29 = HEAP32[$10>>2]|0;
     $30 = ($29|0)>(31);
     if ($30) {
      $31 = HEAP32[$8>>2]|0;
      (_luaL_error($31,11312,$vararg_buffer3)|0);
     }
     $32 = (((($ms)) + 24|0) + ($29<<3)|0);
     HEAP32[$32>>2] = $$0$ph136$lcssa;
     $33 = (((((($ms)) + 24|0) + ($29<<3)|0)) + 4|0);
     HEAP32[$33>>2] = -1;
     $34 = (($29) + 1)|0;
     HEAP32[$10>>2] = $34;
     $35 = (_match($ms,$$0$ph136$lcssa,$15)|0);
     $36 = ($35|0)==(0|0);
     if (!($36)) {
      $$2 = $35;
      break;
     }
     $37 = HEAP32[$10>>2]|0;
     $38 = (($37) + -1)|0;
     HEAP32[$10>>2] = $38;
     $$2 = 0;
     break;
    }
   }
   else if ((label|0) == 16) {
    $39 = ((($$01125$lcssa382)) + 1|0);
    $40 = HEAP32[$10>>2]|0;
    $level$0$in$i$i = $40;
    while(1) {
     $level$0$i$i = (($level$0$in$i$i) + -1)|0;
     $41 = ($level$0$in$i$i|0)>(0);
     if (!($41)) {
      label = 19;
      break;
     }
     $42 = (((((($ms)) + 24|0) + ($level$0$i$i<<3)|0)) + 4|0);
     $43 = HEAP32[$42>>2]|0;
     $44 = ($43|0)==(-1);
     if ($44) {
      $$0$i$i23 = $level$0$i$i;
      break;
     } else {
      $level$0$in$i$i = $level$0$i$i;
     }
    }
    if ((label|0) == 19) {
     $45 = HEAP32[$8>>2]|0;
     $46 = (_luaL_error($45,11391,$vararg_buffer5)|0);
     $$0$i$i23 = $46;
    }
    $47 = (((($ms)) + 24|0) + ($$0$i$i23<<3)|0);
    $48 = HEAP32[$47>>2]|0;
    $49 = $$0$ph136$lcssa402;
    $50 = $48;
    $51 = (($49) - ($50))|0;
    $52 = (((((($ms)) + 24|0) + ($$0$i$i23<<3)|0)) + 4|0);
    HEAP32[$52>>2] = $51;
    $53 = (_match($ms,$$0$ph136$lcssa402,$39)|0);
    $54 = ($53|0)==(0|0);
    if (!($54)) {
     $$2 = $53;
     break;
    }
    HEAP32[$52>>2] = -1;
    $$2 = 0;
    break;
   }
   else if ((label|0) == 23) {
    $58 = HEAP32[$ms$idx>>2]|0;
    $59 = ($$0$ph136$lcssa406|0)==($58|0);
    $60 = $59 ? $$0$ph136$lcssa406 : 0;
    $$2 = $60;
    break;
   }
   else if ((label|0) == 109) {
    $255 = ((($$01$i$lcssa399)) + 1|0);
    $256 = (_match($ms,$$0$ph136$lcssa409,$255)|0);
    $257 = ($256|0)==(0|0);
    if (!($257)) {
     $$2 = $256;
     break;
    }
    $258 = ((($$01$i$lcssa399)) + -1|0);
    $$01$i27119 = $$0$ph136$lcssa409;
    while(1) {
     $ms$idx$val$i29 = HEAP32[$ms$idx>>2]|0;
     $307 = ($ms$idx$val$i29>>>0)>($$01$i27119>>>0);
     if (!($307)) {
      $$2 = 0;
      break L4;
     }
     $308 = HEAP8[$$01$i27119>>0]|0;
     $309 = $308&255;
     $310 = HEAP8[$$01125$lcssa390>>0]|0;
     $311 = $310 << 24 >> 24;
     L139: do {
      switch ($311|0) {
      case 46:  {
       break;
      }
      case 37:  {
       $312 = HEAP8[$$pre$phi207$lcssa395Z2D>>0]|0;
       $313 = $312&255;
       $314 = (_match_class($309,$313)|0);
       $$0$i$i30 = $314;
       label = 147;
       break;
      }
      case 91:  {
       $315 = HEAP8[$$pre$phi207$lcssa395Z2D>>0]|0;
       $316 = ($315<<24>>24)==(94);
       $$p$i49 = $316 ? $$pre$phi207$lcssa395Z2D : $$01125$lcssa390;
       $317 = $316&1;
       $$$i50 = $317 ^ 1;
       $318 = ((($$p$i49)) + 1|0);
       $319 = ($318>>>0)<($258>>>0);
       if ($319) {
        $$012$i51 = $$p$i49;$321 = $318;
        while(1) {
         $320 = HEAP8[$321>>0]|0;
         $322 = ($320<<24>>24)==(37);
         $323 = ((($$012$i51)) + 2|0);
         $324 = HEAP8[$323>>0]|0;
         do {
          if ($322) {
           $325 = $324&255;
           $326 = (_match_class($309,$325)|0);
           $327 = ($326|0)==(0);
           if ($327) {
            $$01$be$i53 = $323;
           } else {
            $$0$i$i30 = $$$i50;
            label = 147;
            break L139;
           }
          } else {
           $328 = ($324<<24>>24)==(45);
           if ($328) {
            $329 = ((($$012$i51)) + 3|0);
            $330 = ($329>>>0)<($258>>>0);
            if ($330) {
             $331 = ($320&255)>($308&255);
             if ($331) {
              $$01$be$i53 = $329;
              break;
             }
             $332 = HEAP8[$329>>0]|0;
             $333 = ($332&255)<($308&255);
             if ($333) {
              $$01$be$i53 = $329;
              break;
             } else {
              $$0$i$i30 = $$$i50;
              label = 147;
              break L139;
             }
            }
           }
           $334 = ($320<<24>>24)==($308<<24>>24);
           if ($334) {
            $$0$i$i30 = $$$i50;
            label = 147;
            break L139;
           } else {
            $$01$be$i53 = $321;
           }
          }
         } while(0);
         $335 = ((($$01$be$i53)) + 1|0);
         $336 = ($335>>>0)<($258>>>0);
         if ($336) {
          $$012$i51 = $$01$be$i53;$321 = $335;
         } else {
          $$0$i$i30 = $317;
          label = 147;
          break;
         }
        }
       } else {
        $$0$i$i30 = $317;
        label = 147;
       }
       break;
      }
      default: {
       $337 = ($310<<24>>24)==($308<<24>>24);
       $338 = $337&1;
       $$0$i$i30 = $338;
       label = 147;
      }
      }
     } while(0);
     if ((label|0) == 147) {
      label = 0;
      $339 = ($$0$i$i30|0)==(0);
      if ($339) {
       $$2 = 0;
       break L4;
      }
     }
     $340 = ((($$01$i27119)) + 1|0);
     $341 = (_match($ms,$340,$255)|0);
     $342 = ($341|0)==(0|0);
     if ($342) {
      $$01$i27119 = $340;
     } else {
      $$2 = $341;
      break L4;
     }
    }
   }
   else if ((label|0) == 112) {
    $$01$i400 = $$01$i$lcssa397;$$01125391 = $$01125$lcssa388;$$1 = $$lcssa415;$$pre$phi207396Z2D = $$pre$phi207$lcssa393Z2D;
   }
   $ms$idx$val$i111 = HEAP32[$ms$idx>>2]|0;
   $262 = ($ms$idx$val$i111>>>0)>($$1>>>0);
   if ($262) {
    $263 = ((($$01$i400)) + -1|0);
    $267 = $$1;$i$0$i112 = 0;$ms$idx$val$i203 = $ms$idx$val$i111;
    while(1) {
     $266 = HEAP8[$267>>0]|0;
     $268 = $266&255;
     $269 = HEAP8[$$01125391>>0]|0;
     $270 = $269 << 24 >> 24;
     L183: do {
      switch ($270|0) {
      case 46:  {
       $ms$idx$val$i = $ms$idx$val$i203;
       break;
      }
      case 37:  {
       $271 = HEAP8[$$pre$phi207396Z2D>>0]|0;
       $272 = $271&255;
       $273 = (_match_class($268,$272)|0);
       $$0$i$i25 = $273;
       label = 129;
       break;
      }
      case 91:  {
       $274 = HEAP8[$$pre$phi207396Z2D>>0]|0;
       $275 = ($274<<24>>24)==(94);
       $$p$i41 = $275 ? $$pre$phi207396Z2D : $$01125391;
       $276 = $275&1;
       $$$i42 = $276 ^ 1;
       $277 = ((($$p$i41)) + 1|0);
       $278 = ($277>>>0)<($263>>>0);
       if ($278) {
        $$012$i43 = $$p$i41;$280 = $277;
        while(1) {
         $279 = HEAP8[$280>>0]|0;
         $281 = ($279<<24>>24)==(37);
         $282 = ((($$012$i43)) + 2|0);
         $283 = HEAP8[$282>>0]|0;
         do {
          if ($281) {
           $284 = $283&255;
           $285 = (_match_class($268,$284)|0);
           $286 = ($285|0)==(0);
           if ($286) {
            $$01$be$i45 = $282;
           } else {
            $$0$i$i25 = $$$i42;
            label = 129;
            break L183;
           }
          } else {
           $287 = ($283<<24>>24)==(45);
           if ($287) {
            $288 = ((($$012$i43)) + 3|0);
            $289 = ($288>>>0)<($263>>>0);
            if ($289) {
             $290 = ($279&255)>($266&255);
             if ($290) {
              $$01$be$i45 = $288;
              break;
             }
             $291 = HEAP8[$288>>0]|0;
             $292 = ($291&255)<($266&255);
             if ($292) {
              $$01$be$i45 = $288;
              break;
             } else {
              $$0$i$i25 = $$$i42;
              label = 129;
              break L183;
             }
            }
           }
           $293 = ($279<<24>>24)==($266<<24>>24);
           if ($293) {
            $$0$i$i25 = $$$i42;
            label = 129;
            break L183;
           } else {
            $$01$be$i45 = $280;
           }
          }
         } while(0);
         $294 = ((($$01$be$i45)) + 1|0);
         $295 = ($294>>>0)<($263>>>0);
         if ($295) {
          $$012$i43 = $$01$be$i45;$280 = $294;
         } else {
          $$0$i$i25 = $276;
          label = 129;
          break;
         }
        }
       } else {
        $$0$i$i25 = $276;
        label = 129;
       }
       break;
      }
      default: {
       $296 = ($269<<24>>24)==($266<<24>>24);
       $297 = $296&1;
       $$0$i$i25 = $297;
       label = 129;
      }
      }
     } while(0);
     if ((label|0) == 129) {
      label = 0;
      $298 = ($$0$i$i25|0)==(0);
      if ($298) {
       $i$0$i$lcssa = $i$0$i112;
       break;
      }
      $ms$idx$val$i$pre = HEAP32[$ms$idx>>2]|0;
      $ms$idx$val$i = $ms$idx$val$i$pre;
     }
     $299 = (($i$0$i112) + 1)|0;
     $300 = (($$1) + ($299)|0);
     $301 = ($ms$idx$val$i>>>0)>($300>>>0);
     if ($301) {
      $267 = $300;$i$0$i112 = $299;$ms$idx$val$i203 = $ms$idx$val$i;
     } else {
      $i$0$i$lcssa = $299;
      break;
     }
    }
    $264 = ($i$0$i$lcssa|0)>(-1);
    if ($264) {
     $i$0$i$lcssa210 = $i$0$i$lcssa;
    } else {
     $$2 = 0;
     break;
    }
   } else {
    $i$0$i$lcssa210 = 0;
   }
   $265 = ((($$01$i400)) + 1|0);
   $i$1$i109 = $i$0$i$lcssa210;
   while(1) {
    $304 = (($$1) + ($i$1$i109)|0);
    $305 = (_match($ms,$304,$265)|0);
    $306 = ($305|0)==(0|0);
    if (!($306)) {
     $$2 = $305;
     break L4;
    }
    $302 = (($i$1$i109) + -1)|0;
    $303 = ($i$1$i109|0)>(0);
    if ($303) {
     $i$1$i109 = $302;
    } else {
     $$2 = 0;
     break;
    }
   }
  }
 } while(0);
 $345 = HEAP32[$ms>>2]|0;
 $346 = (($345) + 1)|0;
 HEAP32[$ms>>2] = $346;
 STACKTOP = sp;return ($$2|0);
}
function _push_onecapture($ms,$i,$s,$e) {
 $ms = $ms|0;
 $i = $i|0;
 $s = $s|0;
 $e = $e|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = ((($ms)) + 20|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)>($i|0);
 if (!($2)) {
  $3 = ($i|0)==(0);
  $4 = ((($ms)) + 16|0);
  $5 = HEAP32[$4>>2]|0;
  if ($3) {
   $6 = $e;
   $7 = $s;
   $8 = (($6) - ($7))|0;
   (_lua_pushlstring($5,$s,$8)|0);
   STACKTOP = sp;return;
  } else {
   (_luaL_error($5,11330,$vararg_buffer)|0);
   STACKTOP = sp;return;
  }
 }
 $9 = (((((($ms)) + 24|0) + ($i<<3)|0)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)==(-1);
 if ($11) {
  $12 = ((($ms)) + 16|0);
  $13 = HEAP32[$12>>2]|0;
  (_luaL_error($13,11352,$vararg_buffer1)|0);
  $14 = HEAP32[$12>>2]|0;
  $15 = (((($ms)) + 24|0) + ($i<<3)|0);
  $16 = HEAP32[$15>>2]|0;
  $28 = $14;$29 = $16;
 } else {
  $17 = ($10|0)==(-2);
  $18 = ((($ms)) + 16|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = (((($ms)) + 24|0) + ($i<<3)|0);
  $21 = HEAP32[$20>>2]|0;
  if ($17) {
   $22 = ((($ms)) + 4|0);
   $23 = HEAP32[$22>>2]|0;
   $24 = $21;
   $25 = $23;
   $26 = (($24) + 1)|0;
   $27 = (($26) - ($25))|0;
   _lua_pushinteger($19,$27);
   STACKTOP = sp;return;
  } else {
   $28 = $19;$29 = $21;
  }
 }
 (_lua_pushlstring($28,$29,$10)|0);
 STACKTOP = sp;return;
}
function _match_class($c,$cl) {
 $c = $c|0;
 $cl = $cl|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $isdigit = 0, $isdigittmp = 0, $res$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_tolower($cl)|0);
 do {
  switch ($0|0) {
  case 97:  {
   $1 = (_isalpha($c)|0);
   $res$0 = $1;
   break;
  }
  case 99:  {
   $2 = (_iscntrl($c)|0);
   $res$0 = $2;
   break;
  }
  case 100:  {
   $isdigittmp = (($c) + -48)|0;
   $isdigit = ($isdigittmp>>>0)<(10);
   $3 = $isdigit&1;
   $res$0 = $3;
   break;
  }
  case 103:  {
   $4 = (_isgraph($c)|0);
   $res$0 = $4;
   break;
  }
  case 108:  {
   $5 = (_islower($c)|0);
   $res$0 = $5;
   break;
  }
  case 112:  {
   $6 = (_ispunct($c)|0);
   $res$0 = $6;
   break;
  }
  case 115:  {
   $7 = (_isspace($c)|0);
   $res$0 = $7;
   break;
  }
  case 117:  {
   $8 = (_isupper($c)|0);
   $res$0 = $8;
   break;
  }
  case 119:  {
   $9 = (_isalnum($c)|0);
   $res$0 = $9;
   break;
  }
  case 120:  {
   $10 = (_isxdigit($c)|0);
   $res$0 = $10;
   break;
  }
  case 122:  {
   $11 = ($c|0)==(0);
   $12 = $11&1;
   $res$0 = $12;
   break;
  }
  default: {
   $13 = ($cl|0)==($c|0);
   $14 = $13&1;
   $$0 = $14;
   return ($$0|0);
  }
  }
 } while(0);
 $15 = (_islower($cl)|0);
 $16 = ($15|0)==(0);
 $17 = ($res$0|0)==(0);
 $18 = $17&1;
 $19 = $16 ? $18 : $res$0;
 $$0 = $19;
 return ($$0|0);
}
function _gmatch_aux($L) {
 $L = $L|0;
 var $$ = 0, $$$i = 0, $$0 = 0, $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond$i = 0, $i$02$i = 0, $lp = 0, $ls = 0, $ms = 0, $or$cond$i = 0;
 var $src$04 = 0, $src$04$lcssa = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 288|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ms = sp + 8|0;
 $ls = sp + 4|0;
 $lp = sp;
 $0 = (_lua_tolstring($L,-1001001,$ls)|0);
 $1 = (_lua_tolstring($L,-1001002,$lp)|0);
 $2 = ((($ms)) + 16|0);
 HEAP32[$2>>2] = $L;
 HEAP32[$ms>>2] = 200;
 $3 = ((($ms)) + 4|0);
 HEAP32[$3>>2] = $0;
 $4 = HEAP32[$ls>>2]|0;
 $5 = (($0) + ($4)|0);
 $6 = ((($ms)) + 8|0);
 HEAP32[$6>>2] = $5;
 $7 = HEAP32[$lp>>2]|0;
 $8 = (($1) + ($7)|0);
 $9 = ((($ms)) + 12|0);
 HEAP32[$9>>2] = $8;
 $10 = (_lua_tointegerx($L,-1001003,0)|0);
 $11 = ($10|0)>($4|0);
 if ($11) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $12 = (($0) + ($10)|0);
 $13 = ((($ms)) + 20|0);
 $src$04 = $12;
 while(1) {
  HEAP32[$13>>2] = 0;
  $14 = (_match($ms,$src$04,$1)|0);
  $15 = ($14|0)==(0|0);
  if (!($15)) {
   $$lcssa = $14;$src$04$lcssa = $src$04;
   break;
  }
  $27 = ((($src$04)) + 1|0);
  $28 = HEAP32[$6>>2]|0;
  $29 = ($27>>>0)>($28>>>0);
  if ($29) {
   $$0 = 0;
   label = 7;
   break;
  } else {
   $src$04 = $27;
  }
 }
 if ((label|0) == 7) {
  STACKTOP = sp;return ($$0|0);
 }
 $16 = $$lcssa;
 $17 = $0;
 $18 = (($16) - ($17))|0;
 $19 = ($$lcssa|0)==($src$04$lcssa|0);
 $20 = $19&1;
 $$ = (($18) + ($20))|0;
 _lua_pushinteger($L,$$);
 _lua_replace($L,-1001003);
 $21 = HEAP32[$13>>2]|0;
 $22 = ($21|0)==(0);
 $23 = ($src$04$lcssa|0)!=(0|0);
 $or$cond$i = $23 & $22;
 $$$i = $or$cond$i ? 1 : $21;
 $24 = HEAP32[$2>>2]|0;
 _luaL_checkstack($24,$$$i,11312);
 $25 = ($$$i|0)>(0);
 if ($25) {
  $i$02$i = 0;
 } else {
  $$0 = $$$i;
  STACKTOP = sp;return ($$0|0);
 }
 while(1) {
  _push_onecapture($ms,$i$02$i,$src$04$lcssa,$$lcssa);
  $26 = (($i$02$i) + 1)|0;
  $exitcond$i = ($26|0)==($$$i|0);
  if ($exitcond$i) {
   $$0 = $$$i;
   break;
  } else {
   $i$02$i = $26;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _writer($L,$b,$size,$B) {
 $L = $L|0;
 $b = $b|0;
 $size = $size|0;
 $B = $B|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _luaL_addlstring($B,$b,$size);
 return 0;
}
function _luaopen_table($L) {
 $L = $L|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _lua_createtable($L,0,7);
 _luaL_setfuncs($L,1772,0);
 _lua_getfield($L,-1,11975);
 _lua_setglobal($L,11975);
 return 1;
}
function _tconcat($L) {
 $L = $L|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $b = 0;
 var $exitcond = 0, $i$02 = 0, $lsep = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_ptr1 = 0, $vararg_ptr5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1072|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $b = sp + 24|0;
 $lsep = sp + 16|0;
 $0 = (_luaL_optlstring($L,2,20754,$lsep)|0);
 _luaL_checktype($L,1,5);
 $1 = (_luaL_optinteger($L,3,1)|0);
 $2 = (_lua_type($L,4)|0);
 $3 = ($2|0)<(1);
 if ($3) {
  $4 = (_luaL_len($L,1)|0);
  $7 = $4;
 } else {
  $5 = (_luaL_checkinteger($L,4)|0);
  $7 = $5;
 }
 _luaL_buffinit($L,$b);
 $6 = ($1|0)<($7|0);
 if ($6) {
  $i$02 = $1;
  while(1) {
   _lua_rawgeti($L,1,$i$02);
   $8 = (_lua_isstring($L,-1)|0);
   $9 = ($8|0)==(0);
   if ($9) {
    $10 = (_lua_type($L,-1)|0);
    $11 = (_lua_typename($L,$10)|0);
    HEAP32[$vararg_buffer>>2] = $11;
    $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
    HEAP32[$vararg_ptr1>>2] = $i$02;
    (_luaL_error($L,12143,$vararg_buffer)|0);
   }
   _luaL_addvalue($b);
   $12 = HEAP32[$lsep>>2]|0;
   _luaL_addlstring($b,$0,$12);
   $13 = (($i$02) + 1)|0;
   $exitcond = ($13|0)==($7|0);
   if ($exitcond) {
    break;
   } else {
    $i$02 = $13;
   }
  }
 } else {
  $14 = ($1|0)==($7|0);
  if (!($14)) {
   _luaL_pushresult($b);
   STACKTOP = sp;return 1;
  }
 }
 _lua_rawgeti($L,1,$7);
 $15 = (_lua_isstring($L,-1)|0);
 $16 = ($15|0)==(0);
 if ($16) {
  $17 = (_lua_type($L,-1)|0);
  $18 = (_lua_typename($L,$17)|0);
  HEAP32[$vararg_buffer2>>2] = $18;
  $vararg_ptr5 = ((($vararg_buffer2)) + 4|0);
  HEAP32[$vararg_ptr5>>2] = $7;
  (_luaL_error($L,12143,$vararg_buffer2)|0);
 }
 _luaL_addvalue($b);
 _luaL_pushresult($b);
 STACKTOP = sp;return 1;
}
function _maxn($L) {
 $L = $L|0;
 var $$lcssa = 0.0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $max$0$ph$lcssa = 0.0, $max$0$ph2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 _luaL_checktype($L,1,5);
 _lua_pushnil($L);
 $0 = (_lua_next($L,1)|0);
 $1 = ($0|0)==(0);
 L1: do {
  if ($1) {
   $max$0$ph$lcssa = 0.0;
  } else {
   $max$0$ph2 = 0.0;
   while(1) {
    while(1) {
     _lua_settop($L,-2);
     $2 = (_lua_type($L,-1)|0);
     $3 = ($2|0)==(3);
     if ($3) {
      $4 = (+_lua_tonumberx($L,-1,0));
      $5 = $4 > $max$0$ph2;
      if ($5) {
       $$lcssa = $4;
       break;
      }
     }
     $6 = (_lua_next($L,1)|0);
     $7 = ($6|0)==(0);
     if ($7) {
      $max$0$ph$lcssa = $max$0$ph2;
      break L1;
     }
    }
    $8 = (_lua_next($L,1)|0);
    $9 = ($8|0)==(0);
    if ($9) {
     $max$0$ph$lcssa = $$lcssa;
     break;
    } else {
     $max$0$ph2 = $$lcssa;
    }
   }
  }
 } while(0);
 _lua_pushnumber($L,$max$0$ph$lcssa);
 return 1;
}
function _tinsert($L) {
 $L = $L|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$01 = 0, $or$cond = 0, $pos$0 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 _luaL_checktype($L,1,5);
 $0 = (_luaL_len($L,1)|0);
 $1 = (($0) + 1)|0;
 $2 = (_lua_gettop($L)|0);
 switch ($2|0) {
 case 2:  {
  $pos$0 = $1;
  break;
 }
 case 3:  {
  label = 2;
  break;
 }
 default: {
  $9 = (_luaL_error($L,12105,$vararg_buffer)|0);
  $$0 = $9;
  STACKTOP = sp;return ($$0|0);
 }
 }
 if ((label|0) == 2) {
  $3 = (_luaL_checkinteger($L,2)|0);
  $4 = ($3|0)<(1);
  $5 = ($3|0)>($1|0);
  $or$cond = $4 | $5;
  if ($or$cond) {
   (_luaL_argerror($L,2,12053)|0);
  }
  $6 = ($0|0)<($3|0);
  if ($6) {
   $pos$0 = $3;
  } else {
   $i$01 = $1;
   while(1) {
    $7 = (($i$01) + -1)|0;
    _lua_rawgeti($L,1,$7);
    _lua_rawseti($L,1,$i$01);
    $8 = ($7|0)>($3|0);
    if ($8) {
     $i$01 = $7;
    } else {
     $pos$0 = $3;
     break;
    }
   }
  }
 }
 _lua_rawseti($L,1,$pos$0);
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _pack($L) {
 $L = $L|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $i$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_lua_gettop($L)|0);
 _lua_createtable($L,$0,1);
 _lua_pushinteger($L,$0);
 _lua_setfield($L,-2,12103);
 $1 = ($0|0)>(0);
 if (!($1)) {
  return 1;
 }
 _lua_pushvalue($L,1);
 _lua_rawseti($L,-2,1);
 _lua_replace($L,1);
 $2 = ($0|0)>(1);
 if ($2) {
  $i$01 = $0;
 } else {
  return 1;
 }
 while(1) {
  _lua_rawseti($L,1,$i$01);
  $3 = (($i$01) + -1)|0;
  $4 = ($3|0)>(1);
  if ($4) {
   $i$01 = $3;
  } else {
   break;
  }
 }
 return 1;
}
function _unpack($L) {
 $L = $L|0;
 var $$0 = 0, $$in = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $vararg_buffer = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 _luaL_checktype($L,1,5);
 $0 = (_luaL_optinteger($L,2,1)|0);
 $1 = (_lua_type($L,3)|0);
 $2 = ($1|0)<(1);
 if ($2) {
  $3 = (_luaL_len($L,1)|0);
  $6 = $3;
 } else {
  $4 = (_luaL_checkinteger($L,3)|0);
  $6 = $4;
 }
 $5 = ($6|0)<($0|0);
 if ($5) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $7 = (($6) - ($0))|0;
 $8 = (($7) + 1)|0;
 $9 = ($7|0)<(0);
 if (!($9)) {
  $10 = (_lua_checkstack($L,$8)|0);
  $11 = ($10|0)==(0);
  if (!($11)) {
   _lua_rawgeti($L,1,$0);
   $13 = ($6|0)>($0|0);
   if ($13) {
    $$in = $0;
   } else {
    $$0 = $8;
    STACKTOP = sp;return ($$0|0);
   }
   while(1) {
    $14 = (($$in) + 1)|0;
    _lua_rawgeti($L,1,$14);
    $exitcond = ($14|0)==($6|0);
    if ($exitcond) {
     $$0 = $8;
     break;
    } else {
     $$in = $14;
    }
   }
   STACKTOP = sp;return ($$0|0);
  }
 }
 $12 = (_luaL_error($L,12076,$vararg_buffer)|0);
 $$0 = $12;
 STACKTOP = sp;return ($$0|0);
}
function _tremove($L) {
 $L = $L|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $exitcond = 0, $or$cond = 0, $pos$0$lcssa = 0, $pos$02 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _luaL_checktype($L,1,5);
 $0 = (_luaL_len($L,1)|0);
 $1 = (_luaL_optinteger($L,2,$0)|0);
 $2 = ($1|0)==($0|0);
 if (!($2)) {
  $3 = ($1|0)<(1);
  $4 = (($0) + 1)|0;
  $5 = ($1|0)>($4|0);
  $or$cond = $3 | $5;
  if ($or$cond) {
   (_luaL_argerror($L,1,12053)|0);
  }
 }
 _lua_rawgeti($L,1,$1);
 $6 = ($1|0)<($0|0);
 if ($6) {
  $pos$02 = $1;
 } else {
  $pos$0$lcssa = $1;
  _lua_pushnil($L);
  _lua_rawseti($L,1,$pos$0$lcssa);
  return 1;
 }
 while(1) {
  $7 = (($pos$02) + 1)|0;
  _lua_rawgeti($L,1,$7);
  _lua_rawseti($L,1,$pos$02);
  $exitcond = ($7|0)==($0|0);
  if ($exitcond) {
   $pos$0$lcssa = $0;
   break;
  } else {
   $pos$02 = $7;
  }
 }
 _lua_pushnil($L);
 _lua_rawseti($L,1,$pos$0$lcssa);
 return 1;
}
function _sort($L) {
 $L = $L|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _luaL_checktype($L,1,5);
 $0 = (_luaL_len($L,1)|0);
 _luaL_checkstack($L,40,20754);
 $1 = (_lua_type($L,2)|0);
 $2 = ($1|0)<(1);
 if (!($2)) {
  _luaL_checktype($L,2,6);
 }
 _lua_settop($L,2);
 _auxsort($L,1,$0);
 return 0;
}
function _auxsort($L,$l,$u) {
 $L = $L|0;
 $l = $l|0;
 $u = $u|0;
 var $$$01 = 0, $$0$i$0 = 0, $$01$ = 0, $$018 = 0, $$09 = 0, $$lcssa = 0, $$lcssa$lcssa = 0, $$lcssa3 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $i$0$$0 = 0, $i$0$lcssa = 0, $i$0$lcssa$lcssa = 0, $i$0$ph = 0, $j$0$ph = 0, $j$1$lcssa = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = ($u|0)>($l|0);
 if ($0) {
  $$018 = $l;$$09 = $u;
 } else {
  STACKTOP = sp;return;
 }
 while(1) {
  _lua_rawgeti($L,1,$$018);
  _lua_rawgeti($L,1,$$09);
  $1 = (_sort_comp($L,-1,-2)|0);
  $2 = ($1|0)==(0);
  if ($2) {
   _lua_settop($L,-3);
  } else {
   _lua_rawseti($L,1,$$018);
   _lua_rawseti($L,1,$$09);
  }
  $3 = (($$09) - ($$018))|0;
  $4 = ($3|0)==(1);
  if ($4) {
   label = 24;
   break;
  }
  $5 = (($$09) + ($$018))|0;
  $6 = (($5|0) / 2)&-1;
  _lua_rawgeti($L,1,$6);
  _lua_rawgeti($L,1,$$018);
  $7 = (_sort_comp($L,-2,-1)|0);
  $8 = ($7|0)==(0);
  do {
   if ($8) {
    _lua_settop($L,-2);
    _lua_rawgeti($L,1,$$09);
    $9 = (_sort_comp($L,-1,-2)|0);
    $10 = ($9|0)==(0);
    if ($10) {
     _lua_settop($L,-3);
     break;
    } else {
     _lua_rawseti($L,1,$6);
     _lua_rawseti($L,1,$$09);
     break;
    }
   } else {
    _lua_rawseti($L,1,$6);
    _lua_rawseti($L,1,$$018);
   }
  } while(0);
  $11 = ($3|0)==(2);
  if ($11) {
   label = 24;
   break;
  }
  _lua_rawgeti($L,1,$6);
  _lua_pushvalue($L,-1);
  $12 = (($$09) + -1)|0;
  _lua_rawgeti($L,1,$12);
  _lua_rawseti($L,1,$6);
  _lua_rawseti($L,1,$12);
  $i$0$ph = $$018;$j$0$ph = $12;
  while(1) {
   $13 = (($i$0$ph) + 1)|0;
   _lua_rawgeti($L,1,$13);
   $14 = (_sort_comp($L,-1,-2)|0);
   $15 = ($14|0)==(0);
   if ($15) {
    $$lcssa = $13;$i$0$lcssa = $i$0$ph;
   } else {
    $20 = $13;
    while(1) {
     $19 = ($$09|0)>($20|0);
     if (!($19)) {
      (_luaL_error($L,12018,$vararg_buffer)|0);
     }
     _lua_settop($L,-2);
     $21 = (($20) + 1)|0;
     _lua_rawgeti($L,1,$21);
     $22 = (_sort_comp($L,-1,-2)|0);
     $23 = ($22|0)==(0);
     if ($23) {
      $$lcssa = $21;$i$0$lcssa = $20;
      break;
     } else {
      $20 = $21;
     }
    }
   }
   $16 = (($j$0$ph) + -1)|0;
   _lua_rawgeti($L,1,$16);
   $17 = (_sort_comp($L,-3,-1)|0);
   $18 = ($17|0)==(0);
   if ($18) {
    $$lcssa3 = $16;$j$1$lcssa = $j$0$ph;
   } else {
    $25 = $16;
    while(1) {
     $24 = ($25|0)>($$018|0);
     if (!($24)) {
      (_luaL_error($L,12018,$vararg_buffer1)|0);
     }
     _lua_settop($L,-2);
     $26 = (($25) + -1)|0;
     _lua_rawgeti($L,1,$26);
     $27 = (_sort_comp($L,-3,-1)|0);
     $28 = ($27|0)==(0);
     if ($28) {
      $$lcssa3 = $26;$j$1$lcssa = $25;
      break;
     } else {
      $25 = $26;
     }
    }
   }
   $29 = ($j$1$lcssa|0)>($$lcssa|0);
   if (!($29)) {
    $$lcssa$lcssa = $$lcssa;$i$0$lcssa$lcssa = $i$0$lcssa;
    break;
   }
   _lua_rawseti($L,1,$$lcssa);
   _lua_rawseti($L,1,$$lcssa3);
   $i$0$ph = $$lcssa;$j$0$ph = $$lcssa3;
  }
  _lua_settop($L,-4);
  _lua_rawgeti($L,1,$12);
  _lua_rawgeti($L,1,$$lcssa$lcssa);
  _lua_rawseti($L,1,$12);
  _lua_rawseti($L,1,$$lcssa$lcssa);
  $30 = (($$lcssa$lcssa) - ($$018))|0;
  $31 = (($$09) - ($$lcssa$lcssa))|0;
  $32 = ($30|0)<($31|0);
  $33 = (($i$0$lcssa$lcssa) + 2)|0;
  $$$01 = $32 ? $33 : $$018;
  $$0$i$0 = $32 ? $$09 : $i$0$lcssa$lcssa;
  $i$0$$0 = $32 ? $i$0$lcssa$lcssa : $$09;
  $$01$ = $32 ? $$018 : $33;
  _auxsort($L,$$01$,$i$0$$0);
  $34 = ($$0$i$0|0)>($$$01|0);
  if ($34) {
   $$018 = $$$01;$$09 = $$0$i$0;
  } else {
   label = 24;
   break;
  }
 }
 if ((label|0) == 24) {
  STACKTOP = sp;return;
 }
}
function _sort_comp($L,$a,$b) {
 $L = $L|0;
 $a = $a|0;
 $b = $b|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_lua_type($L,2)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $5 = (_lua_compare($L,$a,$b,1)|0);
  $$0 = $5;
  return ($$0|0);
 } else {
  _lua_pushvalue($L,2);
  $2 = (($a) + -1)|0;
  _lua_pushvalue($L,$2);
  $3 = (($b) + -2)|0;
  _lua_pushvalue($L,$3);
  _lua_callk($L,2,1,0,0);
  $4 = (_lua_toboolean($L,-1)|0);
  _lua_settop($L,-2);
  $$0 = $4;
  return ($$0|0);
 }
 return (0)|0;
}
function _luaopen_package($L) {
 $L = $L|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 (_luaL_getsubtable($L,-1001000,12196)|0);
 _lua_createtable($L,0,1);
 _lua_pushcclosure($L,190,0);
 _lua_setfield($L,-2,12203);
 (_lua_setmetatable($L,-2)|0);
 _lua_createtable($L,0,3);
 _luaL_setfuncs($L,1836,0);
 _lua_createtable($L,4,0);
 _lua_pushvalue($L,-2);
 _lua_pushcclosure($L,191,1);
 _lua_rawseti($L,-2,1);
 _lua_pushvalue($L,-2);
 _lua_pushcclosure($L,192,1);
 _lua_rawseti($L,-2,2);
 _lua_pushvalue($L,-2);
 _lua_pushcclosure($L,193,1);
 _lua_rawseti($L,-2,3);
 _lua_pushvalue($L,-2);
 _lua_pushcclosure($L,194,1);
 _lua_rawseti($L,-2,4);
 _lua_pushvalue($L,-1);
 _lua_setfield($L,-3,12208);
 _lua_setfield($L,-2,12216);
 _setpath($L,12226,12231,12244,12253);
 _setpath($L,12391,12397,12411,12421);
 (_lua_pushlstring($L,12490,10)|0);
 _lua_setfield($L,-2,12501);
 (_luaL_getsubtable($L,-1001000,12508)|0);
 _lua_setfield($L,-2,12516);
 (_luaL_getsubtable($L,-1001000,12523)|0);
 _lua_setfield($L,-2,12532);
 _lua_rawgeti($L,-1001000,2);
 _lua_pushvalue($L,-2);
 _luaL_setfuncs($L,1868,1);
 _lua_settop($L,-2);
 return 1;
}
function _gctm($L) {
 $L = $L|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $n$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_luaL_len($L,1)|0);
 $1 = ($0|0)>(0);
 if ($1) {
  $n$01 = $0;
 } else {
  return 0;
 }
 while(1) {
  _lua_rawgeti($L,1,$n$01);
  _lua_settop($L,-2);
  $2 = (($n$01) + -1)|0;
  $3 = ($n$01|0)>(1);
  if ($3) {
   $n$01 = $2;
  } else {
   break;
  }
 }
 return 0;
}
function _searcher_preload($L) {
 $L = $L|0;
 var $0 = 0, $1 = 0, $2 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = (_luaL_checklstring($L,1,0)|0);
 _lua_getfield($L,-1001000,12523);
 _lua_getfield($L,-1,$0);
 $1 = (_lua_type($L,-1)|0);
 $2 = ($1|0)==(0);
 if (!($2)) {
  STACKTOP = sp;return 1;
 }
 HEAP32[$vararg_buffer>>2] = $0;
 (_lua_pushfstring($L,12894,$vararg_buffer)|0);
 STACKTOP = sp;return 1;
}
function _searcher_Lua($L) {
 $L = $L|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_ptr4 = 0, $vararg_ptr5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = (_luaL_checklstring($L,1,0)|0);
 _lua_getfield($L,-1001001,12226);
 $1 = (_lua_tolstring($L,-1,0)|0);
 $2 = ($1|0)==(0|0);
 if ($2) {
  HEAP32[$vararg_buffer>>2] = 12226;
  (_luaL_error($L,12695,$vararg_buffer)|0);
 }
 $3 = (_searchpath($L,$0,$1,20752,12725)|0);
 $4 = ($3|0)==(0|0);
 if ($4) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $5 = (_luaL_loadfilex($L,$3,0)|0);
 $6 = ($5|0)==(0);
 if ($6) {
  (_lua_pushstring($L,$3)|0);
  $$0 = 2;
  STACKTOP = sp;return ($$0|0);
 } else {
  $7 = (_lua_tolstring($L,1,0)|0);
  $8 = (_lua_tolstring($L,-1,0)|0);
  HEAP32[$vararg_buffer1>>2] = $7;
  $vararg_ptr4 = ((($vararg_buffer1)) + 4|0);
  HEAP32[$vararg_ptr4>>2] = $3;
  $vararg_ptr5 = ((($vararg_buffer1)) + 8|0);
  HEAP32[$vararg_ptr5>>2] = $8;
  $9 = (_luaL_error($L,12727,$vararg_buffer1)|0);
  $$0 = $9;
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function _searcher_C($L) {
 $L = $L|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_ptr4 = 0, $vararg_ptr5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = (_luaL_checklstring($L,1,0)|0);
 _lua_getfield($L,-1001001,12391);
 $1 = (_lua_tolstring($L,-1,0)|0);
 $2 = ($1|0)==(0|0);
 if ($2) {
  HEAP32[$vararg_buffer>>2] = 12391;
  (_luaL_error($L,12695,$vararg_buffer)|0);
 }
 $3 = (_searchpath($L,$0,$1,20752,12725)|0);
 $4 = ($3|0)==(0|0);
 if ($4) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $5 = (_loadfunc($L,$3,$0)|0);
 $6 = ($5|0)==(0);
 if ($6) {
  (_lua_pushstring($L,$3)|0);
  $$0 = 2;
  STACKTOP = sp;return ($$0|0);
 } else {
  $7 = (_lua_tolstring($L,1,0)|0);
  $8 = (_lua_tolstring($L,-1,0)|0);
  HEAP32[$vararg_buffer1>>2] = $7;
  $vararg_ptr4 = ((($vararg_buffer1)) + 4|0);
  HEAP32[$vararg_ptr4>>2] = $3;
  $vararg_ptr5 = ((($vararg_buffer1)) + 8|0);
  HEAP32[$vararg_ptr5>>2] = $8;
  $9 = (_luaL_error($L,12727,$vararg_buffer1)|0);
  $$0 = $9;
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function _searcher_Croot($L) {
 $L = $L|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer6 = 0, $vararg_ptr4 = 0;
 var $vararg_ptr5 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer6 = sp + 24|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = (_luaL_checklstring($L,1,0)|0);
 $1 = (_strchr($0,46)|0);
 $2 = ($1|0)==(0|0);
 if ($2) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $3 = $1;
 $4 = $0;
 $5 = (($3) - ($4))|0;
 (_lua_pushlstring($L,$0,$5)|0);
 $6 = (_lua_tolstring($L,-1,0)|0);
 _lua_getfield($L,-1001001,12391);
 $7 = (_lua_tolstring($L,-1,0)|0);
 $8 = ($7|0)==(0|0);
 if ($8) {
  HEAP32[$vararg_buffer>>2] = 12391;
  (_luaL_error($L,12695,$vararg_buffer)|0);
 }
 $9 = (_searchpath($L,$6,$7,20752,12725)|0);
 $10 = ($9|0)==(0|0);
 if ($10) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $11 = (_loadfunc($L,$9,$0)|0);
 switch ($11|0) {
 case 0:  {
  (_lua_pushstring($L,$9)|0);
  $$0 = 2;
  STACKTOP = sp;return ($$0|0);
  break;
 }
 case 2:  {
  HEAP32[$vararg_buffer6>>2] = $0;
  $vararg_ptr9 = ((($vararg_buffer6)) + 4|0);
  HEAP32[$vararg_ptr9>>2] = $9;
  (_lua_pushfstring($L,12773,$vararg_buffer6)|0);
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
  break;
 }
 default: {
  $12 = (_lua_tolstring($L,1,0)|0);
  $13 = (_lua_tolstring($L,-1,0)|0);
  HEAP32[$vararg_buffer1>>2] = $12;
  $vararg_ptr4 = ((($vararg_buffer1)) + 4|0);
  HEAP32[$vararg_ptr4>>2] = $9;
  $vararg_ptr5 = ((($vararg_buffer1)) + 8|0);
  HEAP32[$vararg_ptr5>>2] = $13;
  $14 = (_luaL_error($L,12727,$vararg_buffer1)|0);
  $$0 = $14;
  STACKTOP = sp;return ($$0|0);
 }
 }
 return (0)|0;
}
function _setpath($L,$fieldname,$envname1,$envname2,$def) {
 $L = $L|0;
 $fieldname = $fieldname|0;
 $envname1 = $envname1|0;
 $envname2 = $envname2|0;
 $def = $def|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $path$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_getenv(($envname1|0))|0);
 $1 = ($0|0)==(0|0);
 if ($1) {
  $2 = (_getenv(($envname2|0))|0);
  $3 = ($2|0)==(0|0);
  if (!($3)) {
   $path$01 = $2;
   label = 3;
  }
 } else {
  $path$01 = $0;
  label = 3;
 }
 if ((label|0) == 3) {
  _lua_getfield($L,-1001000,12676);
  $4 = (_lua_toboolean($L,-1)|0);
  _lua_settop($L,-2);
  $5 = ($4|0)==(0);
  if ($5) {
   $6 = (_luaL_gsub($L,$path$01,12686,12689)|0);
   (_luaL_gsub($L,$6,12693,$def)|0);
   _lua_remove($L,-2);
   _lua_setfield($L,-2,$fieldname);
   return;
  }
 }
 (_lua_pushstring($L,$def)|0);
 _lua_setfield($L,-2,$fieldname);
 return;
}
function _ll_module($L) {
 $L = $L|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $ar$i = 0, $dot$0$i = 0, $exitcond$i = 0, $i$01$i = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $ar$i = sp + 4|0;
 $0 = (_luaL_checklstring($L,1,0)|0);
 $1 = (_lua_gettop($L)|0);
 _luaL_pushmodule($L,$0,1);
 _lua_getfield($L,-1,12616);
 $2 = (_lua_type($L,-1)|0);
 $3 = ($2|0)==(0);
 _lua_settop($L,-2);
 if ($3) {
  _lua_pushvalue($L,-1);
  _lua_setfield($L,-2,12622);
  (_lua_pushstring($L,$0)|0);
  _lua_setfield($L,-2,12616);
  $4 = (_strrchr($0,46)|0);
  $5 = ($4|0)==(0|0);
  $6 = ((($4)) + 1|0);
  $dot$0$i = $5 ? $0 : $6;
  $7 = $dot$0$i;
  $8 = $0;
  $9 = (($7) - ($8))|0;
  (_lua_pushlstring($L,$0,$9)|0);
  _lua_setfield($L,-2,12625);
 }
 _lua_pushvalue($L,-1);
 $10 = (_lua_getstack($L,1,$ar$i)|0);
 $11 = ($10|0)==(0);
 if ($11) {
  label = 6;
 } else {
  $12 = (_lua_getinfo($L,12634,$ar$i)|0);
  $13 = ($12|0)==(0);
  if ($13) {
   label = 6;
  } else {
   $14 = (_lua_iscfunction($L,-1)|0);
   $15 = ($14|0)==(0);
   if (!($15)) {
    label = 6;
   }
  }
 }
 if ((label|0) == 6) {
  (_luaL_error($L,12636,$vararg_buffer)|0);
 }
 _lua_pushvalue($L,-2);
 (_lua_setupvalue($L,-2,1)|0);
 _lua_settop($L,-2);
 $16 = ($1|0)<(2);
 if ($16) {
  STACKTOP = sp;return 1;
 } else {
  $i$01$i = 2;
 }
 while(1) {
  $17 = (_lua_type($L,$i$01$i)|0);
  $18 = ($17|0)==(6);
  if ($18) {
   _lua_pushvalue($L,$i$01$i);
   _lua_pushvalue($L,-2);
   _lua_callk($L,1,0,0,0);
  }
  $19 = (($i$01$i) + 1)|0;
  $exitcond$i = ($i$01$i|0)==($1|0);
  if ($exitcond$i) {
   break;
  } else {
   $i$01$i = $19;
  }
 }
 STACKTOP = sp;return 1;
}
function _ll_require($L) {
 $L = $L|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$0$i = 0, $msg$i = 0, $vararg_buffer = 0;
 var $vararg_buffer1 = 0, $vararg_ptr3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1056|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $msg$i = sp + 16|0;
 $0 = (_luaL_checklstring($L,1,0)|0);
 _lua_settop($L,1);
 _lua_getfield($L,-1001000,12508);
 _lua_getfield($L,2,$0);
 $1 = (_lua_toboolean($L,-1)|0);
 $2 = ($1|0)==(0);
 if (!($2)) {
  STACKTOP = sp;return 1;
 }
 _lua_settop($L,-2);
 _luaL_buffinit($L,$msg$i);
 _lua_getfield($L,-1001001,12216);
 $3 = (_lua_type($L,3)|0);
 $4 = ($3|0)==(5);
 if ($4) {
  $i$0$i = 1;
 } else {
  (_luaL_error($L,12555,$vararg_buffer)|0);
  $i$0$i = 1;
 }
 while(1) {
  _lua_rawgeti($L,3,$i$0$i);
  $5 = (_lua_type($L,-1)|0);
  $6 = ($5|0)==(0);
  if ($6) {
   _lua_settop($L,-2);
   _luaL_pushresult($msg$i);
   $7 = (_lua_tolstring($L,-1,0)|0);
   HEAP32[$vararg_buffer1>>2] = $0;
   $vararg_ptr3 = ((($vararg_buffer1)) + 4|0);
   HEAP32[$vararg_ptr3>>2] = $7;
   (_luaL_error($L,12591,$vararg_buffer1)|0);
  }
  (_lua_pushstring($L,$0)|0);
  _lua_callk($L,1,2,0,0);
  $8 = (_lua_type($L,-2)|0);
  $9 = ($8|0)==(6);
  if ($9) {
   break;
  }
  $10 = (_lua_isstring($L,-2)|0);
  $11 = ($10|0)==(0);
  if ($11) {
   _lua_settop($L,-3);
  } else {
   _lua_settop($L,-2);
   _luaL_addvalue($msg$i);
  }
  $12 = (($i$0$i) + 1)|0;
  $i$0$i = $12;
 }
 (_lua_pushstring($L,$0)|0);
 _lua_insert($L,-2);
 _lua_callk($L,2,1,0,0);
 $13 = (_lua_type($L,-1)|0);
 $14 = ($13|0)==(0);
 if (!($14)) {
  _lua_setfield($L,2,$0);
 }
 _lua_getfield($L,2,$0);
 $15 = (_lua_type($L,-1)|0);
 $16 = ($15|0)==(0);
 if (!($16)) {
  STACKTOP = sp;return 1;
 }
 _lua_pushboolean($L,1);
 _lua_pushvalue($L,-1);
 _lua_setfield($L,2,$0);
 STACKTOP = sp;return 1;
}
function _searchpath($L,$name,$path,$sep,$dirsep) {
 $L = $L|0;
 $name = $name|0;
 $path = $path|0;
 $sep = $sep|0;
 $dirsep = $dirsep|0;
 var $$0 = 0, $$0$i = 0, $$01$ph = 0, $$lcssa = 0, $$lcssa12 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $l$0$i = 0, $msg = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1056|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $msg = sp + 8|0;
 _luaL_buffinit($L,$msg);
 $0 = HEAP8[$sep>>0]|0;
 $1 = ($0<<24>>24)==(0);
 if ($1) {
  $$01$ph = $name;
 } else {
  $2 = (_luaL_gsub($L,$name,$sep,$dirsep)|0);
  $$01$ph = $2;
 }
 $$0$i = $path;
 L4: while(1) {
  $3 = HEAP8[$$0$i>>0]|0;
  switch ($3<<24>>24) {
  case 0:  {
   label = 12;
   break L4;
   break;
  }
  case 59:  {
   $4 = ((($$0$i)) + 1|0);
   $$0$i = $4;
   continue L4;
   break;
  }
  default: {
  }
  }
  $5 = (_strchr($$0$i,59)|0);
  $6 = ($5|0)==(0|0);
  if ($6) {
   $7 = (_strlen($$0$i)|0);
   $8 = (($$0$i) + ($7)|0);
   $l$0$i = $8;
  } else {
   $l$0$i = $5;
  }
  $9 = $l$0$i;
  $10 = $$0$i;
  $11 = (($9) - ($10))|0;
  (_lua_pushlstring($L,$$0$i,$11)|0);
  $12 = ($l$0$i|0)==(0|0);
  if ($12) {
   label = 12;
   break;
  }
  $13 = (_lua_tolstring($L,-1,0)|0);
  $14 = (_luaL_gsub($L,$13,12875,$$01$ph)|0);
  _lua_remove($L,-2);
  $15 = (_fopen($14,12877)|0);
  $16 = ($15|0)==(0|0);
  if (!($16)) {
   $$lcssa = $14;$$lcssa12 = $15;
   label = 10;
   break;
  }
  HEAP32[$vararg_buffer>>2] = $14;
  (_lua_pushfstring($L,12879,$vararg_buffer)|0);
  _lua_remove($L,-2);
  _luaL_addvalue($msg);
  $$0$i = $l$0$i;
 }
 if ((label|0) == 10) {
  (_fclose($$lcssa12)|0);
  $$0 = $$lcssa;
  STACKTOP = sp;return ($$0|0);
 }
 else if ((label|0) == 12) {
  _luaL_pushresult($msg);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function _loadfunc($L,$filename,$modname) {
 $L = $L|0;
 $filename = $filename|0;
 $modname = $modname|0;
 var $$0 = 0, $$01 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = (_luaL_gsub($L,$modname,20752,12803)|0);
 $1 = (_strchr($0,45)|0);
 $2 = ($1|0)==(0|0);
 do {
  if ($2) {
   $$01 = $0;
  } else {
   $3 = $1;
   $4 = $0;
   $5 = (($3) - ($4))|0;
   $6 = (_lua_pushlstring($L,$0,$5)|0);
   HEAP32[$vararg_buffer>>2] = $6;
   $7 = (_lua_pushfstring($L,12805,$vararg_buffer)|0);
   $8 = (_ll_loadfunc($L,$filename,$7)|0);
   $9 = ($8|0)==(2);
   if ($9) {
    $10 = ((($1)) + 1|0);
    $$01 = $10;
    break;
   } else {
    $$0 = $8;
    STACKTOP = sp;return ($$0|0);
   }
  }
 } while(0);
 HEAP32[$vararg_buffer1>>2] = $$01;
 $11 = (_lua_pushfstring($L,12805,$vararg_buffer1)|0);
 $12 = (_ll_loadfunc($L,$filename,$11)|0);
 $$0 = $12;
 STACKTOP = sp;return ($$0|0);
}
function _ll_loadfunc($L,$path,$sym) {
 $L = $L|0;
 $path = $path|0;
 $sym = $sym|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _lua_getfield($L,-1001000,12196);
 _lua_getfield($L,-1,$path);
 $0 = (_lua_touserdata($L,-1)|0);
 _lua_settop($L,-3);
 $1 = ($0|0)==(0|0);
 if ($1) {
  (_lua_pushlstring($L,12816,58)|0);
  $$0 = 1;
  return ($$0|0);
 }
 $2 = HEAP8[$sym>>0]|0;
 $3 = ($2<<24>>24)==(42);
 if ($3) {
  _lua_pushboolean($L,1);
  $$0 = 0;
  return ($$0|0);
 } else {
  (_lua_pushlstring($L,12816,58)|0);
  $$0 = 2;
  return ($$0|0);
 }
 return (0)|0;
}
function _ll_loadlib($L) {
 $L = $L|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_luaL_checklstring($L,1,0)|0);
 $1 = (_luaL_checklstring($L,2,0)|0);
 $2 = (_ll_loadfunc($L,$0,$1)|0);
 $3 = ($2|0)==(0);
 if ($3) {
  $$0 = 1;
  return ($$0|0);
 }
 _lua_pushnil($L);
 _lua_insert($L,-2);
 $4 = ($2|0)==(1);
 $5 = $4 ? 12961 : 12968;
 (_lua_pushstring($L,$5)|0);
 $$0 = 3;
 return ($$0|0);
}
function _ll_searchpath($L) {
 $L = $L|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_luaL_checklstring($L,1,0)|0);
 $1 = (_luaL_checklstring($L,2,0)|0);
 $2 = (_luaL_optlstring($L,3,20752,0)|0);
 $3 = (_luaL_optlstring($L,4,12725,0)|0);
 $4 = (_searchpath($L,$0,$1,$2,$3)|0);
 $5 = ($4|0)==(0|0);
 if (!($5)) {
  $$0 = 1;
  return ($$0|0);
 }
 _lua_pushnil($L);
 _lua_insert($L,-2);
 $$0 = 2;
 return ($$0|0);
}
function _ll_seeall($L) {
 $L = $L|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _luaL_checktype($L,1,5);
 $0 = (_lua_getmetatable($L,1)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  _lua_createtable($L,0,1);
  _lua_pushvalue($L,-1);
  (_lua_setmetatable($L,1)|0);
 }
 _lua_rawgeti($L,-1001000,2);
 _lua_setfield($L,-2,12953);
 return 0;
}
function _emscripten_GetProcAddress($name_) {
 $name_ = $name_|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0;
 var $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0;
 var $549 = 0, $55 = 0, $550 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $end = 0, $name = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $name_;
 $2 = $1;
 $3 = (_strlen($2)|0);
 $4 = (($3) + 1)|0;
 $5 = (_malloc($4)|0);
 $name = $5;
 $6 = $name;
 $7 = $1;
 (_strcpy($6,$7)|0);
 $8 = $name;
 $9 = (_strstr($8,12973)|0);
 $end = $9;
 $10 = $end;
 $11 = ($10|0)!=(0|0);
 if ($11) {
  $12 = $end;
  HEAP8[$12>>0] = 0;
 }
 $13 = $name;
 $14 = (_strstr($13,12977)|0);
 $end = $14;
 $15 = $end;
 $16 = ($15|0)!=(0|0);
 if ($16) {
  $17 = $end;
  HEAP8[$17>>0] = 0;
 }
 $18 = $name;
 $19 = (_strstr($18,12981)|0);
 $end = $19;
 $20 = $end;
 $21 = ($20|0)!=(0|0);
 if ($21) {
  $22 = $end;
  HEAP8[$22>>0] = 0;
 }
 $23 = $name;
 $24 = (_strstr($23,12985)|0);
 $end = $24;
 $25 = $end;
 $26 = ($25|0)!=(0|0);
 if ($26) {
  $27 = $end;
  HEAP8[$27>>0] = 0;
 }
 $28 = $name;
 $29 = (_strcmp($28,12991)|0);
 $30 = ($29|0)!=(0);
 do {
  if ($30) {
   $31 = $name;
   $32 = (_strcmp($31,13029)|0);
   $33 = ($32|0)!=(0);
   if (!($33)) {
    $name = 13048;
    break;
   }
   $34 = $name;
   $35 = (_strcmp($34,13061)|0);
   $36 = ($35|0)!=(0);
   if (!($36)) {
    $name = 13082;
    break;
   }
   $37 = $name;
   $38 = (_strcmp($37,13097)|0);
   $39 = ($38|0)!=(0);
   if (!($39)) {
    $name = 13112;
    break;
   }
   $40 = $name;
   $41 = (_strcmp($40,13127)|0);
   $42 = ($41|0)!=(0);
   if (!($42)) {
    $name = 13142;
   }
  } else {
   $name = 13013;
  }
 } while(0);
 $43 = $name;
 $44 = (_strcmp($43,13157)|0);
 $45 = ($44|0)!=(0);
 do {
  if ($45) {
   $46 = $name;
   $47 = (_strcmp($46,13171)|0);
   $48 = ($47|0)!=(0);
   if (!($48)) {
    $0 = 196;
    break;
   }
   $49 = $name;
   $50 = (_strcmp($49,13183)|0);
   $51 = ($50|0)!=(0);
   if (!($51)) {
    $0 = 197;
    break;
   }
   $52 = $name;
   $53 = (_strcmp($52,13197)|0);
   $54 = ($53|0)!=(0);
   if (!($54)) {
    $0 = 198;
    break;
   }
   $55 = $name;
   $56 = (_strcmp($55,13209)|0);
   $57 = ($56|0)!=(0);
   if (!($57)) {
    $0 = 199;
    break;
   }
   $58 = $name;
   $59 = (_strcmp($58,13223)|0);
   $60 = ($59|0)!=(0);
   if (!($60)) {
    $0 = 200;
    break;
   }
   $61 = $name;
   $62 = (_strcmp($61,13237)|0);
   $63 = ($62|0)!=(0);
   if (!($63)) {
    $0 = 201;
    break;
   }
   $64 = $name;
   $65 = (_strcmp($64,13254)|0);
   $66 = ($65|0)!=(0);
   if (!($66)) {
    $0 = 202;
    break;
   }
   $67 = $name;
   $68 = (_strcmp($67,13277)|0);
   $69 = ($68|0)!=(0);
   if (!($69)) {
    $0 = 203;
    break;
   }
   $70 = $name;
   $71 = (_strcmp($70,13303)|0);
   $72 = ($71|0)!=(0);
   if (!($72)) {
    $0 = 204;
    break;
   }
   $73 = $name;
   $74 = (_strcmp($73,13316)|0);
   $75 = ($74|0)!=(0);
   if (!($75)) {
    $0 = 205;
    break;
   }
   $76 = $name;
   $77 = (_strcmp($76,13332)|0);
   $78 = ($77|0)!=(0);
   if (!($78)) {
    $0 = 206;
    break;
   }
   $79 = $name;
   $80 = (_strcmp($79,13345)|0);
   $81 = ($80|0)!=(0);
   if (!($81)) {
    $0 = 207;
    break;
   }
   $82 = $name;
   $83 = (_strcmp($82,13359)|0);
   $84 = ($83|0)!=(0);
   if (!($84)) {
    $0 = 208;
    break;
   }
   $85 = $name;
   $86 = (_strcmp($85,13379)|0);
   $87 = ($86|0)!=(0);
   if (!($87)) {
    $0 = 209;
    break;
   }
   $88 = $name;
   $89 = (_strcmp($88,13399)|0);
   $90 = ($89|0)!=(0);
   if (!($90)) {
    $0 = 210;
    break;
   }
   $91 = $name;
   $92 = (_strcmp($91,13416)|0);
   $93 = ($92|0)!=(0);
   if (!($93)) {
    $0 = 211;
    break;
   }
   $94 = $name;
   $95 = (_strcmp($94,13433)|0);
   $96 = ($95|0)!=(0);
   if (!($96)) {
    $0 = 212;
    break;
   }
   $97 = $name;
   $98 = (_strcmp($97,13445)|0);
   $99 = ($98|0)!=(0);
   if (!($99)) {
    $0 = 213;
    break;
   }
   $100 = $name;
   $101 = (_strcmp($100,13458)|0);
   $102 = ($101|0)!=(0);
   if (!($102)) {
    $0 = 214;
    break;
   }
   $103 = $name;
   $104 = (_strcmp($103,13474)|0);
   $105 = ($104|0)!=(0);
   if (!($105)) {
    $0 = 215;
    break;
   }
   $106 = $name;
   $107 = (_strcmp($106,13497)|0);
   $108 = ($107|0)!=(0);
   if (!($108)) {
    $0 = 216;
    break;
   }
   $109 = $name;
   $110 = (_strcmp($109,13510)|0);
   $111 = ($110|0)!=(0);
   if (!($111)) {
    $0 = 217;
    break;
   }
   $112 = $name;
   $113 = (_strcmp($112,13526)|0);
   $114 = ($113|0)!=(0);
   if (!($114)) {
    $0 = 218;
    break;
   }
   $115 = $name;
   $116 = (_strcmp($115,13537)|0);
   $117 = ($116|0)!=(0);
   if (!($117)) {
    $0 = 219;
    break;
   }
   $118 = $name;
   $119 = (_strcmp($118,13556)|0);
   $120 = ($119|0)!=(0);
   if (!($120)) {
    $0 = 220;
    break;
   }
   $121 = $name;
   $122 = (_strcmp($121,13578)|0);
   $123 = ($122|0)!=(0);
   if (!($123)) {
    $0 = 221;
    break;
   }
   $124 = $name;
   $125 = (_strcmp($124,13597)|0);
   $126 = ($125|0)!=(0);
   if (!($126)) {
    $0 = 222;
    break;
   }
   $127 = $name;
   $128 = (_strcmp($127,13626)|0);
   $129 = ($128|0)!=(0);
   if (!($129)) {
    $0 = 223;
    break;
   }
   $130 = $name;
   $131 = (_strcmp($130,13643)|0);
   $132 = ($131|0)!=(0);
   if (!($132)) {
    $0 = 224;
    break;
   }
   $133 = $name;
   $134 = (_strcmp($133,13658)|0);
   $135 = ($134|0)!=(0);
   if (!($135)) {
    $0 = 225;
    break;
   }
   $136 = $name;
   $137 = (_strcmp($136,13673)|0);
   $138 = ($137|0)!=(0);
   if (!($138)) {
    $0 = 226;
    break;
   }
   $139 = $name;
   $140 = (_strcmp($139,13694)|0);
   $141 = ($140|0)!=(0);
   if (!($141)) {
    $0 = 227;
    break;
   }
   $142 = $name;
   $143 = (_strcmp($142,13714)|0);
   $144 = ($143|0)!=(0);
   if (!($144)) {
    $0 = 228;
    break;
   }
   $145 = $name;
   $146 = (_strcmp($145,13734)|0);
   $147 = ($146|0)!=(0);
   if (!($147)) {
    $0 = 229;
    break;
   }
   $148 = $name;
   $149 = (_strcmp($148,13760)|0);
   $150 = ($149|0)!=(0);
   if (!($150)) {
    $0 = 230;
    break;
   }
   $151 = $name;
   $152 = (_strcmp($151,13779)|0);
   $153 = ($152|0)!=(0);
   if (!($153)) {
    $0 = 231;
    break;
   }
   $154 = $name;
   $155 = (_strcmp($154,13791)|0);
   $156 = ($155|0)!=(0);
   if (!($156)) {
    $0 = 232;
    break;
   }
   $157 = $name;
   $158 = (_strcmp($157,13803)|0);
   $159 = ($158|0)!=(0);
   if (!($159)) {
    $0 = 233;
    break;
   }
   $160 = $name;
   $161 = (_strcmp($160,13815)|0);
   $162 = ($161|0)!=(0);
   if (!($162)) {
    $0 = 234;
    break;
   }
   $163 = $name;
   $164 = (_strcmp($163,13827)|0);
   $165 = ($164|0)!=(0);
   if (!($165)) {
    $0 = 235;
    break;
   }
   $166 = $name;
   $167 = (_strcmp($166,13839)|0);
   $168 = ($167|0)!=(0);
   if (!($168)) {
    $0 = 236;
    break;
   }
   $169 = $name;
   $170 = (_strcmp($169,13851)|0);
   $171 = ($170|0)!=(0);
   if (!($171)) {
    $0 = 237;
    break;
   }
   $172 = $name;
   $173 = (_strcmp($172,13863)|0);
   $174 = ($173|0)!=(0);
   if (!($174)) {
    $0 = 238;
    break;
   }
   $175 = $name;
   $176 = (_strcmp($175,13875)|0);
   $177 = ($176|0)!=(0);
   if (!($177)) {
    $0 = 239;
    break;
   }
   $178 = $name;
   $179 = (_strcmp($178,13888)|0);
   $180 = ($179|0)!=(0);
   if (!($180)) {
    $0 = 240;
    break;
   }
   $181 = $name;
   $182 = (_strcmp($181,13901)|0);
   $183 = ($182|0)!=(0);
   if (!($183)) {
    $0 = 241;
    break;
   }
   $184 = $name;
   $185 = (_strcmp($184,13914)|0);
   $186 = ($185|0)!=(0);
   if (!($186)) {
    $0 = 242;
    break;
   }
   $187 = $name;
   $188 = (_strcmp($187,13927)|0);
   $189 = ($188|0)!=(0);
   if (!($189)) {
    $0 = 243;
    break;
   }
   $190 = $name;
   $191 = (_strcmp($190,13940)|0);
   $192 = ($191|0)!=(0);
   if (!($192)) {
    $0 = 244;
    break;
   }
   $193 = $name;
   $194 = (_strcmp($193,13953)|0);
   $195 = ($194|0)!=(0);
   if (!($195)) {
    $0 = 245;
    break;
   }
   $196 = $name;
   $197 = (_strcmp($196,13966)|0);
   $198 = ($197|0)!=(0);
   if (!($198)) {
    $0 = 246;
    break;
   }
   $199 = $name;
   $200 = (_strcmp($199,13979)|0);
   $201 = ($200|0)!=(0);
   if (!($201)) {
    $0 = 247;
    break;
   }
   $202 = $name;
   $203 = (_strcmp($202,13998)|0);
   $204 = ($203|0)!=(0);
   if (!($204)) {
    $0 = 248;
    break;
   }
   $205 = $name;
   $206 = (_strcmp($205,14017)|0);
   $207 = ($206|0)!=(0);
   if (!($207)) {
    $0 = 249;
    break;
   }
   $208 = $name;
   $209 = (_strcmp($208,14036)|0);
   $210 = ($209|0)!=(0);
   if (!($210)) {
    $0 = 250;
    break;
   }
   $211 = $name;
   $212 = (_strcmp($211,14049)|0);
   $213 = ($212|0)!=(0);
   if (!($213)) {
    $0 = 251;
    break;
   }
   $214 = $name;
   $215 = (_strcmp($214,14067)|0);
   $216 = ($215|0)!=(0);
   if (!($216)) {
    $0 = 252;
    break;
   }
   $217 = $name;
   $218 = (_strcmp($217,14085)|0);
   $219 = ($218|0)!=(0);
   if (!($219)) {
    $0 = 253;
    break;
   }
   $220 = $name;
   $221 = (_strcmp($220,14103)|0);
   $222 = ($221|0)!=(0);
   if (!($222)) {
    $0 = 254;
    break;
   }
   $223 = $name;
   $224 = (_strcmp($223,14121)|0);
   $225 = ($224|0)!=(0);
   if (!($225)) {
    $0 = 255;
    break;
   }
   $226 = $name;
   $227 = (_strcmp($226,14141)|0);
   $228 = ($227|0)!=(0);
   if (!($228)) {
    $0 = 256;
    break;
   }
   $229 = $name;
   $230 = (_strcmp($229,13082)|0);
   $231 = ($230|0)!=(0);
   if (!($231)) {
    $0 = 257;
    break;
   }
   $232 = $name;
   $233 = (_strcmp($232,14159)|0);
   $234 = ($233|0)!=(0);
   if (!($234)) {
    $0 = 258;
    break;
   }
   $235 = $name;
   $236 = (_strcmp($235,14174)|0);
   $237 = ($236|0)!=(0);
   if (!($237)) {
    $0 = 259;
    break;
   }
   $238 = $name;
   $239 = (_strcmp($238,14195)|0);
   $240 = ($239|0)!=(0);
   if (!($240)) {
    $0 = 260;
    break;
   }
   $241 = $name;
   $242 = (_strcmp($241,14210)|0);
   $243 = ($242|0)!=(0);
   if (!($243)) {
    $0 = 261;
    break;
   }
   $244 = $name;
   $245 = (_strcmp($244,14228)|0);
   $246 = ($245|0)!=(0);
   if (!($246)) {
    $0 = 262;
    break;
   }
   $247 = $name;
   $248 = (_strcmp($247,14244)|0);
   $249 = ($248|0)!=(0);
   if (!($249)) {
    $0 = 263;
    break;
   }
   $250 = $name;
   $251 = (_strcmp($250,14263)|0);
   $252 = ($251|0)!=(0);
   if (!($252)) {
    $0 = 264;
    break;
   }
   $253 = $name;
   $254 = (_strcmp($253,14277)|0);
   $255 = ($254|0)!=(0);
   if (!($255)) {
    $0 = 265;
    break;
   }
   $256 = $name;
   $257 = (_strcmp($256,14292)|0);
   $258 = ($257|0)!=(0);
   if (!($258)) {
    $0 = 266;
    break;
   }
   $259 = $name;
   $260 = (_strcmp($259,13013)|0);
   $261 = ($260|0)!=(0);
   if (!($261)) {
    $0 = 267;
    break;
   }
   $262 = $name;
   $263 = (_strcmp($262,14303)|0);
   $264 = ($263|0)!=(0);
   if (!($264)) {
    $0 = 268;
    break;
   }
   $265 = $name;
   $266 = (_strcmp($265,13112)|0);
   $267 = ($266|0)!=(0);
   if (!($267)) {
    $0 = 269;
    break;
   }
   $268 = $name;
   $269 = (_strcmp($268,13142)|0);
   $270 = ($269|0)!=(0);
   if (!($270)) {
    $0 = 270;
    break;
   }
   $271 = $name;
   $272 = (_strcmp($271,14319)|0);
   $273 = ($272|0)!=(0);
   if (!($273)) {
    $0 = 271;
    break;
   }
   $274 = $name;
   $275 = (_strcmp($274,14346)|0);
   $276 = ($275|0)!=(0);
   if (!($276)) {
    $0 = 272;
    break;
   }
   $277 = $name;
   $278 = (_strcmp($277,14360)|0);
   $279 = ($278|0)!=(0);
   if (!($279)) {
    $0 = 273;
    break;
   }
   $280 = $name;
   $281 = (_strcmp($280,13048)|0);
   $282 = ($281|0)!=(0);
   if (!($282)) {
    $0 = 274;
    break;
   }
   $283 = $name;
   $284 = (_strcmp($283,14380)|0);
   $285 = ($284|0)!=(0);
   if (!($285)) {
    $0 = 275;
    break;
   }
   $286 = $name;
   $287 = (_strcmp($286,14398)|0);
   $288 = ($287|0)!=(0);
   if (!($288)) {
    $0 = 276;
    break;
   }
   $289 = $name;
   $290 = (_strcmp($289,14410)|0);
   $291 = ($290|0)!=(0);
   if (!($291)) {
    $0 = 277;
    break;
   }
   $292 = $name;
   $293 = (_strcmp($292,14431)|0);
   $294 = ($293|0)!=(0);
   if (!($294)) {
    $0 = 278;
    break;
   }
   $295 = $name;
   $296 = (_strcmp($295,14449)|0);
   $297 = ($296|0)!=(0);
   if (!($297)) {
    $0 = 279;
    break;
   }
   $298 = $name;
   $299 = (_strcmp($298,14467)|0);
   $300 = ($299|0)!=(0);
   if (!($300)) {
    $0 = 280;
    break;
   }
   $301 = $name;
   $302 = (_strcmp($301,14488)|0);
   $303 = ($302|0)!=(0);
   if (!($303)) {
    $0 = 281;
    break;
   }
   $304 = $name;
   $305 = (_strcmp($304,14514)|0);
   $306 = ($305|0)!=(0);
   if (!($306)) {
    $0 = 282;
    break;
   }
   $307 = $name;
   $308 = (_strcmp($307,14537)|0);
   $309 = ($308|0)!=(0);
   if (!($309)) {
    $0 = 283;
    break;
   }
   $310 = $name;
   $311 = (_strcmp($310,14575)|0);
   $312 = ($311|0)!=(0);
   if (!($312)) {
    $0 = 284;
    break;
   }
   $313 = $name;
   $314 = (_strcmp($313,14591)|0);
   $315 = ($314|0)!=(0);
   if (!($315)) {
    $0 = 285;
    break;
   }
   $316 = $name;
   $317 = (_strcmp($316,14606)|0);
   $318 = ($317|0)!=(0);
   if (!($318)) {
    $0 = 286;
    break;
   }
   $319 = $name;
   $320 = (_strcmp($319,14629)|0);
   $321 = ($320|0)!=(0);
   if (!($321)) {
    $0 = 287;
    break;
   }
   $322 = $name;
   $323 = (_strcmp($322,14642)|0);
   $324 = ($323|0)!=(0);
   if (!($324)) {
    $0 = 288;
    break;
   }
   $325 = $name;
   $326 = (_strcmp($325,14656)|0);
   $327 = ($326|0)!=(0);
   if (!($327)) {
    $0 = 289;
    break;
   }
   $328 = $name;
   $329 = (_strcmp($328,14670)|0);
   $330 = ($329|0)!=(0);
   if (!($330)) {
    $0 = 290;
    break;
   }
   $331 = $name;
   $332 = (_strcmp($331,14690)|0);
   $333 = ($332|0)!=(0);
   if (!($333)) {
    $0 = 291;
    break;
   }
   $334 = $name;
   $335 = (_strcmp($334,14710)|0);
   $336 = ($335|0)!=(0);
   if (!($336)) {
    $0 = 292;
    break;
   }
   $337 = $name;
   $338 = (_strcmp($337,14726)|0);
   $339 = ($338|0)!=(0);
   if (!($339)) {
    $0 = 293;
    break;
   }
   $340 = $name;
   $341 = (_strcmp($340,14744)|0);
   $342 = ($341|0)!=(0);
   if (!($342)) {
    $0 = 294;
    break;
   }
   $343 = $name;
   $344 = (_strcmp($343,14760)|0);
   $345 = ($344|0)!=(0);
   if (!($345)) {
    $0 = 295;
    break;
   }
   $346 = $name;
   $347 = (_strcmp($346,14775)|0);
   $348 = ($347|0)!=(0);
   if (!($348)) {
    $0 = 296;
    break;
   }
   $349 = $name;
   $350 = (_strcmp($349,14797)|0);
   $351 = ($350|0)!=(0);
   if (!($351)) {
    $0 = 297;
    break;
   }
   $352 = $name;
   $353 = (_strcmp($352,14815)|0);
   $354 = ($353|0)!=(0);
   if (!($354)) {
    $0 = 298;
    break;
   }
   $355 = $name;
   $356 = (_strcmp($355,14836)|0);
   $357 = ($356|0)!=(0);
   if (!($357)) {
    $0 = 299;
    break;
   }
   $358 = $name;
   $359 = (_strcmp($358,14854)|0);
   $360 = ($359|0)!=(0);
   if (!($360)) {
    $0 = 300;
    break;
   }
   $361 = $name;
   $362 = (_strcmp($361,14867)|0);
   $363 = ($362|0)!=(0);
   if (!($363)) {
    $0 = 301;
    break;
   }
   $364 = $name;
   $365 = (_strcmp($364,14882)|0);
   $366 = ($365|0)!=(0);
   if (!($366)) {
    $0 = 302;
    break;
   }
   $367 = $name;
   $368 = (_strcmp($367,14896)|0);
   $369 = ($368|0)!=(0);
   if (!($369)) {
    $0 = 303;
    break;
   }
   $370 = $name;
   $371 = (_strcmp($370,14906)|0);
   $372 = ($371|0)!=(0);
   if (!($372)) {
    $0 = 304;
    break;
   }
   $373 = $name;
   $374 = (_strcmp($373,14916)|0);
   $375 = ($374|0)!=(0);
   if (!($375)) {
    $0 = 305;
    break;
   }
   $376 = $name;
   $377 = (_strcmp($376,14938)|0);
   $378 = ($377|0)!=(0);
   if (!($378)) {
    $0 = 306;
    break;
   }
   $379 = $name;
   $380 = (_strcmp($379,14964)|0);
   $381 = ($380|0)!=(0);
   if (!($381)) {
    $0 = 307;
    break;
   }
   $382 = $name;
   $383 = (_strcmp($382,14991)|0);
   $384 = ($383|0)!=(0);
   if (!($384)) {
    $0 = 308;
    break;
   }
   $385 = $name;
   $386 = (_strcmp($385,15004)|0);
   $387 = ($386|0)!=(0);
   if (!($387)) {
    $0 = 309;
    break;
   }
   $388 = $name;
   $389 = (_strcmp($388,15019)|0);
   $390 = ($389|0)!=(0);
   if (!($390)) {
    $0 = 310;
    break;
   }
   $391 = $name;
   $392 = (_strcmp($391,15034)|0);
   $393 = ($392|0)!=(0);
   if (!($393)) {
    $0 = 311;
    break;
   }
   $394 = $name;
   $395 = (_strcmp($394,15058)|0);
   $396 = ($395|0)!=(0);
   if (!($396)) {
    $0 = 312;
    break;
   }
   $397 = $name;
   $398 = (_strcmp($397,15069)|0);
   $399 = ($398|0)!=(0);
   if (!($399)) {
    $0 = 313;
    break;
   }
   $400 = $name;
   $401 = (_strcmp($400,15091)|0);
   $402 = ($401|0)!=(0);
   if (!($402)) {
    $0 = 314;
    break;
   }
   $403 = $name;
   $404 = (_strcmp($403,15113)|0);
   $405 = ($404|0)!=(0);
   if (!($405)) {
    $0 = 315;
    break;
   }
   $406 = $name;
   $407 = (_strcmp($406,15137)|0);
   $408 = ($407|0)!=(0);
   if (!($408)) {
    $0 = 316;
    break;
   }
   $409 = $name;
   $410 = (_strcmp($409,15146)|0);
   $411 = ($410|0)!=(0);
   if (!($411)) {
    $0 = 317;
    break;
   }
   $412 = $name;
   $413 = (_strcmp($412,15154)|0);
   $414 = ($413|0)!=(0);
   if (!($414)) {
    $0 = 318;
    break;
   }
   $415 = $name;
   $416 = (_strcmp($415,15167)|0);
   $417 = ($416|0)!=(0);
   if (!($417)) {
    $0 = 319;
    break;
   }
   $418 = $name;
   $419 = (_strcmp($418,15181)|0);
   $420 = ($419|0)!=(0);
   if (!($420)) {
    $0 = 320;
    break;
   }
   $421 = $name;
   $422 = (_strcmp($421,15193)|0);
   $423 = ($422|0)!=(0);
   if (!($423)) {
    $0 = 321;
    break;
   }
   $424 = $name;
   $425 = (_strcmp($424,15202)|0);
   $426 = ($425|0)!=(0);
   if (!($426)) {
    $0 = 322;
    break;
   }
   $427 = $name;
   $428 = (_strcmp($427,15212)|0);
   $429 = ($428|0)!=(0);
   if (!($429)) {
    $0 = 323;
    break;
   }
   $430 = $name;
   $431 = (_strcmp($430,15224)|0);
   $432 = ($431|0)!=(0);
   if (!($432)) {
    $0 = 324;
    break;
   }
   $433 = $name;
   $434 = (_strcmp($433,15235)|0);
   $435 = ($434|0)!=(0);
   if (!($435)) {
    $0 = 325;
    break;
   }
   $436 = $name;
   $437 = (_strcmp($436,15243)|0);
   $438 = ($437|0)!=(0);
   if (!($438)) {
    $0 = 326;
    break;
   }
   $439 = $name;
   $440 = (_strcmp($439,15255)|0);
   $441 = ($440|0)!=(0);
   if (!($441)) {
    $0 = 327;
    break;
   }
   $442 = $name;
   $443 = (_strcmp($442,15270)|0);
   $444 = ($443|0)!=(0);
   if (!($444)) {
    $0 = 328;
    break;
   }
   $445 = $name;
   $446 = (_strcmp($445,15282)|0);
   $447 = ($446|0)!=(0);
   if (!($447)) {
    $0 = 329;
    break;
   }
   $448 = $name;
   $449 = (_strcmp($448,15296)|0);
   $450 = ($449|0)!=(0);
   if (!($450)) {
    $0 = 330;
    break;
   }
   $451 = $name;
   $452 = (_strcmp($451,15321)|0);
   $453 = ($452|0)!=(0);
   if (!($453)) {
    $0 = 331;
    break;
   }
   $454 = $name;
   $455 = (_strcmp($454,15338)|0);
   $456 = ($455|0)!=(0);
   if (!($456)) {
    $0 = 332;
    break;
   }
   $457 = $name;
   $458 = (_strcmp($457,15354)|0);
   $459 = ($458|0)!=(0);
   if (!($459)) {
    $0 = 333;
    break;
   }
   $460 = $name;
   $461 = (_strcmp($460,15370)|0);
   $462 = ($461|0)!=(0);
   if (!($462)) {
    $0 = 334;
    break;
   }
   $463 = $name;
   $464 = (_strcmp($463,15382)|0);
   $465 = ($464|0)!=(0);
   if (!($465)) {
    $0 = 335;
    break;
   }
   $466 = $name;
   $467 = (_strcmp($466,15394)|0);
   $468 = ($467|0)!=(0);
   if (!($468)) {
    $0 = 336;
    break;
   }
   $469 = $name;
   $470 = (_strcmp($469,15418)|0);
   $471 = ($470|0)!=(0);
   if (!($471)) {
    $0 = 337;
    break;
   }
   $472 = $name;
   $473 = (_strcmp($472,15431)|0);
   $474 = ($473|0)!=(0);
   if (!($474)) {
    $0 = 338;
    break;
   }
   $475 = $name;
   $476 = (_strcmp($475,15445)|0);
   $477 = ($476|0)!=(0);
   if (!($477)) {
    $0 = 339;
    break;
   }
   $478 = $name;
   $479 = (_strcmp($478,15467)|0);
   $480 = ($479|0)!=(0);
   if (!($480)) {
    $0 = 340;
    break;
   }
   $481 = $name;
   $482 = (_strcmp($481,15474)|0);
   $483 = ($482|0)!=(0);
   if (!($483)) {
    $0 = 341;
    break;
   }
   $484 = $name;
   $485 = (_strcmp($484,15490)|0);
   $486 = ($485|0)!=(0);
   if (!($486)) {
    $0 = 342;
    break;
   }
   $487 = $name;
   $488 = (_strcmp($487,15507)|0);
   $489 = ($488|0)!=(0);
   if (!($489)) {
    $0 = 343;
    break;
   }
   $490 = $name;
   $491 = (_strcmp($490,15524)|0);
   $492 = ($491|0)!=(0);
   if (!($492)) {
    $0 = 344;
    break;
   }
   $493 = $name;
   $494 = (_strcmp($493,15540)|0);
   $495 = ($494|0)!=(0);
   if (!($495)) {
    $0 = 345;
    break;
   }
   $496 = $name;
   $497 = (_strcmp($496,15556)|0);
   $498 = ($497|0)!=(0);
   if (!($498)) {
    $0 = 346;
    break;
   }
   $499 = $name;
   $500 = (_strcmp($499,15573)|0);
   $501 = ($500|0)!=(0);
   if (!($501)) {
    $0 = 347;
    break;
   }
   $502 = $name;
   $503 = (_strcmp($502,15587)|0);
   $504 = ($503|0)!=(0);
   if (!($504)) {
    $0 = 348;
    break;
   }
   $505 = $name;
   $506 = (_strcmp($505,15599)|0);
   $507 = ($506|0)!=(0);
   if (!($507)) {
    $0 = 349;
    break;
   }
   $508 = $name;
   $509 = (_strcmp($508,15610)|0);
   $510 = ($509|0)!=(0);
   if (!($510)) {
    $0 = 350;
    break;
   }
   $511 = $name;
   $512 = (_strcmp($511,15623)|0);
   $513 = ($512|0)!=(0);
   if (!($513)) {
    $0 = 351;
    break;
   }
   $514 = $name;
   $515 = (_strcmp($514,15633)|0);
   $516 = ($515|0)!=(0);
   if (!($516)) {
    $0 = 352;
    break;
   }
   $517 = $name;
   $518 = (_strcmp($517,15650)|0);
   $519 = ($518|0)!=(0);
   if (!($519)) {
    $0 = 353;
    break;
   }
   $520 = $name;
   $521 = (_strcmp($520,15662)|0);
   $522 = ($521|0)!=(0);
   if (!($522)) {
    $0 = 354;
    break;
   }
   $523 = $name;
   $524 = (_strcmp($523,15684)|0);
   $525 = ($524|0)!=(0);
   if (!($525)) {
    $0 = 355;
    break;
   }
   $526 = $name;
   $527 = (_strcmp($526,15704)|0);
   $528 = ($527|0)!=(0);
   if (!($528)) {
    $0 = 356;
    break;
   }
   $529 = $name;
   $530 = (_strcmp($529,15717)|0);
   $531 = ($530|0)!=(0);
   if (!($531)) {
    $0 = 357;
    break;
   }
   $532 = $name;
   $533 = (_strcmp($532,15739)|0);
   $534 = ($533|0)!=(0);
   if (!($534)) {
    $0 = 358;
    break;
   }
   $535 = $name;
   $536 = (_strcmp($535,15759)|0);
   $537 = ($536|0)!=(0);
   if (!($537)) {
    $0 = 359;
    break;
   }
   $538 = $name;
   $539 = (_strcmp($538,15776)|0);
   $540 = ($539|0)!=(0);
   if (!($540)) {
    $0 = 360;
    break;
   }
   $541 = $name;
   $542 = (_strcmp($541,15793)|0);
   $543 = ($542|0)!=(0);
   if (!($543)) {
    $0 = 361;
    break;
   }
   $544 = $name;
   $545 = (_strcmp($544,15813)|0);
   $546 = ($545|0)!=(0);
   if ($546) {
    $547 = $1;
    $548 = $name;
    $549 = _emscripten_asm_const_2(0, ($547|0), ($548|0))|0;
    $0 = 0;
    break;
   } else {
    $0 = 362;
    break;
   }
  } else {
   $0 = 195;
  }
 } while(0);
 $550 = $0;
 STACKTOP = sp;return ($550|0);
}
function _isalnum($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $isdigit = 0, $isdigittmp = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_isalpha($c)|0);
 $isdigittmp = (($c) + -48)|0;
 $isdigit = ($isdigittmp>>>0)<(10);
 $not$ = ($0|0)!=(0);
 $1 = $isdigit | $not$;
 $2 = $1&1;
 return ($2|0);
}
function _isalpha($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $c | 32;
 $1 = (($0) + -97)|0;
 $2 = ($1>>>0)<(26);
 $3 = $2&1;
 return ($3|0);
}
function _iscntrl($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($c>>>0)<(32);
 $1 = ($c|0)==(127);
 $2 = $0 | $1;
 $3 = $2&1;
 return ($3|0);
}
function _isgraph($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($c) + -33)|0;
 $1 = ($0>>>0)<(94);
 $2 = $1&1;
 return ($2|0);
}
function _islower($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($c) + -97)|0;
 $1 = ($0>>>0)<(26);
 $2 = $1&1;
 return ($2|0);
}
function _ispunct($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_isgraph($c)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $5 = 0;
 } else {
  $2 = (_isalnum($c)|0);
  $3 = ($2|0)==(0);
  $5 = $3;
 }
 $4 = $5&1;
 return ($4|0);
}
function _isspace($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($c|0)==(32);
 $1 = (($c) + -9)|0;
 $2 = ($1>>>0)<(5);
 $3 = $0 | $2;
 $4 = $3&1;
 return ($4|0);
}
function _isupper($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($c) + -65)|0;
 $1 = ($0>>>0)<(26);
 $2 = $1&1;
 return ($2|0);
}
function _isxdigit($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $isdigit = 0, $isdigittmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $isdigittmp = (($c) + -48)|0;
 $isdigit = ($isdigittmp>>>0)<(10);
 if ($isdigit) {
  $4 = 1;
 } else {
  $0 = $c | 32;
  $1 = (($0) + -97)|0;
  $2 = ($1>>>0)<(6);
  $4 = $2;
 }
 $3 = $4&1;
 return ($3|0);
}
function _tolower($c) {
 $c = $c|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_isupper($c)|0);
 $1 = ($0|0)==(0);
 $2 = $c | 32;
 $$0 = $1 ? $c : $2;
 return ($$0|0);
}
function _toupper($c) {
 $c = $c|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_islower($c)|0);
 $1 = ($0|0)==(0);
 $2 = $c & 95;
 $$0 = $1 ? $c : $2;
 return ($$0|0);
}
function ___errno_location() {
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[1892>>2]|0;
 $1 = ($0|0)==(0|0);
 if ($1) {
  $$0 = 2156;
 } else {
  $2 = (_pthread_self()|0);
  $3 = ((($2)) + 60|0);
  $4 = HEAP32[$3>>2]|0;
  $$0 = $4;
 }
 return ($$0|0);
}
function _strerror($e) {
 $e = $e|0;
 var $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$03 = 0, $i$03$lcssa = 0, $i$12 = 0, $s$0$lcssa = 0, $s$01 = 0, $s$1 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $i$03 = 0;
 while(1) {
  $1 = (15929 + ($i$03)|0);
  $2 = HEAP8[$1>>0]|0;
  $3 = $2&255;
  $4 = ($3|0)==($e|0);
  if ($4) {
   $i$03$lcssa = $i$03;
   label = 2;
   break;
  }
  $5 = (($i$03) + 1)|0;
  $6 = ($5|0)==(87);
  if ($6) {
   $i$12 = 87;$s$01 = 16017;
   label = 5;
   break;
  } else {
   $i$03 = $5;
  }
 }
 if ((label|0) == 2) {
  $0 = ($i$03$lcssa|0)==(0);
  if ($0) {
   $s$0$lcssa = 16017;
  } else {
   $i$12 = $i$03$lcssa;$s$01 = 16017;
   label = 5;
  }
 }
 if ((label|0) == 5) {
  while(1) {
   label = 0;
   $s$1 = $s$01;
   while(1) {
    $7 = HEAP8[$s$1>>0]|0;
    $8 = ($7<<24>>24)==(0);
    $9 = ((($s$1)) + 1|0);
    if ($8) {
     $$lcssa = $9;
     break;
    } else {
     $s$1 = $9;
    }
   }
   $10 = (($i$12) + -1)|0;
   $11 = ($10|0)==(0);
   if ($11) {
    $s$0$lcssa = $$lcssa;
    break;
   } else {
    $i$12 = $10;$s$01 = $$lcssa;
    label = 5;
   }
  }
 }
 return ($s$0$lcssa|0);
}
function ___floatscan($f,$prec,$pok) {
 $f = $f|0;
 $prec = $prec|0;
 $pok = $pok|0;
 var $$$i = 0, $$0 = 0.0, $$0$i27 = 0.0, $$010$i = 0, $$07$i = 0, $$0710$i = 0, $$0711$i = 0, $$09$i = 0, $$1$be$i = 0, $$1$ph$i = 0, $$11$i = 0, $$18$i = 0, $$2$i = 0, $$3$be$i = 0, $$3$lcssa$i = 0, $$3105$i = 0, $$in = 0, $$k$0$i = 0, $$lcssa = 0, $$lcssa256 = 0;
 var $$lcssa256$lcssa = 0, $$lcssa257 = 0, $$lcssa257$lcssa = 0, $$lcssa263 = 0, $$lcssa264 = 0, $$lcssa265 = 0, $$lcssa275 = 0, $$lnz$0$i = 0, $$neg32$i = 0, $$not$i = 0, $$old8 = 0, $$pn$i = 0.0, $$pre$i = 0, $$pre$i17 = 0, $$pre$phi42$iZ2D = 0.0, $$pre41$i = 0.0, $$promoted$i = 0, $$sink$off0$i = 0, $0 = 0, $1 = 0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0.0, $183 = 0.0, $184 = 0.0, $185 = 0.0, $186 = 0, $187 = 0, $188 = 0.0, $189 = 0.0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0;
 var $208 = 0, $209 = 0.0, $21 = 0, $210 = 0.0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0;
 var $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0;
 var $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0.0, $259 = 0.0, $26 = 0, $260 = 0, $261 = 0;
 var $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0.0, $268 = 0.0, $269 = 0.0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0;
 var $280 = 0.0, $281 = 0.0, $282 = 0.0, $283 = 0, $284 = 0, $285 = 0.0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0;
 var $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0.0, $31 = 0, $310 = 0.0, $311 = 0.0, $312 = 0, $313 = 0, $314 = 0, $315 = 0;
 var $316 = 0, $317 = 0.0, $318 = 0.0, $319 = 0.0, $32 = 0, $320 = 0.0, $321 = 0.0, $322 = 0.0, $323 = 0, $324 = 0, $325 = 0.0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0;
 var $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0;
 var $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0;
 var $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0;
 var $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0;
 var $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0;
 var $424 = 0.0, $425 = 0.0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0.0;
 var $442 = 0.0, $443 = 0.0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0.0, $454 = 0.0, $455 = 0.0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0;
 var $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0.0, $466 = 0.0, $467 = 0.0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0;
 var $479 = 0.0, $48 = 0, $480 = 0, $481 = 0.0, $482 = 0.0, $483 = 0, $484 = 0.0, $485 = 0, $486 = 0.0, $487 = 0.0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0.0, $492 = 0.0, $493 = 0, $494 = 0, $495 = 0, $496 = 0;
 var $497 = 0, $498 = 0.0, $499 = 0.0, $5 = 0, $50 = 0.0, $500 = 0.0, $501 = 0, $502 = 0, $503 = 0, $504 = 0.0, $505 = 0.0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0.0, $510 = 0, $511 = 0, $512 = 0, $513 = 0;
 var $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0.0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0;
 var $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0;
 var $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0;
 var $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0;
 var $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0;
 var $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0.0, $62 = 0, $620 = 0, $621 = 0;
 var $622 = 0, $623 = 0, $624 = 0.0, $625 = 0.0, $626 = 0.0, $627 = 0, $628 = 0.0, $629 = 0.0, $63 = 0, $630 = 0.0, $631 = 0.0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0;
 var $640 = 0, $641 = 0, $642 = 0.0, $643 = 0.0, $644 = 0.0, $645 = 0, $646 = 0.0, $647 = 0.0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0.0, $652 = 0.0, $653 = 0.0, $654 = 0.0, $655 = 0, $656 = 0, $657 = 0.0, $658 = 0;
 var $659 = 0.0, $66 = 0, $660 = 0.0, $661 = 0.0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0.0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0.0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0;
 var $677 = 0, $678 = 0.0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0.0, $684 = 0, $685 = 0, $686 = 0.0, $687 = 0.0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0;
 var $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0;
 var $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $a$0$lcssa151$i = 0, $a$085$i = 0, $a$1$i = 0, $a$1$i$lcssa = 0, $a$2$ph38$i = 0, $a$3$i = 0, $a$3$i$lcssa248 = 0, $a$3$i249 = 0, $a$3$ph$i = 0, $a$3$ph157$i = 0, $a$478$i = 0, $a$5$i = 0, $a$5$i$lcssa = 0, $a$5$i$lcssa$lcssa = 0, $bias$0$i = 0.0, $bias$0$i25 = 0.0, $bits$0$ph = 0, $brmerge$i28 = 0;
 var $c$0 = 0, $c$0$i = 0, $c$1$lcssa = 0, $c$1$ph$i = 0, $c$179 = 0, $c$2 = 0, $c$2$i = 0, $c$2$lcssa$i = 0, $c$377 = 0, $c$4 = 0, $c$5 = 0, $c$6 = 0, $carry$087$i = 0, $carry1$0$i = 0, $carry1$1$i = 0, $carry1$1$i$lcssa = 0, $carry1$1$i$lcssa$lcssa = 0, $carry3$081$i = 0, $cond$i = 0, $d$0$i = 0;
 var $denormal$0$i = 0, $denormal$1$i = 0, $denormal$2$i = 0, $e2$0$i19 = 0, $e2$0$ph$i = 0, $e2$1$i = 0, $e2$1$i246 = 0, $e2$1$ph$i = 0, $e2$1$ph156$i = 0, $e2$2$i = 0, $e2$3$i = 0, $emin$0$ph = 0, $exitcond$i = 0, $frac$0$i = 0.0, $frac$1$i = 0.0, $frac$2$i = 0.0, $gotdig$0$i = 0, $gotdig$0$i$lcssa242 = 0, $gotdig$0$i12 = 0, $gotdig$0$i12$lcssa273 = 0;
 var $gotdig$2$i = 0, $gotdig$2$i$lcssa = 0, $gotdig$2$i13 = 0, $gotdig$3$i = 0, $gotdig$3$lcssa$i = 0, $gotdig$3101$i = 0, $gotdig$3101$i$lcssa = 0, $gotdig$4$i = 0, $gotrad$0$i = 0, $gotrad$0$i$lcssa = 0, $gotrad$0$i14 = 0, $gotrad$1$i = 0, $gotrad$1$lcssa$i = 0, $gotrad$1102$i = 0, $gotrad$2$i = 0, $gottail$0$i = 0, $gottail$1$i = 0, $gottail$2$i = 0, $i$0$lcssa = 0, $i$078 = 0;
 var $i$1 = 0, $i$276 = 0, $i$3 = 0, $i$4 = 0, $i$4$lcssa = 0, $j$0$lcssa$i = 0, $j$0104$i = 0, $j$0104$i$lcssa = 0, $j$067$i = 0, $j$068$i = 0, $j$069$i = 0, $j$2$i = 0, $j$394$i = 0, $k$0$lcssa$i = 0, $k$0103$i = 0, $k$0103$i$lcssa = 0, $k$063$i = 0, $k$064$i = 0, $k$065$i = 0, $k$2$i = 0;
 var $k$3$i = 0, $k$486$i = 0, $k$5$i = 0, $k$5$in$i = 0, $k$5$z$2$i = 0, $k$679$i = 0, $lnz$0$lcssa$i = 0, $lnz$0100$i = 0, $lnz$0100$i$lcssa = 0, $lnz$057$i = 0, $lnz$058$i = 0, $lnz$059$i = 0, $lnz$2$i = 0, $or$cond = 0, $or$cond$i = 0, $or$cond$i16 = 0, $or$cond13$i = 0, $or$cond15$i = 0, $or$cond16$i = 0, $or$cond17$i = 0;
 var $or$cond182$i = 0, $or$cond19$i = 0, $or$cond20$i = 0, $or$cond3$i = 0, $or$cond4$i = 0, $or$cond5 = 0, $or$cond6$i = 0, $or$cond7 = 0, $or$cond8$i = 0, $or$cond9 = 0, $or$cond9$i = 0, $rp$0$lcssa152$i = 0, $rp$084$i = 0, $rp$1$i18 = 0, $rp$1$i18$lcssa = 0, $rp$2$ph36$i = 0, $rp$3$ph$i = 0, $rp$3$ph34$i = 0, $rp$477$i = 0, $rp$5$i = 0;
 var $rp$5$i$lcssa = 0, $rp$5$i$lcssa$lcssa = 0, $scale$0$i = 0.0, $scale$1$i = 0.0, $scale$2$i = 0.0, $sign$0 = 0, $storemerge$i = 0, $sum$i = 0, $x$0$i = 0, $x$0$i$lcssa = 0, $x$1$i = 0, $x$2$i = 0, $x$3$lcssa$i = 0, $x$324$i = 0, $x$4$lcssa$i = 0, $x$419$i = 0, $x$5$i = 0, $x$6$i = 0, $x$i = 0, $y$0$i = 0.0;
 var $y$0$i$lcssa = 0.0, $y$1$i = 0.0, $y$1$i24 = 0.0, $y$2$i = 0.0, $y$2$i26 = 0.0, $y$3$i = 0.0, $y$3$lcssa$i = 0.0, $y$320$i = 0.0, $y$4$i = 0.0, $y$5$i = 0.0, $z$0$i = 0, $z$1$i = 0, $z$1$ph37$i = 0, $z$2$i = 0, $z$3$i = 0, $z$3$i$lcssa = 0, $z$3$i$lcssa$lcssa = 0, $z$4$i = 0, $z$5$ph$i = 0, $z$7$1$i = 0;
 var $z$7$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 512|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $x$i = sp;
 switch ($prec|0) {
 case 0:  {
  $bits$0$ph = 24;$emin$0$ph = -149;
  label = 4;
  break;
 }
 case 1:  {
  $bits$0$ph = 53;$emin$0$ph = -1074;
  label = 4;
  break;
 }
 case 2:  {
  $bits$0$ph = 53;$emin$0$ph = -1074;
  label = 4;
  break;
 }
 default: {
  $$0 = 0.0;
 }
 }
 L4: do {
  if ((label|0) == 4) {
   $0 = ((($f)) + 4|0);
   $1 = ((($f)) + 100|0);
   while(1) {
    $2 = HEAP32[$0>>2]|0;
    $3 = HEAP32[$1>>2]|0;
    $4 = ($2>>>0)<($3>>>0);
    if ($4) {
     $5 = ((($2)) + 1|0);
     HEAP32[$0>>2] = $5;
     $6 = HEAP8[$2>>0]|0;
     $7 = $6&255;
     $9 = $7;
    } else {
     $8 = (___shgetc($f)|0);
     $9 = $8;
    }
    $10 = (_isspace($9)|0);
    $11 = ($10|0)==(0);
    if ($11) {
     $$lcssa275 = $9;
     break;
    }
   }
   $12 = ($$lcssa275|0)==(45);
   L13: do {
    switch ($$lcssa275|0) {
    case 43: case 45:  {
     $13 = $12&1;
     $14 = $13 << 1;
     $15 = (1 - ($14))|0;
     $16 = HEAP32[$0>>2]|0;
     $17 = HEAP32[$1>>2]|0;
     $18 = ($16>>>0)<($17>>>0);
     if ($18) {
      $19 = ((($16)) + 1|0);
      HEAP32[$0>>2] = $19;
      $20 = HEAP8[$16>>0]|0;
      $21 = $20&255;
      $c$0 = $21;$sign$0 = $15;
      break L13;
     } else {
      $22 = (___shgetc($f)|0);
      $c$0 = $22;$sign$0 = $15;
      break L13;
     }
     break;
    }
    default: {
     $c$0 = $$lcssa275;$sign$0 = 1;
    }
    }
   } while(0);
   $c$179 = $c$0;$i$078 = 0;
   while(1) {
    $23 = $c$179 | 32;
    $24 = (17821 + ($i$078)|0);
    $25 = HEAP8[$24>>0]|0;
    $26 = $25 << 24 >> 24;
    $27 = ($23|0)==($26|0);
    if (!($27)) {
     $c$1$lcssa = $c$179;$i$0$lcssa = $i$078;
     break;
    }
    $28 = ($i$078>>>0)<(7);
    do {
     if ($28) {
      $29 = HEAP32[$0>>2]|0;
      $30 = HEAP32[$1>>2]|0;
      $31 = ($29>>>0)<($30>>>0);
      if ($31) {
       $32 = ((($29)) + 1|0);
       HEAP32[$0>>2] = $32;
       $33 = HEAP8[$29>>0]|0;
       $34 = $33&255;
       $c$2 = $34;
       break;
      } else {
       $35 = (___shgetc($f)|0);
       $c$2 = $35;
       break;
      }
     } else {
      $c$2 = $c$179;
     }
    } while(0);
    $36 = (($i$078) + 1)|0;
    $37 = ($36>>>0)<(8);
    if ($37) {
     $c$179 = $c$2;$i$078 = $36;
    } else {
     $c$1$lcssa = $c$2;$i$0$lcssa = $36;
     break;
    }
   }
   L29: do {
    switch ($i$0$lcssa|0) {
    case 8:  {
     break;
    }
    case 3:  {
     label = 23;
     break;
    }
    default: {
     $38 = ($i$0$lcssa>>>0)>(3);
     $39 = ($pok|0)!=(0);
     $or$cond5 = $39 & $38;
     if ($or$cond5) {
      $40 = ($i$0$lcssa|0)==(8);
      if ($40) {
       break L29;
      } else {
       label = 23;
       break L29;
      }
     }
     $53 = ($i$0$lcssa|0)==(0);
     L34: do {
      if ($53) {
       $c$377 = $c$1$lcssa;$i$276 = 0;
       while(1) {
        $54 = $c$377 | 32;
        $55 = (20744 + ($i$276)|0);
        $56 = HEAP8[$55>>0]|0;
        $57 = $56 << 24 >> 24;
        $58 = ($54|0)==($57|0);
        if (!($58)) {
         $c$5 = $c$377;$i$3 = $i$276;
         break L34;
        }
        $59 = ($i$276>>>0)<(2);
        do {
         if ($59) {
          $60 = HEAP32[$0>>2]|0;
          $61 = HEAP32[$1>>2]|0;
          $62 = ($60>>>0)<($61>>>0);
          if ($62) {
           $63 = ((($60)) + 1|0);
           HEAP32[$0>>2] = $63;
           $64 = HEAP8[$60>>0]|0;
           $65 = $64&255;
           $c$4 = $65;
           break;
          } else {
           $66 = (___shgetc($f)|0);
           $c$4 = $66;
           break;
          }
         } else {
          $c$4 = $c$377;
         }
        } while(0);
        $67 = (($i$276) + 1)|0;
        $68 = ($67>>>0)<(3);
        if ($68) {
         $c$377 = $c$4;$i$276 = $67;
        } else {
         $c$5 = $c$4;$i$3 = $67;
         break;
        }
       }
      } else {
       $c$5 = $c$1$lcssa;$i$3 = $i$0$lcssa;
      }
     } while(0);
     switch ($i$3|0) {
     case 3:  {
      $69 = HEAP32[$0>>2]|0;
      $70 = HEAP32[$1>>2]|0;
      $71 = ($69>>>0)<($70>>>0);
      if ($71) {
       $72 = ((($69)) + 1|0);
       HEAP32[$0>>2] = $72;
       $73 = HEAP8[$69>>0]|0;
       $74 = $73&255;
       $77 = $74;
      } else {
       $75 = (___shgetc($f)|0);
       $77 = $75;
      }
      $76 = ($77|0)==(40);
      if ($76) {
       $i$4 = 1;
      } else {
       $78 = HEAP32[$1>>2]|0;
       $79 = ($78|0)==(0|0);
       if ($79) {
        $$0 = nan;
        break L4;
       }
       $80 = HEAP32[$0>>2]|0;
       $81 = ((($80)) + -1|0);
       HEAP32[$0>>2] = $81;
       $$0 = nan;
       break L4;
      }
      while(1) {
       $82 = HEAP32[$0>>2]|0;
       $83 = HEAP32[$1>>2]|0;
       $84 = ($82>>>0)<($83>>>0);
       if ($84) {
        $85 = ((($82)) + 1|0);
        HEAP32[$0>>2] = $85;
        $86 = HEAP8[$82>>0]|0;
        $87 = $86&255;
        $90 = $87;
       } else {
        $88 = (___shgetc($f)|0);
        $90 = $88;
       }
       $89 = (($90) + -48)|0;
       $91 = ($89>>>0)<(10);
       $92 = (($90) + -65)|0;
       $93 = ($92>>>0)<(26);
       $or$cond = $91 | $93;
       if (!($or$cond)) {
        $94 = (($90) + -97)|0;
        $95 = ($94>>>0)<(26);
        $96 = ($90|0)==(95);
        $or$cond7 = $96 | $95;
        if (!($or$cond7)) {
         $$lcssa = $90;$i$4$lcssa = $i$4;
         break;
        }
       }
       $108 = (($i$4) + 1)|0;
       $i$4 = $108;
      }
      $97 = ($$lcssa|0)==(41);
      if ($97) {
       $$0 = nan;
       break L4;
      }
      $98 = HEAP32[$1>>2]|0;
      $99 = ($98|0)==(0|0);
      if (!($99)) {
       $100 = HEAP32[$0>>2]|0;
       $101 = ((($100)) + -1|0);
       HEAP32[$0>>2] = $101;
      }
      if (!($39)) {
       $103 = (___errno_location()|0);
       HEAP32[$103>>2] = 22;
       ___shlim($f,0);
       $$0 = 0.0;
       break L4;
      }
      $102 = ($i$4$lcssa|0)==(0);
      if ($102) {
       $$0 = nan;
       break L4;
      } else {
       $$in = $i$4$lcssa;
      }
      while(1) {
       $104 = (($$in) + -1)|0;
       if (!($99)) {
        $105 = HEAP32[$0>>2]|0;
        $106 = ((($105)) + -1|0);
        HEAP32[$0>>2] = $106;
       }
       $107 = ($104|0)==(0);
       if ($107) {
        $$0 = nan;
        break L4;
       } else {
        $$in = $104;
       }
      }
      break;
     }
     case 0:  {
      $114 = ($c$5|0)==(48);
      do {
       if ($114) {
        $115 = HEAP32[$0>>2]|0;
        $116 = HEAP32[$1>>2]|0;
        $117 = ($115>>>0)<($116>>>0);
        if ($117) {
         $118 = ((($115)) + 1|0);
         HEAP32[$0>>2] = $118;
         $119 = HEAP8[$115>>0]|0;
         $120 = $119&255;
         $123 = $120;
        } else {
         $121 = (___shgetc($f)|0);
         $123 = $121;
        }
        $122 = $123 | 32;
        $124 = ($122|0)==(120);
        if (!($124)) {
         $326 = HEAP32[$1>>2]|0;
         $327 = ($326|0)==(0|0);
         if ($327) {
          $c$6 = 48;
          break;
         }
         $328 = HEAP32[$0>>2]|0;
         $329 = ((($328)) + -1|0);
         HEAP32[$0>>2] = $329;
         $c$6 = 48;
         break;
        }
        $125 = HEAP32[$0>>2]|0;
        $126 = HEAP32[$1>>2]|0;
        $127 = ($125>>>0)<($126>>>0);
        if ($127) {
         $128 = ((($125)) + 1|0);
         HEAP32[$0>>2] = $128;
         $129 = HEAP8[$125>>0]|0;
         $130 = $129&255;
         $c$0$i = $130;$gotdig$0$i = 0;
        } else {
         $131 = (___shgetc($f)|0);
         $c$0$i = $131;$gotdig$0$i = 0;
        }
        L94: while(1) {
         switch ($c$0$i|0) {
         case 46:  {
          $gotdig$0$i$lcssa242 = $gotdig$0$i;
          label = 74;
          break L94;
          break;
         }
         case 48:  {
          break;
         }
         default: {
          $169 = 0;$171 = 0;$694 = 0;$695 = 0;$c$2$i = $c$0$i;$gotdig$2$i = $gotdig$0$i;$gotrad$0$i = 0;$gottail$0$i = 0;$scale$0$i = 1.0;$x$0$i = 0;$y$0$i = 0.0;
          break L94;
         }
         }
         $132 = HEAP32[$0>>2]|0;
         $133 = HEAP32[$1>>2]|0;
         $134 = ($132>>>0)<($133>>>0);
         if ($134) {
          $135 = ((($132)) + 1|0);
          HEAP32[$0>>2] = $135;
          $136 = HEAP8[$132>>0]|0;
          $137 = $136&255;
          $c$0$i = $137;$gotdig$0$i = 1;
          continue;
         } else {
          $138 = (___shgetc($f)|0);
          $c$0$i = $138;$gotdig$0$i = 1;
          continue;
         }
        }
        if ((label|0) == 74) {
         $139 = HEAP32[$0>>2]|0;
         $140 = HEAP32[$1>>2]|0;
         $141 = ($139>>>0)<($140>>>0);
         if ($141) {
          $142 = ((($139)) + 1|0);
          HEAP32[$0>>2] = $142;
          $143 = HEAP8[$139>>0]|0;
          $144 = $143&255;
          $c$1$ph$i = $144;
         } else {
          $145 = (___shgetc($f)|0);
          $c$1$ph$i = $145;
         }
         $146 = ($c$1$ph$i|0)==(48);
         if ($146) {
          $154 = 0;$155 = 0;
          while(1) {
           $147 = HEAP32[$0>>2]|0;
           $148 = HEAP32[$1>>2]|0;
           $149 = ($147>>>0)<($148>>>0);
           if ($149) {
            $150 = ((($147)) + 1|0);
            HEAP32[$0>>2] = $150;
            $151 = HEAP8[$147>>0]|0;
            $152 = $151&255;
            $159 = $152;
           } else {
            $153 = (___shgetc($f)|0);
            $159 = $153;
           }
           $156 = (_i64Add(($154|0),($155|0),-1,-1)|0);
           $157 = tempRet0;
           $158 = ($159|0)==(48);
           if ($158) {
            $154 = $156;$155 = $157;
           } else {
            $169 = 0;$171 = 0;$694 = $156;$695 = $157;$c$2$i = $159;$gotdig$2$i = 1;$gotrad$0$i = 1;$gottail$0$i = 0;$scale$0$i = 1.0;$x$0$i = 0;$y$0$i = 0.0;
            break;
           }
          }
         } else {
          $169 = 0;$171 = 0;$694 = 0;$695 = 0;$c$2$i = $c$1$ph$i;$gotdig$2$i = $gotdig$0$i$lcssa242;$gotrad$0$i = 1;$gottail$0$i = 0;$scale$0$i = 1.0;$x$0$i = 0;$y$0$i = 0.0;
         }
        }
        while(1) {
         $160 = (($c$2$i) + -48)|0;
         $161 = ($160>>>0)<(10);
         $$pre$i = $c$2$i | 32;
         if ($161) {
          label = 86;
         } else {
          $162 = (($$pre$i) + -97)|0;
          $163 = ($162>>>0)<(6);
          $164 = ($c$2$i|0)==(46);
          $or$cond6$i = $164 | $163;
          if (!($or$cond6$i)) {
           $213 = $171;$214 = $694;$216 = $169;$217 = $695;$c$2$lcssa$i = $c$2$i;$gotdig$2$i$lcssa = $gotdig$2$i;$gotrad$0$i$lcssa = $gotrad$0$i;$x$0$i$lcssa = $x$0$i;$y$0$i$lcssa = $y$0$i;
           break;
          }
          if ($164) {
           $165 = ($gotrad$0$i|0)==(0);
           if ($165) {
            $696 = $171;$697 = $169;$698 = $171;$699 = $169;$gotdig$3$i = $gotdig$2$i;$gotrad$1$i = 1;$gottail$2$i = $gottail$0$i;$scale$2$i = $scale$0$i;$x$2$i = $x$0$i;$y$2$i = $y$0$i;
           } else {
            $213 = $171;$214 = $694;$216 = $169;$217 = $695;$c$2$lcssa$i = 46;$gotdig$2$i$lcssa = $gotdig$2$i;$gotrad$0$i$lcssa = $gotrad$0$i;$x$0$i$lcssa = $x$0$i;$y$0$i$lcssa = $y$0$i;
            break;
           }
          } else {
           label = 86;
          }
         }
         if ((label|0) == 86) {
          label = 0;
          $166 = ($c$2$i|0)>(57);
          $167 = (($$pre$i) + -87)|0;
          $d$0$i = $166 ? $167 : $160;
          $168 = ($169|0)<(0);
          $170 = ($171>>>0)<(8);
          $172 = ($169|0)==(0);
          $173 = $172 & $170;
          $174 = $168 | $173;
          do {
           if ($174) {
            $175 = $x$0$i << 4;
            $176 = (($d$0$i) + ($175))|0;
            $gottail$1$i = $gottail$0$i;$scale$1$i = $scale$0$i;$x$1$i = $176;$y$1$i = $y$0$i;
           } else {
            $177 = ($169|0)<(0);
            $178 = ($171>>>0)<(14);
            $179 = ($169|0)==(0);
            $180 = $179 & $178;
            $181 = $177 | $180;
            if ($181) {
             $182 = (+($d$0$i|0));
             $183 = $scale$0$i * 0.0625;
             $184 = $183 * $182;
             $185 = $y$0$i + $184;
             $gottail$1$i = $gottail$0$i;$scale$1$i = $183;$x$1$i = $x$0$i;$y$1$i = $185;
             break;
            }
            $186 = ($d$0$i|0)==(0);
            $187 = ($gottail$0$i|0)!=(0);
            $or$cond$i = $187 | $186;
            if ($or$cond$i) {
             $gottail$1$i = $gottail$0$i;$scale$1$i = $scale$0$i;$x$1$i = $x$0$i;$y$1$i = $y$0$i;
            } else {
             $188 = $scale$0$i * 0.5;
             $189 = $y$0$i + $188;
             $gottail$1$i = 1;$scale$1$i = $scale$0$i;$x$1$i = $x$0$i;$y$1$i = $189;
            }
           }
          } while(0);
          $190 = (_i64Add(($171|0),($169|0),1,0)|0);
          $191 = tempRet0;
          $696 = $694;$697 = $695;$698 = $190;$699 = $191;$gotdig$3$i = 1;$gotrad$1$i = $gotrad$0$i;$gottail$2$i = $gottail$1$i;$scale$2$i = $scale$1$i;$x$2$i = $x$1$i;$y$2$i = $y$1$i;
         }
         $192 = HEAP32[$0>>2]|0;
         $193 = HEAP32[$1>>2]|0;
         $194 = ($192>>>0)<($193>>>0);
         if ($194) {
          $195 = ((($192)) + 1|0);
          HEAP32[$0>>2] = $195;
          $196 = HEAP8[$192>>0]|0;
          $197 = $196&255;
          $169 = $699;$171 = $698;$694 = $696;$695 = $697;$c$2$i = $197;$gotdig$2$i = $gotdig$3$i;$gotrad$0$i = $gotrad$1$i;$gottail$0$i = $gottail$2$i;$scale$0$i = $scale$2$i;$x$0$i = $x$2$i;$y$0$i = $y$2$i;
          continue;
         } else {
          $198 = (___shgetc($f)|0);
          $169 = $699;$171 = $698;$694 = $696;$695 = $697;$c$2$i = $198;$gotdig$2$i = $gotdig$3$i;$gotrad$0$i = $gotrad$1$i;$gottail$0$i = $gottail$2$i;$scale$0$i = $scale$2$i;$x$0$i = $x$2$i;$y$0$i = $y$2$i;
          continue;
         }
        }
        $199 = ($gotdig$2$i$lcssa|0)==(0);
        if ($199) {
         $200 = HEAP32[$1>>2]|0;
         $201 = ($200|0)==(0|0);
         if (!($201)) {
          $202 = HEAP32[$0>>2]|0;
          $203 = ((($202)) + -1|0);
          HEAP32[$0>>2] = $203;
         }
         $204 = ($pok|0)==(0);
         if ($204) {
          ___shlim($f,0);
         } else {
          if (!($201)) {
           $205 = HEAP32[$0>>2]|0;
           $206 = ((($205)) + -1|0);
           HEAP32[$0>>2] = $206;
           $207 = ($gotrad$0$i$lcssa|0)==(0);
           if (!($207)) {
            $208 = ((($205)) + -2|0);
            HEAP32[$0>>2] = $208;
           }
          }
         }
         $209 = (+($sign$0|0));
         $210 = $209 * 0.0;
         $$0 = $210;
         break L4;
        }
        $211 = ($gotrad$0$i$lcssa|0)==(0);
        $212 = $211 ? $213 : $214;
        $215 = $211 ? $216 : $217;
        $218 = ($216|0)<(0);
        $219 = ($213>>>0)<(8);
        $220 = ($216|0)==(0);
        $221 = $220 & $219;
        $222 = $218 | $221;
        if ($222) {
         $224 = $213;$225 = $216;$x$324$i = $x$0$i$lcssa;
         while(1) {
          $223 = $x$324$i << 4;
          $226 = (_i64Add(($224|0),($225|0),1,0)|0);
          $227 = tempRet0;
          $228 = ($227|0)<(0);
          $229 = ($226>>>0)<(8);
          $230 = ($227|0)==(0);
          $231 = $230 & $229;
          $232 = $228 | $231;
          if ($232) {
           $224 = $226;$225 = $227;$x$324$i = $223;
          } else {
           $x$3$lcssa$i = $223;
           break;
          }
         }
        } else {
         $x$3$lcssa$i = $x$0$i$lcssa;
        }
        $233 = $c$2$lcssa$i | 32;
        $234 = ($233|0)==(112);
        if ($234) {
         $235 = (_scanexp($f,$pok)|0);
         $236 = tempRet0;
         $237 = ($235|0)==(0);
         $238 = ($236|0)==(-2147483648);
         $239 = $237 & $238;
         if ($239) {
          $240 = ($pok|0)==(0);
          if ($240) {
           ___shlim($f,0);
           $$0 = 0.0;
           break L4;
          }
          $241 = HEAP32[$1>>2]|0;
          $242 = ($241|0)==(0|0);
          if ($242) {
           $253 = 0;$254 = 0;
          } else {
           $243 = HEAP32[$0>>2]|0;
           $244 = ((($243)) + -1|0);
           HEAP32[$0>>2] = $244;
           $253 = 0;$254 = 0;
          }
         } else {
          $253 = $235;$254 = $236;
         }
        } else {
         $245 = HEAP32[$1>>2]|0;
         $246 = ($245|0)==(0|0);
         if ($246) {
          $253 = 0;$254 = 0;
         } else {
          $247 = HEAP32[$0>>2]|0;
          $248 = ((($247)) + -1|0);
          HEAP32[$0>>2] = $248;
          $253 = 0;$254 = 0;
         }
        }
        $249 = (_bitshift64Shl(($212|0),($215|0),2)|0);
        $250 = tempRet0;
        $251 = (_i64Add(($249|0),($250|0),-32,-1)|0);
        $252 = tempRet0;
        $255 = (_i64Add(($251|0),($252|0),($253|0),($254|0))|0);
        $256 = tempRet0;
        $257 = ($x$3$lcssa$i|0)==(0);
        if ($257) {
         $258 = (+($sign$0|0));
         $259 = $258 * 0.0;
         $$0 = $259;
         break L4;
        }
        $260 = (0 - ($emin$0$ph))|0;
        $261 = ($256|0)>(0);
        $262 = ($255>>>0)>($260>>>0);
        $263 = ($256|0)==(0);
        $264 = $263 & $262;
        $265 = $261 | $264;
        if ($265) {
         $266 = (___errno_location()|0);
         HEAP32[$266>>2] = 34;
         $267 = (+($sign$0|0));
         $268 = $267 * 1.7976931348623157E+308;
         $269 = $268 * 1.7976931348623157E+308;
         $$0 = $269;
         break L4;
        }
        $270 = (($emin$0$ph) + -106)|0;
        $271 = ($270|0)<(0);
        $272 = $271 << 31 >> 31;
        $273 = ($256|0)<($272|0);
        $274 = ($255>>>0)<($270>>>0);
        $275 = ($256|0)==($272|0);
        $276 = $275 & $274;
        $277 = $273 | $276;
        if ($277) {
         $279 = (___errno_location()|0);
         HEAP32[$279>>2] = 34;
         $280 = (+($sign$0|0));
         $281 = $280 * 2.2250738585072014E-308;
         $282 = $281 * 2.2250738585072014E-308;
         $$0 = $282;
         break L4;
        }
        $278 = ($x$3$lcssa$i|0)>(-1);
        if ($278) {
         $288 = $255;$289 = $256;$x$419$i = $x$3$lcssa$i;$y$320$i = $y$0$i$lcssa;
         while(1) {
          $283 = !($y$320$i >= 0.5);
          $284 = $x$419$i << 1;
          $285 = $y$320$i + -1.0;
          $286 = $283&1;
          $287 = $286 | $284;
          $x$5$i = $287 ^ 1;
          $$pn$i = $283 ? $y$320$i : $285;
          $y$4$i = $y$320$i + $$pn$i;
          $290 = (_i64Add(($288|0),($289|0),-1,-1)|0);
          $291 = tempRet0;
          $292 = ($287|0)>(-1);
          if ($292) {
           $288 = $290;$289 = $291;$x$419$i = $x$5$i;$y$320$i = $y$4$i;
          } else {
           $297 = $290;$298 = $291;$x$4$lcssa$i = $x$5$i;$y$3$lcssa$i = $y$4$i;
           break;
          }
         }
        } else {
         $297 = $255;$298 = $256;$x$4$lcssa$i = $x$3$lcssa$i;$y$3$lcssa$i = $y$0$i$lcssa;
        }
        $293 = ($emin$0$ph|0)<(0);
        $294 = $293 << 31 >> 31;
        $295 = (_i64Subtract(32,0,($emin$0$ph|0),($294|0))|0);
        $296 = tempRet0;
        $299 = (_i64Add(($297|0),($298|0),($295|0),($296|0))|0);
        $300 = tempRet0;
        $301 = (0)>($300|0);
        $302 = ($bits$0$ph>>>0)>($299>>>0);
        $303 = (0)==($300|0);
        $304 = $303 & $302;
        $305 = $301 | $304;
        if ($305) {
         $306 = ($299|0)<(0);
         if ($306) {
          $$0710$i = 0;
          label = 127;
         } else {
          $$07$i = $299;
          label = 125;
         }
        } else {
         $$07$i = $bits$0$ph;
         label = 125;
        }
        if ((label|0) == 125) {
         $307 = ($$07$i|0)<(53);
         if ($307) {
          $$0710$i = $$07$i;
          label = 127;
         } else {
          $$pre41$i = (+($sign$0|0));
          $$0711$i = $$07$i;$$pre$phi42$iZ2D = $$pre41$i;$bias$0$i = 0.0;
         }
        }
        if ((label|0) == 127) {
         $308 = (84 - ($$0710$i))|0;
         $309 = (+_scalbn(1.0,$308));
         $310 = (+($sign$0|0));
         $311 = (+_copysignl($309,$310));
         $$0711$i = $$0710$i;$$pre$phi42$iZ2D = $310;$bias$0$i = $311;
        }
        $312 = ($$0711$i|0)<(32);
        $313 = $y$3$lcssa$i != 0.0;
        $or$cond4$i = $313 & $312;
        $314 = $x$4$lcssa$i & 1;
        $315 = ($314|0)==(0);
        $or$cond9$i = $315 & $or$cond4$i;
        $316 = $or$cond9$i&1;
        $x$6$i = (($316) + ($x$4$lcssa$i))|0;
        $y$5$i = $or$cond9$i ? 0.0 : $y$3$lcssa$i;
        $317 = (+($x$6$i>>>0));
        $318 = $$pre$phi42$iZ2D * $317;
        $319 = $bias$0$i + $318;
        $320 = $$pre$phi42$iZ2D * $y$5$i;
        $321 = $320 + $319;
        $322 = $321 - $bias$0$i;
        $323 = $322 != 0.0;
        if (!($323)) {
         $324 = (___errno_location()|0);
         HEAP32[$324>>2] = 34;
        }
        $325 = (+_scalbnl($322,$297));
        $$0 = $325;
        break L4;
       } else {
        $c$6 = $c$5;
       }
      } while(0);
      $sum$i = (($emin$0$ph) + ($bits$0$ph))|0;
      $330 = (0 - ($sum$i))|0;
      $$09$i = $c$6;$gotdig$0$i12 = 0;
      L184: while(1) {
       switch ($$09$i|0) {
       case 46:  {
        $gotdig$0$i12$lcssa273 = $gotdig$0$i12;
        label = 138;
        break L184;
        break;
       }
       case 48:  {
        break;
       }
       default: {
        $$2$i = $$09$i;$700 = 0;$701 = 0;$gotdig$2$i13 = $gotdig$0$i12;$gotrad$0$i14 = 0;
        break L184;
       }
       }
       $331 = HEAP32[$0>>2]|0;
       $332 = HEAP32[$1>>2]|0;
       $333 = ($331>>>0)<($332>>>0);
       if ($333) {
        $334 = ((($331)) + 1|0);
        HEAP32[$0>>2] = $334;
        $335 = HEAP8[$331>>0]|0;
        $336 = $335&255;
        $$09$i = $336;$gotdig$0$i12 = 1;
        continue;
       } else {
        $337 = (___shgetc($f)|0);
        $$09$i = $337;$gotdig$0$i12 = 1;
        continue;
       }
      }
      if ((label|0) == 138) {
       $338 = HEAP32[$0>>2]|0;
       $339 = HEAP32[$1>>2]|0;
       $340 = ($338>>>0)<($339>>>0);
       if ($340) {
        $341 = ((($338)) + 1|0);
        HEAP32[$0>>2] = $341;
        $342 = HEAP8[$338>>0]|0;
        $343 = $342&255;
        $$1$ph$i = $343;
       } else {
        $344 = (___shgetc($f)|0);
        $$1$ph$i = $344;
       }
       $345 = ($$1$ph$i|0)==(48);
       if ($345) {
        $346 = 0;$347 = 0;
        while(1) {
         $348 = (_i64Add(($346|0),($347|0),-1,-1)|0);
         $349 = tempRet0;
         $350 = HEAP32[$0>>2]|0;
         $351 = HEAP32[$1>>2]|0;
         $352 = ($350>>>0)<($351>>>0);
         if ($352) {
          $353 = ((($350)) + 1|0);
          HEAP32[$0>>2] = $353;
          $354 = HEAP8[$350>>0]|0;
          $355 = $354&255;
          $$1$be$i = $355;
         } else {
          $356 = (___shgetc($f)|0);
          $$1$be$i = $356;
         }
         $357 = ($$1$be$i|0)==(48);
         if ($357) {
          $346 = $348;$347 = $349;
         } else {
          $$2$i = $$1$be$i;$700 = $348;$701 = $349;$gotdig$2$i13 = 1;$gotrad$0$i14 = 1;
          break;
         }
        }
       } else {
        $$2$i = $$1$ph$i;$700 = 0;$701 = 0;$gotdig$2$i13 = $gotdig$0$i12$lcssa273;$gotrad$0$i14 = 1;
       }
      }
      HEAP32[$x$i>>2] = 0;
      $358 = (($$2$i) + -48)|0;
      $359 = ($358>>>0)<(10);
      $360 = ($$2$i|0)==(46);
      $361 = $360 | $359;
      L203: do {
       if ($361) {
        $362 = ((($x$i)) + 496|0);
        $$3105$i = $$2$i;$365 = 0;$366 = 0;$702 = $360;$703 = $358;$704 = $700;$705 = $701;$gotdig$3101$i = $gotdig$2$i13;$gotrad$1102$i = $gotrad$0$i14;$j$0104$i = 0;$k$0103$i = 0;$lnz$0100$i = 0;
        L205: while(1) {
         do {
          if ($702) {
           $cond$i = ($gotrad$1102$i|0)==(0);
           if ($cond$i) {
            $706 = $365;$707 = $366;$708 = $365;$709 = $366;$gotdig$4$i = $gotdig$3101$i;$gotrad$2$i = 1;$j$2$i = $j$0104$i;$k$2$i = $k$0103$i;$lnz$2$i = $lnz$0100$i;
           } else {
            $710 = $704;$711 = $705;$712 = $365;$713 = $366;$gotdig$3101$i$lcssa = $gotdig$3101$i;$j$0104$i$lcssa = $j$0104$i;$k$0103$i$lcssa = $k$0103$i;$lnz$0100$i$lcssa = $lnz$0100$i;
            break L205;
           }
          } else {
           $364 = ($k$0103$i|0)<(125);
           $367 = (_i64Add(($365|0),($366|0),1,0)|0);
           $368 = tempRet0;
           $369 = ($$3105$i|0)!=(48);
           if (!($364)) {
            if (!($369)) {
             $706 = $704;$707 = $705;$708 = $367;$709 = $368;$gotdig$4$i = $gotdig$3101$i;$gotrad$2$i = $gotrad$1102$i;$j$2$i = $j$0104$i;$k$2$i = $k$0103$i;$lnz$2$i = $lnz$0100$i;
             break;
            }
            $379 = HEAP32[$362>>2]|0;
            $380 = $379 | 1;
            HEAP32[$362>>2] = $380;
            $706 = $704;$707 = $705;$708 = $367;$709 = $368;$gotdig$4$i = $gotdig$3101$i;$gotrad$2$i = $gotrad$1102$i;$j$2$i = $j$0104$i;$k$2$i = $k$0103$i;$lnz$2$i = $lnz$0100$i;
            break;
           }
           $$lnz$0$i = $369 ? $367 : $lnz$0100$i;
           $370 = ($j$0104$i|0)==(0);
           $371 = (($x$i) + ($k$0103$i<<2)|0);
           if ($370) {
            $storemerge$i = $703;
           } else {
            $372 = HEAP32[$371>>2]|0;
            $373 = ($372*10)|0;
            $374 = (($$3105$i) + -48)|0;
            $375 = (($374) + ($373))|0;
            $storemerge$i = $375;
           }
           HEAP32[$371>>2] = $storemerge$i;
           $376 = (($j$0104$i) + 1)|0;
           $377 = ($376|0)==(9);
           $378 = $377&1;
           $$k$0$i = (($378) + ($k$0103$i))|0;
           $$11$i = $377 ? 0 : $376;
           $706 = $704;$707 = $705;$708 = $367;$709 = $368;$gotdig$4$i = 1;$gotrad$2$i = $gotrad$1102$i;$j$2$i = $$11$i;$k$2$i = $$k$0$i;$lnz$2$i = $$lnz$0$i;
          }
         } while(0);
         $381 = HEAP32[$0>>2]|0;
         $382 = HEAP32[$1>>2]|0;
         $383 = ($381>>>0)<($382>>>0);
         if ($383) {
          $384 = ((($381)) + 1|0);
          HEAP32[$0>>2] = $384;
          $385 = HEAP8[$381>>0]|0;
          $386 = $385&255;
          $$3$be$i = $386;
         } else {
          $387 = (___shgetc($f)|0);
          $$3$be$i = $387;
         }
         $388 = (($$3$be$i) + -48)|0;
         $389 = ($388>>>0)<(10);
         $390 = ($$3$be$i|0)==(46);
         $391 = $390 | $389;
         if ($391) {
          $$3105$i = $$3$be$i;$365 = $708;$366 = $709;$702 = $390;$703 = $388;$704 = $706;$705 = $707;$gotdig$3101$i = $gotdig$4$i;$gotrad$1102$i = $gotrad$2$i;$j$0104$i = $j$2$i;$k$0103$i = $k$2$i;$lnz$0100$i = $lnz$2$i;
         } else {
          $$3$lcssa$i = $$3$be$i;$394 = $708;$395 = $706;$397 = $709;$398 = $707;$gotdig$3$lcssa$i = $gotdig$4$i;$gotrad$1$lcssa$i = $gotrad$2$i;$j$0$lcssa$i = $j$2$i;$k$0$lcssa$i = $k$2$i;$lnz$0$lcssa$i = $lnz$2$i;
          label = 161;
          break L203;
         }
        }
        $363 = ($gotdig$3101$i$lcssa|0)!=(0);
        $714 = $712;$715 = $713;$716 = $710;$717 = $711;$718 = $363;$j$069$i = $j$0104$i$lcssa;$k$065$i = $k$0103$i$lcssa;$lnz$059$i = $lnz$0100$i$lcssa;
        label = 169;
       } else {
        $$3$lcssa$i = $$2$i;$394 = 0;$395 = $700;$397 = 0;$398 = $701;$gotdig$3$lcssa$i = $gotdig$2$i13;$gotrad$1$lcssa$i = $gotrad$0$i14;$j$0$lcssa$i = 0;$k$0$lcssa$i = 0;$lnz$0$lcssa$i = 0;
        label = 161;
       }
      } while(0);
      do {
       if ((label|0) == 161) {
        $392 = ($gotrad$1$lcssa$i|0)==(0);
        $393 = $392 ? $394 : $395;
        $396 = $392 ? $397 : $398;
        $399 = ($gotdig$3$lcssa$i|0)!=(0);
        $400 = $$3$lcssa$i | 32;
        $401 = ($400|0)==(101);
        $or$cond13$i = $401 & $399;
        if (!($or$cond13$i)) {
         $416 = ($$3$lcssa$i|0)>(-1);
         if ($416) {
          $714 = $394;$715 = $397;$716 = $393;$717 = $396;$718 = $399;$j$069$i = $j$0$lcssa$i;$k$065$i = $k$0$lcssa$i;$lnz$059$i = $lnz$0$lcssa$i;
          label = 169;
          break;
         } else {
          $719 = $394;$720 = $397;$721 = $399;$722 = $393;$723 = $396;$j$068$i = $j$0$lcssa$i;$k$064$i = $k$0$lcssa$i;$lnz$058$i = $lnz$0$lcssa$i;
          label = 171;
          break;
         }
        }
        $402 = (_scanexp($f,$pok)|0);
        $403 = tempRet0;
        $404 = ($402|0)==(0);
        $405 = ($403|0)==(-2147483648);
        $406 = $404 & $405;
        if ($406) {
         $407 = ($pok|0)==(0);
         if ($407) {
          ___shlim($f,0);
          $$0$i27 = 0.0;
          break;
         }
         $408 = HEAP32[$1>>2]|0;
         $409 = ($408|0)==(0|0);
         if ($409) {
          $412 = 0;$413 = 0;
         } else {
          $410 = HEAP32[$0>>2]|0;
          $411 = ((($410)) + -1|0);
          HEAP32[$0>>2] = $411;
          $412 = 0;$413 = 0;
         }
        } else {
         $412 = $402;$413 = $403;
        }
        $414 = (_i64Add(($412|0),($413|0),($393|0),($396|0))|0);
        $415 = tempRet0;
        $427 = $414;$428 = $394;$430 = $415;$431 = $397;$j$067$i = $j$0$lcssa$i;$k$063$i = $k$0$lcssa$i;$lnz$057$i = $lnz$0$lcssa$i;
        label = 173;
       }
      } while(0);
      if ((label|0) == 169) {
       $417 = HEAP32[$1>>2]|0;
       $418 = ($417|0)==(0|0);
       if ($418) {
        $719 = $714;$720 = $715;$721 = $718;$722 = $716;$723 = $717;$j$068$i = $j$069$i;$k$064$i = $k$065$i;$lnz$058$i = $lnz$059$i;
        label = 171;
       } else {
        $419 = HEAP32[$0>>2]|0;
        $420 = ((($419)) + -1|0);
        HEAP32[$0>>2] = $420;
        if ($718) {
         $427 = $716;$428 = $714;$430 = $717;$431 = $715;$j$067$i = $j$069$i;$k$063$i = $k$065$i;$lnz$057$i = $lnz$059$i;
         label = 173;
        } else {
         label = 172;
        }
       }
      }
      if ((label|0) == 171) {
       if ($721) {
        $427 = $722;$428 = $719;$430 = $723;$431 = $720;$j$067$i = $j$068$i;$k$063$i = $k$064$i;$lnz$057$i = $lnz$058$i;
        label = 173;
       } else {
        label = 172;
       }
      }
      do {
       if ((label|0) == 172) {
        $421 = (___errno_location()|0);
        HEAP32[$421>>2] = 22;
        ___shlim($f,0);
        $$0$i27 = 0.0;
       }
       else if ((label|0) == 173) {
        $422 = HEAP32[$x$i>>2]|0;
        $423 = ($422|0)==(0);
        if ($423) {
         $424 = (+($sign$0|0));
         $425 = $424 * 0.0;
         $$0$i27 = $425;
         break;
        }
        $426 = ($427|0)==($428|0);
        $429 = ($430|0)==($431|0);
        $432 = $426 & $429;
        $433 = ($431|0)<(0);
        $434 = ($428>>>0)<(10);
        $435 = ($431|0)==(0);
        $436 = $435 & $434;
        $437 = $433 | $436;
        $or$cond$i16 = $437 & $432;
        if ($or$cond$i16) {
         $438 = ($bits$0$ph>>>0)>(30);
         $439 = $422 >>> $bits$0$ph;
         $440 = ($439|0)==(0);
         $or$cond15$i = $438 | $440;
         if ($or$cond15$i) {
          $441 = (+($sign$0|0));
          $442 = (+($422>>>0));
          $443 = $441 * $442;
          $$0$i27 = $443;
          break;
         }
        }
        $444 = (($emin$0$ph|0) / -2)&-1;
        $445 = ($444|0)<(0);
        $446 = $445 << 31 >> 31;
        $447 = ($430|0)>($446|0);
        $448 = ($427>>>0)>($444>>>0);
        $449 = ($430|0)==($446|0);
        $450 = $449 & $448;
        $451 = $447 | $450;
        if ($451) {
         $452 = (___errno_location()|0);
         HEAP32[$452>>2] = 34;
         $453 = (+($sign$0|0));
         $454 = $453 * 1.7976931348623157E+308;
         $455 = $454 * 1.7976931348623157E+308;
         $$0$i27 = $455;
         break;
        }
        $456 = (($emin$0$ph) + -106)|0;
        $457 = ($456|0)<(0);
        $458 = $457 << 31 >> 31;
        $459 = ($430|0)<($458|0);
        $460 = ($427>>>0)<($456>>>0);
        $461 = ($430|0)==($458|0);
        $462 = $461 & $460;
        $463 = $459 | $462;
        if ($463) {
         $464 = (___errno_location()|0);
         HEAP32[$464>>2] = 34;
         $465 = (+($sign$0|0));
         $466 = $465 * 2.2250738585072014E-308;
         $467 = $466 * 2.2250738585072014E-308;
         $$0$i27 = $467;
         break;
        }
        $468 = ($j$067$i|0)==(0);
        if ($468) {
         $k$3$i = $k$063$i;
        } else {
         $469 = ($j$067$i|0)<(9);
         if ($469) {
          $470 = (($x$i) + ($k$063$i<<2)|0);
          $$promoted$i = HEAP32[$470>>2]|0;
          $472 = $$promoted$i;$j$394$i = $j$067$i;
          while(1) {
           $471 = ($472*10)|0;
           $473 = (($j$394$i) + 1)|0;
           $exitcond$i = ($473|0)==(9);
           if ($exitcond$i) {
            $$lcssa265 = $471;
            break;
           } else {
            $472 = $471;$j$394$i = $473;
           }
          }
          HEAP32[$470>>2] = $$lcssa265;
         }
         $474 = (($k$063$i) + 1)|0;
         $k$3$i = $474;
        }
        $475 = ($lnz$057$i|0)<(9);
        if ($475) {
         $476 = ($lnz$057$i|0)<=($427|0);
         $477 = ($427|0)<(18);
         $or$cond3$i = $476 & $477;
         if ($or$cond3$i) {
          $478 = ($427|0)==(9);
          if ($478) {
           $479 = (+($sign$0|0));
           $480 = HEAP32[$x$i>>2]|0;
           $481 = (+($480>>>0));
           $482 = $479 * $481;
           $$0$i27 = $482;
           break;
          }
          $483 = ($427|0)<(9);
          if ($483) {
           $484 = (+($sign$0|0));
           $485 = HEAP32[$x$i>>2]|0;
           $486 = (+($485>>>0));
           $487 = $484 * $486;
           $488 = (8 - ($427))|0;
           $489 = (2160 + ($488<<2)|0);
           $490 = HEAP32[$489>>2]|0;
           $491 = (+($490|0));
           $492 = $487 / $491;
           $$0$i27 = $492;
           break;
          }
          $$neg32$i = (($bits$0$ph) + 27)|0;
          $493 = Math_imul($427, -3)|0;
          $494 = (($$neg32$i) + ($493))|0;
          $495 = ($494|0)>(30);
          $$pre$i17 = HEAP32[$x$i>>2]|0;
          $496 = $$pre$i17 >>> $494;
          $497 = ($496|0)==(0);
          $or$cond182$i = $495 | $497;
          if ($or$cond182$i) {
           $498 = (+($sign$0|0));
           $499 = (+($$pre$i17>>>0));
           $500 = $498 * $499;
           $501 = (($427) + -10)|0;
           $502 = (2160 + ($501<<2)|0);
           $503 = HEAP32[$502>>2]|0;
           $504 = (+($503|0));
           $505 = $500 * $504;
           $$0$i27 = $505;
           break;
          }
         }
        }
        $506 = (($427|0) % 9)&-1;
        $507 = ($506|0)==(0);
        if ($507) {
         $a$2$ph38$i = 0;$e2$0$ph$i = 0;$rp$2$ph36$i = $427;$z$1$ph37$i = $k$3$i;
        } else {
         $508 = ($427|0)>(-1);
         $509 = (($506) + 9)|0;
         $510 = $508 ? $506 : $509;
         $511 = (8 - ($510))|0;
         $512 = (2160 + ($511<<2)|0);
         $513 = HEAP32[$512>>2]|0;
         $514 = ($k$3$i|0)==(0);
         if ($514) {
          $a$0$lcssa151$i = 0;$rp$0$lcssa152$i = $427;$z$0$i = 0;
         } else {
          $515 = (1000000000 / ($513|0))&-1;
          $a$085$i = 0;$carry$087$i = 0;$k$486$i = 0;$rp$084$i = $427;
          while(1) {
           $516 = (($x$i) + ($k$486$i<<2)|0);
           $517 = HEAP32[$516>>2]|0;
           $518 = (($517>>>0) % ($513>>>0))&-1;
           $519 = (($517>>>0) / ($513>>>0))&-1;
           $520 = (($519) + ($carry$087$i))|0;
           HEAP32[$516>>2] = $520;
           $521 = Math_imul($518, $515)|0;
           $522 = ($k$486$i|0)==($a$085$i|0);
           $523 = ($520|0)==(0);
           $or$cond16$i = $522 & $523;
           $524 = (($k$486$i) + 1)|0;
           $525 = $524 & 127;
           $526 = (($rp$084$i) + -9)|0;
           $rp$1$i18 = $or$cond16$i ? $526 : $rp$084$i;
           $a$1$i = $or$cond16$i ? $525 : $a$085$i;
           $527 = ($524|0)==($k$3$i|0);
           if ($527) {
            $$lcssa264 = $521;$a$1$i$lcssa = $a$1$i;$rp$1$i18$lcssa = $rp$1$i18;
            break;
           } else {
            $a$085$i = $a$1$i;$carry$087$i = $521;$k$486$i = $524;$rp$084$i = $rp$1$i18;
           }
          }
          $528 = ($$lcssa264|0)==(0);
          if ($528) {
           $a$0$lcssa151$i = $a$1$i$lcssa;$rp$0$lcssa152$i = $rp$1$i18$lcssa;$z$0$i = $k$3$i;
          } else {
           $529 = (($k$3$i) + 1)|0;
           $530 = (($x$i) + ($k$3$i<<2)|0);
           HEAP32[$530>>2] = $$lcssa264;
           $a$0$lcssa151$i = $a$1$i$lcssa;$rp$0$lcssa152$i = $rp$1$i18$lcssa;$z$0$i = $529;
          }
         }
         $531 = (9 - ($510))|0;
         $532 = (($531) + ($rp$0$lcssa152$i))|0;
         $a$2$ph38$i = $a$0$lcssa151$i;$e2$0$ph$i = 0;$rp$2$ph36$i = $532;$z$1$ph37$i = $z$0$i;
        }
        L284: while(1) {
         $533 = ($rp$2$ph36$i|0)<(18);
         $534 = ($rp$2$ph36$i|0)==(18);
         $535 = (($x$i) + ($a$2$ph38$i<<2)|0);
         $e2$0$i19 = $e2$0$ph$i;$z$1$i = $z$1$ph37$i;
         while(1) {
          if (!($533)) {
           if (!($534)) {
            $a$3$ph$i = $a$2$ph38$i;$e2$1$ph$i = $e2$0$i19;$rp$3$ph34$i = $rp$2$ph36$i;$z$5$ph$i = $z$1$i;
            break L284;
           }
           $536 = HEAP32[$535>>2]|0;
           $537 = ($536>>>0)<(9007199);
           if (!($537)) {
            $a$3$ph$i = $a$2$ph38$i;$e2$1$ph$i = $e2$0$i19;$rp$3$ph34$i = 18;$z$5$ph$i = $z$1$i;
            break L284;
           }
          }
          $538 = (($z$1$i) + 127)|0;
          $carry1$0$i = 0;$k$5$in$i = $538;$z$2$i = $z$1$i;
          while(1) {
           $k$5$i = $k$5$in$i & 127;
           $539 = (($x$i) + ($k$5$i<<2)|0);
           $540 = HEAP32[$539>>2]|0;
           $541 = (_bitshift64Shl(($540|0),0,29)|0);
           $542 = tempRet0;
           $543 = (_i64Add(($541|0),($542|0),($carry1$0$i|0),0)|0);
           $544 = tempRet0;
           $545 = ($544>>>0)>(0);
           $546 = ($543>>>0)>(1000000000);
           $547 = ($544|0)==(0);
           $548 = $547 & $546;
           $549 = $545 | $548;
           if ($549) {
            $550 = (___udivdi3(($543|0),($544|0),1000000000,0)|0);
            $551 = tempRet0;
            $552 = (___uremdi3(($543|0),($544|0),1000000000,0)|0);
            $553 = tempRet0;
            $$sink$off0$i = $552;$carry1$1$i = $550;
           } else {
            $$sink$off0$i = $543;$carry1$1$i = 0;
           }
           HEAP32[$539>>2] = $$sink$off0$i;
           $554 = (($z$2$i) + 127)|0;
           $555 = $554 & 127;
           $556 = ($k$5$i|0)!=($555|0);
           $557 = ($k$5$i|0)==($a$2$ph38$i|0);
           $or$cond17$i = $556 | $557;
           $558 = ($$sink$off0$i|0)==(0);
           $k$5$z$2$i = $558 ? $k$5$i : $z$2$i;
           $z$3$i = $or$cond17$i ? $z$2$i : $k$5$z$2$i;
           $559 = (($k$5$i) + -1)|0;
           if ($557) {
            $carry1$1$i$lcssa = $carry1$1$i;$z$3$i$lcssa = $z$3$i;
            break;
           } else {
            $carry1$0$i = $carry1$1$i;$k$5$in$i = $559;$z$2$i = $z$3$i;
           }
          }
          $560 = (($e2$0$i19) + -29)|0;
          $561 = ($carry1$1$i$lcssa|0)==(0);
          if ($561) {
           $e2$0$i19 = $560;$z$1$i = $z$3$i$lcssa;
          } else {
           $$lcssa263 = $560;$carry1$1$i$lcssa$lcssa = $carry1$1$i$lcssa;$z$3$i$lcssa$lcssa = $z$3$i$lcssa;
           break;
          }
         }
         $562 = (($rp$2$ph36$i) + 9)|0;
         $563 = (($a$2$ph38$i) + 127)|0;
         $564 = $563 & 127;
         $565 = ($564|0)==($z$3$i$lcssa$lcssa|0);
         if ($565) {
          $566 = (($z$3$i$lcssa$lcssa) + 127)|0;
          $567 = $566 & 127;
          $568 = (($x$i) + ($567<<2)|0);
          $569 = HEAP32[$568>>2]|0;
          $570 = (($z$3$i$lcssa$lcssa) + 126)|0;
          $571 = $570 & 127;
          $572 = (($x$i) + ($571<<2)|0);
          $573 = HEAP32[$572>>2]|0;
          $574 = $573 | $569;
          HEAP32[$572>>2] = $574;
          $z$4$i = $567;
         } else {
          $z$4$i = $z$3$i$lcssa$lcssa;
         }
         $575 = (($x$i) + ($564<<2)|0);
         HEAP32[$575>>2] = $carry1$1$i$lcssa$lcssa;
         $a$2$ph38$i = $564;$e2$0$ph$i = $$lcssa263;$rp$2$ph36$i = $562;$z$1$ph37$i = $z$4$i;
        }
        L302: while(1) {
         $606 = (($z$5$ph$i) + 1)|0;
         $604 = $606 & 127;
         $607 = (($z$5$ph$i) + 127)|0;
         $608 = $607 & 127;
         $609 = (($x$i) + ($608<<2)|0);
         $a$3$ph157$i = $a$3$ph$i;$e2$1$ph156$i = $e2$1$ph$i;$rp$3$ph$i = $rp$3$ph34$i;
         while(1) {
          $610 = ($rp$3$ph$i|0)==(18);
          $611 = ($rp$3$ph$i|0)>(27);
          $$18$i = $611 ? 9 : 1;
          $$not$i = $610 ^ 1;
          $a$3$i = $a$3$ph157$i;$e2$1$i = $e2$1$ph156$i;
          while(1) {
           $576 = $a$3$i & 127;
           $577 = ($576|0)==($z$5$ph$i|0);
           do {
            if ($577) {
             label = 219;
            } else {
             $578 = (($x$i) + ($576<<2)|0);
             $579 = HEAP32[$578>>2]|0;
             $580 = ($579>>>0)<(9007199);
             if ($580) {
              label = 219;
              break;
             }
             $581 = ($579>>>0)>(9007199);
             if ($581) {
              break;
             }
             $582 = (($a$3$i) + 1)|0;
             $583 = $582 & 127;
             $584 = ($583|0)==($z$5$ph$i|0);
             if ($584) {
              label = 219;
              break;
             }
             $690 = (($x$i) + ($583<<2)|0);
             $691 = HEAP32[$690>>2]|0;
             $692 = ($691>>>0)<(254740991);
             if ($692) {
              label = 219;
              break;
             }
             $693 = ($691>>>0)>(254740991);
             $brmerge$i28 = $693 | $$not$i;
             if (!($brmerge$i28)) {
              $617 = $576;$a$3$i249 = $a$3$i;$e2$1$i246 = $e2$1$i;$z$7$i = $z$5$ph$i;
              break L302;
             }
            }
           } while(0);
           if ((label|0) == 219) {
            label = 0;
            if ($610) {
             label = 220;
             break L302;
            }
           }
           $585 = (($e2$1$i) + ($$18$i))|0;
           $586 = ($a$3$i|0)==($z$5$ph$i|0);
           if ($586) {
            $a$3$i = $z$5$ph$i;$e2$1$i = $585;
           } else {
            $$lcssa256 = $585;$a$3$i$lcssa248 = $a$3$i;
            break;
           }
          }
          $587 = 1 << $$18$i;
          $588 = (($587) + -1)|0;
          $589 = 1000000000 >>> $$18$i;
          $a$478$i = $a$3$i$lcssa248;$carry3$081$i = 0;$k$679$i = $a$3$i$lcssa248;$rp$477$i = $rp$3$ph$i;
          while(1) {
           $590 = (($x$i) + ($k$679$i<<2)|0);
           $591 = HEAP32[$590>>2]|0;
           $592 = $591 & $588;
           $593 = $591 >>> $$18$i;
           $594 = (($593) + ($carry3$081$i))|0;
           HEAP32[$590>>2] = $594;
           $595 = Math_imul($592, $589)|0;
           $596 = ($k$679$i|0)==($a$478$i|0);
           $597 = ($594|0)==(0);
           $or$cond19$i = $596 & $597;
           $598 = (($k$679$i) + 1)|0;
           $599 = $598 & 127;
           $600 = (($rp$477$i) + -9)|0;
           $rp$5$i = $or$cond19$i ? $600 : $rp$477$i;
           $a$5$i = $or$cond19$i ? $599 : $a$478$i;
           $601 = ($599|0)==($z$5$ph$i|0);
           if ($601) {
            $$lcssa257 = $595;$a$5$i$lcssa = $a$5$i;$rp$5$i$lcssa = $rp$5$i;
            break;
           } else {
            $a$478$i = $a$5$i;$carry3$081$i = $595;$k$679$i = $599;$rp$477$i = $rp$5$i;
           }
          }
          $602 = ($$lcssa257|0)==(0);
          if ($602) {
           $a$3$ph157$i = $a$5$i$lcssa;$e2$1$ph156$i = $$lcssa256;$rp$3$ph$i = $rp$5$i$lcssa;
           continue;
          }
          $603 = ($604|0)==($a$5$i$lcssa|0);
          if (!($603)) {
           $$lcssa256$lcssa = $$lcssa256;$$lcssa257$lcssa = $$lcssa257;$a$5$i$lcssa$lcssa = $a$5$i$lcssa;$rp$5$i$lcssa$lcssa = $rp$5$i$lcssa;
           break;
          }
          $612 = HEAP32[$609>>2]|0;
          $613 = $612 | 1;
          HEAP32[$609>>2] = $613;
          $a$3$ph157$i = $a$5$i$lcssa;$e2$1$ph156$i = $$lcssa256;$rp$3$ph$i = $rp$5$i$lcssa;
         }
         $605 = (($x$i) + ($z$5$ph$i<<2)|0);
         HEAP32[$605>>2] = $$lcssa257$lcssa;
         $a$3$ph$i = $a$5$i$lcssa$lcssa;$e2$1$ph$i = $$lcssa256$lcssa;$rp$3$ph34$i = $rp$5$i$lcssa$lcssa;$z$5$ph$i = $604;
        }
        if ((label|0) == 220) {
         if ($577) {
          $614 = (($604) + -1)|0;
          $615 = (($x$i) + ($614<<2)|0);
          HEAP32[$615>>2] = 0;
          $617 = $z$5$ph$i;$a$3$i249 = $a$3$i;$e2$1$i246 = $e2$1$i;$z$7$i = $604;
         } else {
          $617 = $576;$a$3$i249 = $a$3$i;$e2$1$i246 = $e2$1$i;$z$7$i = $z$5$ph$i;
         }
        }
        $616 = (($x$i) + ($617<<2)|0);
        $618 = HEAP32[$616>>2]|0;
        $619 = (+($618>>>0));
        $620 = (($a$3$i249) + 1)|0;
        $621 = $620 & 127;
        $622 = ($621|0)==($z$7$i|0);
        if ($622) {
         $679 = (($a$3$i249) + 2)|0;
         $680 = $679 & 127;
         $681 = (($680) + -1)|0;
         $682 = (($x$i) + ($681<<2)|0);
         HEAP32[$682>>2] = 0;
         $z$7$1$i = $680;
        } else {
         $z$7$1$i = $z$7$i;
        }
        $683 = $619 * 1.0E+9;
        $684 = (($x$i) + ($621<<2)|0);
        $685 = HEAP32[$684>>2]|0;
        $686 = (+($685>>>0));
        $687 = $683 + $686;
        $643 = (+($sign$0|0));
        $625 = $643 * $687;
        $663 = (($e2$1$i246) + 53)|0;
        $669 = (($663) - ($emin$0$ph))|0;
        $670 = ($669|0)<($bits$0$ph|0);
        $688 = ($669|0)<(0);
        $$$i = $688 ? 0 : $669;
        $denormal$0$i = $670&1;
        $$010$i = $670 ? $$$i : $bits$0$ph;
        $689 = ($$010$i|0)<(53);
        if ($689) {
         $623 = (105 - ($$010$i))|0;
         $624 = (+_scalbn(1.0,$623));
         $626 = (+_copysignl($624,$625));
         $627 = (53 - ($$010$i))|0;
         $628 = (+_scalbn(1.0,$627));
         $629 = (+_fmodl($625,$628));
         $630 = $625 - $629;
         $631 = $626 + $630;
         $bias$0$i25 = $626;$frac$0$i = $629;$y$1$i24 = $631;
        } else {
         $bias$0$i25 = 0.0;$frac$0$i = 0.0;$y$1$i24 = $625;
        }
        $632 = (($a$3$i249) + 2)|0;
        $633 = $632 & 127;
        $634 = ($633|0)==($z$7$1$i|0);
        do {
         if ($634) {
          $frac$2$i = $frac$0$i;
         } else {
          $635 = (($x$i) + ($633<<2)|0);
          $636 = HEAP32[$635>>2]|0;
          $637 = ($636>>>0)<(500000000);
          do {
           if ($637) {
            $638 = ($636|0)==(0);
            if ($638) {
             $639 = (($a$3$i249) + 3)|0;
             $640 = $639 & 127;
             $641 = ($640|0)==($z$7$1$i|0);
             if ($641) {
              $frac$1$i = $frac$0$i;
              break;
             }
            }
            $642 = $643 * 0.25;
            $644 = $642 + $frac$0$i;
            $frac$1$i = $644;
           } else {
            $645 = ($636>>>0)>(500000000);
            if ($645) {
             $646 = $643 * 0.75;
             $647 = $646 + $frac$0$i;
             $frac$1$i = $647;
             break;
            }
            $648 = (($a$3$i249) + 3)|0;
            $649 = $648 & 127;
            $650 = ($649|0)==($z$7$1$i|0);
            if ($650) {
             $651 = $643 * 0.5;
             $652 = $651 + $frac$0$i;
             $frac$1$i = $652;
             break;
            } else {
             $653 = $643 * 0.75;
             $654 = $653 + $frac$0$i;
             $frac$1$i = $654;
             break;
            }
           }
          } while(0);
          $655 = (53 - ($$010$i))|0;
          $656 = ($655|0)>(1);
          if (!($656)) {
           $frac$2$i = $frac$1$i;
           break;
          }
          $657 = (+_fmodl($frac$1$i,1.0));
          $658 = $657 != 0.0;
          if ($658) {
           $frac$2$i = $frac$1$i;
           break;
          }
          $659 = $frac$1$i + 1.0;
          $frac$2$i = $659;
         }
        } while(0);
        $660 = $y$1$i24 + $frac$2$i;
        $661 = $660 - $bias$0$i25;
        $662 = $663 & 2147483647;
        $664 = (-2 - ($sum$i))|0;
        $665 = ($662|0)>($664|0);
        do {
         if ($665) {
          $666 = (+Math_abs((+$661)));
          $667 = !($666 >= 9007199254740992.0);
          if ($667) {
           $denormal$2$i = $denormal$0$i;$e2$2$i = $e2$1$i246;$y$2$i26 = $661;
          } else {
           $668 = ($$010$i|0)==($669|0);
           $or$cond20$i = $670 & $668;
           $denormal$1$i = $or$cond20$i ? 0 : $denormal$0$i;
           $671 = $661 * 0.5;
           $672 = (($e2$1$i246) + 1)|0;
           $denormal$2$i = $denormal$1$i;$e2$2$i = $672;$y$2$i26 = $671;
          }
          $673 = (($e2$2$i) + 50)|0;
          $674 = ($673|0)>($330|0);
          if (!($674)) {
           $675 = ($denormal$2$i|0)!=(0);
           $676 = $frac$2$i != 0.0;
           $or$cond8$i = $676 & $675;
           if (!($or$cond8$i)) {
            $e2$3$i = $e2$2$i;$y$3$i = $y$2$i26;
            break;
           }
          }
          $677 = (___errno_location()|0);
          HEAP32[$677>>2] = 34;
          $e2$3$i = $e2$2$i;$y$3$i = $y$2$i26;
         } else {
          $e2$3$i = $e2$1$i246;$y$3$i = $661;
         }
        } while(0);
        $678 = (+_scalbnl($y$3$i,$e2$3$i));
        $$0$i27 = $678;
       }
      } while(0);
      $$0 = $$0$i27;
      break L4;
      break;
     }
     default: {
      $109 = HEAP32[$1>>2]|0;
      $110 = ($109|0)==(0|0);
      if (!($110)) {
       $111 = HEAP32[$0>>2]|0;
       $112 = ((($111)) + -1|0);
       HEAP32[$0>>2] = $112;
      }
      $113 = (___errno_location()|0);
      HEAP32[$113>>2] = 22;
      ___shlim($f,0);
      $$0 = 0.0;
      break L4;
     }
     }
    }
    }
   } while(0);
   if ((label|0) == 23) {
    $41 = HEAP32[$1>>2]|0;
    $42 = ($41|0)==(0|0);
    if (!($42)) {
     $43 = HEAP32[$0>>2]|0;
     $44 = ((($43)) + -1|0);
     HEAP32[$0>>2] = $44;
    }
    $45 = ($pok|0)!=(0);
    $46 = ($i$0$lcssa>>>0)>(3);
    $or$cond9 = $45 & $46;
    if ($or$cond9) {
     $i$1 = $i$0$lcssa;
     while(1) {
      if (!($42)) {
       $47 = HEAP32[$0>>2]|0;
       $48 = ((($47)) + -1|0);
       HEAP32[$0>>2] = $48;
      }
      $49 = (($i$1) + -1)|0;
      $$old8 = ($49>>>0)>(3);
      if ($$old8) {
       $i$1 = $49;
      } else {
       break;
      }
     }
    }
   }
   $50 = (+($sign$0|0));
   $51 = $50 * inf;
   $52 = $51;
   $$0 = $52;
  }
 } while(0);
 STACKTOP = sp;return (+$$0);
}
function ___intscan($f,$base,$pok,$0,$1) {
 $f = $f|0;
 $base = $base|0;
 $pok = $pok|0;
 $0 = $0|0;
 $1 = $1|0;
 var $$1 = 0, $$122 = 0, $$123 = 0, $$base21 = 0, $$lcssa = 0, $$lcssa130 = 0, $$lcssa131 = 0, $$lcssa132 = 0, $$lcssa133 = 0, $$lcssa134 = 0, $$lcssa135 = 0, $$sum = 0, $$sum14 = 0, $$sum1445 = 0, $$sum15 = 0, $$sum16 = 0, $$sum17 = 0, $$sum18 = 0, $$sum1865 = 0, $$sum19 = 0;
 var $$sum20 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0;
 var $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0;
 var $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0;
 var $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0;
 var $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0;
 var $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0;
 var $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $c$0 = 0, $c$1 = 0, $c$124 = 0, $c$2$be = 0, $c$2$be$lcssa = 0;
 var $c$2$lcssa = 0, $c$3$be = 0, $c$3$lcssa = 0, $c$371 = 0, $c$4$be = 0, $c$4$be$lcssa = 0, $c$4$lcssa = 0, $c$5$be = 0, $c$6$be = 0, $c$6$be$lcssa = 0, $c$6$lcssa = 0, $c$7$be = 0, $c$753 = 0, $c$8 = 0, $c$9$be = 0, $neg$0 = 0, $neg$0$ = 0, $neg$1 = 0, $or$cond = 0, $or$cond12 = 0;
 var $or$cond40 = 0, $or$cond5 = 0, $or$cond7 = 0, $x$082 = 0, $x$146 = 0, $x$266 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($base>>>0)>(36);
 L1: do {
  if ($2) {
   $5 = (___errno_location()|0);
   HEAP32[$5>>2] = 22;
   $286 = 0;$287 = 0;
  } else {
   $3 = ((($f)) + 4|0);
   $4 = ((($f)) + 100|0);
   while(1) {
    $6 = HEAP32[$3>>2]|0;
    $7 = HEAP32[$4>>2]|0;
    $8 = ($6>>>0)<($7>>>0);
    if ($8) {
     $9 = ((($6)) + 1|0);
     HEAP32[$3>>2] = $9;
     $10 = HEAP8[$6>>0]|0;
     $11 = $10&255;
     $13 = $11;
    } else {
     $12 = (___shgetc($f)|0);
     $13 = $12;
    }
    $14 = (_isspace($13)|0);
    $15 = ($14|0)==(0);
    if ($15) {
     $$lcssa135 = $13;
     break;
    }
   }
   $16 = ($$lcssa135|0)==(45);
   L11: do {
    switch ($$lcssa135|0) {
    case 43: case 45:  {
     $17 = $16 << 31 >> 31;
     $18 = HEAP32[$3>>2]|0;
     $19 = HEAP32[$4>>2]|0;
     $20 = ($18>>>0)<($19>>>0);
     if ($20) {
      $21 = ((($18)) + 1|0);
      HEAP32[$3>>2] = $21;
      $22 = HEAP8[$18>>0]|0;
      $23 = $22&255;
      $c$0 = $23;$neg$0 = $17;
      break L11;
     } else {
      $24 = (___shgetc($f)|0);
      $c$0 = $24;$neg$0 = $17;
      break L11;
     }
     break;
    }
    default: {
     $c$0 = $$lcssa135;$neg$0 = 0;
    }
    }
   } while(0);
   $25 = ($base|0)==(0);
   $26 = $base & -17;
   $27 = ($26|0)==(0);
   $28 = ($c$0|0)==(48);
   $or$cond5 = $27 & $28;
   do {
    if ($or$cond5) {
     $29 = HEAP32[$3>>2]|0;
     $30 = HEAP32[$4>>2]|0;
     $31 = ($29>>>0)<($30>>>0);
     if ($31) {
      $32 = ((($29)) + 1|0);
      HEAP32[$3>>2] = $32;
      $33 = HEAP8[$29>>0]|0;
      $34 = $33&255;
      $37 = $34;
     } else {
      $35 = (___shgetc($f)|0);
      $37 = $35;
     }
     $36 = $37 | 32;
     $38 = ($36|0)==(120);
     if (!($38)) {
      if ($25) {
       $$123 = 8;$c$124 = $37;
       label = 46;
       break;
      } else {
       $$1 = $base;$c$1 = $37;
       label = 32;
       break;
      }
     }
     $39 = HEAP32[$3>>2]|0;
     $40 = HEAP32[$4>>2]|0;
     $41 = ($39>>>0)<($40>>>0);
     if ($41) {
      $42 = ((($39)) + 1|0);
      HEAP32[$3>>2] = $42;
      $43 = HEAP8[$39>>0]|0;
      $44 = $43&255;
      $46 = $44;
     } else {
      $45 = (___shgetc($f)|0);
      $46 = $45;
     }
     $$sum20 = (($46) + 1)|0;
     $47 = (17830 + ($$sum20)|0);
     $48 = HEAP8[$47>>0]|0;
     $49 = ($48&255)>(15);
     if ($49) {
      $50 = HEAP32[$4>>2]|0;
      $51 = ($50|0)==(0|0);
      if (!($51)) {
       $52 = HEAP32[$3>>2]|0;
       $53 = ((($52)) + -1|0);
       HEAP32[$3>>2] = $53;
      }
      $54 = ($pok|0)==(0);
      if ($54) {
       ___shlim($f,0);
       $286 = 0;$287 = 0;
       break L1;
      }
      if ($51) {
       $286 = 0;$287 = 0;
       break L1;
      }
      $55 = HEAP32[$3>>2]|0;
      $56 = ((($55)) + -1|0);
      HEAP32[$3>>2] = $56;
      $286 = 0;$287 = 0;
      break L1;
     } else {
      $$123 = 16;$c$124 = $46;
      label = 46;
     }
    } else {
     $$base21 = $25 ? 10 : $base;
     $$sum = (($c$0) + 1)|0;
     $57 = (17830 + ($$sum)|0);
     $58 = HEAP8[$57>>0]|0;
     $59 = $58&255;
     $60 = ($59>>>0)<($$base21>>>0);
     if ($60) {
      $$1 = $$base21;$c$1 = $c$0;
      label = 32;
     } else {
      $61 = HEAP32[$4>>2]|0;
      $62 = ($61|0)==(0|0);
      if (!($62)) {
       $63 = HEAP32[$3>>2]|0;
       $64 = ((($63)) + -1|0);
       HEAP32[$3>>2] = $64;
      }
      ___shlim($f,0);
      $65 = (___errno_location()|0);
      HEAP32[$65>>2] = 22;
      $286 = 0;$287 = 0;
      break L1;
     }
    }
   } while(0);
   if ((label|0) == 32) {
    $66 = ($$1|0)==(10);
    if ($66) {
     $67 = (($c$1) + -48)|0;
     $68 = ($67>>>0)<(10);
     if ($68) {
      $71 = $67;$x$082 = 0;
      while(1) {
       $69 = ($x$082*10)|0;
       $70 = (($69) + ($71))|0;
       $72 = HEAP32[$3>>2]|0;
       $73 = HEAP32[$4>>2]|0;
       $74 = ($72>>>0)<($73>>>0);
       if ($74) {
        $75 = ((($72)) + 1|0);
        HEAP32[$3>>2] = $75;
        $76 = HEAP8[$72>>0]|0;
        $77 = $76&255;
        $c$2$be = $77;
       } else {
        $78 = (___shgetc($f)|0);
        $c$2$be = $78;
       }
       $79 = (($c$2$be) + -48)|0;
       $80 = ($79>>>0)<(10);
       $81 = ($70>>>0)<(429496729);
       $82 = $80 & $81;
       if ($82) {
        $71 = $79;$x$082 = $70;
       } else {
        $$lcssa134 = $70;$c$2$be$lcssa = $c$2$be;
        break;
       }
      }
      $288 = $$lcssa134;$289 = 0;$c$2$lcssa = $c$2$be$lcssa;
     } else {
      $288 = 0;$289 = 0;$c$2$lcssa = $c$1;
     }
     $83 = (($c$2$lcssa) + -48)|0;
     $84 = ($83>>>0)<(10);
     if ($84) {
      $85 = $288;$86 = $289;$90 = $83;$c$371 = $c$2$lcssa;
      while(1) {
       $87 = (___muldi3(($85|0),($86|0),10,0)|0);
       $88 = tempRet0;
       $89 = ($90|0)<(0);
       $91 = $89 << 31 >> 31;
       $92 = $90 ^ -1;
       $93 = $91 ^ -1;
       $94 = ($88>>>0)>($93>>>0);
       $95 = ($87>>>0)>($92>>>0);
       $96 = ($88|0)==($93|0);
       $97 = $96 & $95;
       $98 = $94 | $97;
       if ($98) {
        $$lcssa = $90;$290 = $85;$291 = $86;$c$3$lcssa = $c$371;
        break;
       }
       $99 = (_i64Add(($87|0),($88|0),($90|0),($91|0))|0);
       $100 = tempRet0;
       $101 = HEAP32[$3>>2]|0;
       $102 = HEAP32[$4>>2]|0;
       $103 = ($101>>>0)<($102>>>0);
       if ($103) {
        $104 = ((($101)) + 1|0);
        HEAP32[$3>>2] = $104;
        $105 = HEAP8[$101>>0]|0;
        $106 = $105&255;
        $c$3$be = $106;
       } else {
        $107 = (___shgetc($f)|0);
        $c$3$be = $107;
       }
       $108 = (($c$3$be) + -48)|0;
       $109 = ($108>>>0)<(10);
       $110 = ($100>>>0)<(429496729);
       $111 = ($99>>>0)<(2576980378);
       $112 = ($100|0)==(429496729);
       $113 = $112 & $111;
       $114 = $110 | $113;
       $or$cond7 = $109 & $114;
       if ($or$cond7) {
        $85 = $99;$86 = $100;$90 = $108;$c$371 = $c$3$be;
       } else {
        $$lcssa = $108;$290 = $99;$291 = $100;$c$3$lcssa = $c$3$be;
        break;
       }
      }
      $115 = ($$lcssa>>>0)>(9);
      if ($115) {
       $260 = $291;$262 = $290;$neg$1 = $neg$0;
      } else {
       $$122 = 10;$292 = $290;$293 = $291;$c$8 = $c$3$lcssa;
       label = 72;
      }
     } else {
      $260 = $289;$262 = $288;$neg$1 = $neg$0;
     }
    } else {
     $$123 = $$1;$c$124 = $c$1;
     label = 46;
    }
   }
   L63: do {
    if ((label|0) == 46) {
     $116 = (($$123) + -1)|0;
     $117 = $116 & $$123;
     $118 = ($117|0)==(0);
     if ($118) {
      $123 = ($$123*23)|0;
      $124 = $123 >>> 5;
      $125 = $124 & 7;
      $126 = (18087 + ($125)|0);
      $127 = HEAP8[$126>>0]|0;
      $128 = $127 << 24 >> 24;
      $$sum1445 = (($c$124) + 1)|0;
      $129 = (17830 + ($$sum1445)|0);
      $130 = HEAP8[$129>>0]|0;
      $131 = $130&255;
      $132 = ($131>>>0)<($$123>>>0);
      if ($132) {
       $135 = $131;$x$146 = 0;
       while(1) {
        $133 = $x$146 << $128;
        $134 = $135 | $133;
        $136 = HEAP32[$3>>2]|0;
        $137 = HEAP32[$4>>2]|0;
        $138 = ($136>>>0)<($137>>>0);
        if ($138) {
         $139 = ((($136)) + 1|0);
         HEAP32[$3>>2] = $139;
         $140 = HEAP8[$136>>0]|0;
         $141 = $140&255;
         $c$4$be = $141;
        } else {
         $142 = (___shgetc($f)|0);
         $c$4$be = $142;
        }
        $$sum14 = (($c$4$be) + 1)|0;
        $143 = (17830 + ($$sum14)|0);
        $144 = HEAP8[$143>>0]|0;
        $145 = $144&255;
        $146 = ($145>>>0)<($$123>>>0);
        $147 = ($134>>>0)<(134217728);
        $148 = $147 & $146;
        if ($148) {
         $135 = $145;$x$146 = $134;
        } else {
         $$lcssa130 = $134;$$lcssa131 = $144;$c$4$be$lcssa = $c$4$be;
         break;
        }
       }
       $152 = $$lcssa131;$155 = 0;$157 = $$lcssa130;$c$4$lcssa = $c$4$be$lcssa;
      } else {
       $152 = $130;$155 = 0;$157 = 0;$c$4$lcssa = $c$124;
      }
      $149 = (_bitshift64Lshr(-1,-1,($128|0))|0);
      $150 = tempRet0;
      $151 = $152&255;
      $153 = ($151>>>0)>=($$123>>>0);
      $154 = ($155>>>0)>($150>>>0);
      $156 = ($157>>>0)>($149>>>0);
      $158 = ($155|0)==($150|0);
      $159 = $158 & $156;
      $160 = $154 | $159;
      $or$cond40 = $153 | $160;
      if ($or$cond40) {
       $$122 = $$123;$292 = $157;$293 = $155;$c$8 = $c$4$lcssa;
       label = 72;
       break;
      } else {
       $161 = $157;$162 = $155;$166 = $152;
      }
      while(1) {
       $163 = (_bitshift64Shl(($161|0),($162|0),($128|0))|0);
       $164 = tempRet0;
       $165 = $166&255;
       $167 = $165 | $163;
       $168 = HEAP32[$3>>2]|0;
       $169 = HEAP32[$4>>2]|0;
       $170 = ($168>>>0)<($169>>>0);
       if ($170) {
        $171 = ((($168)) + 1|0);
        HEAP32[$3>>2] = $171;
        $172 = HEAP8[$168>>0]|0;
        $173 = $172&255;
        $c$5$be = $173;
       } else {
        $174 = (___shgetc($f)|0);
        $c$5$be = $174;
       }
       $$sum15 = (($c$5$be) + 1)|0;
       $175 = (17830 + ($$sum15)|0);
       $176 = HEAP8[$175>>0]|0;
       $177 = $176&255;
       $178 = ($177>>>0)>=($$123>>>0);
       $179 = ($164>>>0)>($150>>>0);
       $180 = ($167>>>0)>($149>>>0);
       $181 = ($164|0)==($150|0);
       $182 = $181 & $180;
       $183 = $179 | $182;
       $or$cond = $178 | $183;
       if ($or$cond) {
        $$122 = $$123;$292 = $167;$293 = $164;$c$8 = $c$5$be;
        label = 72;
        break L63;
       } else {
        $161 = $167;$162 = $164;$166 = $176;
       }
      }
     }
     $$sum1865 = (($c$124) + 1)|0;
     $119 = (17830 + ($$sum1865)|0);
     $120 = HEAP8[$119>>0]|0;
     $121 = $120&255;
     $122 = ($121>>>0)<($$123>>>0);
     if ($122) {
      $186 = $121;$x$266 = 0;
      while(1) {
       $184 = Math_imul($x$266, $$123)|0;
       $185 = (($186) + ($184))|0;
       $187 = HEAP32[$3>>2]|0;
       $188 = HEAP32[$4>>2]|0;
       $189 = ($187>>>0)<($188>>>0);
       if ($189) {
        $190 = ((($187)) + 1|0);
        HEAP32[$3>>2] = $190;
        $191 = HEAP8[$187>>0]|0;
        $192 = $191&255;
        $c$6$be = $192;
       } else {
        $193 = (___shgetc($f)|0);
        $c$6$be = $193;
       }
       $$sum18 = (($c$6$be) + 1)|0;
       $194 = (17830 + ($$sum18)|0);
       $195 = HEAP8[$194>>0]|0;
       $196 = $195&255;
       $197 = ($196>>>0)<($$123>>>0);
       $198 = ($185>>>0)<(119304647);
       $199 = $198 & $197;
       if ($199) {
        $186 = $196;$x$266 = $185;
       } else {
        $$lcssa132 = $185;$$lcssa133 = $195;$c$6$be$lcssa = $c$6$be;
        break;
       }
      }
      $201 = $$lcssa133;$294 = $$lcssa132;$295 = 0;$c$6$lcssa = $c$6$be$lcssa;
     } else {
      $201 = $120;$294 = 0;$295 = 0;$c$6$lcssa = $c$124;
     }
     $200 = $201&255;
     $202 = ($200>>>0)<($$123>>>0);
     if ($202) {
      $203 = (___udivdi3(-1,-1,($$123|0),0)|0);
      $204 = tempRet0;
      $206 = $295;$208 = $294;$215 = $201;$c$753 = $c$6$lcssa;
      while(1) {
       $205 = ($206>>>0)>($204>>>0);
       $207 = ($208>>>0)>($203>>>0);
       $209 = ($206|0)==($204|0);
       $210 = $209 & $207;
       $211 = $205 | $210;
       if ($211) {
        $$122 = $$123;$292 = $208;$293 = $206;$c$8 = $c$753;
        label = 72;
        break L63;
       }
       $212 = (___muldi3(($208|0),($206|0),($$123|0),0)|0);
       $213 = tempRet0;
       $214 = $215&255;
       $216 = $214 ^ -1;
       $217 = ($213>>>0)>(4294967295);
       $218 = ($212>>>0)>($216>>>0);
       $219 = ($213|0)==(-1);
       $220 = $219 & $218;
       $221 = $217 | $220;
       if ($221) {
        $$122 = $$123;$292 = $208;$293 = $206;$c$8 = $c$753;
        label = 72;
        break L63;
       }
       $222 = (_i64Add(($214|0),0,($212|0),($213|0))|0);
       $223 = tempRet0;
       $224 = HEAP32[$3>>2]|0;
       $225 = HEAP32[$4>>2]|0;
       $226 = ($224>>>0)<($225>>>0);
       if ($226) {
        $227 = ((($224)) + 1|0);
        HEAP32[$3>>2] = $227;
        $228 = HEAP8[$224>>0]|0;
        $229 = $228&255;
        $c$7$be = $229;
       } else {
        $230 = (___shgetc($f)|0);
        $c$7$be = $230;
       }
       $$sum19 = (($c$7$be) + 1)|0;
       $231 = (17830 + ($$sum19)|0);
       $232 = HEAP8[$231>>0]|0;
       $233 = $232&255;
       $234 = ($233>>>0)<($$123>>>0);
       if ($234) {
        $206 = $223;$208 = $222;$215 = $232;$c$753 = $c$7$be;
       } else {
        $$122 = $$123;$292 = $222;$293 = $223;$c$8 = $c$7$be;
        label = 72;
        break;
       }
      }
     } else {
      $$122 = $$123;$292 = $294;$293 = $295;$c$8 = $c$6$lcssa;
      label = 72;
     }
    }
   } while(0);
   if ((label|0) == 72) {
    $$sum16 = (($c$8) + 1)|0;
    $235 = (17830 + ($$sum16)|0);
    $236 = HEAP8[$235>>0]|0;
    $237 = $236&255;
    $238 = ($237>>>0)<($$122>>>0);
    if ($238) {
     while(1) {
      $239 = HEAP32[$3>>2]|0;
      $240 = HEAP32[$4>>2]|0;
      $241 = ($239>>>0)<($240>>>0);
      if ($241) {
       $242 = ((($239)) + 1|0);
       HEAP32[$3>>2] = $242;
       $243 = HEAP8[$239>>0]|0;
       $244 = $243&255;
       $c$9$be = $244;
      } else {
       $245 = (___shgetc($f)|0);
       $c$9$be = $245;
      }
      $$sum17 = (($c$9$be) + 1)|0;
      $246 = (17830 + ($$sum17)|0);
      $247 = HEAP8[$246>>0]|0;
      $248 = $247&255;
      $249 = ($248>>>0)<($$122>>>0);
      if (!($249)) {
       break;
      }
     }
     $250 = (___errno_location()|0);
     HEAP32[$250>>2] = 34;
     $251 = $0 & 1;
     $252 = ($251|0)==(0);
     $253 = (0)==(0);
     $254 = $252 & $253;
     $neg$0$ = $254 ? $neg$0 : 0;
     $260 = $1;$262 = $0;$neg$1 = $neg$0$;
    } else {
     $260 = $293;$262 = $292;$neg$1 = $neg$0;
    }
   }
   $255 = HEAP32[$4>>2]|0;
   $256 = ($255|0)==(0|0);
   if (!($256)) {
    $257 = HEAP32[$3>>2]|0;
    $258 = ((($257)) + -1|0);
    HEAP32[$3>>2] = $258;
   }
   $259 = ($260>>>0)<($1>>>0);
   $261 = ($262>>>0)<($0>>>0);
   $263 = ($260|0)==($1|0);
   $264 = $263 & $261;
   $265 = $259 | $264;
   if (!($265)) {
    $266 = $0 & 1;
    $267 = ($266|0)!=(0);
    $268 = (0)!=(0);
    $269 = $267 | $268;
    $270 = ($neg$1|0)!=(0);
    $or$cond12 = $269 | $270;
    if (!($or$cond12)) {
     $271 = (___errno_location()|0);
     HEAP32[$271>>2] = 34;
     $272 = (_i64Add(($0|0),($1|0),-1,-1)|0);
     $273 = tempRet0;
     $286 = $273;$287 = $272;
     break;
    }
    $274 = ($260>>>0)>($1>>>0);
    $275 = ($262>>>0)>($0>>>0);
    $276 = ($260|0)==($1|0);
    $277 = $276 & $275;
    $278 = $274 | $277;
    if ($278) {
     $279 = (___errno_location()|0);
     HEAP32[$279>>2] = 34;
     $286 = $1;$287 = $0;
     break;
    }
   }
   $280 = ($neg$1|0)<(0);
   $281 = $280 << 31 >> 31;
   $282 = $262 ^ $neg$1;
   $283 = $260 ^ $281;
   $284 = (_i64Subtract(($282|0),($283|0),($neg$1|0),($281|0))|0);
   $285 = tempRet0;
   $286 = $285;$287 = $284;
  }
 } while(0);
 tempRet0 = ($286);
 return ($287|0);
}
function ___shlim($f,$lim) {
 $f = $f|0;
 $lim = $lim|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 104|0);
 HEAP32[$0>>2] = $lim;
 $1 = ((($f)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($f)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $2;
 $6 = $4;
 $7 = (($5) - ($6))|0;
 $8 = ((($f)) + 108|0);
 HEAP32[$8>>2] = $7;
 $9 = ($lim|0)!=(0);
 $10 = ($7|0)>($lim|0);
 $or$cond = $9 & $10;
 if ($or$cond) {
  $11 = (($4) + ($lim)|0);
  $12 = ((($f)) + 100|0);
  HEAP32[$12>>2] = $11;
 } else {
  $13 = ((($f)) + 100|0);
  HEAP32[$13>>2] = $5;
 }
 return;
}
function ___shgetc($f) {
 $f = $f|0;
 var $$0 = 0, $$phi$trans$insert = 0, $$phi$trans$insert3 = 0, $$pre = 0, $$pre4 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 104|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if ($2) {
  label = 3;
 } else {
  $3 = ((($f)) + 108|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($4|0)<($1|0);
  if ($5) {
   label = 3;
  } else {
   label = 4;
  }
 }
 if ((label|0) == 3) {
  $6 = (___uflow($f)|0);
  $7 = ($6|0)<(0);
  if ($7) {
   label = 4;
  } else {
   $9 = HEAP32[$0>>2]|0;
   $10 = ($9|0)==(0);
   $$phi$trans$insert = ((($f)) + 8|0);
   if ($10) {
    $$pre = HEAP32[$$phi$trans$insert>>2]|0;
    $11 = $$pre;
    $26 = $$pre;$41 = $11;
    label = 9;
   } else {
    $12 = HEAP32[$$phi$trans$insert>>2]|0;
    $13 = ((($f)) + 4|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = $12;
    $16 = $14;
    $17 = (($15) - ($16))|0;
    $18 = ((($f)) + 108|0);
    $19 = HEAP32[$18>>2]|0;
    $20 = (($9) - ($19))|0;
    $21 = (($20) + -1)|0;
    $22 = ($17|0)>($21|0);
    if ($22) {
     $23 = (($14) + ($21)|0);
     $24 = ((($f)) + 100|0);
     HEAP32[$24>>2] = $23;
     $28 = $12;
    } else {
     $26 = $15;$41 = $12;
     label = 9;
    }
   }
   if ((label|0) == 9) {
    $25 = ((($f)) + 100|0);
    HEAP32[$25>>2] = $26;
    $28 = $41;
   }
   $27 = ($28|0)==(0|0);
   $$phi$trans$insert3 = ((($f)) + 4|0);
   $$pre4 = HEAP32[$$phi$trans$insert3>>2]|0;
   if (!($27)) {
    $29 = $28;
    $30 = $$pre4;
    $31 = ((($f)) + 108|0);
    $32 = HEAP32[$31>>2]|0;
    $33 = (($29) + 1)|0;
    $34 = (($33) - ($30))|0;
    $35 = (($34) + ($32))|0;
    HEAP32[$31>>2] = $35;
   }
   $36 = ((($$pre4)) + -1|0);
   $37 = HEAP8[$36>>0]|0;
   $38 = $37&255;
   $39 = ($38|0)==($6|0);
   if ($39) {
    $$0 = $6;
   } else {
    $40 = $6&255;
    HEAP8[$36>>0] = $40;
    $$0 = $6;
   }
  }
 }
 if ((label|0) == 4) {
  $8 = ((($f)) + 100|0);
  HEAP32[$8>>2] = 0;
  $$0 = -1;
 }
 return ($$0|0);
}
function ___syscall_ret($r) {
 $r = $r|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($r>>>0)>(4294963200);
 if ($0) {
  $1 = (0 - ($r))|0;
  $2 = (___errno_location()|0);
  HEAP32[$2>>2] = $1;
  $$0 = -1;
 } else {
  $$0 = $r;
 }
 return ($$0|0);
}
function _localeconv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (2192|0);
}
function _setlocale($category,$locale) {
 $category = $category|0;
 $locale = $locale|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (18096|0);
}
function _strcoll($l,$r) {
 $l = $l|0;
 $r = $r|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strcmp($l,$r)|0);
 return ($0|0);
}
function ___expo2($x) {
 $x = +$x;
 var $0 = 0.0, $1 = 0.0, $2 = 0.0, $3 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $x + -1416.0996898839683;
 $1 = (+Math_exp((+$0)));
 $2 = $1 * 2.2471164185778949E+307;
 $3 = $2 * 2.2471164185778949E+307;
 return (+$3);
}
function _copysign($x,$y) {
 $x = +$x;
 $y = +$y;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $x;$0 = HEAP32[tempDoublePtr>>2]|0;
 $1 = HEAP32[tempDoublePtr+4>>2]|0;
 HEAPF64[tempDoublePtr>>3] = $y;$2 = HEAP32[tempDoublePtr>>2]|0;
 $3 = HEAP32[tempDoublePtr+4>>2]|0;
 $4 = $1 & 2147483647;
 $5 = $3 & -2147483648;
 $6 = $5 | $4;
 HEAP32[tempDoublePtr>>2] = $0;HEAP32[tempDoublePtr+4>>2] = $6;$7 = +HEAPF64[tempDoublePtr>>3];
 return (+$7);
}
function _copysignl($x,$y) {
 $x = +$x;
 $y = +$y;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_copysign($x,$y));
 return (+$0);
}
function _cosh($x) {
 $x = +$x;
 var $$0 = 0.0, $0 = 0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $2 = 0, $3 = 0.0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $x;$0 = HEAP32[tempDoublePtr>>2]|0;
 $1 = HEAP32[tempDoublePtr+4>>2]|0;
 $2 = $1 & 2147483647;
 HEAP32[tempDoublePtr>>2] = $0;HEAP32[tempDoublePtr+4>>2] = $2;$3 = +HEAPF64[tempDoublePtr>>3];
 $4 = ($2>>>0)<(1072049730);
 do {
  if ($4) {
   $5 = ($2>>>0)<(1045430272);
   if ($5) {
    $$0 = 1.0;
   } else {
    $6 = (+_expm1($3));
    $7 = $6 * $6;
    $8 = $6 + 1.0;
    $9 = $8 * 2.0;
    $10 = $7 / $9;
    $11 = $10 + 1.0;
    $$0 = $11;
   }
  } else {
   $12 = ($2>>>0)<(1082535490);
   if ($12) {
    $13 = (+Math_exp((+$3)));
    $14 = 1.0 / $13;
    $15 = $13 + $14;
    $16 = $15 * 0.5;
    $$0 = $16;
    break;
   } else {
    $17 = (+___expo2($3));
    $$0 = $17;
    break;
   }
  }
 } while(0);
 return (+$$0);
}
function _expm1($x) {
 $x = +$x;
 var $$0 = 0.0, $$02 = 0.0, $$pn = 0.0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0, $22 = 0.0, $23 = 0.0;
 var $24 = 0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0;
 var $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0;
 var $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0.0, $74 = 0, $75 = 0.0, $76 = 0.0, $77 = 0, $78 = 0.0;
 var $79 = 0.0, $8 = 0, $80 = 0.0, $81 = 0.0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0, $90 = 0.0, $91 = 0.0, $92 = 0.0, $93 = 0.0, $c$0 = 0.0, $hi$0 = 0.0, $k$0 = 0;
 var $k$1 = 0, $lo$0 = 0.0, $y$0 = 0.0, $y$1 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $x;$0 = HEAP32[tempDoublePtr>>2]|0;
 $1 = HEAP32[tempDoublePtr+4>>2]|0;
 $2 = $1 & 2147483647;
 $3 = (_bitshift64Lshr(($0|0),($1|0),63)|0);
 $4 = tempRet0;
 $5 = ($2>>>0)>(1078159481);
 do {
  if ($5) {
   $6 = $1 & 2147483647;
   $7 = ($6>>>0)>(2146435072);
   $8 = ($0>>>0)>(0);
   $9 = ($6|0)==(2146435072);
   $10 = $9 & $8;
   $11 = $7 | $10;
   if ($11) {
    $$0 = $x;
   } else {
    $12 = ($3|0)==(0);
    if ($12) {
     $13 = $x > 709.78271289338397;
     if ($13) {
      $14 = $x * 8.9884656743115795E+307;
      $$0 = $14;
     } else {
      label = 11;
     }
    } else {
     $$0 = -1.0;
    }
   }
  } else {
   $15 = ($2>>>0)>(1071001154);
   if (!($15)) {
    $32 = ($2>>>0)<(1016070144);
    if ($32) {
     $$0 = $x;
     break;
    } else {
     $$02 = $x;$c$0 = 0.0;$k$1 = 0;
     label = 14;
     break;
    }
   }
   $16 = ($2>>>0)<(1072734898);
   if ($16) {
    $17 = ($3|0)==(0);
    if ($17) {
     $18 = $x + -0.69314718036912382;
     $hi$0 = $18;$k$0 = 1;$lo$0 = 1.9082149292705877E-10;
     label = 12;
     break;
    } else {
     $19 = $x + 0.69314718036912382;
     $hi$0 = $19;$k$0 = -1;$lo$0 = -1.9082149292705877E-10;
     label = 12;
     break;
    }
   } else {
    label = 11;
   }
  }
 } while(0);
 if ((label|0) == 11) {
  $20 = $x * 1.4426950408889634;
  $21 = ($3|0)!=(0);
  $22 = $21 ? -0.5 : 0.5;
  $23 = $20 + $22;
  $24 = (~~(($23)));
  $25 = (+($24|0));
  $26 = $25 * 0.69314718036912382;
  $27 = $x - $26;
  $28 = $25 * 1.9082149292705877E-10;
  $hi$0 = $27;$k$0 = $24;$lo$0 = $28;
  label = 12;
 }
 if ((label|0) == 12) {
  $29 = $hi$0 - $lo$0;
  $30 = $hi$0 - $29;
  $31 = $30 - $lo$0;
  $$02 = $29;$c$0 = $31;$k$1 = $k$0;
  label = 14;
 }
 L18: do {
  if ((label|0) == 14) {
   $33 = $$02 * 0.5;
   $34 = $$02 * $33;
   $35 = $34 * 2.0109921818362437E-7;
   $36 = 4.0082178273293624E-6 - $35;
   $37 = $34 * $36;
   $38 = $37 + -7.9365075786748794E-5;
   $39 = $34 * $38;
   $40 = $39 + 0.0015873015872548146;
   $41 = $34 * $40;
   $42 = $41 + -0.033333333333333132;
   $43 = $34 * $42;
   $44 = $43 + 1.0;
   $45 = $33 * $44;
   $46 = 3.0 - $45;
   $47 = $44 - $46;
   $48 = $$02 * $46;
   $49 = 6.0 - $48;
   $50 = $47 / $49;
   $51 = $34 * $50;
   $52 = ($k$1|0)==(0);
   if ($52) {
    $53 = $$02 * $51;
    $54 = $53 - $34;
    $55 = $$02 - $54;
    $$0 = $55;
    break;
   }
   $56 = $51 - $c$0;
   $57 = $$02 * $56;
   $58 = $57 - $c$0;
   $59 = $58 - $34;
   switch ($k$1|0) {
   case -1:  {
    $60 = $$02 - $59;
    $61 = $60 * 0.5;
    $62 = $61 + -0.5;
    $$0 = $62;
    break L18;
    break;
   }
   case 1:  {
    $63 = $$02 < -0.25;
    if ($63) {
     $64 = $$02 + 0.5;
     $65 = $59 - $64;
     $66 = $65 * -2.0;
     $$0 = $66;
     break L18;
    } else {
     $67 = $$02 - $59;
     $68 = $67 * 2.0;
     $69 = $68 + 1.0;
     $$0 = $69;
     break L18;
    }
    break;
   }
   default: {
    $70 = (($k$1) + 1023)|0;
    $71 = (_bitshift64Shl(($70|0),0,52)|0);
    $72 = tempRet0;
    HEAP32[tempDoublePtr>>2] = $71;HEAP32[tempDoublePtr+4>>2] = $72;$73 = +HEAPF64[tempDoublePtr>>3];
    $74 = ($k$1>>>0)>(56);
    if ($74) {
     $75 = $$02 - $59;
     $76 = $75 + 1.0;
     $77 = ($k$1|0)==(1024);
     $78 = $76 * 2.0;
     $79 = $78 * 8.9884656743115795E+307;
     $80 = $73 * $76;
     $y$0 = $77 ? $79 : $80;
     $81 = $y$0 + -1.0;
     $$0 = $81;
     break L18;
    }
    $82 = (1023 - ($k$1))|0;
    $83 = (_bitshift64Shl(($82|0),0,52)|0);
    $84 = tempRet0;
    $85 = ($k$1|0)<(20);
    if ($85) {
     $86 = $$02 - $59;
     HEAP32[tempDoublePtr>>2] = $83;HEAP32[tempDoublePtr+4>>2] = $84;$87 = +HEAPF64[tempDoublePtr>>3];
     $88 = 1.0 - $87;
     $89 = $88 + $86;
     $$pn = $89;
    } else {
     HEAP32[tempDoublePtr>>2] = $83;HEAP32[tempDoublePtr+4>>2] = $84;$90 = +HEAPF64[tempDoublePtr>>3];
     $91 = $90 + $59;
     $92 = $$02 - $91;
     $93 = $92 + 1.0;
     $$pn = $93;
    }
    $y$1 = $73 * $$pn;
    $$0 = $y$1;
    break L18;
   }
   }
  }
 } while(0);
 return (+$$0);
}
function _fmod($x,$y) {
 $x = +$x;
 $y = +$y;
 var $$0 = 0.0, $$lcssa7 = 0, $$x = 0.0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0.0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
 var $15 = 0, $150 = 0, $151 = 0.0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0.0;
 var $ex$0$lcssa = 0, $ex$026 = 0, $ex$1 = 0, $ex$2$lcssa = 0, $ex$212 = 0, $ex$3$lcssa = 0, $ex$39 = 0, $ey$0$lcssa = 0, $ey$020 = 0, $ey$1$ph = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $x;$0 = HEAP32[tempDoublePtr>>2]|0;
 $1 = HEAP32[tempDoublePtr+4>>2]|0;
 HEAPF64[tempDoublePtr>>3] = $y;$2 = HEAP32[tempDoublePtr>>2]|0;
 $3 = HEAP32[tempDoublePtr+4>>2]|0;
 $4 = (_bitshift64Lshr(($0|0),($1|0),52)|0);
 $5 = tempRet0;
 $6 = $4 & 2047;
 $7 = (_bitshift64Lshr(($2|0),($3|0),52)|0);
 $8 = tempRet0;
 $9 = $7 & 2047;
 $10 = $1 & -2147483648;
 $11 = (_bitshift64Shl(($2|0),($3|0),1)|0);
 $12 = tempRet0;
 $13 = ($11|0)==(0);
 $14 = ($12|0)==(0);
 $15 = $13 & $14;
 L1: do {
  if ($15) {
   label = 3;
  } else {
   $16 = $3 & 2147483647;
   $17 = ($16>>>0)>(2146435072);
   $18 = ($2>>>0)>(0);
   $19 = ($16|0)==(2146435072);
   $20 = $19 & $18;
   $21 = $17 | $20;
   $22 = ($6|0)==(2047);
   $or$cond = $21 | $22;
   if ($or$cond) {
    label = 3;
   } else {
    $25 = (_bitshift64Shl(($0|0),($1|0),1)|0);
    $26 = tempRet0;
    $27 = ($26>>>0)>($12>>>0);
    $28 = ($25>>>0)>($11>>>0);
    $29 = ($26|0)==($12|0);
    $30 = $29 & $28;
    $31 = $27 | $30;
    if (!($31)) {
     $32 = ($25|0)==($11|0);
     $33 = ($26|0)==($12|0);
     $34 = $32 & $33;
     $35 = $x * 0.0;
     $$x = $34 ? $35 : $x;
     return (+$$x);
    }
    $36 = ($6|0)==(0);
    if ($36) {
     $37 = (_bitshift64Shl(($0|0),($1|0),12)|0);
     $38 = tempRet0;
     $39 = ($38|0)>(-1);
     $40 = ($37>>>0)>(4294967295);
     $41 = ($38|0)==(-1);
     $42 = $41 & $40;
     $43 = $39 | $42;
     if ($43) {
      $45 = $37;$46 = $38;$ex$026 = 0;
      while(1) {
       $44 = (($ex$026) + -1)|0;
       $47 = (_bitshift64Shl(($45|0),($46|0),1)|0);
       $48 = tempRet0;
       $49 = ($48|0)>(-1);
       $50 = ($47>>>0)>(4294967295);
       $51 = ($48|0)==(-1);
       $52 = $51 & $50;
       $53 = $49 | $52;
       if ($53) {
        $45 = $47;$46 = $48;$ex$026 = $44;
       } else {
        $ex$0$lcssa = $44;
        break;
       }
      }
     } else {
      $ex$0$lcssa = 0;
     }
     $54 = (1 - ($ex$0$lcssa))|0;
     $55 = (_bitshift64Shl(($0|0),($1|0),($54|0))|0);
     $56 = tempRet0;
     $83 = $55;$84 = $56;$ex$1 = $ex$0$lcssa;
    } else {
     $57 = $1 & 1048575;
     $58 = $57 | 1048576;
     $83 = $0;$84 = $58;$ex$1 = $6;
    }
    $59 = ($9|0)==(0);
    if ($59) {
     $60 = (_bitshift64Shl(($2|0),($3|0),12)|0);
     $61 = tempRet0;
     $62 = ($61|0)>(-1);
     $63 = ($60>>>0)>(4294967295);
     $64 = ($61|0)==(-1);
     $65 = $64 & $63;
     $66 = $62 | $65;
     if ($66) {
      $68 = $60;$69 = $61;$ey$020 = 0;
      while(1) {
       $67 = (($ey$020) + -1)|0;
       $70 = (_bitshift64Shl(($68|0),($69|0),1)|0);
       $71 = tempRet0;
       $72 = ($71|0)>(-1);
       $73 = ($70>>>0)>(4294967295);
       $74 = ($71|0)==(-1);
       $75 = $74 & $73;
       $76 = $72 | $75;
       if ($76) {
        $68 = $70;$69 = $71;$ey$020 = $67;
       } else {
        $ey$0$lcssa = $67;
        break;
       }
      }
     } else {
      $ey$0$lcssa = 0;
     }
     $77 = (1 - ($ey$0$lcssa))|0;
     $78 = (_bitshift64Shl(($2|0),($3|0),($77|0))|0);
     $79 = tempRet0;
     $85 = $78;$86 = $79;$ey$1$ph = $ey$0$lcssa;
    } else {
     $80 = $3 & 1048575;
     $81 = $80 | 1048576;
     $85 = $2;$86 = $81;$ey$1$ph = $9;
    }
    $82 = ($ex$1|0)>($ey$1$ph|0);
    $87 = (_i64Subtract(($83|0),($84|0),($85|0),($86|0))|0);
    $88 = tempRet0;
    $89 = ($88|0)>(-1);
    $90 = ($87>>>0)>(4294967295);
    $91 = ($88|0)==(-1);
    $92 = $91 & $90;
    $93 = $89 | $92;
    L23: do {
     if ($82) {
      $152 = $93;$153 = $87;$154 = $88;$95 = $83;$97 = $84;$ex$212 = $ex$1;
      while(1) {
       if ($152) {
        $94 = ($95|0)==($85|0);
        $96 = ($97|0)==($86|0);
        $98 = $94 & $96;
        if ($98) {
         break;
        } else {
         $100 = $153;$101 = $154;
        }
       } else {
        $100 = $95;$101 = $97;
       }
       $102 = (_bitshift64Shl(($100|0),($101|0),1)|0);
       $103 = tempRet0;
       $104 = (($ex$212) + -1)|0;
       $105 = ($104|0)>($ey$1$ph|0);
       $106 = (_i64Subtract(($102|0),($103|0),($85|0),($86|0))|0);
       $107 = tempRet0;
       $108 = ($107|0)>(-1);
       $109 = ($106>>>0)>(4294967295);
       $110 = ($107|0)==(-1);
       $111 = $110 & $109;
       $112 = $108 | $111;
       if ($105) {
        $152 = $112;$153 = $106;$154 = $107;$95 = $102;$97 = $103;$ex$212 = $104;
       } else {
        $$lcssa7 = $112;$114 = $102;$116 = $103;$155 = $106;$156 = $107;$ex$2$lcssa = $104;
        break L23;
       }
      }
      $99 = $x * 0.0;
      $$0 = $99;
      break L1;
     } else {
      $$lcssa7 = $93;$114 = $83;$116 = $84;$155 = $87;$156 = $88;$ex$2$lcssa = $ex$1;
     }
    } while(0);
    if ($$lcssa7) {
     $113 = ($114|0)==($85|0);
     $115 = ($116|0)==($86|0);
     $117 = $113 & $115;
     if ($117) {
      $125 = $x * 0.0;
      $$0 = $125;
      break;
     } else {
      $119 = $156;$121 = $155;
     }
    } else {
     $119 = $116;$121 = $114;
    }
    $118 = ($119>>>0)<(1048576);
    $120 = ($121>>>0)<(0);
    $122 = ($119|0)==(1048576);
    $123 = $122 & $120;
    $124 = $118 | $123;
    if ($124) {
     $126 = $121;$127 = $119;$ex$39 = $ex$2$lcssa;
     while(1) {
      $128 = (_bitshift64Shl(($126|0),($127|0),1)|0);
      $129 = tempRet0;
      $130 = (($ex$39) + -1)|0;
      $131 = ($129>>>0)<(1048576);
      $132 = ($128>>>0)<(0);
      $133 = ($129|0)==(1048576);
      $134 = $133 & $132;
      $135 = $131 | $134;
      if ($135) {
       $126 = $128;$127 = $129;$ex$39 = $130;
      } else {
       $137 = $128;$138 = $129;$ex$3$lcssa = $130;
       break;
      }
     }
    } else {
     $137 = $121;$138 = $119;$ex$3$lcssa = $ex$2$lcssa;
    }
    $136 = ($ex$3$lcssa|0)>(0);
    if ($136) {
     $139 = (_i64Add(($137|0),($138|0),0,-1048576)|0);
     $140 = tempRet0;
     $141 = (_bitshift64Shl(($ex$3$lcssa|0),0,52)|0);
     $142 = tempRet0;
     $143 = $139 | $141;
     $144 = $140 | $142;
     $149 = $144;$150 = $143;
    } else {
     $145 = (1 - ($ex$3$lcssa))|0;
     $146 = (_bitshift64Lshr(($137|0),($138|0),($145|0))|0);
     $147 = tempRet0;
     $149 = $147;$150 = $146;
    }
    $148 = $149 | $10;
    HEAP32[tempDoublePtr>>2] = $150;HEAP32[tempDoublePtr+4>>2] = $148;$151 = +HEAPF64[tempDoublePtr>>3];
    $$0 = $151;
   }
  }
 } while(0);
 if ((label|0) == 3) {
  $23 = $x * $y;
  $24 = $23 / $23;
  $$0 = $24;
 }
 return (+$$0);
}
function _fmodl($x,$y) {
 $x = +$x;
 $y = +$y;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_fmod($x,$y));
 return (+$0);
}
function _frexp($x,$e) {
 $x = +$x;
 $e = $e|0;
 var $$0 = 0.0, $$01 = 0.0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $x;$0 = HEAP32[tempDoublePtr>>2]|0;
 $1 = HEAP32[tempDoublePtr+4>>2]|0;
 $2 = (_bitshift64Lshr(($0|0),($1|0),52)|0);
 $3 = tempRet0;
 $4 = $2 & 2047;
 switch ($4|0) {
 case 0:  {
  $5 = $x != 0.0;
  if ($5) {
   $6 = $x * 1.8446744073709552E+19;
   $7 = (+_frexp($6,$e));
   $8 = HEAP32[$e>>2]|0;
   $9 = (($8) + -64)|0;
   $$01 = $7;$storemerge = $9;
  } else {
   $$01 = $x;$storemerge = 0;
  }
  HEAP32[$e>>2] = $storemerge;
  $$0 = $$01;
  break;
 }
 case 2047:  {
  $$0 = $x;
  break;
 }
 default: {
  $10 = (($4) + -1022)|0;
  HEAP32[$e>>2] = $10;
  $11 = $1 & -2146435073;
  $12 = $11 | 1071644672;
  HEAP32[tempDoublePtr>>2] = $0;HEAP32[tempDoublePtr+4>>2] = $12;$13 = +HEAPF64[tempDoublePtr>>3];
  $$0 = $13;
 }
 }
 return (+$$0);
}
function _frexpl($x,$e) {
 $x = +$x;
 $e = $e|0;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_frexp($x,$e));
 return (+$0);
}
function _ldexp($x,$n) {
 $x = +$x;
 $n = $n|0;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_scalbn($x,$n));
 return (+$0);
}
function _log10($x) {
 $x = +$x;
 var $$0 = 0.0, $0 = 0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0;
 var $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0, $49 = 0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0.0;
 var $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0, $8 = 0.0, $9 = 0.0, $hx$0 = 0, $k$0 = 0, $or$cond = 0, $or$cond4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $x;$0 = HEAP32[tempDoublePtr>>2]|0;
 $1 = HEAP32[tempDoublePtr+4>>2]|0;
 $2 = ($1>>>0)<(1048576);
 $3 = ($1|0)<(0);
 $or$cond = $3 | $2;
 do {
  if ($or$cond) {
   $4 = $1 & 2147483647;
   $5 = ($0|0)==(0);
   $6 = ($4|0)==(0);
   $7 = $5 & $6;
   if ($7) {
    $8 = $x * $x;
    $9 = -1.0 / $8;
    $$0 = $9;
    break;
   }
   if ($3) {
    $10 = $x - $x;
    $11 = $10 / 0.0;
    $$0 = $11;
    break;
   } else {
    $12 = $x * 18014398509481984.0;
    HEAPF64[tempDoublePtr>>3] = $12;$13 = HEAP32[tempDoublePtr>>2]|0;
    $14 = HEAP32[tempDoublePtr+4>>2]|0;
    $25 = $13;$70 = $14;$hx$0 = $14;$k$0 = -1077;
    label = 9;
    break;
   }
  } else {
   $15 = ($1>>>0)>(2146435071);
   if ($15) {
    $$0 = $x;
   } else {
    $16 = ($1|0)==(1072693248);
    $17 = ($0|0)==(0);
    $18 = (0)==(0);
    $19 = $17 & $18;
    $or$cond4 = $19 & $16;
    if ($or$cond4) {
     $$0 = 0.0;
    } else {
     $25 = $0;$70 = $1;$hx$0 = $1;$k$0 = -1023;
     label = 9;
    }
   }
  }
 } while(0);
 if ((label|0) == 9) {
  $20 = (($hx$0) + 614242)|0;
  $21 = $20 >>> 20;
  $22 = (($k$0) + ($21))|0;
  $23 = $20 & 1048575;
  $24 = (($23) + 1072079006)|0;
  HEAP32[tempDoublePtr>>2] = $25;HEAP32[tempDoublePtr+4>>2] = $24;$26 = +HEAPF64[tempDoublePtr>>3];
  $27 = $26 + -1.0;
  $28 = $27 * 0.5;
  $29 = $27 * $28;
  $30 = $27 + 2.0;
  $31 = $27 / $30;
  $32 = $31 * $31;
  $33 = $32 * $32;
  $34 = $33 * 0.15313837699209373;
  $35 = $34 + 0.22222198432149784;
  $36 = $33 * $35;
  $37 = $36 + 0.39999999999409419;
  $38 = $33 * $37;
  $39 = $33 * 0.14798198605116586;
  $40 = $39 + 0.1818357216161805;
  $41 = $33 * $40;
  $42 = $41 + 0.28571428743662391;
  $43 = $33 * $42;
  $44 = $43 + 0.66666666666667351;
  $45 = $32 * $44;
  $46 = $38 + $45;
  $47 = $27 - $29;
  HEAPF64[tempDoublePtr>>3] = $47;$48 = HEAP32[tempDoublePtr>>2]|0;
  $49 = HEAP32[tempDoublePtr+4>>2]|0;
  HEAP32[tempDoublePtr>>2] = 0;HEAP32[tempDoublePtr+4>>2] = $49;$50 = +HEAPF64[tempDoublePtr>>3];
  $51 = $27 - $50;
  $52 = $51 - $29;
  $53 = $29 + $46;
  $54 = $31 * $53;
  $55 = $54 + $52;
  $56 = $50 * 0.43429448187816888;
  $57 = (+($22|0));
  $58 = $57 * 0.30102999566361177;
  $59 = $57 * 3.6942390771589308E-13;
  $60 = $50 + $55;
  $61 = $60 * 2.5082946711645275E-11;
  $62 = $59 + $61;
  $63 = $55 * 0.43429448187816888;
  $64 = $63 + $62;
  $65 = $58 + $56;
  $66 = $58 - $65;
  $67 = $56 + $66;
  $68 = $67 + $64;
  $69 = $65 + $68;
  $$0 = $69;
 }
 return (+$$0);
}
function _modf($x,$iptr) {
 $x = +$x;
 $iptr = $iptr|0;
 var $$0 = 0.0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0.0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0.0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0.0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $x;$0 = HEAP32[tempDoublePtr>>2]|0;
 $1 = HEAP32[tempDoublePtr+4>>2]|0;
 $2 = (_bitshift64Lshr(($0|0),($1|0),52)|0);
 $3 = tempRet0;
 $4 = $2 & 2047;
 $5 = (($4) + -1023)|0;
 $6 = ($5|0)>(51);
 do {
  if ($6) {
   HEAPF64[$iptr>>3] = $x;
   $7 = ($5|0)!=(1024);
   $8 = $1 & 1048575;
   $9 = ($0|0)==(0);
   $10 = ($8|0)==(0);
   $11 = $9 & $10;
   $or$cond = $11 | $7;
   if ($or$cond) {
    $12 = $1 & -2147483648;
    HEAP32[tempDoublePtr>>2] = 0;HEAP32[tempDoublePtr+4>>2] = $12;$13 = +HEAPF64[tempDoublePtr>>3];
    $$0 = $13;
   } else {
    $$0 = $x;
   }
  } else {
   $14 = ($4>>>0)<(1023);
   if ($14) {
    $15 = $1 & -2147483648;
    $16 = $iptr;
    $17 = $16;
    HEAP32[$17>>2] = 0;
    $18 = (($16) + 4)|0;
    $19 = $18;
    HEAP32[$19>>2] = $15;
    $$0 = $x;
    break;
   }
   $20 = (_bitshift64Lshr(-1,1048575,($5|0))|0);
   $21 = tempRet0;
   $22 = $20 & $0;
   $23 = $21 & $1;
   $24 = ($22|0)==(0);
   $25 = ($23|0)==(0);
   $26 = $24 & $25;
   if ($26) {
    HEAPF64[$iptr>>3] = $x;
    $27 = $1 & -2147483648;
    HEAP32[tempDoublePtr>>2] = 0;HEAP32[tempDoublePtr+4>>2] = $27;$28 = +HEAPF64[tempDoublePtr>>3];
    $$0 = $28;
    break;
   } else {
    $29 = $20 ^ -1;
    $30 = $21 ^ -1;
    $31 = $0 & $29;
    $32 = $1 & $30;
    HEAP32[tempDoublePtr>>2] = $31;HEAP32[tempDoublePtr+4>>2] = $32;$33 = +HEAPF64[tempDoublePtr>>3];
    $34 = $iptr;
    $35 = $34;
    HEAP32[$35>>2] = $31;
    $36 = (($34) + 4)|0;
    $37 = $36;
    HEAP32[$37>>2] = $32;
    $38 = $x - $33;
    $$0 = $38;
    break;
   }
  }
 } while(0);
 return (+$$0);
}
function _scalbn($x,$n) {
 $x = +$x;
 $n = $n|0;
 var $$ = 0, $$0 = 0, $$1 = 0, $0 = 0, $1 = 0.0, $10 = 0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0.0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0.0, $9 = 0, $y$0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n|0)>(1023);
 if ($0) {
  $1 = $x * 8.9884656743115795E+307;
  $2 = (($n) + -1023)|0;
  $3 = ($2|0)>(1023);
  if ($3) {
   $4 = $1 * 8.9884656743115795E+307;
   $5 = (($n) + -2046)|0;
   $6 = ($5|0)>(1023);
   $$ = $6 ? 1023 : $5;
   $$0 = $$;$y$0 = $4;
  } else {
   $$0 = $2;$y$0 = $1;
  }
 } else {
  $7 = ($n|0)<(-1022);
  if ($7) {
   $8 = $x * 2.2250738585072014E-308;
   $9 = (($n) + 1022)|0;
   $10 = ($9|0)<(-1022);
   if ($10) {
    $11 = $8 * 2.2250738585072014E-308;
    $12 = (($n) + 2044)|0;
    $13 = ($12|0)<(-1022);
    $$1 = $13 ? -1022 : $12;
    $$0 = $$1;$y$0 = $11;
   } else {
    $$0 = $9;$y$0 = $8;
   }
  } else {
   $$0 = $n;$y$0 = $x;
  }
 }
 $14 = (($$0) + 1023)|0;
 $15 = (_bitshift64Shl(($14|0),0,52)|0);
 $16 = tempRet0;
 HEAP32[tempDoublePtr>>2] = $15;HEAP32[tempDoublePtr+4>>2] = $16;$17 = +HEAPF64[tempDoublePtr>>3];
 $18 = $y$0 * $17;
 return (+$18);
}
function _scalbnl($x,$n) {
 $x = +$x;
 $n = $n|0;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_scalbn($x,$n));
 return (+$0);
}
function _sinh($x) {
 $x = +$x;
 var $$ = 0.0, $$0 = 0.0, $0 = 0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0, $3 = 0, $4 = 0.0, $5 = 0;
 var $6 = 0.0, $7 = 0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $x;$0 = HEAP32[tempDoublePtr>>2]|0;
 $1 = HEAP32[tempDoublePtr+4>>2]|0;
 $2 = ($1|0)<(0);
 $$ = $2 ? -0.5 : 0.5;
 $3 = $1 & 2147483647;
 HEAP32[tempDoublePtr>>2] = $0;HEAP32[tempDoublePtr+4>>2] = $3;$4 = +HEAPF64[tempDoublePtr>>3];
 $5 = ($3>>>0)<(1082535490);
 do {
  if ($5) {
   $6 = (+_expm1($4));
   $7 = ($3>>>0)<(1072693248);
   if (!($7)) {
    $15 = $6 + 1.0;
    $16 = $6 / $15;
    $17 = $6 + $16;
    $18 = $$ * $17;
    $$0 = $18;
    break;
   }
   $8 = ($3>>>0)<(1045430272);
   if ($8) {
    $$0 = $x;
   } else {
    $9 = $6 * 2.0;
    $10 = $6 * $6;
    $11 = $6 + 1.0;
    $12 = $10 / $11;
    $13 = $9 - $12;
    $14 = $$ * $13;
    $$0 = $14;
   }
  } else {
   $19 = $$ * 2.0;
   $20 = (+___expo2($4));
   $21 = $19 * $20;
   $$0 = $21;
  }
 } while(0);
 return (+$$0);
}
function _tanh($x) {
 $x = +$x;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0, $25 = 0.0, $26 = 0.0;
 var $3 = 0.0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $t$0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $x;$0 = HEAP32[tempDoublePtr>>2]|0;
 $1 = HEAP32[tempDoublePtr+4>>2]|0;
 $2 = $1 & 2147483647;
 HEAP32[tempDoublePtr>>2] = $0;HEAP32[tempDoublePtr+4>>2] = $2;$3 = +HEAPF64[tempDoublePtr>>3];
 $4 = ($2>>>0)>(1071748074);
 do {
  if ($4) {
   $5 = ($2>>>0)>(1077149696);
   if ($5) {
    $6 = 0.0 / $3;
    $7 = 1.0 - $6;
    $t$0 = $7;
    break;
   } else {
    $8 = $3 * 2.0;
    $9 = (+_expm1($8));
    $10 = $9 + 2.0;
    $11 = 2.0 / $10;
    $12 = 1.0 - $11;
    $t$0 = $12;
    break;
   }
  } else {
   $13 = ($2>>>0)>(1070618798);
   if ($13) {
    $14 = $3 * 2.0;
    $15 = (+_expm1($14));
    $16 = $15 + 2.0;
    $17 = $15 / $16;
    $t$0 = $17;
    break;
   }
   $18 = ($2>>>0)>(1048575);
   if ($18) {
    $19 = $3 * -2.0;
    $20 = (+_expm1($19));
    $21 = -$20;
    $22 = $20 + 2.0;
    $23 = $21 / $22;
    $t$0 = $23;
   } else {
    $t$0 = $3;
   }
  }
 } while(0);
 $24 = ($1|0)<(0);
 $25 = -$t$0;
 $26 = $24 ? $25 : $t$0;
 return (+$26);
}
function _mbrtowc($wc,$src,$n,$st) {
 $wc = $wc|0;
 $src = $src|0;
 $n = $n|0;
 $st = $st|0;
 var $$0 = 0, $$024 = 0, $$1 = 0, $$lcssa = 0, $$lcssa35 = 0, $$st = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c$05 = 0, $c$1 = 0, $c$2 = 0, $dummy = 0, $dummy$wc = 0, $s$06 = 0, $s$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $dummy = sp;
 $0 = ($st|0)==(0|0);
 $$st = $0 ? 2248 : $st;
 $1 = HEAP32[$$st>>2]|0;
 $2 = ($src|0)==(0|0);
 L1: do {
  if ($2) {
   $3 = ($1|0)==(0);
   if ($3) {
    $$0 = 0;
   } else {
    label = 15;
   }
  } else {
   $4 = ($wc|0)==(0|0);
   $dummy$wc = $4 ? $dummy : $wc;
   $5 = ($n|0)==(0);
   if ($5) {
    $$0 = -2;
   } else {
    $6 = ($1|0)==(0);
    if ($6) {
     $7 = HEAP8[$src>>0]|0;
     $8 = $7&255;
     $9 = ($7<<24>>24)>(-1);
     if ($9) {
      HEAP32[$dummy$wc>>2] = $8;
      $10 = ($7<<24>>24)!=(0);
      $11 = $10&1;
      $$0 = $11;
      break;
     }
     $12 = (($8) + -194)|0;
     $13 = ($12>>>0)>(50);
     if ($13) {
      label = 15;
      break;
     }
     $14 = ((($src)) + 1|0);
     $15 = (1936 + ($12<<2)|0);
     $16 = HEAP32[$15>>2]|0;
     $17 = (($n) + -1)|0;
     $18 = ($17|0)==(0);
     if ($18) {
      $c$2 = $16;
     } else {
      $$024 = $17;$c$05 = $16;$s$06 = $14;
      label = 9;
     }
    } else {
     $$024 = $n;$c$05 = $1;$s$06 = $src;
     label = 9;
    }
    L11: do {
     if ((label|0) == 9) {
      $19 = HEAP8[$s$06>>0]|0;
      $20 = $19&255;
      $21 = $20 >>> 3;
      $22 = (($21) + -16)|0;
      $23 = $c$05 >> 26;
      $24 = (($21) + ($23))|0;
      $25 = $22 | $24;
      $26 = ($25>>>0)>(7);
      if ($26) {
       label = 15;
       break L1;
      } else {
       $$1 = $$024;$30 = $19;$c$1 = $c$05;$s$1 = $s$06;
      }
      while(1) {
       $27 = $c$1 << 6;
       $28 = ((($s$1)) + 1|0);
       $29 = $30&255;
       $31 = (($29) + -128)|0;
       $32 = $31 | $27;
       $33 = (($$1) + -1)|0;
       $34 = ($32|0)<(0);
       if (!($34)) {
        $$lcssa = $32;$$lcssa35 = $33;
        break;
       }
       $36 = ($33|0)==(0);
       if ($36) {
        $c$2 = $32;
        break L11;
       }
       $37 = HEAP8[$28>>0]|0;
       $38 = $37 & -64;
       $39 = ($38<<24>>24)==(-128);
       if ($39) {
        $$1 = $33;$30 = $37;$c$1 = $32;$s$1 = $28;
       } else {
        label = 15;
        break L1;
       }
      }
      HEAP32[$$st>>2] = 0;
      HEAP32[$dummy$wc>>2] = $$lcssa;
      $35 = (($n) - ($$lcssa35))|0;
      $$0 = $35;
      break L1;
     }
    } while(0);
    HEAP32[$$st>>2] = $c$2;
    $$0 = -2;
   }
  }
 } while(0);
 if ((label|0) == 15) {
  HEAP32[$$st>>2] = 0;
  $40 = (___errno_location()|0);
  HEAP32[$40>>2] = 84;
  $$0 = -1;
 }
 STACKTOP = sp;return ($$0|0);
}
function _mbsinit($st) {
 $st = $st|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($st|0)==(0|0);
 if ($0) {
  $4 = 1;
 } else {
  $1 = HEAP32[$st>>2]|0;
  $2 = ($1|0)==(0);
  $4 = $2;
 }
 $3 = $4&1;
 return ($3|0);
}
function _wcrtomb($s,$wc,$st) {
 $s = $s|0;
 $wc = $wc|0;
 $st = $st|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($s|0)==(0|0);
 do {
  if ($0) {
   $$0 = 1;
  } else {
   $1 = ($wc>>>0)<(128);
   if ($1) {
    $2 = $wc&255;
    HEAP8[$s>>0] = $2;
    $$0 = 1;
    break;
   }
   $3 = ($wc>>>0)<(2048);
   if ($3) {
    $4 = $wc >>> 6;
    $5 = $4 | 192;
    $6 = $5&255;
    $7 = ((($s)) + 1|0);
    HEAP8[$s>>0] = $6;
    $8 = $wc & 63;
    $9 = $8 | 128;
    $10 = $9&255;
    HEAP8[$7>>0] = $10;
    $$0 = 2;
    break;
   }
   $11 = ($wc>>>0)<(55296);
   $12 = $wc & -8192;
   $13 = ($12|0)==(57344);
   $or$cond = $11 | $13;
   if ($or$cond) {
    $14 = $wc >>> 12;
    $15 = $14 | 224;
    $16 = $15&255;
    $17 = ((($s)) + 1|0);
    HEAP8[$s>>0] = $16;
    $18 = $wc >>> 6;
    $19 = $18 & 63;
    $20 = $19 | 128;
    $21 = $20&255;
    $22 = ((($s)) + 2|0);
    HEAP8[$17>>0] = $21;
    $23 = $wc & 63;
    $24 = $23 | 128;
    $25 = $24&255;
    HEAP8[$22>>0] = $25;
    $$0 = 3;
    break;
   }
   $26 = (($wc) + -65536)|0;
   $27 = ($26>>>0)<(1048576);
   if ($27) {
    $28 = $wc >>> 18;
    $29 = $28 | 240;
    $30 = $29&255;
    $31 = ((($s)) + 1|0);
    HEAP8[$s>>0] = $30;
    $32 = $wc >>> 12;
    $33 = $32 & 63;
    $34 = $33 | 128;
    $35 = $34&255;
    $36 = ((($s)) + 2|0);
    HEAP8[$31>>0] = $35;
    $37 = $wc >>> 6;
    $38 = $37 & 63;
    $39 = $38 | 128;
    $40 = $39&255;
    $41 = ((($s)) + 3|0);
    HEAP8[$36>>0] = $40;
    $42 = $wc & 63;
    $43 = $42 | 128;
    $44 = $43&255;
    HEAP8[$41>>0] = $44;
    $$0 = 4;
    break;
   } else {
    $45 = (___errno_location()|0);
    HEAP32[$45>>2] = 84;
    $$0 = -1;
    break;
   }
  }
 } while(0);
 return ($$0|0);
}
function _wctomb($s,$wc) {
 $s = $s|0;
 $wc = $wc|0;
 var $$0 = 0, $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($s|0)==(0|0);
 if ($0) {
  $$0 = 0;
 } else {
  $1 = (_wcrtomb($s,$wc,0)|0);
  $$0 = $1;
 }
 return ($$0|0);
}
function _srand($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($s) + -1)|0;
 $1 = 72;
 $2 = $1;
 HEAP32[$2>>2] = $0;
 $3 = (($1) + 4)|0;
 $4 = $3;
 HEAP32[$4>>2] = 0;
 return;
}
function _rand() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = 72;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($0) + 4)|0;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = (___muldi3(($2|0),($5|0),1284865837,1481765933)|0);
 $7 = tempRet0;
 $8 = (_i64Add(($6|0),($7|0),1,0)|0);
 $9 = tempRet0;
 $10 = 72;
 $11 = $10;
 HEAP32[$11>>2] = $8;
 $12 = (($10) + 4)|0;
 $13 = $12;
 HEAP32[$13>>2] = $9;
 $14 = (_bitshift64Lshr(($8|0),($9|0),33)|0);
 $15 = tempRet0;
 return ($14|0);
}
function ___fdopen($fd,$mode) {
 $fd = $fd|0;
 $mode = $mode|0;
 var $$0 = 0, $$pre = 0, $$pre1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $memchr = 0, $tio = 0, $vararg_buffer = 0, $vararg_buffer12 = 0, $vararg_buffer3 = 0, $vararg_buffer7 = 0, $vararg_ptr1 = 0, $vararg_ptr10 = 0, $vararg_ptr11 = 0, $vararg_ptr15 = 0, $vararg_ptr16 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, dest = 0, label = 0;
 var sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer12 = sp + 40|0;
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $tio = sp + 52|0;
 $0 = HEAP8[$mode>>0]|0;
 $1 = $0 << 24 >> 24;
 $memchr = (_memchr(18104,$1,4)|0);
 $2 = ($memchr|0)==(0|0);
 if ($2) {
  $3 = (___errno_location()|0);
  HEAP32[$3>>2] = 22;
  $$0 = 0;
 } else {
  $4 = (_malloc(1144)|0);
  $5 = ($4|0)==(0|0);
  if ($5) {
   $$0 = 0;
  } else {
   dest=$4; stop=dest+112|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
   $6 = (_strchr($mode,43)|0);
   $7 = ($6|0)==(0|0);
   if ($7) {
    $8 = ($0<<24>>24)==(114);
    $9 = $8 ? 8 : 4;
    HEAP32[$4>>2] = $9;
   }
   $10 = (_strchr($mode,101)|0);
   $11 = ($10|0)==(0|0);
   if ($11) {
    $13 = $0;
   } else {
    HEAP32[$vararg_buffer>>2] = $fd;
    $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
    HEAP32[$vararg_ptr1>>2] = 2;
    $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
    HEAP32[$vararg_ptr2>>2] = 1;
    (___syscall221(221,($vararg_buffer|0))|0);
    $$pre = HEAP8[$mode>>0]|0;
    $13 = $$pre;
   }
   $12 = ($13<<24>>24)==(97);
   if ($12) {
    HEAP32[$vararg_buffer3>>2] = $fd;
    $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
    HEAP32[$vararg_ptr6>>2] = 3;
    $14 = (___syscall221(221,($vararg_buffer3|0))|0);
    $15 = $14 & 1024;
    $16 = ($15|0)==(0);
    if ($16) {
     $17 = $14 | 1024;
     HEAP32[$vararg_buffer7>>2] = $fd;
     $vararg_ptr10 = ((($vararg_buffer7)) + 4|0);
     HEAP32[$vararg_ptr10>>2] = 4;
     $vararg_ptr11 = ((($vararg_buffer7)) + 8|0);
     HEAP32[$vararg_ptr11>>2] = $17;
     (___syscall221(221,($vararg_buffer7|0))|0);
    }
    $18 = HEAP32[$4>>2]|0;
    $19 = $18 | 128;
    HEAP32[$4>>2] = $19;
    $26 = $19;
   } else {
    $$pre1 = HEAP32[$4>>2]|0;
    $26 = $$pre1;
   }
   $20 = ((($4)) + 60|0);
   HEAP32[$20>>2] = $fd;
   $21 = ((($4)) + 120|0);
   $22 = ((($4)) + 44|0);
   HEAP32[$22>>2] = $21;
   $23 = ((($4)) + 48|0);
   HEAP32[$23>>2] = 1024;
   $24 = ((($4)) + 75|0);
   HEAP8[$24>>0] = -1;
   $25 = $26 & 8;
   $27 = ($25|0)==(0);
   if ($27) {
    HEAP32[$vararg_buffer12>>2] = $fd;
    $vararg_ptr15 = ((($vararg_buffer12)) + 4|0);
    HEAP32[$vararg_ptr15>>2] = 21505;
    $vararg_ptr16 = ((($vararg_buffer12)) + 8|0);
    HEAP32[$vararg_ptr16>>2] = $tio;
    $28 = (___syscall54(54,($vararg_buffer12|0))|0);
    $29 = ($28|0)==(0);
    if ($29) {
     HEAP8[$24>>0] = 10;
    }
   }
   $30 = ((($4)) + 32|0);
   HEAP32[$30>>2] = 145;
   $31 = ((($4)) + 36|0);
   HEAP32[$31>>2] = 143;
   $32 = ((($4)) + 40|0);
   HEAP32[$32>>2] = 144;
   $33 = ((($4)) + 12|0);
   HEAP32[$33>>2] = 142;
   $34 = HEAP32[(1896)>>2]|0;
   $35 = ($34|0)==(0);
   if ($35) {
    $36 = ((($4)) + 76|0);
    HEAP32[$36>>2] = -1;
   }
   ___lock(((1920)|0));
   $37 = HEAP32[(1916)>>2]|0;
   $38 = ((($4)) + 56|0);
   HEAP32[$38>>2] = $37;
   $39 = ($37|0)==(0);
   if (!($39)) {
    $40 = $37;
    $41 = ((($40)) + 52|0);
    HEAP32[$41>>2] = $4;
   }
   HEAP32[(1916)>>2] = $4;
   ___unlock(((1920)|0));
   $$0 = $4;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function ___fmodeflags($mode) {
 $mode = $mode|0;
 var $$ = 0, $$flags$4 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $flags$0 = 0, $flags$0$ = 0, $flags$2 = 0;
 var $flags$2$ = 0, $flags$4 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strchr($mode,43)|0);
 $1 = ($0|0)==(0|0);
 $2 = HEAP8[$mode>>0]|0;
 $not$ = ($2<<24>>24)!=(114);
 $$ = $not$&1;
 $flags$0 = $1 ? $$ : 2;
 $3 = (_strchr($mode,120)|0);
 $4 = ($3|0)==(0|0);
 $5 = $flags$0 | 128;
 $flags$0$ = $4 ? $flags$0 : $5;
 $6 = (_strchr($mode,101)|0);
 $7 = ($6|0)==(0|0);
 $8 = $flags$0$ | 524288;
 $flags$2 = $7 ? $flags$0$ : $8;
 $9 = ($2<<24>>24)==(114);
 $10 = $flags$2 | 64;
 $flags$2$ = $9 ? $flags$2 : $10;
 $11 = ($2<<24>>24)==(119);
 $12 = $flags$2$ | 512;
 $flags$4 = $11 ? $12 : $flags$2$;
 $13 = ($2<<24>>24)==(97);
 $14 = $flags$4 | 1024;
 $$flags$4 = $13 ? $14 : $flags$4;
 return ($$flags$4|0);
}
function ___lockfile($f) {
 $f = $f|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function ___unlockfile($f) {
 $f = $f|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function ___overflow($f,$_c) {
 $f = $f|0;
 $_c = $_c|0;
 var $$0 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $c = sp;
 $0 = $_c&255;
 HEAP8[$c>>0] = $0;
 $1 = ((($f)) + 16|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  $4 = (___towrite($f)|0);
  $5 = ($4|0)==(0);
  if ($5) {
   $$pre = HEAP32[$1>>2]|0;
   $9 = $$pre;
   label = 4;
  } else {
   $$0 = -1;
  }
 } else {
  $9 = $2;
  label = 4;
 }
 do {
  if ((label|0) == 4) {
   $6 = ((($f)) + 20|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = ($7>>>0)<($9>>>0);
   if ($8) {
    $10 = $_c & 255;
    $11 = ((($f)) + 75|0);
    $12 = HEAP8[$11>>0]|0;
    $13 = $12 << 24 >> 24;
    $14 = ($10|0)==($13|0);
    if (!($14)) {
     $15 = ((($7)) + 1|0);
     HEAP32[$6>>2] = $15;
     HEAP8[$7>>0] = $0;
     $$0 = $10;
     break;
    }
   }
   $16 = ((($f)) + 36|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = (FUNCTION_TABLE_iiii[$17 & 255]($f,$c,1)|0);
   $19 = ($18|0)==(1);
   if ($19) {
    $20 = HEAP8[$c>>0]|0;
    $21 = $20&255;
    $$0 = $21;
   } else {
    $$0 = -1;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function ___stdio_close($f) {
 $f = $f|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = ((($f)) + 60|0);
 $1 = HEAP32[$0>>2]|0;
 HEAP32[$vararg_buffer>>2] = $1;
 $2 = (___syscall6(6,($vararg_buffer|0))|0);
 $3 = (___syscall_ret($2)|0);
 STACKTOP = sp;return ($3|0);
}
function ___stdio_read($f,$buf,$len) {
 $f = $f|0;
 $buf = $buf|0;
 $len = $len|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $cnt$0 = 0, $iov = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $iov = sp + 32|0;
 HEAP32[$iov>>2] = $buf;
 $0 = ((($iov)) + 4|0);
 $1 = ((($f)) + 48|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)!=(0);
 $4 = $3&1;
 $5 = (($len) - ($4))|0;
 HEAP32[$0>>2] = $5;
 $6 = ((($iov)) + 8|0);
 $7 = ((($f)) + 44|0);
 $8 = HEAP32[$7>>2]|0;
 HEAP32[$6>>2] = $8;
 $9 = ((($iov)) + 12|0);
 HEAP32[$9>>2] = $2;
 $10 = HEAP32[1892>>2]|0;
 $11 = ($10|0)==(0|0);
 if ($11) {
  $16 = ((($f)) + 60|0);
  $17 = HEAP32[$16>>2]|0;
  HEAP32[$vararg_buffer3>>2] = $17;
  $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
  HEAP32[$vararg_ptr6>>2] = $iov;
  $vararg_ptr7 = ((($vararg_buffer3)) + 8|0);
  HEAP32[$vararg_ptr7>>2] = 2;
  $18 = (___syscall145(145,($vararg_buffer3|0))|0);
  $19 = (___syscall_ret($18)|0);
  $cnt$0 = $19;
 } else {
  _pthread_cleanup_push((363|0),($f|0));
  $12 = ((($f)) + 60|0);
  $13 = HEAP32[$12>>2]|0;
  HEAP32[$vararg_buffer>>2] = $13;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $iov;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = 2;
  $14 = (___syscall145(145,($vararg_buffer|0))|0);
  $15 = (___syscall_ret($14)|0);
  _pthread_cleanup_pop(0);
  $cnt$0 = $15;
 }
 $20 = ($cnt$0|0)<(1);
 if ($20) {
  $21 = $cnt$0 & 48;
  $22 = $21 ^ 16;
  $23 = HEAP32[$f>>2]|0;
  $24 = $23 | $22;
  HEAP32[$f>>2] = $24;
  $25 = ((($f)) + 8|0);
  HEAP32[$25>>2] = 0;
  $26 = ((($f)) + 4|0);
  HEAP32[$26>>2] = 0;
  $$0 = $cnt$0;
 } else {
  $27 = HEAP32[$0>>2]|0;
  $28 = ($cnt$0>>>0)>($27>>>0);
  if ($28) {
   $29 = (($cnt$0) - ($27))|0;
   $30 = HEAP32[$7>>2]|0;
   $31 = ((($f)) + 4|0);
   HEAP32[$31>>2] = $30;
   $32 = $30;
   $33 = (($32) + ($29)|0);
   $34 = ((($f)) + 8|0);
   HEAP32[$34>>2] = $33;
   $35 = HEAP32[$1>>2]|0;
   $36 = ($35|0)==(0);
   if ($36) {
    $$0 = $len;
   } else {
    $37 = ((($32)) + 1|0);
    HEAP32[$31>>2] = $37;
    $38 = HEAP8[$32>>0]|0;
    $39 = (($len) + -1)|0;
    $40 = (($buf) + ($39)|0);
    HEAP8[$40>>0] = $38;
    $$0 = $len;
   }
  } else {
   $$0 = $cnt$0;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function ___stdio_seek($f,$off,$whence) {
 $f = $f|0;
 $off = $off|0;
 $whence = $whence|0;
 var $$pre = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $ret = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $ret = sp + 20|0;
 $0 = ((($f)) + 60|0);
 $1 = HEAP32[$0>>2]|0;
 HEAP32[$vararg_buffer>>2] = $1;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = 0;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $off;
 $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
 HEAP32[$vararg_ptr3>>2] = $ret;
 $vararg_ptr4 = ((($vararg_buffer)) + 16|0);
 HEAP32[$vararg_ptr4>>2] = $whence;
 $2 = (___syscall140(140,($vararg_buffer|0))|0);
 $3 = (___syscall_ret($2)|0);
 $4 = ($3|0)<(0);
 if ($4) {
  HEAP32[$ret>>2] = -1;
  $5 = -1;
 } else {
  $$pre = HEAP32[$ret>>2]|0;
  $5 = $$pre;
 }
 STACKTOP = sp;return ($5|0);
}
function ___stdio_write($f,$buf,$len) {
 $f = $f|0;
 $buf = $buf|0;
 $len = $len|0;
 var $$0 = 0, $$phi$trans$insert = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cnt$0 = 0, $cnt$1 = 0, $iov$0 = 0, $iov$0$lcssa11 = 0, $iov$1 = 0, $iovcnt$0 = 0;
 var $iovcnt$0$lcssa12 = 0, $iovcnt$1 = 0, $iovs = 0, $rem$0 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $iovs = sp + 32|0;
 $0 = ((($f)) + 28|0);
 $1 = HEAP32[$0>>2]|0;
 HEAP32[$iovs>>2] = $1;
 $2 = ((($iovs)) + 4|0);
 $3 = ((($f)) + 20|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4;
 $6 = (($5) - ($1))|0;
 HEAP32[$2>>2] = $6;
 $7 = ((($iovs)) + 8|0);
 HEAP32[$7>>2] = $buf;
 $8 = ((($iovs)) + 12|0);
 HEAP32[$8>>2] = $len;
 $9 = (($6) + ($len))|0;
 $10 = ((($f)) + 60|0);
 $11 = ((($f)) + 44|0);
 $iov$0 = $iovs;$iovcnt$0 = 2;$rem$0 = $9;
 while(1) {
  $12 = HEAP32[1892>>2]|0;
  $13 = ($12|0)==(0|0);
  if ($13) {
   $17 = HEAP32[$10>>2]|0;
   HEAP32[$vararg_buffer3>>2] = $17;
   $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
   HEAP32[$vararg_ptr6>>2] = $iov$0;
   $vararg_ptr7 = ((($vararg_buffer3)) + 8|0);
   HEAP32[$vararg_ptr7>>2] = $iovcnt$0;
   $18 = (___syscall146(146,($vararg_buffer3|0))|0);
   $19 = (___syscall_ret($18)|0);
   $cnt$0 = $19;
  } else {
   _pthread_cleanup_push((364|0),($f|0));
   $14 = HEAP32[$10>>2]|0;
   HEAP32[$vararg_buffer>>2] = $14;
   $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
   HEAP32[$vararg_ptr1>>2] = $iov$0;
   $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
   HEAP32[$vararg_ptr2>>2] = $iovcnt$0;
   $15 = (___syscall146(146,($vararg_buffer|0))|0);
   $16 = (___syscall_ret($15)|0);
   _pthread_cleanup_pop(0);
   $cnt$0 = $16;
  }
  $20 = ($rem$0|0)==($cnt$0|0);
  if ($20) {
   label = 6;
   break;
  }
  $27 = ($cnt$0|0)<(0);
  if ($27) {
   $iov$0$lcssa11 = $iov$0;$iovcnt$0$lcssa12 = $iovcnt$0;
   label = 8;
   break;
  }
  $35 = (($rem$0) - ($cnt$0))|0;
  $36 = ((($iov$0)) + 4|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = ($cnt$0>>>0)>($37>>>0);
  if ($38) {
   $39 = HEAP32[$11>>2]|0;
   HEAP32[$0>>2] = $39;
   HEAP32[$3>>2] = $39;
   $40 = (($cnt$0) - ($37))|0;
   $41 = ((($iov$0)) + 8|0);
   $42 = (($iovcnt$0) + -1)|0;
   $$phi$trans$insert = ((($iov$0)) + 12|0);
   $$pre = HEAP32[$$phi$trans$insert>>2]|0;
   $50 = $$pre;$cnt$1 = $40;$iov$1 = $41;$iovcnt$1 = $42;
  } else {
   $43 = ($iovcnt$0|0)==(2);
   if ($43) {
    $44 = HEAP32[$0>>2]|0;
    $45 = (($44) + ($cnt$0)|0);
    HEAP32[$0>>2] = $45;
    $50 = $37;$cnt$1 = $cnt$0;$iov$1 = $iov$0;$iovcnt$1 = 2;
   } else {
    $50 = $37;$cnt$1 = $cnt$0;$iov$1 = $iov$0;$iovcnt$1 = $iovcnt$0;
   }
  }
  $46 = HEAP32[$iov$1>>2]|0;
  $47 = (($46) + ($cnt$1)|0);
  HEAP32[$iov$1>>2] = $47;
  $48 = ((($iov$1)) + 4|0);
  $49 = (($50) - ($cnt$1))|0;
  HEAP32[$48>>2] = $49;
  $iov$0 = $iov$1;$iovcnt$0 = $iovcnt$1;$rem$0 = $35;
 }
 if ((label|0) == 6) {
  $21 = HEAP32[$11>>2]|0;
  $22 = ((($f)) + 48|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = (($21) + ($23)|0);
  $25 = ((($f)) + 16|0);
  HEAP32[$25>>2] = $24;
  $26 = $21;
  HEAP32[$0>>2] = $26;
  HEAP32[$3>>2] = $26;
  $$0 = $len;
 }
 else if ((label|0) == 8) {
  $28 = ((($f)) + 16|0);
  HEAP32[$28>>2] = 0;
  HEAP32[$0>>2] = 0;
  HEAP32[$3>>2] = 0;
  $29 = HEAP32[$f>>2]|0;
  $30 = $29 | 32;
  HEAP32[$f>>2] = $30;
  $31 = ($iovcnt$0$lcssa12|0)==(2);
  if ($31) {
   $$0 = 0;
  } else {
   $32 = ((($iov$0$lcssa11)) + 4|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = (($len) - ($33))|0;
   $$0 = $34;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function ___stdout_write($f,$buf,$len) {
 $f = $f|0;
 $buf = $buf|0;
 $len = $len|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $tio = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $tio = sp + 12|0;
 $0 = ((($f)) + 36|0);
 HEAP32[$0>>2] = 143;
 $1 = HEAP32[$f>>2]|0;
 $2 = $1 & 64;
 $3 = ($2|0)==(0);
 if ($3) {
  $4 = ((($f)) + 60|0);
  $5 = HEAP32[$4>>2]|0;
  HEAP32[$vararg_buffer>>2] = $5;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = 21505;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = $tio;
  $6 = (___syscall54(54,($vararg_buffer|0))|0);
  $7 = ($6|0)==(0);
  if (!($7)) {
   $8 = ((($f)) + 75|0);
   HEAP8[$8>>0] = -1;
  }
 }
 $9 = (___stdio_write($f,$buf,$len)|0);
 STACKTOP = sp;return ($9|0);
}
function ___toread($f) {
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 74|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1 << 24 >> 24;
 $3 = (($2) + 255)|0;
 $4 = $3 | $2;
 $5 = $4&255;
 HEAP8[$0>>0] = $5;
 $6 = ((($f)) + 20|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($f)) + 44|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($7>>>0)>($9>>>0);
 if ($10) {
  $11 = ((($f)) + 36|0);
  $12 = HEAP32[$11>>2]|0;
  (FUNCTION_TABLE_iiii[$12 & 255]($f,0,0)|0);
 }
 $13 = ((($f)) + 16|0);
 HEAP32[$13>>2] = 0;
 $14 = ((($f)) + 28|0);
 HEAP32[$14>>2] = 0;
 HEAP32[$6>>2] = 0;
 $15 = HEAP32[$f>>2]|0;
 $16 = $15 & 20;
 $17 = ($16|0)==(0);
 if ($17) {
  $21 = HEAP32[$8>>2]|0;
  $22 = ((($f)) + 8|0);
  HEAP32[$22>>2] = $21;
  $23 = ((($f)) + 4|0);
  HEAP32[$23>>2] = $21;
  $$0 = 0;
 } else {
  $18 = $15 & 4;
  $19 = ($18|0)==(0);
  if ($19) {
   $$0 = -1;
  } else {
   $20 = $15 | 32;
   HEAP32[$f>>2] = $20;
   $$0 = -1;
  }
 }
 return ($$0|0);
}
function ___towrite($f) {
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 74|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1 << 24 >> 24;
 $3 = (($2) + 255)|0;
 $4 = $3 | $2;
 $5 = $4&255;
 HEAP8[$0>>0] = $5;
 $6 = HEAP32[$f>>2]|0;
 $7 = $6 & 8;
 $8 = ($7|0)==(0);
 if ($8) {
  $10 = ((($f)) + 8|0);
  HEAP32[$10>>2] = 0;
  $11 = ((($f)) + 4|0);
  HEAP32[$11>>2] = 0;
  $12 = ((($f)) + 44|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ((($f)) + 28|0);
  HEAP32[$14>>2] = $13;
  $15 = ((($f)) + 20|0);
  HEAP32[$15>>2] = $13;
  $16 = $13;
  $17 = ((($f)) + 48|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = (($16) + ($18)|0);
  $20 = ((($f)) + 16|0);
  HEAP32[$20>>2] = $19;
  $$0 = 0;
 } else {
  $9 = $6 | 32;
  HEAP32[$f>>2] = $9;
  $$0 = -1;
 }
 return ($$0|0);
}
function ___uflow($f) {
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $c = sp;
 $0 = ((($f)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $3 = (___toread($f)|0);
  $4 = ($3|0)==(0);
  if ($4) {
   label = 3;
  } else {
   $$0 = -1;
  }
 } else {
  label = 3;
 }
 if ((label|0) == 3) {
  $5 = ((($f)) + 32|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = (FUNCTION_TABLE_iiii[$6 & 255]($f,$c,1)|0);
  $8 = ($7|0)==(1);
  if ($8) {
   $9 = HEAP8[$c>>0]|0;
   $10 = $9&255;
   $$0 = $10;
  } else {
   $$0 = -1;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _clearerr($f) {
 $f = $f|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 76|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)>(-1);
 if ($2) {
  $3 = (___lockfile($f)|0);
  $phitmp = ($3|0)==(0);
  $4 = HEAP32[$f>>2]|0;
  $5 = $4 & -49;
  HEAP32[$f>>2] = $5;
  if (!($phitmp)) {
   ___unlockfile($f);
  }
 } else {
  $6 = HEAP32[$f>>2]|0;
  $7 = $6 & -49;
  HEAP32[$f>>2] = $7;
 }
 return;
}
function _fclose($f) {
 $f = $f|0;
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 76|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)>(-1);
 if ($2) {
 }
 $3 = HEAP32[$f>>2]|0;
 $4 = $3 & 1;
 $5 = ($4|0)!=(0);
 if (!($5)) {
  ___lock(((1920)|0));
  $6 = ((($f)) + 52|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($7|0)==(0|0);
  $9 = $7;
  $$pre = ((($f)) + 56|0);
  if (!($8)) {
   $10 = HEAP32[$$pre>>2]|0;
   $11 = ((($7)) + 56|0);
   HEAP32[$11>>2] = $10;
  }
  $12 = HEAP32[$$pre>>2]|0;
  $13 = ($12|0)==(0|0);
  $14 = $12;
  if (!($13)) {
   $15 = ((($12)) + 52|0);
   HEAP32[$15>>2] = $9;
  }
  $16 = HEAP32[(1916)>>2]|0;
  $17 = ($16|0)==($f|0);
  if ($17) {
   HEAP32[(1916)>>2] = $14;
  }
  ___unlock(((1920)|0));
 }
 $18 = (_fflush($f)|0);
 $19 = ((($f)) + 12|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = (FUNCTION_TABLE_ii[$20 & 511]($f)|0);
 $22 = $21 | $18;
 $23 = ((($f)) + 92|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = ($24|0)==(0|0);
 if (!($25)) {
  _free($24);
 }
 if (!($5)) {
  _free($f);
 }
 return ($22|0);
}
function _feof($f) {
 $f = $f|0;
 var $$lobit = 0, $$lobit1 = 0, $$lobit2 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 76|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)>(-1);
 if ($2) {
  $5 = (___lockfile($f)|0);
  $phitmp = ($5|0)==(0);
  $6 = HEAP32[$f>>2]|0;
  $7 = $6 >>> 4;
  $$lobit = $7 & 1;
  if ($phitmp) {
   $$lobit2 = $$lobit;
  } else {
   $$lobit2 = $$lobit;
  }
 } else {
  $3 = HEAP32[$f>>2]|0;
  $4 = $3 >>> 4;
  $$lobit1 = $4 & 1;
  $$lobit2 = $$lobit1;
 }
 return ($$lobit2|0);
}
function _ferror($f) {
 $f = $f|0;
 var $$lobit = 0, $$lobit1 = 0, $$lobit2 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 76|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)>(-1);
 if ($2) {
  $5 = (___lockfile($f)|0);
  $phitmp = ($5|0)==(0);
  $6 = HEAP32[$f>>2]|0;
  $7 = $6 >>> 5;
  $$lobit = $7 & 1;
  if ($phitmp) {
   $$lobit2 = $$lobit;
  } else {
   $$lobit2 = $$lobit;
  }
 } else {
  $3 = HEAP32[$f>>2]|0;
  $4 = $3 >>> 5;
  $$lobit1 = $4 & 1;
  $$lobit2 = $$lobit1;
 }
 return ($$lobit2|0);
}
function _fflush($f) {
 $f = $f|0;
 var $$0 = 0, $$01 = 0, $$012 = 0, $$014 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp = 0, $r$0$lcssa = 0, $r$03 = 0, $r$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($f|0)==(0|0);
 do {
  if ($0) {
   $7 = HEAP32[2152>>2]|0;
   $8 = ($7|0)==(0|0);
   if ($8) {
    $27 = 0;
   } else {
    $9 = HEAP32[2152>>2]|0;
    $10 = (_fflush($9)|0);
    $27 = $10;
   }
   ___lock(((1920)|0));
   $$012 = HEAP32[(1916)>>2]|0;
   $11 = ($$012|0)==(0|0);
   if ($11) {
    $r$0$lcssa = $27;
   } else {
    $$014 = $$012;$r$03 = $27;
    while(1) {
     $12 = ((($$014)) + 76|0);
     $13 = HEAP32[$12>>2]|0;
     $14 = ($13|0)>(-1);
     if ($14) {
      $15 = (___lockfile($$014)|0);
      $24 = $15;
     } else {
      $24 = 0;
     }
     $16 = ((($$014)) + 20|0);
     $17 = HEAP32[$16>>2]|0;
     $18 = ((($$014)) + 28|0);
     $19 = HEAP32[$18>>2]|0;
     $20 = ($17>>>0)>($19>>>0);
     if ($20) {
      $21 = (___fflush_unlocked($$014)|0);
      $22 = $21 | $r$03;
      $r$1 = $22;
     } else {
      $r$1 = $r$03;
     }
     $23 = ($24|0)==(0);
     if (!($23)) {
      ___unlockfile($$014);
     }
     $25 = ((($$014)) + 56|0);
     $$01 = HEAP32[$25>>2]|0;
     $26 = ($$01|0)==(0|0);
     if ($26) {
      $r$0$lcssa = $r$1;
      break;
     } else {
      $$014 = $$01;$r$03 = $r$1;
     }
    }
   }
   ___unlock(((1920)|0));
   $$0 = $r$0$lcssa;
  } else {
   $1 = ((($f)) + 76|0);
   $2 = HEAP32[$1>>2]|0;
   $3 = ($2|0)>(-1);
   if (!($3)) {
    $4 = (___fflush_unlocked($f)|0);
    $$0 = $4;
    break;
   }
   $5 = (___lockfile($f)|0);
   $phitmp = ($5|0)==(0);
   $6 = (___fflush_unlocked($f)|0);
   if ($phitmp) {
    $$0 = $6;
   } else {
    ___unlockfile($f);
    $$0 = $6;
   }
  }
 } while(0);
 return ($$0|0);
}
function _fgets($s,$n,$f) {
 $s = $s|0;
 $n = $n|0;
 $f = $f|0;
 var $$0 = 0, $$048 = 0, $$05 = 0, $$lcssa14 = 0, $$old2 = 0, $$pre = 0, $$sum$pre$phiZZ2D = 0, $$sum6 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $or$cond = 0, $or$cond3 = 0, $p$0 = 0, $p$1 = 0, $sext$mask = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 76|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)>(-1);
 if ($2) {
  $3 = (___lockfile($f)|0);
  $13 = $3;
 } else {
  $13 = 0;
 }
 $4 = (($n) + -1)|0;
 $5 = ($n|0)<(2);
 if ($5) {
  $6 = ((($f)) + 74|0);
  $7 = HEAP8[$6>>0]|0;
  $8 = $7 << 24 >> 24;
  $9 = (($8) + 255)|0;
  $10 = $9 | $8;
  $11 = $10&255;
  HEAP8[$6>>0] = $11;
  $12 = ($13|0)==(0);
  if (!($12)) {
   ___unlockfile($f);
  }
  $14 = ($4|0)==(0);
  if ($14) {
   HEAP8[$s>>0] = 0;
   $$0 = $s;
  } else {
   $$0 = 0;
  }
 } else {
  $$old2 = ($4|0)==(0);
  L11: do {
   if ($$old2) {
    $p$1 = $s;
    label = 18;
   } else {
    $15 = ((($f)) + 4|0);
    $16 = ((($f)) + 8|0);
    $$05 = $4;$p$0 = $s;
    while(1) {
     $17 = HEAP32[$15>>2]|0;
     $18 = HEAP32[$16>>2]|0;
     $19 = $18;
     $20 = $17;
     $21 = (($19) - ($20))|0;
     $22 = (_memchr($17,10,$21)|0);
     $23 = ($22|0)==(0|0);
     $24 = $22;
     $25 = (1 - ($20))|0;
     $26 = (($25) + ($24))|0;
     $27 = $23 ? $21 : $26;
     $28 = ($27>>>0)<($$05>>>0);
     $29 = $28 ? $27 : $$05;
     _memcpy(($p$0|0),($17|0),($29|0))|0;
     $30 = HEAP32[$15>>2]|0;
     $31 = (($30) + ($29)|0);
     HEAP32[$15>>2] = $31;
     $32 = (($p$0) + ($29)|0);
     $33 = (($$05) - ($29))|0;
     $or$cond = $23 & $28;
     if (!($or$cond)) {
      $p$1 = $32;
      label = 18;
      break L11;
     }
     $34 = HEAP32[$16>>2]|0;
     $35 = ($31>>>0)<($34>>>0);
     if ($35) {
      $$sum6 = (($29) + 1)|0;
      $36 = (($30) + ($$sum6)|0);
      HEAP32[$15>>2] = $36;
      $37 = HEAP8[$31>>0]|0;
      $38 = $37&255;
      $$sum$pre$phiZZ2D = $$sum6;$47 = $38;
     } else {
      $39 = (___uflow($f)|0);
      $40 = ($39|0)<(0);
      if ($40) {
       $$lcssa14 = $32;
       break;
      }
      $$pre = (($29) + 1)|0;
      $$sum$pre$phiZZ2D = $$pre;$47 = $39;
     }
     $45 = (($33) + -1)|0;
     $46 = $47&255;
     $48 = (($p$0) + ($$sum$pre$phiZZ2D)|0);
     HEAP8[$32>>0] = $46;
     $sext$mask = $47 & 255;
     $49 = ($sext$mask|0)!=(10);
     $50 = ($45|0)!=(0);
     $or$cond3 = $50 & $49;
     if ($or$cond3) {
      $$05 = $45;$p$0 = $48;
     } else {
      $p$1 = $48;
      label = 18;
      break L11;
     }
    }
    $41 = ($$lcssa14|0)==($s|0);
    if ($41) {
     $$048 = 0;
    } else {
     $42 = HEAP32[$f>>2]|0;
     $43 = $42 & 16;
     $44 = ($43|0)==(0);
     if ($44) {
      $$048 = 0;
     } else {
      $p$1 = $$lcssa14;
      label = 18;
     }
    }
   }
  } while(0);
  if ((label|0) == 18) {
   $51 = ($s|0)==(0|0);
   if ($51) {
    $$048 = 0;
   } else {
    HEAP8[$p$1>>0] = 0;
    $$048 = $s;
   }
  }
  $52 = ($13|0)==(0);
  if ($52) {
   $$0 = $$048;
  } else {
   ___unlockfile($f);
   $$0 = $$048;
  }
 }
 return ($$0|0);
}
function _fopen($filename,$mode) {
 $filename = $filename|0;
 $mode = $mode|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $memchr = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $0 = HEAP8[$mode>>0]|0;
 $1 = $0 << 24 >> 24;
 $memchr = (_memchr(18104,$1,4)|0);
 $2 = ($memchr|0)==(0|0);
 if ($2) {
  $3 = (___errno_location()|0);
  HEAP32[$3>>2] = 22;
  $$0 = 0;
 } else {
  $4 = (___fmodeflags($mode)|0);
  $5 = $4 | 32768;
  HEAP32[$vararg_buffer>>2] = $filename;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $5;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = 438;
  $6 = (___syscall5(5,($vararg_buffer|0))|0);
  $7 = (___syscall_ret($6)|0);
  $8 = ($7|0)<(0);
  if ($8) {
   $$0 = 0;
  } else {
   $9 = (___fdopen($7,$mode)|0);
   $10 = ($9|0)==(0|0);
   if ($10) {
    HEAP32[$vararg_buffer3>>2] = $7;
    (___syscall6(6,($vararg_buffer3|0))|0);
    $$0 = 0;
   } else {
    $$0 = $9;
   }
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _fprintf($f,$fmt,$varargs) {
 $f = $f|0;
 $fmt = $fmt|0;
 $varargs = $varargs|0;
 var $0 = 0, $ap = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ap = sp;
 HEAP32[$ap>>2] = $varargs;
 $0 = (_vfprintf($f,$fmt,$ap)|0);
 STACKTOP = sp;return ($0|0);
}
function _fputc($c,$f) {
 $c = $c|0;
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 76|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)<(0);
 if ($2) {
  label = 3;
 } else {
  $3 = (___lockfile($f)|0);
  $4 = ($3|0)==(0);
  if ($4) {
   label = 3;
  } else {
   $18 = ((($f)) + 75|0);
   $19 = HEAP8[$18>>0]|0;
   $20 = $19 << 24 >> 24;
   $21 = ($20|0)==($c|0);
   if ($21) {
    label = 10;
   } else {
    $22 = ((($f)) + 20|0);
    $23 = HEAP32[$22>>2]|0;
    $24 = ((($f)) + 16|0);
    $25 = HEAP32[$24>>2]|0;
    $26 = ($23>>>0)<($25>>>0);
    if ($26) {
     $27 = $c&255;
     $28 = ((($23)) + 1|0);
     HEAP32[$22>>2] = $28;
     HEAP8[$23>>0] = $27;
     $29 = $c & 255;
     $31 = $29;
    } else {
     label = 10;
    }
   }
   if ((label|0) == 10) {
    $30 = (___overflow($f,$c)|0);
    $31 = $30;
   }
   ___unlockfile($f);
   $$0 = $31;
  }
 }
 do {
  if ((label|0) == 3) {
   $5 = ((($f)) + 75|0);
   $6 = HEAP8[$5>>0]|0;
   $7 = $6 << 24 >> 24;
   $8 = ($7|0)==($c|0);
   if (!($8)) {
    $9 = ((($f)) + 20|0);
    $10 = HEAP32[$9>>2]|0;
    $11 = ((($f)) + 16|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = ($10>>>0)<($12>>>0);
    if ($13) {
     $14 = $c&255;
     $15 = ((($10)) + 1|0);
     HEAP32[$9>>2] = $15;
     HEAP8[$10>>0] = $14;
     $16 = $c & 255;
     $$0 = $16;
     break;
    }
   }
   $17 = (___overflow($f,$c)|0);
   $$0 = $17;
  }
 } while(0);
 return ($$0|0);
}
function _fread($destv,$size,$nmemb,$f) {
 $destv = $destv|0;
 $size = $size|0;
 $nmemb = $nmemb|0;
 $f = $f|0;
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $dest$0$ph = 0, $dest$02 = 0, $l$0$ph = 0, $l$03 = 0, $l$03$lcssa = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = Math_imul($nmemb, $size)|0;
 $1 = ((($f)) + 76|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)>(-1);
 if ($3) {
  $4 = (___lockfile($f)|0);
  $32 = $4;
 } else {
  $32 = 0;
 }
 $5 = ((($f)) + 74|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = $6 << 24 >> 24;
 $8 = (($7) + 255)|0;
 $9 = $8 | $7;
 $10 = $9&255;
 HEAP8[$5>>0] = $10;
 $11 = ((($f)) + 8|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ((($f)) + 4|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $12;
 $16 = $14;
 $17 = (($15) - ($16))|0;
 $18 = ($17|0)>(0);
 if ($18) {
  $19 = ($17>>>0)<($0>>>0);
  $$ = $19 ? $17 : $0;
  _memcpy(($destv|0),($14|0),($$|0))|0;
  $20 = (($14) + ($$)|0);
  HEAP32[$13>>2] = $20;
  $21 = (($destv) + ($$)|0);
  $22 = (($0) - ($$))|0;
  $dest$0$ph = $21;$l$0$ph = $22;
 } else {
  $dest$0$ph = $destv;$l$0$ph = $0;
 }
 $23 = ($l$0$ph|0)==(0);
 L7: do {
  if ($23) {
   label = 13;
  } else {
   $24 = ((($f)) + 32|0);
   $dest$02 = $dest$0$ph;$l$03 = $l$0$ph;
   while(1) {
    $25 = (___toread($f)|0);
    $26 = ($25|0)==(0);
    if (!($26)) {
     $l$03$lcssa = $l$03;
     break;
    }
    $27 = HEAP32[$24>>2]|0;
    $28 = (FUNCTION_TABLE_iiii[$27 & 255]($f,$dest$02,$l$03)|0);
    $29 = (($28) + 1)|0;
    $30 = ($29>>>0)<(2);
    if ($30) {
     $l$03$lcssa = $l$03;
     break;
    }
    $35 = (($l$03) - ($28))|0;
    $36 = (($dest$02) + ($28)|0);
    $37 = ($l$03|0)==($28|0);
    if ($37) {
     label = 13;
     break L7;
    } else {
     $dest$02 = $36;$l$03 = $35;
    }
   }
   $31 = ($32|0)==(0);
   if (!($31)) {
    ___unlockfile($f);
   }
   $33 = (($0) - ($l$03$lcssa))|0;
   $34 = (($33>>>0) / ($size>>>0))&-1;
   $$0 = $34;
  }
 } while(0);
 if ((label|0) == 13) {
  $38 = ($32|0)==(0);
  if ($38) {
   $$0 = $nmemb;
  } else {
   ___unlockfile($f);
   $$0 = $nmemb;
  }
 }
 return ($$0|0);
}
function _freopen($filename,$mode,$f) {
 $filename = $filename|0;
 $mode = $mode|0;
 $f = $f|0;
 var $$0 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $0 = (___fmodeflags($mode)|0);
 $1 = ((($f)) + 76|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)>(-1);
 if ($3) {
  $4 = (___lockfile($f)|0);
  $41 = $4;
 } else {
  $41 = 0;
 }
 (_fflush($f)|0);
 $5 = ($filename|0)==(0|0);
 do {
  if ($5) {
   $6 = $0 & 524288;
   $7 = ($6|0)==(0);
   $$pre = ((($f)) + 60|0);
   if (!($7)) {
    $8 = HEAP32[$$pre>>2]|0;
    HEAP32[$vararg_buffer>>2] = $8;
    $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
    HEAP32[$vararg_ptr1>>2] = 2;
    $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
    HEAP32[$vararg_ptr2>>2] = 1;
    (___syscall221(221,($vararg_buffer|0))|0);
   }
   $9 = $0 & -524481;
   $10 = HEAP32[$$pre>>2]|0;
   HEAP32[$vararg_buffer3>>2] = $10;
   $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
   HEAP32[$vararg_ptr6>>2] = 4;
   $vararg_ptr7 = ((($vararg_buffer3)) + 8|0);
   HEAP32[$vararg_ptr7>>2] = $9;
   $11 = (___syscall221(221,($vararg_buffer3|0))|0);
   $12 = (___syscall_ret($11)|0);
   $13 = ($12|0)<(0);
   if ($13) {
    label = 15;
   } else {
    label = 12;
   }
  } else {
   $14 = (_fopen($filename,$mode)|0);
   $15 = ($14|0)==(0|0);
   if ($15) {
    label = 15;
   } else {
    $16 = ((($14)) + 60|0);
    $17 = HEAP32[$16>>2]|0;
    $18 = ((($f)) + 60|0);
    $19 = HEAP32[$18>>2]|0;
    $20 = ($17|0)==($19|0);
    if ($20) {
     HEAP32[$16>>2] = -1;
    } else {
     $21 = $0 & 524288;
     $22 = (___dup3($17,$19,$21)|0);
     $23 = ($22|0)<(0);
     if ($23) {
      (_fclose($14)|0);
      label = 15;
      break;
     }
    }
    $24 = HEAP32[$f>>2]|0;
    $25 = $24 & 1;
    $26 = HEAP32[$14>>2]|0;
    $27 = $25 | $26;
    HEAP32[$f>>2] = $27;
    $28 = ((($14)) + 32|0);
    $29 = HEAP32[$28>>2]|0;
    $30 = ((($f)) + 32|0);
    HEAP32[$30>>2] = $29;
    $31 = ((($14)) + 36|0);
    $32 = HEAP32[$31>>2]|0;
    $33 = ((($f)) + 36|0);
    HEAP32[$33>>2] = $32;
    $34 = ((($14)) + 40|0);
    $35 = HEAP32[$34>>2]|0;
    $36 = ((($f)) + 40|0);
    HEAP32[$36>>2] = $35;
    $37 = ((($14)) + 12|0);
    $38 = HEAP32[$37>>2]|0;
    $39 = ((($f)) + 12|0);
    HEAP32[$39>>2] = $38;
    (_fclose($14)|0);
    label = 12;
   }
  }
 } while(0);
 if ((label|0) == 12) {
  $40 = ($41|0)==(0);
  if ($40) {
   $$0 = $f;
  } else {
   ___unlockfile($f);
   $$0 = $f;
  }
 }
 else if ((label|0) == 15) {
  (_fclose($f)|0);
  $$0 = 0;
 }
 STACKTOP = sp;return ($$0|0);
}
function _fscanf($f,$fmt,$varargs) {
 $f = $f|0;
 $fmt = $fmt|0;
 $varargs = $varargs|0;
 var $0 = 0, $ap = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ap = sp;
 HEAP32[$ap>>2] = $varargs;
 $0 = (_vfscanf($f,$fmt,$ap)|0);
 STACKTOP = sp;return ($0|0);
}
function ___fseeko_unlocked($f,$off,$whence) {
 $f = $f|0;
 $off = $off|0;
 $whence = $whence|0;
 var $$0 = 0, $$01 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($whence|0)==(1);
 if ($0) {
  $1 = ((($f)) + 8|0);
  $2 = HEAP32[$1>>2]|0;
  $3 = ((($f)) + 4|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = $2;
  $6 = $4;
  $7 = (($off) - ($5))|0;
  $8 = (($7) + ($6))|0;
  $$01 = $8;
 } else {
  $$01 = $off;
 }
 $9 = ((($f)) + 20|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($f)) + 28|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($10>>>0)>($12>>>0);
 if ($13) {
  $14 = ((($f)) + 36|0);
  $15 = HEAP32[$14>>2]|0;
  (FUNCTION_TABLE_iiii[$15 & 255]($f,0,0)|0);
  $16 = HEAP32[$9>>2]|0;
  $17 = ($16|0)==(0|0);
  if ($17) {
   $$0 = -1;
  } else {
   label = 5;
  }
 } else {
  label = 5;
 }
 if ((label|0) == 5) {
  $18 = ((($f)) + 16|0);
  HEAP32[$18>>2] = 0;
  HEAP32[$11>>2] = 0;
  HEAP32[$9>>2] = 0;
  $19 = ((($f)) + 40|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = (FUNCTION_TABLE_iiii[$20 & 255]($f,$$01,$whence)|0);
  $22 = ($21|0)<(0);
  if ($22) {
   $$0 = -1;
  } else {
   $23 = ((($f)) + 8|0);
   HEAP32[$23>>2] = 0;
   $24 = ((($f)) + 4|0);
   HEAP32[$24>>2] = 0;
   $25 = HEAP32[$f>>2]|0;
   $26 = $25 & -17;
   HEAP32[$f>>2] = $26;
   $$0 = 0;
  }
 }
 return ($$0|0);
}
function ___fseeko($f,$off,$whence) {
 $f = $f|0;
 $off = $off|0;
 $whence = $whence|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 76|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)>(-1);
 if ($2) {
  $4 = (___lockfile($f)|0);
  $phitmp = ($4|0)==(0);
  $5 = (___fseeko_unlocked($f,$off,$whence)|0);
  if ($phitmp) {
   $6 = $5;
  } else {
   ___unlockfile($f);
   $6 = $5;
  }
 } else {
  $3 = (___fseeko_unlocked($f,$off,$whence)|0);
  $6 = $3;
 }
 return ($6|0);
}
function _fseek($f,$off,$whence) {
 $f = $f|0;
 $off = $off|0;
 $whence = $whence|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___fseeko($f,$off,$whence)|0);
 return ($0|0);
}
function ___ftello_unlocked($f) {
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 40|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$f>>2]|0;
 $3 = $2 & 128;
 $4 = ($3|0)==(0);
 if ($4) {
  $10 = 1;
 } else {
  $5 = ((($f)) + 20|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ((($f)) + 28|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($6>>>0)>($8>>>0);
  $phitmp = $9 ? 2 : 1;
  $10 = $phitmp;
 }
 $11 = (FUNCTION_TABLE_iiii[$1 & 255]($f,0,$10)|0);
 $12 = ($11|0)<(0);
 if ($12) {
  $$0 = $11;
 } else {
  $13 = ((($f)) + 8|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ((($f)) + 4|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = $14;
  $18 = $16;
  $19 = ((($f)) + 20|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ((($f)) + 28|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = $20;
  $24 = $22;
  $25 = (($11) - ($17))|0;
  $26 = (($25) + ($18))|0;
  $27 = (($26) + ($23))|0;
  $28 = (($27) - ($24))|0;
  $$0 = $28;
 }
 return ($$0|0);
}
function ___ftello($f) {
 $f = $f|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 76|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)>(-1);
 if ($2) {
  $4 = (___lockfile($f)|0);
  $phitmp = ($4|0)==(0);
  $5 = (___ftello_unlocked($f)|0);
  if ($phitmp) {
   $6 = $5;
  } else {
   $6 = $5;
  }
 } else {
  $3 = (___ftello_unlocked($f)|0);
  $6 = $3;
 }
 return ($6|0);
}
function _ftell($f) {
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___ftello($f)|0);
 return ($0|0);
}
function ___fwritex($s,$l,$f) {
 $s = $s|0;
 $l = $l|0;
 $f = $f|0;
 var $$0 = 0, $$01 = 0, $$02 = 0, $$pre = 0, $$pre6 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$0 = 0, $i$0$lcssa10 = 0;
 var $i$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $3 = (___towrite($f)|0);
  $4 = ($3|0)==(0);
  if ($4) {
   $$pre = HEAP32[$0>>2]|0;
   $8 = $$pre;
   label = 4;
  } else {
   $$0 = 0;
  }
 } else {
  $8 = $1;
  label = 4;
 }
 L4: do {
  if ((label|0) == 4) {
   $5 = ((($f)) + 20|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = $8;
   $9 = $6;
   $10 = (($7) - ($9))|0;
   $11 = ($10>>>0)<($l>>>0);
   if ($11) {
    $12 = ((($f)) + 36|0);
    $13 = HEAP32[$12>>2]|0;
    $14 = (FUNCTION_TABLE_iiii[$13 & 255]($f,$s,$l)|0);
    $$0 = $14;
    break;
   }
   $15 = ((($f)) + 75|0);
   $16 = HEAP8[$15>>0]|0;
   $17 = ($16<<24>>24)>(-1);
   L9: do {
    if ($17) {
     $i$0 = $l;
     while(1) {
      $18 = ($i$0|0)==(0);
      if ($18) {
       $$01 = $l;$$02 = $s;$29 = $6;$i$1 = 0;
       break L9;
      }
      $19 = (($i$0) + -1)|0;
      $20 = (($s) + ($19)|0);
      $21 = HEAP8[$20>>0]|0;
      $22 = ($21<<24>>24)==(10);
      if ($22) {
       $i$0$lcssa10 = $i$0;
       break;
      } else {
       $i$0 = $19;
      }
     }
     $23 = ((($f)) + 36|0);
     $24 = HEAP32[$23>>2]|0;
     $25 = (FUNCTION_TABLE_iiii[$24 & 255]($f,$s,$i$0$lcssa10)|0);
     $26 = ($25>>>0)<($i$0$lcssa10>>>0);
     if ($26) {
      $$0 = $i$0$lcssa10;
      break L4;
     }
     $27 = (($s) + ($i$0$lcssa10)|0);
     $28 = (($l) - ($i$0$lcssa10))|0;
     $$pre6 = HEAP32[$5>>2]|0;
     $$01 = $28;$$02 = $27;$29 = $$pre6;$i$1 = $i$0$lcssa10;
    } else {
     $$01 = $l;$$02 = $s;$29 = $6;$i$1 = 0;
    }
   } while(0);
   _memcpy(($29|0),($$02|0),($$01|0))|0;
   $30 = HEAP32[$5>>2]|0;
   $31 = (($30) + ($$01)|0);
   HEAP32[$5>>2] = $31;
   $32 = (($i$1) + ($$01))|0;
   $$0 = $32;
  }
 } while(0);
 return ($$0|0);
}
function _fwrite($src,$size,$nmemb,$f) {
 $src = $src|0;
 $size = $size|0;
 $nmemb = $nmemb|0;
 $f = $f|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = Math_imul($nmemb, $size)|0;
 $1 = ((($f)) + 76|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)>(-1);
 if ($3) {
  $5 = (___lockfile($f)|0);
  $phitmp = ($5|0)==(0);
  $6 = (___fwritex($src,$0,$f)|0);
  if ($phitmp) {
   $8 = $6;
  } else {
   ___unlockfile($f);
   $8 = $6;
  }
 } else {
  $4 = (___fwritex($src,$0,$f)|0);
  $8 = $4;
 }
 $7 = ($8|0)==($0|0);
 if ($7) {
  $10 = $nmemb;
 } else {
  $9 = (($8>>>0) / ($size>>>0))&-1;
  $10 = $9;
 }
 return ($10|0);
}
function _getc($f) {
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 76|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)<(0);
 if ($2) {
  label = 3;
 } else {
  $3 = (___lockfile($f)|0);
  $4 = ($3|0)==(0);
  if ($4) {
   label = 3;
  } else {
   $14 = ((($f)) + 4|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = ((($f)) + 8|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = ($15>>>0)<($17>>>0);
   if ($18) {
    $19 = ((($15)) + 1|0);
    HEAP32[$14>>2] = $19;
    $20 = HEAP8[$15>>0]|0;
    $21 = $20&255;
    $23 = $21;
   } else {
    $22 = (___uflow($f)|0);
    $23 = $22;
   }
   $$0 = $23;
  }
 }
 do {
  if ((label|0) == 3) {
   $5 = ((($f)) + 4|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = ((($f)) + 8|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = ($6>>>0)<($8>>>0);
   if ($9) {
    $10 = ((($6)) + 1|0);
    HEAP32[$5>>2] = $10;
    $11 = HEAP8[$6>>0]|0;
    $12 = $11&255;
    $$0 = $12;
    break;
   } else {
    $13 = (___uflow($f)|0);
    $$0 = $13;
    break;
   }
  }
 } while(0);
 return ($$0|0);
}
function _printf($fmt,$varargs) {
 $fmt = $fmt|0;
 $varargs = $varargs|0;
 var $0 = 0, $1 = 0, $ap = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ap = sp;
 HEAP32[$ap>>2] = $varargs;
 $0 = HEAP32[2148>>2]|0;
 $1 = (_vfprintf($0,$fmt,$ap)|0);
 STACKTOP = sp;return ($1|0);
}
function _remove($path) {
 $path = $path|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 HEAP32[$vararg_buffer>>2] = $path;
 $0 = (___syscall10(10,($vararg_buffer|0))|0);
 $1 = (___syscall_ret($0)|0);
 $2 = ($1|0)==(0);
 if ($2) {
  $8 = 0;
 } else {
  $3 = (___errno_location()|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($4|0)==(21);
  if ($5) {
   HEAP32[$vararg_buffer1>>2] = $path;
   $6 = (___syscall40(40,($vararg_buffer1|0))|0);
   $7 = (___syscall_ret($6)|0);
   $8 = $7;
  } else {
   $8 = $1;
  }
 }
 STACKTOP = sp;return ($8|0);
}
function _rename($old,$new) {
 $old = $old|0;
 $new = $new|0;
 var $0 = 0, $1 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 HEAP32[$vararg_buffer>>2] = $old;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $new;
 $0 = (___syscall38(38,($vararg_buffer|0))|0);
 $1 = (___syscall_ret($0)|0);
 STACKTOP = sp;return ($1|0);
}
function _setvbuf($f,$buf,$type,$size) {
 $f = $f|0;
 $buf = $buf|0;
 $type = $type|0;
 $size = $size|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 75|0);
 HEAP8[$0>>0] = -1;
 switch ($type|0) {
 case 2:  {
  $1 = ((($f)) + 48|0);
  HEAP32[$1>>2] = 0;
  break;
 }
 case 1:  {
  HEAP8[$0>>0] = 10;
  break;
 }
 default: {
 }
 }
 $2 = HEAP32[$f>>2]|0;
 $3 = $2 | 64;
 HEAP32[$f>>2] = $3;
 return 0;
}
function _snprintf($s,$n,$fmt,$varargs) {
 $s = $s|0;
 $n = $n|0;
 $fmt = $fmt|0;
 $varargs = $varargs|0;
 var $0 = 0, $ap = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ap = sp;
 HEAP32[$ap>>2] = $varargs;
 $0 = (_vsnprintf($s,$n,$fmt,$ap)|0);
 STACKTOP = sp;return ($0|0);
}
function _sprintf($s,$fmt,$varargs) {
 $s = $s|0;
 $fmt = $fmt|0;
 $varargs = $varargs|0;
 var $0 = 0, $ap = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ap = sp;
 HEAP32[$ap>>2] = $varargs;
 $0 = (_vsprintf($s,$fmt,$ap)|0);
 STACKTOP = sp;return ($0|0);
}
function _tmpfile() {
 var $$0 = 0, $$lcssa = 0, $$lcssa7 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $buf = 0, $try$02 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $buf = sp + 20|0;
 $try$02 = 0;
 while(1) {
  $2 = (_tmpnam($buf)|0);
  $3 = ($2|0)==(0|0);
  if ($3) {
   $$0 = 0;
   break;
  }
  HEAP32[$vararg_buffer>>2] = $2;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = 32962;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = 384;
  $4 = (___syscall5(5,($vararg_buffer|0))|0);
  $5 = (___syscall_ret($4)|0);
  $6 = ($5|0)>(-1);
  $1 = (($try$02) + 1)|0;
  if ($6) {
   $$lcssa = $5;$$lcssa7 = $2;
   label = 5;
   break;
  }
  $0 = ($1|0)<(100);
  if ($0) {
   $try$02 = $1;
  } else {
   $$0 = 0;
   break;
  }
 }
 if ((label|0) == 5) {
  $7 = (___fdopen($$lcssa,18108)|0);
  HEAP32[$vararg_buffer3>>2] = $$lcssa7;
  (___syscall10(10,($vararg_buffer3|0))|0);
  $$0 = $7;
 }
 STACKTOP = sp;return ($$0|0);
}
function _tmpnam($s) {
 $s = $s|0;
 var $$0 = 0, $$s = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $try$0 = 0, $try$1 = 0, $ts = 0, $vararg_buffer = 0, $vararg_buffer11 = 0, $vararg_buffer2 = 0, $vararg_buffer7 = 0, $vararg_ptr1 = 0, $vararg_ptr10 = 0, $vararg_ptr14 = 0, $vararg_ptr5 = 0, $vararg_ptr6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer11 = sp + 32|0;
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = sp + 48|0;
 $ts = sp + 40|0;
 $1 = ($s|0)==(0|0);
 $$s = $1 ? 18111 : $s;
 HEAP32[$0>>2] = $$s;
 HEAP32[$vararg_buffer>>2] = 18131;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = 7;
 $2 = (___syscall33(33,($vararg_buffer|0))|0);
 $3 = ($2|0)==(0);
 if ($3) {
  $4 = ((($ts)) + 4|0);
  $5 = $0;
  $try$0 = 0;
  while(1) {
   HEAP32[$vararg_buffer2>>2] = 0;
   $vararg_ptr5 = ((($vararg_buffer2)) + 4|0);
   HEAP32[$vararg_ptr5>>2] = $ts;
   $vararg_ptr6 = ((($vararg_buffer2)) + 8|0);
   HEAP32[$vararg_ptr6>>2] = 0;
   (___syscall265(265,($vararg_buffer2|0))|0);
   $6 = HEAP32[$4>>2]|0;
   $7 = $6 ^ $5;
   $8 = HEAP32[$0>>2]|0;
   $9 = $8;
   $10 = $7 ^ $9;
   $11 = HEAP32[2252>>2]|0;HEAP32[2252>>2] = (($11+1)|0);
   HEAP32[$vararg_buffer7>>2] = $11;
   $vararg_ptr10 = ((($vararg_buffer7)) + 4|0);
   HEAP32[$vararg_ptr10>>2] = $10;
   (_snprintf($8,20,18136,$vararg_buffer7)|0);
   $12 = HEAP32[$0>>2]|0;
   HEAP32[$vararg_buffer11>>2] = $12;
   $vararg_ptr14 = ((($vararg_buffer11)) + 4|0);
   HEAP32[$vararg_ptr14>>2] = 0;
   $13 = (___syscall33(33,($vararg_buffer11|0))|0);
   $14 = ($13|0)==(0);
   if (!($14)) {
    $try$1 = $try$0;
    break;
   }
   $15 = (($try$0) + 1)|0;
   $16 = ($try$0|0)<(100);
   if ($16) {
    $try$0 = $15;
   } else {
    $try$1 = $15;
    break;
   }
  }
  $17 = ($try$1|0)>(99);
  $18 = HEAP32[$0>>2]|0;
  $19 = $17 ? 0 : $18;
  $$0 = $19;
 } else {
  $$0 = 0;
 }
 STACKTOP = sp;return ($$0|0);
}
function _ungetc($c,$f) {
 $c = $c|0;
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($c|0)==(-1);
 do {
  if ($0) {
   $$0 = -1;
  } else {
   $1 = ((($f)) + 76|0);
   $2 = HEAP32[$1>>2]|0;
   $3 = ($2|0)>(-1);
   if ($3) {
    $4 = (___lockfile($f)|0);
    $17 = $4;
   } else {
    $17 = 0;
   }
   $5 = ((($f)) + 8|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = ($6|0)==(0|0);
   if ($7) {
    $8 = (___toread($f)|0);
    $9 = ($8|0)==(0);
    if ($9) {
     label = 6;
    }
   } else {
    label = 6;
   }
   if ((label|0) == 6) {
    $10 = ((($f)) + 4|0);
    $11 = HEAP32[$10>>2]|0;
    $12 = ((($f)) + 44|0);
    $13 = HEAP32[$12>>2]|0;
    $14 = ((($13)) + -8|0);
    $15 = ($11>>>0)>($14>>>0);
    if ($15) {
     $18 = $c&255;
     $19 = ((($11)) + -1|0);
     HEAP32[$10>>2] = $19;
     HEAP8[$19>>0] = $18;
     $20 = HEAP32[$f>>2]|0;
     $21 = $20 & -17;
     HEAP32[$f>>2] = $21;
     $22 = ($17|0)==(0);
     if ($22) {
      $$0 = $c;
      break;
     }
     ___unlockfile($f);
     $$0 = $c;
     break;
    }
   }
   $16 = ($17|0)==(0);
   if ($16) {
    $$0 = -1;
   } else {
    ___unlockfile($f);
    $$0 = -1;
   }
  }
 } while(0);
 return ($$0|0);
}
function _vfprintf($f,$fmt,$ap) {
 $f = $f|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ap2 = 0, $internal_buf = 0, $nl_arg = 0, $nl_type = 0;
 var $ret$1 = 0, $ret$1$ = 0, $vacopy_currentptr = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ap2 = sp + 120|0;
 $nl_type = sp + 80|0;
 $nl_arg = sp;
 $internal_buf = sp + 136|0;
 dest=$nl_type; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $vacopy_currentptr = HEAP32[$ap>>2]|0;
 HEAP32[$ap2>>2] = $vacopy_currentptr;
 $0 = (_printf_core(0,$fmt,$ap2,$nl_arg,$nl_type)|0);
 $1 = ($0|0)<(0);
 if ($1) {
  $$0 = -1;
 } else {
  $2 = ((($f)) + 76|0);
  $3 = HEAP32[$2>>2]|0;
  $4 = ($3|0)>(-1);
  if ($4) {
   $5 = (___lockfile($f)|0);
   $33 = $5;
  } else {
   $33 = 0;
  }
  $6 = HEAP32[$f>>2]|0;
  $7 = $6 & 32;
  $8 = ((($f)) + 74|0);
  $9 = HEAP8[$8>>0]|0;
  $10 = ($9<<24>>24)<(1);
  if ($10) {
   $11 = $6 & -33;
   HEAP32[$f>>2] = $11;
  }
  $12 = ((($f)) + 48|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($13|0)==(0);
  if ($14) {
   $16 = ((($f)) + 44|0);
   $17 = HEAP32[$16>>2]|0;
   HEAP32[$16>>2] = $internal_buf;
   $18 = ((($f)) + 28|0);
   HEAP32[$18>>2] = $internal_buf;
   $19 = ((($f)) + 20|0);
   HEAP32[$19>>2] = $internal_buf;
   HEAP32[$12>>2] = 80;
   $20 = ((($internal_buf)) + 80|0);
   $21 = ((($f)) + 16|0);
   HEAP32[$21>>2] = $20;
   $22 = (_printf_core($f,$fmt,$ap2,$nl_arg,$nl_type)|0);
   $23 = ($17|0)==(0|0);
   if ($23) {
    $ret$1 = $22;
   } else {
    $24 = ((($f)) + 36|0);
    $25 = HEAP32[$24>>2]|0;
    (FUNCTION_TABLE_iiii[$25 & 255]($f,0,0)|0);
    $26 = HEAP32[$19>>2]|0;
    $27 = ($26|0)==(0|0);
    $$ = $27 ? -1 : $22;
    HEAP32[$16>>2] = $17;
    HEAP32[$12>>2] = 0;
    HEAP32[$21>>2] = 0;
    HEAP32[$18>>2] = 0;
    HEAP32[$19>>2] = 0;
    $ret$1 = $$;
   }
  } else {
   $15 = (_printf_core($f,$fmt,$ap2,$nl_arg,$nl_type)|0);
   $ret$1 = $15;
  }
  $28 = HEAP32[$f>>2]|0;
  $29 = $28 & 32;
  $30 = ($29|0)==(0);
  $ret$1$ = $30 ? $ret$1 : -1;
  $31 = $28 | $7;
  HEAP32[$f>>2] = $31;
  $32 = ($33|0)==(0);
  if (!($32)) {
   ___unlockfile($f);
  }
  $$0 = $ret$1$;
 }
 STACKTOP = sp;return ($$0|0);
}
function _vfscanf($f,$fmt,$ap) {
 $f = $f|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $$ = 0, $$10 = 0, $$11 = 0, $$12 = 0, $$9 = 0, $$lcssa = 0, $$lcssa38 = 0, $$lcssa384 = 0, $$not = 0, $$old4 = 0, $$pre = 0, $$pre$phi182Z2D = 0, $$pre168 = 0, $$pre170 = 0, $$pre172 = 0, $$pre174 = 0, $$pre176 = 0, $$pre178 = 0, $$pre180 = 0, $$pre181 = 0;
 var $$size$0 = 0, $$width$0 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0;
 var $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0;
 var $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0;
 var $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0;
 var $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0;
 var $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0;
 var $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0;
 var $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0;
 var $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0.0, $311 = 0;
 var $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0.0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0;
 var $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $alloc$0 = 0, $alloc$0400 = 0, $alloc$1 = 0;
 var $alloc$2 = 0, $ap2$i = 0, $arglist_current = 0, $arglist_current2 = 0, $arglist_next = 0, $arglist_next3 = 0, $base$0 = 0, $c$0100 = 0, $dest$0 = 0, $expanded = 0, $expanded10 = 0, $expanded11 = 0, $expanded13 = 0, $expanded14 = 0, $expanded15 = 0, $expanded4 = 0, $expanded6 = 0, $expanded7 = 0, $expanded8 = 0, $factor = 0;
 var $factor16 = 0, $i$0$i = 0, $i$0$ph = 0, $i$0$ph$phi = 0, $i$0$ph20 = 0, $i$0$ph20$lcssa = 0, $i$1 = 0, $i$2 = 0, $i$2$ph = 0, $i$2$ph$phi = 0, $i$3 = 0, $i$4 = 0, $invert$0 = 0, $isdigit = 0, $isdigit7 = 0, $isdigit795 = 0, $isdigittmp = 0, $isdigittmp6 = 0, $isdigittmp694 = 0, $k$0$ph = 0;
 var $k$1$ph = 0, $matches$0$ = 0, $matches$0104 = 0, $matches$0104$lcssa = 0, $matches$0104376 = 0, $matches$1 = 0, $matches$2 = 0, $matches$3 = 0, $not$ = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond8 = 0, $p$0109 = 0, $p$1 = 0, $p$1$lcssa = 0, $p$10 = 0, $p$11 = 0, $p$2 = 0, $p$3$lcssa = 0;
 var $p$396 = 0, $p$4 = 0, $p$5 = 0, $p$6 = 0, $p$7 = 0, $p$7$ph = 0, $p$8 = 0, $p$9 = 0, $pos$0108 = 0, $pos$1 = 0, $pos$2 = 0, $s$0107 = 0, $s$0107$lcssa = 0, $s$1 = 0, $s$2$ph = 0, $s$3 = 0, $s$4 = 0, $s$5 = 0, $s$6 = 0, $s$7 = 0;
 var $s$8 = 0, $scanset = 0, $size$0 = 0, $st = 0, $vacopy_currentptr = 0, $wc = 0, $wcs$0103 = 0, $wcs$0103$lcssa = 0, $wcs$1 = 0, $wcs$2 = 0, $wcs$3$ph = 0, $wcs$3$ph$lcssa = 0, $wcs$4 = 0, $wcs$5 = 0, $wcs$6 = 0, $wcs$7 = 0, $wcs$8 = 0, $wcs$9 = 0, $width$0$lcssa = 0, $width$097 = 0;
 var $width$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ap2$i = sp + 16|0;
 $st = sp + 8|0;
 $scanset = sp + 33|0;
 $wc = sp;
 $0 = sp + 32|0;
 $1 = ((($f)) + 76|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)>(-1);
 if ($3) {
  $4 = (___lockfile($f)|0);
  $334 = $4;
 } else {
  $334 = 0;
 }
 $5 = HEAP8[$fmt>>0]|0;
 $6 = ($5<<24>>24)==(0);
 L4: do {
  if ($6) {
   $matches$3 = 0;
  } else {
   $7 = ((($f)) + 4|0);
   $8 = ((($f)) + 100|0);
   $9 = ((($f)) + 108|0);
   $10 = ((($f)) + 8|0);
   $11 = ((($scanset)) + 10|0);
   $12 = ((($scanset)) + 33|0);
   $13 = ((($st)) + 4|0);
   $14 = ((($scanset)) + 46|0);
   $15 = ((($scanset)) + 94|0);
   $17 = $5;$matches$0104 = 0;$p$0109 = $fmt;$pos$0108 = 0;$s$0107 = 0;$wcs$0103 = 0;
   L6: while(1) {
    $16 = $17&255;
    $18 = (_isspace($16)|0);
    $19 = ($18|0)==(0);
    L8: do {
     if ($19) {
      $46 = HEAP8[$p$0109>>0]|0;
      $47 = ($46<<24>>24)==(37);
      L10: do {
       if ($47) {
        $48 = ((($p$0109)) + 1|0);
        $49 = HEAP8[$48>>0]|0;
        L12: do {
         switch ($49<<24>>24) {
         case 37:  {
          break L10;
          break;
         }
         case 42:  {
          $70 = ((($p$0109)) + 2|0);
          $dest$0 = 0;$p$2 = $70;
          break;
         }
         default: {
          $71 = $49&255;
          $isdigittmp = (($71) + -48)|0;
          $isdigit = ($isdigittmp>>>0)<(10);
          if ($isdigit) {
           $72 = ((($p$0109)) + 2|0);
           $73 = HEAP8[$72>>0]|0;
           $74 = ($73<<24>>24)==(36);
           if ($74) {
            $vacopy_currentptr = HEAP32[$ap>>2]|0;
            HEAP32[$ap2$i>>2] = $vacopy_currentptr;
            $i$0$i = $isdigittmp;
            while(1) {
             $75 = ($i$0$i>>>0)>(1);
             $arglist_current = HEAP32[$ap2$i>>2]|0;
             $76 = $arglist_current;
             $77 = ((0) + 4|0);
             $expanded4 = $77;
             $expanded = (($expanded4) - 1)|0;
             $78 = (($76) + ($expanded))|0;
             $79 = ((0) + 4|0);
             $expanded8 = $79;
             $expanded7 = (($expanded8) - 1)|0;
             $expanded6 = $expanded7 ^ -1;
             $80 = $78 & $expanded6;
             $81 = $80;
             $82 = HEAP32[$81>>2]|0;
             $arglist_next = ((($81)) + 4|0);
             HEAP32[$ap2$i>>2] = $arglist_next;
             $83 = (($i$0$i) + -1)|0;
             if ($75) {
              $i$0$i = $83;
             } else {
              $$lcssa = $82;
              break;
             }
            }
            $84 = ((($p$0109)) + 3|0);
            $dest$0 = $$lcssa;$p$2 = $84;
            break L12;
           }
          }
          $arglist_current2 = HEAP32[$ap>>2]|0;
          $85 = $arglist_current2;
          $86 = ((0) + 4|0);
          $expanded11 = $86;
          $expanded10 = (($expanded11) - 1)|0;
          $87 = (($85) + ($expanded10))|0;
          $88 = ((0) + 4|0);
          $expanded15 = $88;
          $expanded14 = (($expanded15) - 1)|0;
          $expanded13 = $expanded14 ^ -1;
          $89 = $87 & $expanded13;
          $90 = $89;
          $91 = HEAP32[$90>>2]|0;
          $arglist_next3 = ((($90)) + 4|0);
          HEAP32[$ap>>2] = $arglist_next3;
          $dest$0 = $91;$p$2 = $48;
         }
         }
        } while(0);
        $92 = HEAP8[$p$2>>0]|0;
        $93 = $92&255;
        $isdigittmp694 = (($93) + -48)|0;
        $isdigit795 = ($isdigittmp694>>>0)<(10);
        if ($isdigit795) {
         $97 = $93;$p$396 = $p$2;$width$097 = 0;
         while(1) {
          $94 = ($width$097*10)|0;
          $95 = (($94) + -48)|0;
          $96 = (($95) + ($97))|0;
          $98 = ((($p$396)) + 1|0);
          $99 = HEAP8[$98>>0]|0;
          $100 = $99&255;
          $isdigittmp6 = (($100) + -48)|0;
          $isdigit7 = ($isdigittmp6>>>0)<(10);
          if ($isdigit7) {
           $97 = $100;$p$396 = $98;$width$097 = $96;
          } else {
           $$lcssa38 = $99;$p$3$lcssa = $98;$width$0$lcssa = $96;
           break;
          }
         }
        } else {
         $$lcssa38 = $92;$p$3$lcssa = $p$2;$width$0$lcssa = 0;
        }
        $101 = ($$lcssa38<<24>>24)==(109);
        if ($101) {
         $102 = ($dest$0|0)!=(0|0);
         $103 = $102&1;
         $104 = ((($p$3$lcssa)) + 1|0);
         $$pre168 = HEAP8[$104>>0]|0;
         $107 = $$pre168;$alloc$0 = $103;$p$4 = $104;$s$1 = 0;$wcs$1 = 0;
        } else {
         $107 = $$lcssa38;$alloc$0 = 0;$p$4 = $p$3$lcssa;$s$1 = $s$0107;$wcs$1 = $wcs$0103;
        }
        $105 = ((($p$4)) + 1|0);
        $106 = $107&255;
        switch ($106|0) {
        case 104:  {
         $108 = HEAP8[$105>>0]|0;
         $109 = ($108<<24>>24)==(104);
         $110 = ((($p$4)) + 2|0);
         $$9 = $109 ? $110 : $105;
         $$10 = $109 ? -2 : -1;
         $p$5 = $$9;$size$0 = $$10;
         break;
        }
        case 108:  {
         $111 = HEAP8[$105>>0]|0;
         $112 = ($111<<24>>24)==(108);
         $113 = ((($p$4)) + 2|0);
         $$11 = $112 ? $113 : $105;
         $$12 = $112 ? 3 : 1;
         $p$5 = $$11;$size$0 = $$12;
         break;
        }
        case 106:  {
         $p$5 = $105;$size$0 = 3;
         break;
        }
        case 116: case 122:  {
         $p$5 = $105;$size$0 = 1;
         break;
        }
        case 76:  {
         $p$5 = $105;$size$0 = 2;
         break;
        }
        case 110: case 112: case 67: case 83: case 91: case 99: case 115: case 88: case 71: case 70: case 69: case 65: case 103: case 102: case 101: case 97: case 120: case 117: case 111: case 105: case 100:  {
         $p$5 = $p$4;$size$0 = 0;
         break;
        }
        default: {
         $alloc$0400 = $alloc$0;$matches$0104376 = $matches$0104;$s$6 = $s$1;$wcs$7 = $wcs$1;
         label = 152;
         break L6;
        }
        }
        $114 = HEAP8[$p$5>>0]|0;
        $115 = $114&255;
        $116 = $115 & 47;
        $117 = ($116|0)==(3);
        $118 = $115 | 32;
        $$ = $117 ? $118 : $115;
        $$size$0 = $117 ? 1 : $size$0;
        switch ($$|0) {
        case 99:  {
         $119 = ($width$0$lcssa|0)<(1);
         $$width$0 = $119 ? 1 : $width$0$lcssa;
         $pos$1 = $pos$0108;$width$1 = $$width$0;
         break;
        }
        case 91:  {
         $pos$1 = $pos$0108;$width$1 = $width$0$lcssa;
         break;
        }
        case 110:  {
         $120 = ($pos$0108|0)<(0);
         $121 = $120 << 31 >> 31;
         $122 = ($dest$0|0)==(0|0);
         if ($122) {
          $matches$1 = $matches$0104;$p$11 = $p$5;$pos$2 = $pos$0108;$s$5 = $s$1;$wcs$6 = $wcs$1;
          break L8;
         }
         switch ($$size$0|0) {
         case -2:  {
          $123 = $pos$0108&255;
          HEAP8[$dest$0>>0] = $123;
          $matches$1 = $matches$0104;$p$11 = $p$5;$pos$2 = $pos$0108;$s$5 = $s$1;$wcs$6 = $wcs$1;
          break L8;
          break;
         }
         case -1:  {
          $124 = $pos$0108&65535;
          HEAP16[$dest$0>>1] = $124;
          $matches$1 = $matches$0104;$p$11 = $p$5;$pos$2 = $pos$0108;$s$5 = $s$1;$wcs$6 = $wcs$1;
          break L8;
          break;
         }
         case 0:  {
          HEAP32[$dest$0>>2] = $pos$0108;
          $matches$1 = $matches$0104;$p$11 = $p$5;$pos$2 = $pos$0108;$s$5 = $s$1;$wcs$6 = $wcs$1;
          break L8;
          break;
         }
         case 1:  {
          HEAP32[$dest$0>>2] = $pos$0108;
          $matches$1 = $matches$0104;$p$11 = $p$5;$pos$2 = $pos$0108;$s$5 = $s$1;$wcs$6 = $wcs$1;
          break L8;
          break;
         }
         case 3:  {
          $125 = $dest$0;
          $126 = $125;
          HEAP32[$126>>2] = $pos$0108;
          $127 = (($125) + 4)|0;
          $128 = $127;
          HEAP32[$128>>2] = $121;
          $matches$1 = $matches$0104;$p$11 = $p$5;$pos$2 = $pos$0108;$s$5 = $s$1;$wcs$6 = $wcs$1;
          break L8;
          break;
         }
         default: {
          $matches$1 = $matches$0104;$p$11 = $p$5;$pos$2 = $pos$0108;$s$5 = $s$1;$wcs$6 = $wcs$1;
          break L8;
         }
         }
         break;
        }
        default: {
         ___shlim($f,0);
         while(1) {
          $129 = HEAP32[$7>>2]|0;
          $130 = HEAP32[$8>>2]|0;
          $131 = ($129>>>0)<($130>>>0);
          if ($131) {
           $132 = ((($129)) + 1|0);
           HEAP32[$7>>2] = $132;
           $133 = HEAP8[$129>>0]|0;
           $134 = $133&255;
           $136 = $134;
          } else {
           $135 = (___shgetc($f)|0);
           $136 = $135;
          }
          $137 = (_isspace($136)|0);
          $138 = ($137|0)==(0);
          if ($138) {
           break;
          }
         }
         $139 = HEAP32[$8>>2]|0;
         $140 = ($139|0)==(0|0);
         $$pre170 = HEAP32[$7>>2]|0;
         if ($140) {
          $145 = $$pre170;
         } else {
          $141 = ((($$pre170)) + -1|0);
          HEAP32[$7>>2] = $141;
          $145 = $141;
         }
         $142 = HEAP32[$9>>2]|0;
         $143 = HEAP32[$10>>2]|0;
         $144 = $145;
         $146 = $143;
         $147 = (($142) + ($pos$0108))|0;
         $148 = (($147) + ($144))|0;
         $149 = (($148) - ($146))|0;
         $pos$1 = $149;$width$1 = $width$0$lcssa;
        }
        }
        ___shlim($f,$width$1);
        $150 = HEAP32[$7>>2]|0;
        $151 = HEAP32[$8>>2]|0;
        $152 = ($150>>>0)<($151>>>0);
        if ($152) {
         $153 = ((($150)) + 1|0);
         HEAP32[$7>>2] = $153;
         $157 = $151;
        } else {
         $154 = (___shgetc($f)|0);
         $155 = ($154|0)<(0);
         if ($155) {
          $alloc$0400 = $alloc$0;$matches$0104376 = $matches$0104;$s$6 = $s$1;$wcs$7 = $wcs$1;
          label = 152;
          break L6;
         }
         $$pre172 = HEAP32[$8>>2]|0;
         $157 = $$pre172;
        }
        $156 = ($157|0)==(0|0);
        if (!($156)) {
         $158 = HEAP32[$7>>2]|0;
         $159 = ((($158)) + -1|0);
         HEAP32[$7>>2] = $159;
        }
        L67: do {
         switch ($$|0) {
         case 91: case 99: case 115:  {
          $160 = ($$|0)==(99);
          $161 = $$ & 239;
          $162 = ($161|0)==(99);
          L69: do {
           if ($162) {
            $163 = ($$|0)==(115);
            _memset(($scanset|0),-1,257)|0;
            HEAP8[$scanset>>0] = 0;
            if ($163) {
             HEAP8[$12>>0] = 0;
             ;HEAP8[$11>>0]=0|0;HEAP8[$11+1>>0]=0|0;HEAP8[$11+2>>0]=0|0;HEAP8[$11+3>>0]=0|0;HEAP8[$11+4>>0]=0|0;
             $p$9 = $p$5;
            } else {
             $p$9 = $p$5;
            }
           } else {
            $164 = ((($p$5)) + 1|0);
            $165 = HEAP8[$164>>0]|0;
            $166 = ($165<<24>>24)==(94);
            $167 = ((($p$5)) + 2|0);
            $invert$0 = $166&1;
            $168 = $166 ? $164 : $p$5;
            $p$6 = $166 ? $167 : $164;
            $169 = $166&1;
            _memset(($scanset|0),($169|0),257)|0;
            HEAP8[$scanset>>0] = 0;
            $170 = HEAP8[$p$6>>0]|0;
            switch ($170<<24>>24) {
            case 45:  {
             $171 = ((($168)) + 2|0);
             $172 = $invert$0 ^ 1;
             $173 = $172&255;
             HEAP8[$14>>0] = $173;
             $$pre$phi182Z2D = $173;$p$7$ph = $171;
             break;
            }
            case 93:  {
             $174 = ((($168)) + 2|0);
             $175 = $invert$0 ^ 1;
             $176 = $175&255;
             HEAP8[$15>>0] = $176;
             $$pre$phi182Z2D = $176;$p$7$ph = $174;
             break;
            }
            default: {
             $$pre180 = $invert$0 ^ 1;
             $$pre181 = $$pre180&255;
             $$pre$phi182Z2D = $$pre181;$p$7$ph = $p$6;
            }
            }
            $p$7 = $p$7$ph;
            while(1) {
             $177 = HEAP8[$p$7>>0]|0;
             L80: do {
              switch ($177<<24>>24) {
              case 0:  {
               $alloc$0400 = $alloc$0;$matches$0104376 = $matches$0104;$s$6 = $s$1;$wcs$7 = $wcs$1;
               label = 152;
               break L6;
               break;
              }
              case 93:  {
               $p$9 = $p$7;
               break L69;
               break;
              }
              case 45:  {
               $178 = ((($p$7)) + 1|0);
               $179 = HEAP8[$178>>0]|0;
               switch ($179<<24>>24) {
               case 93: case 0:  {
                $190 = 45;$p$8 = $p$7;
                break L80;
                break;
               }
               default: {
               }
               }
               $180 = ((($p$7)) + -1|0);
               $181 = HEAP8[$180>>0]|0;
               $182 = ($181&255)<($179&255);
               if ($182) {
                $183 = $181&255;
                $c$0100 = $183;
                while(1) {
                 $184 = (($c$0100) + 1)|0;
                 $185 = (($scanset) + ($184)|0);
                 HEAP8[$185>>0] = $$pre$phi182Z2D;
                 $186 = HEAP8[$178>>0]|0;
                 $187 = $186&255;
                 $188 = ($184|0)<($187|0);
                 if ($188) {
                  $c$0100 = $184;
                 } else {
                  $190 = $186;$p$8 = $178;
                  break;
                 }
                }
               } else {
                $190 = $179;$p$8 = $178;
               }
               break;
              }
              default: {
               $190 = $177;$p$8 = $p$7;
              }
              }
             } while(0);
             $189 = $190&255;
             $191 = (($189) + 1)|0;
             $192 = (($scanset) + ($191)|0);
             HEAP8[$192>>0] = $$pre$phi182Z2D;
             $193 = ((($p$8)) + 1|0);
             $p$7 = $193;
            }
           }
          } while(0);
          $194 = (($width$1) + 1)|0;
          $195 = $160 ? $194 : 31;
          $196 = ($$size$0|0)==(1);
          $197 = ($alloc$0|0)!=(0);
          L88: do {
           if ($196) {
            if ($197) {
             $198 = $195 << 2;
             $199 = (_malloc($198)|0);
             $200 = ($199|0)==(0|0);
             if ($200) {
              $alloc$0400 = $alloc$0;$matches$0104376 = $matches$0104;$s$6 = 0;$wcs$7 = $199;
              label = 152;
              break L6;
             } else {
              $wcs$2 = $199;
             }
            } else {
             $wcs$2 = $dest$0;
            }
            HEAP32[$st>>2] = 0;
            HEAP32[$13>>2] = 0;
            $i$0$ph = 0;$k$0$ph = $195;$wcs$3$ph = $wcs$2;
            L94: while(1) {
             $201 = ($wcs$3$ph|0)==(0|0);
             $i$0$ph20 = $i$0$ph;
             while(1) {
              L98: while(1) {
               $202 = HEAP32[$7>>2]|0;
               $203 = HEAP32[$8>>2]|0;
               $204 = ($202>>>0)<($203>>>0);
               if ($204) {
                $205 = ((($202)) + 1|0);
                HEAP32[$7>>2] = $205;
                $206 = HEAP8[$202>>0]|0;
                $207 = $206&255;
                $210 = $207;
               } else {
                $208 = (___shgetc($f)|0);
                $210 = $208;
               }
               $209 = (($210) + 1)|0;
               $211 = (($scanset) + ($209)|0);
               $212 = HEAP8[$211>>0]|0;
               $213 = ($212<<24>>24)==(0);
               if ($213) {
                $i$0$ph20$lcssa = $i$0$ph20;$wcs$3$ph$lcssa = $wcs$3$ph;
                break L94;
               }
               $214 = $210&255;
               HEAP8[$0>>0] = $214;
               $215 = (_mbrtowc($wc,$0,1,$st)|0);
               switch ($215|0) {
               case -1:  {
                $alloc$0400 = $alloc$0;$matches$0104376 = $matches$0104;$s$6 = 0;$wcs$7 = $wcs$3$ph;
                label = 152;
                break L6;
                break;
               }
               case -2:  {
                break;
               }
               default: {
                break L98;
               }
               }
              }
              if ($201) {
               $i$1 = $i$0$ph20;
              } else {
               $216 = HEAP32[$wc>>2]|0;
               $217 = (($i$0$ph20) + 1)|0;
               $218 = (($wcs$3$ph) + ($i$0$ph20<<2)|0);
               HEAP32[$218>>2] = $216;
               $i$1 = $217;
              }
              $219 = ($i$1|0)==($k$0$ph|0);
              $or$cond = $197 & $219;
              if ($or$cond) {
               break;
              } else {
               $i$0$ph20 = $i$1;
              }
             }
             $factor = $k$0$ph << 1;
             $220 = $factor | 1;
             $221 = $220 << 2;
             $222 = (_realloc($wcs$3$ph,$221)|0);
             $223 = ($222|0)==(0|0);
             if ($223) {
              $alloc$0400 = $alloc$0;$matches$0104376 = $matches$0104;$s$6 = 0;$wcs$7 = $wcs$3$ph;
              label = 152;
              break L6;
             }
             $i$0$ph$phi = $k$0$ph;$k$0$ph = $220;$wcs$3$ph = $222;$i$0$ph = $i$0$ph$phi;
            }
            $224 = (_mbsinit($st)|0);
            $225 = ($224|0)==(0);
            if ($225) {
             $alloc$0400 = $alloc$0;$matches$0104376 = $matches$0104;$s$6 = 0;$wcs$7 = $wcs$3$ph$lcssa;
             label = 152;
             break L6;
            } else {
             $i$4 = $i$0$ph20$lcssa;$s$3 = 0;$wcs$4 = $wcs$3$ph$lcssa;
            }
           } else {
            if ($197) {
             $226 = (_malloc($195)|0);
             $227 = ($226|0)==(0|0);
             if ($227) {
              $alloc$0400 = $alloc$0;$matches$0104376 = $matches$0104;$s$6 = 0;$wcs$7 = 0;
              label = 152;
              break L6;
             } else {
              $i$2$ph = 0;$k$1$ph = $195;$s$2$ph = $226;
             }
             while(1) {
              $i$2 = $i$2$ph;
              while(1) {
               $228 = HEAP32[$7>>2]|0;
               $229 = HEAP32[$8>>2]|0;
               $230 = ($228>>>0)<($229>>>0);
               if ($230) {
                $231 = ((($228)) + 1|0);
                HEAP32[$7>>2] = $231;
                $232 = HEAP8[$228>>0]|0;
                $233 = $232&255;
                $236 = $233;
               } else {
                $234 = (___shgetc($f)|0);
                $236 = $234;
               }
               $235 = (($236) + 1)|0;
               $237 = (($scanset) + ($235)|0);
               $238 = HEAP8[$237>>0]|0;
               $239 = ($238<<24>>24)==(0);
               if ($239) {
                $i$4 = $i$2;$s$3 = $s$2$ph;$wcs$4 = 0;
                break L88;
               }
               $240 = $236&255;
               $241 = (($i$2) + 1)|0;
               $242 = (($s$2$ph) + ($i$2)|0);
               HEAP8[$242>>0] = $240;
               $243 = ($241|0)==($k$1$ph|0);
               if ($243) {
                break;
               } else {
                $i$2 = $241;
               }
              }
              $factor16 = $k$1$ph << 1;
              $244 = $factor16 | 1;
              $245 = (_realloc($s$2$ph,$244)|0);
              $246 = ($245|0)==(0|0);
              if ($246) {
               $alloc$0400 = $alloc$0;$matches$0104376 = $matches$0104;$s$6 = $s$2$ph;$wcs$7 = 0;
               label = 152;
               break L6;
              } else {
               $i$2$ph$phi = $k$1$ph;$k$1$ph = $244;$s$2$ph = $245;$i$2$ph = $i$2$ph$phi;
              }
             }
            }
            $247 = ($dest$0|0)==(0|0);
            if ($247) {
             $265 = $157;
             while(1) {
              $263 = HEAP32[$7>>2]|0;
              $264 = ($263>>>0)<($265>>>0);
              if ($264) {
               $266 = ((($263)) + 1|0);
               HEAP32[$7>>2] = $266;
               $267 = HEAP8[$263>>0]|0;
               $268 = $267&255;
               $271 = $268;
              } else {
               $269 = (___shgetc($f)|0);
               $271 = $269;
              }
              $270 = (($271) + 1)|0;
              $272 = (($scanset) + ($270)|0);
              $273 = HEAP8[$272>>0]|0;
              $274 = ($273<<24>>24)==(0);
              if ($274) {
               $i$4 = 0;$s$3 = 0;$wcs$4 = 0;
               break L88;
              }
              $$pre176 = HEAP32[$8>>2]|0;
              $265 = $$pre176;
             }
            } else {
             $250 = $157;$i$3 = 0;
             while(1) {
              $248 = HEAP32[$7>>2]|0;
              $249 = ($248>>>0)<($250>>>0);
              if ($249) {
               $251 = ((($248)) + 1|0);
               HEAP32[$7>>2] = $251;
               $252 = HEAP8[$248>>0]|0;
               $253 = $252&255;
               $256 = $253;
              } else {
               $254 = (___shgetc($f)|0);
               $256 = $254;
              }
              $255 = (($256) + 1)|0;
              $257 = (($scanset) + ($255)|0);
              $258 = HEAP8[$257>>0]|0;
              $259 = ($258<<24>>24)==(0);
              if ($259) {
               $i$4 = $i$3;$s$3 = $dest$0;$wcs$4 = 0;
               break L88;
              }
              $260 = $256&255;
              $261 = (($i$3) + 1)|0;
              $262 = (($dest$0) + ($i$3)|0);
              HEAP8[$262>>0] = $260;
              $$pre174 = HEAP32[$8>>2]|0;
              $250 = $$pre174;$i$3 = $261;
             }
            }
           }
          } while(0);
          $275 = HEAP32[$8>>2]|0;
          $276 = ($275|0)==(0|0);
          $$pre178 = HEAP32[$7>>2]|0;
          if ($276) {
           $281 = $$pre178;
          } else {
           $277 = ((($$pre178)) + -1|0);
           HEAP32[$7>>2] = $277;
           $281 = $277;
          }
          $278 = HEAP32[$9>>2]|0;
          $279 = HEAP32[$10>>2]|0;
          $280 = $281;
          $282 = $279;
          $283 = (($280) - ($282))|0;
          $284 = (($283) + ($278))|0;
          $285 = ($284|0)==(0);
          if ($285) {
           $alloc$2 = $alloc$0;$matches$2 = $matches$0104;$s$8 = $s$3;$wcs$9 = $wcs$4;
           break L6;
          }
          $$not = $160 ^ 1;
          $286 = ($284|0)==($width$1|0);
          $or$cond8 = $286 | $$not;
          if (!($or$cond8)) {
           $alloc$2 = $alloc$0;$matches$2 = $matches$0104;$s$8 = $s$3;$wcs$9 = $wcs$4;
           break L6;
          }
          do {
           if ($197) {
            if ($196) {
             HEAP32[$dest$0>>2] = $wcs$4;
             break;
            } else {
             HEAP32[$dest$0>>2] = $s$3;
             break;
            }
           }
          } while(0);
          if ($160) {
           $p$10 = $p$9;$s$4 = $s$3;$wcs$5 = $wcs$4;
          } else {
           $287 = ($wcs$4|0)==(0|0);
           if (!($287)) {
            $288 = (($wcs$4) + ($i$4<<2)|0);
            HEAP32[$288>>2] = 0;
           }
           $289 = ($s$3|0)==(0|0);
           if ($289) {
            $p$10 = $p$9;$s$4 = 0;$wcs$5 = $wcs$4;
            break L67;
           }
           $290 = (($s$3) + ($i$4)|0);
           HEAP8[$290>>0] = 0;
           $p$10 = $p$9;$s$4 = $s$3;$wcs$5 = $wcs$4;
          }
          break;
         }
         case 120: case 88: case 112:  {
          $base$0 = 16;
          label = 134;
          break;
         }
         case 111:  {
          $base$0 = 8;
          label = 134;
          break;
         }
         case 117: case 100:  {
          $base$0 = 10;
          label = 134;
          break;
         }
         case 105:  {
          $base$0 = 0;
          label = 134;
          break;
         }
         case 71: case 103: case 70: case 102: case 69: case 101: case 65: case 97:  {
          $310 = (+___floatscan($f,$$size$0,0));
          $311 = HEAP32[$9>>2]|0;
          $312 = HEAP32[$7>>2]|0;
          $313 = HEAP32[$10>>2]|0;
          $314 = $312;
          $315 = $313;
          $316 = (($315) - ($314))|0;
          $317 = ($311|0)==($316|0);
          if ($317) {
           $alloc$2 = $alloc$0;$matches$2 = $matches$0104;$s$8 = $s$1;$wcs$9 = $wcs$1;
           break L6;
          }
          $318 = ($dest$0|0)==(0|0);
          if ($318) {
           $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
          } else {
           switch ($$size$0|0) {
           case 0:  {
            $319 = $310;
            HEAPF32[$dest$0>>2] = $319;
            $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
            break L67;
            break;
           }
           case 1:  {
            HEAPF64[$dest$0>>3] = $310;
            $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
            break L67;
            break;
           }
           case 2:  {
            HEAPF64[$dest$0>>3] = $310;
            $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
            break L67;
            break;
           }
           default: {
            $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
            break L67;
           }
           }
          }
          break;
         }
         default: {
          $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
         }
         }
        } while(0);
        L168: do {
         if ((label|0) == 134) {
          label = 0;
          $291 = (___intscan($f,$base$0,0,-1,-1)|0);
          $292 = tempRet0;
          $293 = HEAP32[$9>>2]|0;
          $294 = HEAP32[$7>>2]|0;
          $295 = HEAP32[$10>>2]|0;
          $296 = $294;
          $297 = $295;
          $298 = (($297) - ($296))|0;
          $299 = ($293|0)==($298|0);
          if ($299) {
           $alloc$2 = $alloc$0;$matches$2 = $matches$0104;$s$8 = $s$1;$wcs$9 = $wcs$1;
           break L6;
          }
          $300 = ($$|0)==(112);
          $301 = ($dest$0|0)!=(0|0);
          $or$cond3 = $301 & $300;
          if ($or$cond3) {
           $302 = $291;
           HEAP32[$dest$0>>2] = $302;
           $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
           break;
          }
          $303 = ($dest$0|0)==(0|0);
          if ($303) {
           $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
          } else {
           switch ($$size$0|0) {
           case -2:  {
            $304 = $291&255;
            HEAP8[$dest$0>>0] = $304;
            $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
            break L168;
            break;
           }
           case -1:  {
            $305 = $291&65535;
            HEAP16[$dest$0>>1] = $305;
            $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
            break L168;
            break;
           }
           case 0:  {
            HEAP32[$dest$0>>2] = $291;
            $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
            break L168;
            break;
           }
           case 1:  {
            HEAP32[$dest$0>>2] = $291;
            $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
            break L168;
            break;
           }
           case 3:  {
            $306 = $dest$0;
            $307 = $306;
            HEAP32[$307>>2] = $291;
            $308 = (($306) + 4)|0;
            $309 = $308;
            HEAP32[$309>>2] = $292;
            $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
            break L168;
            break;
           }
           default: {
            $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
            break L168;
           }
           }
          }
         }
        } while(0);
        $320 = HEAP32[$9>>2]|0;
        $321 = HEAP32[$7>>2]|0;
        $322 = HEAP32[$10>>2]|0;
        $323 = $321;
        $324 = $322;
        $325 = (($320) + ($pos$1))|0;
        $326 = (($325) + ($323))|0;
        $327 = (($326) - ($324))|0;
        $not$ = ($dest$0|0)!=(0|0);
        $328 = $not$&1;
        $matches$0$ = (($328) + ($matches$0104))|0;
        $matches$1 = $matches$0$;$p$11 = $p$10;$pos$2 = $327;$s$5 = $s$4;$wcs$6 = $wcs$5;
        break L8;
       }
      } while(0);
      $50 = $47&1;
      $51 = (($p$0109) + ($50)|0);
      ___shlim($f,0);
      $52 = HEAP32[$7>>2]|0;
      $53 = HEAP32[$8>>2]|0;
      $54 = ($52>>>0)<($53>>>0);
      if ($54) {
       $55 = ((($52)) + 1|0);
       HEAP32[$7>>2] = $55;
       $56 = HEAP8[$52>>0]|0;
       $57 = $56&255;
       $62 = $57;
      } else {
       $58 = (___shgetc($f)|0);
       $62 = $58;
      }
      $59 = HEAP8[$51>>0]|0;
      $60 = $59&255;
      $61 = ($62|0)==($60|0);
      if (!($61)) {
       $$lcssa384 = $62;$matches$0104$lcssa = $matches$0104;$s$0107$lcssa = $s$0107;$wcs$0103$lcssa = $wcs$0103;
       label = 21;
       break L6;
      }
      $69 = (($pos$0108) + 1)|0;
      $matches$1 = $matches$0104;$p$11 = $51;$pos$2 = $69;$s$5 = $s$0107;$wcs$6 = $wcs$0103;
     } else {
      $p$1 = $p$0109;
      while(1) {
       $20 = ((($p$1)) + 1|0);
       $21 = HEAP8[$20>>0]|0;
       $22 = $21&255;
       $23 = (_isspace($22)|0);
       $24 = ($23|0)==(0);
       if ($24) {
        $p$1$lcssa = $p$1;
        break;
       } else {
        $p$1 = $20;
       }
      }
      ___shlim($f,0);
      while(1) {
       $25 = HEAP32[$7>>2]|0;
       $26 = HEAP32[$8>>2]|0;
       $27 = ($25>>>0)<($26>>>0);
       if ($27) {
        $28 = ((($25)) + 1|0);
        HEAP32[$7>>2] = $28;
        $29 = HEAP8[$25>>0]|0;
        $30 = $29&255;
        $32 = $30;
       } else {
        $31 = (___shgetc($f)|0);
        $32 = $31;
       }
       $33 = (_isspace($32)|0);
       $34 = ($33|0)==(0);
       if ($34) {
        break;
       }
      }
      $35 = HEAP32[$8>>2]|0;
      $36 = ($35|0)==(0|0);
      $$pre = HEAP32[$7>>2]|0;
      if ($36) {
       $41 = $$pre;
      } else {
       $37 = ((($$pre)) + -1|0);
       HEAP32[$7>>2] = $37;
       $41 = $37;
      }
      $38 = HEAP32[$9>>2]|0;
      $39 = HEAP32[$10>>2]|0;
      $40 = $41;
      $42 = $39;
      $43 = (($38) + ($pos$0108))|0;
      $44 = (($43) + ($40))|0;
      $45 = (($44) - ($42))|0;
      $matches$1 = $matches$0104;$p$11 = $p$1$lcssa;$pos$2 = $45;$s$5 = $s$0107;$wcs$6 = $wcs$0103;
     }
    } while(0);
    $329 = ((($p$11)) + 1|0);
    $330 = HEAP8[$329>>0]|0;
    $331 = ($330<<24>>24)==(0);
    if ($331) {
     $matches$3 = $matches$1;
     break L4;
    } else {
     $17 = $330;$matches$0104 = $matches$1;$p$0109 = $329;$pos$0108 = $pos$2;$s$0107 = $s$5;$wcs$0103 = $wcs$6;
    }
   }
   if ((label|0) == 21) {
    $63 = HEAP32[$8>>2]|0;
    $64 = ($63|0)==(0|0);
    if (!($64)) {
     $65 = HEAP32[$7>>2]|0;
     $66 = ((($65)) + -1|0);
     HEAP32[$7>>2] = $66;
    }
    $67 = ($$lcssa384|0)>(-1);
    $68 = ($matches$0104$lcssa|0)!=(0);
    $or$cond5 = $68 | $67;
    if ($or$cond5) {
     $matches$3 = $matches$0104$lcssa;
     break;
    } else {
     $alloc$1 = 0;$s$7 = $s$0107$lcssa;$wcs$8 = $wcs$0103$lcssa;
     label = 153;
    }
   }
   else if ((label|0) == 152) {
    $$old4 = ($matches$0104376|0)==(0);
    if ($$old4) {
     $alloc$1 = $alloc$0400;$s$7 = $s$6;$wcs$8 = $wcs$7;
     label = 153;
    } else {
     $alloc$2 = $alloc$0400;$matches$2 = $matches$0104376;$s$8 = $s$6;$wcs$9 = $wcs$7;
    }
   }
   if ((label|0) == 153) {
    $alloc$2 = $alloc$1;$matches$2 = -1;$s$8 = $s$7;$wcs$9 = $wcs$8;
   }
   $332 = ($alloc$2|0)==(0);
   if ($332) {
    $matches$3 = $matches$2;
   } else {
    _free($s$8);
    _free($wcs$9);
    $matches$3 = $matches$2;
   }
  }
 } while(0);
 $333 = ($334|0)==(0);
 if (!($333)) {
  ___unlockfile($f);
 }
 STACKTOP = sp;return ($matches$3|0);
}
function _vsnprintf($s,$n,$fmt,$ap) {
 $s = $s|0;
 $n = $n|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $$$02 = 0, $$0 = 0, $$01 = 0, $$02 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $b = 0, $f = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $b = sp + 112|0;
 $f = sp;
 dest=$f; src=2256; stop=dest+112|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $0 = (($n) + -1)|0;
 $1 = ($0>>>0)>(2147483646);
 if ($1) {
  $2 = ($n|0)==(0);
  if ($2) {
   $$01 = $b;$$02 = 1;
   label = 4;
  } else {
   $3 = (___errno_location()|0);
   HEAP32[$3>>2] = 75;
   $$0 = -1;
  }
 } else {
  $$01 = $s;$$02 = $n;
  label = 4;
 }
 if ((label|0) == 4) {
  $4 = $$01;
  $5 = (-2 - ($4))|0;
  $6 = ($$02>>>0)>($5>>>0);
  $$$02 = $6 ? $5 : $$02;
  $7 = ((($f)) + 48|0);
  HEAP32[$7>>2] = $$$02;
  $8 = ((($f)) + 20|0);
  HEAP32[$8>>2] = $$01;
  $9 = ((($f)) + 44|0);
  HEAP32[$9>>2] = $$01;
  $10 = (($$01) + ($$$02)|0);
  $11 = ((($f)) + 16|0);
  HEAP32[$11>>2] = $10;
  $12 = ((($f)) + 28|0);
  HEAP32[$12>>2] = $10;
  $13 = (_vfprintf($f,$fmt,$ap)|0);
  $14 = ($$$02|0)==(0);
  if ($14) {
   $$0 = $13;
  } else {
   $15 = HEAP32[$8>>2]|0;
   $16 = HEAP32[$11>>2]|0;
   $17 = ($15|0)==($16|0);
   $18 = $17 << 31 >> 31;
   $19 = (($15) + ($18)|0);
   HEAP8[$19>>0] = 0;
   $$0 = $13;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _vsprintf($s,$fmt,$ap) {
 $s = $s|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_vsnprintf($s,2147483647,$fmt,$ap)|0);
 return ($0|0);
}
function _strtod($s,$p) {
 $s = $s|0;
 $p = $p|0;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_strtox($s,$p,1));
 return (+$0);
}
function _memchr($src,$c,$n) {
 $src = $src|0;
 $c = $c|0;
 $n = $n|0;
 var $$0$lcssa = 0, $$0$lcssa44 = 0, $$019 = 0, $$1$lcssa = 0, $$110 = 0, $$110$lcssa = 0, $$24 = 0, $$3 = 0, $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond18 = 0, $s$0$lcssa = 0, $s$0$lcssa43 = 0, $s$020 = 0, $s$15 = 0, $s$2 = 0, $w$0$lcssa = 0, $w$011 = 0, $w$011$lcssa = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $c & 255;
 $1 = $src;
 $2 = $1 & 3;
 $3 = ($2|0)!=(0);
 $4 = ($n|0)!=(0);
 $or$cond18 = $4 & $3;
 L1: do {
  if ($or$cond18) {
   $5 = $c&255;
   $$019 = $n;$s$020 = $src;
   while(1) {
    $6 = HEAP8[$s$020>>0]|0;
    $7 = ($6<<24>>24)==($5<<24>>24);
    if ($7) {
     $$0$lcssa44 = $$019;$s$0$lcssa43 = $s$020;
     label = 6;
     break L1;
    }
    $8 = ((($s$020)) + 1|0);
    $9 = (($$019) + -1)|0;
    $10 = $8;
    $11 = $10 & 3;
    $12 = ($11|0)!=(0);
    $13 = ($9|0)!=(0);
    $or$cond = $13 & $12;
    if ($or$cond) {
     $$019 = $9;$s$020 = $8;
    } else {
     $$0$lcssa = $9;$$lcssa = $13;$s$0$lcssa = $8;
     label = 5;
     break;
    }
   }
  } else {
   $$0$lcssa = $n;$$lcssa = $4;$s$0$lcssa = $src;
   label = 5;
  }
 } while(0);
 if ((label|0) == 5) {
  if ($$lcssa) {
   $$0$lcssa44 = $$0$lcssa;$s$0$lcssa43 = $s$0$lcssa;
   label = 6;
  } else {
   $$3 = 0;$s$2 = $s$0$lcssa;
  }
 }
 L8: do {
  if ((label|0) == 6) {
   $14 = HEAP8[$s$0$lcssa43>>0]|0;
   $15 = $c&255;
   $16 = ($14<<24>>24)==($15<<24>>24);
   if ($16) {
    $$3 = $$0$lcssa44;$s$2 = $s$0$lcssa43;
   } else {
    $17 = Math_imul($0, 16843009)|0;
    $18 = ($$0$lcssa44>>>0)>(3);
    L11: do {
     if ($18) {
      $$110 = $$0$lcssa44;$w$011 = $s$0$lcssa43;
      while(1) {
       $19 = HEAP32[$w$011>>2]|0;
       $20 = $19 ^ $17;
       $21 = (($20) + -16843009)|0;
       $22 = $20 & -2139062144;
       $23 = $22 ^ -2139062144;
       $24 = $23 & $21;
       $25 = ($24|0)==(0);
       if (!($25)) {
        $$110$lcssa = $$110;$w$011$lcssa = $w$011;
        break;
       }
       $26 = ((($w$011)) + 4|0);
       $27 = (($$110) + -4)|0;
       $28 = ($27>>>0)>(3);
       if ($28) {
        $$110 = $27;$w$011 = $26;
       } else {
        $$1$lcssa = $27;$w$0$lcssa = $26;
        label = 11;
        break L11;
       }
      }
      $$24 = $$110$lcssa;$s$15 = $w$011$lcssa;
     } else {
      $$1$lcssa = $$0$lcssa44;$w$0$lcssa = $s$0$lcssa43;
      label = 11;
     }
    } while(0);
    if ((label|0) == 11) {
     $29 = ($$1$lcssa|0)==(0);
     if ($29) {
      $$3 = 0;$s$2 = $w$0$lcssa;
      break;
     } else {
      $$24 = $$1$lcssa;$s$15 = $w$0$lcssa;
     }
    }
    while(1) {
     $30 = HEAP8[$s$15>>0]|0;
     $31 = ($30<<24>>24)==($15<<24>>24);
     if ($31) {
      $$3 = $$24;$s$2 = $s$15;
      break L8;
     }
     $32 = ((($s$15)) + 1|0);
     $33 = (($$24) + -1)|0;
     $34 = ($33|0)==(0);
     if ($34) {
      $$3 = 0;$s$2 = $32;
      break;
     } else {
      $$24 = $33;$s$15 = $32;
     }
    }
   }
  }
 } while(0);
 $35 = ($$3|0)!=(0);
 $36 = $35 ? $s$2 : 0;
 return ($36|0);
}
function _memcmp($vl,$vr,$n) {
 $vl = $vl|0;
 $vr = $vr|0;
 $n = $n|0;
 var $$03 = 0, $$lcssa = 0, $$lcssa19 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $l$04 = 0, $r$05 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n|0)==(0);
 L1: do {
  if ($0) {
   $11 = 0;
  } else {
   $$03 = $n;$l$04 = $vl;$r$05 = $vr;
   while(1) {
    $1 = HEAP8[$l$04>>0]|0;
    $2 = HEAP8[$r$05>>0]|0;
    $3 = ($1<<24>>24)==($2<<24>>24);
    if (!($3)) {
     $$lcssa = $1;$$lcssa19 = $2;
     break;
    }
    $4 = (($$03) + -1)|0;
    $5 = ((($l$04)) + 1|0);
    $6 = ((($r$05)) + 1|0);
    $7 = ($4|0)==(0);
    if ($7) {
     $11 = 0;
     break L1;
    } else {
     $$03 = $4;$l$04 = $5;$r$05 = $6;
    }
   }
   $8 = $$lcssa&255;
   $9 = $$lcssa19&255;
   $10 = (($8) - ($9))|0;
   $11 = $10;
  }
 } while(0);
 return ($11|0);
}
function ___memrchr($m,$c,$n) {
 $m = $m|0;
 $c = $c|0;
 $n = $n|0;
 var $$0 = 0, $$01 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $c&255;
 $$01 = $n;
 while(1) {
  $1 = (($$01) + -1)|0;
  $2 = ($$01|0)==(0);
  if ($2) {
   $$0 = 0;
   break;
  }
  $3 = (($m) + ($1)|0);
  $4 = HEAP8[$3>>0]|0;
  $5 = ($4<<24>>24)==($0<<24>>24);
  if ($5) {
   $$0 = $3;
   break;
  } else {
   $$01 = $1;
  }
 }
 return ($$0|0);
}
function ___stpcpy($d,$s) {
 $d = $d|0;
 $s = $s|0;
 var $$0$lcssa = 0, $$01$lcssa = 0, $$0115 = 0, $$016 = 0, $$03 = 0, $$1$ph = 0, $$12$ph = 0, $$128 = 0, $$19 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $wd$0$lcssa = 0, $wd$010 = 0, $ws$0$lcssa = 0, $ws$011 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $s;
 $1 = $d;
 $2 = $0 ^ $1;
 $3 = $2 & 3;
 $4 = ($3|0)==(0);
 L1: do {
  if ($4) {
   $5 = $0 & 3;
   $6 = ($5|0)==(0);
   if ($6) {
    $$0$lcssa = $s;$$01$lcssa = $d;
   } else {
    $$0115 = $d;$$016 = $s;
    while(1) {
     $7 = HEAP8[$$016>>0]|0;
     HEAP8[$$0115>>0] = $7;
     $8 = ($7<<24>>24)==(0);
     if ($8) {
      $$03 = $$0115;
      break L1;
     }
     $9 = ((($$016)) + 1|0);
     $10 = ((($$0115)) + 1|0);
     $11 = $9;
     $12 = $11 & 3;
     $13 = ($12|0)==(0);
     if ($13) {
      $$0$lcssa = $9;$$01$lcssa = $10;
      break;
     } else {
      $$0115 = $10;$$016 = $9;
     }
    }
   }
   $14 = HEAP32[$$0$lcssa>>2]|0;
   $15 = (($14) + -16843009)|0;
   $16 = $14 & -2139062144;
   $17 = $16 ^ -2139062144;
   $18 = $17 & $15;
   $19 = ($18|0)==(0);
   if ($19) {
    $22 = $14;$wd$010 = $$01$lcssa;$ws$011 = $$0$lcssa;
    while(1) {
     $20 = ((($ws$011)) + 4|0);
     $21 = ((($wd$010)) + 4|0);
     HEAP32[$wd$010>>2] = $22;
     $23 = HEAP32[$20>>2]|0;
     $24 = (($23) + -16843009)|0;
     $25 = $23 & -2139062144;
     $26 = $25 ^ -2139062144;
     $27 = $26 & $24;
     $28 = ($27|0)==(0);
     if ($28) {
      $22 = $23;$wd$010 = $21;$ws$011 = $20;
     } else {
      $wd$0$lcssa = $21;$ws$0$lcssa = $20;
      break;
     }
    }
   } else {
    $wd$0$lcssa = $$01$lcssa;$ws$0$lcssa = $$0$lcssa;
   }
   $$1$ph = $ws$0$lcssa;$$12$ph = $wd$0$lcssa;
   label = 8;
  } else {
   $$1$ph = $s;$$12$ph = $d;
   label = 8;
  }
 } while(0);
 if ((label|0) == 8) {
  $29 = HEAP8[$$1$ph>>0]|0;
  HEAP8[$$12$ph>>0] = $29;
  $30 = ($29<<24>>24)==(0);
  if ($30) {
   $$03 = $$12$ph;
  } else {
   $$128 = $$12$ph;$$19 = $$1$ph;
   while(1) {
    $31 = ((($$19)) + 1|0);
    $32 = ((($$128)) + 1|0);
    $33 = HEAP8[$31>>0]|0;
    HEAP8[$32>>0] = $33;
    $34 = ($33<<24>>24)==(0);
    if ($34) {
     $$03 = $32;
     break;
    } else {
     $$128 = $32;$$19 = $31;
    }
   }
  }
 }
 return ($$03|0);
}
function _strchr($s,$c) {
 $s = $s|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___strchrnul($s,$c)|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $c&255;
 $3 = ($1<<24>>24)==($2<<24>>24);
 $4 = $3 ? $0 : 0;
 return ($4|0);
}
function ___strchrnul($s,$c) {
 $s = $s|0;
 $c = $c|0;
 var $$0 = 0, $$02$lcssa = 0, $$0211 = 0, $$1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond5 = 0, $w$0$lcssa = 0, $w$08 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $c & 255;
 $1 = ($0|0)==(0);
 L1: do {
  if ($1) {
   $6 = (_strlen($s)|0);
   $7 = (($s) + ($6)|0);
   $$0 = $7;
  } else {
   $2 = $s;
   $3 = $2 & 3;
   $4 = ($3|0)==(0);
   if ($4) {
    $$02$lcssa = $s;
   } else {
    $5 = $c&255;
    $$0211 = $s;
    while(1) {
     $8 = HEAP8[$$0211>>0]|0;
     $9 = ($8<<24>>24)==(0);
     $10 = ($8<<24>>24)==($5<<24>>24);
     $or$cond = $9 | $10;
     if ($or$cond) {
      $$0 = $$0211;
      break L1;
     }
     $11 = ((($$0211)) + 1|0);
     $12 = $11;
     $13 = $12 & 3;
     $14 = ($13|0)==(0);
     if ($14) {
      $$02$lcssa = $11;
      break;
     } else {
      $$0211 = $11;
     }
    }
   }
   $15 = Math_imul($0, 16843009)|0;
   $16 = HEAP32[$$02$lcssa>>2]|0;
   $17 = (($16) + -16843009)|0;
   $18 = $16 & -2139062144;
   $19 = $18 ^ -2139062144;
   $20 = $19 & $17;
   $21 = ($20|0)==(0);
   L10: do {
    if ($21) {
     $23 = $16;$w$08 = $$02$lcssa;
     while(1) {
      $22 = $23 ^ $15;
      $24 = (($22) + -16843009)|0;
      $25 = $22 & -2139062144;
      $26 = $25 ^ -2139062144;
      $27 = $26 & $24;
      $28 = ($27|0)==(0);
      if (!($28)) {
       $w$0$lcssa = $w$08;
       break L10;
      }
      $29 = ((($w$08)) + 4|0);
      $30 = HEAP32[$29>>2]|0;
      $31 = (($30) + -16843009)|0;
      $32 = $30 & -2139062144;
      $33 = $32 ^ -2139062144;
      $34 = $33 & $31;
      $35 = ($34|0)==(0);
      if ($35) {
       $23 = $30;$w$08 = $29;
      } else {
       $w$0$lcssa = $29;
       break;
      }
     }
    } else {
     $w$0$lcssa = $$02$lcssa;
    }
   } while(0);
   $36 = $c&255;
   $$1 = $w$0$lcssa;
   while(1) {
    $37 = HEAP8[$$1>>0]|0;
    $38 = ($37<<24>>24)==(0);
    $39 = ($37<<24>>24)==($36<<24>>24);
    $or$cond5 = $38 | $39;
    $40 = ((($$1)) + 1|0);
    if ($or$cond5) {
     $$0 = $$1;
     break;
    } else {
     $$1 = $40;
    }
   }
  }
 } while(0);
 return ($$0|0);
}
function _strcmp($l,$r) {
 $l = $l|0;
 $r = $r|0;
 var $$014 = 0, $$05 = 0, $$lcssa = 0, $$lcssa2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond3 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$l>>0]|0;
 $1 = HEAP8[$r>>0]|0;
 $2 = ($0<<24>>24)!=($1<<24>>24);
 $3 = ($0<<24>>24)==(0);
 $or$cond3 = $3 | $2;
 if ($or$cond3) {
  $$lcssa = $0;$$lcssa2 = $1;
 } else {
  $$014 = $l;$$05 = $r;
  while(1) {
   $4 = ((($$014)) + 1|0);
   $5 = ((($$05)) + 1|0);
   $6 = HEAP8[$4>>0]|0;
   $7 = HEAP8[$5>>0]|0;
   $8 = ($6<<24>>24)!=($7<<24>>24);
   $9 = ($6<<24>>24)==(0);
   $or$cond = $9 | $8;
   if ($or$cond) {
    $$lcssa = $6;$$lcssa2 = $7;
    break;
   } else {
    $$014 = $4;$$05 = $5;
   }
  }
 }
 $10 = $$lcssa&255;
 $11 = $$lcssa2&255;
 $12 = (($10) - ($11))|0;
 return ($12|0);
}
function _strcpy($dest,$src) {
 $dest = $dest|0;
 $src = $src|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 (___stpcpy($dest,$src)|0);
 return ($dest|0);
}
function _strcspn($s,$c) {
 $s = $s|0;
 $c = $c|0;
 var $$0 = 0, $$027 = 0, $$03$lcssa = 0, $$035 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $byteset = 0, $div = 0, $div4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $byteset = sp;
 $0 = HEAP8[$c>>0]|0;
 $1 = ($0<<24>>24)==(0);
 if ($1) {
  label = 3;
 } else {
  $2 = ((($c)) + 1|0);
  $3 = HEAP8[$2>>0]|0;
  $4 = ($3<<24>>24)==(0);
  if ($4) {
   label = 3;
  } else {
   ;HEAP32[$byteset>>2]=0|0;HEAP32[$byteset+4>>2]=0|0;HEAP32[$byteset+8>>2]=0|0;HEAP32[$byteset+12>>2]=0|0;HEAP32[$byteset+16>>2]=0|0;HEAP32[$byteset+20>>2]=0|0;HEAP32[$byteset+24>>2]=0|0;HEAP32[$byteset+28>>2]=0|0;
   $$027 = $c;$13 = $0;
   while(1) {
    $12 = $13 & 31;
    $14 = $12&255;
    $15 = 1 << $14;
    $div4 = ($13&255) >>> 5;
    $16 = $div4&255;
    $17 = (($byteset) + ($16<<2)|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = $18 | $15;
    HEAP32[$17>>2] = $19;
    $20 = ((($$027)) + 1|0);
    $21 = HEAP8[$20>>0]|0;
    $22 = ($21<<24>>24)==(0);
    if ($22) {
     break;
    } else {
     $$027 = $20;$13 = $21;
    }
   }
   $10 = HEAP8[$s>>0]|0;
   $11 = ($10<<24>>24)==(0);
   L7: do {
    if ($11) {
     $$03$lcssa = $s;
    } else {
     $$035 = $s;$23 = $10;
     while(1) {
      $div = ($23&255) >>> 5;
      $24 = $div&255;
      $25 = (($byteset) + ($24<<2)|0);
      $26 = HEAP32[$25>>2]|0;
      $27 = $23 & 31;
      $28 = $27&255;
      $29 = 1 << $28;
      $30 = $26 & $29;
      $31 = ($30|0)==(0);
      if (!($31)) {
       $$03$lcssa = $$035;
       break L7;
      }
      $32 = ((($$035)) + 1|0);
      $33 = HEAP8[$32>>0]|0;
      $34 = ($33<<24>>24)==(0);
      if ($34) {
       $$03$lcssa = $32;
       break;
      } else {
       $$035 = $32;$23 = $33;
      }
     }
    }
   } while(0);
   $35 = $$03$lcssa;
   $36 = $s;
   $37 = (($35) - ($36))|0;
   $$0 = $37;
  }
 }
 if ((label|0) == 3) {
  $5 = $0 << 24 >> 24;
  $6 = (___strchrnul($s,$5)|0);
  $7 = $6;
  $8 = $s;
  $9 = (($7) - ($8))|0;
  $$0 = $9;
 }
 STACKTOP = sp;return ($$0|0);
}
function _strlen($s) {
 $s = $s|0;
 var $$0 = 0, $$01$lcssa = 0, $$014 = 0, $$1$lcssa = 0, $$lcssa20 = 0, $$pn = 0, $$pn15 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $w$0 = 0, $w$0$lcssa = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $s;
 $1 = $0 & 3;
 $2 = ($1|0)==(0);
 L1: do {
  if ($2) {
   $$01$lcssa = $s;
   label = 4;
  } else {
   $$014 = $s;$21 = $0;
   while(1) {
    $3 = HEAP8[$$014>>0]|0;
    $4 = ($3<<24>>24)==(0);
    if ($4) {
     $$pn = $21;
     break L1;
    }
    $5 = ((($$014)) + 1|0);
    $6 = $5;
    $7 = $6 & 3;
    $8 = ($7|0)==(0);
    if ($8) {
     $$01$lcssa = $5;
     label = 4;
     break;
    } else {
     $$014 = $5;$21 = $6;
    }
   }
  }
 } while(0);
 if ((label|0) == 4) {
  $w$0 = $$01$lcssa;
  while(1) {
   $9 = HEAP32[$w$0>>2]|0;
   $10 = (($9) + -16843009)|0;
   $11 = $9 & -2139062144;
   $12 = $11 ^ -2139062144;
   $13 = $12 & $10;
   $14 = ($13|0)==(0);
   $15 = ((($w$0)) + 4|0);
   if ($14) {
    $w$0 = $15;
   } else {
    $$lcssa20 = $9;$w$0$lcssa = $w$0;
    break;
   }
  }
  $16 = $$lcssa20&255;
  $17 = ($16<<24>>24)==(0);
  if ($17) {
   $$1$lcssa = $w$0$lcssa;
  } else {
   $$pn15 = $w$0$lcssa;
   while(1) {
    $18 = ((($$pn15)) + 1|0);
    $$pre = HEAP8[$18>>0]|0;
    $19 = ($$pre<<24>>24)==(0);
    if ($19) {
     $$1$lcssa = $18;
     break;
    } else {
     $$pn15 = $18;
    }
   }
  }
  $20 = $$1$lcssa;
  $$pn = $20;
 }
 $$0 = (($$pn) - ($0))|0;
 return ($$0|0);
}
function _strpbrk($s,$b) {
 $s = $s|0;
 $b = $b|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strcspn($s,$b)|0);
 $1 = (($s) + ($0)|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = ($2<<24>>24)!=(0);
 $4 = $3 ? $1 : 0;
 return ($4|0);
}
function _strrchr($s,$c) {
 $s = $s|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strlen($s)|0);
 $1 = (($0) + 1)|0;
 $2 = (___memrchr($s,$c,$1)|0);
 return ($2|0);
}
function _strspn($s,$c) {
 $s = $s|0;
 $c = $c|0;
 var $$0 = 0, $$028 = 0, $$03 = 0, $$03$lcssa = 0, $$1$lcssa = 0, $$16 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $byteset = 0, $div = 0, $div4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $byteset = sp;
 ;HEAP32[$byteset>>2]=0|0;HEAP32[$byteset+4>>2]=0|0;HEAP32[$byteset+8>>2]=0|0;HEAP32[$byteset+12>>2]=0|0;HEAP32[$byteset+16>>2]=0|0;HEAP32[$byteset+20>>2]=0|0;HEAP32[$byteset+24>>2]=0|0;HEAP32[$byteset+28>>2]=0|0;
 $0 = HEAP8[$c>>0]|0;
 $1 = ($0<<24>>24)==(0);
 do {
  if ($1) {
   $$0 = 0;
  } else {
   $2 = ((($c)) + 1|0);
   $3 = HEAP8[$2>>0]|0;
   $4 = ($3<<24>>24)==(0);
   if ($4) {
    $$03 = $s;
    while(1) {
     $5 = HEAP8[$$03>>0]|0;
     $6 = ($5<<24>>24)==($0<<24>>24);
     $7 = ((($$03)) + 1|0);
     if ($6) {
      $$03 = $7;
     } else {
      $$03$lcssa = $$03;
      break;
     }
    }
    $8 = $$03$lcssa;
    $9 = $s;
    $10 = (($8) - ($9))|0;
    $$0 = $10;
    break;
   } else {
    $$028 = $c;$14 = $0;
   }
   while(1) {
    $13 = $14 & 31;
    $15 = $13&255;
    $16 = 1 << $15;
    $div4 = ($14&255) >>> 5;
    $17 = $div4&255;
    $18 = (($byteset) + ($17<<2)|0);
    $19 = HEAP32[$18>>2]|0;
    $20 = $19 | $16;
    HEAP32[$18>>2] = $20;
    $21 = ((($$028)) + 1|0);
    $22 = HEAP8[$21>>0]|0;
    $23 = ($22<<24>>24)==(0);
    if ($23) {
     break;
    } else {
     $$028 = $21;$14 = $22;
    }
   }
   $11 = HEAP8[$s>>0]|0;
   $12 = ($11<<24>>24)==(0);
   L10: do {
    if ($12) {
     $$1$lcssa = $s;
    } else {
     $$16 = $s;$24 = $11;
     while(1) {
      $div = ($24&255) >>> 5;
      $25 = $div&255;
      $26 = (($byteset) + ($25<<2)|0);
      $27 = HEAP32[$26>>2]|0;
      $28 = $24 & 31;
      $29 = $28&255;
      $30 = 1 << $29;
      $31 = $27 & $30;
      $32 = ($31|0)==(0);
      if ($32) {
       $$1$lcssa = $$16;
       break L10;
      }
      $33 = ((($$16)) + 1|0);
      $34 = HEAP8[$33>>0]|0;
      $35 = ($34<<24>>24)==(0);
      if ($35) {
       $$1$lcssa = $33;
       break;
      } else {
       $$16 = $33;$24 = $34;
      }
     }
    }
   } while(0);
   $36 = $$1$lcssa;
   $37 = $s;
   $38 = (($36) - ($37))|0;
   $$0 = $38;
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _strstr($h,$n) {
 $h = $h|0;
 $n = $n|0;
 var $$0 = 0, $$0$i = 0, $$0$lcssa$i = 0, $$0$lcssa$i11 = 0, $$01$i = 0, $$02$i = 0, $$02$i7 = 0, $$03$i = 0, $$lcssa$i = 0, $$lcssa$i10 = 0, $$lcssa$i4 = 0, $$lcssa281 = 0, $$lcssa284 = 0, $$lcssa287 = 0, $$lcssa301 = 0, $$lcssa304 = 0, $$lcssa307 = 0, $$lcssa322 = 0, $$pr$i = 0, $0 = 0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0;
 var $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0;
 var $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0;
 var $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $233$phi = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $byteset$i = 0, $div$i = 0, $div4$i = 0, $hw$0$in2$i = 0, $hw$03$i = 0, $hw$03$i6 = 0, $ip$0$ph$lcssa$i = 0, $ip$0$ph$lcssa143$i = 0, $ip$0$ph76$i = 0, $ip$1$ip$0$$i = 0, $ip$1$ip$0$i = 0, $ip$1$ph$lcssa$i = 0, $ip$1$ph55$i = 0, $jp$0$ph13$ph70$i = 0, $jp$0$ph1365$i = 0, $jp$0$ph1365$i$lcssa = 0, $jp$0$ph1365$i$lcssa$lcssa = 0, $jp$0$ph77$i = 0, $jp$1$ph56$i = 0, $jp$1$ph9$ph49$i = 0;
 var $jp$1$ph944$i = 0, $jp$1$ph944$i$lcssa = 0, $jp$1$ph944$i$lcssa$lcssa = 0, $k$059$i = 0, $k$139$i = 0, $k$2$i = 0, $k$338$i = 0, $k$338$i$lcssa = 0, $k$4$i = 0, $l$080$i = 0, $l$080$i$lcssa321 = 0, $mem$0$i = 0, $mem0$0$i = 0, $or$cond$i = 0, $or$cond$i2 = 0, $or$cond$i8 = 0, $or$cond5$i = 0, $p$0$ph$ph$lcssa32$i = 0, $p$0$ph$ph$lcssa32147$i = 0, $p$0$ph$ph71$i = 0;
 var $p$1$p$0$i = 0, $p$1$ph$ph$lcssa23$i = 0, $p$1$ph$ph50$i = 0, $p$3$i = 0, $shift$i = 0, $z$0$i = 0, $z$1$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1056|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $byteset$i = sp + 1024|0;
 $shift$i = sp;
 $0 = HEAP8[$n>>0]|0;
 $1 = ($0<<24>>24)==(0);
 do {
  if ($1) {
   $$0 = $h;
  } else {
   $2 = $0 << 24 >> 24;
   $3 = (_strchr($h,$2)|0);
   $4 = ($3|0)==(0|0);
   if ($4) {
    $$0 = 0;
   } else {
    $5 = ((($n)) + 1|0);
    $6 = HEAP8[$5>>0]|0;
    $7 = ($6<<24>>24)==(0);
    if ($7) {
     $$0 = $3;
    } else {
     $8 = ((($3)) + 1|0);
     $9 = HEAP8[$8>>0]|0;
     $10 = ($9<<24>>24)==(0);
     if ($10) {
      $$0 = 0;
     } else {
      $11 = ((($n)) + 2|0);
      $12 = HEAP8[$11>>0]|0;
      $13 = ($12<<24>>24)==(0);
      if ($13) {
       $14 = $0&255;
       $15 = $14 << 8;
       $16 = $6&255;
       $17 = $16 | $15;
       $18 = HEAP8[$3>>0]|0;
       $19 = $18&255;
       $20 = $19 << 8;
       $21 = $9&255;
       $22 = $20 | $21;
       $$01$i = $8;$232 = $9;$233 = $3;$hw$0$in2$i = $22;
       while(1) {
        $23 = $hw$0$in2$i & 65535;
        $24 = ($23|0)==($17|0);
        if ($24) {
         $$lcssa$i = $233;$32 = $232;
         break;
        }
        $25 = $23 << 8;
        $26 = ((($$01$i)) + 1|0);
        $27 = HEAP8[$26>>0]|0;
        $28 = $27&255;
        $29 = $28 | $25;
        $30 = ($27<<24>>24)==(0);
        if ($30) {
         $$lcssa$i = $$01$i;$32 = 0;
         break;
        } else {
         $233$phi = $$01$i;$$01$i = $26;$232 = $27;$hw$0$in2$i = $29;$233 = $233$phi;
        }
       }
       $31 = ($32<<24>>24)!=(0);
       $33 = $31 ? $$lcssa$i : 0;
       $$0 = $33;
       break;
      }
      $34 = ((($3)) + 2|0);
      $35 = HEAP8[$34>>0]|0;
      $36 = ($35<<24>>24)==(0);
      if ($36) {
       $$0 = 0;
      } else {
       $37 = ((($n)) + 3|0);
       $38 = HEAP8[$37>>0]|0;
       $39 = ($38<<24>>24)==(0);
       if ($39) {
        $40 = $0&255;
        $41 = $40 << 24;
        $42 = $6&255;
        $43 = $42 << 16;
        $44 = $43 | $41;
        $45 = $12&255;
        $46 = $45 << 8;
        $47 = $44 | $46;
        $48 = HEAP8[$3>>0]|0;
        $49 = $48&255;
        $50 = $49 << 24;
        $51 = $9&255;
        $52 = $51 << 16;
        $53 = $35&255;
        $54 = $53 << 8;
        $55 = $54 | $52;
        $56 = $55 | $50;
        $57 = ($56|0)==($47|0);
        if ($57) {
         $$0$lcssa$i = $34;$$lcssa$i4 = $35;
        } else {
         $$02$i = $34;$hw$03$i = $56;
         while(1) {
          $58 = ((($$02$i)) + 1|0);
          $59 = HEAP8[$58>>0]|0;
          $60 = $59&255;
          $61 = $60 | $hw$03$i;
          $62 = $61 << 8;
          $63 = ($59<<24>>24)==(0);
          $64 = ($62|0)==($47|0);
          $or$cond$i2 = $63 | $64;
          if ($or$cond$i2) {
           $$0$lcssa$i = $58;$$lcssa$i4 = $59;
           break;
          } else {
           $$02$i = $58;$hw$03$i = $62;
          }
         }
        }
        $65 = ($$lcssa$i4<<24>>24)!=(0);
        $66 = ((($$0$lcssa$i)) + -2|0);
        $67 = $65 ? $66 : 0;
        $$0 = $67;
        break;
       }
       $68 = ((($3)) + 3|0);
       $69 = HEAP8[$68>>0]|0;
       $70 = ($69<<24>>24)==(0);
       if ($70) {
        $$0 = 0;
       } else {
        $71 = ((($n)) + 4|0);
        $72 = HEAP8[$71>>0]|0;
        $73 = ($72<<24>>24)==(0);
        if ($73) {
         $74 = $0&255;
         $75 = $74 << 24;
         $76 = $6&255;
         $77 = $76 << 16;
         $78 = $77 | $75;
         $79 = $12&255;
         $80 = $79 << 8;
         $81 = $78 | $80;
         $82 = $38&255;
         $83 = $81 | $82;
         $84 = HEAP8[$3>>0]|0;
         $85 = $84&255;
         $86 = $85 << 24;
         $87 = $9&255;
         $88 = $87 << 16;
         $89 = $35&255;
         $90 = $89 << 8;
         $91 = $69&255;
         $92 = $90 | $88;
         $93 = $92 | $91;
         $94 = $93 | $86;
         $95 = ($94|0)==($83|0);
         if ($95) {
          $$0$lcssa$i11 = $68;$$lcssa$i10 = $69;
         } else {
          $$02$i7 = $68;$hw$03$i6 = $94;
          while(1) {
           $96 = $hw$03$i6 << 8;
           $97 = ((($$02$i7)) + 1|0);
           $98 = HEAP8[$97>>0]|0;
           $99 = $98&255;
           $100 = $99 | $96;
           $101 = ($98<<24>>24)==(0);
           $102 = ($100|0)==($83|0);
           $or$cond$i8 = $101 | $102;
           if ($or$cond$i8) {
            $$0$lcssa$i11 = $97;$$lcssa$i10 = $98;
            break;
           } else {
            $$02$i7 = $97;$hw$03$i6 = $100;
           }
          }
         }
         $103 = ($$lcssa$i10<<24>>24)!=(0);
         $104 = ((($$0$lcssa$i11)) + -3|0);
         $105 = $103 ? $104 : 0;
         $$0 = $105;
         break;
        }
        ;HEAP32[$byteset$i>>2]=0|0;HEAP32[$byteset$i+4>>2]=0|0;HEAP32[$byteset$i+8>>2]=0|0;HEAP32[$byteset$i+12>>2]=0|0;HEAP32[$byteset$i+16>>2]=0|0;HEAP32[$byteset$i+20>>2]=0|0;HEAP32[$byteset$i+24>>2]=0|0;HEAP32[$byteset$i+28>>2]=0|0;
        $110 = $0;$l$080$i = 0;
        while(1) {
         $106 = (($3) + ($l$080$i)|0);
         $107 = HEAP8[$106>>0]|0;
         $108 = ($107<<24>>24)==(0);
         if ($108) {
          $$0$i = 0;
          break;
         }
         $109 = $110 & 31;
         $111 = $109&255;
         $112 = 1 << $111;
         $div4$i = ($110&255) >>> 5;
         $113 = $div4$i&255;
         $114 = (($byteset$i) + ($113<<2)|0);
         $115 = HEAP32[$114>>2]|0;
         $116 = $115 | $112;
         HEAP32[$114>>2] = $116;
         $117 = (($l$080$i) + 1)|0;
         $118 = $110&255;
         $119 = (($shift$i) + ($118<<2)|0);
         HEAP32[$119>>2] = $117;
         $120 = (($n) + ($117)|0);
         $121 = HEAP8[$120>>0]|0;
         $122 = ($121<<24>>24)==(0);
         if ($122) {
          $$lcssa322 = $117;$l$080$i$lcssa321 = $l$080$i;
          label = 23;
          break;
         } else {
          $110 = $121;$l$080$i = $117;
         }
        }
        L32: do {
         if ((label|0) == 23) {
          $123 = ($$lcssa322>>>0)>(1);
          L34: do {
           if ($123) {
            $234 = 1;$ip$0$ph76$i = -1;$jp$0$ph77$i = 0;
            L35: while(1) {
             $235 = $234;$jp$0$ph13$ph70$i = $jp$0$ph77$i;$p$0$ph$ph71$i = 1;
             while(1) {
              $236 = $235;$jp$0$ph1365$i = $jp$0$ph13$ph70$i;
              L39: while(1) {
               $133 = $236;$k$059$i = 1;
               while(1) {
                $129 = (($k$059$i) + ($ip$0$ph76$i))|0;
                $130 = (($n) + ($129)|0);
                $131 = HEAP8[$130>>0]|0;
                $132 = (($n) + ($133)|0);
                $134 = HEAP8[$132>>0]|0;
                $135 = ($131<<24>>24)==($134<<24>>24);
                if (!($135)) {
                 $$lcssa301 = $133;$$lcssa304 = $131;$$lcssa307 = $134;$jp$0$ph1365$i$lcssa = $jp$0$ph1365$i;
                 break L39;
                }
                $136 = ($k$059$i|0)==($p$0$ph$ph71$i|0);
                $127 = (($k$059$i) + 1)|0;
                if ($136) {
                 break;
                }
                $126 = (($127) + ($jp$0$ph1365$i))|0;
                $128 = ($126>>>0)<($$lcssa322>>>0);
                if ($128) {
                 $133 = $126;$k$059$i = $127;
                } else {
                 $ip$0$ph$lcssa$i = $ip$0$ph76$i;$p$0$ph$ph$lcssa32$i = $p$0$ph$ph71$i;
                 break L35;
                }
               }
               $137 = (($jp$0$ph1365$i) + ($p$0$ph$ph71$i))|0;
               $138 = (($137) + 1)|0;
               $139 = ($138>>>0)<($$lcssa322>>>0);
               if ($139) {
                $236 = $138;$jp$0$ph1365$i = $137;
               } else {
                $ip$0$ph$lcssa$i = $ip$0$ph76$i;$p$0$ph$ph$lcssa32$i = $p$0$ph$ph71$i;
                break L35;
               }
              }
              $140 = ($$lcssa304&255)>($$lcssa307&255);
              $141 = (($$lcssa301) - ($ip$0$ph76$i))|0;
              if (!($140)) {
               $jp$0$ph1365$i$lcssa$lcssa = $jp$0$ph1365$i$lcssa;
               break;
              }
              $124 = (($$lcssa301) + 1)|0;
              $125 = ($124>>>0)<($$lcssa322>>>0);
              if ($125) {
               $235 = $124;$jp$0$ph13$ph70$i = $$lcssa301;$p$0$ph$ph71$i = $141;
              } else {
               $ip$0$ph$lcssa$i = $ip$0$ph76$i;$p$0$ph$ph$lcssa32$i = $141;
               break L35;
              }
             }
             $142 = (($jp$0$ph1365$i$lcssa$lcssa) + 1)|0;
             $143 = (($jp$0$ph1365$i$lcssa$lcssa) + 2)|0;
             $144 = ($143>>>0)<($$lcssa322>>>0);
             if ($144) {
              $234 = $143;$ip$0$ph76$i = $jp$0$ph1365$i$lcssa$lcssa;$jp$0$ph77$i = $142;
             } else {
              $ip$0$ph$lcssa$i = $jp$0$ph1365$i$lcssa$lcssa;$p$0$ph$ph$lcssa32$i = 1;
              break;
             }
            }
            $237 = 1;$ip$1$ph55$i = -1;$jp$1$ph56$i = 0;
            while(1) {
             $239 = $237;$jp$1$ph9$ph49$i = $jp$1$ph56$i;$p$1$ph$ph50$i = 1;
             while(1) {
              $238 = $239;$jp$1$ph944$i = $jp$1$ph9$ph49$i;
              L54: while(1) {
               $152 = $238;$k$139$i = 1;
               while(1) {
                $148 = (($k$139$i) + ($ip$1$ph55$i))|0;
                $149 = (($n) + ($148)|0);
                $150 = HEAP8[$149>>0]|0;
                $151 = (($n) + ($152)|0);
                $153 = HEAP8[$151>>0]|0;
                $154 = ($150<<24>>24)==($153<<24>>24);
                if (!($154)) {
                 $$lcssa281 = $152;$$lcssa284 = $150;$$lcssa287 = $153;$jp$1$ph944$i$lcssa = $jp$1$ph944$i;
                 break L54;
                }
                $155 = ($k$139$i|0)==($p$1$ph$ph50$i|0);
                $146 = (($k$139$i) + 1)|0;
                if ($155) {
                 break;
                }
                $145 = (($146) + ($jp$1$ph944$i))|0;
                $147 = ($145>>>0)<($$lcssa322>>>0);
                if ($147) {
                 $152 = $145;$k$139$i = $146;
                } else {
                 $ip$0$ph$lcssa143$i = $ip$0$ph$lcssa$i;$ip$1$ph$lcssa$i = $ip$1$ph55$i;$p$0$ph$ph$lcssa32147$i = $p$0$ph$ph$lcssa32$i;$p$1$ph$ph$lcssa23$i = $p$1$ph$ph50$i;
                 break L34;
                }
               }
               $156 = (($jp$1$ph944$i) + ($p$1$ph$ph50$i))|0;
               $157 = (($156) + 1)|0;
               $158 = ($157>>>0)<($$lcssa322>>>0);
               if ($158) {
                $238 = $157;$jp$1$ph944$i = $156;
               } else {
                $ip$0$ph$lcssa143$i = $ip$0$ph$lcssa$i;$ip$1$ph$lcssa$i = $ip$1$ph55$i;$p$0$ph$ph$lcssa32147$i = $p$0$ph$ph$lcssa32$i;$p$1$ph$ph$lcssa23$i = $p$1$ph$ph50$i;
                break L34;
               }
              }
              $159 = ($$lcssa284&255)<($$lcssa287&255);
              $160 = (($$lcssa281) - ($ip$1$ph55$i))|0;
              if (!($159)) {
               $jp$1$ph944$i$lcssa$lcssa = $jp$1$ph944$i$lcssa;
               break;
              }
              $164 = (($$lcssa281) + 1)|0;
              $165 = ($164>>>0)<($$lcssa322>>>0);
              if ($165) {
               $239 = $164;$jp$1$ph9$ph49$i = $$lcssa281;$p$1$ph$ph50$i = $160;
              } else {
               $ip$0$ph$lcssa143$i = $ip$0$ph$lcssa$i;$ip$1$ph$lcssa$i = $ip$1$ph55$i;$p$0$ph$ph$lcssa32147$i = $p$0$ph$ph$lcssa32$i;$p$1$ph$ph$lcssa23$i = $160;
               break L34;
              }
             }
             $161 = (($jp$1$ph944$i$lcssa$lcssa) + 1)|0;
             $162 = (($jp$1$ph944$i$lcssa$lcssa) + 2)|0;
             $163 = ($162>>>0)<($$lcssa322>>>0);
             if ($163) {
              $237 = $162;$ip$1$ph55$i = $jp$1$ph944$i$lcssa$lcssa;$jp$1$ph56$i = $161;
             } else {
              $ip$0$ph$lcssa143$i = $ip$0$ph$lcssa$i;$ip$1$ph$lcssa$i = $jp$1$ph944$i$lcssa$lcssa;$p$0$ph$ph$lcssa32147$i = $p$0$ph$ph$lcssa32$i;$p$1$ph$ph$lcssa23$i = 1;
              break;
             }
            }
           } else {
            $ip$0$ph$lcssa143$i = -1;$ip$1$ph$lcssa$i = -1;$p$0$ph$ph$lcssa32147$i = 1;$p$1$ph$ph$lcssa23$i = 1;
           }
          } while(0);
          $166 = (($ip$1$ph$lcssa$i) + 1)|0;
          $167 = (($ip$0$ph$lcssa143$i) + 1)|0;
          $168 = ($166>>>0)>($167>>>0);
          $p$1$p$0$i = $168 ? $p$1$ph$ph$lcssa23$i : $p$0$ph$ph$lcssa32147$i;
          $ip$1$ip$0$i = $168 ? $ip$1$ph$lcssa$i : $ip$0$ph$lcssa143$i;
          $169 = (($n) + ($p$1$p$0$i)|0);
          $170 = (($ip$1$ip$0$i) + 1)|0;
          $171 = (_memcmp($n,$169,$170)|0);
          $172 = ($171|0)==(0);
          if ($172) {
           $177 = (($$lcssa322) - ($p$1$p$0$i))|0;
           $mem0$0$i = $177;$p$3$i = $p$1$p$0$i;
          } else {
           $173 = (($$lcssa322) - ($ip$1$ip$0$i))|0;
           $174 = (($173) + -1)|0;
           $175 = ($ip$1$ip$0$i>>>0)>($174>>>0);
           $ip$1$ip$0$$i = $175 ? $ip$1$ip$0$i : $174;
           $176 = (($ip$1$ip$0$$i) + 1)|0;
           $mem0$0$i = 0;$p$3$i = $176;
          }
          $178 = $$lcssa322 | 63;
          $179 = ($mem0$0$i|0)!=(0);
          $180 = (($$lcssa322) - ($p$3$i))|0;
          $$03$i = $3;$mem$0$i = 0;$z$0$i = $3;
          L69: while(1) {
           $181 = $z$0$i;
           $182 = $$03$i;
           $183 = (($181) - ($182))|0;
           $184 = ($183>>>0)<($$lcssa322>>>0);
           do {
            if ($184) {
             $185 = (_memchr($z$0$i,0,$178)|0);
             $186 = ($185|0)==(0|0);
             if ($186) {
              $190 = (($z$0$i) + ($178)|0);
              $z$1$i = $190;
              break;
             } else {
              $187 = $185;
              $188 = (($187) - ($182))|0;
              $189 = ($188>>>0)<($$lcssa322>>>0);
              if ($189) {
               $$0$i = 0;
               break L32;
              } else {
               $z$1$i = $185;
               break;
              }
             }
            } else {
             $z$1$i = $z$0$i;
            }
           } while(0);
           $191 = (($$03$i) + ($l$080$i$lcssa321)|0);
           $192 = HEAP8[$191>>0]|0;
           $div$i = ($192&255) >>> 5;
           $193 = $div$i&255;
           $194 = (($byteset$i) + ($193<<2)|0);
           $195 = HEAP32[$194>>2]|0;
           $196 = $192 & 31;
           $197 = $196&255;
           $198 = 1 << $197;
           $199 = $198 & $195;
           $200 = ($199|0)==(0);
           if ($200) {
            $209 = (($$03$i) + ($$lcssa322)|0);
            $$03$i = $209;$mem$0$i = 0;$z$0$i = $z$1$i;
            continue;
           }
           $201 = $192&255;
           $202 = (($shift$i) + ($201<<2)|0);
           $203 = HEAP32[$202>>2]|0;
           $204 = (($$lcssa322) - ($203))|0;
           $205 = ($$lcssa322|0)==($203|0);
           if (!($205)) {
            $206 = ($mem$0$i|0)!=(0);
            $or$cond$i = $179 & $206;
            $207 = ($204>>>0)<($p$3$i>>>0);
            $or$cond5$i = $or$cond$i & $207;
            $k$2$i = $or$cond5$i ? $180 : $204;
            $208 = (($$03$i) + ($k$2$i)|0);
            $$03$i = $208;$mem$0$i = 0;$z$0$i = $z$1$i;
            continue;
           }
           $210 = ($170>>>0)>($mem$0$i>>>0);
           $211 = $210 ? $170 : $mem$0$i;
           $212 = (($n) + ($211)|0);
           $213 = HEAP8[$212>>0]|0;
           $214 = ($213<<24>>24)==(0);
           L83: do {
            if ($214) {
             $k$4$i = $170;
            } else {
             $$pr$i = $213;$k$338$i = $211;
             while(1) {
              $215 = (($$03$i) + ($k$338$i)|0);
              $216 = HEAP8[$215>>0]|0;
              $217 = ($$pr$i<<24>>24)==($216<<24>>24);
              if (!($217)) {
               $k$338$i$lcssa = $k$338$i;
               break;
              }
              $218 = (($k$338$i) + 1)|0;
              $219 = (($n) + ($218)|0);
              $220 = HEAP8[$219>>0]|0;
              $221 = ($220<<24>>24)==(0);
              if ($221) {
               $k$4$i = $170;
               break L83;
              } else {
               $$pr$i = $220;$k$338$i = $218;
              }
             }
             $222 = (($k$338$i$lcssa) - ($ip$1$ip$0$i))|0;
             $223 = (($$03$i) + ($222)|0);
             $$03$i = $223;$mem$0$i = 0;$z$0$i = $z$1$i;
             continue L69;
            }
           } while(0);
           while(1) {
            $224 = ($k$4$i>>>0)>($mem$0$i>>>0);
            if (!($224)) {
             $$0$i = $$03$i;
             break L32;
            }
            $225 = (($k$4$i) + -1)|0;
            $226 = (($n) + ($225)|0);
            $227 = HEAP8[$226>>0]|0;
            $228 = (($$03$i) + ($225)|0);
            $229 = HEAP8[$228>>0]|0;
            $230 = ($227<<24>>24)==($229<<24>>24);
            if ($230) {
             $k$4$i = $225;
            } else {
             break;
            }
           }
           $231 = (($$03$i) + ($p$3$i)|0);
           $$03$i = $231;$mem$0$i = $mem0$0$i;$z$0$i = $z$1$i;
          }
         }
        } while(0);
        $$0 = $$0$i;
       }
      }
     }
    }
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function ___dup3($old,$new,$flags) {
 $old = $old|0;
 $new = $new|0;
 $flags = $flags|0;
 var $$0 = 0, $$lcssa = 0, $$lcssa12 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_buffer7 = 0, $vararg_ptr1 = 0, $vararg_ptr10 = 0, $vararg_ptr11 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $0 = ($old|0)==($new|0);
 L1: do {
  if ($0) {
   $1 = (___syscall_ret(-22)|0);
   $$0 = $1;
  } else {
   $2 = $flags & 524288;
   $3 = ($2|0)!=(0);
   L4: do {
    if ($3) {
     L5: while(1) {
      HEAP32[$vararg_buffer>>2] = $old;
      $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
      HEAP32[$vararg_ptr1>>2] = $new;
      $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
      HEAP32[$vararg_ptr2>>2] = $flags;
      $4 = (___syscall330(330,($vararg_buffer|0))|0);
      switch ($4|0) {
      case -38:  {
       break L4;
       break;
      }
      case -16:  {
       break;
      }
      default: {
       $$lcssa12 = $4;
       break L5;
      }
      }
     }
     $5 = (___syscall_ret($$lcssa12)|0);
     $$0 = $5;
     break L1;
    }
   } while(0);
   while(1) {
    HEAP32[$vararg_buffer3>>2] = $old;
    $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
    HEAP32[$vararg_ptr6>>2] = $new;
    $6 = (___syscall63(63,($vararg_buffer3|0))|0);
    $7 = ($6|0)==(-16);
    if (!($7)) {
     $$lcssa = $6;
     break;
    }
   }
   if ($3) {
    HEAP32[$vararg_buffer7>>2] = $new;
    $vararg_ptr10 = ((($vararg_buffer7)) + 4|0);
    HEAP32[$vararg_ptr10>>2] = 2;
    $vararg_ptr11 = ((($vararg_buffer7)) + 8|0);
    HEAP32[$vararg_ptr11>>2] = 1;
    (___syscall221(221,($vararg_buffer7|0))|0);
   }
   $8 = (___syscall_ret($$lcssa)|0);
   $$0 = $8;
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _sleep($seconds) {
 $seconds = $seconds|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $tv = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $tv = sp;
 HEAP32[$tv>>2] = $seconds;
 $0 = ((($tv)) + 4|0);
 HEAP32[$0>>2] = 0;
 $1 = (_nanosleep(($tv|0),($tv|0))|0);
 $2 = ($1|0)==(0);
 $3 = HEAP32[$tv>>2]|0;
 $$0 = $2 ? 0 : $3;
 STACKTOP = sp;return ($$0|0);
}
function _scanexp($f,$pok) {
 $f = $f|0;
 $pok = $pok|0;
 var $$lcssa22 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $c$0 = 0, $c$1$be = 0, $c$1$be$lcssa = 0, $c$112 = 0, $c$2$be = 0, $c$2$lcssa = 0, $c$27 = 0, $c$3$be = 0, $neg$0 = 0, $or$cond3 = 0, $x$013 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($f)) + 100|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($1>>>0)<($3>>>0);
 if ($4) {
  $5 = ((($1)) + 1|0);
  HEAP32[$0>>2] = $5;
  $6 = HEAP8[$1>>0]|0;
  $7 = $6&255;
  $10 = $7;
 } else {
  $8 = (___shgetc($f)|0);
  $10 = $8;
 }
 $9 = ($10|0)==(45);
 switch ($10|0) {
 case 43: case 45:  {
  $11 = $9&1;
  $12 = HEAP32[$0>>2]|0;
  $13 = HEAP32[$2>>2]|0;
  $14 = ($12>>>0)<($13>>>0);
  if ($14) {
   $15 = ((($12)) + 1|0);
   HEAP32[$0>>2] = $15;
   $16 = HEAP8[$12>>0]|0;
   $17 = $16&255;
   $20 = $17;
  } else {
   $18 = (___shgetc($f)|0);
   $20 = $18;
  }
  $19 = (($20) + -48)|0;
  $21 = ($19>>>0)>(9);
  $22 = ($pok|0)!=(0);
  $or$cond3 = $22 & $21;
  if ($or$cond3) {
   $23 = HEAP32[$2>>2]|0;
   $24 = ($23|0)==(0|0);
   if ($24) {
    $c$0 = $20;$neg$0 = $11;
   } else {
    $25 = HEAP32[$0>>2]|0;
    $26 = ((($25)) + -1|0);
    HEAP32[$0>>2] = $26;
    $c$0 = $20;$neg$0 = $11;
   }
  } else {
   $c$0 = $20;$neg$0 = $11;
  }
  break;
 }
 default: {
  $c$0 = $10;$neg$0 = 0;
 }
 }
 $27 = (($c$0) + -48)|0;
 $28 = ($27>>>0)>(9);
 if ($28) {
  $29 = HEAP32[$2>>2]|0;
  $30 = ($29|0)==(0|0);
  if ($30) {
   $98 = -2147483648;$99 = 0;
  } else {
   $31 = HEAP32[$0>>2]|0;
   $32 = ((($31)) + -1|0);
   HEAP32[$0>>2] = $32;
   $98 = -2147483648;$99 = 0;
  }
 } else {
  $c$112 = $c$0;$x$013 = 0;
  while(1) {
   $33 = ($x$013*10)|0;
   $34 = (($c$112) + -48)|0;
   $35 = (($34) + ($33))|0;
   $36 = HEAP32[$0>>2]|0;
   $37 = HEAP32[$2>>2]|0;
   $38 = ($36>>>0)<($37>>>0);
   if ($38) {
    $39 = ((($36)) + 1|0);
    HEAP32[$0>>2] = $39;
    $40 = HEAP8[$36>>0]|0;
    $41 = $40&255;
    $c$1$be = $41;
   } else {
    $42 = (___shgetc($f)|0);
    $c$1$be = $42;
   }
   $43 = (($c$1$be) + -48)|0;
   $44 = ($43>>>0)<(10);
   $45 = ($35|0)<(214748364);
   $46 = $44 & $45;
   if ($46) {
    $c$112 = $c$1$be;$x$013 = $35;
   } else {
    $$lcssa22 = $35;$c$1$be$lcssa = $c$1$be;
    break;
   }
  }
  $47 = ($$lcssa22|0)<(0);
  $48 = $47 << 31 >> 31;
  $49 = (($c$1$be$lcssa) + -48)|0;
  $50 = ($49>>>0)<(10);
  if ($50) {
   $53 = $$lcssa22;$54 = $48;$c$27 = $c$1$be$lcssa;
   while(1) {
    $55 = (___muldi3(($53|0),($54|0),10,0)|0);
    $56 = tempRet0;
    $57 = ($c$27|0)<(0);
    $58 = $57 << 31 >> 31;
    $59 = (_i64Add(($c$27|0),($58|0),-48,-1)|0);
    $60 = tempRet0;
    $61 = (_i64Add(($59|0),($60|0),($55|0),($56|0))|0);
    $62 = tempRet0;
    $63 = HEAP32[$0>>2]|0;
    $64 = HEAP32[$2>>2]|0;
    $65 = ($63>>>0)<($64>>>0);
    if ($65) {
     $66 = ((($63)) + 1|0);
     HEAP32[$0>>2] = $66;
     $67 = HEAP8[$63>>0]|0;
     $68 = $67&255;
     $c$2$be = $68;
    } else {
     $69 = (___shgetc($f)|0);
     $c$2$be = $69;
    }
    $70 = (($c$2$be) + -48)|0;
    $71 = ($70>>>0)<(10);
    $72 = ($62|0)<(21474836);
    $73 = ($61>>>0)<(2061584302);
    $74 = ($62|0)==(21474836);
    $75 = $74 & $73;
    $76 = $72 | $75;
    $77 = $71 & $76;
    if ($77) {
     $53 = $61;$54 = $62;$c$27 = $c$2$be;
    } else {
     $92 = $61;$93 = $62;$c$2$lcssa = $c$2$be;
     break;
    }
   }
  } else {
   $92 = $$lcssa22;$93 = $48;$c$2$lcssa = $c$1$be$lcssa;
  }
  $51 = (($c$2$lcssa) + -48)|0;
  $52 = ($51>>>0)<(10);
  if ($52) {
   while(1) {
    $78 = HEAP32[$0>>2]|0;
    $79 = HEAP32[$2>>2]|0;
    $80 = ($78>>>0)<($79>>>0);
    if ($80) {
     $81 = ((($78)) + 1|0);
     HEAP32[$0>>2] = $81;
     $82 = HEAP8[$78>>0]|0;
     $83 = $82&255;
     $c$3$be = $83;
    } else {
     $84 = (___shgetc($f)|0);
     $c$3$be = $84;
    }
    $85 = (($c$3$be) + -48)|0;
    $86 = ($85>>>0)<(10);
    if (!($86)) {
     break;
    }
   }
  }
  $87 = HEAP32[$2>>2]|0;
  $88 = ($87|0)==(0|0);
  if (!($88)) {
   $89 = HEAP32[$0>>2]|0;
   $90 = ((($89)) + -1|0);
   HEAP32[$0>>2] = $90;
  }
  $91 = ($neg$0|0)!=(0);
  $94 = (_i64Subtract(0,0,($92|0),($93|0))|0);
  $95 = tempRet0;
  $96 = $91 ? $94 : $92;
  $97 = $91 ? $95 : $93;
  $98 = $97;$99 = $96;
 }
 tempRet0 = ($98);
 return ($99|0);
}
function _cleanup387($p) {
 $p = $p|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($p)) + 68|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if ($2) {
  ___unlockfile($p);
 }
 return;
}
function _cleanup392($p) {
 $p = $p|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($p)) + 68|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if ($2) {
  ___unlockfile($p);
 }
 return;
}
function ___fflush_unlocked($f) {
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 20|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($f)) + 28|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($1>>>0)>($3>>>0);
 if ($4) {
  $5 = ((($f)) + 36|0);
  $6 = HEAP32[$5>>2]|0;
  (FUNCTION_TABLE_iiii[$6 & 255]($f,0,0)|0);
  $7 = HEAP32[$0>>2]|0;
  $8 = ($7|0)==(0|0);
  if ($8) {
   $$0 = -1;
  } else {
   label = 3;
  }
 } else {
  label = 3;
 }
 if ((label|0) == 3) {
  $9 = ((($f)) + 4|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ((($f)) + 8|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ($10>>>0)<($12>>>0);
  if ($13) {
   $14 = ((($f)) + 40|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = $10;
   $17 = $12;
   $18 = (($16) - ($17))|0;
   (FUNCTION_TABLE_iiii[$15 & 255]($f,$18,1)|0);
  }
  $19 = ((($f)) + 16|0);
  HEAP32[$19>>2] = 0;
  HEAP32[$2>>2] = 0;
  HEAP32[$0>>2] = 0;
  HEAP32[$11>>2] = 0;
  HEAP32[$9>>2] = 0;
  $$0 = 0;
 }
 return ($$0|0);
}
function _printf_core($f,$fmt,$ap,$nl_arg,$nl_type) {
 $f = $f|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 $nl_arg = $nl_arg|0;
 $nl_type = $nl_type|0;
 var $$ = 0, $$$i = 0, $$0 = 0, $$0$i = 0, $$0$lcssa$i = 0, $$012$i = 0, $$013$i = 0, $$03$i33 = 0, $$07$i = 0.0, $$1$i = 0.0, $$114$i = 0, $$2$i = 0.0, $$20$i = 0.0, $$21$i = 0, $$210$$22$i = 0, $$210$$24$i = 0, $$210$i = 0, $$23$i = 0, $$3$i = 0.0, $$31$i = 0;
 var $$311$i = 0, $$4$i = 0.0, $$412$lcssa$i = 0, $$41276$i = 0, $$5$lcssa$i = 0, $$51 = 0, $$587$i = 0, $$a$3$i = 0, $$a$3185$i = 0, $$a$3186$i = 0, $$fl$4 = 0, $$l10n$0 = 0, $$lcssa = 0, $$lcssa159$i = 0, $$lcssa318 = 0, $$lcssa323 = 0, $$lcssa324 = 0, $$lcssa325 = 0, $$lcssa326 = 0, $$lcssa327 = 0;
 var $$lcssa329 = 0, $$lcssa339 = 0, $$lcssa342 = 0.0, $$lcssa344 = 0, $$neg52$i = 0, $$neg53$i = 0, $$p$$i = 0, $$p$0 = 0, $$p$5 = 0, $$p$i = 0, $$pn$i = 0, $$pr$i = 0, $$pr47$i = 0, $$pre = 0, $$pre$i = 0, $$pre$phi184$iZ2D = 0, $$pre179$i = 0, $$pre182$i = 0, $$pre183$i = 0, $$pre193 = 0;
 var $$sum$i = 0, $$sum15$i = 0, $$sum16$i = 0, $$z$3$i = 0, $$z$4$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
 var $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0;
 var $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0;
 var $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0;
 var $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0;
 var $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0;
 var $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0;
 var $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0;
 var $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0;
 var $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0;
 var $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0;
 var $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0;
 var $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0;
 var $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0;
 var $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0.0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0.0;
 var $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0;
 var $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0.0, $392 = 0.0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0;
 var $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0.0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0.0, $412 = 0.0, $413 = 0.0, $414 = 0.0, $415 = 0.0, $416 = 0.0, $417 = 0;
 var $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0;
 var $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0.0, $443 = 0.0, $444 = 0.0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0;
 var $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0;
 var $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0.0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0.0, $486 = 0.0, $487 = 0.0, $488 = 0, $489 = 0, $49 = 0;
 var $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0;
 var $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0;
 var $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0;
 var $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0;
 var $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0;
 var $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0.0, $597 = 0.0, $598 = 0;
 var $599 = 0.0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0;
 var $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0;
 var $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0;
 var $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0;
 var $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0;
 var $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0;
 var $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0;
 var $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0;
 var $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0;
 var $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0;
 var $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $a$0 = 0, $a$1 = 0, $a$1$lcssa$i = 0, $a$1147$i = 0, $a$2 = 0, $a$2$ph$i = 0, $a$3$lcssa$i = 0, $a$3134$i = 0, $a$5$lcssa$i = 0, $a$5109$i = 0, $a$6$i = 0, $a$7$i = 0, $a$8$ph$i = 0, $arg = 0, $arglist_current = 0, $arglist_current2 = 0, $arglist_next = 0, $arglist_next3 = 0;
 var $argpos$0 = 0, $big$i = 0, $buf = 0, $buf$i = 0, $carry$0140$i = 0, $carry3$0128$i = 0, $cnt$0 = 0, $cnt$1 = 0, $cnt$1$lcssa = 0, $d$0$i = 0, $d$0139$i = 0, $d$0141$i = 0, $d$1127$i = 0, $d$2$lcssa$i = 0, $d$2108$i = 0, $d$3$i = 0, $d$482$i = 0, $d$575$i = 0, $d$686$i = 0, $e$0123$i = 0;
 var $e$1$i = 0, $e$2104$i = 0, $e$3$i = 0, $e$4$ph$i = 0, $e2$i = 0, $ebuf0$i = 0, $estr$0$i = 0, $estr$1$lcssa$i = 0, $estr$193$i = 0, $estr$2$i = 0, $exitcond$i = 0, $expanded = 0, $expanded10 = 0, $expanded11 = 0, $expanded13 = 0, $expanded14 = 0, $expanded15 = 0, $expanded4 = 0, $expanded6 = 0, $expanded7 = 0;
 var $expanded8 = 0, $fl$0109 = 0, $fl$062 = 0, $fl$1 = 0, $fl$1$ = 0, $fl$3 = 0, $fl$4 = 0, $fl$6 = 0, $fmt39$lcssa = 0, $fmt39101 = 0, $fmt40 = 0, $fmt41 = 0, $fmt42 = 0, $fmt44 = 0, $fmt44$lcssa321 = 0, $fmt45 = 0, $i$0$lcssa = 0, $i$0$lcssa200 = 0, $i$0114 = 0, $i$0122$i = 0;
 var $i$03$i = 0, $i$03$i25 = 0, $i$1$lcssa$i = 0, $i$1116$i = 0, $i$1125 = 0, $i$2100 = 0, $i$2100$lcssa = 0, $i$2103$i = 0, $i$398 = 0, $i$399$i = 0, $isdigit = 0, $isdigit$i = 0, $isdigit$i27 = 0, $isdigit10 = 0, $isdigit12 = 0, $isdigit2$i = 0, $isdigit2$i23 = 0, $isdigittmp = 0, $isdigittmp$ = 0, $isdigittmp$i = 0;
 var $isdigittmp$i26 = 0, $isdigittmp1$i = 0, $isdigittmp1$i22 = 0, $isdigittmp11 = 0, $isdigittmp4$i = 0, $isdigittmp4$i24 = 0, $isdigittmp9 = 0, $j$0$i = 0, $j$0115$i = 0, $j$0117$i = 0, $j$1100$i = 0, $j$2$i = 0, $l$0 = 0, $l$0$i = 0, $l$1$i = 0, $l$1113 = 0, $l$2 = 0, $l10n$0 = 0, $l10n$0$lcssa = 0, $l10n$0$phi = 0;
 var $l10n$1 = 0, $l10n$2 = 0, $l10n$3 = 0, $mb = 0, $notlhs$i = 0, $notrhs$i = 0, $or$cond = 0, $or$cond$i = 0, $or$cond15 = 0, $or$cond17 = 0, $or$cond20 = 0, $or$cond240 = 0, $or$cond29$i = 0, $or$cond3$not$i = 0, $or$cond6$i = 0, $p$0 = 0, $p$1 = 0, $p$2 = 0, $p$2$ = 0, $p$3 = 0;
 var $p$4198 = 0, $p$5 = 0, $pl$0 = 0, $pl$0$i = 0, $pl$1 = 0, $pl$1$i = 0, $pl$2 = 0, $prefix$0 = 0, $prefix$0$$i = 0, $prefix$0$i = 0, $prefix$1 = 0, $prefix$2 = 0, $r$0$a$8$i = 0, $re$169$i = 0, $round$068$i = 0.0, $round6$1$i = 0.0, $s$0$i = 0, $s$1$i = 0, $s$1$i$lcssa = 0, $s1$0$i = 0;
 var $s7$079$i = 0, $s7$1$i = 0, $s8$0$lcssa$i = 0, $s8$070$i = 0, $s9$0$i = 0, $s9$183$i = 0, $s9$2$i = 0, $small$0$i = 0.0, $small$1$i = 0.0, $st$0 = 0, $st$0$lcssa322 = 0, $storemerge = 0, $storemerge13 = 0, $storemerge8108 = 0, $storemerge860 = 0, $sum = 0, $t$0 = 0, $t$1 = 0, $w$$i = 0, $w$0 = 0;
 var $w$1 = 0, $w$2 = 0, $w$30$i = 0, $wc = 0, $ws$0115 = 0, $ws$1126 = 0, $z$0$i = 0, $z$0$lcssa = 0, $z$0102 = 0, $z$1 = 0, $z$1$lcssa$i = 0, $z$1146$i = 0, $z$2 = 0, $z$2$i = 0, $z$2$i$lcssa = 0, $z$3$lcssa$i = 0, $z$3133$i = 0, $z$4$i = 0, $z$6$$i = 0, $z$6$i = 0;
 var $z$6$i$lcssa = 0, $z$6$ph$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 624|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $big$i = sp + 24|0;
 $e2$i = sp + 16|0;
 $buf$i = sp + 588|0;
 $ebuf0$i = sp + 576|0;
 $arg = sp;
 $buf = sp + 536|0;
 $wc = sp + 8|0;
 $mb = sp + 528|0;
 $0 = ($f|0)!=(0|0);
 $1 = ((($buf)) + 40|0);
 $2 = $1;
 $3 = ((($buf)) + 39|0);
 $4 = ((($wc)) + 4|0);
 $5 = ((($ebuf0$i)) + 12|0);
 $6 = ((($ebuf0$i)) + 11|0);
 $7 = $buf$i;
 $8 = $5;
 $9 = (($8) - ($7))|0;
 $10 = (-2 - ($7))|0;
 $11 = (($8) + 2)|0;
 $12 = ((($big$i)) + 288|0);
 $13 = ((($buf$i)) + 9|0);
 $14 = $13;
 $15 = ((($buf$i)) + 8|0);
 $cnt$0 = 0;$fmt41 = $fmt;$l$0 = 0;$l10n$0 = 0;
 L1: while(1) {
  $16 = ($cnt$0|0)>(-1);
  do {
   if ($16) {
    $17 = (2147483647 - ($cnt$0))|0;
    $18 = ($l$0|0)>($17|0);
    if ($18) {
     $19 = (___errno_location()|0);
     HEAP32[$19>>2] = 75;
     $cnt$1 = -1;
     break;
    } else {
     $20 = (($l$0) + ($cnt$0))|0;
     $cnt$1 = $20;
     break;
    }
   } else {
    $cnt$1 = $cnt$0;
   }
  } while(0);
  $21 = HEAP8[$fmt41>>0]|0;
  $22 = ($21<<24>>24)==(0);
  if ($22) {
   $cnt$1$lcssa = $cnt$1;$l10n$0$lcssa = $l10n$0;
   label = 245;
   break;
  } else {
   $23 = $21;$fmt40 = $fmt41;
  }
  L9: while(1) {
   switch ($23<<24>>24) {
   case 37:  {
    $fmt39101 = $fmt40;$z$0102 = $fmt40;
    label = 9;
    break L9;
    break;
   }
   case 0:  {
    $fmt39$lcssa = $fmt40;$z$0$lcssa = $fmt40;
    break L9;
    break;
   }
   default: {
   }
   }
   $24 = ((($fmt40)) + 1|0);
   $$pre = HEAP8[$24>>0]|0;
   $23 = $$pre;$fmt40 = $24;
  }
  L12: do {
   if ((label|0) == 9) {
    while(1) {
     label = 0;
     $25 = ((($fmt39101)) + 1|0);
     $26 = HEAP8[$25>>0]|0;
     $27 = ($26<<24>>24)==(37);
     if (!($27)) {
      $fmt39$lcssa = $fmt39101;$z$0$lcssa = $z$0102;
      break L12;
     }
     $28 = ((($z$0102)) + 1|0);
     $29 = ((($fmt39101)) + 2|0);
     $30 = HEAP8[$29>>0]|0;
     $31 = ($30<<24>>24)==(37);
     if ($31) {
      $fmt39101 = $29;$z$0102 = $28;
      label = 9;
     } else {
      $fmt39$lcssa = $29;$z$0$lcssa = $28;
      break;
     }
    }
   }
  } while(0);
  $32 = $z$0$lcssa;
  $33 = $fmt41;
  $34 = (($32) - ($33))|0;
  if ($0) {
   $35 = HEAP32[$f>>2]|0;
   $36 = $35 & 32;
   $37 = ($36|0)==(0);
   if ($37) {
    (___fwritex($fmt41,$34,$f)|0);
   }
  }
  $38 = ($z$0$lcssa|0)==($fmt41|0);
  if (!($38)) {
   $l10n$0$phi = $l10n$0;$cnt$0 = $cnt$1;$fmt41 = $fmt39$lcssa;$l$0 = $34;$l10n$0 = $l10n$0$phi;
   continue;
  }
  $39 = ((($fmt39$lcssa)) + 1|0);
  $40 = HEAP8[$39>>0]|0;
  $41 = $40 << 24 >> 24;
  $isdigittmp = (($41) + -48)|0;
  $isdigit = ($isdigittmp>>>0)<(10);
  if ($isdigit) {
   $42 = ((($fmt39$lcssa)) + 2|0);
   $43 = HEAP8[$42>>0]|0;
   $44 = ($43<<24>>24)==(36);
   $45 = ((($fmt39$lcssa)) + 3|0);
   $$51 = $44 ? $45 : $39;
   $$l10n$0 = $44 ? 1 : $l10n$0;
   $isdigittmp$ = $44 ? $isdigittmp : -1;
   $$pre193 = HEAP8[$$51>>0]|0;
   $47 = $$pre193;$argpos$0 = $isdigittmp$;$l10n$1 = $$l10n$0;$storemerge = $$51;
  } else {
   $47 = $40;$argpos$0 = -1;$l10n$1 = $l10n$0;$storemerge = $39;
  }
  $46 = $47 << 24 >> 24;
  $48 = $46 & -32;
  $49 = ($48|0)==(32);
  L25: do {
   if ($49) {
    $51 = $46;$56 = $47;$fl$0109 = 0;$storemerge8108 = $storemerge;
    while(1) {
     $50 = (($51) + -32)|0;
     $52 = 1 << $50;
     $53 = $52 & 75913;
     $54 = ($53|0)==(0);
     if ($54) {
      $66 = $56;$fl$062 = $fl$0109;$storemerge860 = $storemerge8108;
      break L25;
     }
     $55 = $56 << 24 >> 24;
     $57 = (($55) + -32)|0;
     $58 = 1 << $57;
     $59 = $58 | $fl$0109;
     $60 = ((($storemerge8108)) + 1|0);
     $61 = HEAP8[$60>>0]|0;
     $62 = $61 << 24 >> 24;
     $63 = $62 & -32;
     $64 = ($63|0)==(32);
     if ($64) {
      $51 = $62;$56 = $61;$fl$0109 = $59;$storemerge8108 = $60;
     } else {
      $66 = $61;$fl$062 = $59;$storemerge860 = $60;
      break;
     }
    }
   } else {
    $66 = $47;$fl$062 = 0;$storemerge860 = $storemerge;
   }
  } while(0);
  $65 = ($66<<24>>24)==(42);
  do {
   if ($65) {
    $67 = ((($storemerge860)) + 1|0);
    $68 = HEAP8[$67>>0]|0;
    $69 = $68 << 24 >> 24;
    $isdigittmp11 = (($69) + -48)|0;
    $isdigit12 = ($isdigittmp11>>>0)<(10);
    if ($isdigit12) {
     $70 = ((($storemerge860)) + 2|0);
     $71 = HEAP8[$70>>0]|0;
     $72 = ($71<<24>>24)==(36);
     if ($72) {
      $73 = (($nl_type) + ($isdigittmp11<<2)|0);
      HEAP32[$73>>2] = 10;
      $74 = HEAP8[$67>>0]|0;
      $75 = $74 << 24 >> 24;
      $76 = (($75) + -48)|0;
      $77 = (($nl_arg) + ($76<<3)|0);
      $78 = $77;
      $79 = $78;
      $80 = HEAP32[$79>>2]|0;
      $81 = (($78) + 4)|0;
      $82 = $81;
      $83 = HEAP32[$82>>2]|0;
      $84 = ((($storemerge860)) + 3|0);
      $l10n$2 = 1;$storemerge13 = $84;$w$0 = $80;
     } else {
      label = 24;
     }
    } else {
     label = 24;
    }
    if ((label|0) == 24) {
     label = 0;
     $85 = ($l10n$1|0)==(0);
     if (!($85)) {
      $$0 = -1;
      break L1;
     }
     if (!($0)) {
      $fl$1 = $fl$062;$fmt42 = $67;$l10n$3 = 0;$w$1 = 0;
      break;
     }
     $arglist_current = HEAP32[$ap>>2]|0;
     $86 = $arglist_current;
     $87 = ((0) + 4|0);
     $expanded4 = $87;
     $expanded = (($expanded4) - 1)|0;
     $88 = (($86) + ($expanded))|0;
     $89 = ((0) + 4|0);
     $expanded8 = $89;
     $expanded7 = (($expanded8) - 1)|0;
     $expanded6 = $expanded7 ^ -1;
     $90 = $88 & $expanded6;
     $91 = $90;
     $92 = HEAP32[$91>>2]|0;
     $arglist_next = ((($91)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next;
     $l10n$2 = 0;$storemerge13 = $67;$w$0 = $92;
    }
    $93 = ($w$0|0)<(0);
    if ($93) {
     $94 = $fl$062 | 8192;
     $95 = (0 - ($w$0))|0;
     $fl$1 = $94;$fmt42 = $storemerge13;$l10n$3 = $l10n$2;$w$1 = $95;
    } else {
     $fl$1 = $fl$062;$fmt42 = $storemerge13;$l10n$3 = $l10n$2;$w$1 = $w$0;
    }
   } else {
    $96 = $66 << 24 >> 24;
    $isdigittmp1$i = (($96) + -48)|0;
    $isdigit2$i = ($isdigittmp1$i>>>0)<(10);
    if ($isdigit2$i) {
     $100 = $storemerge860;$i$03$i = 0;$isdigittmp4$i = $isdigittmp1$i;
     while(1) {
      $97 = ($i$03$i*10)|0;
      $98 = (($97) + ($isdigittmp4$i))|0;
      $99 = ((($100)) + 1|0);
      $101 = HEAP8[$99>>0]|0;
      $102 = $101 << 24 >> 24;
      $isdigittmp$i = (($102) + -48)|0;
      $isdigit$i = ($isdigittmp$i>>>0)<(10);
      if ($isdigit$i) {
       $100 = $99;$i$03$i = $98;$isdigittmp4$i = $isdigittmp$i;
      } else {
       $$lcssa = $98;$$lcssa318 = $99;
       break;
      }
     }
     $103 = ($$lcssa|0)<(0);
     if ($103) {
      $$0 = -1;
      break L1;
     } else {
      $fl$1 = $fl$062;$fmt42 = $$lcssa318;$l10n$3 = $l10n$1;$w$1 = $$lcssa;
     }
    } else {
     $fl$1 = $fl$062;$fmt42 = $storemerge860;$l10n$3 = $l10n$1;$w$1 = 0;
    }
   }
  } while(0);
  $104 = HEAP8[$fmt42>>0]|0;
  $105 = ($104<<24>>24)==(46);
  L46: do {
   if ($105) {
    $106 = ((($fmt42)) + 1|0);
    $107 = HEAP8[$106>>0]|0;
    $108 = ($107<<24>>24)==(42);
    if (!($108)) {
     $135 = $107 << 24 >> 24;
     $isdigittmp1$i22 = (($135) + -48)|0;
     $isdigit2$i23 = ($isdigittmp1$i22>>>0)<(10);
     if ($isdigit2$i23) {
      $139 = $106;$i$03$i25 = 0;$isdigittmp4$i24 = $isdigittmp1$i22;
     } else {
      $fmt45 = $106;$p$0 = 0;
      break;
     }
     while(1) {
      $136 = ($i$03$i25*10)|0;
      $137 = (($136) + ($isdigittmp4$i24))|0;
      $138 = ((($139)) + 1|0);
      $140 = HEAP8[$138>>0]|0;
      $141 = $140 << 24 >> 24;
      $isdigittmp$i26 = (($141) + -48)|0;
      $isdigit$i27 = ($isdigittmp$i26>>>0)<(10);
      if ($isdigit$i27) {
       $139 = $138;$i$03$i25 = $137;$isdigittmp4$i24 = $isdigittmp$i26;
      } else {
       $fmt45 = $138;$p$0 = $137;
       break L46;
      }
     }
    }
    $109 = ((($fmt42)) + 2|0);
    $110 = HEAP8[$109>>0]|0;
    $111 = $110 << 24 >> 24;
    $isdigittmp9 = (($111) + -48)|0;
    $isdigit10 = ($isdigittmp9>>>0)<(10);
    if ($isdigit10) {
     $112 = ((($fmt42)) + 3|0);
     $113 = HEAP8[$112>>0]|0;
     $114 = ($113<<24>>24)==(36);
     if ($114) {
      $115 = (($nl_type) + ($isdigittmp9<<2)|0);
      HEAP32[$115>>2] = 10;
      $116 = HEAP8[$109>>0]|0;
      $117 = $116 << 24 >> 24;
      $118 = (($117) + -48)|0;
      $119 = (($nl_arg) + ($118<<3)|0);
      $120 = $119;
      $121 = $120;
      $122 = HEAP32[$121>>2]|0;
      $123 = (($120) + 4)|0;
      $124 = $123;
      $125 = HEAP32[$124>>2]|0;
      $126 = ((($fmt42)) + 4|0);
      $fmt45 = $126;$p$0 = $122;
      break;
     }
    }
    $127 = ($l10n$3|0)==(0);
    if (!($127)) {
     $$0 = -1;
     break L1;
    }
    if ($0) {
     $arglist_current2 = HEAP32[$ap>>2]|0;
     $128 = $arglist_current2;
     $129 = ((0) + 4|0);
     $expanded11 = $129;
     $expanded10 = (($expanded11) - 1)|0;
     $130 = (($128) + ($expanded10))|0;
     $131 = ((0) + 4|0);
     $expanded15 = $131;
     $expanded14 = (($expanded15) - 1)|0;
     $expanded13 = $expanded14 ^ -1;
     $132 = $130 & $expanded13;
     $133 = $132;
     $134 = HEAP32[$133>>2]|0;
     $arglist_next3 = ((($133)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next3;
     $fmt45 = $109;$p$0 = $134;
    } else {
     $fmt45 = $109;$p$0 = 0;
    }
   } else {
    $fmt45 = $fmt42;$p$0 = -1;
   }
  } while(0);
  $fmt44 = $fmt45;$st$0 = 0;
  while(1) {
   $142 = HEAP8[$fmt44>>0]|0;
   $143 = $142 << 24 >> 24;
   $144 = (($143) + -65)|0;
   $145 = ($144>>>0)>(57);
   if ($145) {
    $$0 = -1;
    break L1;
   }
   $146 = ((($fmt44)) + 1|0);
   $147 = ((20220 + (($st$0*58)|0)|0) + ($144)|0);
   $148 = HEAP8[$147>>0]|0;
   $149 = $148&255;
   $150 = (($149) + -1)|0;
   $151 = ($150>>>0)<(8);
   if ($151) {
    $fmt44 = $146;$st$0 = $149;
   } else {
    $$lcssa323 = $146;$$lcssa324 = $148;$$lcssa325 = $149;$fmt44$lcssa321 = $fmt44;$st$0$lcssa322 = $st$0;
    break;
   }
  }
  $152 = ($$lcssa324<<24>>24)==(0);
  if ($152) {
   $$0 = -1;
   break;
  }
  $153 = ($$lcssa324<<24>>24)==(19);
  $154 = ($argpos$0|0)>(-1);
  do {
   if ($153) {
    if ($154) {
     $$0 = -1;
     break L1;
    } else {
     label = 52;
    }
   } else {
    if ($154) {
     $155 = (($nl_type) + ($argpos$0<<2)|0);
     HEAP32[$155>>2] = $$lcssa325;
     $156 = (($nl_arg) + ($argpos$0<<3)|0);
     $157 = $156;
     $158 = $157;
     $159 = HEAP32[$158>>2]|0;
     $160 = (($157) + 4)|0;
     $161 = $160;
     $162 = HEAP32[$161>>2]|0;
     $163 = $arg;
     $164 = $163;
     HEAP32[$164>>2] = $159;
     $165 = (($163) + 4)|0;
     $166 = $165;
     HEAP32[$166>>2] = $162;
     label = 52;
     break;
    }
    if (!($0)) {
     $$0 = 0;
     break L1;
    }
    _pop_arg($arg,$$lcssa325,$ap);
   }
  } while(0);
  if ((label|0) == 52) {
   label = 0;
   if (!($0)) {
    $cnt$0 = $cnt$1;$fmt41 = $$lcssa323;$l$0 = $34;$l10n$0 = $l10n$3;
    continue;
   }
  }
  $167 = HEAP8[$fmt44$lcssa321>>0]|0;
  $168 = $167 << 24 >> 24;
  $169 = ($st$0$lcssa322|0)!=(0);
  $170 = $168 & 15;
  $171 = ($170|0)==(3);
  $or$cond15 = $169 & $171;
  $172 = $168 & -33;
  $t$0 = $or$cond15 ? $172 : $168;
  $173 = $fl$1 & 8192;
  $174 = ($173|0)==(0);
  $175 = $fl$1 & -65537;
  $fl$1$ = $174 ? $fl$1 : $175;
  L75: do {
   switch ($t$0|0) {
   case 110:  {
    switch ($st$0$lcssa322|0) {
    case 0:  {
     $182 = HEAP32[$arg>>2]|0;
     HEAP32[$182>>2] = $cnt$1;
     $cnt$0 = $cnt$1;$fmt41 = $$lcssa323;$l$0 = $34;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 1:  {
     $183 = HEAP32[$arg>>2]|0;
     HEAP32[$183>>2] = $cnt$1;
     $cnt$0 = $cnt$1;$fmt41 = $$lcssa323;$l$0 = $34;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 2:  {
     $184 = ($cnt$1|0)<(0);
     $185 = $184 << 31 >> 31;
     $186 = HEAP32[$arg>>2]|0;
     $187 = $186;
     $188 = $187;
     HEAP32[$188>>2] = $cnt$1;
     $189 = (($187) + 4)|0;
     $190 = $189;
     HEAP32[$190>>2] = $185;
     $cnt$0 = $cnt$1;$fmt41 = $$lcssa323;$l$0 = $34;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 3:  {
     $191 = $cnt$1&65535;
     $192 = HEAP32[$arg>>2]|0;
     HEAP16[$192>>1] = $191;
     $cnt$0 = $cnt$1;$fmt41 = $$lcssa323;$l$0 = $34;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 4:  {
     $193 = $cnt$1&255;
     $194 = HEAP32[$arg>>2]|0;
     HEAP8[$194>>0] = $193;
     $cnt$0 = $cnt$1;$fmt41 = $$lcssa323;$l$0 = $34;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 6:  {
     $195 = HEAP32[$arg>>2]|0;
     HEAP32[$195>>2] = $cnt$1;
     $cnt$0 = $cnt$1;$fmt41 = $$lcssa323;$l$0 = $34;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 7:  {
     $196 = ($cnt$1|0)<(0);
     $197 = $196 << 31 >> 31;
     $198 = HEAP32[$arg>>2]|0;
     $199 = $198;
     $200 = $199;
     HEAP32[$200>>2] = $cnt$1;
     $201 = (($199) + 4)|0;
     $202 = $201;
     HEAP32[$202>>2] = $197;
     $cnt$0 = $cnt$1;$fmt41 = $$lcssa323;$l$0 = $34;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    default: {
     $cnt$0 = $cnt$1;$fmt41 = $$lcssa323;$l$0 = $34;$l10n$0 = $l10n$3;
     continue L1;
    }
    }
    break;
   }
   case 112:  {
    $203 = ($p$0>>>0)>(8);
    $204 = $203 ? $p$0 : 8;
    $205 = $fl$1$ | 8;
    $fl$3 = $205;$p$1 = $204;$t$1 = 120;
    label = 64;
    break;
   }
   case 88: case 120:  {
    $fl$3 = $fl$1$;$p$1 = $p$0;$t$1 = $t$0;
    label = 64;
    break;
   }
   case 111:  {
    $243 = $arg;
    $244 = $243;
    $245 = HEAP32[$244>>2]|0;
    $246 = (($243) + 4)|0;
    $247 = $246;
    $248 = HEAP32[$247>>2]|0;
    $249 = ($245|0)==(0);
    $250 = ($248|0)==(0);
    $251 = $249 & $250;
    if ($251) {
     $$0$lcssa$i = $1;
    } else {
     $$03$i33 = $1;$253 = $245;$257 = $248;
     while(1) {
      $252 = $253 & 7;
      $254 = $252 | 48;
      $255 = $254&255;
      $256 = ((($$03$i33)) + -1|0);
      HEAP8[$256>>0] = $255;
      $258 = (_bitshift64Lshr(($253|0),($257|0),3)|0);
      $259 = tempRet0;
      $260 = ($258|0)==(0);
      $261 = ($259|0)==(0);
      $262 = $260 & $261;
      if ($262) {
       $$0$lcssa$i = $256;
       break;
      } else {
       $$03$i33 = $256;$253 = $258;$257 = $259;
      }
     }
    }
    $263 = $fl$1$ & 8;
    $264 = ($263|0)==(0);
    if ($264) {
     $a$0 = $$0$lcssa$i;$fl$4 = $fl$1$;$p$2 = $p$0;$pl$1 = 0;$prefix$1 = 20700;
     label = 77;
    } else {
     $265 = $$0$lcssa$i;
     $266 = (($2) - ($265))|0;
     $267 = (($266) + 1)|0;
     $268 = ($p$0|0)<($267|0);
     $$p$0 = $268 ? $267 : $p$0;
     $a$0 = $$0$lcssa$i;$fl$4 = $fl$1$;$p$2 = $$p$0;$pl$1 = 0;$prefix$1 = 20700;
     label = 77;
    }
    break;
   }
   case 105: case 100:  {
    $269 = $arg;
    $270 = $269;
    $271 = HEAP32[$270>>2]|0;
    $272 = (($269) + 4)|0;
    $273 = $272;
    $274 = HEAP32[$273>>2]|0;
    $275 = ($274|0)<(0);
    if ($275) {
     $276 = (_i64Subtract(0,0,($271|0),($274|0))|0);
     $277 = tempRet0;
     $278 = $arg;
     $279 = $278;
     HEAP32[$279>>2] = $276;
     $280 = (($278) + 4)|0;
     $281 = $280;
     HEAP32[$281>>2] = $277;
     $286 = $276;$287 = $277;$pl$0 = 1;$prefix$0 = 20700;
     label = 76;
     break L75;
    }
    $282 = $fl$1$ & 2048;
    $283 = ($282|0)==(0);
    if ($283) {
     $284 = $fl$1$ & 1;
     $285 = ($284|0)==(0);
     $$ = $285 ? 20700 : (20702);
     $286 = $271;$287 = $274;$pl$0 = $284;$prefix$0 = $$;
     label = 76;
    } else {
     $286 = $271;$287 = $274;$pl$0 = 1;$prefix$0 = (20701);
     label = 76;
    }
    break;
   }
   case 117:  {
    $176 = $arg;
    $177 = $176;
    $178 = HEAP32[$177>>2]|0;
    $179 = (($176) + 4)|0;
    $180 = $179;
    $181 = HEAP32[$180>>2]|0;
    $286 = $178;$287 = $181;$pl$0 = 0;$prefix$0 = 20700;
    label = 76;
    break;
   }
   case 99:  {
    $307 = $arg;
    $308 = $307;
    $309 = HEAP32[$308>>2]|0;
    $310 = (($307) + 4)|0;
    $311 = $310;
    $312 = HEAP32[$311>>2]|0;
    $313 = $309&255;
    HEAP8[$3>>0] = $313;
    $a$2 = $3;$fl$6 = $175;$p$5 = 1;$pl$2 = 0;$prefix$2 = 20700;$z$2 = $1;
    break;
   }
   case 109:  {
    $314 = (___errno_location()|0);
    $315 = HEAP32[$314>>2]|0;
    $316 = (_strerror($315)|0);
    $a$1 = $316;
    label = 82;
    break;
   }
   case 115:  {
    $317 = HEAP32[$arg>>2]|0;
    $318 = ($317|0)!=(0|0);
    $319 = $318 ? $317 : 20710;
    $a$1 = $319;
    label = 82;
    break;
   }
   case 67:  {
    $326 = $arg;
    $327 = $326;
    $328 = HEAP32[$327>>2]|0;
    $329 = (($326) + 4)|0;
    $330 = $329;
    $331 = HEAP32[$330>>2]|0;
    HEAP32[$wc>>2] = $328;
    HEAP32[$4>>2] = 0;
    HEAP32[$arg>>2] = $wc;
    $p$4198 = -1;
    label = 86;
    break;
   }
   case 83:  {
    $332 = ($p$0|0)==(0);
    if ($332) {
     _pad($f,32,$w$1,0,$fl$1$);
     $i$0$lcssa200 = 0;
     label = 98;
    } else {
     $p$4198 = $p$0;
     label = 86;
    }
    break;
   }
   case 65: case 71: case 70: case 69: case 97: case 103: case 102: case 101:  {
    $359 = +HEAPF64[$arg>>3];
    HEAP32[$e2$i>>2] = 0;
    HEAPF64[tempDoublePtr>>3] = $359;$360 = HEAP32[tempDoublePtr>>2]|0;
    $361 = HEAP32[tempDoublePtr+4>>2]|0;
    $362 = ($361|0)<(0);
    if ($362) {
     $363 = -$359;
     $$07$i = $363;$pl$0$i = 1;$prefix$0$i = 20717;
    } else {
     $364 = $fl$1$ & 2048;
     $365 = ($364|0)==(0);
     if ($365) {
      $366 = $fl$1$ & 1;
      $367 = ($366|0)==(0);
      $$$i = $367 ? (20718) : (20723);
      $$07$i = $359;$pl$0$i = $366;$prefix$0$i = $$$i;
     } else {
      $$07$i = $359;$pl$0$i = 1;$prefix$0$i = (20720);
     }
    }
    HEAPF64[tempDoublePtr>>3] = $$07$i;$368 = HEAP32[tempDoublePtr>>2]|0;
    $369 = HEAP32[tempDoublePtr+4>>2]|0;
    $370 = $369 & 2146435072;
    $371 = ($370>>>0)<(2146435072);
    $372 = (0)<(0);
    $373 = ($370|0)==(2146435072);
    $374 = $373 & $372;
    $375 = $371 | $374;
    do {
     if ($375) {
      $391 = (+_frexpl($$07$i,$e2$i));
      $392 = $391 * 2.0;
      $393 = $392 != 0.0;
      if ($393) {
       $394 = HEAP32[$e2$i>>2]|0;
       $395 = (($394) + -1)|0;
       HEAP32[$e2$i>>2] = $395;
      }
      $396 = $t$0 | 32;
      $397 = ($396|0)==(97);
      if ($397) {
       $398 = $t$0 & 32;
       $399 = ($398|0)==(0);
       $400 = ((($prefix$0$i)) + 9|0);
       $prefix$0$$i = $399 ? $prefix$0$i : $400;
       $401 = $pl$0$i | 2;
       $402 = ($p$0>>>0)>(11);
       $403 = (12 - ($p$0))|0;
       $404 = ($403|0)==(0);
       $405 = $402 | $404;
       do {
        if ($405) {
         $$1$i = $392;
        } else {
         $re$169$i = $403;$round$068$i = 8.0;
         while(1) {
          $406 = (($re$169$i) + -1)|0;
          $407 = $round$068$i * 16.0;
          $408 = ($406|0)==(0);
          if ($408) {
           $$lcssa342 = $407;
           break;
          } else {
           $re$169$i = $406;$round$068$i = $407;
          }
         }
         $409 = HEAP8[$prefix$0$$i>>0]|0;
         $410 = ($409<<24>>24)==(45);
         if ($410) {
          $411 = -$392;
          $412 = $411 - $$lcssa342;
          $413 = $$lcssa342 + $412;
          $414 = -$413;
          $$1$i = $414;
          break;
         } else {
          $415 = $392 + $$lcssa342;
          $416 = $415 - $$lcssa342;
          $$1$i = $416;
          break;
         }
        }
       } while(0);
       $417 = HEAP32[$e2$i>>2]|0;
       $418 = ($417|0)<(0);
       $419 = (0 - ($417))|0;
       $420 = $418 ? $419 : $417;
       $421 = ($420|0)<(0);
       $422 = $421 << 31 >> 31;
       $423 = (_fmt_u($420,$422,$5)|0);
       $424 = ($423|0)==($5|0);
       if ($424) {
        HEAP8[$6>>0] = 48;
        $estr$0$i = $6;
       } else {
        $estr$0$i = $423;
       }
       $425 = $417 >> 31;
       $426 = $425 & 2;
       $427 = (($426) + 43)|0;
       $428 = $427&255;
       $429 = ((($estr$0$i)) + -1|0);
       HEAP8[$429>>0] = $428;
       $430 = (($t$0) + 15)|0;
       $431 = $430&255;
       $432 = ((($estr$0$i)) + -2|0);
       HEAP8[$432>>0] = $431;
       $notrhs$i = ($p$0|0)<(1);
       $433 = $fl$1$ & 8;
       $434 = ($433|0)==(0);
       $$2$i = $$1$i;$s$0$i = $buf$i;
       while(1) {
        $435 = (~~(($$2$i)));
        $436 = (20684 + ($435)|0);
        $437 = HEAP8[$436>>0]|0;
        $438 = $437&255;
        $439 = $438 | $398;
        $440 = $439&255;
        $441 = ((($s$0$i)) + 1|0);
        HEAP8[$s$0$i>>0] = $440;
        $442 = (+($435|0));
        $443 = $$2$i - $442;
        $444 = $443 * 16.0;
        $445 = $441;
        $446 = (($445) - ($7))|0;
        $447 = ($446|0)==(1);
        do {
         if ($447) {
          $notlhs$i = $444 == 0.0;
          $or$cond3$not$i = $notrhs$i & $notlhs$i;
          $or$cond$i = $434 & $or$cond3$not$i;
          if ($or$cond$i) {
           $s$1$i = $441;
           break;
          }
          $448 = ((($s$0$i)) + 2|0);
          HEAP8[$441>>0] = 46;
          $s$1$i = $448;
         } else {
          $s$1$i = $441;
         }
        } while(0);
        $449 = $444 != 0.0;
        if ($449) {
         $$2$i = $444;$s$0$i = $s$1$i;
        } else {
         $s$1$i$lcssa = $s$1$i;
         break;
        }
       }
       $450 = ($p$0|0)!=(0);
       $$pre182$i = $s$1$i$lcssa;
       $451 = (($10) + ($$pre182$i))|0;
       $452 = ($451|0)<($p$0|0);
       $or$cond240 = $450 & $452;
       $453 = $432;
       $454 = (($11) + ($p$0))|0;
       $455 = (($454) - ($453))|0;
       $456 = $432;
       $457 = (($9) - ($456))|0;
       $458 = (($457) + ($$pre182$i))|0;
       $l$0$i = $or$cond240 ? $455 : $458;
       $459 = (($l$0$i) + ($401))|0;
       _pad($f,32,$w$1,$459,$fl$1$);
       $460 = HEAP32[$f>>2]|0;
       $461 = $460 & 32;
       $462 = ($461|0)==(0);
       if ($462) {
        (___fwritex($prefix$0$$i,$401,$f)|0);
       }
       $463 = $fl$1$ ^ 65536;
       _pad($f,48,$w$1,$459,$463);
       $464 = (($$pre182$i) - ($7))|0;
       $465 = HEAP32[$f>>2]|0;
       $466 = $465 & 32;
       $467 = ($466|0)==(0);
       if ($467) {
        (___fwritex($buf$i,$464,$f)|0);
       }
       $468 = $432;
       $469 = (($8) - ($468))|0;
       $sum = (($464) + ($469))|0;
       $470 = (($l$0$i) - ($sum))|0;
       _pad($f,48,$470,0,0);
       $471 = HEAP32[$f>>2]|0;
       $472 = $471 & 32;
       $473 = ($472|0)==(0);
       if ($473) {
        (___fwritex($432,$469,$f)|0);
       }
       $474 = $fl$1$ ^ 8192;
       _pad($f,32,$w$1,$459,$474);
       $475 = ($459|0)<($w$1|0);
       $w$$i = $475 ? $w$1 : $459;
       $$0$i = $w$$i;
       break;
      }
      $476 = ($p$0|0)<(0);
      $$p$i = $476 ? 6 : $p$0;
      if ($393) {
       $477 = $392 * 268435456.0;
       $478 = HEAP32[$e2$i>>2]|0;
       $479 = (($478) + -28)|0;
       HEAP32[$e2$i>>2] = $479;
       $$3$i = $477;$481 = $479;
      } else {
       $$pre179$i = HEAP32[$e2$i>>2]|0;
       $$3$i = $392;$481 = $$pre179$i;
      }
      $480 = ($481|0)<(0);
      $$31$i = $480 ? $big$i : $12;
      $482 = $$31$i;
      $$4$i = $$3$i;$z$0$i = $$31$i;
      while(1) {
       $483 = (~~(($$4$i))>>>0);
       HEAP32[$z$0$i>>2] = $483;
       $484 = ((($z$0$i)) + 4|0);
       $485 = (+($483>>>0));
       $486 = $$4$i - $485;
       $487 = $486 * 1.0E+9;
       $488 = $487 != 0.0;
       if ($488) {
        $$4$i = $487;$z$0$i = $484;
       } else {
        $$lcssa326 = $484;
        break;
       }
      }
      $$pr$i = HEAP32[$e2$i>>2]|0;
      $489 = ($$pr$i|0)>(0);
      if ($489) {
       $491 = $$pr$i;$a$1147$i = $$31$i;$z$1146$i = $$lcssa326;
       while(1) {
        $490 = ($491|0)>(29);
        $492 = $490 ? 29 : $491;
        $d$0139$i = ((($z$1146$i)) + -4|0);
        $493 = ($d$0139$i>>>0)<($a$1147$i>>>0);
        do {
         if ($493) {
          $a$2$ph$i = $a$1147$i;
         } else {
          $carry$0140$i = 0;$d$0141$i = $d$0139$i;
          while(1) {
           $494 = HEAP32[$d$0141$i>>2]|0;
           $495 = (_bitshift64Shl(($494|0),0,($492|0))|0);
           $496 = tempRet0;
           $497 = (_i64Add(($495|0),($496|0),($carry$0140$i|0),0)|0);
           $498 = tempRet0;
           $499 = (___uremdi3(($497|0),($498|0),1000000000,0)|0);
           $500 = tempRet0;
           HEAP32[$d$0141$i>>2] = $499;
           $501 = (___udivdi3(($497|0),($498|0),1000000000,0)|0);
           $502 = tempRet0;
           $d$0$i = ((($d$0141$i)) + -4|0);
           $503 = ($d$0$i>>>0)<($a$1147$i>>>0);
           if ($503) {
            $$lcssa327 = $501;
            break;
           } else {
            $carry$0140$i = $501;$d$0141$i = $d$0$i;
           }
          }
          $504 = ($$lcssa327|0)==(0);
          if ($504) {
           $a$2$ph$i = $a$1147$i;
           break;
          }
          $505 = ((($a$1147$i)) + -4|0);
          HEAP32[$505>>2] = $$lcssa327;
          $a$2$ph$i = $505;
         }
        } while(0);
        $z$2$i = $z$1146$i;
        while(1) {
         $506 = ($z$2$i>>>0)>($a$2$ph$i>>>0);
         if (!($506)) {
          $z$2$i$lcssa = $z$2$i;
          break;
         }
         $507 = ((($z$2$i)) + -4|0);
         $508 = HEAP32[$507>>2]|0;
         $509 = ($508|0)==(0);
         if ($509) {
          $z$2$i = $507;
         } else {
          $z$2$i$lcssa = $z$2$i;
          break;
         }
        }
        $510 = HEAP32[$e2$i>>2]|0;
        $511 = (($510) - ($492))|0;
        HEAP32[$e2$i>>2] = $511;
        $512 = ($511|0)>(0);
        if ($512) {
         $491 = $511;$a$1147$i = $a$2$ph$i;$z$1146$i = $z$2$i$lcssa;
        } else {
         $$pr47$i = $511;$a$1$lcssa$i = $a$2$ph$i;$z$1$lcssa$i = $z$2$i$lcssa;
         break;
        }
       }
      } else {
       $$pr47$i = $$pr$i;$a$1$lcssa$i = $$31$i;$z$1$lcssa$i = $$lcssa326;
      }
      $513 = ($$pr47$i|0)<(0);
      if ($513) {
       $514 = (($$p$i) + 25)|0;
       $515 = (($514|0) / 9)&-1;
       $516 = (($515) + 1)|0;
       $517 = ($396|0)==(102);
       $519 = $$pr47$i;$a$3134$i = $a$1$lcssa$i;$z$3133$i = $z$1$lcssa$i;
       while(1) {
        $518 = (0 - ($519))|0;
        $520 = ($518|0)>(9);
        $521 = $520 ? 9 : $518;
        $522 = ($a$3134$i>>>0)<($z$3133$i>>>0);
        do {
         if ($522) {
          $526 = 1 << $521;
          $527 = (($526) + -1)|0;
          $528 = 1000000000 >>> $521;
          $carry3$0128$i = 0;$d$1127$i = $a$3134$i;
          while(1) {
           $529 = HEAP32[$d$1127$i>>2]|0;
           $530 = $529 & $527;
           $531 = $529 >>> $521;
           $532 = (($531) + ($carry3$0128$i))|0;
           HEAP32[$d$1127$i>>2] = $532;
           $533 = Math_imul($530, $528)|0;
           $534 = ((($d$1127$i)) + 4|0);
           $535 = ($534>>>0)<($z$3133$i>>>0);
           if ($535) {
            $carry3$0128$i = $533;$d$1127$i = $534;
           } else {
            $$lcssa329 = $533;
            break;
           }
          }
          $536 = HEAP32[$a$3134$i>>2]|0;
          $537 = ($536|0)==(0);
          $538 = ((($a$3134$i)) + 4|0);
          $$a$3$i = $537 ? $538 : $a$3134$i;
          $539 = ($$lcssa329|0)==(0);
          if ($539) {
           $$a$3186$i = $$a$3$i;$z$4$i = $z$3133$i;
           break;
          }
          $540 = ((($z$3133$i)) + 4|0);
          HEAP32[$z$3133$i>>2] = $$lcssa329;
          $$a$3186$i = $$a$3$i;$z$4$i = $540;
         } else {
          $523 = HEAP32[$a$3134$i>>2]|0;
          $524 = ($523|0)==(0);
          $525 = ((($a$3134$i)) + 4|0);
          $$a$3185$i = $524 ? $525 : $a$3134$i;
          $$a$3186$i = $$a$3185$i;$z$4$i = $z$3133$i;
         }
        } while(0);
        $541 = $517 ? $$31$i : $$a$3186$i;
        $542 = $z$4$i;
        $543 = $541;
        $544 = (($542) - ($543))|0;
        $545 = $544 >> 2;
        $546 = ($545|0)>($516|0);
        $547 = (($541) + ($516<<2)|0);
        $$z$4$i = $546 ? $547 : $z$4$i;
        $548 = HEAP32[$e2$i>>2]|0;
        $549 = (($548) + ($521))|0;
        HEAP32[$e2$i>>2] = $549;
        $550 = ($549|0)<(0);
        if ($550) {
         $519 = $549;$a$3134$i = $$a$3186$i;$z$3133$i = $$z$4$i;
        } else {
         $a$3$lcssa$i = $$a$3186$i;$z$3$lcssa$i = $$z$4$i;
         break;
        }
       }
      } else {
       $a$3$lcssa$i = $a$1$lcssa$i;$z$3$lcssa$i = $z$1$lcssa$i;
      }
      $551 = ($a$3$lcssa$i>>>0)<($z$3$lcssa$i>>>0);
      do {
       if ($551) {
        $552 = $a$3$lcssa$i;
        $553 = (($482) - ($552))|0;
        $554 = $553 >> 2;
        $555 = ($554*9)|0;
        $556 = HEAP32[$a$3$lcssa$i>>2]|0;
        $557 = ($556>>>0)<(10);
        if ($557) {
         $e$1$i = $555;
         break;
        } else {
         $e$0123$i = $555;$i$0122$i = 10;
        }
        while(1) {
         $558 = ($i$0122$i*10)|0;
         $559 = (($e$0123$i) + 1)|0;
         $560 = ($556>>>0)<($558>>>0);
         if ($560) {
          $e$1$i = $559;
          break;
         } else {
          $e$0123$i = $559;$i$0122$i = $558;
         }
        }
       } else {
        $e$1$i = 0;
       }
      } while(0);
      $561 = ($396|0)!=(102);
      $562 = $561 ? $e$1$i : 0;
      $563 = (($$p$i) - ($562))|0;
      $564 = ($396|0)==(103);
      $565 = ($$p$i|0)!=(0);
      $566 = $565 & $564;
      $$neg52$i = $566 << 31 >> 31;
      $567 = (($563) + ($$neg52$i))|0;
      $568 = $z$3$lcssa$i;
      $569 = (($568) - ($482))|0;
      $570 = $569 >> 2;
      $571 = ($570*9)|0;
      $572 = (($571) + -9)|0;
      $573 = ($567|0)<($572|0);
      if ($573) {
       $574 = (($567) + 9216)|0;
       $575 = (($574|0) / 9)&-1;
       $$sum$i = (($575) + -1023)|0;
       $576 = (($$31$i) + ($$sum$i<<2)|0);
       $577 = (($574|0) % 9)&-1;
       $j$0115$i = (($577) + 1)|0;
       $578 = ($j$0115$i|0)<(9);
       if ($578) {
        $i$1116$i = 10;$j$0117$i = $j$0115$i;
        while(1) {
         $579 = ($i$1116$i*10)|0;
         $j$0$i = (($j$0117$i) + 1)|0;
         $exitcond$i = ($j$0$i|0)==(9);
         if ($exitcond$i) {
          $i$1$lcssa$i = $579;
          break;
         } else {
          $i$1116$i = $579;$j$0117$i = $j$0$i;
         }
        }
       } else {
        $i$1$lcssa$i = 10;
       }
       $580 = HEAP32[$576>>2]|0;
       $581 = (($580>>>0) % ($i$1$lcssa$i>>>0))&-1;
       $582 = ($581|0)==(0);
       if ($582) {
        $$sum15$i = (($575) + -1022)|0;
        $583 = (($$31$i) + ($$sum15$i<<2)|0);
        $584 = ($583|0)==($z$3$lcssa$i|0);
        if ($584) {
         $a$7$i = $a$3$lcssa$i;$d$3$i = $576;$e$3$i = $e$1$i;
        } else {
         label = 163;
        }
       } else {
        label = 163;
       }
       do {
        if ((label|0) == 163) {
         label = 0;
         $585 = (($580>>>0) / ($i$1$lcssa$i>>>0))&-1;
         $586 = $585 & 1;
         $587 = ($586|0)==(0);
         $$20$i = $587 ? 9007199254740992.0 : 9007199254740994.0;
         $588 = (($i$1$lcssa$i|0) / 2)&-1;
         $589 = ($581>>>0)<($588>>>0);
         do {
          if ($589) {
           $small$0$i = 0.5;
          } else {
           $590 = ($581|0)==($588|0);
           if ($590) {
            $$sum16$i = (($575) + -1022)|0;
            $591 = (($$31$i) + ($$sum16$i<<2)|0);
            $592 = ($591|0)==($z$3$lcssa$i|0);
            if ($592) {
             $small$0$i = 1.0;
             break;
            }
           }
           $small$0$i = 1.5;
          }
         } while(0);
         $593 = ($pl$0$i|0)==(0);
         do {
          if ($593) {
           $round6$1$i = $$20$i;$small$1$i = $small$0$i;
          } else {
           $594 = HEAP8[$prefix$0$i>>0]|0;
           $595 = ($594<<24>>24)==(45);
           if (!($595)) {
            $round6$1$i = $$20$i;$small$1$i = $small$0$i;
            break;
           }
           $596 = -$$20$i;
           $597 = -$small$0$i;
           $round6$1$i = $596;$small$1$i = $597;
          }
         } while(0);
         $598 = (($580) - ($581))|0;
         HEAP32[$576>>2] = $598;
         $599 = $round6$1$i + $small$1$i;
         $600 = $599 != $round6$1$i;
         if (!($600)) {
          $a$7$i = $a$3$lcssa$i;$d$3$i = $576;$e$3$i = $e$1$i;
          break;
         }
         $601 = (($598) + ($i$1$lcssa$i))|0;
         HEAP32[$576>>2] = $601;
         $602 = ($601>>>0)>(999999999);
         if ($602) {
          $a$5109$i = $a$3$lcssa$i;$d$2108$i = $576;
          while(1) {
           $603 = ((($d$2108$i)) + -4|0);
           HEAP32[$d$2108$i>>2] = 0;
           $604 = ($603>>>0)<($a$5109$i>>>0);
           if ($604) {
            $605 = ((($a$5109$i)) + -4|0);
            HEAP32[$605>>2] = 0;
            $a$6$i = $605;
           } else {
            $a$6$i = $a$5109$i;
           }
           $606 = HEAP32[$603>>2]|0;
           $607 = (($606) + 1)|0;
           HEAP32[$603>>2] = $607;
           $608 = ($607>>>0)>(999999999);
           if ($608) {
            $a$5109$i = $a$6$i;$d$2108$i = $603;
           } else {
            $a$5$lcssa$i = $a$6$i;$d$2$lcssa$i = $603;
            break;
           }
          }
         } else {
          $a$5$lcssa$i = $a$3$lcssa$i;$d$2$lcssa$i = $576;
         }
         $609 = $a$5$lcssa$i;
         $610 = (($482) - ($609))|0;
         $611 = $610 >> 2;
         $612 = ($611*9)|0;
         $613 = HEAP32[$a$5$lcssa$i>>2]|0;
         $614 = ($613>>>0)<(10);
         if ($614) {
          $a$7$i = $a$5$lcssa$i;$d$3$i = $d$2$lcssa$i;$e$3$i = $612;
          break;
         } else {
          $e$2104$i = $612;$i$2103$i = 10;
         }
         while(1) {
          $615 = ($i$2103$i*10)|0;
          $616 = (($e$2104$i) + 1)|0;
          $617 = ($613>>>0)<($615>>>0);
          if ($617) {
           $a$7$i = $a$5$lcssa$i;$d$3$i = $d$2$lcssa$i;$e$3$i = $616;
           break;
          } else {
           $e$2104$i = $616;$i$2103$i = $615;
          }
         }
        }
       } while(0);
       $618 = ((($d$3$i)) + 4|0);
       $619 = ($z$3$lcssa$i>>>0)>($618>>>0);
       $$z$3$i = $619 ? $618 : $z$3$lcssa$i;
       $a$8$ph$i = $a$7$i;$e$4$ph$i = $e$3$i;$z$6$ph$i = $$z$3$i;
      } else {
       $a$8$ph$i = $a$3$lcssa$i;$e$4$ph$i = $e$1$i;$z$6$ph$i = $z$3$lcssa$i;
      }
      $620 = (0 - ($e$4$ph$i))|0;
      $z$6$i = $z$6$ph$i;
      while(1) {
       $621 = ($z$6$i>>>0)>($a$8$ph$i>>>0);
       if (!($621)) {
        $$lcssa159$i = 0;$z$6$i$lcssa = $z$6$i;
        break;
       }
       $622 = ((($z$6$i)) + -4|0);
       $623 = HEAP32[$622>>2]|0;
       $624 = ($623|0)==(0);
       if ($624) {
        $z$6$i = $622;
       } else {
        $$lcssa159$i = 1;$z$6$i$lcssa = $z$6$i;
        break;
       }
      }
      do {
       if ($564) {
        $625 = $565&1;
        $626 = $625 ^ 1;
        $$p$$i = (($626) + ($$p$i))|0;
        $627 = ($$p$$i|0)>($e$4$ph$i|0);
        $628 = ($e$4$ph$i|0)>(-5);
        $or$cond6$i = $627 & $628;
        if ($or$cond6$i) {
         $629 = (($t$0) + -1)|0;
         $$neg53$i = (($$p$$i) + -1)|0;
         $630 = (($$neg53$i) - ($e$4$ph$i))|0;
         $$013$i = $629;$$210$i = $630;
        } else {
         $631 = (($t$0) + -2)|0;
         $632 = (($$p$$i) + -1)|0;
         $$013$i = $631;$$210$i = $632;
        }
        $633 = $fl$1$ & 8;
        $634 = ($633|0)==(0);
        if (!($634)) {
         $$114$i = $$013$i;$$311$i = $$210$i;$$pre$phi184$iZ2D = $633;
         break;
        }
        do {
         if ($$lcssa159$i) {
          $635 = ((($z$6$i$lcssa)) + -4|0);
          $636 = HEAP32[$635>>2]|0;
          $637 = ($636|0)==(0);
          if ($637) {
           $j$2$i = 9;
           break;
          }
          $638 = (($636>>>0) % 10)&-1;
          $639 = ($638|0)==(0);
          if ($639) {
           $i$399$i = 10;$j$1100$i = 0;
          } else {
           $j$2$i = 0;
           break;
          }
          while(1) {
           $640 = ($i$399$i*10)|0;
           $641 = (($j$1100$i) + 1)|0;
           $642 = (($636>>>0) % ($640>>>0))&-1;
           $643 = ($642|0)==(0);
           if ($643) {
            $i$399$i = $640;$j$1100$i = $641;
           } else {
            $j$2$i = $641;
            break;
           }
          }
         } else {
          $j$2$i = 9;
         }
        } while(0);
        $644 = $$013$i | 32;
        $645 = ($644|0)==(102);
        $646 = $z$6$i$lcssa;
        $647 = (($646) - ($482))|0;
        $648 = $647 >> 2;
        $649 = ($648*9)|0;
        $650 = (($649) + -9)|0;
        if ($645) {
         $651 = (($650) - ($j$2$i))|0;
         $652 = ($651|0)<(0);
         $$21$i = $652 ? 0 : $651;
         $653 = ($$210$i|0)<($$21$i|0);
         $$210$$22$i = $653 ? $$210$i : $$21$i;
         $$114$i = $$013$i;$$311$i = $$210$$22$i;$$pre$phi184$iZ2D = 0;
         break;
        } else {
         $654 = (($650) + ($e$4$ph$i))|0;
         $655 = (($654) - ($j$2$i))|0;
         $656 = ($655|0)<(0);
         $$23$i = $656 ? 0 : $655;
         $657 = ($$210$i|0)<($$23$i|0);
         $$210$$24$i = $657 ? $$210$i : $$23$i;
         $$114$i = $$013$i;$$311$i = $$210$$24$i;$$pre$phi184$iZ2D = 0;
         break;
        }
       } else {
        $$pre183$i = $fl$1$ & 8;
        $$114$i = $t$0;$$311$i = $$p$i;$$pre$phi184$iZ2D = $$pre183$i;
       }
      } while(0);
      $658 = $$311$i | $$pre$phi184$iZ2D;
      $659 = ($658|0)!=(0);
      $660 = $659&1;
      $661 = $$114$i | 32;
      $662 = ($661|0)==(102);
      if ($662) {
       $663 = ($e$4$ph$i|0)>(0);
       $664 = $663 ? $e$4$ph$i : 0;
       $$pn$i = $664;$estr$2$i = 0;
      } else {
       $665 = ($e$4$ph$i|0)<(0);
       $666 = $665 ? $620 : $e$4$ph$i;
       $667 = ($666|0)<(0);
       $668 = $667 << 31 >> 31;
       $669 = (_fmt_u($666,$668,$5)|0);
       $670 = $669;
       $671 = (($8) - ($670))|0;
       $672 = ($671|0)<(2);
       if ($672) {
        $estr$193$i = $669;
        while(1) {
         $673 = ((($estr$193$i)) + -1|0);
         HEAP8[$673>>0] = 48;
         $674 = $673;
         $675 = (($8) - ($674))|0;
         $676 = ($675|0)<(2);
         if ($676) {
          $estr$193$i = $673;
         } else {
          $estr$1$lcssa$i = $673;
          break;
         }
        }
       } else {
        $estr$1$lcssa$i = $669;
       }
       $677 = $e$4$ph$i >> 31;
       $678 = $677 & 2;
       $679 = (($678) + 43)|0;
       $680 = $679&255;
       $681 = ((($estr$1$lcssa$i)) + -1|0);
       HEAP8[$681>>0] = $680;
       $682 = $$114$i&255;
       $683 = ((($estr$1$lcssa$i)) + -2|0);
       HEAP8[$683>>0] = $682;
       $684 = $683;
       $685 = (($8) - ($684))|0;
       $$pn$i = $685;$estr$2$i = $683;
      }
      $686 = (($pl$0$i) + 1)|0;
      $687 = (($686) + ($$311$i))|0;
      $l$1$i = (($687) + ($660))|0;
      $688 = (($l$1$i) + ($$pn$i))|0;
      _pad($f,32,$w$1,$688,$fl$1$);
      $689 = HEAP32[$f>>2]|0;
      $690 = $689 & 32;
      $691 = ($690|0)==(0);
      if ($691) {
       (___fwritex($prefix$0$i,$pl$0$i,$f)|0);
      }
      $692 = $fl$1$ ^ 65536;
      _pad($f,48,$w$1,$688,$692);
      do {
       if ($662) {
        $693 = ($a$8$ph$i>>>0)>($$31$i>>>0);
        $r$0$a$8$i = $693 ? $$31$i : $a$8$ph$i;
        $d$482$i = $r$0$a$8$i;
        while(1) {
         $694 = HEAP32[$d$482$i>>2]|0;
         $695 = (_fmt_u($694,0,$13)|0);
         $696 = ($d$482$i|0)==($r$0$a$8$i|0);
         do {
          if ($696) {
           $700 = ($695|0)==($13|0);
           if (!($700)) {
            $s7$1$i = $695;
            break;
           }
           HEAP8[$15>>0] = 48;
           $s7$1$i = $15;
          } else {
           $697 = ($695>>>0)>($buf$i>>>0);
           if ($697) {
            $s7$079$i = $695;
           } else {
            $s7$1$i = $695;
            break;
           }
           while(1) {
            $698 = ((($s7$079$i)) + -1|0);
            HEAP8[$698>>0] = 48;
            $699 = ($698>>>0)>($buf$i>>>0);
            if ($699) {
             $s7$079$i = $698;
            } else {
             $s7$1$i = $698;
             break;
            }
           }
          }
         } while(0);
         $701 = HEAP32[$f>>2]|0;
         $702 = $701 & 32;
         $703 = ($702|0)==(0);
         if ($703) {
          $704 = $s7$1$i;
          $705 = (($14) - ($704))|0;
          (___fwritex($s7$1$i,$705,$f)|0);
         }
         $706 = ((($d$482$i)) + 4|0);
         $707 = ($706>>>0)>($$31$i>>>0);
         if ($707) {
          $$lcssa339 = $706;
          break;
         } else {
          $d$482$i = $706;
         }
        }
        $708 = ($658|0)==(0);
        do {
         if (!($708)) {
          $709 = HEAP32[$f>>2]|0;
          $710 = $709 & 32;
          $711 = ($710|0)==(0);
          if (!($711)) {
           break;
          }
          (___fwritex(20752,1,$f)|0);
         }
        } while(0);
        $712 = ($$lcssa339>>>0)<($z$6$i$lcssa>>>0);
        $713 = ($$311$i|0)>(0);
        $714 = $713 & $712;
        if ($714) {
         $$41276$i = $$311$i;$d$575$i = $$lcssa339;
         while(1) {
          $715 = HEAP32[$d$575$i>>2]|0;
          $716 = (_fmt_u($715,0,$13)|0);
          $717 = ($716>>>0)>($buf$i>>>0);
          if ($717) {
           $s8$070$i = $716;
           while(1) {
            $718 = ((($s8$070$i)) + -1|0);
            HEAP8[$718>>0] = 48;
            $719 = ($718>>>0)>($buf$i>>>0);
            if ($719) {
             $s8$070$i = $718;
            } else {
             $s8$0$lcssa$i = $718;
             break;
            }
           }
          } else {
           $s8$0$lcssa$i = $716;
          }
          $720 = HEAP32[$f>>2]|0;
          $721 = $720 & 32;
          $722 = ($721|0)==(0);
          if ($722) {
           $723 = ($$41276$i|0)>(9);
           $724 = $723 ? 9 : $$41276$i;
           (___fwritex($s8$0$lcssa$i,$724,$f)|0);
          }
          $725 = ((($d$575$i)) + 4|0);
          $726 = (($$41276$i) + -9)|0;
          $727 = ($725>>>0)<($z$6$i$lcssa>>>0);
          $728 = ($$41276$i|0)>(9);
          $729 = $728 & $727;
          if ($729) {
           $$41276$i = $726;$d$575$i = $725;
          } else {
           $$412$lcssa$i = $726;
           break;
          }
         }
        } else {
         $$412$lcssa$i = $$311$i;
        }
        $730 = (($$412$lcssa$i) + 9)|0;
        _pad($f,48,$730,9,0);
       } else {
        $731 = ((($a$8$ph$i)) + 4|0);
        $z$6$$i = $$lcssa159$i ? $z$6$i$lcssa : $731;
        $732 = ($$311$i|0)>(-1);
        if ($732) {
         $733 = ($$pre$phi184$iZ2D|0)==(0);
         $$587$i = $$311$i;$d$686$i = $a$8$ph$i;
         while(1) {
          $734 = HEAP32[$d$686$i>>2]|0;
          $735 = (_fmt_u($734,0,$13)|0);
          $736 = ($735|0)==($13|0);
          if ($736) {
           HEAP8[$15>>0] = 48;
           $s9$0$i = $15;
          } else {
           $s9$0$i = $735;
          }
          $737 = ($d$686$i|0)==($a$8$ph$i|0);
          do {
           if ($737) {
            $741 = ((($s9$0$i)) + 1|0);
            $742 = HEAP32[$f>>2]|0;
            $743 = $742 & 32;
            $744 = ($743|0)==(0);
            if ($744) {
             (___fwritex($s9$0$i,1,$f)|0);
            }
            $745 = ($$587$i|0)<(1);
            $or$cond29$i = $733 & $745;
            if ($or$cond29$i) {
             $s9$2$i = $741;
             break;
            }
            $746 = HEAP32[$f>>2]|0;
            $747 = $746 & 32;
            $748 = ($747|0)==(0);
            if (!($748)) {
             $s9$2$i = $741;
             break;
            }
            (___fwritex(20752,1,$f)|0);
            $s9$2$i = $741;
           } else {
            $738 = ($s9$0$i>>>0)>($buf$i>>>0);
            if ($738) {
             $s9$183$i = $s9$0$i;
            } else {
             $s9$2$i = $s9$0$i;
             break;
            }
            while(1) {
             $739 = ((($s9$183$i)) + -1|0);
             HEAP8[$739>>0] = 48;
             $740 = ($739>>>0)>($buf$i>>>0);
             if ($740) {
              $s9$183$i = $739;
             } else {
              $s9$2$i = $739;
              break;
             }
            }
           }
          } while(0);
          $749 = $s9$2$i;
          $750 = (($14) - ($749))|0;
          $751 = HEAP32[$f>>2]|0;
          $752 = $751 & 32;
          $753 = ($752|0)==(0);
          if ($753) {
           $754 = ($$587$i|0)>($750|0);
           $755 = $754 ? $750 : $$587$i;
           (___fwritex($s9$2$i,$755,$f)|0);
          }
          $756 = (($$587$i) - ($750))|0;
          $757 = ((($d$686$i)) + 4|0);
          $758 = ($757>>>0)<($z$6$$i>>>0);
          $759 = ($756|0)>(-1);
          $760 = $758 & $759;
          if ($760) {
           $$587$i = $756;$d$686$i = $757;
          } else {
           $$5$lcssa$i = $756;
           break;
          }
         }
        } else {
         $$5$lcssa$i = $$311$i;
        }
        $761 = (($$5$lcssa$i) + 18)|0;
        _pad($f,48,$761,18,0);
        $762 = HEAP32[$f>>2]|0;
        $763 = $762 & 32;
        $764 = ($763|0)==(0);
        if (!($764)) {
         break;
        }
        $765 = $estr$2$i;
        $766 = (($8) - ($765))|0;
        (___fwritex($estr$2$i,$766,$f)|0);
       }
      } while(0);
      $767 = $fl$1$ ^ 8192;
      _pad($f,32,$w$1,$688,$767);
      $768 = ($688|0)<($w$1|0);
      $w$30$i = $768 ? $w$1 : $688;
      $$0$i = $w$30$i;
     } else {
      $376 = $t$0 & 32;
      $377 = ($376|0)!=(0);
      $378 = $377 ? 20736 : 20740;
      $379 = ($$07$i != $$07$i) | (0.0 != 0.0);
      $380 = $377 ? 20744 : 20748;
      $pl$1$i = $379 ? 0 : $pl$0$i;
      $s1$0$i = $379 ? $380 : $378;
      $381 = (($pl$1$i) + 3)|0;
      _pad($f,32,$w$1,$381,$175);
      $382 = HEAP32[$f>>2]|0;
      $383 = $382 & 32;
      $384 = ($383|0)==(0);
      if ($384) {
       (___fwritex($prefix$0$i,$pl$1$i,$f)|0);
       $$pre$i = HEAP32[$f>>2]|0;
       $386 = $$pre$i;
      } else {
       $386 = $382;
      }
      $385 = $386 & 32;
      $387 = ($385|0)==(0);
      if ($387) {
       (___fwritex($s1$0$i,3,$f)|0);
      }
      $388 = $fl$1$ ^ 8192;
      _pad($f,32,$w$1,$381,$388);
      $389 = ($381|0)<($w$1|0);
      $390 = $389 ? $w$1 : $381;
      $$0$i = $390;
     }
    } while(0);
    $cnt$0 = $cnt$1;$fmt41 = $$lcssa323;$l$0 = $$0$i;$l10n$0 = $l10n$3;
    continue L1;
    break;
   }
   default: {
    $a$2 = $fmt41;$fl$6 = $fl$1$;$p$5 = $p$0;$pl$2 = 0;$prefix$2 = 20700;$z$2 = $1;
   }
   }
  } while(0);
  L313: do {
   if ((label|0) == 64) {
    label = 0;
    $206 = $arg;
    $207 = $206;
    $208 = HEAP32[$207>>2]|0;
    $209 = (($206) + 4)|0;
    $210 = $209;
    $211 = HEAP32[$210>>2]|0;
    $212 = $t$1 & 32;
    $213 = ($208|0)==(0);
    $214 = ($211|0)==(0);
    $215 = $213 & $214;
    if ($215) {
     $a$0 = $1;$fl$4 = $fl$3;$p$2 = $p$1;$pl$1 = 0;$prefix$1 = 20700;
     label = 77;
    } else {
     $$012$i = $1;$217 = $208;$224 = $211;
     while(1) {
      $216 = $217 & 15;
      $218 = (20684 + ($216)|0);
      $219 = HEAP8[$218>>0]|0;
      $220 = $219&255;
      $221 = $220 | $212;
      $222 = $221&255;
      $223 = ((($$012$i)) + -1|0);
      HEAP8[$223>>0] = $222;
      $225 = (_bitshift64Lshr(($217|0),($224|0),4)|0);
      $226 = tempRet0;
      $227 = ($225|0)==(0);
      $228 = ($226|0)==(0);
      $229 = $227 & $228;
      if ($229) {
       $$lcssa344 = $223;
       break;
      } else {
       $$012$i = $223;$217 = $225;$224 = $226;
      }
     }
     $230 = $arg;
     $231 = $230;
     $232 = HEAP32[$231>>2]|0;
     $233 = (($230) + 4)|0;
     $234 = $233;
     $235 = HEAP32[$234>>2]|0;
     $236 = ($232|0)==(0);
     $237 = ($235|0)==(0);
     $238 = $236 & $237;
     $239 = $fl$3 & 8;
     $240 = ($239|0)==(0);
     $or$cond17 = $240 | $238;
     if ($or$cond17) {
      $a$0 = $$lcssa344;$fl$4 = $fl$3;$p$2 = $p$1;$pl$1 = 0;$prefix$1 = 20700;
      label = 77;
     } else {
      $241 = $t$1 >> 4;
      $242 = (20700 + ($241)|0);
      $a$0 = $$lcssa344;$fl$4 = $fl$3;$p$2 = $p$1;$pl$1 = 2;$prefix$1 = $242;
      label = 77;
     }
    }
   }
   else if ((label|0) == 76) {
    label = 0;
    $288 = (_fmt_u($286,$287,$1)|0);
    $a$0 = $288;$fl$4 = $fl$1$;$p$2 = $p$0;$pl$1 = $pl$0;$prefix$1 = $prefix$0;
    label = 77;
   }
   else if ((label|0) == 82) {
    label = 0;
    $320 = (_memchr($a$1,0,$p$0)|0);
    $321 = ($320|0)==(0|0);
    $322 = $320;
    $323 = $a$1;
    $324 = (($322) - ($323))|0;
    $325 = (($a$1) + ($p$0)|0);
    $z$1 = $321 ? $325 : $320;
    $p$3 = $321 ? $p$0 : $324;
    $a$2 = $a$1;$fl$6 = $175;$p$5 = $p$3;$pl$2 = 0;$prefix$2 = 20700;$z$2 = $z$1;
   }
   else if ((label|0) == 86) {
    label = 0;
    $333 = HEAP32[$arg>>2]|0;
    $i$0114 = 0;$l$1113 = 0;$ws$0115 = $333;
    while(1) {
     $334 = HEAP32[$ws$0115>>2]|0;
     $335 = ($334|0)==(0);
     if ($335) {
      $i$0$lcssa = $i$0114;$l$2 = $l$1113;
      break;
     }
     $336 = (_wctomb($mb,$334)|0);
     $337 = ($336|0)<(0);
     $338 = (($p$4198) - ($i$0114))|0;
     $339 = ($336>>>0)>($338>>>0);
     $or$cond20 = $337 | $339;
     if ($or$cond20) {
      $i$0$lcssa = $i$0114;$l$2 = $336;
      break;
     }
     $340 = ((($ws$0115)) + 4|0);
     $341 = (($336) + ($i$0114))|0;
     $342 = ($p$4198>>>0)>($341>>>0);
     if ($342) {
      $i$0114 = $341;$l$1113 = $336;$ws$0115 = $340;
     } else {
      $i$0$lcssa = $341;$l$2 = $336;
      break;
     }
    }
    $343 = ($l$2|0)<(0);
    if ($343) {
     $$0 = -1;
     break L1;
    }
    _pad($f,32,$w$1,$i$0$lcssa,$fl$1$);
    $344 = ($i$0$lcssa|0)==(0);
    if ($344) {
     $i$0$lcssa200 = 0;
     label = 98;
    } else {
     $345 = HEAP32[$arg>>2]|0;
     $i$1125 = 0;$ws$1126 = $345;
     while(1) {
      $346 = HEAP32[$ws$1126>>2]|0;
      $347 = ($346|0)==(0);
      if ($347) {
       $i$0$lcssa200 = $i$0$lcssa;
       label = 98;
       break L313;
      }
      $348 = ((($ws$1126)) + 4|0);
      $349 = (_wctomb($mb,$346)|0);
      $350 = (($349) + ($i$1125))|0;
      $351 = ($350|0)>($i$0$lcssa|0);
      if ($351) {
       $i$0$lcssa200 = $i$0$lcssa;
       label = 98;
       break L313;
      }
      $352 = HEAP32[$f>>2]|0;
      $353 = $352 & 32;
      $354 = ($353|0)==(0);
      if ($354) {
       (___fwritex($mb,$349,$f)|0);
      }
      $355 = ($350>>>0)<($i$0$lcssa>>>0);
      if ($355) {
       $i$1125 = $350;$ws$1126 = $348;
      } else {
       $i$0$lcssa200 = $i$0$lcssa;
       label = 98;
       break;
      }
     }
    }
   }
  } while(0);
  if ((label|0) == 98) {
   label = 0;
   $356 = $fl$1$ ^ 8192;
   _pad($f,32,$w$1,$i$0$lcssa200,$356);
   $357 = ($w$1|0)>($i$0$lcssa200|0);
   $358 = $357 ? $w$1 : $i$0$lcssa200;
   $cnt$0 = $cnt$1;$fmt41 = $$lcssa323;$l$0 = $358;$l10n$0 = $l10n$3;
   continue;
  }
  if ((label|0) == 77) {
   label = 0;
   $289 = ($p$2|0)>(-1);
   $290 = $fl$4 & -65537;
   $$fl$4 = $289 ? $290 : $fl$4;
   $291 = $arg;
   $292 = $291;
   $293 = HEAP32[$292>>2]|0;
   $294 = (($291) + 4)|0;
   $295 = $294;
   $296 = HEAP32[$295>>2]|0;
   $297 = ($293|0)!=(0);
   $298 = ($296|0)!=(0);
   $299 = $297 | $298;
   $300 = ($p$2|0)!=(0);
   $or$cond = $300 | $299;
   if ($or$cond) {
    $301 = $a$0;
    $302 = (($2) - ($301))|0;
    $303 = $299&1;
    $304 = $303 ^ 1;
    $305 = (($304) + ($302))|0;
    $306 = ($p$2|0)>($305|0);
    $p$2$ = $306 ? $p$2 : $305;
    $a$2 = $a$0;$fl$6 = $$fl$4;$p$5 = $p$2$;$pl$2 = $pl$1;$prefix$2 = $prefix$1;$z$2 = $1;
   } else {
    $a$2 = $1;$fl$6 = $$fl$4;$p$5 = 0;$pl$2 = $pl$1;$prefix$2 = $prefix$1;$z$2 = $1;
   }
  }
  $769 = $z$2;
  $770 = $a$2;
  $771 = (($769) - ($770))|0;
  $772 = ($p$5|0)<($771|0);
  $$p$5 = $772 ? $771 : $p$5;
  $773 = (($pl$2) + ($$p$5))|0;
  $774 = ($w$1|0)<($773|0);
  $w$2 = $774 ? $773 : $w$1;
  _pad($f,32,$w$2,$773,$fl$6);
  $775 = HEAP32[$f>>2]|0;
  $776 = $775 & 32;
  $777 = ($776|0)==(0);
  if ($777) {
   (___fwritex($prefix$2,$pl$2,$f)|0);
  }
  $778 = $fl$6 ^ 65536;
  _pad($f,48,$w$2,$773,$778);
  _pad($f,48,$$p$5,$771,0);
  $779 = HEAP32[$f>>2]|0;
  $780 = $779 & 32;
  $781 = ($780|0)==(0);
  if ($781) {
   (___fwritex($a$2,$771,$f)|0);
  }
  $782 = $fl$6 ^ 8192;
  _pad($f,32,$w$2,$773,$782);
  $cnt$0 = $cnt$1;$fmt41 = $$lcssa323;$l$0 = $w$2;$l10n$0 = $l10n$3;
 }
 L348: do {
  if ((label|0) == 245) {
   $783 = ($f|0)==(0|0);
   if ($783) {
    $784 = ($l10n$0$lcssa|0)==(0);
    if ($784) {
     $$0 = 0;
    } else {
     $i$2100 = 1;
     while(1) {
      $785 = (($nl_type) + ($i$2100<<2)|0);
      $786 = HEAP32[$785>>2]|0;
      $787 = ($786|0)==(0);
      if ($787) {
       $i$2100$lcssa = $i$2100;
       break;
      }
      $789 = (($nl_arg) + ($i$2100<<3)|0);
      _pop_arg($789,$786,$ap);
      $790 = (($i$2100) + 1)|0;
      $791 = ($790|0)<(10);
      if ($791) {
       $i$2100 = $790;
      } else {
       $$0 = 1;
       break L348;
      }
     }
     $788 = ($i$2100$lcssa|0)<(10);
     if ($788) {
      $i$398 = $i$2100$lcssa;
      while(1) {
       $794 = (($nl_type) + ($i$398<<2)|0);
       $795 = HEAP32[$794>>2]|0;
       $796 = ($795|0)==(0);
       $793 = (($i$398) + 1)|0;
       if (!($796)) {
        $$0 = -1;
        break L348;
       }
       $792 = ($793|0)<(10);
       if ($792) {
        $i$398 = $793;
       } else {
        $$0 = 1;
        break;
       }
      }
     } else {
      $$0 = 1;
     }
    }
   } else {
    $$0 = $cnt$1$lcssa;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _strtox($s,$p,$prec) {
 $s = $s|0;
 $p = $p|0;
 $prec = $prec|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $f = 0, dest = 0, label = 0;
 var sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $f = sp;
 dest=$f; stop=dest+112|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $0 = ((($f)) + 4|0);
 HEAP32[$0>>2] = $s;
 $1 = ((($f)) + 8|0);
 HEAP32[$1>>2] = (-1);
 $2 = ((($f)) + 44|0);
 HEAP32[$2>>2] = $s;
 $3 = ((($f)) + 76|0);
 HEAP32[$3>>2] = -1;
 ___shlim($f,0);
 $4 = (+___floatscan($f,$prec,1));
 $5 = ((($f)) + 108|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = HEAP32[$0>>2]|0;
 $8 = HEAP32[$1>>2]|0;
 $9 = $7;
 $10 = $8;
 $11 = (($9) - ($10))|0;
 $12 = (($11) + ($6))|0;
 $13 = ($p|0)==(0|0);
 if (!($13)) {
  $14 = ($12|0)!=(0);
  $15 = (($s) + ($12)|0);
  $16 = $14 ? $15 : $s;
  HEAP32[$p>>2] = $16;
 }
 STACKTOP = sp;return (+$4);
}
function _sn_write($f,$s,$l) {
 $f = $f|0;
 $s = $s|0;
 $l = $l|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $l$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($f)) + 20|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $1;
 $5 = $3;
 $6 = (($4) - ($5))|0;
 $7 = ($6>>>0)>($l>>>0);
 $l$ = $7 ? $l : $6;
 _memcpy(($3|0),($s|0),($l$|0))|0;
 $8 = HEAP32[$2>>2]|0;
 $9 = (($8) + ($l$)|0);
 HEAP32[$2>>2] = $9;
 return ($l|0);
}
function _pop_arg($arg,$type,$ap) {
 $arg = $arg|0;
 $type = $type|0;
 $ap = $ap|0;
 var $$mask = 0, $$mask1 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0.0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0.0;
 var $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $arglist_current = 0, $arglist_current11 = 0, $arglist_current14 = 0, $arglist_current17 = 0;
 var $arglist_current2 = 0, $arglist_current20 = 0, $arglist_current23 = 0, $arglist_current26 = 0, $arglist_current5 = 0, $arglist_current8 = 0, $arglist_next = 0, $arglist_next12 = 0, $arglist_next15 = 0, $arglist_next18 = 0, $arglist_next21 = 0, $arglist_next24 = 0, $arglist_next27 = 0, $arglist_next3 = 0, $arglist_next6 = 0, $arglist_next9 = 0, $expanded = 0, $expanded28 = 0, $expanded30 = 0, $expanded31 = 0;
 var $expanded32 = 0, $expanded34 = 0, $expanded35 = 0, $expanded37 = 0, $expanded38 = 0, $expanded39 = 0, $expanded41 = 0, $expanded42 = 0, $expanded44 = 0, $expanded45 = 0, $expanded46 = 0, $expanded48 = 0, $expanded49 = 0, $expanded51 = 0, $expanded52 = 0, $expanded53 = 0, $expanded55 = 0, $expanded56 = 0, $expanded58 = 0, $expanded59 = 0;
 var $expanded60 = 0, $expanded62 = 0, $expanded63 = 0, $expanded65 = 0, $expanded66 = 0, $expanded67 = 0, $expanded69 = 0, $expanded70 = 0, $expanded72 = 0, $expanded73 = 0, $expanded74 = 0, $expanded76 = 0, $expanded77 = 0, $expanded79 = 0, $expanded80 = 0, $expanded81 = 0, $expanded83 = 0, $expanded84 = 0, $expanded86 = 0, $expanded87 = 0;
 var $expanded88 = 0, $expanded90 = 0, $expanded91 = 0, $expanded93 = 0, $expanded94 = 0, $expanded95 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($type>>>0)>(20);
 L1: do {
  if (!($0)) {
   do {
    switch ($type|0) {
    case 9:  {
     $arglist_current = HEAP32[$ap>>2]|0;
     $1 = $arglist_current;
     $2 = ((0) + 4|0);
     $expanded28 = $2;
     $expanded = (($expanded28) - 1)|0;
     $3 = (($1) + ($expanded))|0;
     $4 = ((0) + 4|0);
     $expanded32 = $4;
     $expanded31 = (($expanded32) - 1)|0;
     $expanded30 = $expanded31 ^ -1;
     $5 = $3 & $expanded30;
     $6 = $5;
     $7 = HEAP32[$6>>2]|0;
     $arglist_next = ((($6)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next;
     HEAP32[$arg>>2] = $7;
     break L1;
     break;
    }
    case 10:  {
     $arglist_current2 = HEAP32[$ap>>2]|0;
     $8 = $arglist_current2;
     $9 = ((0) + 4|0);
     $expanded35 = $9;
     $expanded34 = (($expanded35) - 1)|0;
     $10 = (($8) + ($expanded34))|0;
     $11 = ((0) + 4|0);
     $expanded39 = $11;
     $expanded38 = (($expanded39) - 1)|0;
     $expanded37 = $expanded38 ^ -1;
     $12 = $10 & $expanded37;
     $13 = $12;
     $14 = HEAP32[$13>>2]|0;
     $arglist_next3 = ((($13)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next3;
     $15 = ($14|0)<(0);
     $16 = $15 << 31 >> 31;
     $17 = $arg;
     $18 = $17;
     HEAP32[$18>>2] = $14;
     $19 = (($17) + 4)|0;
     $20 = $19;
     HEAP32[$20>>2] = $16;
     break L1;
     break;
    }
    case 11:  {
     $arglist_current5 = HEAP32[$ap>>2]|0;
     $21 = $arglist_current5;
     $22 = ((0) + 4|0);
     $expanded42 = $22;
     $expanded41 = (($expanded42) - 1)|0;
     $23 = (($21) + ($expanded41))|0;
     $24 = ((0) + 4|0);
     $expanded46 = $24;
     $expanded45 = (($expanded46) - 1)|0;
     $expanded44 = $expanded45 ^ -1;
     $25 = $23 & $expanded44;
     $26 = $25;
     $27 = HEAP32[$26>>2]|0;
     $arglist_next6 = ((($26)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next6;
     $28 = $arg;
     $29 = $28;
     HEAP32[$29>>2] = $27;
     $30 = (($28) + 4)|0;
     $31 = $30;
     HEAP32[$31>>2] = 0;
     break L1;
     break;
    }
    case 12:  {
     $arglist_current8 = HEAP32[$ap>>2]|0;
     $32 = $arglist_current8;
     $33 = ((0) + 8|0);
     $expanded49 = $33;
     $expanded48 = (($expanded49) - 1)|0;
     $34 = (($32) + ($expanded48))|0;
     $35 = ((0) + 8|0);
     $expanded53 = $35;
     $expanded52 = (($expanded53) - 1)|0;
     $expanded51 = $expanded52 ^ -1;
     $36 = $34 & $expanded51;
     $37 = $36;
     $38 = $37;
     $39 = $38;
     $40 = HEAP32[$39>>2]|0;
     $41 = (($38) + 4)|0;
     $42 = $41;
     $43 = HEAP32[$42>>2]|0;
     $arglist_next9 = ((($37)) + 8|0);
     HEAP32[$ap>>2] = $arglist_next9;
     $44 = $arg;
     $45 = $44;
     HEAP32[$45>>2] = $40;
     $46 = (($44) + 4)|0;
     $47 = $46;
     HEAP32[$47>>2] = $43;
     break L1;
     break;
    }
    case 13:  {
     $arglist_current11 = HEAP32[$ap>>2]|0;
     $48 = $arglist_current11;
     $49 = ((0) + 4|0);
     $expanded56 = $49;
     $expanded55 = (($expanded56) - 1)|0;
     $50 = (($48) + ($expanded55))|0;
     $51 = ((0) + 4|0);
     $expanded60 = $51;
     $expanded59 = (($expanded60) - 1)|0;
     $expanded58 = $expanded59 ^ -1;
     $52 = $50 & $expanded58;
     $53 = $52;
     $54 = HEAP32[$53>>2]|0;
     $arglist_next12 = ((($53)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next12;
     $55 = $54&65535;
     $56 = $55 << 16 >> 16;
     $57 = ($56|0)<(0);
     $58 = $57 << 31 >> 31;
     $59 = $arg;
     $60 = $59;
     HEAP32[$60>>2] = $56;
     $61 = (($59) + 4)|0;
     $62 = $61;
     HEAP32[$62>>2] = $58;
     break L1;
     break;
    }
    case 14:  {
     $arglist_current14 = HEAP32[$ap>>2]|0;
     $63 = $arglist_current14;
     $64 = ((0) + 4|0);
     $expanded63 = $64;
     $expanded62 = (($expanded63) - 1)|0;
     $65 = (($63) + ($expanded62))|0;
     $66 = ((0) + 4|0);
     $expanded67 = $66;
     $expanded66 = (($expanded67) - 1)|0;
     $expanded65 = $expanded66 ^ -1;
     $67 = $65 & $expanded65;
     $68 = $67;
     $69 = HEAP32[$68>>2]|0;
     $arglist_next15 = ((($68)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next15;
     $$mask1 = $69 & 65535;
     $70 = $arg;
     $71 = $70;
     HEAP32[$71>>2] = $$mask1;
     $72 = (($70) + 4)|0;
     $73 = $72;
     HEAP32[$73>>2] = 0;
     break L1;
     break;
    }
    case 15:  {
     $arglist_current17 = HEAP32[$ap>>2]|0;
     $74 = $arglist_current17;
     $75 = ((0) + 4|0);
     $expanded70 = $75;
     $expanded69 = (($expanded70) - 1)|0;
     $76 = (($74) + ($expanded69))|0;
     $77 = ((0) + 4|0);
     $expanded74 = $77;
     $expanded73 = (($expanded74) - 1)|0;
     $expanded72 = $expanded73 ^ -1;
     $78 = $76 & $expanded72;
     $79 = $78;
     $80 = HEAP32[$79>>2]|0;
     $arglist_next18 = ((($79)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next18;
     $81 = $80&255;
     $82 = $81 << 24 >> 24;
     $83 = ($82|0)<(0);
     $84 = $83 << 31 >> 31;
     $85 = $arg;
     $86 = $85;
     HEAP32[$86>>2] = $82;
     $87 = (($85) + 4)|0;
     $88 = $87;
     HEAP32[$88>>2] = $84;
     break L1;
     break;
    }
    case 16:  {
     $arglist_current20 = HEAP32[$ap>>2]|0;
     $89 = $arglist_current20;
     $90 = ((0) + 4|0);
     $expanded77 = $90;
     $expanded76 = (($expanded77) - 1)|0;
     $91 = (($89) + ($expanded76))|0;
     $92 = ((0) + 4|0);
     $expanded81 = $92;
     $expanded80 = (($expanded81) - 1)|0;
     $expanded79 = $expanded80 ^ -1;
     $93 = $91 & $expanded79;
     $94 = $93;
     $95 = HEAP32[$94>>2]|0;
     $arglist_next21 = ((($94)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next21;
     $$mask = $95 & 255;
     $96 = $arg;
     $97 = $96;
     HEAP32[$97>>2] = $$mask;
     $98 = (($96) + 4)|0;
     $99 = $98;
     HEAP32[$99>>2] = 0;
     break L1;
     break;
    }
    case 17:  {
     $arglist_current23 = HEAP32[$ap>>2]|0;
     $100 = $arglist_current23;
     $101 = ((0) + 8|0);
     $expanded84 = $101;
     $expanded83 = (($expanded84) - 1)|0;
     $102 = (($100) + ($expanded83))|0;
     $103 = ((0) + 8|0);
     $expanded88 = $103;
     $expanded87 = (($expanded88) - 1)|0;
     $expanded86 = $expanded87 ^ -1;
     $104 = $102 & $expanded86;
     $105 = $104;
     $106 = +HEAPF64[$105>>3];
     $arglist_next24 = ((($105)) + 8|0);
     HEAP32[$ap>>2] = $arglist_next24;
     HEAPF64[$arg>>3] = $106;
     break L1;
     break;
    }
    case 18:  {
     $arglist_current26 = HEAP32[$ap>>2]|0;
     $107 = $arglist_current26;
     $108 = ((0) + 8|0);
     $expanded91 = $108;
     $expanded90 = (($expanded91) - 1)|0;
     $109 = (($107) + ($expanded90))|0;
     $110 = ((0) + 8|0);
     $expanded95 = $110;
     $expanded94 = (($expanded95) - 1)|0;
     $expanded93 = $expanded94 ^ -1;
     $111 = $109 & $expanded93;
     $112 = $111;
     $113 = +HEAPF64[$112>>3];
     $arglist_next27 = ((($112)) + 8|0);
     HEAP32[$ap>>2] = $arglist_next27;
     HEAPF64[$arg>>3] = $113;
     break L1;
     break;
    }
    default: {
     break L1;
    }
    }
   } while(0);
  }
 } while(0);
 return;
}
function _fmt_u($0,$1,$s) {
 $0 = $0|0;
 $1 = $1|0;
 $s = $s|0;
 var $$0$lcssa = 0, $$01$lcssa$off0 = 0, $$05 = 0, $$1$lcssa = 0, $$12 = 0, $$lcssa20 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $y$03 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1>>>0)>(0);
 $3 = ($0>>>0)>(4294967295);
 $4 = ($1|0)==(0);
 $5 = $4 & $3;
 $6 = $2 | $5;
 if ($6) {
  $$05 = $s;$7 = $0;$8 = $1;
  while(1) {
   $9 = (___uremdi3(($7|0),($8|0),10,0)|0);
   $10 = tempRet0;
   $11 = $9 | 48;
   $12 = $11&255;
   $13 = ((($$05)) + -1|0);
   HEAP8[$13>>0] = $12;
   $14 = (___udivdi3(($7|0),($8|0),10,0)|0);
   $15 = tempRet0;
   $16 = ($8>>>0)>(9);
   $17 = ($7>>>0)>(4294967295);
   $18 = ($8|0)==(9);
   $19 = $18 & $17;
   $20 = $16 | $19;
   if ($20) {
    $$05 = $13;$7 = $14;$8 = $15;
   } else {
    $$lcssa20 = $13;$28 = $14;$29 = $15;
    break;
   }
  }
  $$0$lcssa = $$lcssa20;$$01$lcssa$off0 = $28;
 } else {
  $$0$lcssa = $s;$$01$lcssa$off0 = $0;
 }
 $21 = ($$01$lcssa$off0|0)==(0);
 if ($21) {
  $$1$lcssa = $$0$lcssa;
 } else {
  $$12 = $$0$lcssa;$y$03 = $$01$lcssa$off0;
  while(1) {
   $22 = (($y$03>>>0) % 10)&-1;
   $23 = $22 | 48;
   $24 = $23&255;
   $25 = ((($$12)) + -1|0);
   HEAP8[$25>>0] = $24;
   $26 = (($y$03>>>0) / 10)&-1;
   $27 = ($y$03>>>0)<(10);
   if ($27) {
    $$1$lcssa = $25;
    break;
   } else {
    $$12 = $25;$y$03 = $26;
   }
  }
 }
 return ($$1$lcssa|0);
}
function _pad($f,$c,$w,$l,$fl) {
 $f = $f|0;
 $c = $c|0;
 $w = $w|0;
 $l = $l|0;
 $fl = $fl|0;
 var $$0$lcssa6 = 0, $$02 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $or$cond = 0, $pad = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $pad = sp;
 $0 = $fl & 73728;
 $1 = ($0|0)==(0);
 $2 = ($w|0)>($l|0);
 $or$cond = $2 & $1;
 do {
  if ($or$cond) {
   $3 = (($w) - ($l))|0;
   $4 = ($3>>>0)>(256);
   $5 = $4 ? 256 : $3;
   _memset(($pad|0),($c|0),($5|0))|0;
   $6 = ($3>>>0)>(255);
   $7 = HEAP32[$f>>2]|0;
   $8 = $7 & 32;
   $9 = ($8|0)==(0);
   if ($6) {
    $10 = (($w) - ($l))|0;
    $$02 = $3;$17 = $7;$18 = $9;
    while(1) {
     if ($18) {
      (___fwritex($pad,256,$f)|0);
      $$pre = HEAP32[$f>>2]|0;
      $14 = $$pre;
     } else {
      $14 = $17;
     }
     $11 = (($$02) + -256)|0;
     $12 = ($11>>>0)>(255);
     $13 = $14 & 32;
     $15 = ($13|0)==(0);
     if ($12) {
      $$02 = $11;$17 = $14;$18 = $15;
     } else {
      break;
     }
    }
    $16 = $10 & 255;
    if ($15) {
     $$0$lcssa6 = $16;
    } else {
     break;
    }
   } else {
    if ($9) {
     $$0$lcssa6 = $3;
    } else {
     break;
    }
   }
   (___fwritex($pad,$$0$lcssa6,$f)|0);
  }
 } while(0);
 STACKTOP = sp;return;
}
function _malloc($bytes) {
 $bytes = $bytes|0;
 var $$3$i = 0, $$lcssa = 0, $$lcssa211 = 0, $$lcssa215 = 0, $$lcssa216 = 0, $$lcssa217 = 0, $$lcssa219 = 0, $$lcssa222 = 0, $$lcssa224 = 0, $$lcssa226 = 0, $$lcssa228 = 0, $$lcssa230 = 0, $$lcssa232 = 0, $$pre = 0, $$pre$i = 0, $$pre$i$i = 0, $$pre$i22$i = 0, $$pre$i25 = 0, $$pre$phi$i$iZ2D = 0, $$pre$phi$i23$iZ2D = 0;
 var $$pre$phi$i26Z2D = 0, $$pre$phi$iZ2D = 0, $$pre$phi58$i$iZ2D = 0, $$pre$phiZ2D = 0, $$pre105 = 0, $$pre106 = 0, $$pre14$i$i = 0, $$pre43$i = 0, $$pre56$i$i = 0, $$pre57$i$i = 0, $$pre8$i = 0, $$rsize$0$i = 0, $$rsize$3$i = 0, $$sum = 0, $$sum$i$i = 0, $$sum$i$i$i = 0, $$sum$i13$i = 0, $$sum$i14$i = 0, $$sum$i17$i = 0, $$sum$i19$i = 0;
 var $$sum$i2334 = 0, $$sum$i32 = 0, $$sum$i35 = 0, $$sum1 = 0, $$sum1$i = 0, $$sum1$i$i = 0, $$sum1$i15$i = 0, $$sum1$i20$i = 0, $$sum1$i24 = 0, $$sum10 = 0, $$sum10$i = 0, $$sum10$i$i = 0, $$sum11$i = 0, $$sum11$i$i = 0, $$sum1112 = 0, $$sum112$i = 0, $$sum113$i = 0, $$sum114$i = 0, $$sum115$i = 0, $$sum116$i = 0;
 var $$sum117$i = 0, $$sum118$i = 0, $$sum119$i = 0, $$sum12$i = 0, $$sum12$i$i = 0, $$sum120$i = 0, $$sum121$i = 0, $$sum122$i = 0, $$sum123$i = 0, $$sum124$i = 0, $$sum125$i = 0, $$sum13$i = 0, $$sum13$i$i = 0, $$sum14$i$i = 0, $$sum15$i = 0, $$sum15$i$i = 0, $$sum16$i = 0, $$sum16$i$i = 0, $$sum17$i = 0, $$sum17$i$i = 0;
 var $$sum18$i = 0, $$sum1819$i$i = 0, $$sum2 = 0, $$sum2$i = 0, $$sum2$i$i = 0, $$sum2$i$i$i = 0, $$sum2$i16$i = 0, $$sum2$i18$i = 0, $$sum2$i21$i = 0, $$sum20$i$i = 0, $$sum21$i$i = 0, $$sum22$i$i = 0, $$sum23$i$i = 0, $$sum24$i$i = 0, $$sum25$i$i = 0, $$sum27$i$i = 0, $$sum28$i$i = 0, $$sum29$i$i = 0, $$sum3$i = 0, $$sum3$i27 = 0;
 var $$sum30$i$i = 0, $$sum3132$i$i = 0, $$sum34$i$i = 0, $$sum3536$i$i = 0, $$sum3738$i$i = 0, $$sum39$i$i = 0, $$sum4 = 0, $$sum4$i = 0, $$sum4$i$i = 0, $$sum4$i28 = 0, $$sum40$i$i = 0, $$sum41$i$i = 0, $$sum42$i$i = 0, $$sum5$i = 0, $$sum5$i$i = 0, $$sum56 = 0, $$sum6$i = 0, $$sum67$i$i = 0, $$sum7$i = 0, $$sum8$i = 0;
 var $$sum9 = 0, $$sum9$i = 0, $$sum9$i$i = 0, $$tsize$1$i = 0, $$v$0$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0;
 var $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0;
 var $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0;
 var $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0;
 var $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0, $1070 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0;
 var $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0;
 var $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0;
 var $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0;
 var $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0;
 var $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0;
 var $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0;
 var $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0;
 var $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0;
 var $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0;
 var $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0;
 var $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0;
 var $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0;
 var $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0;
 var $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0;
 var $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0;
 var $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0;
 var $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0;
 var $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0;
 var $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0;
 var $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0;
 var $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0;
 var $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0;
 var $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0;
 var $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0;
 var $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0;
 var $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0;
 var $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0;
 var $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0;
 var $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0;
 var $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0;
 var $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0;
 var $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0;
 var $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0;
 var $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0;
 var $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0;
 var $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0;
 var $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0;
 var $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0;
 var $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0;
 var $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0;
 var $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0;
 var $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0;
 var $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0;
 var $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0;
 var $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0;
 var $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0;
 var $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0;
 var $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0;
 var $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $F$0$i$i = 0, $F1$0$i = 0, $F4$0 = 0, $F4$0$i$i = 0;
 var $F5$0$i = 0, $I1$0$i$i = 0, $I7$0$i = 0, $I7$0$i$i = 0, $K12$029$i = 0, $K2$07$i$i = 0, $K8$051$i$i = 0, $R$0$i = 0, $R$0$i$i = 0, $R$0$i$i$lcssa = 0, $R$0$i$lcssa = 0, $R$0$i18 = 0, $R$0$i18$lcssa = 0, $R$1$i = 0, $R$1$i$i = 0, $R$1$i20 = 0, $RP$0$i = 0, $RP$0$i$i = 0, $RP$0$i$i$lcssa = 0, $RP$0$i$lcssa = 0;
 var $RP$0$i17 = 0, $RP$0$i17$lcssa = 0, $T$0$lcssa$i = 0, $T$0$lcssa$i$i = 0, $T$0$lcssa$i25$i = 0, $T$028$i = 0, $T$028$i$lcssa = 0, $T$050$i$i = 0, $T$050$i$i$lcssa = 0, $T$06$i$i = 0, $T$06$i$i$lcssa = 0, $br$0$ph$i = 0, $cond$i = 0, $cond$i$i = 0, $cond$i21 = 0, $exitcond$i$i = 0, $i$02$i$i = 0, $idx$0$i = 0, $mem$0 = 0, $nb$0 = 0;
 var $not$$i = 0, $not$$i$i = 0, $not$$i26$i = 0, $oldfirst$0$i$i = 0, $or$cond$i = 0, $or$cond$i30 = 0, $or$cond1$i = 0, $or$cond19$i = 0, $or$cond2$i = 0, $or$cond3$i = 0, $or$cond5$i = 0, $or$cond57$i = 0, $or$cond6$i = 0, $or$cond8$i = 0, $or$cond9$i = 0, $qsize$0$i$i = 0, $rsize$0$i = 0, $rsize$0$i$lcssa = 0, $rsize$0$i15 = 0, $rsize$1$i = 0;
 var $rsize$2$i = 0, $rsize$3$lcssa$i = 0, $rsize$331$i = 0, $rst$0$i = 0, $rst$1$i = 0, $sizebits$0$i = 0, $sp$0$i$i = 0, $sp$0$i$i$i = 0, $sp$084$i = 0, $sp$084$i$lcssa = 0, $sp$183$i = 0, $sp$183$i$lcssa = 0, $ssize$0$$i = 0, $ssize$0$i = 0, $ssize$1$ph$i = 0, $ssize$2$i = 0, $t$0$i = 0, $t$0$i14 = 0, $t$1$i = 0, $t$2$ph$i = 0;
 var $t$2$v$3$i = 0, $t$230$i = 0, $tbase$255$i = 0, $tsize$0$ph$i = 0, $tsize$0323944$i = 0, $tsize$1$i = 0, $tsize$254$i = 0, $v$0$i = 0, $v$0$i$lcssa = 0, $v$0$i16 = 0, $v$1$i = 0, $v$2$i = 0, $v$3$lcssa$i = 0, $v$3$ph$i = 0, $v$332$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($bytes>>>0)<(245);
 do {
  if ($0) {
   $1 = ($bytes>>>0)<(11);
   $2 = (($bytes) + 11)|0;
   $3 = $2 & -8;
   $4 = $1 ? 16 : $3;
   $5 = $4 >>> 3;
   $6 = HEAP32[2704>>2]|0;
   $7 = $6 >>> $5;
   $8 = $7 & 3;
   $9 = ($8|0)==(0);
   if (!($9)) {
    $10 = $7 & 1;
    $11 = $10 ^ 1;
    $12 = (($11) + ($5))|0;
    $13 = $12 << 1;
    $14 = (2744 + ($13<<2)|0);
    $$sum10 = (($13) + 2)|0;
    $15 = (2744 + ($$sum10<<2)|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = ((($16)) + 8|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ($14|0)==($18|0);
    do {
     if ($19) {
      $20 = 1 << $12;
      $21 = $20 ^ -1;
      $22 = $6 & $21;
      HEAP32[2704>>2] = $22;
     } else {
      $23 = HEAP32[(2720)>>2]|0;
      $24 = ($18>>>0)<($23>>>0);
      if ($24) {
       _abort();
       // unreachable;
      }
      $25 = ((($18)) + 12|0);
      $26 = HEAP32[$25>>2]|0;
      $27 = ($26|0)==($16|0);
      if ($27) {
       HEAP32[$25>>2] = $14;
       HEAP32[$15>>2] = $18;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $28 = $12 << 3;
    $29 = $28 | 3;
    $30 = ((($16)) + 4|0);
    HEAP32[$30>>2] = $29;
    $$sum1112 = $28 | 4;
    $31 = (($16) + ($$sum1112)|0);
    $32 = HEAP32[$31>>2]|0;
    $33 = $32 | 1;
    HEAP32[$31>>2] = $33;
    $mem$0 = $17;
    return ($mem$0|0);
   }
   $34 = HEAP32[(2712)>>2]|0;
   $35 = ($4>>>0)>($34>>>0);
   if ($35) {
    $36 = ($7|0)==(0);
    if (!($36)) {
     $37 = $7 << $5;
     $38 = 2 << $5;
     $39 = (0 - ($38))|0;
     $40 = $38 | $39;
     $41 = $37 & $40;
     $42 = (0 - ($41))|0;
     $43 = $41 & $42;
     $44 = (($43) + -1)|0;
     $45 = $44 >>> 12;
     $46 = $45 & 16;
     $47 = $44 >>> $46;
     $48 = $47 >>> 5;
     $49 = $48 & 8;
     $50 = $49 | $46;
     $51 = $47 >>> $49;
     $52 = $51 >>> 2;
     $53 = $52 & 4;
     $54 = $50 | $53;
     $55 = $51 >>> $53;
     $56 = $55 >>> 1;
     $57 = $56 & 2;
     $58 = $54 | $57;
     $59 = $55 >>> $57;
     $60 = $59 >>> 1;
     $61 = $60 & 1;
     $62 = $58 | $61;
     $63 = $59 >>> $61;
     $64 = (($62) + ($63))|0;
     $65 = $64 << 1;
     $66 = (2744 + ($65<<2)|0);
     $$sum4 = (($65) + 2)|0;
     $67 = (2744 + ($$sum4<<2)|0);
     $68 = HEAP32[$67>>2]|0;
     $69 = ((($68)) + 8|0);
     $70 = HEAP32[$69>>2]|0;
     $71 = ($66|0)==($70|0);
     do {
      if ($71) {
       $72 = 1 << $64;
       $73 = $72 ^ -1;
       $74 = $6 & $73;
       HEAP32[2704>>2] = $74;
       $89 = $34;
      } else {
       $75 = HEAP32[(2720)>>2]|0;
       $76 = ($70>>>0)<($75>>>0);
       if ($76) {
        _abort();
        // unreachable;
       }
       $77 = ((($70)) + 12|0);
       $78 = HEAP32[$77>>2]|0;
       $79 = ($78|0)==($68|0);
       if ($79) {
        HEAP32[$77>>2] = $66;
        HEAP32[$67>>2] = $70;
        $$pre = HEAP32[(2712)>>2]|0;
        $89 = $$pre;
        break;
       } else {
        _abort();
        // unreachable;
       }
      }
     } while(0);
     $80 = $64 << 3;
     $81 = (($80) - ($4))|0;
     $82 = $4 | 3;
     $83 = ((($68)) + 4|0);
     HEAP32[$83>>2] = $82;
     $84 = (($68) + ($4)|0);
     $85 = $81 | 1;
     $$sum56 = $4 | 4;
     $86 = (($68) + ($$sum56)|0);
     HEAP32[$86>>2] = $85;
     $87 = (($68) + ($80)|0);
     HEAP32[$87>>2] = $81;
     $88 = ($89|0)==(0);
     if (!($88)) {
      $90 = HEAP32[(2724)>>2]|0;
      $91 = $89 >>> 3;
      $92 = $91 << 1;
      $93 = (2744 + ($92<<2)|0);
      $94 = HEAP32[2704>>2]|0;
      $95 = 1 << $91;
      $96 = $94 & $95;
      $97 = ($96|0)==(0);
      if ($97) {
       $98 = $94 | $95;
       HEAP32[2704>>2] = $98;
       $$pre105 = (($92) + 2)|0;
       $$pre106 = (2744 + ($$pre105<<2)|0);
       $$pre$phiZ2D = $$pre106;$F4$0 = $93;
      } else {
       $$sum9 = (($92) + 2)|0;
       $99 = (2744 + ($$sum9<<2)|0);
       $100 = HEAP32[$99>>2]|0;
       $101 = HEAP32[(2720)>>2]|0;
       $102 = ($100>>>0)<($101>>>0);
       if ($102) {
        _abort();
        // unreachable;
       } else {
        $$pre$phiZ2D = $99;$F4$0 = $100;
       }
      }
      HEAP32[$$pre$phiZ2D>>2] = $90;
      $103 = ((($F4$0)) + 12|0);
      HEAP32[$103>>2] = $90;
      $104 = ((($90)) + 8|0);
      HEAP32[$104>>2] = $F4$0;
      $105 = ((($90)) + 12|0);
      HEAP32[$105>>2] = $93;
     }
     HEAP32[(2712)>>2] = $81;
     HEAP32[(2724)>>2] = $84;
     $mem$0 = $69;
     return ($mem$0|0);
    }
    $106 = HEAP32[(2708)>>2]|0;
    $107 = ($106|0)==(0);
    if ($107) {
     $nb$0 = $4;
    } else {
     $108 = (0 - ($106))|0;
     $109 = $106 & $108;
     $110 = (($109) + -1)|0;
     $111 = $110 >>> 12;
     $112 = $111 & 16;
     $113 = $110 >>> $112;
     $114 = $113 >>> 5;
     $115 = $114 & 8;
     $116 = $115 | $112;
     $117 = $113 >>> $115;
     $118 = $117 >>> 2;
     $119 = $118 & 4;
     $120 = $116 | $119;
     $121 = $117 >>> $119;
     $122 = $121 >>> 1;
     $123 = $122 & 2;
     $124 = $120 | $123;
     $125 = $121 >>> $123;
     $126 = $125 >>> 1;
     $127 = $126 & 1;
     $128 = $124 | $127;
     $129 = $125 >>> $127;
     $130 = (($128) + ($129))|0;
     $131 = (3008 + ($130<<2)|0);
     $132 = HEAP32[$131>>2]|0;
     $133 = ((($132)) + 4|0);
     $134 = HEAP32[$133>>2]|0;
     $135 = $134 & -8;
     $136 = (($135) - ($4))|0;
     $rsize$0$i = $136;$t$0$i = $132;$v$0$i = $132;
     while(1) {
      $137 = ((($t$0$i)) + 16|0);
      $138 = HEAP32[$137>>2]|0;
      $139 = ($138|0)==(0|0);
      if ($139) {
       $140 = ((($t$0$i)) + 20|0);
       $141 = HEAP32[$140>>2]|0;
       $142 = ($141|0)==(0|0);
       if ($142) {
        $rsize$0$i$lcssa = $rsize$0$i;$v$0$i$lcssa = $v$0$i;
        break;
       } else {
        $144 = $141;
       }
      } else {
       $144 = $138;
      }
      $143 = ((($144)) + 4|0);
      $145 = HEAP32[$143>>2]|0;
      $146 = $145 & -8;
      $147 = (($146) - ($4))|0;
      $148 = ($147>>>0)<($rsize$0$i>>>0);
      $$rsize$0$i = $148 ? $147 : $rsize$0$i;
      $$v$0$i = $148 ? $144 : $v$0$i;
      $rsize$0$i = $$rsize$0$i;$t$0$i = $144;$v$0$i = $$v$0$i;
     }
     $149 = HEAP32[(2720)>>2]|0;
     $150 = ($v$0$i$lcssa>>>0)<($149>>>0);
     if ($150) {
      _abort();
      // unreachable;
     }
     $151 = (($v$0$i$lcssa) + ($4)|0);
     $152 = ($v$0$i$lcssa>>>0)<($151>>>0);
     if (!($152)) {
      _abort();
      // unreachable;
     }
     $153 = ((($v$0$i$lcssa)) + 24|0);
     $154 = HEAP32[$153>>2]|0;
     $155 = ((($v$0$i$lcssa)) + 12|0);
     $156 = HEAP32[$155>>2]|0;
     $157 = ($156|0)==($v$0$i$lcssa|0);
     do {
      if ($157) {
       $167 = ((($v$0$i$lcssa)) + 20|0);
       $168 = HEAP32[$167>>2]|0;
       $169 = ($168|0)==(0|0);
       if ($169) {
        $170 = ((($v$0$i$lcssa)) + 16|0);
        $171 = HEAP32[$170>>2]|0;
        $172 = ($171|0)==(0|0);
        if ($172) {
         $R$1$i = 0;
         break;
        } else {
         $R$0$i = $171;$RP$0$i = $170;
        }
       } else {
        $R$0$i = $168;$RP$0$i = $167;
       }
       while(1) {
        $173 = ((($R$0$i)) + 20|0);
        $174 = HEAP32[$173>>2]|0;
        $175 = ($174|0)==(0|0);
        if (!($175)) {
         $R$0$i = $174;$RP$0$i = $173;
         continue;
        }
        $176 = ((($R$0$i)) + 16|0);
        $177 = HEAP32[$176>>2]|0;
        $178 = ($177|0)==(0|0);
        if ($178) {
         $R$0$i$lcssa = $R$0$i;$RP$0$i$lcssa = $RP$0$i;
         break;
        } else {
         $R$0$i = $177;$RP$0$i = $176;
        }
       }
       $179 = ($RP$0$i$lcssa>>>0)<($149>>>0);
       if ($179) {
        _abort();
        // unreachable;
       } else {
        HEAP32[$RP$0$i$lcssa>>2] = 0;
        $R$1$i = $R$0$i$lcssa;
        break;
       }
      } else {
       $158 = ((($v$0$i$lcssa)) + 8|0);
       $159 = HEAP32[$158>>2]|0;
       $160 = ($159>>>0)<($149>>>0);
       if ($160) {
        _abort();
        // unreachable;
       }
       $161 = ((($159)) + 12|0);
       $162 = HEAP32[$161>>2]|0;
       $163 = ($162|0)==($v$0$i$lcssa|0);
       if (!($163)) {
        _abort();
        // unreachable;
       }
       $164 = ((($156)) + 8|0);
       $165 = HEAP32[$164>>2]|0;
       $166 = ($165|0)==($v$0$i$lcssa|0);
       if ($166) {
        HEAP32[$161>>2] = $156;
        HEAP32[$164>>2] = $159;
        $R$1$i = $156;
        break;
       } else {
        _abort();
        // unreachable;
       }
      }
     } while(0);
     $180 = ($154|0)==(0|0);
     do {
      if (!($180)) {
       $181 = ((($v$0$i$lcssa)) + 28|0);
       $182 = HEAP32[$181>>2]|0;
       $183 = (3008 + ($182<<2)|0);
       $184 = HEAP32[$183>>2]|0;
       $185 = ($v$0$i$lcssa|0)==($184|0);
       if ($185) {
        HEAP32[$183>>2] = $R$1$i;
        $cond$i = ($R$1$i|0)==(0|0);
        if ($cond$i) {
         $186 = 1 << $182;
         $187 = $186 ^ -1;
         $188 = HEAP32[(2708)>>2]|0;
         $189 = $188 & $187;
         HEAP32[(2708)>>2] = $189;
         break;
        }
       } else {
        $190 = HEAP32[(2720)>>2]|0;
        $191 = ($154>>>0)<($190>>>0);
        if ($191) {
         _abort();
         // unreachable;
        }
        $192 = ((($154)) + 16|0);
        $193 = HEAP32[$192>>2]|0;
        $194 = ($193|0)==($v$0$i$lcssa|0);
        if ($194) {
         HEAP32[$192>>2] = $R$1$i;
        } else {
         $195 = ((($154)) + 20|0);
         HEAP32[$195>>2] = $R$1$i;
        }
        $196 = ($R$1$i|0)==(0|0);
        if ($196) {
         break;
        }
       }
       $197 = HEAP32[(2720)>>2]|0;
       $198 = ($R$1$i>>>0)<($197>>>0);
       if ($198) {
        _abort();
        // unreachable;
       }
       $199 = ((($R$1$i)) + 24|0);
       HEAP32[$199>>2] = $154;
       $200 = ((($v$0$i$lcssa)) + 16|0);
       $201 = HEAP32[$200>>2]|0;
       $202 = ($201|0)==(0|0);
       do {
        if (!($202)) {
         $203 = ($201>>>0)<($197>>>0);
         if ($203) {
          _abort();
          // unreachable;
         } else {
          $204 = ((($R$1$i)) + 16|0);
          HEAP32[$204>>2] = $201;
          $205 = ((($201)) + 24|0);
          HEAP32[$205>>2] = $R$1$i;
          break;
         }
        }
       } while(0);
       $206 = ((($v$0$i$lcssa)) + 20|0);
       $207 = HEAP32[$206>>2]|0;
       $208 = ($207|0)==(0|0);
       if (!($208)) {
        $209 = HEAP32[(2720)>>2]|0;
        $210 = ($207>>>0)<($209>>>0);
        if ($210) {
         _abort();
         // unreachable;
        } else {
         $211 = ((($R$1$i)) + 20|0);
         HEAP32[$211>>2] = $207;
         $212 = ((($207)) + 24|0);
         HEAP32[$212>>2] = $R$1$i;
         break;
        }
       }
      }
     } while(0);
     $213 = ($rsize$0$i$lcssa>>>0)<(16);
     if ($213) {
      $214 = (($rsize$0$i$lcssa) + ($4))|0;
      $215 = $214 | 3;
      $216 = ((($v$0$i$lcssa)) + 4|0);
      HEAP32[$216>>2] = $215;
      $$sum4$i = (($214) + 4)|0;
      $217 = (($v$0$i$lcssa) + ($$sum4$i)|0);
      $218 = HEAP32[$217>>2]|0;
      $219 = $218 | 1;
      HEAP32[$217>>2] = $219;
     } else {
      $220 = $4 | 3;
      $221 = ((($v$0$i$lcssa)) + 4|0);
      HEAP32[$221>>2] = $220;
      $222 = $rsize$0$i$lcssa | 1;
      $$sum$i35 = $4 | 4;
      $223 = (($v$0$i$lcssa) + ($$sum$i35)|0);
      HEAP32[$223>>2] = $222;
      $$sum1$i = (($rsize$0$i$lcssa) + ($4))|0;
      $224 = (($v$0$i$lcssa) + ($$sum1$i)|0);
      HEAP32[$224>>2] = $rsize$0$i$lcssa;
      $225 = HEAP32[(2712)>>2]|0;
      $226 = ($225|0)==(0);
      if (!($226)) {
       $227 = HEAP32[(2724)>>2]|0;
       $228 = $225 >>> 3;
       $229 = $228 << 1;
       $230 = (2744 + ($229<<2)|0);
       $231 = HEAP32[2704>>2]|0;
       $232 = 1 << $228;
       $233 = $231 & $232;
       $234 = ($233|0)==(0);
       if ($234) {
        $235 = $231 | $232;
        HEAP32[2704>>2] = $235;
        $$pre$i = (($229) + 2)|0;
        $$pre8$i = (2744 + ($$pre$i<<2)|0);
        $$pre$phi$iZ2D = $$pre8$i;$F1$0$i = $230;
       } else {
        $$sum3$i = (($229) + 2)|0;
        $236 = (2744 + ($$sum3$i<<2)|0);
        $237 = HEAP32[$236>>2]|0;
        $238 = HEAP32[(2720)>>2]|0;
        $239 = ($237>>>0)<($238>>>0);
        if ($239) {
         _abort();
         // unreachable;
        } else {
         $$pre$phi$iZ2D = $236;$F1$0$i = $237;
        }
       }
       HEAP32[$$pre$phi$iZ2D>>2] = $227;
       $240 = ((($F1$0$i)) + 12|0);
       HEAP32[$240>>2] = $227;
       $241 = ((($227)) + 8|0);
       HEAP32[$241>>2] = $F1$0$i;
       $242 = ((($227)) + 12|0);
       HEAP32[$242>>2] = $230;
      }
      HEAP32[(2712)>>2] = $rsize$0$i$lcssa;
      HEAP32[(2724)>>2] = $151;
     }
     $243 = ((($v$0$i$lcssa)) + 8|0);
     $mem$0 = $243;
     return ($mem$0|0);
    }
   } else {
    $nb$0 = $4;
   }
  } else {
   $244 = ($bytes>>>0)>(4294967231);
   if ($244) {
    $nb$0 = -1;
   } else {
    $245 = (($bytes) + 11)|0;
    $246 = $245 & -8;
    $247 = HEAP32[(2708)>>2]|0;
    $248 = ($247|0)==(0);
    if ($248) {
     $nb$0 = $246;
    } else {
     $249 = (0 - ($246))|0;
     $250 = $245 >>> 8;
     $251 = ($250|0)==(0);
     if ($251) {
      $idx$0$i = 0;
     } else {
      $252 = ($246>>>0)>(16777215);
      if ($252) {
       $idx$0$i = 31;
      } else {
       $253 = (($250) + 1048320)|0;
       $254 = $253 >>> 16;
       $255 = $254 & 8;
       $256 = $250 << $255;
       $257 = (($256) + 520192)|0;
       $258 = $257 >>> 16;
       $259 = $258 & 4;
       $260 = $259 | $255;
       $261 = $256 << $259;
       $262 = (($261) + 245760)|0;
       $263 = $262 >>> 16;
       $264 = $263 & 2;
       $265 = $260 | $264;
       $266 = (14 - ($265))|0;
       $267 = $261 << $264;
       $268 = $267 >>> 15;
       $269 = (($266) + ($268))|0;
       $270 = $269 << 1;
       $271 = (($269) + 7)|0;
       $272 = $246 >>> $271;
       $273 = $272 & 1;
       $274 = $273 | $270;
       $idx$0$i = $274;
      }
     }
     $275 = (3008 + ($idx$0$i<<2)|0);
     $276 = HEAP32[$275>>2]|0;
     $277 = ($276|0)==(0|0);
     L123: do {
      if ($277) {
       $rsize$2$i = $249;$t$1$i = 0;$v$2$i = 0;
       label = 86;
      } else {
       $278 = ($idx$0$i|0)==(31);
       $279 = $idx$0$i >>> 1;
       $280 = (25 - ($279))|0;
       $281 = $278 ? 0 : $280;
       $282 = $246 << $281;
       $rsize$0$i15 = $249;$rst$0$i = 0;$sizebits$0$i = $282;$t$0$i14 = $276;$v$0$i16 = 0;
       while(1) {
        $283 = ((($t$0$i14)) + 4|0);
        $284 = HEAP32[$283>>2]|0;
        $285 = $284 & -8;
        $286 = (($285) - ($246))|0;
        $287 = ($286>>>0)<($rsize$0$i15>>>0);
        if ($287) {
         $288 = ($285|0)==($246|0);
         if ($288) {
          $rsize$331$i = $286;$t$230$i = $t$0$i14;$v$332$i = $t$0$i14;
          label = 90;
          break L123;
         } else {
          $rsize$1$i = $286;$v$1$i = $t$0$i14;
         }
        } else {
         $rsize$1$i = $rsize$0$i15;$v$1$i = $v$0$i16;
        }
        $289 = ((($t$0$i14)) + 20|0);
        $290 = HEAP32[$289>>2]|0;
        $291 = $sizebits$0$i >>> 31;
        $292 = (((($t$0$i14)) + 16|0) + ($291<<2)|0);
        $293 = HEAP32[$292>>2]|0;
        $294 = ($290|0)==(0|0);
        $295 = ($290|0)==($293|0);
        $or$cond19$i = $294 | $295;
        $rst$1$i = $or$cond19$i ? $rst$0$i : $290;
        $296 = ($293|0)==(0|0);
        $297 = $sizebits$0$i << 1;
        if ($296) {
         $rsize$2$i = $rsize$1$i;$t$1$i = $rst$1$i;$v$2$i = $v$1$i;
         label = 86;
         break;
        } else {
         $rsize$0$i15 = $rsize$1$i;$rst$0$i = $rst$1$i;$sizebits$0$i = $297;$t$0$i14 = $293;$v$0$i16 = $v$1$i;
        }
       }
      }
     } while(0);
     if ((label|0) == 86) {
      $298 = ($t$1$i|0)==(0|0);
      $299 = ($v$2$i|0)==(0|0);
      $or$cond$i = $298 & $299;
      if ($or$cond$i) {
       $300 = 2 << $idx$0$i;
       $301 = (0 - ($300))|0;
       $302 = $300 | $301;
       $303 = $247 & $302;
       $304 = ($303|0)==(0);
       if ($304) {
        $nb$0 = $246;
        break;
       }
       $305 = (0 - ($303))|0;
       $306 = $303 & $305;
       $307 = (($306) + -1)|0;
       $308 = $307 >>> 12;
       $309 = $308 & 16;
       $310 = $307 >>> $309;
       $311 = $310 >>> 5;
       $312 = $311 & 8;
       $313 = $312 | $309;
       $314 = $310 >>> $312;
       $315 = $314 >>> 2;
       $316 = $315 & 4;
       $317 = $313 | $316;
       $318 = $314 >>> $316;
       $319 = $318 >>> 1;
       $320 = $319 & 2;
       $321 = $317 | $320;
       $322 = $318 >>> $320;
       $323 = $322 >>> 1;
       $324 = $323 & 1;
       $325 = $321 | $324;
       $326 = $322 >>> $324;
       $327 = (($325) + ($326))|0;
       $328 = (3008 + ($327<<2)|0);
       $329 = HEAP32[$328>>2]|0;
       $t$2$ph$i = $329;$v$3$ph$i = 0;
      } else {
       $t$2$ph$i = $t$1$i;$v$3$ph$i = $v$2$i;
      }
      $330 = ($t$2$ph$i|0)==(0|0);
      if ($330) {
       $rsize$3$lcssa$i = $rsize$2$i;$v$3$lcssa$i = $v$3$ph$i;
      } else {
       $rsize$331$i = $rsize$2$i;$t$230$i = $t$2$ph$i;$v$332$i = $v$3$ph$i;
       label = 90;
      }
     }
     if ((label|0) == 90) {
      while(1) {
       label = 0;
       $331 = ((($t$230$i)) + 4|0);
       $332 = HEAP32[$331>>2]|0;
       $333 = $332 & -8;
       $334 = (($333) - ($246))|0;
       $335 = ($334>>>0)<($rsize$331$i>>>0);
       $$rsize$3$i = $335 ? $334 : $rsize$331$i;
       $t$2$v$3$i = $335 ? $t$230$i : $v$332$i;
       $336 = ((($t$230$i)) + 16|0);
       $337 = HEAP32[$336>>2]|0;
       $338 = ($337|0)==(0|0);
       if (!($338)) {
        $rsize$331$i = $$rsize$3$i;$t$230$i = $337;$v$332$i = $t$2$v$3$i;
        label = 90;
        continue;
       }
       $339 = ((($t$230$i)) + 20|0);
       $340 = HEAP32[$339>>2]|0;
       $341 = ($340|0)==(0|0);
       if ($341) {
        $rsize$3$lcssa$i = $$rsize$3$i;$v$3$lcssa$i = $t$2$v$3$i;
        break;
       } else {
        $rsize$331$i = $$rsize$3$i;$t$230$i = $340;$v$332$i = $t$2$v$3$i;
        label = 90;
       }
      }
     }
     $342 = ($v$3$lcssa$i|0)==(0|0);
     if ($342) {
      $nb$0 = $246;
     } else {
      $343 = HEAP32[(2712)>>2]|0;
      $344 = (($343) - ($246))|0;
      $345 = ($rsize$3$lcssa$i>>>0)<($344>>>0);
      if ($345) {
       $346 = HEAP32[(2720)>>2]|0;
       $347 = ($v$3$lcssa$i>>>0)<($346>>>0);
       if ($347) {
        _abort();
        // unreachable;
       }
       $348 = (($v$3$lcssa$i) + ($246)|0);
       $349 = ($v$3$lcssa$i>>>0)<($348>>>0);
       if (!($349)) {
        _abort();
        // unreachable;
       }
       $350 = ((($v$3$lcssa$i)) + 24|0);
       $351 = HEAP32[$350>>2]|0;
       $352 = ((($v$3$lcssa$i)) + 12|0);
       $353 = HEAP32[$352>>2]|0;
       $354 = ($353|0)==($v$3$lcssa$i|0);
       do {
        if ($354) {
         $364 = ((($v$3$lcssa$i)) + 20|0);
         $365 = HEAP32[$364>>2]|0;
         $366 = ($365|0)==(0|0);
         if ($366) {
          $367 = ((($v$3$lcssa$i)) + 16|0);
          $368 = HEAP32[$367>>2]|0;
          $369 = ($368|0)==(0|0);
          if ($369) {
           $R$1$i20 = 0;
           break;
          } else {
           $R$0$i18 = $368;$RP$0$i17 = $367;
          }
         } else {
          $R$0$i18 = $365;$RP$0$i17 = $364;
         }
         while(1) {
          $370 = ((($R$0$i18)) + 20|0);
          $371 = HEAP32[$370>>2]|0;
          $372 = ($371|0)==(0|0);
          if (!($372)) {
           $R$0$i18 = $371;$RP$0$i17 = $370;
           continue;
          }
          $373 = ((($R$0$i18)) + 16|0);
          $374 = HEAP32[$373>>2]|0;
          $375 = ($374|0)==(0|0);
          if ($375) {
           $R$0$i18$lcssa = $R$0$i18;$RP$0$i17$lcssa = $RP$0$i17;
           break;
          } else {
           $R$0$i18 = $374;$RP$0$i17 = $373;
          }
         }
         $376 = ($RP$0$i17$lcssa>>>0)<($346>>>0);
         if ($376) {
          _abort();
          // unreachable;
         } else {
          HEAP32[$RP$0$i17$lcssa>>2] = 0;
          $R$1$i20 = $R$0$i18$lcssa;
          break;
         }
        } else {
         $355 = ((($v$3$lcssa$i)) + 8|0);
         $356 = HEAP32[$355>>2]|0;
         $357 = ($356>>>0)<($346>>>0);
         if ($357) {
          _abort();
          // unreachable;
         }
         $358 = ((($356)) + 12|0);
         $359 = HEAP32[$358>>2]|0;
         $360 = ($359|0)==($v$3$lcssa$i|0);
         if (!($360)) {
          _abort();
          // unreachable;
         }
         $361 = ((($353)) + 8|0);
         $362 = HEAP32[$361>>2]|0;
         $363 = ($362|0)==($v$3$lcssa$i|0);
         if ($363) {
          HEAP32[$358>>2] = $353;
          HEAP32[$361>>2] = $356;
          $R$1$i20 = $353;
          break;
         } else {
          _abort();
          // unreachable;
         }
        }
       } while(0);
       $377 = ($351|0)==(0|0);
       do {
        if (!($377)) {
         $378 = ((($v$3$lcssa$i)) + 28|0);
         $379 = HEAP32[$378>>2]|0;
         $380 = (3008 + ($379<<2)|0);
         $381 = HEAP32[$380>>2]|0;
         $382 = ($v$3$lcssa$i|0)==($381|0);
         if ($382) {
          HEAP32[$380>>2] = $R$1$i20;
          $cond$i21 = ($R$1$i20|0)==(0|0);
          if ($cond$i21) {
           $383 = 1 << $379;
           $384 = $383 ^ -1;
           $385 = HEAP32[(2708)>>2]|0;
           $386 = $385 & $384;
           HEAP32[(2708)>>2] = $386;
           break;
          }
         } else {
          $387 = HEAP32[(2720)>>2]|0;
          $388 = ($351>>>0)<($387>>>0);
          if ($388) {
           _abort();
           // unreachable;
          }
          $389 = ((($351)) + 16|0);
          $390 = HEAP32[$389>>2]|0;
          $391 = ($390|0)==($v$3$lcssa$i|0);
          if ($391) {
           HEAP32[$389>>2] = $R$1$i20;
          } else {
           $392 = ((($351)) + 20|0);
           HEAP32[$392>>2] = $R$1$i20;
          }
          $393 = ($R$1$i20|0)==(0|0);
          if ($393) {
           break;
          }
         }
         $394 = HEAP32[(2720)>>2]|0;
         $395 = ($R$1$i20>>>0)<($394>>>0);
         if ($395) {
          _abort();
          // unreachable;
         }
         $396 = ((($R$1$i20)) + 24|0);
         HEAP32[$396>>2] = $351;
         $397 = ((($v$3$lcssa$i)) + 16|0);
         $398 = HEAP32[$397>>2]|0;
         $399 = ($398|0)==(0|0);
         do {
          if (!($399)) {
           $400 = ($398>>>0)<($394>>>0);
           if ($400) {
            _abort();
            // unreachable;
           } else {
            $401 = ((($R$1$i20)) + 16|0);
            HEAP32[$401>>2] = $398;
            $402 = ((($398)) + 24|0);
            HEAP32[$402>>2] = $R$1$i20;
            break;
           }
          }
         } while(0);
         $403 = ((($v$3$lcssa$i)) + 20|0);
         $404 = HEAP32[$403>>2]|0;
         $405 = ($404|0)==(0|0);
         if (!($405)) {
          $406 = HEAP32[(2720)>>2]|0;
          $407 = ($404>>>0)<($406>>>0);
          if ($407) {
           _abort();
           // unreachable;
          } else {
           $408 = ((($R$1$i20)) + 20|0);
           HEAP32[$408>>2] = $404;
           $409 = ((($404)) + 24|0);
           HEAP32[$409>>2] = $R$1$i20;
           break;
          }
         }
        }
       } while(0);
       $410 = ($rsize$3$lcssa$i>>>0)<(16);
       L199: do {
        if ($410) {
         $411 = (($rsize$3$lcssa$i) + ($246))|0;
         $412 = $411 | 3;
         $413 = ((($v$3$lcssa$i)) + 4|0);
         HEAP32[$413>>2] = $412;
         $$sum18$i = (($411) + 4)|0;
         $414 = (($v$3$lcssa$i) + ($$sum18$i)|0);
         $415 = HEAP32[$414>>2]|0;
         $416 = $415 | 1;
         HEAP32[$414>>2] = $416;
        } else {
         $417 = $246 | 3;
         $418 = ((($v$3$lcssa$i)) + 4|0);
         HEAP32[$418>>2] = $417;
         $419 = $rsize$3$lcssa$i | 1;
         $$sum$i2334 = $246 | 4;
         $420 = (($v$3$lcssa$i) + ($$sum$i2334)|0);
         HEAP32[$420>>2] = $419;
         $$sum1$i24 = (($rsize$3$lcssa$i) + ($246))|0;
         $421 = (($v$3$lcssa$i) + ($$sum1$i24)|0);
         HEAP32[$421>>2] = $rsize$3$lcssa$i;
         $422 = $rsize$3$lcssa$i >>> 3;
         $423 = ($rsize$3$lcssa$i>>>0)<(256);
         if ($423) {
          $424 = $422 << 1;
          $425 = (2744 + ($424<<2)|0);
          $426 = HEAP32[2704>>2]|0;
          $427 = 1 << $422;
          $428 = $426 & $427;
          $429 = ($428|0)==(0);
          if ($429) {
           $430 = $426 | $427;
           HEAP32[2704>>2] = $430;
           $$pre$i25 = (($424) + 2)|0;
           $$pre43$i = (2744 + ($$pre$i25<<2)|0);
           $$pre$phi$i26Z2D = $$pre43$i;$F5$0$i = $425;
          } else {
           $$sum17$i = (($424) + 2)|0;
           $431 = (2744 + ($$sum17$i<<2)|0);
           $432 = HEAP32[$431>>2]|0;
           $433 = HEAP32[(2720)>>2]|0;
           $434 = ($432>>>0)<($433>>>0);
           if ($434) {
            _abort();
            // unreachable;
           } else {
            $$pre$phi$i26Z2D = $431;$F5$0$i = $432;
           }
          }
          HEAP32[$$pre$phi$i26Z2D>>2] = $348;
          $435 = ((($F5$0$i)) + 12|0);
          HEAP32[$435>>2] = $348;
          $$sum15$i = (($246) + 8)|0;
          $436 = (($v$3$lcssa$i) + ($$sum15$i)|0);
          HEAP32[$436>>2] = $F5$0$i;
          $$sum16$i = (($246) + 12)|0;
          $437 = (($v$3$lcssa$i) + ($$sum16$i)|0);
          HEAP32[$437>>2] = $425;
          break;
         }
         $438 = $rsize$3$lcssa$i >>> 8;
         $439 = ($438|0)==(0);
         if ($439) {
          $I7$0$i = 0;
         } else {
          $440 = ($rsize$3$lcssa$i>>>0)>(16777215);
          if ($440) {
           $I7$0$i = 31;
          } else {
           $441 = (($438) + 1048320)|0;
           $442 = $441 >>> 16;
           $443 = $442 & 8;
           $444 = $438 << $443;
           $445 = (($444) + 520192)|0;
           $446 = $445 >>> 16;
           $447 = $446 & 4;
           $448 = $447 | $443;
           $449 = $444 << $447;
           $450 = (($449) + 245760)|0;
           $451 = $450 >>> 16;
           $452 = $451 & 2;
           $453 = $448 | $452;
           $454 = (14 - ($453))|0;
           $455 = $449 << $452;
           $456 = $455 >>> 15;
           $457 = (($454) + ($456))|0;
           $458 = $457 << 1;
           $459 = (($457) + 7)|0;
           $460 = $rsize$3$lcssa$i >>> $459;
           $461 = $460 & 1;
           $462 = $461 | $458;
           $I7$0$i = $462;
          }
         }
         $463 = (3008 + ($I7$0$i<<2)|0);
         $$sum2$i = (($246) + 28)|0;
         $464 = (($v$3$lcssa$i) + ($$sum2$i)|0);
         HEAP32[$464>>2] = $I7$0$i;
         $$sum3$i27 = (($246) + 16)|0;
         $465 = (($v$3$lcssa$i) + ($$sum3$i27)|0);
         $$sum4$i28 = (($246) + 20)|0;
         $466 = (($v$3$lcssa$i) + ($$sum4$i28)|0);
         HEAP32[$466>>2] = 0;
         HEAP32[$465>>2] = 0;
         $467 = HEAP32[(2708)>>2]|0;
         $468 = 1 << $I7$0$i;
         $469 = $467 & $468;
         $470 = ($469|0)==(0);
         if ($470) {
          $471 = $467 | $468;
          HEAP32[(2708)>>2] = $471;
          HEAP32[$463>>2] = $348;
          $$sum5$i = (($246) + 24)|0;
          $472 = (($v$3$lcssa$i) + ($$sum5$i)|0);
          HEAP32[$472>>2] = $463;
          $$sum6$i = (($246) + 12)|0;
          $473 = (($v$3$lcssa$i) + ($$sum6$i)|0);
          HEAP32[$473>>2] = $348;
          $$sum7$i = (($246) + 8)|0;
          $474 = (($v$3$lcssa$i) + ($$sum7$i)|0);
          HEAP32[$474>>2] = $348;
          break;
         }
         $475 = HEAP32[$463>>2]|0;
         $476 = ((($475)) + 4|0);
         $477 = HEAP32[$476>>2]|0;
         $478 = $477 & -8;
         $479 = ($478|0)==($rsize$3$lcssa$i|0);
         L217: do {
          if ($479) {
           $T$0$lcssa$i = $475;
          } else {
           $480 = ($I7$0$i|0)==(31);
           $481 = $I7$0$i >>> 1;
           $482 = (25 - ($481))|0;
           $483 = $480 ? 0 : $482;
           $484 = $rsize$3$lcssa$i << $483;
           $K12$029$i = $484;$T$028$i = $475;
           while(1) {
            $491 = $K12$029$i >>> 31;
            $492 = (((($T$028$i)) + 16|0) + ($491<<2)|0);
            $487 = HEAP32[$492>>2]|0;
            $493 = ($487|0)==(0|0);
            if ($493) {
             $$lcssa232 = $492;$T$028$i$lcssa = $T$028$i;
             break;
            }
            $485 = $K12$029$i << 1;
            $486 = ((($487)) + 4|0);
            $488 = HEAP32[$486>>2]|0;
            $489 = $488 & -8;
            $490 = ($489|0)==($rsize$3$lcssa$i|0);
            if ($490) {
             $T$0$lcssa$i = $487;
             break L217;
            } else {
             $K12$029$i = $485;$T$028$i = $487;
            }
           }
           $494 = HEAP32[(2720)>>2]|0;
           $495 = ($$lcssa232>>>0)<($494>>>0);
           if ($495) {
            _abort();
            // unreachable;
           } else {
            HEAP32[$$lcssa232>>2] = $348;
            $$sum11$i = (($246) + 24)|0;
            $496 = (($v$3$lcssa$i) + ($$sum11$i)|0);
            HEAP32[$496>>2] = $T$028$i$lcssa;
            $$sum12$i = (($246) + 12)|0;
            $497 = (($v$3$lcssa$i) + ($$sum12$i)|0);
            HEAP32[$497>>2] = $348;
            $$sum13$i = (($246) + 8)|0;
            $498 = (($v$3$lcssa$i) + ($$sum13$i)|0);
            HEAP32[$498>>2] = $348;
            break L199;
           }
          }
         } while(0);
         $499 = ((($T$0$lcssa$i)) + 8|0);
         $500 = HEAP32[$499>>2]|0;
         $501 = HEAP32[(2720)>>2]|0;
         $502 = ($500>>>0)>=($501>>>0);
         $not$$i = ($T$0$lcssa$i>>>0)>=($501>>>0);
         $503 = $502 & $not$$i;
         if ($503) {
          $504 = ((($500)) + 12|0);
          HEAP32[$504>>2] = $348;
          HEAP32[$499>>2] = $348;
          $$sum8$i = (($246) + 8)|0;
          $505 = (($v$3$lcssa$i) + ($$sum8$i)|0);
          HEAP32[$505>>2] = $500;
          $$sum9$i = (($246) + 12)|0;
          $506 = (($v$3$lcssa$i) + ($$sum9$i)|0);
          HEAP32[$506>>2] = $T$0$lcssa$i;
          $$sum10$i = (($246) + 24)|0;
          $507 = (($v$3$lcssa$i) + ($$sum10$i)|0);
          HEAP32[$507>>2] = 0;
          break;
         } else {
          _abort();
          // unreachable;
         }
        }
       } while(0);
       $508 = ((($v$3$lcssa$i)) + 8|0);
       $mem$0 = $508;
       return ($mem$0|0);
      } else {
       $nb$0 = $246;
      }
     }
    }
   }
  }
 } while(0);
 $509 = HEAP32[(2712)>>2]|0;
 $510 = ($509>>>0)<($nb$0>>>0);
 if (!($510)) {
  $511 = (($509) - ($nb$0))|0;
  $512 = HEAP32[(2724)>>2]|0;
  $513 = ($511>>>0)>(15);
  if ($513) {
   $514 = (($512) + ($nb$0)|0);
   HEAP32[(2724)>>2] = $514;
   HEAP32[(2712)>>2] = $511;
   $515 = $511 | 1;
   $$sum2 = (($nb$0) + 4)|0;
   $516 = (($512) + ($$sum2)|0);
   HEAP32[$516>>2] = $515;
   $517 = (($512) + ($509)|0);
   HEAP32[$517>>2] = $511;
   $518 = $nb$0 | 3;
   $519 = ((($512)) + 4|0);
   HEAP32[$519>>2] = $518;
  } else {
   HEAP32[(2712)>>2] = 0;
   HEAP32[(2724)>>2] = 0;
   $520 = $509 | 3;
   $521 = ((($512)) + 4|0);
   HEAP32[$521>>2] = $520;
   $$sum1 = (($509) + 4)|0;
   $522 = (($512) + ($$sum1)|0);
   $523 = HEAP32[$522>>2]|0;
   $524 = $523 | 1;
   HEAP32[$522>>2] = $524;
  }
  $525 = ((($512)) + 8|0);
  $mem$0 = $525;
  return ($mem$0|0);
 }
 $526 = HEAP32[(2716)>>2]|0;
 $527 = ($526>>>0)>($nb$0>>>0);
 if ($527) {
  $528 = (($526) - ($nb$0))|0;
  HEAP32[(2716)>>2] = $528;
  $529 = HEAP32[(2728)>>2]|0;
  $530 = (($529) + ($nb$0)|0);
  HEAP32[(2728)>>2] = $530;
  $531 = $528 | 1;
  $$sum = (($nb$0) + 4)|0;
  $532 = (($529) + ($$sum)|0);
  HEAP32[$532>>2] = $531;
  $533 = $nb$0 | 3;
  $534 = ((($529)) + 4|0);
  HEAP32[$534>>2] = $533;
  $535 = ((($529)) + 8|0);
  $mem$0 = $535;
  return ($mem$0|0);
 }
 $536 = HEAP32[3176>>2]|0;
 $537 = ($536|0)==(0);
 do {
  if ($537) {
   $538 = (_sysconf(30)|0);
   $539 = (($538) + -1)|0;
   $540 = $539 & $538;
   $541 = ($540|0)==(0);
   if ($541) {
    HEAP32[(3184)>>2] = $538;
    HEAP32[(3180)>>2] = $538;
    HEAP32[(3188)>>2] = -1;
    HEAP32[(3192)>>2] = -1;
    HEAP32[(3196)>>2] = 0;
    HEAP32[(3148)>>2] = 0;
    $542 = (_time((0|0))|0);
    $543 = $542 & -16;
    $544 = $543 ^ 1431655768;
    HEAP32[3176>>2] = $544;
    break;
   } else {
    _abort();
    // unreachable;
   }
  }
 } while(0);
 $545 = (($nb$0) + 48)|0;
 $546 = HEAP32[(3184)>>2]|0;
 $547 = (($nb$0) + 47)|0;
 $548 = (($546) + ($547))|0;
 $549 = (0 - ($546))|0;
 $550 = $548 & $549;
 $551 = ($550>>>0)>($nb$0>>>0);
 if (!($551)) {
  $mem$0 = 0;
  return ($mem$0|0);
 }
 $552 = HEAP32[(3144)>>2]|0;
 $553 = ($552|0)==(0);
 if (!($553)) {
  $554 = HEAP32[(3136)>>2]|0;
  $555 = (($554) + ($550))|0;
  $556 = ($555>>>0)<=($554>>>0);
  $557 = ($555>>>0)>($552>>>0);
  $or$cond1$i = $556 | $557;
  if ($or$cond1$i) {
   $mem$0 = 0;
   return ($mem$0|0);
  }
 }
 $558 = HEAP32[(3148)>>2]|0;
 $559 = $558 & 4;
 $560 = ($559|0)==(0);
 L258: do {
  if ($560) {
   $561 = HEAP32[(2728)>>2]|0;
   $562 = ($561|0)==(0|0);
   L260: do {
    if ($562) {
     label = 174;
    } else {
     $sp$0$i$i = (3152);
     while(1) {
      $563 = HEAP32[$sp$0$i$i>>2]|0;
      $564 = ($563>>>0)>($561>>>0);
      if (!($564)) {
       $565 = ((($sp$0$i$i)) + 4|0);
       $566 = HEAP32[$565>>2]|0;
       $567 = (($563) + ($566)|0);
       $568 = ($567>>>0)>($561>>>0);
       if ($568) {
        $$lcssa228 = $sp$0$i$i;$$lcssa230 = $565;
        break;
       }
      }
      $569 = ((($sp$0$i$i)) + 8|0);
      $570 = HEAP32[$569>>2]|0;
      $571 = ($570|0)==(0|0);
      if ($571) {
       label = 174;
       break L260;
      } else {
       $sp$0$i$i = $570;
      }
     }
     $594 = HEAP32[(2716)>>2]|0;
     $595 = (($548) - ($594))|0;
     $596 = $595 & $549;
     $597 = ($596>>>0)<(2147483647);
     if ($597) {
      $598 = (_sbrk(($596|0))|0);
      $599 = HEAP32[$$lcssa228>>2]|0;
      $600 = HEAP32[$$lcssa230>>2]|0;
      $601 = (($599) + ($600)|0);
      $602 = ($598|0)==($601|0);
      $$3$i = $602 ? $596 : 0;
      if ($602) {
       $603 = ($598|0)==((-1)|0);
       if ($603) {
        $tsize$0323944$i = $$3$i;
       } else {
        $tbase$255$i = $598;$tsize$254$i = $$3$i;
        label = 194;
        break L258;
       }
      } else {
       $br$0$ph$i = $598;$ssize$1$ph$i = $596;$tsize$0$ph$i = $$3$i;
       label = 184;
      }
     } else {
      $tsize$0323944$i = 0;
     }
    }
   } while(0);
   do {
    if ((label|0) == 174) {
     $572 = (_sbrk(0)|0);
     $573 = ($572|0)==((-1)|0);
     if ($573) {
      $tsize$0323944$i = 0;
     } else {
      $574 = $572;
      $575 = HEAP32[(3180)>>2]|0;
      $576 = (($575) + -1)|0;
      $577 = $576 & $574;
      $578 = ($577|0)==(0);
      if ($578) {
       $ssize$0$i = $550;
      } else {
       $579 = (($576) + ($574))|0;
       $580 = (0 - ($575))|0;
       $581 = $579 & $580;
       $582 = (($550) - ($574))|0;
       $583 = (($582) + ($581))|0;
       $ssize$0$i = $583;
      }
      $584 = HEAP32[(3136)>>2]|0;
      $585 = (($584) + ($ssize$0$i))|0;
      $586 = ($ssize$0$i>>>0)>($nb$0>>>0);
      $587 = ($ssize$0$i>>>0)<(2147483647);
      $or$cond$i30 = $586 & $587;
      if ($or$cond$i30) {
       $588 = HEAP32[(3144)>>2]|0;
       $589 = ($588|0)==(0);
       if (!($589)) {
        $590 = ($585>>>0)<=($584>>>0);
        $591 = ($585>>>0)>($588>>>0);
        $or$cond2$i = $590 | $591;
        if ($or$cond2$i) {
         $tsize$0323944$i = 0;
         break;
        }
       }
       $592 = (_sbrk(($ssize$0$i|0))|0);
       $593 = ($592|0)==($572|0);
       $ssize$0$$i = $593 ? $ssize$0$i : 0;
       if ($593) {
        $tbase$255$i = $572;$tsize$254$i = $ssize$0$$i;
        label = 194;
        break L258;
       } else {
        $br$0$ph$i = $592;$ssize$1$ph$i = $ssize$0$i;$tsize$0$ph$i = $ssize$0$$i;
        label = 184;
       }
      } else {
       $tsize$0323944$i = 0;
      }
     }
    }
   } while(0);
   L280: do {
    if ((label|0) == 184) {
     $604 = (0 - ($ssize$1$ph$i))|0;
     $605 = ($br$0$ph$i|0)!=((-1)|0);
     $606 = ($ssize$1$ph$i>>>0)<(2147483647);
     $or$cond5$i = $606 & $605;
     $607 = ($545>>>0)>($ssize$1$ph$i>>>0);
     $or$cond6$i = $607 & $or$cond5$i;
     do {
      if ($or$cond6$i) {
       $608 = HEAP32[(3184)>>2]|0;
       $609 = (($547) - ($ssize$1$ph$i))|0;
       $610 = (($609) + ($608))|0;
       $611 = (0 - ($608))|0;
       $612 = $610 & $611;
       $613 = ($612>>>0)<(2147483647);
       if ($613) {
        $614 = (_sbrk(($612|0))|0);
        $615 = ($614|0)==((-1)|0);
        if ($615) {
         (_sbrk(($604|0))|0);
         $tsize$0323944$i = $tsize$0$ph$i;
         break L280;
        } else {
         $616 = (($612) + ($ssize$1$ph$i))|0;
         $ssize$2$i = $616;
         break;
        }
       } else {
        $ssize$2$i = $ssize$1$ph$i;
       }
      } else {
       $ssize$2$i = $ssize$1$ph$i;
      }
     } while(0);
     $617 = ($br$0$ph$i|0)==((-1)|0);
     if ($617) {
      $tsize$0323944$i = $tsize$0$ph$i;
     } else {
      $tbase$255$i = $br$0$ph$i;$tsize$254$i = $ssize$2$i;
      label = 194;
      break L258;
     }
    }
   } while(0);
   $618 = HEAP32[(3148)>>2]|0;
   $619 = $618 | 4;
   HEAP32[(3148)>>2] = $619;
   $tsize$1$i = $tsize$0323944$i;
   label = 191;
  } else {
   $tsize$1$i = 0;
   label = 191;
  }
 } while(0);
 if ((label|0) == 191) {
  $620 = ($550>>>0)<(2147483647);
  if ($620) {
   $621 = (_sbrk(($550|0))|0);
   $622 = (_sbrk(0)|0);
   $623 = ($621|0)!=((-1)|0);
   $624 = ($622|0)!=((-1)|0);
   $or$cond3$i = $623 & $624;
   $625 = ($621>>>0)<($622>>>0);
   $or$cond8$i = $625 & $or$cond3$i;
   if ($or$cond8$i) {
    $626 = $622;
    $627 = $621;
    $628 = (($626) - ($627))|0;
    $629 = (($nb$0) + 40)|0;
    $630 = ($628>>>0)>($629>>>0);
    $$tsize$1$i = $630 ? $628 : $tsize$1$i;
    if ($630) {
     $tbase$255$i = $621;$tsize$254$i = $$tsize$1$i;
     label = 194;
    }
   }
  }
 }
 if ((label|0) == 194) {
  $631 = HEAP32[(3136)>>2]|0;
  $632 = (($631) + ($tsize$254$i))|0;
  HEAP32[(3136)>>2] = $632;
  $633 = HEAP32[(3140)>>2]|0;
  $634 = ($632>>>0)>($633>>>0);
  if ($634) {
   HEAP32[(3140)>>2] = $632;
  }
  $635 = HEAP32[(2728)>>2]|0;
  $636 = ($635|0)==(0|0);
  L299: do {
   if ($636) {
    $637 = HEAP32[(2720)>>2]|0;
    $638 = ($637|0)==(0|0);
    $639 = ($tbase$255$i>>>0)<($637>>>0);
    $or$cond9$i = $638 | $639;
    if ($or$cond9$i) {
     HEAP32[(2720)>>2] = $tbase$255$i;
    }
    HEAP32[(3152)>>2] = $tbase$255$i;
    HEAP32[(3156)>>2] = $tsize$254$i;
    HEAP32[(3164)>>2] = 0;
    $640 = HEAP32[3176>>2]|0;
    HEAP32[(2740)>>2] = $640;
    HEAP32[(2736)>>2] = -1;
    $i$02$i$i = 0;
    while(1) {
     $641 = $i$02$i$i << 1;
     $642 = (2744 + ($641<<2)|0);
     $$sum$i$i = (($641) + 3)|0;
     $643 = (2744 + ($$sum$i$i<<2)|0);
     HEAP32[$643>>2] = $642;
     $$sum1$i$i = (($641) + 2)|0;
     $644 = (2744 + ($$sum1$i$i<<2)|0);
     HEAP32[$644>>2] = $642;
     $645 = (($i$02$i$i) + 1)|0;
     $exitcond$i$i = ($645|0)==(32);
     if ($exitcond$i$i) {
      break;
     } else {
      $i$02$i$i = $645;
     }
    }
    $646 = (($tsize$254$i) + -40)|0;
    $647 = ((($tbase$255$i)) + 8|0);
    $648 = $647;
    $649 = $648 & 7;
    $650 = ($649|0)==(0);
    $651 = (0 - ($648))|0;
    $652 = $651 & 7;
    $653 = $650 ? 0 : $652;
    $654 = (($tbase$255$i) + ($653)|0);
    $655 = (($646) - ($653))|0;
    HEAP32[(2728)>>2] = $654;
    HEAP32[(2716)>>2] = $655;
    $656 = $655 | 1;
    $$sum$i13$i = (($653) + 4)|0;
    $657 = (($tbase$255$i) + ($$sum$i13$i)|0);
    HEAP32[$657>>2] = $656;
    $$sum2$i$i = (($tsize$254$i) + -36)|0;
    $658 = (($tbase$255$i) + ($$sum2$i$i)|0);
    HEAP32[$658>>2] = 40;
    $659 = HEAP32[(3192)>>2]|0;
    HEAP32[(2732)>>2] = $659;
   } else {
    $sp$084$i = (3152);
    while(1) {
     $660 = HEAP32[$sp$084$i>>2]|0;
     $661 = ((($sp$084$i)) + 4|0);
     $662 = HEAP32[$661>>2]|0;
     $663 = (($660) + ($662)|0);
     $664 = ($tbase$255$i|0)==($663|0);
     if ($664) {
      $$lcssa222 = $660;$$lcssa224 = $661;$$lcssa226 = $662;$sp$084$i$lcssa = $sp$084$i;
      label = 204;
      break;
     }
     $665 = ((($sp$084$i)) + 8|0);
     $666 = HEAP32[$665>>2]|0;
     $667 = ($666|0)==(0|0);
     if ($667) {
      break;
     } else {
      $sp$084$i = $666;
     }
    }
    if ((label|0) == 204) {
     $668 = ((($sp$084$i$lcssa)) + 12|0);
     $669 = HEAP32[$668>>2]|0;
     $670 = $669 & 8;
     $671 = ($670|0)==(0);
     if ($671) {
      $672 = ($635>>>0)>=($$lcssa222>>>0);
      $673 = ($635>>>0)<($tbase$255$i>>>0);
      $or$cond57$i = $673 & $672;
      if ($or$cond57$i) {
       $674 = (($$lcssa226) + ($tsize$254$i))|0;
       HEAP32[$$lcssa224>>2] = $674;
       $675 = HEAP32[(2716)>>2]|0;
       $676 = (($675) + ($tsize$254$i))|0;
       $677 = ((($635)) + 8|0);
       $678 = $677;
       $679 = $678 & 7;
       $680 = ($679|0)==(0);
       $681 = (0 - ($678))|0;
       $682 = $681 & 7;
       $683 = $680 ? 0 : $682;
       $684 = (($635) + ($683)|0);
       $685 = (($676) - ($683))|0;
       HEAP32[(2728)>>2] = $684;
       HEAP32[(2716)>>2] = $685;
       $686 = $685 | 1;
       $$sum$i17$i = (($683) + 4)|0;
       $687 = (($635) + ($$sum$i17$i)|0);
       HEAP32[$687>>2] = $686;
       $$sum2$i18$i = (($676) + 4)|0;
       $688 = (($635) + ($$sum2$i18$i)|0);
       HEAP32[$688>>2] = 40;
       $689 = HEAP32[(3192)>>2]|0;
       HEAP32[(2732)>>2] = $689;
       break;
      }
     }
    }
    $690 = HEAP32[(2720)>>2]|0;
    $691 = ($tbase$255$i>>>0)<($690>>>0);
    if ($691) {
     HEAP32[(2720)>>2] = $tbase$255$i;
     $755 = $tbase$255$i;
    } else {
     $755 = $690;
    }
    $692 = (($tbase$255$i) + ($tsize$254$i)|0);
    $sp$183$i = (3152);
    while(1) {
     $693 = HEAP32[$sp$183$i>>2]|0;
     $694 = ($693|0)==($692|0);
     if ($694) {
      $$lcssa219 = $sp$183$i;$sp$183$i$lcssa = $sp$183$i;
      label = 212;
      break;
     }
     $695 = ((($sp$183$i)) + 8|0);
     $696 = HEAP32[$695>>2]|0;
     $697 = ($696|0)==(0|0);
     if ($697) {
      $sp$0$i$i$i = (3152);
      break;
     } else {
      $sp$183$i = $696;
     }
    }
    if ((label|0) == 212) {
     $698 = ((($sp$183$i$lcssa)) + 12|0);
     $699 = HEAP32[$698>>2]|0;
     $700 = $699 & 8;
     $701 = ($700|0)==(0);
     if ($701) {
      HEAP32[$$lcssa219>>2] = $tbase$255$i;
      $702 = ((($sp$183$i$lcssa)) + 4|0);
      $703 = HEAP32[$702>>2]|0;
      $704 = (($703) + ($tsize$254$i))|0;
      HEAP32[$702>>2] = $704;
      $705 = ((($tbase$255$i)) + 8|0);
      $706 = $705;
      $707 = $706 & 7;
      $708 = ($707|0)==(0);
      $709 = (0 - ($706))|0;
      $710 = $709 & 7;
      $711 = $708 ? 0 : $710;
      $712 = (($tbase$255$i) + ($711)|0);
      $$sum112$i = (($tsize$254$i) + 8)|0;
      $713 = (($tbase$255$i) + ($$sum112$i)|0);
      $714 = $713;
      $715 = $714 & 7;
      $716 = ($715|0)==(0);
      $717 = (0 - ($714))|0;
      $718 = $717 & 7;
      $719 = $716 ? 0 : $718;
      $$sum113$i = (($719) + ($tsize$254$i))|0;
      $720 = (($tbase$255$i) + ($$sum113$i)|0);
      $721 = $720;
      $722 = $712;
      $723 = (($721) - ($722))|0;
      $$sum$i19$i = (($711) + ($nb$0))|0;
      $724 = (($tbase$255$i) + ($$sum$i19$i)|0);
      $725 = (($723) - ($nb$0))|0;
      $726 = $nb$0 | 3;
      $$sum1$i20$i = (($711) + 4)|0;
      $727 = (($tbase$255$i) + ($$sum1$i20$i)|0);
      HEAP32[$727>>2] = $726;
      $728 = ($720|0)==($635|0);
      L324: do {
       if ($728) {
        $729 = HEAP32[(2716)>>2]|0;
        $730 = (($729) + ($725))|0;
        HEAP32[(2716)>>2] = $730;
        HEAP32[(2728)>>2] = $724;
        $731 = $730 | 1;
        $$sum42$i$i = (($$sum$i19$i) + 4)|0;
        $732 = (($tbase$255$i) + ($$sum42$i$i)|0);
        HEAP32[$732>>2] = $731;
       } else {
        $733 = HEAP32[(2724)>>2]|0;
        $734 = ($720|0)==($733|0);
        if ($734) {
         $735 = HEAP32[(2712)>>2]|0;
         $736 = (($735) + ($725))|0;
         HEAP32[(2712)>>2] = $736;
         HEAP32[(2724)>>2] = $724;
         $737 = $736 | 1;
         $$sum40$i$i = (($$sum$i19$i) + 4)|0;
         $738 = (($tbase$255$i) + ($$sum40$i$i)|0);
         HEAP32[$738>>2] = $737;
         $$sum41$i$i = (($736) + ($$sum$i19$i))|0;
         $739 = (($tbase$255$i) + ($$sum41$i$i)|0);
         HEAP32[$739>>2] = $736;
         break;
        }
        $$sum2$i21$i = (($tsize$254$i) + 4)|0;
        $$sum114$i = (($$sum2$i21$i) + ($719))|0;
        $740 = (($tbase$255$i) + ($$sum114$i)|0);
        $741 = HEAP32[$740>>2]|0;
        $742 = $741 & 3;
        $743 = ($742|0)==(1);
        if ($743) {
         $744 = $741 & -8;
         $745 = $741 >>> 3;
         $746 = ($741>>>0)<(256);
         L332: do {
          if ($746) {
           $$sum3738$i$i = $719 | 8;
           $$sum124$i = (($$sum3738$i$i) + ($tsize$254$i))|0;
           $747 = (($tbase$255$i) + ($$sum124$i)|0);
           $748 = HEAP32[$747>>2]|0;
           $$sum39$i$i = (($tsize$254$i) + 12)|0;
           $$sum125$i = (($$sum39$i$i) + ($719))|0;
           $749 = (($tbase$255$i) + ($$sum125$i)|0);
           $750 = HEAP32[$749>>2]|0;
           $751 = $745 << 1;
           $752 = (2744 + ($751<<2)|0);
           $753 = ($748|0)==($752|0);
           do {
            if (!($753)) {
             $754 = ($748>>>0)<($755>>>0);
             if ($754) {
              _abort();
              // unreachable;
             }
             $756 = ((($748)) + 12|0);
             $757 = HEAP32[$756>>2]|0;
             $758 = ($757|0)==($720|0);
             if ($758) {
              break;
             }
             _abort();
             // unreachable;
            }
           } while(0);
           $759 = ($750|0)==($748|0);
           if ($759) {
            $760 = 1 << $745;
            $761 = $760 ^ -1;
            $762 = HEAP32[2704>>2]|0;
            $763 = $762 & $761;
            HEAP32[2704>>2] = $763;
            break;
           }
           $764 = ($750|0)==($752|0);
           do {
            if ($764) {
             $$pre57$i$i = ((($750)) + 8|0);
             $$pre$phi58$i$iZ2D = $$pre57$i$i;
            } else {
             $765 = ($750>>>0)<($755>>>0);
             if ($765) {
              _abort();
              // unreachable;
             }
             $766 = ((($750)) + 8|0);
             $767 = HEAP32[$766>>2]|0;
             $768 = ($767|0)==($720|0);
             if ($768) {
              $$pre$phi58$i$iZ2D = $766;
              break;
             }
             _abort();
             // unreachable;
            }
           } while(0);
           $769 = ((($748)) + 12|0);
           HEAP32[$769>>2] = $750;
           HEAP32[$$pre$phi58$i$iZ2D>>2] = $748;
          } else {
           $$sum34$i$i = $719 | 24;
           $$sum115$i = (($$sum34$i$i) + ($tsize$254$i))|0;
           $770 = (($tbase$255$i) + ($$sum115$i)|0);
           $771 = HEAP32[$770>>2]|0;
           $$sum5$i$i = (($tsize$254$i) + 12)|0;
           $$sum116$i = (($$sum5$i$i) + ($719))|0;
           $772 = (($tbase$255$i) + ($$sum116$i)|0);
           $773 = HEAP32[$772>>2]|0;
           $774 = ($773|0)==($720|0);
           do {
            if ($774) {
             $$sum67$i$i = $719 | 16;
             $$sum122$i = (($$sum2$i21$i) + ($$sum67$i$i))|0;
             $784 = (($tbase$255$i) + ($$sum122$i)|0);
             $785 = HEAP32[$784>>2]|0;
             $786 = ($785|0)==(0|0);
             if ($786) {
              $$sum123$i = (($$sum67$i$i) + ($tsize$254$i))|0;
              $787 = (($tbase$255$i) + ($$sum123$i)|0);
              $788 = HEAP32[$787>>2]|0;
              $789 = ($788|0)==(0|0);
              if ($789) {
               $R$1$i$i = 0;
               break;
              } else {
               $R$0$i$i = $788;$RP$0$i$i = $787;
              }
             } else {
              $R$0$i$i = $785;$RP$0$i$i = $784;
             }
             while(1) {
              $790 = ((($R$0$i$i)) + 20|0);
              $791 = HEAP32[$790>>2]|0;
              $792 = ($791|0)==(0|0);
              if (!($792)) {
               $R$0$i$i = $791;$RP$0$i$i = $790;
               continue;
              }
              $793 = ((($R$0$i$i)) + 16|0);
              $794 = HEAP32[$793>>2]|0;
              $795 = ($794|0)==(0|0);
              if ($795) {
               $R$0$i$i$lcssa = $R$0$i$i;$RP$0$i$i$lcssa = $RP$0$i$i;
               break;
              } else {
               $R$0$i$i = $794;$RP$0$i$i = $793;
              }
             }
             $796 = ($RP$0$i$i$lcssa>>>0)<($755>>>0);
             if ($796) {
              _abort();
              // unreachable;
             } else {
              HEAP32[$RP$0$i$i$lcssa>>2] = 0;
              $R$1$i$i = $R$0$i$i$lcssa;
              break;
             }
            } else {
             $$sum3536$i$i = $719 | 8;
             $$sum117$i = (($$sum3536$i$i) + ($tsize$254$i))|0;
             $775 = (($tbase$255$i) + ($$sum117$i)|0);
             $776 = HEAP32[$775>>2]|0;
             $777 = ($776>>>0)<($755>>>0);
             if ($777) {
              _abort();
              // unreachable;
             }
             $778 = ((($776)) + 12|0);
             $779 = HEAP32[$778>>2]|0;
             $780 = ($779|0)==($720|0);
             if (!($780)) {
              _abort();
              // unreachable;
             }
             $781 = ((($773)) + 8|0);
             $782 = HEAP32[$781>>2]|0;
             $783 = ($782|0)==($720|0);
             if ($783) {
              HEAP32[$778>>2] = $773;
              HEAP32[$781>>2] = $776;
              $R$1$i$i = $773;
              break;
             } else {
              _abort();
              // unreachable;
             }
            }
           } while(0);
           $797 = ($771|0)==(0|0);
           if ($797) {
            break;
           }
           $$sum30$i$i = (($tsize$254$i) + 28)|0;
           $$sum118$i = (($$sum30$i$i) + ($719))|0;
           $798 = (($tbase$255$i) + ($$sum118$i)|0);
           $799 = HEAP32[$798>>2]|0;
           $800 = (3008 + ($799<<2)|0);
           $801 = HEAP32[$800>>2]|0;
           $802 = ($720|0)==($801|0);
           do {
            if ($802) {
             HEAP32[$800>>2] = $R$1$i$i;
             $cond$i$i = ($R$1$i$i|0)==(0|0);
             if (!($cond$i$i)) {
              break;
             }
             $803 = 1 << $799;
             $804 = $803 ^ -1;
             $805 = HEAP32[(2708)>>2]|0;
             $806 = $805 & $804;
             HEAP32[(2708)>>2] = $806;
             break L332;
            } else {
             $807 = HEAP32[(2720)>>2]|0;
             $808 = ($771>>>0)<($807>>>0);
             if ($808) {
              _abort();
              // unreachable;
             }
             $809 = ((($771)) + 16|0);
             $810 = HEAP32[$809>>2]|0;
             $811 = ($810|0)==($720|0);
             if ($811) {
              HEAP32[$809>>2] = $R$1$i$i;
             } else {
              $812 = ((($771)) + 20|0);
              HEAP32[$812>>2] = $R$1$i$i;
             }
             $813 = ($R$1$i$i|0)==(0|0);
             if ($813) {
              break L332;
             }
            }
           } while(0);
           $814 = HEAP32[(2720)>>2]|0;
           $815 = ($R$1$i$i>>>0)<($814>>>0);
           if ($815) {
            _abort();
            // unreachable;
           }
           $816 = ((($R$1$i$i)) + 24|0);
           HEAP32[$816>>2] = $771;
           $$sum3132$i$i = $719 | 16;
           $$sum119$i = (($$sum3132$i$i) + ($tsize$254$i))|0;
           $817 = (($tbase$255$i) + ($$sum119$i)|0);
           $818 = HEAP32[$817>>2]|0;
           $819 = ($818|0)==(0|0);
           do {
            if (!($819)) {
             $820 = ($818>>>0)<($814>>>0);
             if ($820) {
              _abort();
              // unreachable;
             } else {
              $821 = ((($R$1$i$i)) + 16|0);
              HEAP32[$821>>2] = $818;
              $822 = ((($818)) + 24|0);
              HEAP32[$822>>2] = $R$1$i$i;
              break;
             }
            }
           } while(0);
           $$sum120$i = (($$sum2$i21$i) + ($$sum3132$i$i))|0;
           $823 = (($tbase$255$i) + ($$sum120$i)|0);
           $824 = HEAP32[$823>>2]|0;
           $825 = ($824|0)==(0|0);
           if ($825) {
            break;
           }
           $826 = HEAP32[(2720)>>2]|0;
           $827 = ($824>>>0)<($826>>>0);
           if ($827) {
            _abort();
            // unreachable;
           } else {
            $828 = ((($R$1$i$i)) + 20|0);
            HEAP32[$828>>2] = $824;
            $829 = ((($824)) + 24|0);
            HEAP32[$829>>2] = $R$1$i$i;
            break;
           }
          }
         } while(0);
         $$sum9$i$i = $744 | $719;
         $$sum121$i = (($$sum9$i$i) + ($tsize$254$i))|0;
         $830 = (($tbase$255$i) + ($$sum121$i)|0);
         $831 = (($744) + ($725))|0;
         $oldfirst$0$i$i = $830;$qsize$0$i$i = $831;
        } else {
         $oldfirst$0$i$i = $720;$qsize$0$i$i = $725;
        }
        $832 = ((($oldfirst$0$i$i)) + 4|0);
        $833 = HEAP32[$832>>2]|0;
        $834 = $833 & -2;
        HEAP32[$832>>2] = $834;
        $835 = $qsize$0$i$i | 1;
        $$sum10$i$i = (($$sum$i19$i) + 4)|0;
        $836 = (($tbase$255$i) + ($$sum10$i$i)|0);
        HEAP32[$836>>2] = $835;
        $$sum11$i$i = (($qsize$0$i$i) + ($$sum$i19$i))|0;
        $837 = (($tbase$255$i) + ($$sum11$i$i)|0);
        HEAP32[$837>>2] = $qsize$0$i$i;
        $838 = $qsize$0$i$i >>> 3;
        $839 = ($qsize$0$i$i>>>0)<(256);
        if ($839) {
         $840 = $838 << 1;
         $841 = (2744 + ($840<<2)|0);
         $842 = HEAP32[2704>>2]|0;
         $843 = 1 << $838;
         $844 = $842 & $843;
         $845 = ($844|0)==(0);
         do {
          if ($845) {
           $846 = $842 | $843;
           HEAP32[2704>>2] = $846;
           $$pre$i22$i = (($840) + 2)|0;
           $$pre56$i$i = (2744 + ($$pre$i22$i<<2)|0);
           $$pre$phi$i23$iZ2D = $$pre56$i$i;$F4$0$i$i = $841;
          } else {
           $$sum29$i$i = (($840) + 2)|0;
           $847 = (2744 + ($$sum29$i$i<<2)|0);
           $848 = HEAP32[$847>>2]|0;
           $849 = HEAP32[(2720)>>2]|0;
           $850 = ($848>>>0)<($849>>>0);
           if (!($850)) {
            $$pre$phi$i23$iZ2D = $847;$F4$0$i$i = $848;
            break;
           }
           _abort();
           // unreachable;
          }
         } while(0);
         HEAP32[$$pre$phi$i23$iZ2D>>2] = $724;
         $851 = ((($F4$0$i$i)) + 12|0);
         HEAP32[$851>>2] = $724;
         $$sum27$i$i = (($$sum$i19$i) + 8)|0;
         $852 = (($tbase$255$i) + ($$sum27$i$i)|0);
         HEAP32[$852>>2] = $F4$0$i$i;
         $$sum28$i$i = (($$sum$i19$i) + 12)|0;
         $853 = (($tbase$255$i) + ($$sum28$i$i)|0);
         HEAP32[$853>>2] = $841;
         break;
        }
        $854 = $qsize$0$i$i >>> 8;
        $855 = ($854|0)==(0);
        do {
         if ($855) {
          $I7$0$i$i = 0;
         } else {
          $856 = ($qsize$0$i$i>>>0)>(16777215);
          if ($856) {
           $I7$0$i$i = 31;
           break;
          }
          $857 = (($854) + 1048320)|0;
          $858 = $857 >>> 16;
          $859 = $858 & 8;
          $860 = $854 << $859;
          $861 = (($860) + 520192)|0;
          $862 = $861 >>> 16;
          $863 = $862 & 4;
          $864 = $863 | $859;
          $865 = $860 << $863;
          $866 = (($865) + 245760)|0;
          $867 = $866 >>> 16;
          $868 = $867 & 2;
          $869 = $864 | $868;
          $870 = (14 - ($869))|0;
          $871 = $865 << $868;
          $872 = $871 >>> 15;
          $873 = (($870) + ($872))|0;
          $874 = $873 << 1;
          $875 = (($873) + 7)|0;
          $876 = $qsize$0$i$i >>> $875;
          $877 = $876 & 1;
          $878 = $877 | $874;
          $I7$0$i$i = $878;
         }
        } while(0);
        $879 = (3008 + ($I7$0$i$i<<2)|0);
        $$sum12$i$i = (($$sum$i19$i) + 28)|0;
        $880 = (($tbase$255$i) + ($$sum12$i$i)|0);
        HEAP32[$880>>2] = $I7$0$i$i;
        $$sum13$i$i = (($$sum$i19$i) + 16)|0;
        $881 = (($tbase$255$i) + ($$sum13$i$i)|0);
        $$sum14$i$i = (($$sum$i19$i) + 20)|0;
        $882 = (($tbase$255$i) + ($$sum14$i$i)|0);
        HEAP32[$882>>2] = 0;
        HEAP32[$881>>2] = 0;
        $883 = HEAP32[(2708)>>2]|0;
        $884 = 1 << $I7$0$i$i;
        $885 = $883 & $884;
        $886 = ($885|0)==(0);
        if ($886) {
         $887 = $883 | $884;
         HEAP32[(2708)>>2] = $887;
         HEAP32[$879>>2] = $724;
         $$sum15$i$i = (($$sum$i19$i) + 24)|0;
         $888 = (($tbase$255$i) + ($$sum15$i$i)|0);
         HEAP32[$888>>2] = $879;
         $$sum16$i$i = (($$sum$i19$i) + 12)|0;
         $889 = (($tbase$255$i) + ($$sum16$i$i)|0);
         HEAP32[$889>>2] = $724;
         $$sum17$i$i = (($$sum$i19$i) + 8)|0;
         $890 = (($tbase$255$i) + ($$sum17$i$i)|0);
         HEAP32[$890>>2] = $724;
         break;
        }
        $891 = HEAP32[$879>>2]|0;
        $892 = ((($891)) + 4|0);
        $893 = HEAP32[$892>>2]|0;
        $894 = $893 & -8;
        $895 = ($894|0)==($qsize$0$i$i|0);
        L418: do {
         if ($895) {
          $T$0$lcssa$i25$i = $891;
         } else {
          $896 = ($I7$0$i$i|0)==(31);
          $897 = $I7$0$i$i >>> 1;
          $898 = (25 - ($897))|0;
          $899 = $896 ? 0 : $898;
          $900 = $qsize$0$i$i << $899;
          $K8$051$i$i = $900;$T$050$i$i = $891;
          while(1) {
           $907 = $K8$051$i$i >>> 31;
           $908 = (((($T$050$i$i)) + 16|0) + ($907<<2)|0);
           $903 = HEAP32[$908>>2]|0;
           $909 = ($903|0)==(0|0);
           if ($909) {
            $$lcssa = $908;$T$050$i$i$lcssa = $T$050$i$i;
            break;
           }
           $901 = $K8$051$i$i << 1;
           $902 = ((($903)) + 4|0);
           $904 = HEAP32[$902>>2]|0;
           $905 = $904 & -8;
           $906 = ($905|0)==($qsize$0$i$i|0);
           if ($906) {
            $T$0$lcssa$i25$i = $903;
            break L418;
           } else {
            $K8$051$i$i = $901;$T$050$i$i = $903;
           }
          }
          $910 = HEAP32[(2720)>>2]|0;
          $911 = ($$lcssa>>>0)<($910>>>0);
          if ($911) {
           _abort();
           // unreachable;
          } else {
           HEAP32[$$lcssa>>2] = $724;
           $$sum23$i$i = (($$sum$i19$i) + 24)|0;
           $912 = (($tbase$255$i) + ($$sum23$i$i)|0);
           HEAP32[$912>>2] = $T$050$i$i$lcssa;
           $$sum24$i$i = (($$sum$i19$i) + 12)|0;
           $913 = (($tbase$255$i) + ($$sum24$i$i)|0);
           HEAP32[$913>>2] = $724;
           $$sum25$i$i = (($$sum$i19$i) + 8)|0;
           $914 = (($tbase$255$i) + ($$sum25$i$i)|0);
           HEAP32[$914>>2] = $724;
           break L324;
          }
         }
        } while(0);
        $915 = ((($T$0$lcssa$i25$i)) + 8|0);
        $916 = HEAP32[$915>>2]|0;
        $917 = HEAP32[(2720)>>2]|0;
        $918 = ($916>>>0)>=($917>>>0);
        $not$$i26$i = ($T$0$lcssa$i25$i>>>0)>=($917>>>0);
        $919 = $918 & $not$$i26$i;
        if ($919) {
         $920 = ((($916)) + 12|0);
         HEAP32[$920>>2] = $724;
         HEAP32[$915>>2] = $724;
         $$sum20$i$i = (($$sum$i19$i) + 8)|0;
         $921 = (($tbase$255$i) + ($$sum20$i$i)|0);
         HEAP32[$921>>2] = $916;
         $$sum21$i$i = (($$sum$i19$i) + 12)|0;
         $922 = (($tbase$255$i) + ($$sum21$i$i)|0);
         HEAP32[$922>>2] = $T$0$lcssa$i25$i;
         $$sum22$i$i = (($$sum$i19$i) + 24)|0;
         $923 = (($tbase$255$i) + ($$sum22$i$i)|0);
         HEAP32[$923>>2] = 0;
         break;
        } else {
         _abort();
         // unreachable;
        }
       }
      } while(0);
      $$sum1819$i$i = $711 | 8;
      $924 = (($tbase$255$i) + ($$sum1819$i$i)|0);
      $mem$0 = $924;
      return ($mem$0|0);
     } else {
      $sp$0$i$i$i = (3152);
     }
    }
    while(1) {
     $925 = HEAP32[$sp$0$i$i$i>>2]|0;
     $926 = ($925>>>0)>($635>>>0);
     if (!($926)) {
      $927 = ((($sp$0$i$i$i)) + 4|0);
      $928 = HEAP32[$927>>2]|0;
      $929 = (($925) + ($928)|0);
      $930 = ($929>>>0)>($635>>>0);
      if ($930) {
       $$lcssa215 = $925;$$lcssa216 = $928;$$lcssa217 = $929;
       break;
      }
     }
     $931 = ((($sp$0$i$i$i)) + 8|0);
     $932 = HEAP32[$931>>2]|0;
     $sp$0$i$i$i = $932;
    }
    $$sum$i14$i = (($$lcssa216) + -47)|0;
    $$sum1$i15$i = (($$lcssa216) + -39)|0;
    $933 = (($$lcssa215) + ($$sum1$i15$i)|0);
    $934 = $933;
    $935 = $934 & 7;
    $936 = ($935|0)==(0);
    $937 = (0 - ($934))|0;
    $938 = $937 & 7;
    $939 = $936 ? 0 : $938;
    $$sum2$i16$i = (($$sum$i14$i) + ($939))|0;
    $940 = (($$lcssa215) + ($$sum2$i16$i)|0);
    $941 = ((($635)) + 16|0);
    $942 = ($940>>>0)<($941>>>0);
    $943 = $942 ? $635 : $940;
    $944 = ((($943)) + 8|0);
    $945 = (($tsize$254$i) + -40)|0;
    $946 = ((($tbase$255$i)) + 8|0);
    $947 = $946;
    $948 = $947 & 7;
    $949 = ($948|0)==(0);
    $950 = (0 - ($947))|0;
    $951 = $950 & 7;
    $952 = $949 ? 0 : $951;
    $953 = (($tbase$255$i) + ($952)|0);
    $954 = (($945) - ($952))|0;
    HEAP32[(2728)>>2] = $953;
    HEAP32[(2716)>>2] = $954;
    $955 = $954 | 1;
    $$sum$i$i$i = (($952) + 4)|0;
    $956 = (($tbase$255$i) + ($$sum$i$i$i)|0);
    HEAP32[$956>>2] = $955;
    $$sum2$i$i$i = (($tsize$254$i) + -36)|0;
    $957 = (($tbase$255$i) + ($$sum2$i$i$i)|0);
    HEAP32[$957>>2] = 40;
    $958 = HEAP32[(3192)>>2]|0;
    HEAP32[(2732)>>2] = $958;
    $959 = ((($943)) + 4|0);
    HEAP32[$959>>2] = 27;
    ;HEAP32[$944>>2]=HEAP32[(3152)>>2]|0;HEAP32[$944+4>>2]=HEAP32[(3152)+4>>2]|0;HEAP32[$944+8>>2]=HEAP32[(3152)+8>>2]|0;HEAP32[$944+12>>2]=HEAP32[(3152)+12>>2]|0;
    HEAP32[(3152)>>2] = $tbase$255$i;
    HEAP32[(3156)>>2] = $tsize$254$i;
    HEAP32[(3164)>>2] = 0;
    HEAP32[(3160)>>2] = $944;
    $960 = ((($943)) + 28|0);
    HEAP32[$960>>2] = 7;
    $961 = ((($943)) + 32|0);
    $962 = ($961>>>0)<($$lcssa217>>>0);
    if ($962) {
     $964 = $960;
     while(1) {
      $963 = ((($964)) + 4|0);
      HEAP32[$963>>2] = 7;
      $965 = ((($964)) + 8|0);
      $966 = ($965>>>0)<($$lcssa217>>>0);
      if ($966) {
       $964 = $963;
      } else {
       break;
      }
     }
    }
    $967 = ($943|0)==($635|0);
    if (!($967)) {
     $968 = $943;
     $969 = $635;
     $970 = (($968) - ($969))|0;
     $971 = HEAP32[$959>>2]|0;
     $972 = $971 & -2;
     HEAP32[$959>>2] = $972;
     $973 = $970 | 1;
     $974 = ((($635)) + 4|0);
     HEAP32[$974>>2] = $973;
     HEAP32[$943>>2] = $970;
     $975 = $970 >>> 3;
     $976 = ($970>>>0)<(256);
     if ($976) {
      $977 = $975 << 1;
      $978 = (2744 + ($977<<2)|0);
      $979 = HEAP32[2704>>2]|0;
      $980 = 1 << $975;
      $981 = $979 & $980;
      $982 = ($981|0)==(0);
      if ($982) {
       $983 = $979 | $980;
       HEAP32[2704>>2] = $983;
       $$pre$i$i = (($977) + 2)|0;
       $$pre14$i$i = (2744 + ($$pre$i$i<<2)|0);
       $$pre$phi$i$iZ2D = $$pre14$i$i;$F$0$i$i = $978;
      } else {
       $$sum4$i$i = (($977) + 2)|0;
       $984 = (2744 + ($$sum4$i$i<<2)|0);
       $985 = HEAP32[$984>>2]|0;
       $986 = HEAP32[(2720)>>2]|0;
       $987 = ($985>>>0)<($986>>>0);
       if ($987) {
        _abort();
        // unreachable;
       } else {
        $$pre$phi$i$iZ2D = $984;$F$0$i$i = $985;
       }
      }
      HEAP32[$$pre$phi$i$iZ2D>>2] = $635;
      $988 = ((($F$0$i$i)) + 12|0);
      HEAP32[$988>>2] = $635;
      $989 = ((($635)) + 8|0);
      HEAP32[$989>>2] = $F$0$i$i;
      $990 = ((($635)) + 12|0);
      HEAP32[$990>>2] = $978;
      break;
     }
     $991 = $970 >>> 8;
     $992 = ($991|0)==(0);
     if ($992) {
      $I1$0$i$i = 0;
     } else {
      $993 = ($970>>>0)>(16777215);
      if ($993) {
       $I1$0$i$i = 31;
      } else {
       $994 = (($991) + 1048320)|0;
       $995 = $994 >>> 16;
       $996 = $995 & 8;
       $997 = $991 << $996;
       $998 = (($997) + 520192)|0;
       $999 = $998 >>> 16;
       $1000 = $999 & 4;
       $1001 = $1000 | $996;
       $1002 = $997 << $1000;
       $1003 = (($1002) + 245760)|0;
       $1004 = $1003 >>> 16;
       $1005 = $1004 & 2;
       $1006 = $1001 | $1005;
       $1007 = (14 - ($1006))|0;
       $1008 = $1002 << $1005;
       $1009 = $1008 >>> 15;
       $1010 = (($1007) + ($1009))|0;
       $1011 = $1010 << 1;
       $1012 = (($1010) + 7)|0;
       $1013 = $970 >>> $1012;
       $1014 = $1013 & 1;
       $1015 = $1014 | $1011;
       $I1$0$i$i = $1015;
      }
     }
     $1016 = (3008 + ($I1$0$i$i<<2)|0);
     $1017 = ((($635)) + 28|0);
     HEAP32[$1017>>2] = $I1$0$i$i;
     $1018 = ((($635)) + 20|0);
     HEAP32[$1018>>2] = 0;
     HEAP32[$941>>2] = 0;
     $1019 = HEAP32[(2708)>>2]|0;
     $1020 = 1 << $I1$0$i$i;
     $1021 = $1019 & $1020;
     $1022 = ($1021|0)==(0);
     if ($1022) {
      $1023 = $1019 | $1020;
      HEAP32[(2708)>>2] = $1023;
      HEAP32[$1016>>2] = $635;
      $1024 = ((($635)) + 24|0);
      HEAP32[$1024>>2] = $1016;
      $1025 = ((($635)) + 12|0);
      HEAP32[$1025>>2] = $635;
      $1026 = ((($635)) + 8|0);
      HEAP32[$1026>>2] = $635;
      break;
     }
     $1027 = HEAP32[$1016>>2]|0;
     $1028 = ((($1027)) + 4|0);
     $1029 = HEAP32[$1028>>2]|0;
     $1030 = $1029 & -8;
     $1031 = ($1030|0)==($970|0);
     L459: do {
      if ($1031) {
       $T$0$lcssa$i$i = $1027;
      } else {
       $1032 = ($I1$0$i$i|0)==(31);
       $1033 = $I1$0$i$i >>> 1;
       $1034 = (25 - ($1033))|0;
       $1035 = $1032 ? 0 : $1034;
       $1036 = $970 << $1035;
       $K2$07$i$i = $1036;$T$06$i$i = $1027;
       while(1) {
        $1043 = $K2$07$i$i >>> 31;
        $1044 = (((($T$06$i$i)) + 16|0) + ($1043<<2)|0);
        $1039 = HEAP32[$1044>>2]|0;
        $1045 = ($1039|0)==(0|0);
        if ($1045) {
         $$lcssa211 = $1044;$T$06$i$i$lcssa = $T$06$i$i;
         break;
        }
        $1037 = $K2$07$i$i << 1;
        $1038 = ((($1039)) + 4|0);
        $1040 = HEAP32[$1038>>2]|0;
        $1041 = $1040 & -8;
        $1042 = ($1041|0)==($970|0);
        if ($1042) {
         $T$0$lcssa$i$i = $1039;
         break L459;
        } else {
         $K2$07$i$i = $1037;$T$06$i$i = $1039;
        }
       }
       $1046 = HEAP32[(2720)>>2]|0;
       $1047 = ($$lcssa211>>>0)<($1046>>>0);
       if ($1047) {
        _abort();
        // unreachable;
       } else {
        HEAP32[$$lcssa211>>2] = $635;
        $1048 = ((($635)) + 24|0);
        HEAP32[$1048>>2] = $T$06$i$i$lcssa;
        $1049 = ((($635)) + 12|0);
        HEAP32[$1049>>2] = $635;
        $1050 = ((($635)) + 8|0);
        HEAP32[$1050>>2] = $635;
        break L299;
       }
      }
     } while(0);
     $1051 = ((($T$0$lcssa$i$i)) + 8|0);
     $1052 = HEAP32[$1051>>2]|0;
     $1053 = HEAP32[(2720)>>2]|0;
     $1054 = ($1052>>>0)>=($1053>>>0);
     $not$$i$i = ($T$0$lcssa$i$i>>>0)>=($1053>>>0);
     $1055 = $1054 & $not$$i$i;
     if ($1055) {
      $1056 = ((($1052)) + 12|0);
      HEAP32[$1056>>2] = $635;
      HEAP32[$1051>>2] = $635;
      $1057 = ((($635)) + 8|0);
      HEAP32[$1057>>2] = $1052;
      $1058 = ((($635)) + 12|0);
      HEAP32[$1058>>2] = $T$0$lcssa$i$i;
      $1059 = ((($635)) + 24|0);
      HEAP32[$1059>>2] = 0;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   }
  } while(0);
  $1060 = HEAP32[(2716)>>2]|0;
  $1061 = ($1060>>>0)>($nb$0>>>0);
  if ($1061) {
   $1062 = (($1060) - ($nb$0))|0;
   HEAP32[(2716)>>2] = $1062;
   $1063 = HEAP32[(2728)>>2]|0;
   $1064 = (($1063) + ($nb$0)|0);
   HEAP32[(2728)>>2] = $1064;
   $1065 = $1062 | 1;
   $$sum$i32 = (($nb$0) + 4)|0;
   $1066 = (($1063) + ($$sum$i32)|0);
   HEAP32[$1066>>2] = $1065;
   $1067 = $nb$0 | 3;
   $1068 = ((($1063)) + 4|0);
   HEAP32[$1068>>2] = $1067;
   $1069 = ((($1063)) + 8|0);
   $mem$0 = $1069;
   return ($mem$0|0);
  }
 }
 $1070 = (___errno_location()|0);
 HEAP32[$1070>>2] = 12;
 $mem$0 = 0;
 return ($mem$0|0);
}
function _free($mem) {
 $mem = $mem|0;
 var $$lcssa = 0, $$pre = 0, $$pre$phi59Z2D = 0, $$pre$phi61Z2D = 0, $$pre$phiZ2D = 0, $$pre57 = 0, $$pre58 = 0, $$pre60 = 0, $$sum = 0, $$sum11 = 0, $$sum12 = 0, $$sum13 = 0, $$sum14 = 0, $$sum1718 = 0, $$sum19 = 0, $$sum2 = 0, $$sum20 = 0, $$sum22 = 0, $$sum23 = 0, $$sum24 = 0;
 var $$sum25 = 0, $$sum26 = 0, $$sum27 = 0, $$sum28 = 0, $$sum29 = 0, $$sum3 = 0, $$sum30 = 0, $$sum31 = 0, $$sum5 = 0, $$sum67 = 0, $$sum8 = 0, $$sum9 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0;
 var $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0;
 var $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0;
 var $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0;
 var $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0;
 var $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0;
 var $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0;
 var $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0;
 var $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0;
 var $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0;
 var $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0;
 var $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0;
 var $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0;
 var $321 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $F16$0 = 0, $I18$0 = 0, $K19$052 = 0, $R$0 = 0, $R$0$lcssa = 0, $R$1 = 0;
 var $R7$0 = 0, $R7$0$lcssa = 0, $R7$1 = 0, $RP$0 = 0, $RP$0$lcssa = 0, $RP9$0 = 0, $RP9$0$lcssa = 0, $T$0$lcssa = 0, $T$051 = 0, $T$051$lcssa = 0, $cond = 0, $cond47 = 0, $not$ = 0, $p$0 = 0, $psize$0 = 0, $psize$1 = 0, $sp$0$i = 0, $sp$0$in$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($mem|0)==(0|0);
 if ($0) {
  return;
 }
 $1 = ((($mem)) + -8|0);
 $2 = HEAP32[(2720)>>2]|0;
 $3 = ($1>>>0)<($2>>>0);
 if ($3) {
  _abort();
  // unreachable;
 }
 $4 = ((($mem)) + -4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 & 3;
 $7 = ($6|0)==(1);
 if ($7) {
  _abort();
  // unreachable;
 }
 $8 = $5 & -8;
 $$sum = (($8) + -8)|0;
 $9 = (($mem) + ($$sum)|0);
 $10 = $5 & 1;
 $11 = ($10|0)==(0);
 do {
  if ($11) {
   $12 = HEAP32[$1>>2]|0;
   $13 = ($6|0)==(0);
   if ($13) {
    return;
   }
   $$sum2 = (-8 - ($12))|0;
   $14 = (($mem) + ($$sum2)|0);
   $15 = (($12) + ($8))|0;
   $16 = ($14>>>0)<($2>>>0);
   if ($16) {
    _abort();
    // unreachable;
   }
   $17 = HEAP32[(2724)>>2]|0;
   $18 = ($14|0)==($17|0);
   if ($18) {
    $$sum3 = (($8) + -4)|0;
    $103 = (($mem) + ($$sum3)|0);
    $104 = HEAP32[$103>>2]|0;
    $105 = $104 & 3;
    $106 = ($105|0)==(3);
    if (!($106)) {
     $p$0 = $14;$psize$0 = $15;
     break;
    }
    HEAP32[(2712)>>2] = $15;
    $107 = $104 & -2;
    HEAP32[$103>>2] = $107;
    $108 = $15 | 1;
    $$sum20 = (($$sum2) + 4)|0;
    $109 = (($mem) + ($$sum20)|0);
    HEAP32[$109>>2] = $108;
    HEAP32[$9>>2] = $15;
    return;
   }
   $19 = $12 >>> 3;
   $20 = ($12>>>0)<(256);
   if ($20) {
    $$sum30 = (($$sum2) + 8)|0;
    $21 = (($mem) + ($$sum30)|0);
    $22 = HEAP32[$21>>2]|0;
    $$sum31 = (($$sum2) + 12)|0;
    $23 = (($mem) + ($$sum31)|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = $19 << 1;
    $26 = (2744 + ($25<<2)|0);
    $27 = ($22|0)==($26|0);
    if (!($27)) {
     $28 = ($22>>>0)<($2>>>0);
     if ($28) {
      _abort();
      // unreachable;
     }
     $29 = ((($22)) + 12|0);
     $30 = HEAP32[$29>>2]|0;
     $31 = ($30|0)==($14|0);
     if (!($31)) {
      _abort();
      // unreachable;
     }
    }
    $32 = ($24|0)==($22|0);
    if ($32) {
     $33 = 1 << $19;
     $34 = $33 ^ -1;
     $35 = HEAP32[2704>>2]|0;
     $36 = $35 & $34;
     HEAP32[2704>>2] = $36;
     $p$0 = $14;$psize$0 = $15;
     break;
    }
    $37 = ($24|0)==($26|0);
    if ($37) {
     $$pre60 = ((($24)) + 8|0);
     $$pre$phi61Z2D = $$pre60;
    } else {
     $38 = ($24>>>0)<($2>>>0);
     if ($38) {
      _abort();
      // unreachable;
     }
     $39 = ((($24)) + 8|0);
     $40 = HEAP32[$39>>2]|0;
     $41 = ($40|0)==($14|0);
     if ($41) {
      $$pre$phi61Z2D = $39;
     } else {
      _abort();
      // unreachable;
     }
    }
    $42 = ((($22)) + 12|0);
    HEAP32[$42>>2] = $24;
    HEAP32[$$pre$phi61Z2D>>2] = $22;
    $p$0 = $14;$psize$0 = $15;
    break;
   }
   $$sum22 = (($$sum2) + 24)|0;
   $43 = (($mem) + ($$sum22)|0);
   $44 = HEAP32[$43>>2]|0;
   $$sum23 = (($$sum2) + 12)|0;
   $45 = (($mem) + ($$sum23)|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = ($46|0)==($14|0);
   do {
    if ($47) {
     $$sum25 = (($$sum2) + 20)|0;
     $57 = (($mem) + ($$sum25)|0);
     $58 = HEAP32[$57>>2]|0;
     $59 = ($58|0)==(0|0);
     if ($59) {
      $$sum24 = (($$sum2) + 16)|0;
      $60 = (($mem) + ($$sum24)|0);
      $61 = HEAP32[$60>>2]|0;
      $62 = ($61|0)==(0|0);
      if ($62) {
       $R$1 = 0;
       break;
      } else {
       $R$0 = $61;$RP$0 = $60;
      }
     } else {
      $R$0 = $58;$RP$0 = $57;
     }
     while(1) {
      $63 = ((($R$0)) + 20|0);
      $64 = HEAP32[$63>>2]|0;
      $65 = ($64|0)==(0|0);
      if (!($65)) {
       $R$0 = $64;$RP$0 = $63;
       continue;
      }
      $66 = ((($R$0)) + 16|0);
      $67 = HEAP32[$66>>2]|0;
      $68 = ($67|0)==(0|0);
      if ($68) {
       $R$0$lcssa = $R$0;$RP$0$lcssa = $RP$0;
       break;
      } else {
       $R$0 = $67;$RP$0 = $66;
      }
     }
     $69 = ($RP$0$lcssa>>>0)<($2>>>0);
     if ($69) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$RP$0$lcssa>>2] = 0;
      $R$1 = $R$0$lcssa;
      break;
     }
    } else {
     $$sum29 = (($$sum2) + 8)|0;
     $48 = (($mem) + ($$sum29)|0);
     $49 = HEAP32[$48>>2]|0;
     $50 = ($49>>>0)<($2>>>0);
     if ($50) {
      _abort();
      // unreachable;
     }
     $51 = ((($49)) + 12|0);
     $52 = HEAP32[$51>>2]|0;
     $53 = ($52|0)==($14|0);
     if (!($53)) {
      _abort();
      // unreachable;
     }
     $54 = ((($46)) + 8|0);
     $55 = HEAP32[$54>>2]|0;
     $56 = ($55|0)==($14|0);
     if ($56) {
      HEAP32[$51>>2] = $46;
      HEAP32[$54>>2] = $49;
      $R$1 = $46;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $70 = ($44|0)==(0|0);
   if ($70) {
    $p$0 = $14;$psize$0 = $15;
   } else {
    $$sum26 = (($$sum2) + 28)|0;
    $71 = (($mem) + ($$sum26)|0);
    $72 = HEAP32[$71>>2]|0;
    $73 = (3008 + ($72<<2)|0);
    $74 = HEAP32[$73>>2]|0;
    $75 = ($14|0)==($74|0);
    if ($75) {
     HEAP32[$73>>2] = $R$1;
     $cond = ($R$1|0)==(0|0);
     if ($cond) {
      $76 = 1 << $72;
      $77 = $76 ^ -1;
      $78 = HEAP32[(2708)>>2]|0;
      $79 = $78 & $77;
      HEAP32[(2708)>>2] = $79;
      $p$0 = $14;$psize$0 = $15;
      break;
     }
    } else {
     $80 = HEAP32[(2720)>>2]|0;
     $81 = ($44>>>0)<($80>>>0);
     if ($81) {
      _abort();
      // unreachable;
     }
     $82 = ((($44)) + 16|0);
     $83 = HEAP32[$82>>2]|0;
     $84 = ($83|0)==($14|0);
     if ($84) {
      HEAP32[$82>>2] = $R$1;
     } else {
      $85 = ((($44)) + 20|0);
      HEAP32[$85>>2] = $R$1;
     }
     $86 = ($R$1|0)==(0|0);
     if ($86) {
      $p$0 = $14;$psize$0 = $15;
      break;
     }
    }
    $87 = HEAP32[(2720)>>2]|0;
    $88 = ($R$1>>>0)<($87>>>0);
    if ($88) {
     _abort();
     // unreachable;
    }
    $89 = ((($R$1)) + 24|0);
    HEAP32[$89>>2] = $44;
    $$sum27 = (($$sum2) + 16)|0;
    $90 = (($mem) + ($$sum27)|0);
    $91 = HEAP32[$90>>2]|0;
    $92 = ($91|0)==(0|0);
    do {
     if (!($92)) {
      $93 = ($91>>>0)<($87>>>0);
      if ($93) {
       _abort();
       // unreachable;
      } else {
       $94 = ((($R$1)) + 16|0);
       HEAP32[$94>>2] = $91;
       $95 = ((($91)) + 24|0);
       HEAP32[$95>>2] = $R$1;
       break;
      }
     }
    } while(0);
    $$sum28 = (($$sum2) + 20)|0;
    $96 = (($mem) + ($$sum28)|0);
    $97 = HEAP32[$96>>2]|0;
    $98 = ($97|0)==(0|0);
    if ($98) {
     $p$0 = $14;$psize$0 = $15;
    } else {
     $99 = HEAP32[(2720)>>2]|0;
     $100 = ($97>>>0)<($99>>>0);
     if ($100) {
      _abort();
      // unreachable;
     } else {
      $101 = ((($R$1)) + 20|0);
      HEAP32[$101>>2] = $97;
      $102 = ((($97)) + 24|0);
      HEAP32[$102>>2] = $R$1;
      $p$0 = $14;$psize$0 = $15;
      break;
     }
    }
   }
  } else {
   $p$0 = $1;$psize$0 = $8;
  }
 } while(0);
 $110 = ($p$0>>>0)<($9>>>0);
 if (!($110)) {
  _abort();
  // unreachable;
 }
 $$sum19 = (($8) + -4)|0;
 $111 = (($mem) + ($$sum19)|0);
 $112 = HEAP32[$111>>2]|0;
 $113 = $112 & 1;
 $114 = ($113|0)==(0);
 if ($114) {
  _abort();
  // unreachable;
 }
 $115 = $112 & 2;
 $116 = ($115|0)==(0);
 if ($116) {
  $117 = HEAP32[(2728)>>2]|0;
  $118 = ($9|0)==($117|0);
  if ($118) {
   $119 = HEAP32[(2716)>>2]|0;
   $120 = (($119) + ($psize$0))|0;
   HEAP32[(2716)>>2] = $120;
   HEAP32[(2728)>>2] = $p$0;
   $121 = $120 | 1;
   $122 = ((($p$0)) + 4|0);
   HEAP32[$122>>2] = $121;
   $123 = HEAP32[(2724)>>2]|0;
   $124 = ($p$0|0)==($123|0);
   if (!($124)) {
    return;
   }
   HEAP32[(2724)>>2] = 0;
   HEAP32[(2712)>>2] = 0;
   return;
  }
  $125 = HEAP32[(2724)>>2]|0;
  $126 = ($9|0)==($125|0);
  if ($126) {
   $127 = HEAP32[(2712)>>2]|0;
   $128 = (($127) + ($psize$0))|0;
   HEAP32[(2712)>>2] = $128;
   HEAP32[(2724)>>2] = $p$0;
   $129 = $128 | 1;
   $130 = ((($p$0)) + 4|0);
   HEAP32[$130>>2] = $129;
   $131 = (($p$0) + ($128)|0);
   HEAP32[$131>>2] = $128;
   return;
  }
  $132 = $112 & -8;
  $133 = (($132) + ($psize$0))|0;
  $134 = $112 >>> 3;
  $135 = ($112>>>0)<(256);
  do {
   if ($135) {
    $136 = (($mem) + ($8)|0);
    $137 = HEAP32[$136>>2]|0;
    $$sum1718 = $8 | 4;
    $138 = (($mem) + ($$sum1718)|0);
    $139 = HEAP32[$138>>2]|0;
    $140 = $134 << 1;
    $141 = (2744 + ($140<<2)|0);
    $142 = ($137|0)==($141|0);
    if (!($142)) {
     $143 = HEAP32[(2720)>>2]|0;
     $144 = ($137>>>0)<($143>>>0);
     if ($144) {
      _abort();
      // unreachable;
     }
     $145 = ((($137)) + 12|0);
     $146 = HEAP32[$145>>2]|0;
     $147 = ($146|0)==($9|0);
     if (!($147)) {
      _abort();
      // unreachable;
     }
    }
    $148 = ($139|0)==($137|0);
    if ($148) {
     $149 = 1 << $134;
     $150 = $149 ^ -1;
     $151 = HEAP32[2704>>2]|0;
     $152 = $151 & $150;
     HEAP32[2704>>2] = $152;
     break;
    }
    $153 = ($139|0)==($141|0);
    if ($153) {
     $$pre58 = ((($139)) + 8|0);
     $$pre$phi59Z2D = $$pre58;
    } else {
     $154 = HEAP32[(2720)>>2]|0;
     $155 = ($139>>>0)<($154>>>0);
     if ($155) {
      _abort();
      // unreachable;
     }
     $156 = ((($139)) + 8|0);
     $157 = HEAP32[$156>>2]|0;
     $158 = ($157|0)==($9|0);
     if ($158) {
      $$pre$phi59Z2D = $156;
     } else {
      _abort();
      // unreachable;
     }
    }
    $159 = ((($137)) + 12|0);
    HEAP32[$159>>2] = $139;
    HEAP32[$$pre$phi59Z2D>>2] = $137;
   } else {
    $$sum5 = (($8) + 16)|0;
    $160 = (($mem) + ($$sum5)|0);
    $161 = HEAP32[$160>>2]|0;
    $$sum67 = $8 | 4;
    $162 = (($mem) + ($$sum67)|0);
    $163 = HEAP32[$162>>2]|0;
    $164 = ($163|0)==($9|0);
    do {
     if ($164) {
      $$sum9 = (($8) + 12)|0;
      $175 = (($mem) + ($$sum9)|0);
      $176 = HEAP32[$175>>2]|0;
      $177 = ($176|0)==(0|0);
      if ($177) {
       $$sum8 = (($8) + 8)|0;
       $178 = (($mem) + ($$sum8)|0);
       $179 = HEAP32[$178>>2]|0;
       $180 = ($179|0)==(0|0);
       if ($180) {
        $R7$1 = 0;
        break;
       } else {
        $R7$0 = $179;$RP9$0 = $178;
       }
      } else {
       $R7$0 = $176;$RP9$0 = $175;
      }
      while(1) {
       $181 = ((($R7$0)) + 20|0);
       $182 = HEAP32[$181>>2]|0;
       $183 = ($182|0)==(0|0);
       if (!($183)) {
        $R7$0 = $182;$RP9$0 = $181;
        continue;
       }
       $184 = ((($R7$0)) + 16|0);
       $185 = HEAP32[$184>>2]|0;
       $186 = ($185|0)==(0|0);
       if ($186) {
        $R7$0$lcssa = $R7$0;$RP9$0$lcssa = $RP9$0;
        break;
       } else {
        $R7$0 = $185;$RP9$0 = $184;
       }
      }
      $187 = HEAP32[(2720)>>2]|0;
      $188 = ($RP9$0$lcssa>>>0)<($187>>>0);
      if ($188) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$RP9$0$lcssa>>2] = 0;
       $R7$1 = $R7$0$lcssa;
       break;
      }
     } else {
      $165 = (($mem) + ($8)|0);
      $166 = HEAP32[$165>>2]|0;
      $167 = HEAP32[(2720)>>2]|0;
      $168 = ($166>>>0)<($167>>>0);
      if ($168) {
       _abort();
       // unreachable;
      }
      $169 = ((($166)) + 12|0);
      $170 = HEAP32[$169>>2]|0;
      $171 = ($170|0)==($9|0);
      if (!($171)) {
       _abort();
       // unreachable;
      }
      $172 = ((($163)) + 8|0);
      $173 = HEAP32[$172>>2]|0;
      $174 = ($173|0)==($9|0);
      if ($174) {
       HEAP32[$169>>2] = $163;
       HEAP32[$172>>2] = $166;
       $R7$1 = $163;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $189 = ($161|0)==(0|0);
    if (!($189)) {
     $$sum12 = (($8) + 20)|0;
     $190 = (($mem) + ($$sum12)|0);
     $191 = HEAP32[$190>>2]|0;
     $192 = (3008 + ($191<<2)|0);
     $193 = HEAP32[$192>>2]|0;
     $194 = ($9|0)==($193|0);
     if ($194) {
      HEAP32[$192>>2] = $R7$1;
      $cond47 = ($R7$1|0)==(0|0);
      if ($cond47) {
       $195 = 1 << $191;
       $196 = $195 ^ -1;
       $197 = HEAP32[(2708)>>2]|0;
       $198 = $197 & $196;
       HEAP32[(2708)>>2] = $198;
       break;
      }
     } else {
      $199 = HEAP32[(2720)>>2]|0;
      $200 = ($161>>>0)<($199>>>0);
      if ($200) {
       _abort();
       // unreachable;
      }
      $201 = ((($161)) + 16|0);
      $202 = HEAP32[$201>>2]|0;
      $203 = ($202|0)==($9|0);
      if ($203) {
       HEAP32[$201>>2] = $R7$1;
      } else {
       $204 = ((($161)) + 20|0);
       HEAP32[$204>>2] = $R7$1;
      }
      $205 = ($R7$1|0)==(0|0);
      if ($205) {
       break;
      }
     }
     $206 = HEAP32[(2720)>>2]|0;
     $207 = ($R7$1>>>0)<($206>>>0);
     if ($207) {
      _abort();
      // unreachable;
     }
     $208 = ((($R7$1)) + 24|0);
     HEAP32[$208>>2] = $161;
     $$sum13 = (($8) + 8)|0;
     $209 = (($mem) + ($$sum13)|0);
     $210 = HEAP32[$209>>2]|0;
     $211 = ($210|0)==(0|0);
     do {
      if (!($211)) {
       $212 = ($210>>>0)<($206>>>0);
       if ($212) {
        _abort();
        // unreachable;
       } else {
        $213 = ((($R7$1)) + 16|0);
        HEAP32[$213>>2] = $210;
        $214 = ((($210)) + 24|0);
        HEAP32[$214>>2] = $R7$1;
        break;
       }
      }
     } while(0);
     $$sum14 = (($8) + 12)|0;
     $215 = (($mem) + ($$sum14)|0);
     $216 = HEAP32[$215>>2]|0;
     $217 = ($216|0)==(0|0);
     if (!($217)) {
      $218 = HEAP32[(2720)>>2]|0;
      $219 = ($216>>>0)<($218>>>0);
      if ($219) {
       _abort();
       // unreachable;
      } else {
       $220 = ((($R7$1)) + 20|0);
       HEAP32[$220>>2] = $216;
       $221 = ((($216)) + 24|0);
       HEAP32[$221>>2] = $R7$1;
       break;
      }
     }
    }
   }
  } while(0);
  $222 = $133 | 1;
  $223 = ((($p$0)) + 4|0);
  HEAP32[$223>>2] = $222;
  $224 = (($p$0) + ($133)|0);
  HEAP32[$224>>2] = $133;
  $225 = HEAP32[(2724)>>2]|0;
  $226 = ($p$0|0)==($225|0);
  if ($226) {
   HEAP32[(2712)>>2] = $133;
   return;
  } else {
   $psize$1 = $133;
  }
 } else {
  $227 = $112 & -2;
  HEAP32[$111>>2] = $227;
  $228 = $psize$0 | 1;
  $229 = ((($p$0)) + 4|0);
  HEAP32[$229>>2] = $228;
  $230 = (($p$0) + ($psize$0)|0);
  HEAP32[$230>>2] = $psize$0;
  $psize$1 = $psize$0;
 }
 $231 = $psize$1 >>> 3;
 $232 = ($psize$1>>>0)<(256);
 if ($232) {
  $233 = $231 << 1;
  $234 = (2744 + ($233<<2)|0);
  $235 = HEAP32[2704>>2]|0;
  $236 = 1 << $231;
  $237 = $235 & $236;
  $238 = ($237|0)==(0);
  if ($238) {
   $239 = $235 | $236;
   HEAP32[2704>>2] = $239;
   $$pre = (($233) + 2)|0;
   $$pre57 = (2744 + ($$pre<<2)|0);
   $$pre$phiZ2D = $$pre57;$F16$0 = $234;
  } else {
   $$sum11 = (($233) + 2)|0;
   $240 = (2744 + ($$sum11<<2)|0);
   $241 = HEAP32[$240>>2]|0;
   $242 = HEAP32[(2720)>>2]|0;
   $243 = ($241>>>0)<($242>>>0);
   if ($243) {
    _abort();
    // unreachable;
   } else {
    $$pre$phiZ2D = $240;$F16$0 = $241;
   }
  }
  HEAP32[$$pre$phiZ2D>>2] = $p$0;
  $244 = ((($F16$0)) + 12|0);
  HEAP32[$244>>2] = $p$0;
  $245 = ((($p$0)) + 8|0);
  HEAP32[$245>>2] = $F16$0;
  $246 = ((($p$0)) + 12|0);
  HEAP32[$246>>2] = $234;
  return;
 }
 $247 = $psize$1 >>> 8;
 $248 = ($247|0)==(0);
 if ($248) {
  $I18$0 = 0;
 } else {
  $249 = ($psize$1>>>0)>(16777215);
  if ($249) {
   $I18$0 = 31;
  } else {
   $250 = (($247) + 1048320)|0;
   $251 = $250 >>> 16;
   $252 = $251 & 8;
   $253 = $247 << $252;
   $254 = (($253) + 520192)|0;
   $255 = $254 >>> 16;
   $256 = $255 & 4;
   $257 = $256 | $252;
   $258 = $253 << $256;
   $259 = (($258) + 245760)|0;
   $260 = $259 >>> 16;
   $261 = $260 & 2;
   $262 = $257 | $261;
   $263 = (14 - ($262))|0;
   $264 = $258 << $261;
   $265 = $264 >>> 15;
   $266 = (($263) + ($265))|0;
   $267 = $266 << 1;
   $268 = (($266) + 7)|0;
   $269 = $psize$1 >>> $268;
   $270 = $269 & 1;
   $271 = $270 | $267;
   $I18$0 = $271;
  }
 }
 $272 = (3008 + ($I18$0<<2)|0);
 $273 = ((($p$0)) + 28|0);
 HEAP32[$273>>2] = $I18$0;
 $274 = ((($p$0)) + 16|0);
 $275 = ((($p$0)) + 20|0);
 HEAP32[$275>>2] = 0;
 HEAP32[$274>>2] = 0;
 $276 = HEAP32[(2708)>>2]|0;
 $277 = 1 << $I18$0;
 $278 = $276 & $277;
 $279 = ($278|0)==(0);
 L199: do {
  if ($279) {
   $280 = $276 | $277;
   HEAP32[(2708)>>2] = $280;
   HEAP32[$272>>2] = $p$0;
   $281 = ((($p$0)) + 24|0);
   HEAP32[$281>>2] = $272;
   $282 = ((($p$0)) + 12|0);
   HEAP32[$282>>2] = $p$0;
   $283 = ((($p$0)) + 8|0);
   HEAP32[$283>>2] = $p$0;
  } else {
   $284 = HEAP32[$272>>2]|0;
   $285 = ((($284)) + 4|0);
   $286 = HEAP32[$285>>2]|0;
   $287 = $286 & -8;
   $288 = ($287|0)==($psize$1|0);
   L202: do {
    if ($288) {
     $T$0$lcssa = $284;
    } else {
     $289 = ($I18$0|0)==(31);
     $290 = $I18$0 >>> 1;
     $291 = (25 - ($290))|0;
     $292 = $289 ? 0 : $291;
     $293 = $psize$1 << $292;
     $K19$052 = $293;$T$051 = $284;
     while(1) {
      $300 = $K19$052 >>> 31;
      $301 = (((($T$051)) + 16|0) + ($300<<2)|0);
      $296 = HEAP32[$301>>2]|0;
      $302 = ($296|0)==(0|0);
      if ($302) {
       $$lcssa = $301;$T$051$lcssa = $T$051;
       break;
      }
      $294 = $K19$052 << 1;
      $295 = ((($296)) + 4|0);
      $297 = HEAP32[$295>>2]|0;
      $298 = $297 & -8;
      $299 = ($298|0)==($psize$1|0);
      if ($299) {
       $T$0$lcssa = $296;
       break L202;
      } else {
       $K19$052 = $294;$T$051 = $296;
      }
     }
     $303 = HEAP32[(2720)>>2]|0;
     $304 = ($$lcssa>>>0)<($303>>>0);
     if ($304) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$$lcssa>>2] = $p$0;
      $305 = ((($p$0)) + 24|0);
      HEAP32[$305>>2] = $T$051$lcssa;
      $306 = ((($p$0)) + 12|0);
      HEAP32[$306>>2] = $p$0;
      $307 = ((($p$0)) + 8|0);
      HEAP32[$307>>2] = $p$0;
      break L199;
     }
    }
   } while(0);
   $308 = ((($T$0$lcssa)) + 8|0);
   $309 = HEAP32[$308>>2]|0;
   $310 = HEAP32[(2720)>>2]|0;
   $311 = ($309>>>0)>=($310>>>0);
   $not$ = ($T$0$lcssa>>>0)>=($310>>>0);
   $312 = $311 & $not$;
   if ($312) {
    $313 = ((($309)) + 12|0);
    HEAP32[$313>>2] = $p$0;
    HEAP32[$308>>2] = $p$0;
    $314 = ((($p$0)) + 8|0);
    HEAP32[$314>>2] = $309;
    $315 = ((($p$0)) + 12|0);
    HEAP32[$315>>2] = $T$0$lcssa;
    $316 = ((($p$0)) + 24|0);
    HEAP32[$316>>2] = 0;
    break;
   } else {
    _abort();
    // unreachable;
   }
  }
 } while(0);
 $317 = HEAP32[(2736)>>2]|0;
 $318 = (($317) + -1)|0;
 HEAP32[(2736)>>2] = $318;
 $319 = ($318|0)==(0);
 if ($319) {
  $sp$0$in$i = (3160);
 } else {
  return;
 }
 while(1) {
  $sp$0$i = HEAP32[$sp$0$in$i>>2]|0;
  $320 = ($sp$0$i|0)==(0|0);
  $321 = ((($sp$0$i)) + 8|0);
  if ($320) {
   break;
  } else {
   $sp$0$in$i = $321;
  }
 }
 HEAP32[(2736)>>2] = -1;
 return;
}
function _realloc($oldmem,$bytes) {
 $oldmem = $oldmem|0;
 $bytes = $bytes|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $mem$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($oldmem|0)==(0|0);
 if ($0) {
  $1 = (_malloc($bytes)|0);
  $mem$0 = $1;
  return ($mem$0|0);
 }
 $2 = ($bytes>>>0)>(4294967231);
 if ($2) {
  $3 = (___errno_location()|0);
  HEAP32[$3>>2] = 12;
  $mem$0 = 0;
  return ($mem$0|0);
 }
 $4 = ($bytes>>>0)<(11);
 $5 = (($bytes) + 11)|0;
 $6 = $5 & -8;
 $7 = $4 ? 16 : $6;
 $8 = ((($oldmem)) + -8|0);
 $9 = (_try_realloc_chunk($8,$7)|0);
 $10 = ($9|0)==(0|0);
 if (!($10)) {
  $11 = ((($9)) + 8|0);
  $mem$0 = $11;
  return ($mem$0|0);
 }
 $12 = (_malloc($bytes)|0);
 $13 = ($12|0)==(0|0);
 if ($13) {
  $mem$0 = 0;
  return ($mem$0|0);
 }
 $14 = ((($oldmem)) + -4|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $15 & -8;
 $17 = $15 & 3;
 $18 = ($17|0)==(0);
 $19 = $18 ? 8 : 4;
 $20 = (($16) - ($19))|0;
 $21 = ($20>>>0)<($bytes>>>0);
 $22 = $21 ? $20 : $bytes;
 _memcpy(($12|0),($oldmem|0),($22|0))|0;
 _free($oldmem);
 $mem$0 = $12;
 return ($mem$0|0);
}
function _try_realloc_chunk($p,$nb) {
 $p = $p|0;
 $nb = $nb|0;
 var $$pre = 0, $$pre$phiZ2D = 0, $$sum = 0, $$sum11 = 0, $$sum12 = 0, $$sum13 = 0, $$sum14 = 0, $$sum15 = 0, $$sum16 = 0, $$sum17 = 0, $$sum19 = 0, $$sum2 = 0, $$sum20 = 0, $$sum22 = 0, $$sum23 = 0, $$sum2728 = 0, $$sum3 = 0, $$sum4 = 0, $$sum5 = 0, $$sum78 = 0;
 var $$sum910 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $R$0 = 0, $R$0$lcssa = 0, $R$1 = 0, $RP$0 = 0, $RP$0$lcssa = 0, $cond = 0, $newp$0 = 0, $notlhs = 0;
 var $notrhs = 0, $or$cond$not = 0, $or$cond30 = 0, $storemerge = 0, $storemerge21 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($p)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & -8;
 $3 = (($p) + ($2)|0);
 $4 = HEAP32[(2720)>>2]|0;
 $5 = $1 & 3;
 $notlhs = ($p>>>0)>=($4>>>0);
 $notrhs = ($5|0)!=(1);
 $or$cond$not = $notrhs & $notlhs;
 $6 = ($p>>>0)<($3>>>0);
 $or$cond30 = $or$cond$not & $6;
 if (!($or$cond30)) {
  _abort();
  // unreachable;
 }
 $$sum2728 = $2 | 4;
 $7 = (($p) + ($$sum2728)|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $8 & 1;
 $10 = ($9|0)==(0);
 if ($10) {
  _abort();
  // unreachable;
 }
 $11 = ($5|0)==(0);
 if ($11) {
  $12 = ($nb>>>0)<(256);
  if ($12) {
   $newp$0 = 0;
   return ($newp$0|0);
  }
  $13 = (($nb) + 4)|0;
  $14 = ($2>>>0)<($13>>>0);
  if (!($14)) {
   $15 = (($2) - ($nb))|0;
   $16 = HEAP32[(3184)>>2]|0;
   $17 = $16 << 1;
   $18 = ($15>>>0)>($17>>>0);
   if (!($18)) {
    $newp$0 = $p;
    return ($newp$0|0);
   }
  }
  $newp$0 = 0;
  return ($newp$0|0);
 }
 $19 = ($2>>>0)<($nb>>>0);
 if (!($19)) {
  $20 = (($2) - ($nb))|0;
  $21 = ($20>>>0)>(15);
  if (!($21)) {
   $newp$0 = $p;
   return ($newp$0|0);
  }
  $22 = (($p) + ($nb)|0);
  $23 = $1 & 1;
  $24 = $23 | $nb;
  $25 = $24 | 2;
  HEAP32[$0>>2] = $25;
  $$sum23 = (($nb) + 4)|0;
  $26 = (($p) + ($$sum23)|0);
  $27 = $20 | 3;
  HEAP32[$26>>2] = $27;
  $28 = HEAP32[$7>>2]|0;
  $29 = $28 | 1;
  HEAP32[$7>>2] = $29;
  _dispose_chunk($22,$20);
  $newp$0 = $p;
  return ($newp$0|0);
 }
 $30 = HEAP32[(2728)>>2]|0;
 $31 = ($3|0)==($30|0);
 if ($31) {
  $32 = HEAP32[(2716)>>2]|0;
  $33 = (($32) + ($2))|0;
  $34 = ($33>>>0)>($nb>>>0);
  if (!($34)) {
   $newp$0 = 0;
   return ($newp$0|0);
  }
  $35 = (($33) - ($nb))|0;
  $36 = (($p) + ($nb)|0);
  $37 = $1 & 1;
  $38 = $37 | $nb;
  $39 = $38 | 2;
  HEAP32[$0>>2] = $39;
  $$sum22 = (($nb) + 4)|0;
  $40 = (($p) + ($$sum22)|0);
  $41 = $35 | 1;
  HEAP32[$40>>2] = $41;
  HEAP32[(2728)>>2] = $36;
  HEAP32[(2716)>>2] = $35;
  $newp$0 = $p;
  return ($newp$0|0);
 }
 $42 = HEAP32[(2724)>>2]|0;
 $43 = ($3|0)==($42|0);
 if ($43) {
  $44 = HEAP32[(2712)>>2]|0;
  $45 = (($44) + ($2))|0;
  $46 = ($45>>>0)<($nb>>>0);
  if ($46) {
   $newp$0 = 0;
   return ($newp$0|0);
  }
  $47 = (($45) - ($nb))|0;
  $48 = ($47>>>0)>(15);
  if ($48) {
   $49 = (($p) + ($nb)|0);
   $50 = (($p) + ($45)|0);
   $51 = $1 & 1;
   $52 = $51 | $nb;
   $53 = $52 | 2;
   HEAP32[$0>>2] = $53;
   $$sum19 = (($nb) + 4)|0;
   $54 = (($p) + ($$sum19)|0);
   $55 = $47 | 1;
   HEAP32[$54>>2] = $55;
   HEAP32[$50>>2] = $47;
   $$sum20 = (($45) + 4)|0;
   $56 = (($p) + ($$sum20)|0);
   $57 = HEAP32[$56>>2]|0;
   $58 = $57 & -2;
   HEAP32[$56>>2] = $58;
   $storemerge = $49;$storemerge21 = $47;
  } else {
   $59 = $1 & 1;
   $60 = $59 | $45;
   $61 = $60 | 2;
   HEAP32[$0>>2] = $61;
   $$sum17 = (($45) + 4)|0;
   $62 = (($p) + ($$sum17)|0);
   $63 = HEAP32[$62>>2]|0;
   $64 = $63 | 1;
   HEAP32[$62>>2] = $64;
   $storemerge = 0;$storemerge21 = 0;
  }
  HEAP32[(2712)>>2] = $storemerge21;
  HEAP32[(2724)>>2] = $storemerge;
  $newp$0 = $p;
  return ($newp$0|0);
 }
 $65 = $8 & 2;
 $66 = ($65|0)==(0);
 if (!($66)) {
  $newp$0 = 0;
  return ($newp$0|0);
 }
 $67 = $8 & -8;
 $68 = (($67) + ($2))|0;
 $69 = ($68>>>0)<($nb>>>0);
 if ($69) {
  $newp$0 = 0;
  return ($newp$0|0);
 }
 $70 = (($68) - ($nb))|0;
 $71 = $8 >>> 3;
 $72 = ($8>>>0)<(256);
 do {
  if ($72) {
   $$sum15 = (($2) + 8)|0;
   $73 = (($p) + ($$sum15)|0);
   $74 = HEAP32[$73>>2]|0;
   $$sum16 = (($2) + 12)|0;
   $75 = (($p) + ($$sum16)|0);
   $76 = HEAP32[$75>>2]|0;
   $77 = $71 << 1;
   $78 = (2744 + ($77<<2)|0);
   $79 = ($74|0)==($78|0);
   if (!($79)) {
    $80 = ($74>>>0)<($4>>>0);
    if ($80) {
     _abort();
     // unreachable;
    }
    $81 = ((($74)) + 12|0);
    $82 = HEAP32[$81>>2]|0;
    $83 = ($82|0)==($3|0);
    if (!($83)) {
     _abort();
     // unreachable;
    }
   }
   $84 = ($76|0)==($74|0);
   if ($84) {
    $85 = 1 << $71;
    $86 = $85 ^ -1;
    $87 = HEAP32[2704>>2]|0;
    $88 = $87 & $86;
    HEAP32[2704>>2] = $88;
    break;
   }
   $89 = ($76|0)==($78|0);
   if ($89) {
    $$pre = ((($76)) + 8|0);
    $$pre$phiZ2D = $$pre;
   } else {
    $90 = ($76>>>0)<($4>>>0);
    if ($90) {
     _abort();
     // unreachable;
    }
    $91 = ((($76)) + 8|0);
    $92 = HEAP32[$91>>2]|0;
    $93 = ($92|0)==($3|0);
    if ($93) {
     $$pre$phiZ2D = $91;
    } else {
     _abort();
     // unreachable;
    }
   }
   $94 = ((($74)) + 12|0);
   HEAP32[$94>>2] = $76;
   HEAP32[$$pre$phiZ2D>>2] = $74;
  } else {
   $$sum = (($2) + 24)|0;
   $95 = (($p) + ($$sum)|0);
   $96 = HEAP32[$95>>2]|0;
   $$sum2 = (($2) + 12)|0;
   $97 = (($p) + ($$sum2)|0);
   $98 = HEAP32[$97>>2]|0;
   $99 = ($98|0)==($3|0);
   do {
    if ($99) {
     $$sum4 = (($2) + 20)|0;
     $109 = (($p) + ($$sum4)|0);
     $110 = HEAP32[$109>>2]|0;
     $111 = ($110|0)==(0|0);
     if ($111) {
      $$sum3 = (($2) + 16)|0;
      $112 = (($p) + ($$sum3)|0);
      $113 = HEAP32[$112>>2]|0;
      $114 = ($113|0)==(0|0);
      if ($114) {
       $R$1 = 0;
       break;
      } else {
       $R$0 = $113;$RP$0 = $112;
      }
     } else {
      $R$0 = $110;$RP$0 = $109;
     }
     while(1) {
      $115 = ((($R$0)) + 20|0);
      $116 = HEAP32[$115>>2]|0;
      $117 = ($116|0)==(0|0);
      if (!($117)) {
       $R$0 = $116;$RP$0 = $115;
       continue;
      }
      $118 = ((($R$0)) + 16|0);
      $119 = HEAP32[$118>>2]|0;
      $120 = ($119|0)==(0|0);
      if ($120) {
       $R$0$lcssa = $R$0;$RP$0$lcssa = $RP$0;
       break;
      } else {
       $R$0 = $119;$RP$0 = $118;
      }
     }
     $121 = ($RP$0$lcssa>>>0)<($4>>>0);
     if ($121) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$RP$0$lcssa>>2] = 0;
      $R$1 = $R$0$lcssa;
      break;
     }
    } else {
     $$sum14 = (($2) + 8)|0;
     $100 = (($p) + ($$sum14)|0);
     $101 = HEAP32[$100>>2]|0;
     $102 = ($101>>>0)<($4>>>0);
     if ($102) {
      _abort();
      // unreachable;
     }
     $103 = ((($101)) + 12|0);
     $104 = HEAP32[$103>>2]|0;
     $105 = ($104|0)==($3|0);
     if (!($105)) {
      _abort();
      // unreachable;
     }
     $106 = ((($98)) + 8|0);
     $107 = HEAP32[$106>>2]|0;
     $108 = ($107|0)==($3|0);
     if ($108) {
      HEAP32[$103>>2] = $98;
      HEAP32[$106>>2] = $101;
      $R$1 = $98;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $122 = ($96|0)==(0|0);
   if (!($122)) {
    $$sum11 = (($2) + 28)|0;
    $123 = (($p) + ($$sum11)|0);
    $124 = HEAP32[$123>>2]|0;
    $125 = (3008 + ($124<<2)|0);
    $126 = HEAP32[$125>>2]|0;
    $127 = ($3|0)==($126|0);
    if ($127) {
     HEAP32[$125>>2] = $R$1;
     $cond = ($R$1|0)==(0|0);
     if ($cond) {
      $128 = 1 << $124;
      $129 = $128 ^ -1;
      $130 = HEAP32[(2708)>>2]|0;
      $131 = $130 & $129;
      HEAP32[(2708)>>2] = $131;
      break;
     }
    } else {
     $132 = HEAP32[(2720)>>2]|0;
     $133 = ($96>>>0)<($132>>>0);
     if ($133) {
      _abort();
      // unreachable;
     }
     $134 = ((($96)) + 16|0);
     $135 = HEAP32[$134>>2]|0;
     $136 = ($135|0)==($3|0);
     if ($136) {
      HEAP32[$134>>2] = $R$1;
     } else {
      $137 = ((($96)) + 20|0);
      HEAP32[$137>>2] = $R$1;
     }
     $138 = ($R$1|0)==(0|0);
     if ($138) {
      break;
     }
    }
    $139 = HEAP32[(2720)>>2]|0;
    $140 = ($R$1>>>0)<($139>>>0);
    if ($140) {
     _abort();
     // unreachable;
    }
    $141 = ((($R$1)) + 24|0);
    HEAP32[$141>>2] = $96;
    $$sum12 = (($2) + 16)|0;
    $142 = (($p) + ($$sum12)|0);
    $143 = HEAP32[$142>>2]|0;
    $144 = ($143|0)==(0|0);
    do {
     if (!($144)) {
      $145 = ($143>>>0)<($139>>>0);
      if ($145) {
       _abort();
       // unreachable;
      } else {
       $146 = ((($R$1)) + 16|0);
       HEAP32[$146>>2] = $143;
       $147 = ((($143)) + 24|0);
       HEAP32[$147>>2] = $R$1;
       break;
      }
     }
    } while(0);
    $$sum13 = (($2) + 20)|0;
    $148 = (($p) + ($$sum13)|0);
    $149 = HEAP32[$148>>2]|0;
    $150 = ($149|0)==(0|0);
    if (!($150)) {
     $151 = HEAP32[(2720)>>2]|0;
     $152 = ($149>>>0)<($151>>>0);
     if ($152) {
      _abort();
      // unreachable;
     } else {
      $153 = ((($R$1)) + 20|0);
      HEAP32[$153>>2] = $149;
      $154 = ((($149)) + 24|0);
      HEAP32[$154>>2] = $R$1;
      break;
     }
    }
   }
  }
 } while(0);
 $155 = ($70>>>0)<(16);
 if ($155) {
  $156 = $1 & 1;
  $157 = $68 | $156;
  $158 = $157 | 2;
  HEAP32[$0>>2] = $158;
  $$sum910 = $68 | 4;
  $159 = (($p) + ($$sum910)|0);
  $160 = HEAP32[$159>>2]|0;
  $161 = $160 | 1;
  HEAP32[$159>>2] = $161;
  $newp$0 = $p;
  return ($newp$0|0);
 } else {
  $162 = (($p) + ($nb)|0);
  $163 = $1 & 1;
  $164 = $163 | $nb;
  $165 = $164 | 2;
  HEAP32[$0>>2] = $165;
  $$sum5 = (($nb) + 4)|0;
  $166 = (($p) + ($$sum5)|0);
  $167 = $70 | 3;
  HEAP32[$166>>2] = $167;
  $$sum78 = $68 | 4;
  $168 = (($p) + ($$sum78)|0);
  $169 = HEAP32[$168>>2]|0;
  $170 = $169 | 1;
  HEAP32[$168>>2] = $170;
  _dispose_chunk($162,$70);
  $newp$0 = $p;
  return ($newp$0|0);
 }
 return (0)|0;
}
function _dispose_chunk($p,$psize) {
 $p = $p|0;
 $psize = $psize|0;
 var $$0 = 0, $$02 = 0, $$1 = 0, $$lcssa = 0, $$pre = 0, $$pre$phi50Z2D = 0, $$pre$phi52Z2D = 0, $$pre$phiZ2D = 0, $$pre48 = 0, $$pre49 = 0, $$pre51 = 0, $$sum = 0, $$sum1 = 0, $$sum10 = 0, $$sum11 = 0, $$sum12 = 0, $$sum13 = 0, $$sum14 = 0, $$sum16 = 0, $$sum17 = 0;
 var $$sum18 = 0, $$sum19 = 0, $$sum2 = 0, $$sum20 = 0, $$sum21 = 0, $$sum22 = 0, $$sum23 = 0, $$sum24 = 0, $$sum25 = 0, $$sum3 = 0, $$sum4 = 0, $$sum5 = 0, $$sum7 = 0, $$sum8 = 0, $$sum9 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0;
 var $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0;
 var $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0;
 var $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0;
 var $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0;
 var $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0;
 var $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0;
 var $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0;
 var $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0;
 var $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0;
 var $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0;
 var $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0;
 var $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $F16$0 = 0, $I19$0 = 0, $K20$043 = 0, $R$0 = 0, $R$0$lcssa = 0, $R$1 = 0, $R7$0 = 0, $R7$0$lcssa = 0, $R7$1 = 0, $RP$0 = 0, $RP$0$lcssa = 0, $RP9$0 = 0, $RP9$0$lcssa = 0, $T$0$lcssa = 0, $T$042 = 0, $T$042$lcssa = 0, $cond = 0;
 var $cond39 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($p) + ($psize)|0);
 $1 = ((($p)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2 & 1;
 $4 = ($3|0)==(0);
 do {
  if ($4) {
   $5 = HEAP32[$p>>2]|0;
   $6 = $2 & 3;
   $7 = ($6|0)==(0);
   if ($7) {
    return;
   }
   $8 = (0 - ($5))|0;
   $9 = (($p) + ($8)|0);
   $10 = (($5) + ($psize))|0;
   $11 = HEAP32[(2720)>>2]|0;
   $12 = ($9>>>0)<($11>>>0);
   if ($12) {
    _abort();
    // unreachable;
   }
   $13 = HEAP32[(2724)>>2]|0;
   $14 = ($9|0)==($13|0);
   if ($14) {
    $$sum = (($psize) + 4)|0;
    $99 = (($p) + ($$sum)|0);
    $100 = HEAP32[$99>>2]|0;
    $101 = $100 & 3;
    $102 = ($101|0)==(3);
    if (!($102)) {
     $$0 = $9;$$02 = $10;
     break;
    }
    HEAP32[(2712)>>2] = $10;
    $103 = $100 & -2;
    HEAP32[$99>>2] = $103;
    $104 = $10 | 1;
    $$sum14 = (4 - ($5))|0;
    $105 = (($p) + ($$sum14)|0);
    HEAP32[$105>>2] = $104;
    HEAP32[$0>>2] = $10;
    return;
   }
   $15 = $5 >>> 3;
   $16 = ($5>>>0)<(256);
   if ($16) {
    $$sum24 = (8 - ($5))|0;
    $17 = (($p) + ($$sum24)|0);
    $18 = HEAP32[$17>>2]|0;
    $$sum25 = (12 - ($5))|0;
    $19 = (($p) + ($$sum25)|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = $15 << 1;
    $22 = (2744 + ($21<<2)|0);
    $23 = ($18|0)==($22|0);
    if (!($23)) {
     $24 = ($18>>>0)<($11>>>0);
     if ($24) {
      _abort();
      // unreachable;
     }
     $25 = ((($18)) + 12|0);
     $26 = HEAP32[$25>>2]|0;
     $27 = ($26|0)==($9|0);
     if (!($27)) {
      _abort();
      // unreachable;
     }
    }
    $28 = ($20|0)==($18|0);
    if ($28) {
     $29 = 1 << $15;
     $30 = $29 ^ -1;
     $31 = HEAP32[2704>>2]|0;
     $32 = $31 & $30;
     HEAP32[2704>>2] = $32;
     $$0 = $9;$$02 = $10;
     break;
    }
    $33 = ($20|0)==($22|0);
    if ($33) {
     $$pre51 = ((($20)) + 8|0);
     $$pre$phi52Z2D = $$pre51;
    } else {
     $34 = ($20>>>0)<($11>>>0);
     if ($34) {
      _abort();
      // unreachable;
     }
     $35 = ((($20)) + 8|0);
     $36 = HEAP32[$35>>2]|0;
     $37 = ($36|0)==($9|0);
     if ($37) {
      $$pre$phi52Z2D = $35;
     } else {
      _abort();
      // unreachable;
     }
    }
    $38 = ((($18)) + 12|0);
    HEAP32[$38>>2] = $20;
    HEAP32[$$pre$phi52Z2D>>2] = $18;
    $$0 = $9;$$02 = $10;
    break;
   }
   $$sum16 = (24 - ($5))|0;
   $39 = (($p) + ($$sum16)|0);
   $40 = HEAP32[$39>>2]|0;
   $$sum17 = (12 - ($5))|0;
   $41 = (($p) + ($$sum17)|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = ($42|0)==($9|0);
   do {
    if ($43) {
     $$sum18 = (16 - ($5))|0;
     $$sum19 = (($$sum18) + 4)|0;
     $53 = (($p) + ($$sum19)|0);
     $54 = HEAP32[$53>>2]|0;
     $55 = ($54|0)==(0|0);
     if ($55) {
      $56 = (($p) + ($$sum18)|0);
      $57 = HEAP32[$56>>2]|0;
      $58 = ($57|0)==(0|0);
      if ($58) {
       $R$1 = 0;
       break;
      } else {
       $R$0 = $57;$RP$0 = $56;
      }
     } else {
      $R$0 = $54;$RP$0 = $53;
     }
     while(1) {
      $59 = ((($R$0)) + 20|0);
      $60 = HEAP32[$59>>2]|0;
      $61 = ($60|0)==(0|0);
      if (!($61)) {
       $R$0 = $60;$RP$0 = $59;
       continue;
      }
      $62 = ((($R$0)) + 16|0);
      $63 = HEAP32[$62>>2]|0;
      $64 = ($63|0)==(0|0);
      if ($64) {
       $R$0$lcssa = $R$0;$RP$0$lcssa = $RP$0;
       break;
      } else {
       $R$0 = $63;$RP$0 = $62;
      }
     }
     $65 = ($RP$0$lcssa>>>0)<($11>>>0);
     if ($65) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$RP$0$lcssa>>2] = 0;
      $R$1 = $R$0$lcssa;
      break;
     }
    } else {
     $$sum23 = (8 - ($5))|0;
     $44 = (($p) + ($$sum23)|0);
     $45 = HEAP32[$44>>2]|0;
     $46 = ($45>>>0)<($11>>>0);
     if ($46) {
      _abort();
      // unreachable;
     }
     $47 = ((($45)) + 12|0);
     $48 = HEAP32[$47>>2]|0;
     $49 = ($48|0)==($9|0);
     if (!($49)) {
      _abort();
      // unreachable;
     }
     $50 = ((($42)) + 8|0);
     $51 = HEAP32[$50>>2]|0;
     $52 = ($51|0)==($9|0);
     if ($52) {
      HEAP32[$47>>2] = $42;
      HEAP32[$50>>2] = $45;
      $R$1 = $42;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $66 = ($40|0)==(0|0);
   if ($66) {
    $$0 = $9;$$02 = $10;
   } else {
    $$sum20 = (28 - ($5))|0;
    $67 = (($p) + ($$sum20)|0);
    $68 = HEAP32[$67>>2]|0;
    $69 = (3008 + ($68<<2)|0);
    $70 = HEAP32[$69>>2]|0;
    $71 = ($9|0)==($70|0);
    if ($71) {
     HEAP32[$69>>2] = $R$1;
     $cond = ($R$1|0)==(0|0);
     if ($cond) {
      $72 = 1 << $68;
      $73 = $72 ^ -1;
      $74 = HEAP32[(2708)>>2]|0;
      $75 = $74 & $73;
      HEAP32[(2708)>>2] = $75;
      $$0 = $9;$$02 = $10;
      break;
     }
    } else {
     $76 = HEAP32[(2720)>>2]|0;
     $77 = ($40>>>0)<($76>>>0);
     if ($77) {
      _abort();
      // unreachable;
     }
     $78 = ((($40)) + 16|0);
     $79 = HEAP32[$78>>2]|0;
     $80 = ($79|0)==($9|0);
     if ($80) {
      HEAP32[$78>>2] = $R$1;
     } else {
      $81 = ((($40)) + 20|0);
      HEAP32[$81>>2] = $R$1;
     }
     $82 = ($R$1|0)==(0|0);
     if ($82) {
      $$0 = $9;$$02 = $10;
      break;
     }
    }
    $83 = HEAP32[(2720)>>2]|0;
    $84 = ($R$1>>>0)<($83>>>0);
    if ($84) {
     _abort();
     // unreachable;
    }
    $85 = ((($R$1)) + 24|0);
    HEAP32[$85>>2] = $40;
    $$sum21 = (16 - ($5))|0;
    $86 = (($p) + ($$sum21)|0);
    $87 = HEAP32[$86>>2]|0;
    $88 = ($87|0)==(0|0);
    do {
     if (!($88)) {
      $89 = ($87>>>0)<($83>>>0);
      if ($89) {
       _abort();
       // unreachable;
      } else {
       $90 = ((($R$1)) + 16|0);
       HEAP32[$90>>2] = $87;
       $91 = ((($87)) + 24|0);
       HEAP32[$91>>2] = $R$1;
       break;
      }
     }
    } while(0);
    $$sum22 = (($$sum21) + 4)|0;
    $92 = (($p) + ($$sum22)|0);
    $93 = HEAP32[$92>>2]|0;
    $94 = ($93|0)==(0|0);
    if ($94) {
     $$0 = $9;$$02 = $10;
    } else {
     $95 = HEAP32[(2720)>>2]|0;
     $96 = ($93>>>0)<($95>>>0);
     if ($96) {
      _abort();
      // unreachable;
     } else {
      $97 = ((($R$1)) + 20|0);
      HEAP32[$97>>2] = $93;
      $98 = ((($93)) + 24|0);
      HEAP32[$98>>2] = $R$1;
      $$0 = $9;$$02 = $10;
      break;
     }
    }
   }
  } else {
   $$0 = $p;$$02 = $psize;
  }
 } while(0);
 $106 = HEAP32[(2720)>>2]|0;
 $107 = ($0>>>0)<($106>>>0);
 if ($107) {
  _abort();
  // unreachable;
 }
 $$sum1 = (($psize) + 4)|0;
 $108 = (($p) + ($$sum1)|0);
 $109 = HEAP32[$108>>2]|0;
 $110 = $109 & 2;
 $111 = ($110|0)==(0);
 if ($111) {
  $112 = HEAP32[(2728)>>2]|0;
  $113 = ($0|0)==($112|0);
  if ($113) {
   $114 = HEAP32[(2716)>>2]|0;
   $115 = (($114) + ($$02))|0;
   HEAP32[(2716)>>2] = $115;
   HEAP32[(2728)>>2] = $$0;
   $116 = $115 | 1;
   $117 = ((($$0)) + 4|0);
   HEAP32[$117>>2] = $116;
   $118 = HEAP32[(2724)>>2]|0;
   $119 = ($$0|0)==($118|0);
   if (!($119)) {
    return;
   }
   HEAP32[(2724)>>2] = 0;
   HEAP32[(2712)>>2] = 0;
   return;
  }
  $120 = HEAP32[(2724)>>2]|0;
  $121 = ($0|0)==($120|0);
  if ($121) {
   $122 = HEAP32[(2712)>>2]|0;
   $123 = (($122) + ($$02))|0;
   HEAP32[(2712)>>2] = $123;
   HEAP32[(2724)>>2] = $$0;
   $124 = $123 | 1;
   $125 = ((($$0)) + 4|0);
   HEAP32[$125>>2] = $124;
   $126 = (($$0) + ($123)|0);
   HEAP32[$126>>2] = $123;
   return;
  }
  $127 = $109 & -8;
  $128 = (($127) + ($$02))|0;
  $129 = $109 >>> 3;
  $130 = ($109>>>0)<(256);
  do {
   if ($130) {
    $$sum12 = (($psize) + 8)|0;
    $131 = (($p) + ($$sum12)|0);
    $132 = HEAP32[$131>>2]|0;
    $$sum13 = (($psize) + 12)|0;
    $133 = (($p) + ($$sum13)|0);
    $134 = HEAP32[$133>>2]|0;
    $135 = $129 << 1;
    $136 = (2744 + ($135<<2)|0);
    $137 = ($132|0)==($136|0);
    if (!($137)) {
     $138 = ($132>>>0)<($106>>>0);
     if ($138) {
      _abort();
      // unreachable;
     }
     $139 = ((($132)) + 12|0);
     $140 = HEAP32[$139>>2]|0;
     $141 = ($140|0)==($0|0);
     if (!($141)) {
      _abort();
      // unreachable;
     }
    }
    $142 = ($134|0)==($132|0);
    if ($142) {
     $143 = 1 << $129;
     $144 = $143 ^ -1;
     $145 = HEAP32[2704>>2]|0;
     $146 = $145 & $144;
     HEAP32[2704>>2] = $146;
     break;
    }
    $147 = ($134|0)==($136|0);
    if ($147) {
     $$pre49 = ((($134)) + 8|0);
     $$pre$phi50Z2D = $$pre49;
    } else {
     $148 = ($134>>>0)<($106>>>0);
     if ($148) {
      _abort();
      // unreachable;
     }
     $149 = ((($134)) + 8|0);
     $150 = HEAP32[$149>>2]|0;
     $151 = ($150|0)==($0|0);
     if ($151) {
      $$pre$phi50Z2D = $149;
     } else {
      _abort();
      // unreachable;
     }
    }
    $152 = ((($132)) + 12|0);
    HEAP32[$152>>2] = $134;
    HEAP32[$$pre$phi50Z2D>>2] = $132;
   } else {
    $$sum2 = (($psize) + 24)|0;
    $153 = (($p) + ($$sum2)|0);
    $154 = HEAP32[$153>>2]|0;
    $$sum3 = (($psize) + 12)|0;
    $155 = (($p) + ($$sum3)|0);
    $156 = HEAP32[$155>>2]|0;
    $157 = ($156|0)==($0|0);
    do {
     if ($157) {
      $$sum5 = (($psize) + 20)|0;
      $167 = (($p) + ($$sum5)|0);
      $168 = HEAP32[$167>>2]|0;
      $169 = ($168|0)==(0|0);
      if ($169) {
       $$sum4 = (($psize) + 16)|0;
       $170 = (($p) + ($$sum4)|0);
       $171 = HEAP32[$170>>2]|0;
       $172 = ($171|0)==(0|0);
       if ($172) {
        $R7$1 = 0;
        break;
       } else {
        $R7$0 = $171;$RP9$0 = $170;
       }
      } else {
       $R7$0 = $168;$RP9$0 = $167;
      }
      while(1) {
       $173 = ((($R7$0)) + 20|0);
       $174 = HEAP32[$173>>2]|0;
       $175 = ($174|0)==(0|0);
       if (!($175)) {
        $R7$0 = $174;$RP9$0 = $173;
        continue;
       }
       $176 = ((($R7$0)) + 16|0);
       $177 = HEAP32[$176>>2]|0;
       $178 = ($177|0)==(0|0);
       if ($178) {
        $R7$0$lcssa = $R7$0;$RP9$0$lcssa = $RP9$0;
        break;
       } else {
        $R7$0 = $177;$RP9$0 = $176;
       }
      }
      $179 = ($RP9$0$lcssa>>>0)<($106>>>0);
      if ($179) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$RP9$0$lcssa>>2] = 0;
       $R7$1 = $R7$0$lcssa;
       break;
      }
     } else {
      $$sum11 = (($psize) + 8)|0;
      $158 = (($p) + ($$sum11)|0);
      $159 = HEAP32[$158>>2]|0;
      $160 = ($159>>>0)<($106>>>0);
      if ($160) {
       _abort();
       // unreachable;
      }
      $161 = ((($159)) + 12|0);
      $162 = HEAP32[$161>>2]|0;
      $163 = ($162|0)==($0|0);
      if (!($163)) {
       _abort();
       // unreachable;
      }
      $164 = ((($156)) + 8|0);
      $165 = HEAP32[$164>>2]|0;
      $166 = ($165|0)==($0|0);
      if ($166) {
       HEAP32[$161>>2] = $156;
       HEAP32[$164>>2] = $159;
       $R7$1 = $156;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $180 = ($154|0)==(0|0);
    if (!($180)) {
     $$sum8 = (($psize) + 28)|0;
     $181 = (($p) + ($$sum8)|0);
     $182 = HEAP32[$181>>2]|0;
     $183 = (3008 + ($182<<2)|0);
     $184 = HEAP32[$183>>2]|0;
     $185 = ($0|0)==($184|0);
     if ($185) {
      HEAP32[$183>>2] = $R7$1;
      $cond39 = ($R7$1|0)==(0|0);
      if ($cond39) {
       $186 = 1 << $182;
       $187 = $186 ^ -1;
       $188 = HEAP32[(2708)>>2]|0;
       $189 = $188 & $187;
       HEAP32[(2708)>>2] = $189;
       break;
      }
     } else {
      $190 = HEAP32[(2720)>>2]|0;
      $191 = ($154>>>0)<($190>>>0);
      if ($191) {
       _abort();
       // unreachable;
      }
      $192 = ((($154)) + 16|0);
      $193 = HEAP32[$192>>2]|0;
      $194 = ($193|0)==($0|0);
      if ($194) {
       HEAP32[$192>>2] = $R7$1;
      } else {
       $195 = ((($154)) + 20|0);
       HEAP32[$195>>2] = $R7$1;
      }
      $196 = ($R7$1|0)==(0|0);
      if ($196) {
       break;
      }
     }
     $197 = HEAP32[(2720)>>2]|0;
     $198 = ($R7$1>>>0)<($197>>>0);
     if ($198) {
      _abort();
      // unreachable;
     }
     $199 = ((($R7$1)) + 24|0);
     HEAP32[$199>>2] = $154;
     $$sum9 = (($psize) + 16)|0;
     $200 = (($p) + ($$sum9)|0);
     $201 = HEAP32[$200>>2]|0;
     $202 = ($201|0)==(0|0);
     do {
      if (!($202)) {
       $203 = ($201>>>0)<($197>>>0);
       if ($203) {
        _abort();
        // unreachable;
       } else {
        $204 = ((($R7$1)) + 16|0);
        HEAP32[$204>>2] = $201;
        $205 = ((($201)) + 24|0);
        HEAP32[$205>>2] = $R7$1;
        break;
       }
      }
     } while(0);
     $$sum10 = (($psize) + 20)|0;
     $206 = (($p) + ($$sum10)|0);
     $207 = HEAP32[$206>>2]|0;
     $208 = ($207|0)==(0|0);
     if (!($208)) {
      $209 = HEAP32[(2720)>>2]|0;
      $210 = ($207>>>0)<($209>>>0);
      if ($210) {
       _abort();
       // unreachable;
      } else {
       $211 = ((($R7$1)) + 20|0);
       HEAP32[$211>>2] = $207;
       $212 = ((($207)) + 24|0);
       HEAP32[$212>>2] = $R7$1;
       break;
      }
     }
    }
   }
  } while(0);
  $213 = $128 | 1;
  $214 = ((($$0)) + 4|0);
  HEAP32[$214>>2] = $213;
  $215 = (($$0) + ($128)|0);
  HEAP32[$215>>2] = $128;
  $216 = HEAP32[(2724)>>2]|0;
  $217 = ($$0|0)==($216|0);
  if ($217) {
   HEAP32[(2712)>>2] = $128;
   return;
  } else {
   $$1 = $128;
  }
 } else {
  $218 = $109 & -2;
  HEAP32[$108>>2] = $218;
  $219 = $$02 | 1;
  $220 = ((($$0)) + 4|0);
  HEAP32[$220>>2] = $219;
  $221 = (($$0) + ($$02)|0);
  HEAP32[$221>>2] = $$02;
  $$1 = $$02;
 }
 $222 = $$1 >>> 3;
 $223 = ($$1>>>0)<(256);
 if ($223) {
  $224 = $222 << 1;
  $225 = (2744 + ($224<<2)|0);
  $226 = HEAP32[2704>>2]|0;
  $227 = 1 << $222;
  $228 = $226 & $227;
  $229 = ($228|0)==(0);
  if ($229) {
   $230 = $226 | $227;
   HEAP32[2704>>2] = $230;
   $$pre = (($224) + 2)|0;
   $$pre48 = (2744 + ($$pre<<2)|0);
   $$pre$phiZ2D = $$pre48;$F16$0 = $225;
  } else {
   $$sum7 = (($224) + 2)|0;
   $231 = (2744 + ($$sum7<<2)|0);
   $232 = HEAP32[$231>>2]|0;
   $233 = HEAP32[(2720)>>2]|0;
   $234 = ($232>>>0)<($233>>>0);
   if ($234) {
    _abort();
    // unreachable;
   } else {
    $$pre$phiZ2D = $231;$F16$0 = $232;
   }
  }
  HEAP32[$$pre$phiZ2D>>2] = $$0;
  $235 = ((($F16$0)) + 12|0);
  HEAP32[$235>>2] = $$0;
  $236 = ((($$0)) + 8|0);
  HEAP32[$236>>2] = $F16$0;
  $237 = ((($$0)) + 12|0);
  HEAP32[$237>>2] = $225;
  return;
 }
 $238 = $$1 >>> 8;
 $239 = ($238|0)==(0);
 if ($239) {
  $I19$0 = 0;
 } else {
  $240 = ($$1>>>0)>(16777215);
  if ($240) {
   $I19$0 = 31;
  } else {
   $241 = (($238) + 1048320)|0;
   $242 = $241 >>> 16;
   $243 = $242 & 8;
   $244 = $238 << $243;
   $245 = (($244) + 520192)|0;
   $246 = $245 >>> 16;
   $247 = $246 & 4;
   $248 = $247 | $243;
   $249 = $244 << $247;
   $250 = (($249) + 245760)|0;
   $251 = $250 >>> 16;
   $252 = $251 & 2;
   $253 = $248 | $252;
   $254 = (14 - ($253))|0;
   $255 = $249 << $252;
   $256 = $255 >>> 15;
   $257 = (($254) + ($256))|0;
   $258 = $257 << 1;
   $259 = (($257) + 7)|0;
   $260 = $$1 >>> $259;
   $261 = $260 & 1;
   $262 = $261 | $258;
   $I19$0 = $262;
  }
 }
 $263 = (3008 + ($I19$0<<2)|0);
 $264 = ((($$0)) + 28|0);
 HEAP32[$264>>2] = $I19$0;
 $265 = ((($$0)) + 16|0);
 $266 = ((($$0)) + 20|0);
 HEAP32[$266>>2] = 0;
 HEAP32[$265>>2] = 0;
 $267 = HEAP32[(2708)>>2]|0;
 $268 = 1 << $I19$0;
 $269 = $267 & $268;
 $270 = ($269|0)==(0);
 if ($270) {
  $271 = $267 | $268;
  HEAP32[(2708)>>2] = $271;
  HEAP32[$263>>2] = $$0;
  $272 = ((($$0)) + 24|0);
  HEAP32[$272>>2] = $263;
  $273 = ((($$0)) + 12|0);
  HEAP32[$273>>2] = $$0;
  $274 = ((($$0)) + 8|0);
  HEAP32[$274>>2] = $$0;
  return;
 }
 $275 = HEAP32[$263>>2]|0;
 $276 = ((($275)) + 4|0);
 $277 = HEAP32[$276>>2]|0;
 $278 = $277 & -8;
 $279 = ($278|0)==($$1|0);
 L191: do {
  if ($279) {
   $T$0$lcssa = $275;
  } else {
   $280 = ($I19$0|0)==(31);
   $281 = $I19$0 >>> 1;
   $282 = (25 - ($281))|0;
   $283 = $280 ? 0 : $282;
   $284 = $$1 << $283;
   $K20$043 = $284;$T$042 = $275;
   while(1) {
    $291 = $K20$043 >>> 31;
    $292 = (((($T$042)) + 16|0) + ($291<<2)|0);
    $287 = HEAP32[$292>>2]|0;
    $293 = ($287|0)==(0|0);
    if ($293) {
     $$lcssa = $292;$T$042$lcssa = $T$042;
     break;
    }
    $285 = $K20$043 << 1;
    $286 = ((($287)) + 4|0);
    $288 = HEAP32[$286>>2]|0;
    $289 = $288 & -8;
    $290 = ($289|0)==($$1|0);
    if ($290) {
     $T$0$lcssa = $287;
     break L191;
    } else {
     $K20$043 = $285;$T$042 = $287;
    }
   }
   $294 = HEAP32[(2720)>>2]|0;
   $295 = ($$lcssa>>>0)<($294>>>0);
   if ($295) {
    _abort();
    // unreachable;
   }
   HEAP32[$$lcssa>>2] = $$0;
   $296 = ((($$0)) + 24|0);
   HEAP32[$296>>2] = $T$042$lcssa;
   $297 = ((($$0)) + 12|0);
   HEAP32[$297>>2] = $$0;
   $298 = ((($$0)) + 8|0);
   HEAP32[$298>>2] = $$0;
   return;
  }
 } while(0);
 $299 = ((($T$0$lcssa)) + 8|0);
 $300 = HEAP32[$299>>2]|0;
 $301 = HEAP32[(2720)>>2]|0;
 $302 = ($300>>>0)>=($301>>>0);
 $not$ = ($T$0$lcssa>>>0)>=($301>>>0);
 $303 = $302 & $not$;
 if (!($303)) {
  _abort();
  // unreachable;
 }
 $304 = ((($300)) + 12|0);
 HEAP32[$304>>2] = $$0;
 HEAP32[$299>>2] = $$0;
 $305 = ((($$0)) + 8|0);
 HEAP32[$305>>2] = $300;
 $306 = ((($$0)) + 12|0);
 HEAP32[$306>>2] = $T$0$lcssa;
 $307 = ((($$0)) + 24|0);
 HEAP32[$307>>2] = 0;
 return;
}
function runPostSets() {
}
function _saveSetjmp(env, label, table, size) {
    // Not particularly fast: slow table lookup of setjmpId to label. But setjmp
    // prevents relooping anyhow, so slowness is to be expected. And typical case
    // is 1 setjmp per invocation, or less.
    env = env|0;
    label = label|0;
    table = table|0;
    size = size|0;
    var i = 0;
    setjmpId = (setjmpId+1)|0;
    HEAP32[((env)>>2)]=setjmpId;
    while ((i|0) < (size|0)) {
      if (((HEAP32[(((table)+((i<<3)))>>2)])|0) == 0) {
        HEAP32[(((table)+((i<<3)))>>2)]=setjmpId;
        HEAP32[(((table)+((i<<3)+4))>>2)]=label;
        // prepare next slot
        HEAP32[(((table)+((i<<3)+8))>>2)]=0;
        tempRet0 = size;
        return table | 0;
      }
      i = i+1|0;
    }
    // grow the table
    size = (size*2)|0;
    table = _realloc(table|0, 8*(size+1|0)|0) | 0;
    table = _saveSetjmp(env|0, label|0, table|0, size|0) | 0;
    tempRet0 = size;
    return table | 0;
}
function _memcpy(dest, src, num) {
    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    if ((num|0) >= 4096) return _emscripten_memcpy_big(dest|0, src|0, num|0)|0;
    ret = dest|0;
    if ((dest&3) == (src&3)) {
      while (dest & 3) {
        if ((num|0) == 0) return ret|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
        dest = (dest+1)|0;
        src = (src+1)|0;
        num = (num-1)|0;
      }
      while ((num|0) >= 4) {
        HEAP32[((dest)>>2)]=((HEAP32[((src)>>2)])|0);
        dest = (dest+4)|0;
        src = (src+4)|0;
        num = (num-4)|0;
      }
    }
    while ((num|0) > 0) {
      HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      dest = (dest+1)|0;
      src = (src+1)|0;
      num = (num-1)|0;
    }
    return ret|0;
}
function _memset(ptr, value, num) {
    ptr = ptr|0; value = value|0; num = num|0;
    var stop = 0, value4 = 0, stop4 = 0, unaligned = 0;
    stop = (ptr + num)|0;
    if ((num|0) >= 20) {
      // This is unaligned, but quite large, so work hard to get to aligned settings
      value = value & 0xff;
      unaligned = ptr & 3;
      value4 = value | (value << 8) | (value << 16) | (value << 24);
      stop4 = stop & ~3;
      if (unaligned) {
        unaligned = (ptr + 4 - unaligned)|0;
        while ((ptr|0) < (unaligned|0)) { // no need to check for stop, since we have large num
          HEAP8[((ptr)>>0)]=value;
          ptr = (ptr+1)|0;
        }
      }
      while ((ptr|0) < (stop4|0)) {
        HEAP32[((ptr)>>2)]=value4;
        ptr = (ptr+4)|0;
      }
    }
    while ((ptr|0) < (stop|0)) {
      HEAP8[((ptr)>>0)]=value;
      ptr = (ptr+1)|0;
    }
    return (ptr-num)|0;
}
function _i64Subtract(a, b, c, d) {
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a - c)>>>0;
    h = (b - d)>>>0;
    h = (b - d - (((c>>>0) > (a>>>0))|0))>>>0; // Borrow one from high word to low word on underflow.
    return ((tempRet0 = h,l|0)|0);
}
function _i64Add(a, b, c, d) {
    /*
      x = a + b*2^32
      y = c + d*2^32
      result = l + h*2^32
    */
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a + c)>>>0;
    h = (b + d + (((l>>>0) < (a>>>0))|0))>>>0; // Add carry from low word to high word on overflow.
    return ((tempRet0 = h,l|0)|0);
}
function _testSetjmp(id, table, size) {
    id = id|0;
    table = table|0;
    size = size|0;
    var i = 0, curr = 0;
    while ((i|0) < (size|0)) {
      curr = ((HEAP32[(((table)+((i<<3)))>>2)])|0);
      if ((curr|0) == 0) break;
      if ((curr|0) == (id|0)) {
        return ((HEAP32[(((table)+((i<<3)+4))>>2)])|0);
      }
      i = i+1|0;
    }
    return 0;
}
function _bitshift64Lshr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >>> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = 0;
    return (high >>> (bits - 32))|0;
}
function _bitshift64Shl(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = (high << bits) | ((low&(ander << (32 - bits))) >>> (32 - bits));
      return low << bits;
    }
    tempRet0 = low << (bits - 32);
    return 0;
}
function _bitshift64Ashr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = (high|0) < 0 ? -1 : 0;
    return (high >> (bits - 32))|0;
  }
function _llvm_cttz_i32(x) {
    x = x|0;
    var ret = 0;
    ret = ((HEAP8[(((cttz_i8)+(x & 0xff))>>0)])|0);
    if ((ret|0) < 8) return ret|0;
    ret = ((HEAP8[(((cttz_i8)+((x >> 8)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 8)|0;
    ret = ((HEAP8[(((cttz_i8)+((x >> 16)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 16)|0;
    return (((HEAP8[(((cttz_i8)+(x >>> 24))>>0)])|0) + 24)|0;
  }

// ======== compiled code from system/lib/compiler-rt , see readme therein
function ___muldsi3($a, $b) {
  $a = $a | 0;
  $b = $b | 0;
  var $1 = 0, $2 = 0, $3 = 0, $6 = 0, $8 = 0, $11 = 0, $12 = 0;
  $1 = $a & 65535;
  $2 = $b & 65535;
  $3 = Math_imul($2, $1) | 0;
  $6 = $a >>> 16;
  $8 = ($3 >>> 16) + (Math_imul($2, $6) | 0) | 0;
  $11 = $b >>> 16;
  $12 = Math_imul($11, $1) | 0;
  return (tempRet0 = (($8 >>> 16) + (Math_imul($11, $6) | 0) | 0) + ((($8 & 65535) + $12 | 0) >>> 16) | 0, 0 | ($8 + $12 << 16 | $3 & 65535)) | 0;
}
function ___divdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $6$0 = 0, $7$0 = 0, $7$1 = 0, $8$0 = 0, $10$0 = 0;
  $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $4$0 = _i64Subtract($1$0 ^ $a$0, $1$1 ^ $a$1, $1$0, $1$1) | 0;
  $4$1 = tempRet0;
  $6$0 = _i64Subtract($2$0 ^ $b$0, $2$1 ^ $b$1, $2$0, $2$1) | 0;
  $7$0 = $2$0 ^ $1$0;
  $7$1 = $2$1 ^ $1$1;
  $8$0 = ___udivmoddi4($4$0, $4$1, $6$0, tempRet0, 0) | 0;
  $10$0 = _i64Subtract($8$0 ^ $7$0, tempRet0 ^ $7$1, $7$0, $7$1) | 0;
  return $10$0 | 0;
}
function ___remdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $rem = 0, $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $6$0 = 0, $10$0 = 0, $10$1 = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  $rem = __stackBase__ | 0;
  $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $4$0 = _i64Subtract($1$0 ^ $a$0, $1$1 ^ $a$1, $1$0, $1$1) | 0;
  $4$1 = tempRet0;
  $6$0 = _i64Subtract($2$0 ^ $b$0, $2$1 ^ $b$1, $2$0, $2$1) | 0;
  ___udivmoddi4($4$0, $4$1, $6$0, tempRet0, $rem) | 0;
  $10$0 = _i64Subtract(HEAP32[$rem >> 2] ^ $1$0, HEAP32[$rem + 4 >> 2] ^ $1$1, $1$0, $1$1) | 0;
  $10$1 = tempRet0;
  STACKTOP = __stackBase__;
  return (tempRet0 = $10$1, $10$0) | 0;
}
function ___muldi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $x_sroa_0_0_extract_trunc = 0, $y_sroa_0_0_extract_trunc = 0, $1$0 = 0, $1$1 = 0, $2 = 0;
  $x_sroa_0_0_extract_trunc = $a$0;
  $y_sroa_0_0_extract_trunc = $b$0;
  $1$0 = ___muldsi3($x_sroa_0_0_extract_trunc, $y_sroa_0_0_extract_trunc) | 0;
  $1$1 = tempRet0;
  $2 = Math_imul($a$1, $y_sroa_0_0_extract_trunc) | 0;
  return (tempRet0 = ((Math_imul($b$1, $x_sroa_0_0_extract_trunc) | 0) + $2 | 0) + $1$1 | $1$1 & 0, 0 | $1$0 & -1) | 0;
}
function ___udivdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $1$0 = 0;
  $1$0 = ___udivmoddi4($a$0, $a$1, $b$0, $b$1, 0) | 0;
  return $1$0 | 0;
}
function ___uremdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $rem = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  $rem = __stackBase__ | 0;
  ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) | 0;
  STACKTOP = __stackBase__;
  return (tempRet0 = HEAP32[$rem + 4 >> 2] | 0, HEAP32[$rem >> 2] | 0) | 0;
}
function ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  $rem = $rem | 0;
  var $n_sroa_0_0_extract_trunc = 0, $n_sroa_1_4_extract_shift$0 = 0, $n_sroa_1_4_extract_trunc = 0, $d_sroa_0_0_extract_trunc = 0, $d_sroa_1_4_extract_shift$0 = 0, $d_sroa_1_4_extract_trunc = 0, $4 = 0, $17 = 0, $37 = 0, $49 = 0, $51 = 0, $57 = 0, $58 = 0, $66 = 0, $78 = 0, $86 = 0, $88 = 0, $89 = 0, $91 = 0, $92 = 0, $95 = 0, $105 = 0, $117 = 0, $119 = 0, $125 = 0, $126 = 0, $130 = 0, $q_sroa_1_1_ph = 0, $q_sroa_0_1_ph = 0, $r_sroa_1_1_ph = 0, $r_sroa_0_1_ph = 0, $sr_1_ph = 0, $d_sroa_0_0_insert_insert99$0 = 0, $d_sroa_0_0_insert_insert99$1 = 0, $137$0 = 0, $137$1 = 0, $carry_0203 = 0, $sr_1202 = 0, $r_sroa_0_1201 = 0, $r_sroa_1_1200 = 0, $q_sroa_0_1199 = 0, $q_sroa_1_1198 = 0, $147 = 0, $149 = 0, $r_sroa_0_0_insert_insert42$0 = 0, $r_sroa_0_0_insert_insert42$1 = 0, $150$1 = 0, $151$0 = 0, $152 = 0, $154$0 = 0, $r_sroa_0_0_extract_trunc = 0, $r_sroa_1_4_extract_trunc = 0, $155 = 0, $carry_0_lcssa$0 = 0, $carry_0_lcssa$1 = 0, $r_sroa_0_1_lcssa = 0, $r_sroa_1_1_lcssa = 0, $q_sroa_0_1_lcssa = 0, $q_sroa_1_1_lcssa = 0, $q_sroa_0_0_insert_ext75$0 = 0, $q_sroa_0_0_insert_ext75$1 = 0, $q_sroa_0_0_insert_insert77$1 = 0, $_0$0 = 0, $_0$1 = 0;
  $n_sroa_0_0_extract_trunc = $a$0;
  $n_sroa_1_4_extract_shift$0 = $a$1;
  $n_sroa_1_4_extract_trunc = $n_sroa_1_4_extract_shift$0;
  $d_sroa_0_0_extract_trunc = $b$0;
  $d_sroa_1_4_extract_shift$0 = $b$1;
  $d_sroa_1_4_extract_trunc = $d_sroa_1_4_extract_shift$0;
  if (($n_sroa_1_4_extract_trunc | 0) == 0) {
    $4 = ($rem | 0) != 0;
    if (($d_sroa_1_4_extract_trunc | 0) == 0) {
      if ($4) {
        HEAP32[$rem >> 2] = ($n_sroa_0_0_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
        HEAP32[$rem + 4 >> 2] = 0;
      }
      $_0$1 = 0;
      $_0$0 = ($n_sroa_0_0_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    } else {
      if (!$4) {
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      HEAP32[$rem >> 2] = $a$0 & -1;
      HEAP32[$rem + 4 >> 2] = $a$1 & 0;
      $_0$1 = 0;
      $_0$0 = 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    }
  }
  $17 = ($d_sroa_1_4_extract_trunc | 0) == 0;
  do {
    if (($d_sroa_0_0_extract_trunc | 0) == 0) {
      if ($17) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
          HEAP32[$rem + 4 >> 2] = 0;
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      if (($n_sroa_0_0_extract_trunc | 0) == 0) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = 0;
          HEAP32[$rem + 4 >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_1_4_extract_trunc >>> 0);
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_1_4_extract_trunc >>> 0) >>> 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $37 = $d_sroa_1_4_extract_trunc - 1 | 0;
      if (($37 & $d_sroa_1_4_extract_trunc | 0) == 0) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = 0 | $a$0 & -1;
          HEAP32[$rem + 4 >> 2] = $37 & $n_sroa_1_4_extract_trunc | $a$1 & 0;
        }
        $_0$1 = 0;
        $_0$0 = $n_sroa_1_4_extract_trunc >>> ((_llvm_cttz_i32($d_sroa_1_4_extract_trunc | 0) | 0) >>> 0);
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $49 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
      $51 = $49 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
      if ($51 >>> 0 <= 30) {
        $57 = $51 + 1 | 0;
        $58 = 31 - $51 | 0;
        $sr_1_ph = $57;
        $r_sroa_0_1_ph = $n_sroa_1_4_extract_trunc << $58 | $n_sroa_0_0_extract_trunc >>> ($57 >>> 0);
        $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($57 >>> 0);
        $q_sroa_0_1_ph = 0;
        $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $58;
        break;
      }
      if (($rem | 0) == 0) {
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      HEAP32[$rem >> 2] = 0 | $a$0 & -1;
      HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
      $_0$1 = 0;
      $_0$0 = 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    } else {
      if (!$17) {
        $117 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
        $119 = $117 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        if ($119 >>> 0 <= 31) {
          $125 = $119 + 1 | 0;
          $126 = 31 - $119 | 0;
          $130 = $119 - 31 >> 31;
          $sr_1_ph = $125;
          $r_sroa_0_1_ph = $n_sroa_0_0_extract_trunc >>> ($125 >>> 0) & $130 | $n_sroa_1_4_extract_trunc << $126;
          $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($125 >>> 0) & $130;
          $q_sroa_0_1_ph = 0;
          $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $126;
          break;
        }
        if (($rem | 0) == 0) {
          $_0$1 = 0;
          $_0$0 = 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        HEAP32[$rem >> 2] = 0 | $a$0 & -1;
        HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $66 = $d_sroa_0_0_extract_trunc - 1 | 0;
      if (($66 & $d_sroa_0_0_extract_trunc | 0) != 0) {
        $86 = (Math_clz32($d_sroa_0_0_extract_trunc | 0) | 0) + 33 | 0;
        $88 = $86 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        $89 = 64 - $88 | 0;
        $91 = 32 - $88 | 0;
        $92 = $91 >> 31;
        $95 = $88 - 32 | 0;
        $105 = $95 >> 31;
        $sr_1_ph = $88;
        $r_sroa_0_1_ph = $91 - 1 >> 31 & $n_sroa_1_4_extract_trunc >>> ($95 >>> 0) | ($n_sroa_1_4_extract_trunc << $91 | $n_sroa_0_0_extract_trunc >>> ($88 >>> 0)) & $105;
        $r_sroa_1_1_ph = $105 & $n_sroa_1_4_extract_trunc >>> ($88 >>> 0);
        $q_sroa_0_1_ph = $n_sroa_0_0_extract_trunc << $89 & $92;
        $q_sroa_1_1_ph = ($n_sroa_1_4_extract_trunc << $89 | $n_sroa_0_0_extract_trunc >>> ($95 >>> 0)) & $92 | $n_sroa_0_0_extract_trunc << $91 & $88 - 33 >> 31;
        break;
      }
      if (($rem | 0) != 0) {
        HEAP32[$rem >> 2] = $66 & $n_sroa_0_0_extract_trunc;
        HEAP32[$rem + 4 >> 2] = 0;
      }
      if (($d_sroa_0_0_extract_trunc | 0) == 1) {
        $_0$1 = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$0 = 0 | $a$0 & -1;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      } else {
        $78 = _llvm_cttz_i32($d_sroa_0_0_extract_trunc | 0) | 0;
        $_0$1 = 0 | $n_sroa_1_4_extract_trunc >>> ($78 >>> 0);
        $_0$0 = $n_sroa_1_4_extract_trunc << 32 - $78 | $n_sroa_0_0_extract_trunc >>> ($78 >>> 0) | 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
    }
  } while (0);
  if (($sr_1_ph | 0) == 0) {
    $q_sroa_1_1_lcssa = $q_sroa_1_1_ph;
    $q_sroa_0_1_lcssa = $q_sroa_0_1_ph;
    $r_sroa_1_1_lcssa = $r_sroa_1_1_ph;
    $r_sroa_0_1_lcssa = $r_sroa_0_1_ph;
    $carry_0_lcssa$1 = 0;
    $carry_0_lcssa$0 = 0;
  } else {
    $d_sroa_0_0_insert_insert99$0 = 0 | $b$0 & -1;
    $d_sroa_0_0_insert_insert99$1 = $d_sroa_1_4_extract_shift$0 | $b$1 & 0;
    $137$0 = _i64Add($d_sroa_0_0_insert_insert99$0 | 0, $d_sroa_0_0_insert_insert99$1 | 0, -1, -1) | 0;
    $137$1 = tempRet0;
    $q_sroa_1_1198 = $q_sroa_1_1_ph;
    $q_sroa_0_1199 = $q_sroa_0_1_ph;
    $r_sroa_1_1200 = $r_sroa_1_1_ph;
    $r_sroa_0_1201 = $r_sroa_0_1_ph;
    $sr_1202 = $sr_1_ph;
    $carry_0203 = 0;
    while (1) {
      $147 = $q_sroa_0_1199 >>> 31 | $q_sroa_1_1198 << 1;
      $149 = $carry_0203 | $q_sroa_0_1199 << 1;
      $r_sroa_0_0_insert_insert42$0 = 0 | ($r_sroa_0_1201 << 1 | $q_sroa_1_1198 >>> 31);
      $r_sroa_0_0_insert_insert42$1 = $r_sroa_0_1201 >>> 31 | $r_sroa_1_1200 << 1 | 0;
      _i64Subtract($137$0, $137$1, $r_sroa_0_0_insert_insert42$0, $r_sroa_0_0_insert_insert42$1) | 0;
      $150$1 = tempRet0;
      $151$0 = $150$1 >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1;
      $152 = $151$0 & 1;
      $154$0 = _i64Subtract($r_sroa_0_0_insert_insert42$0, $r_sroa_0_0_insert_insert42$1, $151$0 & $d_sroa_0_0_insert_insert99$0, ((($150$1 | 0) < 0 ? -1 : 0) >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1) & $d_sroa_0_0_insert_insert99$1) | 0;
      $r_sroa_0_0_extract_trunc = $154$0;
      $r_sroa_1_4_extract_trunc = tempRet0;
      $155 = $sr_1202 - 1 | 0;
      if (($155 | 0) == 0) {
        break;
      } else {
        $q_sroa_1_1198 = $147;
        $q_sroa_0_1199 = $149;
        $r_sroa_1_1200 = $r_sroa_1_4_extract_trunc;
        $r_sroa_0_1201 = $r_sroa_0_0_extract_trunc;
        $sr_1202 = $155;
        $carry_0203 = $152;
      }
    }
    $q_sroa_1_1_lcssa = $147;
    $q_sroa_0_1_lcssa = $149;
    $r_sroa_1_1_lcssa = $r_sroa_1_4_extract_trunc;
    $r_sroa_0_1_lcssa = $r_sroa_0_0_extract_trunc;
    $carry_0_lcssa$1 = 0;
    $carry_0_lcssa$0 = $152;
  }
  $q_sroa_0_0_insert_ext75$0 = $q_sroa_0_1_lcssa;
  $q_sroa_0_0_insert_ext75$1 = 0;
  $q_sroa_0_0_insert_insert77$1 = $q_sroa_1_1_lcssa | $q_sroa_0_0_insert_ext75$1;
  if (($rem | 0) != 0) {
    HEAP32[$rem >> 2] = 0 | $r_sroa_0_1_lcssa;
    HEAP32[$rem + 4 >> 2] = $r_sroa_1_1_lcssa | 0;
  }
  $_0$1 = (0 | $q_sroa_0_0_insert_ext75$0) >>> 31 | $q_sroa_0_0_insert_insert77$1 << 1 | ($q_sroa_0_0_insert_ext75$1 << 1 | $q_sroa_0_0_insert_ext75$0 >>> 31) & 0 | $carry_0_lcssa$1;
  $_0$0 = ($q_sroa_0_0_insert_ext75$0 << 1 | 0 >>> 31) & -2 | $carry_0_lcssa$0;
  return (tempRet0 = $_0$1, $_0$0) | 0;
}
// =======================================================================



  
function dynCall_viiiii(index,a1,a2,a3,a4,a5) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
  FUNCTION_TABLE_viiiii[index&511](a1|0,a2|0,a3|0,a4|0,a5|0);
}


function dynCall_vd(index,a1) {
  index = index|0;
  a1=+a1;
  FUNCTION_TABLE_vd[index&511](+a1);
}


function dynCall_vid(index,a1,a2) {
  index = index|0;
  a1=a1|0; a2=+a2;
  FUNCTION_TABLE_vid[index&511](a1|0,+a2);
}


function dynCall_vi(index,a1) {
  index = index|0;
  a1=a1|0;
  FUNCTION_TABLE_vi[index&511](a1|0);
}


function dynCall_vii(index,a1,a2) {
  index = index|0;
  a1=a1|0; a2=a2|0;
  FUNCTION_TABLE_vii[index&511](a1|0,a2|0);
}


function dynCall_ii(index,a1) {
  index = index|0;
  a1=a1|0;
  return FUNCTION_TABLE_ii[index&511](a1|0)|0;
}


function dynCall_viddd(index,a1,a2,a3,a4) {
  index = index|0;
  a1=a1|0; a2=+a2; a3=+a3; a4=+a4;
  FUNCTION_TABLE_viddd[index&511](a1|0,+a2,+a3,+a4);
}


function dynCall_vidd(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=+a2; a3=+a3;
  FUNCTION_TABLE_vidd[index&511](a1|0,+a2,+a3);
}


function dynCall_iiii(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0;
  return FUNCTION_TABLE_iiii[index&255](a1|0,a2|0,a3|0)|0;
}


function dynCall_viiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0;
  FUNCTION_TABLE_viiiiiiii[index&511](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0);
}


function dynCall_viiiiii(index,a1,a2,a3,a4,a5,a6) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
  FUNCTION_TABLE_viiiiii[index&511](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0);
}


function dynCall_viii(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0;
  FUNCTION_TABLE_viii[index&511](a1|0,a2|0,a3|0);
}


function dynCall_vidddd(index,a1,a2,a3,a4,a5) {
  index = index|0;
  a1=a1|0; a2=+a2; a3=+a3; a4=+a4; a5=+a5;
  FUNCTION_TABLE_vidddd[index&511](a1|0,+a2,+a3,+a4,+a5);
}


function dynCall_vdi(index,a1,a2) {
  index = index|0;
  a1=+a1; a2=a2|0;
  FUNCTION_TABLE_vdi[index&511](+a1,a2|0);
}


function dynCall_viiiiiii(index,a1,a2,a3,a4,a5,a6,a7) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0;
  FUNCTION_TABLE_viiiiiii[index&511](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0);
}


function dynCall_viiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0; a9=a9|0;
  FUNCTION_TABLE_viiiiiiiii[index&255](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0,a9|0);
}


function dynCall_iii(index,a1,a2) {
  index = index|0;
  a1=a1|0; a2=a2|0;
  return FUNCTION_TABLE_iii[index&255](a1|0,a2|0)|0;
}


function dynCall_i(index) {
  index = index|0;
  
  return FUNCTION_TABLE_i[index&511]()|0;
}


function dynCall_iiiii(index,a1,a2,a3,a4) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  return FUNCTION_TABLE_iiiii[index&255](a1|0,a2|0,a3|0,a4|0)|0;
}


function dynCall_vdddddd(index,a1,a2,a3,a4,a5,a6) {
  index = index|0;
  a1=+a1; a2=+a2; a3=+a3; a4=+a4; a5=+a5; a6=+a6;
  FUNCTION_TABLE_vdddddd[index&511](+a1,+a2,+a3,+a4,+a5,+a6);
}


function dynCall_vdddd(index,a1,a2,a3,a4) {
  index = index|0;
  a1=+a1; a2=+a2; a3=+a3; a4=+a4;
  FUNCTION_TABLE_vdddd[index&511](+a1,+a2,+a3,+a4);
}


function dynCall_vdd(index,a1,a2) {
  index = index|0;
  a1=+a1; a2=+a2;
  FUNCTION_TABLE_vdd[index&511](+a1,+a2);
}


function dynCall_v(index) {
  index = index|0;
  
  FUNCTION_TABLE_v[index&511]();
}


function dynCall_viid(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=+a3;
  FUNCTION_TABLE_viid[index&511](a1|0,a2|0,+a3);
}


function dynCall_viiii(index,a1,a2,a3,a4) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  FUNCTION_TABLE_viiii[index&511](a1|0,a2|0,a3|0,a4|0);
}

function b0(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(0);
}
function _emscripten_glUniform4i__wrapper(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; _emscripten_glUniform4i(p0|0,p1|0,p2|0,p3|0,p4|0);
}
function _emscripten_glFramebufferTexture2D__wrapper(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; _emscripten_glFramebufferTexture2D(p0|0,p1|0,p2|0,p3|0,p4|0);
}
function _emscripten_glShaderBinary__wrapper(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; _emscripten_glShaderBinary(p0|0,p1|0,p2|0,p3|0,p4|0);
}
function _emscripten_glDrawElementsInstanced__wrapper(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; _emscripten_glDrawElementsInstanced(p0|0,p1|0,p2|0,p3|0,p4|0);
}
function b1(p0) {
 p0 = +p0; nullFunc_vd(1);
}
function _emscripten_glClearDepth__wrapper(p0) {
 p0 = +p0; _emscripten_glClearDepth(+p0);
}
function _emscripten_glClearDepthf__wrapper(p0) {
 p0 = +p0; _emscripten_glClearDepthf(+p0);
}
function _emscripten_glLineWidth__wrapper(p0) {
 p0 = +p0; _emscripten_glLineWidth(+p0);
}
function b2(p0,p1) {
 p0 = p0|0;p1 = +p1; nullFunc_vid(2);
}
function _emscripten_glUniform1f__wrapper(p0,p1) {
 p0 = p0|0;p1 = +p1; _emscripten_glUniform1f(p0|0,+p1);
}
function _emscripten_glVertexAttrib1f__wrapper(p0,p1) {
 p0 = p0|0;p1 = +p1; _emscripten_glVertexAttrib1f(p0|0,+p1);
}
function b3(p0) {
 p0 = p0|0; nullFunc_vi(3);
}
function _emscripten_glDeleteShader__wrapper(p0) {
 p0 = p0|0; _emscripten_glDeleteShader(p0|0);
}
function _emscripten_glCompileShader__wrapper(p0) {
 p0 = p0|0; _emscripten_glCompileShader(p0|0);
}
function _emscripten_glDeleteProgram__wrapper(p0) {
 p0 = p0|0; _emscripten_glDeleteProgram(p0|0);
}
function _emscripten_glLinkProgram__wrapper(p0) {
 p0 = p0|0; _emscripten_glLinkProgram(p0|0);
}
function _emscripten_glUseProgram__wrapper(p0) {
 p0 = p0|0; _emscripten_glUseProgram(p0|0);
}
function _emscripten_glValidateProgram__wrapper(p0) {
 p0 = p0|0; _emscripten_glValidateProgram(p0|0);
}
function _emscripten_glDeleteObjectARB__wrapper(p0) {
 p0 = p0|0; _emscripten_glDeleteObjectARB(p0|0);
}
function _emscripten_glEnableClientState__wrapper(p0) {
 p0 = p0|0; _emscripten_glEnableClientState(p0|0);
}
function _emscripten_glClientActiveTexture__wrapper(p0) {
 p0 = p0|0; _emscripten_glClientActiveTexture(p0|0);
}
function _emscripten_glBindVertexArray__wrapper(p0) {
 p0 = p0|0; _emscripten_glBindVertexArray(p0|0);
}
function _emscripten_glMatrixMode__wrapper(p0) {
 p0 = p0|0; _emscripten_glMatrixMode(p0|0);
}
function _emscripten_glLoadMatrixf__wrapper(p0) {
 p0 = p0|0; _emscripten_glLoadMatrixf(p0|0);
}
function _emscripten_glEnableVertexAttribArray__wrapper(p0) {
 p0 = p0|0; _emscripten_glEnableVertexAttribArray(p0|0);
}
function _emscripten_glDisableVertexAttribArray__wrapper(p0) {
 p0 = p0|0; _emscripten_glDisableVertexAttribArray(p0|0);
}
function _emscripten_glDepthFunc__wrapper(p0) {
 p0 = p0|0; _emscripten_glDepthFunc(p0|0);
}
function _emscripten_glEnable__wrapper(p0) {
 p0 = p0|0; _emscripten_glEnable(p0|0);
}
function _emscripten_glDisable__wrapper(p0) {
 p0 = p0|0; _emscripten_glDisable(p0|0);
}
function _emscripten_glFrontFace__wrapper(p0) {
 p0 = p0|0; _emscripten_glFrontFace(p0|0);
}
function _emscripten_glCullFace__wrapper(p0) {
 p0 = p0|0; _emscripten_glCullFace(p0|0);
}
function _emscripten_glClear__wrapper(p0) {
 p0 = p0|0; _emscripten_glClear(p0|0);
}
function _emscripten_glClearStencil__wrapper(p0) {
 p0 = p0|0; _emscripten_glClearStencil(p0|0);
}
function _emscripten_glDepthMask__wrapper(p0) {
 p0 = p0|0; _emscripten_glDepthMask(p0|0);
}
function _emscripten_glStencilMask__wrapper(p0) {
 p0 = p0|0; _emscripten_glStencilMask(p0|0);
}
function _emscripten_glGenerateMipmap__wrapper(p0) {
 p0 = p0|0; _emscripten_glGenerateMipmap(p0|0);
}
function _emscripten_glActiveTexture__wrapper(p0) {
 p0 = p0|0; _emscripten_glActiveTexture(p0|0);
}
function _emscripten_glBlendEquation__wrapper(p0) {
 p0 = p0|0; _emscripten_glBlendEquation(p0|0);
}
function b4(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(4);
}
function _emscripten_glPixelStorei__wrapper(p0,p1) {
 p0 = p0|0;p1 = p1|0; _emscripten_glPixelStorei(p0|0,p1|0);
}
function _emscripten_glGetIntegerv__wrapper(p0,p1) {
 p0 = p0|0;p1 = p1|0; _emscripten_glGetIntegerv(p0|0,p1|0);
}
function _emscripten_glGetFloatv__wrapper(p0,p1) {
 p0 = p0|0;p1 = p1|0; _emscripten_glGetFloatv(p0|0,p1|0);
}
function _emscripten_glGetBooleanv__wrapper(p0,p1) {
 p0 = p0|0;p1 = p1|0; _emscripten_glGetBooleanv(p0|0,p1|0);
}
function _emscripten_glGenTextures__wrapper(p0,p1) {
 p0 = p0|0;p1 = p1|0; _emscripten_glGenTextures(p0|0,p1|0);
}
function _emscripten_glDeleteTextures__wrapper(p0,p1) {
 p0 = p0|0;p1 = p1|0; _emscripten_glDeleteTextures(p0|0,p1|0);
}
function _emscripten_glBindTexture__wrapper(p0,p1) {
 p0 = p0|0;p1 = p1|0; _emscripten_glBindTexture(p0|0,p1|0);
}
function _emscripten_glGenBuffers__wrapper(p0,p1) {
 p0 = p0|0;p1 = p1|0; _emscripten_glGenBuffers(p0|0,p1|0);
}
function _emscripten_glDeleteBuffers__wrapper(p0,p1) {
 p0 = p0|0;p1 = p1|0; _emscripten_glDeleteBuffers(p0|0,p1|0);
}
function _emscripten_glGenRenderbuffers__wrapper(p0,p1) {
 p0 = p0|0;p1 = p1|0; _emscripten_glGenRenderbuffers(p0|0,p1|0);
}
function _emscripten_glDeleteRenderbuffers__wrapper(p0,p1) {
 p0 = p0|0;p1 = p1|0; _emscripten_glDeleteRenderbuffers(p0|0,p1|0);
}
function _emscripten_glBindRenderbuffer__wrapper(p0,p1) {
 p0 = p0|0;p1 = p1|0; _emscripten_glBindRenderbuffer(p0|0,p1|0);
}
function _emscripten_glUniform1i__wrapper(p0,p1) {
 p0 = p0|0;p1 = p1|0; _emscripten_glUniform1i(p0|0,p1|0);
}
function _emscripten_glBindBuffer__wrapper(p0,p1) {
 p0 = p0|0;p1 = p1|0; _emscripten_glBindBuffer(p0|0,p1|0);
}
function _emscripten_glVertexAttrib1fv__wrapper(p0,p1) {
 p0 = p0|0;p1 = p1|0; _emscripten_glVertexAttrib1fv(p0|0,p1|0);
}
function _emscripten_glVertexAttrib2fv__wrapper(p0,p1) {
 p0 = p0|0;p1 = p1|0; _emscripten_glVertexAttrib2fv(p0|0,p1|0);
}
function _emscripten_glVertexAttrib3fv__wrapper(p0,p1) {
 p0 = p0|0;p1 = p1|0; _emscripten_glVertexAttrib3fv(p0|0,p1|0);
}
function _emscripten_glVertexAttrib4fv__wrapper(p0,p1) {
 p0 = p0|0;p1 = p1|0; _emscripten_glVertexAttrib4fv(p0|0,p1|0);
}
function _emscripten_glAttachShader__wrapper(p0,p1) {
 p0 = p0|0;p1 = p1|0; _emscripten_glAttachShader(p0|0,p1|0);
}
function _emscripten_glDetachShader__wrapper(p0,p1) {
 p0 = p0|0;p1 = p1|0; _emscripten_glDetachShader(p0|0,p1|0);
}
function _emscripten_glBindFramebuffer__wrapper(p0,p1) {
 p0 = p0|0;p1 = p1|0; _emscripten_glBindFramebuffer(p0|0,p1|0);
}
function _emscripten_glGenFramebuffers__wrapper(p0,p1) {
 p0 = p0|0;p1 = p1|0; _emscripten_glGenFramebuffers(p0|0,p1|0);
}
function _emscripten_glDeleteFramebuffers__wrapper(p0,p1) {
 p0 = p0|0;p1 = p1|0; _emscripten_glDeleteFramebuffers(p0|0,p1|0);
}
function _emscripten_glBindProgramARB__wrapper(p0,p1) {
 p0 = p0|0;p1 = p1|0; _emscripten_glBindProgramARB(p0|0,p1|0);
}
function _emscripten_glGetPointerv__wrapper(p0,p1) {
 p0 = p0|0;p1 = p1|0; _emscripten_glGetPointerv(p0|0,p1|0);
}
function _emscripten_glGenVertexArrays__wrapper(p0,p1) {
 p0 = p0|0;p1 = p1|0; _emscripten_glGenVertexArrays(p0|0,p1|0);
}
function _emscripten_glDeleteVertexArrays__wrapper(p0,p1) {
 p0 = p0|0;p1 = p1|0; _emscripten_glDeleteVertexArrays(p0|0,p1|0);
}
function _emscripten_glVertexAttribDivisor__wrapper(p0,p1) {
 p0 = p0|0;p1 = p1|0; _emscripten_glVertexAttribDivisor(p0|0,p1|0);
}
function _emscripten_glBlendFunc__wrapper(p0,p1) {
 p0 = p0|0;p1 = p1|0; _emscripten_glBlendFunc(p0|0,p1|0);
}
function _emscripten_glBlendEquationSeparate__wrapper(p0,p1) {
 p0 = p0|0;p1 = p1|0; _emscripten_glBlendEquationSeparate(p0|0,p1|0);
}
function _emscripten_glStencilMaskSeparate__wrapper(p0,p1) {
 p0 = p0|0;p1 = p1|0; _emscripten_glStencilMaskSeparate(p0|0,p1|0);
}
function _emscripten_glHint__wrapper(p0,p1) {
 p0 = p0|0;p1 = p1|0; _emscripten_glHint(p0|0,p1|0);
}
function _emscripten_glDrawBuffers__wrapper(p0,p1) {
 p0 = p0|0;p1 = p1|0; _emscripten_glDrawBuffers(p0|0,p1|0);
}
function b5(p0) {
 p0 = p0|0; nullFunc_ii(5);return 0;
}
function _emscripten_glGetString__wrapper(p0) {
 p0 = p0|0; return _emscripten_glGetString(p0|0)|0;
}
function _emscripten_glIsTexture__wrapper(p0) {
 p0 = p0|0; return _emscripten_glIsTexture(p0|0)|0;
}
function _emscripten_glIsBuffer__wrapper(p0) {
 p0 = p0|0; return _emscripten_glIsBuffer(p0|0)|0;
}
function _emscripten_glIsRenderbuffer__wrapper(p0) {
 p0 = p0|0; return _emscripten_glIsRenderbuffer(p0|0)|0;
}
function _emscripten_glCreateShader__wrapper(p0) {
 p0 = p0|0; return _emscripten_glCreateShader(p0|0)|0;
}
function _emscripten_glIsShader__wrapper(p0) {
 p0 = p0|0; return _emscripten_glIsShader(p0|0)|0;
}
function _emscripten_glIsProgram__wrapper(p0) {
 p0 = p0|0; return _emscripten_glIsProgram(p0|0)|0;
}
function _emscripten_glIsFramebuffer__wrapper(p0) {
 p0 = p0|0; return _emscripten_glIsFramebuffer(p0|0)|0;
}
function _emscripten_glCheckFramebufferStatus__wrapper(p0) {
 p0 = p0|0; return _emscripten_glCheckFramebufferStatus(p0|0)|0;
}
function _emscripten_glIsEnabled__wrapper(p0) {
 p0 = p0|0; return _emscripten_glIsEnabled(p0|0)|0;
}
function b6(p0,p1,p2,p3) {
 p0 = p0|0;p1 = +p1;p2 = +p2;p3 = +p3; nullFunc_viddd(6);
}
function _emscripten_glUniform3f__wrapper(p0,p1,p2,p3) {
 p0 = p0|0;p1 = +p1;p2 = +p2;p3 = +p3; _emscripten_glUniform3f(p0|0,+p1,+p2,+p3);
}
function _emscripten_glVertexAttrib3f__wrapper(p0,p1,p2,p3) {
 p0 = p0|0;p1 = +p1;p2 = +p2;p3 = +p3; _emscripten_glVertexAttrib3f(p0|0,+p1,+p2,+p3);
}
function b7(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(7);
}
function _emscripten_glUniform2f__wrapper(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; _emscripten_glUniform2f(p0|0,+p1,+p2);
}
function _emscripten_glVertexAttrib2f__wrapper(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; _emscripten_glVertexAttrib2f(p0|0,+p1,+p2);
}
function b8(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(8);return 0;
}
function b9(p0,p1,p2,p3,p4,p5,p6,p7) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0;p7 = p7|0; nullFunc_viiiiiiii(9);
}
function _emscripten_glCompressedTexImage2D__wrapper(p0,p1,p2,p3,p4,p5,p6,p7) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0;p7 = p7|0; _emscripten_glCompressedTexImage2D(p0|0,p1|0,p2|0,p3|0,p4|0,p5|0,p6|0,p7|0);
}
function _emscripten_glCopyTexImage2D__wrapper(p0,p1,p2,p3,p4,p5,p6,p7) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0;p7 = p7|0; _emscripten_glCopyTexImage2D(p0|0,p1|0,p2|0,p3|0,p4|0,p5|0,p6|0,p7|0);
}
function _emscripten_glCopyTexSubImage2D__wrapper(p0,p1,p2,p3,p4,p5,p6,p7) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0;p7 = p7|0; _emscripten_glCopyTexSubImage2D(p0|0,p1|0,p2|0,p3|0,p4|0,p5|0,p6|0,p7|0);
}
function b10(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(10);
}
function _emscripten_glDrawRangeElements__wrapper(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; _emscripten_glDrawRangeElements(p0|0,p1|0,p2|0,p3|0,p4|0,p5|0);
}
function _emscripten_glVertexAttribPointer__wrapper(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; _emscripten_glVertexAttribPointer(p0|0,p1|0,p2|0,p3|0,p4|0,p5|0);
}
function b11(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(11);
}
function _emscripten_glGetTexParameterfv__wrapper(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; _emscripten_glGetTexParameterfv(p0|0,p1|0,p2|0);
}
function _emscripten_glGetTexParameteriv__wrapper(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; _emscripten_glGetTexParameteriv(p0|0,p1|0,p2|0);
}
function _emscripten_glTexParameterfv__wrapper(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; _emscripten_glTexParameterfv(p0|0,p1|0,p2|0);
}
function _emscripten_glTexParameteriv__wrapper(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; _emscripten_glTexParameteriv(p0|0,p1|0,p2|0);
}
function _emscripten_glGetBufferParameteriv__wrapper(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; _emscripten_glGetBufferParameteriv(p0|0,p1|0,p2|0);
}
function _emscripten_glGetRenderbufferParameteriv__wrapper(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; _emscripten_glGetRenderbufferParameteriv(p0|0,p1|0,p2|0);
}
function _emscripten_glGetUniformfv__wrapper(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; _emscripten_glGetUniformfv(p0|0,p1|0,p2|0);
}
function _emscripten_glGetUniformiv__wrapper(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; _emscripten_glGetUniformiv(p0|0,p1|0,p2|0);
}
function _emscripten_glGetVertexAttribfv__wrapper(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; _emscripten_glGetVertexAttribfv(p0|0,p1|0,p2|0);
}
function _emscripten_glGetVertexAttribiv__wrapper(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; _emscripten_glGetVertexAttribiv(p0|0,p1|0,p2|0);
}
function _emscripten_glGetVertexAttribPointerv__wrapper(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; _emscripten_glGetVertexAttribPointerv(p0|0,p1|0,p2|0);
}
function _emscripten_glUniform2i__wrapper(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; _emscripten_glUniform2i(p0|0,p1|0,p2|0);
}
function _emscripten_glUniform1iv__wrapper(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; _emscripten_glUniform1iv(p0|0,p1|0,p2|0);
}
function _emscripten_glUniform2iv__wrapper(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; _emscripten_glUniform2iv(p0|0,p1|0,p2|0);
}
function _emscripten_glUniform3iv__wrapper(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; _emscripten_glUniform3iv(p0|0,p1|0,p2|0);
}
function _emscripten_glUniform4iv__wrapper(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; _emscripten_glUniform4iv(p0|0,p1|0,p2|0);
}
function _emscripten_glUniform1fv__wrapper(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; _emscripten_glUniform1fv(p0|0,p1|0,p2|0);
}
function _emscripten_glUniform2fv__wrapper(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; _emscripten_glUniform2fv(p0|0,p1|0,p2|0);
}
function _emscripten_glUniform3fv__wrapper(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; _emscripten_glUniform3fv(p0|0,p1|0,p2|0);
}
function _emscripten_glUniform4fv__wrapper(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; _emscripten_glUniform4fv(p0|0,p1|0,p2|0);
}
function _emscripten_glGetShaderiv__wrapper(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; _emscripten_glGetShaderiv(p0|0,p1|0,p2|0);
}
function _emscripten_glGetProgramiv__wrapper(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; _emscripten_glGetProgramiv(p0|0,p1|0,p2|0);
}
function _emscripten_glBindAttribLocation__wrapper(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; _emscripten_glBindAttribLocation(p0|0,p1|0,p2|0);
}
function _emscripten_glGetObjectParameterivARB__wrapper(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; _emscripten_glGetObjectParameterivARB(p0|0,p1|0,p2|0);
}
function _emscripten_glNormalPointer__wrapper(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; _emscripten_glNormalPointer(p0|0,p1|0,p2|0);
}
function _emscripten_glDrawArrays__wrapper(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; _emscripten_glDrawArrays(p0|0,p1|0,p2|0);
}
function _emscripten_glTexParameteri__wrapper(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; _emscripten_glTexParameteri(p0|0,p1|0,p2|0);
}
function _emscripten_glStencilFunc__wrapper(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; _emscripten_glStencilFunc(p0|0,p1|0,p2|0);
}
function _emscripten_glStencilOp__wrapper(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; _emscripten_glStencilOp(p0|0,p1|0,p2|0);
}
function b12(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = +p1;p2 = +p2;p3 = +p3;p4 = +p4; nullFunc_vidddd(12);
}
function _emscripten_glUniform4f__wrapper(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = +p1;p2 = +p2;p3 = +p3;p4 = +p4; _emscripten_glUniform4f(p0|0,+p1,+p2,+p3,+p4);
}
function _emscripten_glVertexAttrib4f__wrapper(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = +p1;p2 = +p2;p3 = +p3;p4 = +p4; _emscripten_glVertexAttrib4f(p0|0,+p1,+p2,+p3,+p4);
}
function b13(p0,p1) {
 p0 = +p0;p1 = p1|0; nullFunc_vdi(13);
}
function _emscripten_glSampleCoverage__wrapper(p0,p1) {
 p0 = +p0;p1 = p1|0; _emscripten_glSampleCoverage(+p0,p1|0);
}
function b14(p0,p1,p2,p3,p4,p5,p6) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0; nullFunc_viiiiiii(14);
}
function _emscripten_glReadPixels__wrapper(p0,p1,p2,p3,p4,p5,p6) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0; _emscripten_glReadPixels(p0|0,p1|0,p2|0,p3|0,p4|0,p5|0,p6|0);
}
function _emscripten_glGetActiveUniform__wrapper(p0,p1,p2,p3,p4,p5,p6) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0; _emscripten_glGetActiveUniform(p0|0,p1|0,p2|0,p3|0,p4|0,p5|0,p6|0);
}
function _emscripten_glGetActiveAttrib__wrapper(p0,p1,p2,p3,p4,p5,p6) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0; _emscripten_glGetActiveAttrib(p0|0,p1|0,p2|0,p3|0,p4|0,p5|0,p6|0);
}
function b15(p0,p1,p2,p3,p4,p5,p6,p7,p8) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0;p7 = p7|0;p8 = p8|0; nullFunc_viiiiiiiii(15);
}
function _emscripten_glCompressedTexSubImage2D__wrapper(p0,p1,p2,p3,p4,p5,p6,p7,p8) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0;p7 = p7|0;p8 = p8|0; _emscripten_glCompressedTexSubImage2D(p0|0,p1|0,p2|0,p3|0,p4|0,p5|0,p6|0,p7|0,p8|0);
}
function _emscripten_glTexImage2D__wrapper(p0,p1,p2,p3,p4,p5,p6,p7,p8) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0;p7 = p7|0;p8 = p8|0; _emscripten_glTexImage2D(p0|0,p1|0,p2|0,p3|0,p4|0,p5|0,p6|0,p7|0,p8|0);
}
function _emscripten_glTexSubImage2D__wrapper(p0,p1,p2,p3,p4,p5,p6,p7,p8) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0;p7 = p7|0;p8 = p8|0; _emscripten_glTexSubImage2D(p0|0,p1|0,p2|0,p3|0,p4|0,p5|0,p6|0,p7|0,p8|0);
}
function b16(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(16);return 0;
}
function _emscripten_glGetUniformLocation__wrapper(p0,p1) {
 p0 = p0|0;p1 = p1|0; return _emscripten_glGetUniformLocation(p0|0,p1|0)|0;
}
function _emscripten_glGetAttribLocation__wrapper(p0,p1) {
 p0 = p0|0;p1 = p1|0; return _emscripten_glGetAttribLocation(p0|0,p1|0)|0;
}
function b17() {
 ; nullFunc_i(17);return 0;
}
function _emscripten_glCreateProgram__wrapper() {
 ; return _emscripten_glCreateProgram()|0;
}
function _emscripten_glGetError__wrapper() {
 ; return _emscripten_glGetError()|0;
}
function b18(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(18);return 0;
}
function b19(p0,p1,p2,p3,p4,p5) {
 p0 = +p0;p1 = +p1;p2 = +p2;p3 = +p3;p4 = +p4;p5 = +p5; nullFunc_vdddddd(19);
}
function _emscripten_glFrustum__wrapper(p0,p1,p2,p3,p4,p5) {
 p0 = +p0;p1 = +p1;p2 = +p2;p3 = +p3;p4 = +p4;p5 = +p5; _emscripten_glFrustum(+p0,+p1,+p2,+p3,+p4,+p5);
}
function b20(p0,p1,p2,p3) {
 p0 = +p0;p1 = +p1;p2 = +p2;p3 = +p3; nullFunc_vdddd(20);
}
function _emscripten_glRotatef__wrapper(p0,p1,p2,p3) {
 p0 = +p0;p1 = +p1;p2 = +p2;p3 = +p3; _emscripten_glRotatef(+p0,+p1,+p2,+p3);
}
function _emscripten_glClearColor__wrapper(p0,p1,p2,p3) {
 p0 = +p0;p1 = +p1;p2 = +p2;p3 = +p3; _emscripten_glClearColor(+p0,+p1,+p2,+p3);
}
function _emscripten_glBlendColor__wrapper(p0,p1,p2,p3) {
 p0 = +p0;p1 = +p1;p2 = +p2;p3 = +p3; _emscripten_glBlendColor(+p0,+p1,+p2,+p3);
}
function b21(p0,p1) {
 p0 = +p0;p1 = +p1; nullFunc_vdd(21);
}
function _emscripten_glDepthRange__wrapper(p0,p1) {
 p0 = +p0;p1 = +p1; _emscripten_glDepthRange(+p0,+p1);
}
function _emscripten_glDepthRangef__wrapper(p0,p1) {
 p0 = +p0;p1 = +p1; _emscripten_glDepthRangef(+p0,+p1);
}
function _emscripten_glPolygonOffset__wrapper(p0,p1) {
 p0 = +p0;p1 = +p1; _emscripten_glPolygonOffset(+p0,+p1);
}
function b22() {
 ; nullFunc_v(22);
}
function _emscripten_glLoadIdentity__wrapper() {
 ; _emscripten_glLoadIdentity();
}
function _emscripten_glReleaseShaderCompiler__wrapper() {
 ; _emscripten_glReleaseShaderCompiler();
}
function _emscripten_glFinish__wrapper() {
 ; _emscripten_glFinish();
}
function _emscripten_glFlush__wrapper() {
 ; _emscripten_glFlush();
}
function b23(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = +p2; nullFunc_viid(23);
}
function _emscripten_glTexParameterf__wrapper(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = +p2; _emscripten_glTexParameterf(p0|0,p1|0,+p2);
}
function b24(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(24);
}
function _emscripten_glBufferData__wrapper(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; _emscripten_glBufferData(p0|0,p1|0,p2|0,p3|0);
}
function _emscripten_glBufferSubData__wrapper(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; _emscripten_glBufferSubData(p0|0,p1|0,p2|0,p3|0);
}
function _emscripten_glUniform3i__wrapper(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; _emscripten_glUniform3i(p0|0,p1|0,p2|0,p3|0);
}
function _emscripten_glUniformMatrix2fv__wrapper(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; _emscripten_glUniformMatrix2fv(p0|0,p1|0,p2|0,p3|0);
}
function _emscripten_glUniformMatrix3fv__wrapper(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; _emscripten_glUniformMatrix3fv(p0|0,p1|0,p2|0,p3|0);
}
function _emscripten_glUniformMatrix4fv__wrapper(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; _emscripten_glUniformMatrix4fv(p0|0,p1|0,p2|0,p3|0);
}
function _emscripten_glGetAttachedShaders__wrapper(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; _emscripten_glGetAttachedShaders(p0|0,p1|0,p2|0,p3|0);
}
function _emscripten_glShaderSource__wrapper(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; _emscripten_glShaderSource(p0|0,p1|0,p2|0,p3|0);
}
function _emscripten_glGetShaderSource__wrapper(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; _emscripten_glGetShaderSource(p0|0,p1|0,p2|0,p3|0);
}
function _emscripten_glGetShaderInfoLog__wrapper(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; _emscripten_glGetShaderInfoLog(p0|0,p1|0,p2|0,p3|0);
}
function _emscripten_glGetShaderPrecisionFormat__wrapper(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; _emscripten_glGetShaderPrecisionFormat(p0|0,p1|0,p2|0,p3|0);
}
function _emscripten_glGetProgramInfoLog__wrapper(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; _emscripten_glGetProgramInfoLog(p0|0,p1|0,p2|0,p3|0);
}
function _emscripten_glFramebufferRenderbuffer__wrapper(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; _emscripten_glFramebufferRenderbuffer(p0|0,p1|0,p2|0,p3|0);
}
function _emscripten_glGetFramebufferAttachmentParameteriv__wrapper(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; _emscripten_glGetFramebufferAttachmentParameteriv(p0|0,p1|0,p2|0,p3|0);
}
function _emscripten_glGetInfoLogARB__wrapper(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; _emscripten_glGetInfoLogARB(p0|0,p1|0,p2|0,p3|0);
}
function _emscripten_glVertexPointer__wrapper(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; _emscripten_glVertexPointer(p0|0,p1|0,p2|0,p3|0);
}
function _emscripten_glTexCoordPointer__wrapper(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; _emscripten_glTexCoordPointer(p0|0,p1|0,p2|0,p3|0);
}
function _emscripten_glColorPointer__wrapper(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; _emscripten_glColorPointer(p0|0,p1|0,p2|0,p3|0);
}
function _emscripten_glDrawElements__wrapper(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; _emscripten_glDrawElements(p0|0,p1|0,p2|0,p3|0);
}
function _emscripten_glDrawArraysInstanced__wrapper(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; _emscripten_glDrawArraysInstanced(p0|0,p1|0,p2|0,p3|0);
}
function _emscripten_glViewport__wrapper(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; _emscripten_glViewport(p0|0,p1|0,p2|0,p3|0);
}
function _emscripten_glScissor__wrapper(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; _emscripten_glScissor(p0|0,p1|0,p2|0,p3|0);
}
function _emscripten_glColorMask__wrapper(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; _emscripten_glColorMask(p0|0,p1|0,p2|0,p3|0);
}
function _emscripten_glRenderbufferStorage__wrapper(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; _emscripten_glRenderbufferStorage(p0|0,p1|0,p2|0,p3|0);
}
function _emscripten_glBlendFuncSeparate__wrapper(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; _emscripten_glBlendFuncSeparate(p0|0,p1|0,p2|0,p3|0);
}
function _emscripten_glStencilFuncSeparate__wrapper(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; _emscripten_glStencilFuncSeparate(p0|0,p1|0,p2|0,p3|0);
}
function _emscripten_glStencilOpSeparate__wrapper(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; _emscripten_glStencilOpSeparate(p0|0,p1|0,p2|0,p3|0);
}

// EMSCRIPTEN_END_FUNCS
var FUNCTION_TABLE_viiiii = [b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,_emscripten_glUniform4i__wrapper,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,_emscripten_glFramebufferTexture2D__wrapper,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,_emscripten_glShaderBinary__wrapper,b0,b0,b0,b0,_emscripten_glDrawElementsInstanced__wrapper,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0];
var FUNCTION_TABLE_vd = [b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,_emscripten_glClearDepth__wrapper,_emscripten_glClearDepthf__wrapper,b1,b1,b1,b1,b1,b1,_emscripten_glLineWidth__wrapper,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1];
var FUNCTION_TABLE_vid = [b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,_emscripten_glUniform1f__wrapper,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,_emscripten_glVertexAttrib1f__wrapper,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2];
var FUNCTION_TABLE_vi = [b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,_OnMouseWheel,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,_emscripten_glDeleteShader__wrapper,b3,b3,b3,_emscripten_glCompileShader__wrapper,b3,b3,b3,b3,b3,_emscripten_glDeleteProgram__wrapper,b3,b3,b3,_emscripten_glLinkProgram__wrapper,b3,_emscripten_glUseProgram__wrapper,_emscripten_glValidateProgram__wrapper,b3,b3,b3,b3,b3,b3,b3,b3,b3,_emscripten_glDeleteObjectARB__wrapper,b3,b3,b3,b3,b3,_emscripten_glEnableClientState__wrapper,b3,b3,b3,b3,_emscripten_glClientActiveTexture__wrapper,b3,b3
,_emscripten_glBindVertexArray__wrapper,_emscripten_glMatrixMode__wrapper,b3,_emscripten_glLoadMatrixf__wrapper,b3,b3,b3,_emscripten_glEnableVertexAttribArray__wrapper,_emscripten_glDisableVertexAttribArray__wrapper,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,_emscripten_glDepthFunc__wrapper,_emscripten_glEnable__wrapper,_emscripten_glDisable__wrapper,_emscripten_glFrontFace__wrapper,_emscripten_glCullFace__wrapper,_emscripten_glClear__wrapper,b3,_emscripten_glClearStencil__wrapper,_emscripten_glDepthMask__wrapper,_emscripten_glStencilMask__wrapper,b3,_emscripten_glGenerateMipmap__wrapper,_emscripten_glActiveTexture__wrapper,_emscripten_glBlendEquation__wrapper,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,_cleanup387,_cleanup392,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3];
var FUNCTION_TABLE_vii = [b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,_OnKeyPressed
,_OnCharPressed,b4,_OnResize,b4,b4,_OnMouseMove,_OnMouseClick,_growstack,_f_call,_resume,_unroll,_f_parser,_dothecall,b4,_f_luaopen,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,_hookf,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,_emscripten_glPixelStorei__wrapper,b4,_emscripten_glGetIntegerv__wrapper,_emscripten_glGetFloatv__wrapper,_emscripten_glGetBooleanv__wrapper,_emscripten_glGenTextures__wrapper,_emscripten_glDeleteTextures__wrapper,b4,b4,b4,b4,b4,_emscripten_glBindTexture__wrapper,b4
,b4,b4,b4,b4,_emscripten_glGenBuffers__wrapper,_emscripten_glDeleteBuffers__wrapper,b4,b4,b4,b4,_emscripten_glGenRenderbuffers__wrapper,_emscripten_glDeleteRenderbuffers__wrapper,_emscripten_glBindRenderbuffer__wrapper,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,_emscripten_glUniform1i__wrapper,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,_emscripten_glBindBuffer__wrapper,_emscripten_glVertexAttrib1fv__wrapper,_emscripten_glVertexAttrib2fv__wrapper,_emscripten_glVertexAttrib3fv__wrapper,_emscripten_glVertexAttrib4fv__wrapper,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,_emscripten_glAttachShader__wrapper,_emscripten_glDetachShader__wrapper,b4,b4,b4,b4,b4,b4,b4,_emscripten_glBindFramebuffer__wrapper,_emscripten_glGenFramebuffers__wrapper,_emscripten_glDeleteFramebuffers__wrapper,b4,b4,b4,b4,b4,b4,b4,_emscripten_glBindProgramARB__wrapper,_emscripten_glGetPointerv__wrapper,b4,b4,b4,b4,b4,b4,b4,_emscripten_glGenVertexArrays__wrapper,_emscripten_glDeleteVertexArrays__wrapper,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,_emscripten_glVertexAttribDivisor__wrapper,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,_emscripten_glBlendFunc__wrapper,_emscripten_glBlendEquationSeparate__wrapper,b4,b4,_emscripten_glStencilMaskSeparate__wrapper,_emscripten_glHint__wrapper,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,_emscripten_glDrawBuffers__wrapper,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4];
var FUNCTION_TABLE_ii = [b5,_luaB_assert,_luaB_collectgarbage,_luaB_dofile,_luaB_error,_luaB_getmetatable,_luaB_ipairs,_luaB_loadfile,_luaB_load,_luaB_next,_luaB_pairs,_luaB_pcall,_luaB_print,_luaB_rawequal,_luaB_rawlen,_luaB_rawget,_luaB_rawset,_luaB_select,_luaB_setmetatable,_luaB_tonumber,_luaB_tostring,_luaB_type,_luaB_xpcall,_b_arshift,_b_and,_b_not,_b_or,_b_xor,_b_test
,_b_extract,_b_lrot,_b_lshift,_b_replace,_b_rrot,_b_rshift,_luaB_cocreate,_luaB_coresume,_luaB_corunning,_luaB_costatus,_luaB_cowrap,_luaB_yield,_db_debug,_db_getuservalue,_db_gethook,_db_getinfo,_db_getlocal,_db_getregistry,_db_getmetatable,_db_getupvalue,_db_upvaluejoin,_db_upvalueid,_db_setuservalue,_db_sethook,_db_setlocal,_db_setmetatable,_db_setupvalue,_db_traceback,_io_close,_io_flush
,_io_input,_io_lines,_io_open,_io_output,_io_popen,_io_read,_io_tmpfile,_io_type,_io_write,_f_flush,_f_lines,_f_read,_f_seek,_f_setvbuf,_f_write,_f_gc,_f_tostring,_math_abs,_math_acos,_math_asin,_math_atan2,_math_atan,_math_ceil,_math_cosh,_math_cos,_math_deg,_math_exp,_math_floor,_math_fmod,_math_frexp
,_math_ldexp,_math_log10,_math_log,_math_max,_math_min,_math_modf,_math_pow,_math_rad,_math_random,_math_randomseed,_math_sinh,_math_sin,_math_sqrt,_math_tanh,_math_tan,_os_clock,_os_date,_os_difftime,_os_execute,_os_exit,_os_getenv,_os_remove,_os_rename,_os_setlocale,_os_time,_os_tmpname,_str_byte,_str_char,_str_dump,_str_find
,_str_format,_gmatch,_str_gsub,_str_len,_str_lower,_str_match,_str_rep,_str_reverse,_str_sub,_str_upper,_tconcat,_maxn,_tinsert,_pack,_unpack,_tremove,_sort,_ll_loadlib,_ll_searchpath,_ll_seeall,_ll_module,_ll_require,b5,___stdio_close,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,_panic,_luaopen_base,_luaopen_package,_luaopen_coroutine,_luaopen_table,_luaopen_io,_luaopen_os,_luaopen_string,_luaopen_bit32,_luaopen_math,_luaopen_debug,_dofilecont
,_ipairsaux,b5,_pcallcont,_luaB_auxwrap,b5,_io_noclose,_io_readline,_io_fclose,_io_pclose,b5,_gmatch_aux,_gctm,_searcher_preload,_searcher_Lua,_searcher_C,_searcher_Croot,b5,_emscripten_glGetString__wrapper,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,_emscripten_glIsTexture__wrapper,b5,b5,b5,b5,b5,_emscripten_glIsBuffer__wrapper,b5,b5,b5,b5,_emscripten_glIsRenderbuffer__wrapper,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,_emscripten_glCreateShader__wrapper,b5,b5,b5,b5,b5,b5,b5,b5,_emscripten_glIsShader__wrapper,b5,b5
,b5,b5,b5,b5,b5,b5,b5,_emscripten_glIsProgram__wrapper,b5,b5,b5,b5,b5,b5,b5,_emscripten_glIsFramebuffer__wrapper,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,_emscripten_glCheckFramebufferStatus__wrapper,b5,b5,b5,_emscripten_glIsEnabled__wrapper,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5];
var FUNCTION_TABLE_viddd = [b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,_emscripten_glUniform3f__wrapper,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,_emscripten_glVertexAttrib3f__wrapper,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6];
var FUNCTION_TABLE_vidd = [b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,_emscripten_glUniform2f__wrapper,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,_emscripten_glVertexAttrib2f__wrapper,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7];
var FUNCTION_TABLE_iiii = [b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,_sn_write,b8,___stdio_write,___stdio_seek,___stdio_read,___stdout_write,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,_getF,_getS,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,_generic_reader,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8];
var FUNCTION_TABLE_viiiiiiii = [b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,_emscripten_glCompressedTexImage2D__wrapper,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,_emscripten_glCopyTexImage2D__wrapper,_emscripten_glCopyTexSubImage2D__wrapper,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9];
var FUNCTION_TABLE_viiiiii = [b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,_emscripten_glDrawRangeElements__wrapper,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,_emscripten_glVertexAttribPointer__wrapper,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10];
var FUNCTION_TABLE_viii = [b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,_emscripten_glGetTexParameterfv__wrapper,_emscripten_glGetTexParameteriv__wrapper,_emscripten_glTexParameterfv__wrapper,_emscripten_glTexParameteriv__wrapper,b11,b11,b11,_emscripten_glGetBufferParameteriv__wrapper,b11,b11,b11,b11,b11,b11,_emscripten_glGetRenderbufferParameteriv__wrapper,b11,_emscripten_glGetUniformfv__wrapper,_emscripten_glGetUniformiv__wrapper,b11,_emscripten_glGetVertexAttribfv__wrapper,_emscripten_glGetVertexAttribiv__wrapper,_emscripten_glGetVertexAttribPointerv__wrapper,b11,b11,b11,b11,b11,b11,_emscripten_glUniform2i__wrapper,b11,b11
,_emscripten_glUniform1iv__wrapper,_emscripten_glUniform2iv__wrapper,_emscripten_glUniform3iv__wrapper,_emscripten_glUniform4iv__wrapper,_emscripten_glUniform1fv__wrapper,_emscripten_glUniform2fv__wrapper,_emscripten_glUniform3fv__wrapper,_emscripten_glUniform4fv__wrapper,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,_emscripten_glGetShaderiv__wrapper,_emscripten_glGetProgramiv__wrapper,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,_emscripten_glBindAttribLocation__wrapper,b11,b11,b11,b11,b11,b11,b11,b11,_emscripten_glGetObjectParameterivARB__wrapper,b11,b11,b11,b11,b11,b11,b11,_emscripten_glNormalPointer__wrapper,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,_emscripten_glDrawArrays__wrapper,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,_emscripten_glTexParameteri__wrapper,b11,b11,_emscripten_glStencilFunc__wrapper,_emscripten_glStencilOp__wrapper,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11];
var FUNCTION_TABLE_vidddd = [b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,_emscripten_glUniform4f__wrapper,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,_emscripten_glVertexAttrib4f__wrapper,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12];
var FUNCTION_TABLE_vdi = [b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,_emscripten_glSampleCoverage__wrapper,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13];
var FUNCTION_TABLE_viiiiiii = [b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,_emscripten_glReadPixels__wrapper,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,_emscripten_glGetActiveUniform__wrapper,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,_emscripten_glGetActiveAttrib__wrapper,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14];
var FUNCTION_TABLE_viiiiiiiii = [b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,_emscripten_glCompressedTexSubImage2D__wrapper,_emscripten_glTexImage2D__wrapper,_emscripten_glTexSubImage2D__wrapper,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15];
var FUNCTION_TABLE_iii = [b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,_lua_newstate,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,_emscripten_glGetUniformLocation__wrapper,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,_emscripten_glGetAttribLocation__wrapper];
var FUNCTION_TABLE_i = [b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,_OnClose,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,_emscripten_glCreateProgram__wrapper,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,_emscripten_glGetError__wrapper,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17];
var FUNCTION_TABLE_iiiii = [b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,_l_alloc,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,_writer,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18];
var FUNCTION_TABLE_vdddddd = [b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,_emscripten_glFrustum__wrapper,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19];
var FUNCTION_TABLE_vdddd = [b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,_emscripten_glRotatef__wrapper,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,_emscripten_glClearColor__wrapper,b20,b20,b20,b20,b20,_emscripten_glBlendColor__wrapper,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20];
var FUNCTION_TABLE_vdd = [b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,_emscripten_glDepthRange__wrapper,_emscripten_glDepthRangef__wrapper,b21,b21,_emscripten_glPolygonOffset__wrapper,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21];
var FUNCTION_TABLE_v = [b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,_Iteration,b22
,b22,b22,b22,_OnRefresh,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,_emscripten_glLoadIdentity__wrapper,b22,b22,b22,b22,b22,b22,b22,b22,b22,_emscripten_glReleaseShaderCompiler__wrapper,b22,b22,b22,b22,_emscripten_glFinish__wrapper,_emscripten_glFlush__wrapper,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22];
var FUNCTION_TABLE_viid = [b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,_emscripten_glTexParameterf__wrapper,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23];
var FUNCTION_TABLE_viiii = [b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24,b24,b24,b24,b24,_emscripten_glBufferData__wrapper,_emscripten_glBufferSubData__wrapper,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,_emscripten_glUniform3i__wrapper,b24
,b24,b24,b24,b24,b24,b24,b24,b24,_emscripten_glUniformMatrix2fv__wrapper,_emscripten_glUniformMatrix3fv__wrapper,_emscripten_glUniformMatrix4fv__wrapper,b24,b24,b24,b24,b24,b24,b24,b24,b24,_emscripten_glGetAttachedShaders__wrapper,_emscripten_glShaderSource__wrapper,_emscripten_glGetShaderSource__wrapper,b24,_emscripten_glGetShaderInfoLog__wrapper,b24,b24,b24,b24,b24
,b24,b24,_emscripten_glGetShaderPrecisionFormat__wrapper,b24,_emscripten_glGetProgramInfoLog__wrapper,b24,b24,b24,b24,b24,b24,b24,_emscripten_glFramebufferRenderbuffer__wrapper,b24,_emscripten_glGetFramebufferAttachmentParameteriv__wrapper,b24,b24,b24,_emscripten_glGetInfoLogARB__wrapper,b24,b24,b24,b24,_emscripten_glVertexPointer__wrapper,_emscripten_glTexCoordPointer__wrapper,b24,_emscripten_glColorPointer__wrapper,b24,b24,b24
,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,_emscripten_glDrawElements__wrapper,b24,b24,b24,b24,_emscripten_glDrawArraysInstanced__wrapper,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,_emscripten_glViewport__wrapper,b24,_emscripten_glScissor__wrapper,b24,_emscripten_glColorMask__wrapper,_emscripten_glRenderbufferStorage__wrapper,_emscripten_glBlendFuncSeparate__wrapper,b24,_emscripten_glStencilFuncSeparate__wrapper,_emscripten_glStencilOpSeparate__wrapper,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24];

  return { _testSetjmp: _testSetjmp, _saveSetjmp: _saveSetjmp, _fflush: _fflush, _main: _main, _realloc: _realloc, _i64Add: _i64Add, _strstr: _strstr, _i64Subtract: _i64Subtract, _memset: _memset, _malloc: _malloc, _memcpy: _memcpy, _sleep: _sleep, _bitshift64Lshr: _bitshift64Lshr, _free: _free, _emscripten_GetProcAddress: _emscripten_GetProcAddress, ___errno_location: ___errno_location, _bitshift64Shl: _bitshift64Shl, runPostSets: runPostSets, stackAlloc: stackAlloc, stackSave: stackSave, stackRestore: stackRestore, establishStackSpace: establishStackSpace, setThrew: setThrew, setTempRet0: setTempRet0, getTempRet0: getTempRet0, dynCall_viiiii: dynCall_viiiii, dynCall_vd: dynCall_vd, dynCall_vid: dynCall_vid, dynCall_vi: dynCall_vi, dynCall_vii: dynCall_vii, dynCall_ii: dynCall_ii, dynCall_viddd: dynCall_viddd, dynCall_vidd: dynCall_vidd, dynCall_iiii: dynCall_iiii, dynCall_viiiiiiii: dynCall_viiiiiiii, dynCall_viiiiii: dynCall_viiiiii, dynCall_viii: dynCall_viii, dynCall_vidddd: dynCall_vidddd, dynCall_vdi: dynCall_vdi, dynCall_viiiiiii: dynCall_viiiiiii, dynCall_viiiiiiiii: dynCall_viiiiiiiii, dynCall_iii: dynCall_iii, dynCall_i: dynCall_i, dynCall_iiiii: dynCall_iiiii, dynCall_vdddddd: dynCall_vdddddd, dynCall_vdddd: dynCall_vdddd, dynCall_vdd: dynCall_vdd, dynCall_v: dynCall_v, dynCall_viid: dynCall_viid, dynCall_viiii: dynCall_viiii };
})
// EMSCRIPTEN_END_ASM
(Module.asmGlobalArg, Module.asmLibraryArg, buffer);
var real__testSetjmp = asm["_testSetjmp"]; asm["_testSetjmp"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__testSetjmp.apply(null, arguments);
};

var real__saveSetjmp = asm["_saveSetjmp"]; asm["_saveSetjmp"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__saveSetjmp.apply(null, arguments);
};

var real__fflush = asm["_fflush"]; asm["_fflush"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__fflush.apply(null, arguments);
};

var real__main = asm["_main"]; asm["_main"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__main.apply(null, arguments);
};

var real__realloc = asm["_realloc"]; asm["_realloc"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__realloc.apply(null, arguments);
};

var real__i64Add = asm["_i64Add"]; asm["_i64Add"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__i64Add.apply(null, arguments);
};

var real__strstr = asm["_strstr"]; asm["_strstr"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__strstr.apply(null, arguments);
};

var real__i64Subtract = asm["_i64Subtract"]; asm["_i64Subtract"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__i64Subtract.apply(null, arguments);
};

var real__malloc = asm["_malloc"]; asm["_malloc"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__malloc.apply(null, arguments);
};

var real__sleep = asm["_sleep"]; asm["_sleep"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__sleep.apply(null, arguments);
};

var real__bitshift64Lshr = asm["_bitshift64Lshr"]; asm["_bitshift64Lshr"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__bitshift64Lshr.apply(null, arguments);
};

var real__free = asm["_free"]; asm["_free"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__free.apply(null, arguments);
};

var real__emscripten_GetProcAddress = asm["_emscripten_GetProcAddress"]; asm["_emscripten_GetProcAddress"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__emscripten_GetProcAddress.apply(null, arguments);
};

var real____errno_location = asm["___errno_location"]; asm["___errno_location"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____errno_location.apply(null, arguments);
};

var real__bitshift64Shl = asm["_bitshift64Shl"]; asm["_bitshift64Shl"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__bitshift64Shl.apply(null, arguments);
};
var _testSetjmp = Module["_testSetjmp"] = asm["_testSetjmp"];
var _saveSetjmp = Module["_saveSetjmp"] = asm["_saveSetjmp"];
var _fflush = Module["_fflush"] = asm["_fflush"];
var _main = Module["_main"] = asm["_main"];
var _realloc = Module["_realloc"] = asm["_realloc"];
var _i64Add = Module["_i64Add"] = asm["_i64Add"];
var runPostSets = Module["runPostSets"] = asm["runPostSets"];
var _strstr = Module["_strstr"] = asm["_strstr"];
var _i64Subtract = Module["_i64Subtract"] = asm["_i64Subtract"];
var _memset = Module["_memset"] = asm["_memset"];
var _malloc = Module["_malloc"] = asm["_malloc"];
var _memcpy = Module["_memcpy"] = asm["_memcpy"];
var _sleep = Module["_sleep"] = asm["_sleep"];
var _bitshift64Lshr = Module["_bitshift64Lshr"] = asm["_bitshift64Lshr"];
var _free = Module["_free"] = asm["_free"];
var _emscripten_GetProcAddress = Module["_emscripten_GetProcAddress"] = asm["_emscripten_GetProcAddress"];
var ___errno_location = Module["___errno_location"] = asm["___errno_location"];
var _bitshift64Shl = Module["_bitshift64Shl"] = asm["_bitshift64Shl"];
var dynCall_viiiii = Module["dynCall_viiiii"] = asm["dynCall_viiiii"];
var dynCall_vd = Module["dynCall_vd"] = asm["dynCall_vd"];
var dynCall_vid = Module["dynCall_vid"] = asm["dynCall_vid"];
var dynCall_vi = Module["dynCall_vi"] = asm["dynCall_vi"];
var dynCall_vii = Module["dynCall_vii"] = asm["dynCall_vii"];
var dynCall_ii = Module["dynCall_ii"] = asm["dynCall_ii"];
var dynCall_viddd = Module["dynCall_viddd"] = asm["dynCall_viddd"];
var dynCall_vidd = Module["dynCall_vidd"] = asm["dynCall_vidd"];
var dynCall_iiii = Module["dynCall_iiii"] = asm["dynCall_iiii"];
var dynCall_viiiiiiii = Module["dynCall_viiiiiiii"] = asm["dynCall_viiiiiiii"];
var dynCall_viiiiii = Module["dynCall_viiiiii"] = asm["dynCall_viiiiii"];
var dynCall_viii = Module["dynCall_viii"] = asm["dynCall_viii"];
var dynCall_vidddd = Module["dynCall_vidddd"] = asm["dynCall_vidddd"];
var dynCall_vdi = Module["dynCall_vdi"] = asm["dynCall_vdi"];
var dynCall_viiiiiii = Module["dynCall_viiiiiii"] = asm["dynCall_viiiiiii"];
var dynCall_viiiiiiiii = Module["dynCall_viiiiiiiii"] = asm["dynCall_viiiiiiiii"];
var dynCall_iii = Module["dynCall_iii"] = asm["dynCall_iii"];
var dynCall_i = Module["dynCall_i"] = asm["dynCall_i"];
var dynCall_iiiii = Module["dynCall_iiiii"] = asm["dynCall_iiiii"];
var dynCall_vdddddd = Module["dynCall_vdddddd"] = asm["dynCall_vdddddd"];
var dynCall_vdddd = Module["dynCall_vdddd"] = asm["dynCall_vdddd"];
var dynCall_vdd = Module["dynCall_vdd"] = asm["dynCall_vdd"];
var dynCall_v = Module["dynCall_v"] = asm["dynCall_v"];
var dynCall_viid = Module["dynCall_viid"] = asm["dynCall_viid"];
var dynCall_viiii = Module["dynCall_viiii"] = asm["dynCall_viiii"];
;

Runtime.stackAlloc = asm['stackAlloc'];
Runtime.stackSave = asm['stackSave'];
Runtime.stackRestore = asm['stackRestore'];
Runtime.establishStackSpace = asm['establishStackSpace'];

Runtime.setTempRet0 = asm['setTempRet0'];
Runtime.getTempRet0 = asm['getTempRet0'];



// === Auto-generated postamble setup entry stuff ===


function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
};
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;

var initialStackTop;
var preloadStartTime = null;
var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!Module['calledRun']) run();
  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
}

Module['callMain'] = Module.callMain = function callMain(args) {
  assert(runDependencies == 0, 'cannot call main when async dependencies remain! (listen on __ATMAIN__)');
  assert(__ATPRERUN__.length == 0, 'cannot call main when preRun functions remain to be called');

  args = args || [];

  ensureInitRuntime();

  var argc = args.length+1;
  function pad() {
    for (var i = 0; i < 4-1; i++) {
      argv.push(0);
    }
  }
  var argv = [allocate(intArrayFromString(Module['thisProgram']), 'i8', ALLOC_NORMAL) ];
  pad();
  for (var i = 0; i < argc-1; i = i + 1) {
    argv.push(allocate(intArrayFromString(args[i]), 'i8', ALLOC_NORMAL));
    pad();
  }
  argv.push(0);
  argv = allocate(argv, 'i32', ALLOC_NORMAL);


  try {

    var ret = Module['_main'](argc, argv, 0);


    // if we're not running an evented main loop, it's time to exit
    exit(ret, /* implicit = */ true);
  }
  catch(e) {
    if (e instanceof ExitStatus) {
      // exit() throws this once it's done to make sure execution
      // has been stopped completely
      return;
    } else if (e == 'SimulateInfiniteLoop') {
      // running an evented main loop, don't immediately exit
      Module['noExitRuntime'] = true;
      return;
    } else {
      if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
      throw e;
    }
  } finally {
    calledMain = true;
  }
}




function run(args) {
  args = args || Module['arguments'];

  if (preloadStartTime === null) preloadStartTime = Date.now();

  if (runDependencies > 0) {
    Module.printErr('run() called, but dependencies remain, so not running');
    return;
  }

  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later
  if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame

  function doRun() {
    if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening
    Module['calledRun'] = true;

    if (ABORT) return; 

    ensureInitRuntime();

    preMain();

    if (ENVIRONMENT_IS_WEB && preloadStartTime !== null) {
      Module.printErr('pre-main prep time: ' + (Date.now() - preloadStartTime) + ' ms');
    }

    if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();

    if (Module['_main'] && shouldRunNow) Module['callMain'](args);

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else {
    doRun();
  }
}
Module['run'] = Module.run = run;

function exit(status, implicit) {
  if (implicit && Module['noExitRuntime']) {
    Module.printErr('exit(' + status + ') implicitly called by end of main(), but noExitRuntime, so not exiting the runtime (you can use emscripten_force_exit, if you want to force a true shutdown)');
    return;
  }

  if (Module['noExitRuntime']) {
    Module.printErr('exit(' + status + ') called, but noExitRuntime, so halting execution but not exiting the runtime or preventing further async execution (you can use emscripten_force_exit, if you want to force a true shutdown)');
  } else {

    ABORT = true;
    EXITSTATUS = status;
    STACKTOP = initialStackTop;

    exitRuntime();

    if (Module['onExit']) Module['onExit'](status);
  }

  if (ENVIRONMENT_IS_NODE) {
    // Work around a node.js bug where stdout buffer is not flushed at process exit:
    // Instead of process.exit() directly, wait for stdout flush event.
    // See https://github.com/joyent/node/issues/1669 and https://github.com/kripken/emscripten/issues/2582
    // Workaround is based on https://github.com/RReverser/acorn/commit/50ab143cecc9ed71a2d66f78b4aec3bb2e9844f6
    process['stdout']['once']('drain', function () {
      process['exit'](status);
    });
    console.log(' '); // Make sure to print something to force the drain event to occur, in case the stdout buffer was empty.
    // Work around another node bug where sometimes 'drain' is never fired - make another effort
    // to emit the exit status, after a significant delay (if node hasn't fired drain by then, give up)
    setTimeout(function() {
      process['exit'](status);
    }, 500);
  } else
  if (ENVIRONMENT_IS_SHELL && typeof quit === 'function') {
    quit(status);
  }
  // if we reach here, we must throw an exception to halt the current execution
  throw new ExitStatus(status);
}
Module['exit'] = Module.exit = exit;

var abortDecorators = [];

function abort(what) {
  if (what !== undefined) {
    Module.print(what);
    Module.printErr(what);
    what = JSON.stringify(what)
  } else {
    what = '';
  }

  ABORT = true;
  EXITSTATUS = 1;

  var extra = '';

  var output = 'abort(' + what + ') at ' + stackTrace() + extra;
  if (abortDecorators) {
    abortDecorators.forEach(function(decorator) {
      output = decorator(output, what);
    });
  }
  throw output;
}
Module['abort'] = Module.abort = abort;

// {{PRE_RUN_ADDITIONS}}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

// shouldRunNow refers to calling main(), not run().
var shouldRunNow = true;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}


run();

// {{POST_RUN_ADDITIONS}}






// {{MODULE_ADDITIONS}}



